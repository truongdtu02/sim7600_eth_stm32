
sim7600LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004748  080221a0  080221a0  000321a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080268e8  080268e8  00040568  2**0
                  CONTENTS
  4 .ARM          00000008  080268e8  080268e8  000368e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080268f0  080268f0  00040568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080268f0  080268f0  000368f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080268f4  080268f4  000368f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000568  20000000  080268f8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040568  2**0
                  CONTENTS
 10 .bss          000168ac  20000568  20000568  00040568  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20016e14  20016e14  00040568  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040568  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005e4ac  00000000  00000000  00040598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b1d3  00000000  00000000  0009ea44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003028  00000000  00000000  000a9c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002e60  00000000  00000000  000acc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018647  00000000  00000000  000afaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00047ede  00000000  00000000  000c80e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102dfc  00000000  00000000  0010ffc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00212dc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d3e8  00000000  00000000  00212e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  002201fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00220220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000568 	.word	0x20000568
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08022188 	.word	0x08022188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000056c 	.word	0x2000056c
 80001cc:	08022188 	.word	0x08022188

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9b9 	b.w	8000614 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <__NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	db0b      	blt.n	800065e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f003 021f 	and.w	r2, r3, #31
 800064c:	4907      	ldr	r1, [pc, #28]	; (800066c <__NVIC_EnableIRQ+0x38>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	095b      	lsrs	r3, r3, #5
 8000654:	2001      	movs	r0, #1
 8000656:	fa00 f202 	lsl.w	r2, r0, r2
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e100 	.word	0xe000e100

08000670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db0a      	blt.n	800069a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	b2da      	uxtb	r2, r3
 8000688:	490c      	ldr	r1, [pc, #48]	; (80006bc <__NVIC_SetPriority+0x4c>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000698:	e00a      	b.n	80006b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <__NVIC_SetPriority+0x50>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	3b04      	subs	r3, #4
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	761a      	strb	r2, [r3, #24]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	2b04      	cmp	r3, #4
 80006e0:	bf28      	it	cs
 80006e2:	2304      	movcs	r3, #4
 80006e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d902      	bls.n	80006f4 <NVIC_EncodePriority+0x30>
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3b03      	subs	r3, #3
 80006f2:	e000      	b.n	80006f6 <NVIC_EncodePriority+0x32>
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 32ff 	mov.w	r2, #4294967295
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43da      	mvns	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	401a      	ands	r2, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43d9      	mvns	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000732:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000736:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	2b00      	cmp	r3, #0
 8000740:	d013      	beq.n	800076a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000742:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000746:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800074a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00b      	beq.n	800076a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000752:	e000      	b.n	8000756 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000754:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000756:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0f9      	beq.n	8000754 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000760:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800076a:	687b      	ldr	r3, [r7, #4]
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LL_DMA_SetDataTransferDirection+0x44>)
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4413      	add	r3, r2
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000798:	4908      	ldr	r1, [pc, #32]	; (80007bc <LL_DMA_SetDataTransferDirection+0x44>)
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	440b      	add	r3, r1
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	440b      	add	r3, r1
 80007a6:	4619      	mov	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	600b      	str	r3, [r1, #0]
}
 80007ae:	bf00      	nop
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	08026318 	.word	0x08026318

080007c0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <LL_DMA_SetMode+0x44>)
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80007e0:	4908      	ldr	r1, [pc, #32]	; (8000804 <LL_DMA_SetMode+0x44>)
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	440b      	add	r3, r1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	440b      	add	r3, r1
 80007ee:	4619      	mov	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	600b      	str	r3, [r1, #0]
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	08026318 	.word	0x08026318

08000808 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <LL_DMA_SetPeriphIncMode+0x44>)
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4413      	add	r3, r2
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000828:	4908      	ldr	r1, [pc, #32]	; (800084c <LL_DMA_SetPeriphIncMode+0x44>)
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	440b      	add	r3, r1
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	440b      	add	r3, r1
 8000836:	4619      	mov	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4313      	orrs	r3, r2
 800083c:	600b      	str	r3, [r1, #0]
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	08026318 	.word	0x08026318

08000850 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <LL_DMA_SetMemoryIncMode+0x44>)
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4413      	add	r3, r2
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000870:	4908      	ldr	r1, [pc, #32]	; (8000894 <LL_DMA_SetMemoryIncMode+0x44>)
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	440b      	add	r3, r1
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	440b      	add	r3, r1
 800087e:	4619      	mov	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4313      	orrs	r3, r2
 8000884:	600b      	str	r3, [r1, #0]
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	08026318 	.word	0x08026318

08000898 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <LL_DMA_SetPeriphSize+0x44>)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	4413      	add	r3, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	4413      	add	r3, r2
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80008b8:	4908      	ldr	r1, [pc, #32]	; (80008dc <LL_DMA_SetPeriphSize+0x44>)
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	440b      	add	r3, r1
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	440b      	add	r3, r1
 80008c6:	4619      	mov	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	600b      	str	r3, [r1, #0]
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	08026318 	.word	0x08026318

080008e0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <LL_DMA_SetMemorySize+0x44>)
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	4413      	add	r3, r2
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000900:	4908      	ldr	r1, [pc, #32]	; (8000924 <LL_DMA_SetMemorySize+0x44>)
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	440b      	add	r3, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	440b      	add	r3, r1
 800090e:	4619      	mov	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4313      	orrs	r3, r2
 8000914:	600b      	str	r3, [r1, #0]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	08026318 	.word	0x08026318

08000928 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4413      	add	r3, r2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4413      	add	r3, r2
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000948:	4908      	ldr	r1, [pc, #32]	; (800096c <LL_DMA_SetStreamPriorityLevel+0x44>)
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	440b      	add	r3, r1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	440b      	add	r3, r1
 8000956:	4619      	mov	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4313      	orrs	r3, r2
 800095c:	600b      	str	r3, [r1, #0]
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	08026318 	.word	0x08026318

08000970 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <LL_DMA_SetChannelSelection+0x44>)
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4413      	add	r3, r2
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000990:	4908      	ldr	r1, [pc, #32]	; (80009b4 <LL_DMA_SetChannelSelection+0x44>)
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	440b      	add	r3, r1
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	440b      	add	r3, r1
 800099e:	4619      	mov	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	600b      	str	r3, [r1, #0]
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	08026318 	.word	0x08026318

080009b8 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80009c2:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <LL_DMA_DisableFifoMode+0x3c>)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <LL_DMA_DisableFifoMode+0x3c>)
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	440a      	add	r2, r1
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	4611      	mov	r1, r2
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	440a      	add	r2, r1
 80009e0:	f023 0304 	bic.w	r3, r3, #4
 80009e4:	6153      	str	r3, [r2, #20]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	08026318 	.word	0x08026318

080009f8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <LL_RCC_HSE_Enable+0x1c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <LL_RCC_HSE_Enable+0x1c>)
 8000a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <LL_RCC_HSE_IsReady+0x24>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a28:	bf0c      	ite	eq
 8000a2a:	2301      	moveq	r3, #1
 8000a2c:	2300      	movne	r3, #0
 8000a2e:	b2db      	uxtb	r3, r3
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <LL_RCC_SetSysClkSource+0x24>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 0203 	bic.w	r2, r3, #3
 8000a50:	4904      	ldr	r1, [pc, #16]	; (8000a64 <LL_RCC_SetSysClkSource+0x24>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	608b      	str	r3, [r1, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40023800 	.word	0x40023800

08000a68 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <LL_RCC_GetSysClkSource+0x18>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f003 030c 	and.w	r3, r3, #12
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a94:	4904      	ldr	r1, [pc, #16]	; (8000aa8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	608b      	str	r3, [r1, #8]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	40023800 	.word	0x40023800

08000aac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000abc:	4904      	ldr	r1, [pc, #16]	; (8000ad0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	608b      	str	r3, [r1, #8]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ae4:	4904      	ldr	r1, [pc, #16]	; (8000af8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	608b      	str	r3, [r1, #8]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40023800 	.word	0x40023800

08000afc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <LL_RCC_PLL_Enable+0x1c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <LL_RCC_PLL_Enable+0x1c>)
 8000b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <LL_RCC_PLL_IsReady+0x24>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2301      	moveq	r3, #1
 8000b30:	2300      	movne	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	68f9      	ldr	r1, [r7, #12]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	0192      	lsls	r2, r2, #6
 8000b64:	430a      	orrs	r2, r1
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b74:	4904      	ldr	r1, [pc, #16]	; (8000b88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	ffbf8000 	.word	0xffbf8000

08000b90 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b9c:	4907      	ldr	r1, [pc, #28]	; (8000bbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4013      	ands	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40023800 	.word	0x40023800

08000bf0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <LL_FLASH_SetLatency+0x24>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f023 0207 	bic.w	r2, r3, #7
 8000c00:	4904      	ldr	r1, [pc, #16]	; (8000c14 <LL_FLASH_SetLatency+0x24>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	600b      	str	r3, [r1, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40023c00 	.word	0x40023c00

08000c18 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <LL_FLASH_GetLatency+0x18>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0307 	and.w	r3, r3, #7
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023c00 	.word	0x40023c00

08000c34 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000c44:	4904      	ldr	r1, [pc, #16]	; (8000c58 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	40007000 	.word	0x40007000

08000c5c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60da      	str	r2, [r3, #12]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	615a      	str	r2, [r3, #20]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691b      	ldr	r3, [r3, #16]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	619a      	str	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SimStt_Timer_Callback>:
//debug
osTimerId_t SttCheckTimerID; //timer for check sim status
#define STT_CHECK_TIMER_INTERVAL 10 //ms
int oldSimStt = -1;
void SimStt_Timer_Callback(void *argument)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(Sim_STT != oldSimStt)
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <SimStt_Timer_Callback+0x34>)
 8000ce6:	f7ff ffdf 	bl	8000ca8 <LL_GPIO_ReadInputPort>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <SimStt_Timer_Callback+0x38>)
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d007      	beq.n	8000d08 <SimStt_Timer_Callback+0x2c>
  {
    oldSimStt = Sim_STT;
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <SimStt_Timer_Callback+0x34>)
 8000cfa:	f7ff ffd5 	bl	8000ca8 <LL_GPIO_ReadInputPort>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	4a03      	ldr	r2, [pc, #12]	; (8000d14 <SimStt_Timer_Callback+0x38>)
 8000d06:	6013      	str	r3, [r2, #0]
    LOG_WRITE("sim status %d\n", oldSimStt);
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40021000 	.word	0x40021000
 8000d14:	20000000 	.word	0x20000000

08000d18 <_write>:
/* USER CODE BEGIN PFP */
char* DeviceID = "123456781234567812345678";

// #if DEBUG_LOG
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e009      	b.n	8000d3e <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	60ba      	str	r2, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcf9 	bl	800072a <ITM_SendChar>
    for (int i = 0; i < len; i++)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	dbf1      	blt.n	8000d2a <_write+0x12>
    }
    return len;
 8000d46:	687b      	ldr	r3, [r7, #4]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <configureTimerForRunTimeStats>:
// #endif

volatile unsigned long ulHighFrequencyTimerTicks;

void configureTimerForRunTimeStats(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  ulHighFrequencyTimerTicks = 0;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <configureTimerForRunTimeStats+0x14>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim8);
 8000d5a:	4803      	ldr	r0, [pc, #12]	; (8000d68 <configureTimerForRunTimeStats+0x18>)
 8000d5c:	f003 f9ea 	bl	8004134 <HAL_TIM_Base_Start_IT>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200058f4 	.word	0x200058f4
 8000d68:	200058a0 	.word	0x200058a0

08000d6c <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ulHighFrequencyTimerTicks;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <getRunTimeCounterValue+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200058f4 	.word	0x200058f4

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d88:	f000 fe4c 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8c:	f000 f8a4 	bl	8000ed8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(30000); //wait for debug
 8000d90:	f247 5030 	movw	r0, #30000	; 0x7530
 8000d94:	f000 fe88 	bl	8001aa8 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 fa58 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d9c:	f000 fa3e 	bl	800121c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000da0:	f000 f9b8 	bl	8001114 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000da4:	f000 f918 	bl	8000fd8 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000da8:	f000 f964 	bl	8001074 <MX_TIM8_Init>
  MX_SPI2_Init();
 8000dac:	f000 f8de 	bl	8000f6c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000db0:	4831      	ldr	r0, [pc, #196]	; (8000e78 <main+0xf4>)
 8000db2:	f003 f957 	bl	8004064 <HAL_TIM_Base_Start>
  configureTimerForRunTimeStats();
 8000db6:	f7ff ffcb 	bl	8000d50 <configureTimerForRunTimeStats>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000dba:	f00a fa1d 	bl	800b1f8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of InitBinSem */
  InitBinSemHandle = osSemaphoreNew(1, 1, &InitBinSem_attributes);
 8000dbe:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <main+0xf8>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f00a fe65 	bl	800ba92 <osSemaphoreNew>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a2d      	ldr	r2, [pc, #180]	; (8000e80 <main+0xfc>)
 8000dcc:	6013      	str	r3, [r2, #0]

  /* creation of InitCountSem */
  InitCountSemHandle = osSemaphoreNew(2, 2, &InitCountSem_attributes);
 8000dce:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <main+0x100>)
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f00a fe5d 	bl	800ba92 <osSemaphoreNew>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a2b      	ldr	r2, [pc, #172]	; (8000e88 <main+0x104>)
 8000ddc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  SimATBinSem = osSemaphoreNew(1, 1, &SimATBinSem_attributes);
 8000dde:	4a2b      	ldr	r2, [pc, #172]	; (8000e8c <main+0x108>)
 8000de0:	2101      	movs	r1, #1
 8000de2:	2001      	movs	r0, #1
 8000de4:	f00a fe55 	bl	800ba92 <osSemaphoreNew>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <main+0x10c>)
 8000dec:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of InitTimerPeriodic */
  InitTimerPeriodicHandle = osTimerNew(CallbackTimerPeriodic, osTimerPeriodic, NULL, &InitTimerPeriodic_attributes);
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <main+0x110>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	2101      	movs	r1, #1
 8000df4:	4828      	ldr	r0, [pc, #160]	; (8000e98 <main+0x114>)
 8000df6:	f00a fb21 	bl	800b43c <osTimerNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <main+0x118>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of InitTimerOnce */
  InitTimerOnceHandle = osTimerNew(CallbackTimerOnce, osTimerOnce, NULL, &InitTimerOnce_attributes);
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <main+0x11c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	4827      	ldr	r0, [pc, #156]	; (8000ea4 <main+0x120>)
 8000e08:	f00a fb18 	bl	800b43c <osTimerNew>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a26      	ldr	r2, [pc, #152]	; (8000ea8 <main+0x124>)
 8000e10:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  TCPTimerOnceID = osTimerNew(TCP_Timer_Callback, osTimerOnce, NULL, NULL);
 8000e12:	2300      	movs	r3, #0
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	4824      	ldr	r0, [pc, #144]	; (8000eac <main+0x128>)
 8000e1a:	f00a fb0f 	bl	800b43c <osTimerNew>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <main+0x12c>)
 8000e22:	6013      	str	r3, [r2, #0]
  SttCheckTimerID = osTimerNew(SimStt_Timer_Callback, osTimerPeriodic, NULL, NULL);
 8000e24:	2300      	movs	r3, #0
 8000e26:	2200      	movs	r2, #0
 8000e28:	2101      	movs	r1, #1
 8000e2a:	4822      	ldr	r0, [pc, #136]	; (8000eb4 <main+0x130>)
 8000e2c:	f00a fb06 	bl	800b43c <osTimerNew>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <main+0x134>)
 8000e34:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of InitQueue */
  InitQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &InitQueue_attributes);
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <main+0x138>)
 8000e38:	2102      	movs	r1, #2
 8000e3a:	2010      	movs	r0, #16
 8000e3c:	f00a ff6c 	bl	800bd18 <osMessageQueueNew>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <main+0x13c>)
 8000e44:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e46:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <main+0x140>)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <main+0x144>)
 8000e4c:	f00a fa33 	bl	800b2b6 <osThreadNew>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a1e      	ldr	r2, [pc, #120]	; (8000ecc <main+0x148>)
 8000e54:	6013      	str	r3, [r2, #0]
  
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of InitEvent */
  InitEventHandle = osEventFlagsNew(&InitEvent_attributes);
 8000e56:	481e      	ldr	r0, [pc, #120]	; (8000ed0 <main+0x14c>)
 8000e58:	f00a fbd1 	bl	800b5fe <osEventFlagsNew>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4a1d      	ldr	r2, [pc, #116]	; (8000ed4 <main+0x150>)
 8000e60:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e62:	f00a f9ed 	bl	800b240 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  VS1063_Init();
  VS1063_SoftReset();
 8000e66:	f009 fb05 	bl	800a474 <VS1063_SoftReset>
  while (1)
  {
	  VS1063_PlayBeep();
 8000e6a:	f009 fbf7 	bl	800a65c <VS1063_PlayBeep>
	  HAL_Delay(500);
 8000e6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e72:	f000 fe19 	bl	8001aa8 <HAL_Delay>
	  VS1063_PlayBeep();
 8000e76:	e7f8      	b.n	8000e6a <main+0xe6>
 8000e78:	20005930 	.word	0x20005930
 8000e7c:	0802637c 	.word	0x0802637c
 8000e80:	2000591c 	.word	0x2000591c
 8000e84:	0802638c 	.word	0x0802638c
 8000e88:	20005918 	.word	0x20005918
 8000e8c:	080264e8 	.word	0x080264e8
 8000e90:	200058f8 	.word	0x200058f8
 8000e94:	0802635c 	.word	0x0802635c
 8000e98:	08001521 	.word	0x08001521
 8000e9c:	200058fc 	.word	0x200058fc
 8000ea0:	0802636c 	.word	0x0802636c
 8000ea4:	08001535 	.word	0x08001535
 8000ea8:	20005904 	.word	0x20005904
 8000eac:	08009f65 	.word	0x08009f65
 8000eb0:	200058e8 	.word	0x200058e8
 8000eb4:	08000cdd 	.word	0x08000cdd
 8000eb8:	2000597c 	.word	0x2000597c
 8000ebc:	08026344 	.word	0x08026344
 8000ec0:	200058ec 	.word	0x200058ec
 8000ec4:	08026320 	.word	0x08026320
 8000ec8:	08001395 	.word	0x08001395
 8000ecc:	20005844 	.word	0x20005844
 8000ed0:	0802639c 	.word	0x0802639c
 8000ed4:	2000583c 	.word	0x2000583c

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000edc:	2005      	movs	r0, #5
 8000ede:	f7ff fe87 	bl	8000bf0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff fe98 	bl	8000c18 <LL_FLASH_GetLatency>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b05      	cmp	r3, #5
 8000eec:	d1fa      	bne.n	8000ee4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000eee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ef2:	f7ff fe9f 	bl	8000c34 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000ef6:	f7ff fd7f 	bl	80009f8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000efa:	bf00      	nop
 8000efc:	f7ff fd8c 	bl	8000a18 <LL_RCC_HSE_IsReady>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d1fa      	bne.n	8000efc <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000f06:	2300      	movs	r3, #0
 8000f08:	22a8      	movs	r2, #168	; 0xa8
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000f10:	f7ff fe18 	bl	8000b44 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f14:	f7ff fdf2 	bl	8000afc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f18:	bf00      	nop
 8000f1a:	f7ff fdff 	bl	8000b1c <LL_RCC_PLL_IsReady>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d1fa      	bne.n	8000f1a <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fdad 	bl	8000a84 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000f2a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f2e:	f7ff fdbd 	bl	8000aac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000f32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f36:	f7ff fdcd 	bl	8000ad4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f7ff fd80 	bl	8000a40 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f40:	bf00      	nop
 8000f42:	f7ff fd91 	bl	8000a68 <LL_RCC_GetSysClkSource>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d1fa      	bne.n	8000f42 <SystemClock_Config+0x6a>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8000f4c:	4806      	ldr	r0, [pc, #24]	; (8000f68 <SystemClock_Config+0x90>)
 8000f4e:	f004 fa1f 	bl	8005390 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000f52:	200f      	movs	r0, #15
 8000f54:	f000 fbe0 	bl	8001718 <HAL_InitTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f5e:	f000 fb05 	bl	800156c <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	0a037a00 	.word	0x0a037a00

08000f6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <MX_SPI2_Init+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fa0:	2230      	movs	r2, #48	; 0x30
 8000fa2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fb8:	220a      	movs	r2, #10
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <MX_SPI2_Init+0x64>)
 8000fbe:	f002 fa59 	bl	8003474 <HAL_SPI_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fc8:	f000 fad0 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20005848 	.word	0x20005848
 8000fd4:	40003800 	.word	0x40003800

08000fd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_TIM2_Init+0x98>)
 8000ff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_TIM2_Init+0x98>)
 8000ffe:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001002:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_TIM2_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_TIM2_Init+0x98>)
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_TIM2_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_TIM2_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800101e:	4814      	ldr	r0, [pc, #80]	; (8001070 <MX_TIM2_Init+0x98>)
 8001020:	f002 ffd0 	bl	8003fc4 <HAL_TIM_Base_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800102a:	f000 fa9f 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001032:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4619      	mov	r1, r3
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_TIM2_Init+0x98>)
 800103c:	f003 f9f2 	bl	8004424 <HAL_TIM_ConfigClockSource>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001046:	f000 fa91 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <MX_TIM2_Init+0x98>)
 8001058:	f003 fc0e 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001062:	f000 fa83 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20005930 	.word	0x20005930

08001074 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_TIM8_Init+0x98>)
 8001092:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <MX_TIM8_Init+0x9c>)
 8001094:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_TIM8_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_TIM8_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_TIM8_Init+0x98>)
 80010a4:	f240 628f 	movw	r2, #1679	; 0x68f
 80010a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_TIM8_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <MX_TIM8_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_TIM8_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010bc:	4813      	ldr	r0, [pc, #76]	; (800110c <MX_TIM8_Init+0x98>)
 80010be:	f002 ff81 	bl	8003fc4 <HAL_TIM_Base_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80010c8:	f000 fa50 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	4619      	mov	r1, r3
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_TIM8_Init+0x98>)
 80010da:	f003 f9a3 	bl	8004424 <HAL_TIM_ConfigClockSource>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80010e4:	f000 fa42 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_TIM8_Init+0x98>)
 80010f6:	f003 fbbf 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001100:	f000 fa34 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200058a0 	.word	0x200058a0
 8001110:	40010400 	.word	0x40010400

08001114 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08e      	sub	sp, #56	; 0x38
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800113e:	2010      	movs	r0, #16
 8001140:	f7ff fd3e 	bl	8000bc0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001144:	2001      	movs	r0, #1
 8001146:	f7ff fd23 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  PA11   ------> USART1_CTS
  PA12   ------> USART1_RTS
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800114a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800114e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001150:	2302      	movs	r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001160:	2307      	movs	r3, #7
 8001162:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4829      	ldr	r0, [pc, #164]	; (8001210 <MX_USART1_UART_Init+0xfc>)
 800116a:	f003 fd1a 	bl	8004ba2 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 800116e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001172:	2102      	movs	r1, #2
 8001174:	4827      	ldr	r0, [pc, #156]	; (8001214 <MX_USART1_UART_Init+0x100>)
 8001176:	f7ff fbfb 	bl	8000970 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800117a:	2200      	movs	r2, #0
 800117c:	2102      	movs	r1, #2
 800117e:	4825      	ldr	r0, [pc, #148]	; (8001214 <MX_USART1_UART_Init+0x100>)
 8001180:	f7ff fafa 	bl	8000778 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_VERYHIGH);
 8001184:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001188:	2102      	movs	r1, #2
 800118a:	4822      	ldr	r0, [pc, #136]	; (8001214 <MX_USART1_UART_Init+0x100>)
 800118c:	f7ff fbcc 	bl	8000928 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 8001190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001194:	2102      	movs	r1, #2
 8001196:	481f      	ldr	r0, [pc, #124]	; (8001214 <MX_USART1_UART_Init+0x100>)
 8001198:	f7ff fb12 	bl	80007c0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 800119c:	2200      	movs	r2, #0
 800119e:	2102      	movs	r1, #2
 80011a0:	481c      	ldr	r0, [pc, #112]	; (8001214 <MX_USART1_UART_Init+0x100>)
 80011a2:	f7ff fb31 	bl	8000808 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 80011a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011aa:	2102      	movs	r1, #2
 80011ac:	4819      	ldr	r0, [pc, #100]	; (8001214 <MX_USART1_UART_Init+0x100>)
 80011ae:	f7ff fb4f 	bl	8000850 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	4817      	ldr	r0, [pc, #92]	; (8001214 <MX_USART1_UART_Init+0x100>)
 80011b8:	f7ff fb6e 	bl	8000898 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 80011bc:	2200      	movs	r2, #0
 80011be:	2102      	movs	r1, #2
 80011c0:	4814      	ldr	r0, [pc, #80]	; (8001214 <MX_USART1_UART_Init+0x100>)
 80011c2:	f7ff fb8d 	bl	80008e0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 80011c6:	2102      	movs	r1, #2
 80011c8:	4812      	ldr	r0, [pc, #72]	; (8001214 <MX_USART1_UART_Init+0x100>)
 80011ca:	f7ff fbf5 	bl	80009b8 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80011ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011d2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 80011dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011e2:	230c      	movs	r3, #12
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_RTS_CTS;
 80011e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4808      	ldr	r0, [pc, #32]	; (8001218 <MX_USART1_UART_Init+0x104>)
 80011f8:	f004 f84a 	bl	8005290 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_USART1_UART_Init+0x104>)
 80011fe:	f7ff fd3d 	bl	8000c7c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART1_UART_Init+0x104>)
 8001204:	f7ff fd2a 	bl	8000c5c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3738      	adds	r7, #56	; 0x38
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40020000 	.word	0x40020000
 8001214:	40026400 	.word	0x40026400
 8001218:	40011000 	.word	0x40011000

0800121c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001220:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001224:	f7ff fcb4 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001228:	f7ff f9f6 	bl	8000618 <__NVIC_GetPriorityGrouping>
 800122c:	4603      	mov	r3, r0
 800122e:	2200      	movs	r2, #0
 8001230:	2105      	movs	r1, #5
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fa46 	bl	80006c4 <NVIC_EncodePriority>
 8001238:	4603      	mov	r3, r0
 800123a:	4619      	mov	r1, r3
 800123c:	203a      	movs	r0, #58	; 0x3a
 800123e:	f7ff fa17 	bl	8000670 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001242:	203a      	movs	r0, #58	; 0x3a
 8001244:	f7ff f9f6 	bl	8000634 <__NVIC_EnableIRQ>

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001262:	2010      	movs	r0, #16
 8001264:	f7ff fc94 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001268:	2080      	movs	r0, #128	; 0x80
 800126a:	f7ff fc91 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800126e:	2004      	movs	r0, #4
 8001270:	f7ff fc8e 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff fc8b 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff fc88 	bl	8000b90 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	481b      	ldr	r0, [pc, #108]	; (80012f0 <MX_GPIO_Init+0xa4>)
 8001284:	f7ff fd1c 	bl	8000cc0 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13);
 8001288:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 800128c:	4819      	ldr	r0, [pc, #100]	; (80012f4 <MX_GPIO_Init+0xa8>)
 800128e:	f7ff fd17 	bl	8000cc0 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_9;
 8001292:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001296:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <MX_GPIO_Init+0xa8>)
 80012a6:	f003 fc7c 	bl	8004ba2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ae:	2301      	movs	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <MX_GPIO_Init+0xa4>)
 80012c4:	f003 fc6d 	bl	8004ba2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13;
 80012c8:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 80012cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ce:	2301      	movs	r3, #1
 80012d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_GPIO_Init+0xa8>)
 80012e4:	f003 fc5d 	bl	8004ba2 <LL_GPIO_Init>

}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40021000 	.word	0x40021000

080012f8 <StartConfigSimTask>:

/* USER CODE BEGIN 4 */

void StartConfigSimTask(void *argument)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	(void*) argument;
  //debug
  osTimerStart(SttCheckTimerID, STT_CHECK_TIMER_INTERVAL);
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <StartConfigSimTask+0x20>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	210a      	movs	r1, #10
 8001306:	4618      	mov	r0, r3
 8001308:	f00a f914 	bl	800b534 <osTimerStart>

  sim7600_fullConfigTask();
 800130c:	f007 fb24 	bl	8008958 <sim7600_fullConfigTask>
//    RSA2048_Pubkey_Encrypt(NULL, 0, input, strlen(input), output);
//    AES_Encrypt_Packet(output, 250);
//    AES_Decrypt_Packet(output, 256);
//    osDelay(1000);
//  }
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000597c 	.word	0x2000597c

0800131c <StartConnectSimTask>:

void StartConnectSimTask(void *argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	(void*) argument;
  sim7600_connectTask();
 8001324:	f007 fbc4 	bl	8008ab0 <sim7600_connectTask>
//	for(;;) {
//		osDelay(100);
//	}
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <StartSendSimTask>:

void StartSendSimTask(void *argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  sim7600_sendTask();
 8001338:	f007 fd2a 	bl	8008d90 <sim7600_sendTask>
//	for(;;) {
//			osDelay(100);
//		}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <StartRecvSimTask>:
void StartRecvSimTask(void *argument)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  sim7600_recvTask();
 800134c:	f007 fd5a 	bl	8008e04 <sim7600_recvTask>
//	for(;;) {
//			osDelay(100);
//		}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <StartConnectEthTask>:

void StartConnectEthTask(void *argument)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  (void*) argument;
  ethConnectTask();
 8001360:	f005 fb72 	bl	8006a48 <ethConnectTask>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <StartSendEthTask>:

void StartSendEthTask(void *argument)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  (void*) argument;
  ethSendTask();
 8001374:	f005 fa4a 	bl	800680c <ethSendTask>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <StartVs1063Task>:
  (void*) argument;
  ethRecvTask();
}

void StartVs1063Task(void *argument)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	(void*) argument;
	VS1063_PlayMP3_Task();
 8001388:	f009 fa2a 	bl	800a7e0 <VS1063_PlayMP3_Task>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800139c:	f009 fa68 	bl	800a870 <MX_LWIP_Init>
//	while(true)
//	{
//		VS1063_PlayBeep();
//		osDelay(500);
//	}
  if (netif_is_link_up(&gnetif) == 0)
 80013a0:	4b3c      	ldr	r3, [pc, #240]	; (8001494 <StartDefaultTask+0x100>)
 80013a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d142      	bne.n	8001436 <StartDefaultTask+0xa2>
  {
    //start with sim7600
    LOG_WRITE("sim7600 mode\n");

    ConfigSimEventID = osEventFlagsNew(&ConfigSimEvent_attributes);
 80013b0:	4839      	ldr	r0, [pc, #228]	; (8001498 <StartDefaultTask+0x104>)
 80013b2:	f00a f924 	bl	800b5fe <osEventFlagsNew>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a38      	ldr	r2, [pc, #224]	; (800149c <StartDefaultTask+0x108>)
 80013ba:	6013      	str	r3, [r2, #0]
    ConnectSimEventID = osEventFlagsNew(&ConnectSimEvent_attributes);
 80013bc:	4838      	ldr	r0, [pc, #224]	; (80014a0 <StartDefaultTask+0x10c>)
 80013be:	f00a f91e 	bl	800b5fe <osEventFlagsNew>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a37      	ldr	r2, [pc, #220]	; (80014a4 <StartDefaultTask+0x110>)
 80013c6:	6013      	str	r3, [r2, #0]
    SendSimEventID = osEventFlagsNew(&SendSimEvent_attributes);
 80013c8:	4837      	ldr	r0, [pc, #220]	; (80014a8 <StartDefaultTask+0x114>)
 80013ca:	f00a f918 	bl	800b5fe <osEventFlagsNew>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a36      	ldr	r2, [pc, #216]	; (80014ac <StartDefaultTask+0x118>)
 80013d2:	6013      	str	r3, [r2, #0]

    SendSimQueueID = osMessageQueueNew(5, sizeof(sendSimPack), &SendSimQueue_attributes);
 80013d4:	4a36      	ldr	r2, [pc, #216]	; (80014b0 <StartDefaultTask+0x11c>)
 80013d6:	211c      	movs	r1, #28
 80013d8:	2005      	movs	r0, #5
 80013da:	f00a fc9d 	bl	800bd18 <osMessageQueueNew>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a34      	ldr	r2, [pc, #208]	; (80014b4 <StartDefaultTask+0x120>)
 80013e2:	6013      	str	r3, [r2, #0]

    configSimTaskHandle = osThreadNew(StartConfigSimTask, NULL, &configSimTask_attributes);
 80013e4:	4a34      	ldr	r2, [pc, #208]	; (80014b8 <StartDefaultTask+0x124>)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4834      	ldr	r0, [pc, #208]	; (80014bc <StartDefaultTask+0x128>)
 80013ea:	f009 ff64 	bl	800b2b6 <osThreadNew>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <StartDefaultTask+0x12c>)
 80013f2:	6013      	str	r3, [r2, #0]
    connectSimTaskHandle = osThreadNew(StartConnectSimTask, NULL, &connectSimTask_attributes);
 80013f4:	4a33      	ldr	r2, [pc, #204]	; (80014c4 <StartDefaultTask+0x130>)
 80013f6:	2100      	movs	r1, #0
 80013f8:	4833      	ldr	r0, [pc, #204]	; (80014c8 <StartDefaultTask+0x134>)
 80013fa:	f009 ff5c 	bl	800b2b6 <osThreadNew>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a32      	ldr	r2, [pc, #200]	; (80014cc <StartDefaultTask+0x138>)
 8001402:	6013      	str	r3, [r2, #0]
    sendSimTaskHandle = osThreadNew(StartSendSimTask, NULL, &sendSimTask_attributes);
 8001404:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <StartDefaultTask+0x13c>)
 8001406:	2100      	movs	r1, #0
 8001408:	4832      	ldr	r0, [pc, #200]	; (80014d4 <StartDefaultTask+0x140>)
 800140a:	f009 ff54 	bl	800b2b6 <osThreadNew>
 800140e:	4603      	mov	r3, r0
 8001410:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <StartDefaultTask+0x144>)
 8001412:	6013      	str	r3, [r2, #0]
    recvSimTaskHandle = osThreadNew(StartRecvSimTask, NULL, &recvSimTask_attributes);
 8001414:	4a31      	ldr	r2, [pc, #196]	; (80014dc <StartDefaultTask+0x148>)
 8001416:	2100      	movs	r1, #0
 8001418:	4831      	ldr	r0, [pc, #196]	; (80014e0 <StartDefaultTask+0x14c>)
 800141a:	f009 ff4c 	bl	800b2b6 <osThreadNew>
 800141e:	4603      	mov	r3, r0
 8001420:	4a30      	ldr	r2, [pc, #192]	; (80014e4 <StartDefaultTask+0x150>)
 8001422:	6013      	str	r3, [r2, #0]
    vs1063TaskId = osThreadNew(StartVs1063Task, NULL, &vs1063Task_attributes);
 8001424:	4a30      	ldr	r2, [pc, #192]	; (80014e8 <StartDefaultTask+0x154>)
 8001426:	2100      	movs	r1, #0
 8001428:	4830      	ldr	r0, [pc, #192]	; (80014ec <StartDefaultTask+0x158>)
 800142a:	f009 ff44 	bl	800b2b6 <osThreadNew>
 800142e:	4603      	mov	r3, r0
 8001430:	4a2f      	ldr	r2, [pc, #188]	; (80014f0 <StartDefaultTask+0x15c>)
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e025      	b.n	8001482 <StartDefaultTask+0xee>
//    while(MX_LWIP_checkIsystem_ip_addr() == 0)
//        {
//        	osDelay(1000);
//        }

    ConnectEthEventID = osEventFlagsNew(&ConnectEthEvent_attributes);
 8001436:	482f      	ldr	r0, [pc, #188]	; (80014f4 <StartDefaultTask+0x160>)
 8001438:	f00a f8e1 	bl	800b5fe <osEventFlagsNew>
 800143c:	4603      	mov	r3, r0
 800143e:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <StartDefaultTask+0x164>)
 8001440:	6013      	str	r3, [r2, #0]

    SendEthQueueID = osMessageQueueNew(5, sizeof(sendEthPack), &SendEthQueue_attributes);
 8001442:	4a2e      	ldr	r2, [pc, #184]	; (80014fc <StartDefaultTask+0x168>)
 8001444:	2114      	movs	r1, #20
 8001446:	2005      	movs	r0, #5
 8001448:	f00a fc66 	bl	800bd18 <osMessageQueueNew>
 800144c:	4603      	mov	r3, r0
 800144e:	4a2c      	ldr	r2, [pc, #176]	; (8001500 <StartDefaultTask+0x16c>)
 8001450:	6013      	str	r3, [r2, #0]

    connectEthTaskId = osThreadNew(StartConnectEthTask, NULL, &connectEthTask_attributes);
 8001452:	4a2c      	ldr	r2, [pc, #176]	; (8001504 <StartDefaultTask+0x170>)
 8001454:	2100      	movs	r1, #0
 8001456:	482c      	ldr	r0, [pc, #176]	; (8001508 <StartDefaultTask+0x174>)
 8001458:	f009 ff2d 	bl	800b2b6 <osThreadNew>
 800145c:	4603      	mov	r3, r0
 800145e:	4a2b      	ldr	r2, [pc, #172]	; (800150c <StartDefaultTask+0x178>)
 8001460:	6013      	str	r3, [r2, #0]
    sendEthTaskId = osThreadNew(StartSendEthTask, NULL, &sendEthTask_attributes);
 8001462:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <StartDefaultTask+0x17c>)
 8001464:	2100      	movs	r1, #0
 8001466:	482b      	ldr	r0, [pc, #172]	; (8001514 <StartDefaultTask+0x180>)
 8001468:	f009 ff25 	bl	800b2b6 <osThreadNew>
 800146c:	4603      	mov	r3, r0
 800146e:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <StartDefaultTask+0x184>)
 8001470:	6013      	str	r3, [r2, #0]
    // recvEthTaskId = osThreadNew(StartRecvEthTask, NULL, &recvEthTask_attributes);
    vs1063TaskId = osThreadNew(StartVs1063Task, NULL, &vs1063Task_attributes);
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <StartDefaultTask+0x154>)
 8001474:	2100      	movs	r1, #0
 8001476:	481d      	ldr	r0, [pc, #116]	; (80014ec <StartDefaultTask+0x158>)
 8001478:	f009 ff1d 	bl	800b2b6 <osThreadNew>
 800147c:	4603      	mov	r3, r0
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <StartDefaultTask+0x15c>)
 8001480:	6013      	str	r3, [r2, #0]
  }

  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 8001482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001486:	f009 ffa8 	bl	800b3da <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800148a:	2140      	movs	r1, #64	; 0x40
 800148c:	4823      	ldr	r0, [pc, #140]	; (800151c <StartDefaultTask+0x188>)
 800148e:	f001 ff84 	bl	800339a <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001492:	e7f6      	b.n	8001482 <StartDefaultTask+0xee>
 8001494:	20010460 	.word	0x20010460
 8001498:	080264a8 	.word	0x080264a8
 800149c:	20005920 	.word	0x20005920
 80014a0:	080264b8 	.word	0x080264b8
 80014a4:	20005924 	.word	0x20005924
 80014a8:	080264c8 	.word	0x080264c8
 80014ac:	20005908 	.word	0x20005908
 80014b0:	080264f8 	.word	0x080264f8
 80014b4:	2000592c 	.word	0x2000592c
 80014b8:	080263ac 	.word	0x080263ac
 80014bc:	080012f9 	.word	0x080012f9
 80014c0:	200058f0 	.word	0x200058f0
 80014c4:	080263d0 	.word	0x080263d0
 80014c8:	0800131d 	.word	0x0800131d
 80014cc:	2000590c 	.word	0x2000590c
 80014d0:	080263f4 	.word	0x080263f4
 80014d4:	08001331 	.word	0x08001331
 80014d8:	20005980 	.word	0x20005980
 80014dc:	08026418 	.word	0x08026418
 80014e0:	08001345 	.word	0x08001345
 80014e4:	20005914 	.word	0x20005914
 80014e8:	08026484 	.word	0x08026484
 80014ec:	08001381 	.word	0x08001381
 80014f0:	20005900 	.word	0x20005900
 80014f4:	080264d8 	.word	0x080264d8
 80014f8:	20005984 	.word	0x20005984
 80014fc:	08026510 	.word	0x08026510
 8001500:	20005840 	.word	0x20005840
 8001504:	0802643c 	.word	0x0802643c
 8001508:	08001359 	.word	0x08001359
 800150c:	20005978 	.word	0x20005978
 8001510:	08026460 	.word	0x08026460
 8001514:	0800136d 	.word	0x0800136d
 8001518:	20005910 	.word	0x20005910
 800151c:	40020000 	.word	0x40020000

08001520 <CallbackTimerPeriodic>:
  /* USER CODE END 5 */
}

/* CallbackTimerPeriodic function */
void CallbackTimerPeriodic(void *argument)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerPeriodic */

  /* USER CODE END CallbackTimerPeriodic */
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <CallbackTimerOnce>:

/* CallbackTimerOnce function */
void CallbackTimerOnce(void *argument)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerOnce */

  /* USER CODE END CallbackTimerOnce */
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800155a:	f000 fa85 	bl	8001a68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40010000 	.word	0x40010000

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_MspInit+0x54>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_MspInit+0x54>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_MspInit+0x54>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_MspInit+0x54>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_MspInit+0x54>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_MspInit+0x54>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	210f      	movs	r1, #15
 80015ba:	f06f 0001 	mvn.w	r0, #1
 80015be:	f000 fb4f 	bl	8001c60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a28      	ldr	r2, [pc, #160]	; (8001690 <HAL_SPI_MspInit+0xc0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d14a      	bne.n	8001688 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HAL_SPI_MspInit+0xc4>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a26      	ldr	r2, [pc, #152]	; (8001694 <HAL_SPI_MspInit+0xc4>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_SPI_MspInit+0xc4>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_SPI_MspInit+0xc4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <HAL_SPI_MspInit+0xc4>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_SPI_MspInit+0xc4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_SPI_MspInit+0xc4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a18      	ldr	r2, [pc, #96]	; (8001694 <HAL_SPI_MspInit+0xc4>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_SPI_MspInit+0xc4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001646:	230c      	movs	r3, #12
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001656:	2305      	movs	r3, #5
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <HAL_SPI_MspInit+0xc8>)
 8001662:	f001 fccd 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001678:	2305      	movs	r3, #5
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <HAL_SPI_MspInit+0xcc>)
 8001684:	f001 fcbc 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40003800 	.word	0x40003800
 8001694:	40023800 	.word	0x40023800
 8001698:	40020800 	.word	0x40020800
 800169c:	40020400 	.word	0x40020400

080016a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b0:	d10e      	bne.n	80016d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_TIM_Base_MspInit+0x70>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <HAL_TIM_Base_MspInit+0x70>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_TIM_Base_MspInit+0x70>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80016ce:	e01a      	b.n	8001706 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM8)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_TIM_Base_MspInit+0x74>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d115      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_TIM_Base_MspInit+0x70>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_TIM_Base_MspInit+0x70>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_TIM_Base_MspInit+0x70>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2105      	movs	r1, #5
 80016fa:	202c      	movs	r0, #44	; 0x2c
 80016fc:	f000 fab0 	bl	8001c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001700:	202c      	movs	r0, #44	; 0x2c
 8001702:	f000 fac9 	bl	8001c98 <HAL_NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	2019      	movs	r0, #25
 800172e:	f000 fa97 	bl	8001c60 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001732:	2019      	movs	r0, #25
 8001734:	f000 fab0 	bl	8001c98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <HAL_InitTick+0xa4>)
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	4a1e      	ldr	r2, [pc, #120]	; (80017bc <HAL_InitTick+0xa4>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6453      	str	r3, [r2, #68]	; 0x44
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_InitTick+0xa4>)
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001754:	f107 0210 	add.w	r2, r7, #16
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fe56 	bl	8003410 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001764:	f001 fe40 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 8001768:	4603      	mov	r3, r0
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <HAL_InitTick+0xa8>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	0c9b      	lsrs	r3, r3, #18
 8001778:	3b01      	subs	r3, #1
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_InitTick+0xac>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <HAL_InitTick+0xb0>)
 8001780:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_InitTick+0xac>)
 8001784:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001788:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_InitTick+0xac>)
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_InitTick+0xac>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_InitTick+0xac>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <HAL_InitTick+0xac>)
 800179e:	f002 fc11 	bl	8003fc4 <HAL_TIM_Base_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d104      	bne.n	80017b2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80017a8:	4806      	ldr	r0, [pc, #24]	; (80017c4 <HAL_InitTick+0xac>)
 80017aa:	f002 fcc3 	bl	8004134 <HAL_TIM_Base_Start_IT>
 80017ae:	4603      	mov	r3, r0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3730      	adds	r7, #48	; 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	431bde83 	.word	0x431bde83
 80017c4:	20005988 	.word	0x20005988
 80017c8:	40010000 	.word	0x40010000

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler+0x4>

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <MemManage_Handler+0x4>

080017de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017fe:	f002 fd09 	bl	8004214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20005988 	.word	0x20005988

0800180c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	ulHighFrequencyTimerTicks++;
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a03      	ldr	r2, [pc, #12]	; (8001824 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001818:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800181a:	4803      	ldr	r0, [pc, #12]	; (8001828 <TIM8_UP_TIM13_IRQHandler+0x1c>)
 800181c:	f002 fcfa 	bl	8004214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200058f4 	.word	0x200058f4
 8001828:	200058a0 	.word	0x200058a0

0800182c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <ETH_IRQHandler+0x10>)
 8001842:	f000 fe1b 	bl	800247c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20011d74 	.word	0x20011d74

08001850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
	return 1;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_kill>:

int _kill(int pid, int sig)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <_kill+0x20>)
 800186c:	2216      	movs	r2, #22
 800186e:	601a      	str	r2, [r3, #0]
	return -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	20016e00 	.word	0x20016e00

08001884 <_exit>:

void _exit (int status)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ffe5 	bl	8001860 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001896:	e7fe      	b.n	8001896 <_exit+0x12>

08001898 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e00a      	b.n	80018c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018aa:	f3af 8000 	nop.w
 80018ae:	4601      	mov	r1, r0
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	60ba      	str	r2, [r7, #8]
 80018b6:	b2ca      	uxtb	r2, r1
 80018b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3301      	adds	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	dbf0      	blt.n	80018aa <_read+0x12>
	}

return len;
 80018c8:	687b      	ldr	r3, [r7, #4]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
	return -1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018fa:	605a      	str	r2, [r3, #4]
	return 0;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_isatty>:

int _isatty(int file)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
	return 1;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
	return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d205      	bcs.n	8001978 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <_sbrk+0x6c>)
 800196e:	220c      	movs	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	e009      	b.n	800198c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <_sbrk+0x64>)
 8001988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	4618      	mov	r0, r3
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	20020000 	.word	0x20020000
 800199c:	00000400 	.word	0x00000400
 80019a0:	20000584 	.word	0x20000584
 80019a4:	20016e18 	.word	0x20016e18
 80019a8:	20016e00 	.word	0x20016e00

080019ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <SystemInit+0x20>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <SystemInit+0x20>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019d6:	490e      	ldr	r1, [pc, #56]	; (8001a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019ec:	4c0b      	ldr	r4, [pc, #44]	; (8001a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019fa:	f7ff ffd7 	bl	80019ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fe:	f01f f8b5 	bl	8020b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a02:	f7ff f9bf 	bl	8000d84 <main>
  bx  lr    
 8001a06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	20000568 	.word	0x20000568
  ldr r2, =_sidata
 8001a14:	080268f8 	.word	0x080268f8
  ldr r2, =_sbss
 8001a18:	20000568 	.word	0x20000568
  ldr r4, =_ebss
 8001a1c:	20016e14 	.word	0x20016e14

08001a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_Init+0x40>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_Init+0x40>)
 8001a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_Init+0x40>)
 8001a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f8fc 	bl	8001c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	200f      	movs	r0, #15
 8001a54:	f7ff fe60 	bl	8001718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff fd8e 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000000c 	.word	0x2000000c
 8001a8c:	200059d0 	.word	0x200059d0

08001a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200059d0 	.word	0x200059d0

08001aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff ffee 	bl	8001a90 <HAL_GetTick>
 8001ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac0:	d005      	beq.n	8001ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_Delay+0x44>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ace:	bf00      	nop
 8001ad0:	f7ff ffde 	bl	8001a90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d8f7      	bhi.n	8001ad0 <HAL_Delay+0x28>
  {
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000000c 	.word	0x2000000c

08001af0 <__NVIC_SetPriorityGrouping>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_GetPriorityGrouping>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <__NVIC_GetPriorityGrouping+0x18>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 0307 	and.w	r3, r3, #7
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_EnableIRQ>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db0b      	blt.n	8001b7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <__NVIC_EnableIRQ+0x38>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2001      	movs	r0, #1
 8001b76:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ff4c 	bl	8001af0 <__NVIC_SetPriorityGrouping>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c72:	f7ff ff61 	bl	8001b38 <__NVIC_GetPriorityGrouping>
 8001c76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	6978      	ldr	r0, [r7, #20]
 8001c7e:	f7ff ffb1 	bl	8001be4 <NVIC_EncodePriority>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff80 	bl	8001b90 <__NVIC_SetPriority>
}
 8001c90:	bf00      	nop
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff54 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001cc4:	4baa      	ldr	r3, [pc, #680]	; (8001f70 <HAL_ETH_Init+0x2bc>)
 8001cc6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e183      	b.n	8001fe2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f008 fe32 	bl	800a958 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	4b9e      	ldr	r3, [pc, #632]	; (8001f74 <HAL_ETH_Init+0x2c0>)
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	4a9d      	ldr	r2, [pc, #628]	; (8001f74 <HAL_ETH_Init+0x2c0>)
 8001cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d02:	6453      	str	r3, [r2, #68]	; 0x44
 8001d04:	4b9b      	ldr	r3, [pc, #620]	; (8001f74 <HAL_ETH_Init+0x2c0>)
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d10:	4b99      	ldr	r3, [pc, #612]	; (8001f78 <HAL_ETH_Init+0x2c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a98      	ldr	r2, [pc, #608]	; (8001f78 <HAL_ETH_Init+0x2c4>)
 8001d16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d1a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d1c:	4b96      	ldr	r3, [pc, #600]	; (8001f78 <HAL_ETH_Init+0x2c4>)
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4994      	ldr	r1, [pc, #592]	; (8001f78 <HAL_ETH_Init+0x2c4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d40:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d42:	f7ff fea5 	bl	8001a90 <HAL_GetTick>
 8001d46:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001d48:	e011      	b.n	8001d6e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001d4a:	f7ff fea1 	bl	8001a90 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d58:	d909      	bls.n	8001d6e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e139      	b.n	8001fe2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1e4      	bne.n	8001d4a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f023 031c 	bic.w	r3, r3, #28
 8001d8e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d90:	f001 fb1e 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8001d94:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4a78      	ldr	r2, [pc, #480]	; (8001f7c <HAL_ETH_Init+0x2c8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d908      	bls.n	8001db0 <HAL_ETH_Init+0xfc>
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4a77      	ldr	r2, [pc, #476]	; (8001f80 <HAL_ETH_Init+0x2cc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d804      	bhi.n	8001db0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	e027      	b.n	8001e00 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	4a73      	ldr	r2, [pc, #460]	; (8001f80 <HAL_ETH_Init+0x2cc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d908      	bls.n	8001dca <HAL_ETH_Init+0x116>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	4a6d      	ldr	r2, [pc, #436]	; (8001f70 <HAL_ETH_Init+0x2bc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d204      	bcs.n	8001dca <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f043 030c 	orr.w	r3, r3, #12
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	e01a      	b.n	8001e00 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4a68      	ldr	r2, [pc, #416]	; (8001f70 <HAL_ETH_Init+0x2bc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d303      	bcc.n	8001dda <HAL_ETH_Init+0x126>
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4a6b      	ldr	r2, [pc, #428]	; (8001f84 <HAL_ETH_Init+0x2d0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d911      	bls.n	8001dfe <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4a69      	ldr	r2, [pc, #420]	; (8001f84 <HAL_ETH_Init+0x2d0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d908      	bls.n	8001df4 <HAL_ETH_Init+0x140>
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4a68      	ldr	r2, [pc, #416]	; (8001f88 <HAL_ETH_Init+0x2d4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d804      	bhi.n	8001df4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e005      	b.n	8001e00 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	e000      	b.n	8001e00 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001dfe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001e08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fc17 	bl	8002642 <HAL_ETH_WritePHYRegister>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001e1e:	6939      	ldr	r1, [r7, #16]
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fdcd 	bl	80029c0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0d7      	b.n	8001fe2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001e32:	20ff      	movs	r0, #255	; 0xff
 8001e34:	f7ff fe38 	bl	8001aa8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80a5 	beq.w	8001f8c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e42:	f7ff fe25 	bl	8001a90 <HAL_GetTick>
 8001e46:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2101      	movs	r1, #1
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fb8e 	bl	8002572 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001e56:	f7ff fe1b 	bl	8001a90 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d90f      	bls.n	8001e88 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001e6c:	6939      	ldr	r1, [r7, #16]
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fda6 	bl	80029c0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e0ac      	b.n	8001fe2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0da      	beq.n	8001e48 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001e92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e96:	2100      	movs	r1, #0
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fbd2 	bl	8002642 <HAL_ETH_WritePHYRegister>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ea8:	6939      	ldr	r1, [r7, #16]
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fd88 	bl	80029c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e092      	b.n	8001fe2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7ff fde8 	bl	8001a90 <HAL_GetTick>
 8001ec0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2101      	movs	r1, #1
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb51 	bl	8002572 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001ed0:	f7ff fdde 	bl	8001a90 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d90f      	bls.n	8001f02 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ee6:	6939      	ldr	r1, [r7, #16]
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fd69 	bl	80029c0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e06f      	b.n	8001fe2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f003 0320 	and.w	r3, r3, #32
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0da      	beq.n	8001ec2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	461a      	mov	r2, r3
 8001f12:	2110      	movs	r1, #16
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fb2c 	bl	8002572 <HAL_ETH_ReadPHYRegister>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00b      	beq.n	8001f38 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f24:	6939      	ldr	r1, [r7, #16]
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fd4a 	bl	80029c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f34:	2301      	movs	r3, #1
 8001f36:	e054      	b.n	8001fe2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d004      	beq.n	8001f4c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	e002      	b.n	8001f52 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	e035      	b.n	8001fd0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	e030      	b.n	8001fd0 <HAL_ETH_Init+0x31c>
 8001f6e:	bf00      	nop
 8001f70:	03938700 	.word	0x03938700
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	01312cff 	.word	0x01312cff
 8001f80:	02160ebf 	.word	0x02160ebf
 8001f84:	05f5e0ff 	.word	0x05f5e0ff
 8001f88:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	08db      	lsrs	r3, r3, #3
 8001f92:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fb4c 	bl	8002642 <HAL_ETH_WritePHYRegister>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00b      	beq.n	8001fc8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fb4:	6939      	ldr	r1, [r7, #16]
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fd02 	bl	80029c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e00c      	b.n	8001fe2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001fc8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001fcc:	f7ff fd6c 	bl	8001aa8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001fd0:	6939      	ldr	r1, [r7, #16]
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fcf4 	bl	80029c0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop

08001fec <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_ETH_DMATxDescListInit+0x20>
 8002008:	2302      	movs	r3, #2
 800200a:	e052      	b.n	80020b2 <HAL_ETH_DMATxDescListInit+0xc6>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e030      	b.n	800208a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	015b      	lsls	r3, r3, #5
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	4413      	add	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002038:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002040:	fb02 f303 	mul.w	r3, r2, r3
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	461a      	mov	r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	3b01      	subs	r3, #1
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	d208      	bcs.n	800207e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3301      	adds	r3, #1
 8002070:	015b      	lsls	r3, r3, #5
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	4413      	add	r3, r2
 8002076:	461a      	mov	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	e002      	b.n	8002084 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3301      	adds	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d3ca      	bcc.n	8002028 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209c:	3310      	adds	r3, #16
 800209e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80020be:	b480      	push	{r7}
 80020c0:	b087      	sub	sp, #28
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_ETH_DMARxDescListInit+0x20>
 80020da:	2302      	movs	r3, #2
 80020dc:	e056      	b.n	800218c <HAL_ETH_DMARxDescListInit+0xce>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2202      	movs	r2, #2
 80020ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e034      	b.n	8002164 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	015b      	lsls	r3, r3, #5
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	4413      	add	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800210a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002112:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	461a      	mov	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	3b01      	subs	r3, #1
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	429a      	cmp	r2, r3
 8002144:	d208      	bcs.n	8002158 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	015b      	lsls	r3, r3, #5
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	4413      	add	r3, r2
 8002150:	461a      	mov	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	e002      	b.n	800215e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d3c6      	bcc.n	80020fa <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002176:	330c      	adds	r3, #12
 8002178:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_ETH_TransmitFrame+0x24>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e0cd      	b.n	8002358 <HAL_ETH_TransmitFrame+0x1c0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0b8      	b.n	8002358 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	da09      	bge.n	8002204 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2212      	movs	r2, #18
 80021f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0a9      	b.n	8002358 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800220a:	4293      	cmp	r3, r2
 800220c:	d915      	bls.n	800223a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	4a54      	ldr	r2, [pc, #336]	; (8002364 <HAL_ETH_TransmitFrame+0x1cc>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0a9b      	lsrs	r3, r3, #10
 8002218:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	4b51      	ldr	r3, [pc, #324]	; (8002364 <HAL_ETH_TransmitFrame+0x1cc>)
 800221e:	fba3 1302 	umull	r1, r3, r3, r2
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e001      	b.n	800223e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800223a:	2301      	movs	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d11c      	bne.n	800227e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002252:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800225e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800226e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c
 800227c:	e04b      	b.n	8002316 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	e044      	b.n	800230e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002292:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d107      	bne.n	80022aa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022a8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022b2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d116      	bne.n	80022ec <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80022cc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	4a25      	ldr	r2, [pc, #148]	; (8002368 <HAL_ETH_TransmitFrame+0x1d0>)
 80022d2:	fb02 f203 	mul.w	r2, r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80022de:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80022ea:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022fa:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	461a      	mov	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	3301      	adds	r3, #1
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	429a      	cmp	r2, r3
 8002314:	d3b6      	bcc.n	8002284 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231e:	3314      	adds	r3, #20
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002332:	3314      	adds	r3, #20
 8002334:	2204      	movs	r2, #4
 8002336:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002340:	3304      	adds	r3, #4
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	ac02b00b 	.word	0xac02b00b
 8002368:	fffffa0c 	.word	0xfffffa0c

0800236c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002382:	2302      	movs	r3, #2
 8002384:	e074      	b.n	8002470 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002396:	e05a      	b.n	800244e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3301      	adds	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d10d      	bne.n	80023ca <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	461a      	mov	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28
 80023c8:	e041      	b.n	800244e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	461a      	mov	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28
 80023ee:	e02e      	b.n	800244e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	2b01      	cmp	r3, #1
 8002408:	d103      	bne.n	8002412 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800241e:	1f1a      	subs	r2, r3, #4
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	461a      	mov	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e010      	b.n	8002470 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	db02      	blt.n	800245e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d99c      	bls.n	8002398 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800248c:	3314      	adds	r3, #20
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d112      	bne.n	80024be <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f008 fb0b 	bl	800aab4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	3314      	adds	r3, #20
 80024a8:	2240      	movs	r2, #64	; 0x40
 80024aa:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024bc:	e01b      	b.n	80024f6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c6:	3314      	adds	r3, #20
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d111      	bne.n	80024f6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f839 	bl	800254a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e0:	3314      	adds	r3, #20
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fe:	3314      	adds	r3, #20
 8002500:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002504:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250e:	3314      	adds	r3, #20
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800251a:	d112      	bne.n	8002542 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f81e 	bl	800255e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252a:	3314      	adds	r3, #20
 800252c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002530:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	460b      	mov	r3, r1
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b82      	cmp	r3, #130	; 0x82
 8002592:	d101      	bne.n	8002598 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002594:	2302      	movs	r3, #2
 8002596:	e050      	b.n	800263a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2282      	movs	r2, #130	; 0x82
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 031c 	and.w	r3, r3, #28
 80025ae:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8a1b      	ldrh	r3, [r3, #16]
 80025b4:	02db      	lsls	r3, r3, #11
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80025be:	897b      	ldrh	r3, [r7, #10]
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f023 0302 	bic.w	r3, r3, #2
 80025d2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80025e4:	f7ff fa54 	bl	8001a90 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025ea:	e015      	b.n	8002618 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80025ec:	f7ff fa50 	bl	8001a90 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fa:	d309      	bcc.n	8002610 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e014      	b.n	800263a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1e4      	bne.n	80025ec <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	460b      	mov	r3, r1
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b42      	cmp	r3, #66	; 0x42
 8002662:	d101      	bne.n	8002668 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002664:	2302      	movs	r3, #2
 8002666:	e04e      	b.n	8002706 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2242      	movs	r2, #66	; 0x42
 800266c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f003 031c 	and.w	r3, r3, #28
 800267e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8a1b      	ldrh	r3, [r3, #16]
 8002684:	02db      	lsls	r3, r3, #11
 8002686:	b29b      	uxth	r3, r3
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800268e:	897b      	ldrh	r3, [r7, #10]
 8002690:	019b      	lsls	r3, r3, #6
 8002692:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026be:	f7ff f9e7 	bl	8001a90 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026c4:	e015      	b.n	80026f2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80026c6:	f7ff f9e3 	bl	8001a90 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d4:	d309      	bcc.n	80026ea <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e00d      	b.n	8002706 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1e4      	bne.n	80026c6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_ETH_Start+0x16>
 8002720:	2302      	movs	r3, #2
 8002722:	e01f      	b.n	8002764 <HAL_ETH_Start+0x56>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fb45 	bl	8002dc4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fb7c 	bl	8002e38 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fc13 	bl	8002f6c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fbb0 	bl	8002eac <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fbdd 	bl	8002f0c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_ETH_Stop+0x16>
 800277e:	2302      	movs	r3, #2
 8002780:	e01f      	b.n	80027c2 <HAL_ETH_Stop+0x56>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2202      	movs	r2, #2
 800278e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fba2 	bl	8002edc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fbcf 	bl	8002f3c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fb67 	bl	8002e72 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fbe1 	bl	8002f6c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fb27 	bl	8002dfe <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_ETH_ConfigMAC+0x1c>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e0e4      	b.n	80029b2 <HAL_ETH_ConfigMAC+0x1e6>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80b1 	beq.w	8002962 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <HAL_ETH_ConfigMAC+0x1f0>)
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002818:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800281e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002824:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800282a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002830:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002836:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800283c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002842:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002848:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800284e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002854:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800285a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002872:	2001      	movs	r0, #1
 8002874:	f7ff f918 	bl	8001aa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002888:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800288e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002894:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800289a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80028a0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80028a6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80028b2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80028b4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80028be:	2001      	movs	r0, #1
 80028c0:	f7ff f8f2 	bl	8001aa8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028d4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028de:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80028fc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002902:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002908:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800290e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002914:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800292c:	2001      	movs	r0, #1
 800292e:	f7ff f8bb 	bl	8001aa8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002952:	2001      	movs	r0, #1
 8002954:	f7ff f8a8 	bl	8001aa8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	61da      	str	r2, [r3, #28]
 8002960:	e01e      	b.n	80029a0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002970:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002992:	2001      	movs	r0, #1
 8002994:	f7ff f888 	bl	8001aa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	ff20810f 	.word	0xff20810f

080029c0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b0b0      	sub	sp, #192	; 0xc0
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029dc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80029ee:	2300      	movs	r3, #0
 80029f0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a0a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a0c:	e001      	b.n	8002a12 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a16:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002a2c:	2340      	movs	r3, #64	; 0x40
 8002a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a98:	4bac      	ldr	r3, [pc, #688]	; (8002d4c <ETH_MACDMAConfig+0x38c>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002aa4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002aa8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002aac:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002ab2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002ab6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002aba:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002ac0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002ac4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002ac8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002acc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002ad0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002ad4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002ad6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ae8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af4:	2001      	movs	r0, #1
 8002af6:	f7fe ffd7 	bl	8001aa8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b02:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b08:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002b0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002b0c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002b12:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002b18:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002b1e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002b24:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002b28:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002b30:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b32:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f7fe ffb2 	bl	8001aa8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b4c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b56:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002b60:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b70:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b74:	4013      	ands	r3, r2
 8002b76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b7e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002b80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002b84:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002b86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002b8a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002b90:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002b96:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002b98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002b9c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002b9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bb0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7fe ff73 	bl	8001aa8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bca:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002bcc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002bd0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002be6:	2001      	movs	r0, #1
 8002be8:	f7fe ff5e 	bl	8001aa8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bf4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bfe:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002c04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c08:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4a:	3318      	adds	r3, #24
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002c52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c56:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <ETH_MACDMAConfig+0x390>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c5e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002c60:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c62:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002c64:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002c66:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002c68:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002c6a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002c6c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002c6e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002c70:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002c72:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002c74:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002c76:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002c7a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002c7e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c92:	3318      	adds	r3, #24
 8002c94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c98:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca2:	3318      	adds	r3, #24
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002caa:	2001      	movs	r0, #1
 8002cac:	f7fe fefc 	bl	8001aa8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb8:	3318      	adds	r3, #24
 8002cba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cbe:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cc4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002cc8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002ccc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002cd0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002cd6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002cda:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f7fe fed5 	bl	8001aa8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d0a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d10f      	bne.n	8002d34 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1c:	331c      	adds	r3, #28
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d30:	331c      	adds	r3, #28
 8002d32:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f809 	bl	8002d54 <ETH_MACAddressConfig>
}
 8002d42:	bf00      	nop
 8002d44:	37c0      	adds	r7, #192	; 0xc0
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	ff20810f 	.word	0xff20810f
 8002d50:	f8de3f23 	.word	0xf8de3f23

08002d54 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3305      	adds	r3, #5
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	3204      	adds	r2, #4
 8002d6c:	7812      	ldrb	r2, [r2, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <ETH_MACAddressConfig+0x68>)
 8002d76:	4413      	add	r3, r2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3303      	adds	r3, #3
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	061a      	lsls	r2, r3, #24
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3302      	adds	r3, #2
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3301      	adds	r3, #1
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <ETH_MACAddressConfig+0x6c>)
 8002da6:	4413      	add	r3, r2
 8002da8:	461a      	mov	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	6013      	str	r3, [r2, #0]
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40028040 	.word	0x40028040
 8002dc0:	40028044 	.word	0x40028044

08002dc4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0208 	orr.w	r2, r2, #8
 8002dde:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002de8:	2001      	movs	r0, #1
 8002dea:	f000 f8e9 	bl	8002fc0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	601a      	str	r2, [r3, #0]
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0208 	bic.w	r2, r2, #8
 8002e18:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f000 f8cc 	bl	8002fc0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	601a      	str	r2, [r3, #0]
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0204 	orr.w	r2, r2, #4
 8002e52:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f000 f8af 	bl	8002fc0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	601a      	str	r2, [r3, #0]
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0204 	bic.w	r2, r2, #4
 8002e8c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f000 f892 	bl	8002fc0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	601a      	str	r2, [r3, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebc:	3318      	adds	r3, #24
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ecc:	3318      	adds	r3, #24
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eec:	3318      	adds	r3, #24
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002efc:	3318      	adds	r3, #24
 8002efe:	601a      	str	r2, [r3, #0]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1c:	3318      	adds	r3, #24
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0202 	orr.w	r2, r2, #2
 8002f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f2c:	3318      	adds	r3, #24
 8002f2e:	601a      	str	r2, [r3, #0]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0202 	bic.w	r2, r2, #2
 8002f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f5c:	3318      	adds	r3, #24
 8002f5e:	601a      	str	r2, [r3, #0]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f80:	3318      	adds	r3, #24
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f90:	3318      	adds	r3, #24
 8002f92:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f9c:	3318      	adds	r3, #24
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f000 f80c 	bl	8002fc0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb2:	3318      	adds	r3, #24
 8002fb4:	601a      	str	r2, [r3, #0]
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <ETH_Delay+0x38>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <ETH_Delay+0x3c>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0a5b      	lsrs	r3, r3, #9
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002fdc:	bf00      	nop
  } 
  while (Delay --);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	60fa      	str	r2, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f9      	bne.n	8002fdc <ETH_Delay+0x1c>
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000008 	.word	0x20000008
 8002ffc:	10624dd3 	.word	0x10624dd3

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	e16b      	b.n	80032f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800301c:	2201      	movs	r2, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	429a      	cmp	r2, r3
 8003036:	f040 815a 	bne.w	80032ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d005      	beq.n	8003052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304e:	2b02      	cmp	r3, #2
 8003050:	d130      	bne.n	80030b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2203      	movs	r2, #3
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003088:	2201      	movs	r2, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 0201 	and.w	r2, r3, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d017      	beq.n	80030f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d123      	bne.n	8003144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	08da      	lsrs	r2, r3, #3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3208      	adds	r2, #8
 8003104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	220f      	movs	r2, #15
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	08da      	lsrs	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3208      	adds	r2, #8
 800313e:	69b9      	ldr	r1, [r7, #24]
 8003140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0203 	and.w	r2, r3, #3
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80b4 	beq.w	80032ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	4b60      	ldr	r3, [pc, #384]	; (800330c <HAL_GPIO_Init+0x30c>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	4a5f      	ldr	r2, [pc, #380]	; (800330c <HAL_GPIO_Init+0x30c>)
 8003190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
 8003196:	4b5d      	ldr	r3, [pc, #372]	; (800330c <HAL_GPIO_Init+0x30c>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031a2:	4a5b      	ldr	r2, [pc, #364]	; (8003310 <HAL_GPIO_Init+0x310>)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3302      	adds	r3, #2
 80031aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	220f      	movs	r2, #15
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_GPIO_Init+0x314>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02b      	beq.n	8003226 <HAL_GPIO_Init+0x226>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a51      	ldr	r2, [pc, #324]	; (8003318 <HAL_GPIO_Init+0x318>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d025      	beq.n	8003222 <HAL_GPIO_Init+0x222>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a50      	ldr	r2, [pc, #320]	; (800331c <HAL_GPIO_Init+0x31c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01f      	beq.n	800321e <HAL_GPIO_Init+0x21e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a4f      	ldr	r2, [pc, #316]	; (8003320 <HAL_GPIO_Init+0x320>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d019      	beq.n	800321a <HAL_GPIO_Init+0x21a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a4e      	ldr	r2, [pc, #312]	; (8003324 <HAL_GPIO_Init+0x324>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_GPIO_Init+0x216>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4d      	ldr	r2, [pc, #308]	; (8003328 <HAL_GPIO_Init+0x328>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00d      	beq.n	8003212 <HAL_GPIO_Init+0x212>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4c      	ldr	r2, [pc, #304]	; (800332c <HAL_GPIO_Init+0x32c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d007      	beq.n	800320e <HAL_GPIO_Init+0x20e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4b      	ldr	r2, [pc, #300]	; (8003330 <HAL_GPIO_Init+0x330>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d101      	bne.n	800320a <HAL_GPIO_Init+0x20a>
 8003206:	2307      	movs	r3, #7
 8003208:	e00e      	b.n	8003228 <HAL_GPIO_Init+0x228>
 800320a:	2308      	movs	r3, #8
 800320c:	e00c      	b.n	8003228 <HAL_GPIO_Init+0x228>
 800320e:	2306      	movs	r3, #6
 8003210:	e00a      	b.n	8003228 <HAL_GPIO_Init+0x228>
 8003212:	2305      	movs	r3, #5
 8003214:	e008      	b.n	8003228 <HAL_GPIO_Init+0x228>
 8003216:	2304      	movs	r3, #4
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x228>
 800321a:	2303      	movs	r3, #3
 800321c:	e004      	b.n	8003228 <HAL_GPIO_Init+0x228>
 800321e:	2302      	movs	r3, #2
 8003220:	e002      	b.n	8003228 <HAL_GPIO_Init+0x228>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_GPIO_Init+0x228>
 8003226:	2300      	movs	r3, #0
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f002 0203 	and.w	r2, r2, #3
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	4093      	lsls	r3, r2
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003238:	4935      	ldr	r1, [pc, #212]	; (8003310 <HAL_GPIO_Init+0x310>)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3302      	adds	r3, #2
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003246:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <HAL_GPIO_Init+0x334>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800326a:	4a32      	ldr	r2, [pc, #200]	; (8003334 <HAL_GPIO_Init+0x334>)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003270:	4b30      	ldr	r3, [pc, #192]	; (8003334 <HAL_GPIO_Init+0x334>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003294:	4a27      	ldr	r2, [pc, #156]	; (8003334 <HAL_GPIO_Init+0x334>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_GPIO_Init+0x334>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032be:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_GPIO_Init+0x334>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_GPIO_Init+0x334>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e8:	4a12      	ldr	r2, [pc, #72]	; (8003334 <HAL_GPIO_Init+0x334>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3301      	adds	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	f67f ae90 	bls.w	800301c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	3724      	adds	r7, #36	; 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	40013800 	.word	0x40013800
 8003314:	40020000 	.word	0x40020000
 8003318:	40020400 	.word	0x40020400
 800331c:	40020800 	.word	0x40020800
 8003320:	40020c00 	.word	0x40020c00
 8003324:	40021000 	.word	0x40021000
 8003328:	40021400 	.word	0x40021400
 800332c:	40021800 	.word	0x40021800
 8003330:	40021c00 	.word	0x40021c00
 8003334:	40013c00 	.word	0x40013c00

08003338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	887b      	ldrh	r3, [r7, #2]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e001      	b.n	800335a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
 8003374:	4613      	mov	r3, r2
 8003376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003378:	787b      	ldrb	r3, [r7, #1]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003384:	e003      	b.n	800338e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	041a      	lsls	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	619a      	str	r2, [r3, #24]
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033ac:	887a      	ldrh	r2, [r7, #2]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	041a      	lsls	r2, r3, #16
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	43d9      	mvns	r1, r3
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	400b      	ands	r3, r1
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	619a      	str	r2, [r3, #24]
}
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000008 	.word	0x20000008

080033e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033ec:	f7ff fff0 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0b5b      	lsrs	r3, r3, #13
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	; (800340c <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	08026538 	.word	0x08026538

08003410 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	220f      	movs	r2, #15
 800341e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	08db      	lsrs	r3, r3, #3
 800344a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <HAL_RCC_GetClockConfig+0x60>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0207 	and.w	r2, r3, #7
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	601a      	str	r2, [r3, #0]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40023c00 	.word	0x40023c00

08003474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e07b      	b.n	800357e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2b00      	cmp	r3, #0
 800348c:	d108      	bne.n	80034a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003496:	d009      	beq.n	80034ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
 800349e:	e005      	b.n	80034ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe f882 	bl	80015d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	ea42 0103 	orr.w	r1, r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	f003 0104 	and.w	r1, r3, #4
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f003 0210 	and.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800356c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b088      	sub	sp, #32
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_SPI_Transmit+0x22>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e126      	b.n	80037f6 <HAL_SPI_Transmit+0x270>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b0:	f7fe fa6e 	bl	8001a90 <HAL_GetTick>
 80035b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d002      	beq.n	80035cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
 80035c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ca:	e10b      	b.n	80037e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_SPI_Transmit+0x52>
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035dc:	e102      	b.n	80037e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2203      	movs	r2, #3
 80035e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003624:	d10f      	bne.n	8003646 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003644:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d007      	beq.n	8003664 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366c:	d14b      	bne.n	8003706 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_SPI_Transmit+0xf6>
 8003676:	8afb      	ldrh	r3, [r7, #22]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d13e      	bne.n	80036fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	1c9a      	adds	r2, r3, #2
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036a0:	e02b      	b.n	80036fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d112      	bne.n	80036d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	881a      	ldrh	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	1c9a      	adds	r2, r3, #2
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80036d4:	e011      	b.n	80036fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d6:	f7fe f9db 	bl	8001a90 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d803      	bhi.n	80036ee <HAL_SPI_Transmit+0x168>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d102      	bne.n	80036f4 <HAL_SPI_Transmit+0x16e>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036f8:	e074      	b.n	80037e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1ce      	bne.n	80036a2 <HAL_SPI_Transmit+0x11c>
 8003704:	e04c      	b.n	80037a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_SPI_Transmit+0x18e>
 800370e:	8afb      	ldrh	r3, [r7, #22]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d140      	bne.n	8003796 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	7812      	ldrb	r2, [r2, #0]
 8003720:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800373a:	e02c      	b.n	8003796 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d113      	bne.n	8003772 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	330c      	adds	r3, #12
 8003754:	7812      	ldrb	r2, [r2, #0]
 8003756:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003770:	e011      	b.n	8003796 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003772:	f7fe f98d 	bl	8001a90 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d803      	bhi.n	800378a <HAL_SPI_Transmit+0x204>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d102      	bne.n	8003790 <HAL_SPI_Transmit+0x20a>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d102      	bne.n	8003796 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003794:	e026      	b.n	80037e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1cd      	bne.n	800373c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	6839      	ldr	r1, [r7, #0]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fbcb 	bl	8003f40 <SPI_EndRxTxTransaction>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10a      	bne.n	80037d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e000      	b.n	80037e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b088      	sub	sp, #32
 8003802:	af02      	add	r7, sp, #8
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800381a:	d112      	bne.n	8003842 <HAL_SPI_Receive+0x44>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10e      	bne.n	8003842 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2204      	movs	r2, #4
 8003828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800382c:	88fa      	ldrh	r2, [r7, #6]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	4613      	mov	r3, r2
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f8f1 	bl	8003a20 <HAL_SPI_TransmitReceive>
 800383e:	4603      	mov	r3, r0
 8003840:	e0ea      	b.n	8003a18 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_SPI_Receive+0x52>
 800384c:	2302      	movs	r3, #2
 800384e:	e0e3      	b.n	8003a18 <HAL_SPI_Receive+0x21a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003858:	f7fe f91a 	bl	8001a90 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d002      	beq.n	8003870 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800386a:	2302      	movs	r3, #2
 800386c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800386e:	e0ca      	b.n	8003a06 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_SPI_Receive+0x7e>
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003880:	e0c1      	b.n	8003a06 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2204      	movs	r2, #4
 8003886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	88fa      	ldrh	r2, [r7, #6]
 800389a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	88fa      	ldrh	r2, [r7, #6]
 80038a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c8:	d10f      	bne.n	80038ea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d007      	beq.n	8003908 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003906:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d162      	bne.n	80039d6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003910:	e02e      	b.n	8003970 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d115      	bne.n	800394c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f103 020c 	add.w	r2, r3, #12
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	7812      	ldrb	r2, [r2, #0]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	87da      	strh	r2, [r3, #62]	; 0x3e
 800394a:	e011      	b.n	8003970 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800394c:	f7fe f8a0 	bl	8001a90 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d803      	bhi.n	8003964 <HAL_SPI_Receive+0x166>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003962:	d102      	bne.n	800396a <HAL_SPI_Receive+0x16c>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800396e:	e04a      	b.n	8003a06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1cb      	bne.n	8003912 <HAL_SPI_Receive+0x114>
 800397a:	e031      	b.n	80039e0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d113      	bne.n	80039b2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	b292      	uxth	r2, r2
 8003996:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	1c9a      	adds	r2, r3, #2
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039b0:	e011      	b.n	80039d6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039b2:	f7fe f86d 	bl	8001a90 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d803      	bhi.n	80039ca <HAL_SPI_Receive+0x1cc>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d102      	bne.n	80039d0 <HAL_SPI_Receive+0x1d2>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039d4:	e017      	b.n	8003a06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1cd      	bne.n	800397c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	6839      	ldr	r1, [r7, #0]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fa45 	bl	8003e74 <SPI_EndRxTransaction>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
 8003a02:	e000      	b.n	8003a06 <HAL_SPI_Receive+0x208>
  }

error :
 8003a04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08c      	sub	sp, #48	; 0x30
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x26>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e18a      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x33c>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a4e:	f7fe f81f 	bl	8001a90 <HAL_GetTick>
 8003a52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d00f      	beq.n	8003a90 <HAL_SPI_TransmitReceive+0x70>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a76:	d107      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d103      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x68>
 8003a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d003      	beq.n	8003a90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a8e:	e15b      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_SPI_TransmitReceive+0x82>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_SPI_TransmitReceive+0x82>
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003aa8:	e14e      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d003      	beq.n	8003abe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2205      	movs	r2, #5
 8003aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	887a      	ldrh	r2, [r7, #2]
 8003ace:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	887a      	ldrh	r2, [r7, #2]
 8003ae0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	887a      	ldrh	r2, [r7, #2]
 8003ae6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	d007      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1a:	d178      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x10a>
 8003b24:	8b7b      	ldrh	r3, [r7, #26]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d166      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	881a      	ldrh	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	1c9a      	adds	r2, r3, #2
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b4e:	e053      	b.n	8003bf8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d11b      	bne.n	8003b96 <HAL_SPI_TransmitReceive+0x176>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d016      	beq.n	8003b96 <HAL_SPI_TransmitReceive+0x176>
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d113      	bne.n	8003b96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	1c9a      	adds	r2, r3, #2
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d119      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x1b8>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d014      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	b292      	uxth	r2, r2
 8003bba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	1c9a      	adds	r2, r3, #2
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bd8:	f7fd ff5a 	bl	8001a90 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d807      	bhi.n	8003bf8 <HAL_SPI_TransmitReceive+0x1d8>
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d003      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bf6:	e0a7      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1a6      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x130>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1a1      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x130>
 8003c0c:	e07c      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_SPI_TransmitReceive+0x1fc>
 8003c16:	8b7b      	ldrh	r3, [r7, #26]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d16b      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	7812      	ldrb	r2, [r2, #0]
 8003c28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c42:	e057      	b.n	8003cf4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d11c      	bne.n	8003c8c <HAL_SPI_TransmitReceive+0x26c>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d017      	beq.n	8003c8c <HAL_SPI_TransmitReceive+0x26c>
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d114      	bne.n	8003c8c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d119      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x2ae>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d014      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cce:	f7fd fedf 	bl	8001a90 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d803      	bhi.n	8003ce6 <HAL_SPI_TransmitReceive+0x2c6>
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d102      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x2cc>
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d103      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cf2:	e029      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1a2      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x224>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d19d      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 f917 	bl	8003f40 <SPI_EndRxTxTransaction>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d006      	beq.n	8003d26 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d24:	e010      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	e000      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3730      	adds	r7, #48	; 0x30
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d74:	f7fd fe8c 	bl	8001a90 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	4413      	add	r3, r2
 8003d82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d84:	f7fd fe84 	bl	8001a90 <HAL_GetTick>
 8003d88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d8a:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	015b      	lsls	r3, r3, #5
 8003d90:	0d1b      	lsrs	r3, r3, #20
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	fb02 f303 	mul.w	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d9a:	e054      	b.n	8003e46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d050      	beq.n	8003e46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003da4:	f7fd fe74 	bl	8001a90 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d902      	bls.n	8003dba <SPI_WaitFlagStateUntilTimeout+0x56>
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d13d      	bne.n	8003e36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd2:	d111      	bne.n	8003df8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ddc:	d004      	beq.n	8003de8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de6:	d107      	bne.n	8003df8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e00:	d10f      	bne.n	8003e22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e017      	b.n	8003e66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	bf0c      	ite	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	2300      	movne	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d19b      	bne.n	8003d9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000008 	.word	0x20000008

08003e74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e88:	d111      	bne.n	8003eae <SPI_EndRxTransaction+0x3a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e92:	d004      	beq.n	8003e9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9c:	d107      	bne.n	8003eae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb6:	d12a      	bne.n	8003f0e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec0:	d012      	beq.n	8003ee8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff ff49 	bl	8003d64 <SPI_WaitFlagStateUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d02d      	beq.n	8003f34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e026      	b.n	8003f36 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff ff36 	bl	8003d64 <SPI_WaitFlagStateUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01a      	beq.n	8003f34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e013      	b.n	8003f36 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2200      	movs	r2, #0
 8003f16:	2101      	movs	r1, #1
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7ff ff23 	bl	8003d64 <SPI_WaitFlagStateUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e000      	b.n	8003f36 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <SPI_EndRxTxTransaction+0x7c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <SPI_EndRxTxTransaction+0x80>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	0d5b      	lsrs	r3, r3, #21
 8003f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f5c:	fb02 f303 	mul.w	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f6a:	d112      	bne.n	8003f92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2200      	movs	r2, #0
 8003f74:	2180      	movs	r1, #128	; 0x80
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff fef4 	bl	8003d64 <SPI_WaitFlagStateUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f043 0220 	orr.w	r2, r3, #32
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e00f      	b.n	8003fb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa8:	2b80      	cmp	r3, #128	; 0x80
 8003faa:	d0f2      	beq.n	8003f92 <SPI_EndRxTxTransaction+0x52>
 8003fac:	e000      	b.n	8003fb0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003fae:	bf00      	nop
  }

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000008 	.word	0x20000008
 8003fc0:	165e9f81 	.word	0x165e9f81

08003fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e041      	b.n	800405a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd fb58 	bl	80016a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f000 fafe 	bl	8004604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d001      	beq.n	800407c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e046      	b.n	800410a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a23      	ldr	r2, [pc, #140]	; (8004118 <HAL_TIM_Base_Start+0xb4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d022      	beq.n	80040d4 <HAL_TIM_Base_Start+0x70>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004096:	d01d      	beq.n	80040d4 <HAL_TIM_Base_Start+0x70>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1f      	ldr	r2, [pc, #124]	; (800411c <HAL_TIM_Base_Start+0xb8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d018      	beq.n	80040d4 <HAL_TIM_Base_Start+0x70>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <HAL_TIM_Base_Start+0xbc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d013      	beq.n	80040d4 <HAL_TIM_Base_Start+0x70>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <HAL_TIM_Base_Start+0xc0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00e      	beq.n	80040d4 <HAL_TIM_Base_Start+0x70>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <HAL_TIM_Base_Start+0xc4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d009      	beq.n	80040d4 <HAL_TIM_Base_Start+0x70>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <HAL_TIM_Base_Start+0xc8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_TIM_Base_Start+0x70>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_TIM_Base_Start+0xcc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d111      	bne.n	80040f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d010      	beq.n	8004108 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	e007      	b.n	8004108 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40010000 	.word	0x40010000
 800411c:	40000400 	.word	0x40000400
 8004120:	40000800 	.word	0x40000800
 8004124:	40000c00 	.word	0x40000c00
 8004128:	40010400 	.word	0x40010400
 800412c:	40014000 	.word	0x40014000
 8004130:	40001800 	.word	0x40001800

08004134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d001      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e04e      	b.n	80041ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a23      	ldr	r2, [pc, #140]	; (80041f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d022      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x80>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004176:	d01d      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x80>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <HAL_TIM_Base_Start_IT+0xc8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d018      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x80>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <HAL_TIM_Base_Start_IT+0xcc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d013      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x80>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <HAL_TIM_Base_Start_IT+0xd0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00e      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x80>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_TIM_Base_Start_IT+0xd4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d009      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x80>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a19      	ldr	r2, [pc, #100]	; (800420c <HAL_TIM_Base_Start_IT+0xd8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x80>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a18      	ldr	r2, [pc, #96]	; (8004210 <HAL_TIM_Base_Start_IT+0xdc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d111      	bne.n	80041d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b06      	cmp	r3, #6
 80041c4:	d010      	beq.n	80041e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d6:	e007      	b.n	80041e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800
 8004204:	40000c00 	.word	0x40000c00
 8004208:	40010400 	.word	0x40010400
 800420c:	40014000 	.word	0x40014000
 8004210:	40001800 	.word	0x40001800

08004214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b02      	cmp	r3, #2
 8004228:	d122      	bne.n	8004270 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b02      	cmp	r3, #2
 8004236:	d11b      	bne.n	8004270 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0202 	mvn.w	r2, #2
 8004240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f9b5 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 800425c:	e005      	b.n	800426a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f9a7 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f9b8 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b04      	cmp	r3, #4
 800427c:	d122      	bne.n	80042c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b04      	cmp	r3, #4
 800428a:	d11b      	bne.n	80042c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0204 	mvn.w	r2, #4
 8004294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f98b 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f97d 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f98e 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d122      	bne.n	8004318 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d11b      	bne.n	8004318 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0208 	mvn.w	r2, #8
 80042e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2204      	movs	r2, #4
 80042ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f961 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f953 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f964 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	2b10      	cmp	r3, #16
 8004324:	d122      	bne.n	800436c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b10      	cmp	r3, #16
 8004332:	d11b      	bne.n	800436c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0210 	mvn.w	r2, #16
 800433c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2208      	movs	r2, #8
 8004342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f937 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 8004358:	e005      	b.n	8004366 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f929 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f93a 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b01      	cmp	r3, #1
 8004378:	d10e      	bne.n	8004398 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d107      	bne.n	8004398 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0201 	mvn.w	r2, #1
 8004390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fd f8d8 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b80      	cmp	r3, #128	; 0x80
 80043a4:	d10e      	bne.n	80043c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b0:	2b80      	cmp	r3, #128	; 0x80
 80043b2:	d107      	bne.n	80043c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fae0 	bl	8004984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b40      	cmp	r3, #64	; 0x40
 80043d0:	d10e      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d107      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f8ff 	bl	80045ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d10e      	bne.n	800441c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b20      	cmp	r3, #32
 800440a:	d107      	bne.n	800441c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0220 	mvn.w	r2, #32
 8004414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 faaa 	bl	8004970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_TIM_ConfigClockSource+0x1c>
 800443c:	2302      	movs	r3, #2
 800443e:	e0b4      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x186>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800445e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004478:	d03e      	beq.n	80044f8 <HAL_TIM_ConfigClockSource+0xd4>
 800447a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447e:	f200 8087 	bhi.w	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	f000 8086 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x172>
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	d87f      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b70      	cmp	r3, #112	; 0x70
 8004492:	d01a      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0xa6>
 8004494:	2b70      	cmp	r3, #112	; 0x70
 8004496:	d87b      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004498:	2b60      	cmp	r3, #96	; 0x60
 800449a:	d050      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x11a>
 800449c:	2b60      	cmp	r3, #96	; 0x60
 800449e:	d877      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044a0:	2b50      	cmp	r3, #80	; 0x50
 80044a2:	d03c      	beq.n	800451e <HAL_TIM_ConfigClockSource+0xfa>
 80044a4:	2b50      	cmp	r3, #80	; 0x50
 80044a6:	d873      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d058      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x13a>
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d86f      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044b0:	2b30      	cmp	r3, #48	; 0x30
 80044b2:	d064      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d86b      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d060      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d867      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05c      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d05a      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	e062      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6899      	ldr	r1, [r3, #8]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f000 f9ad 	bl	8004838 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	609a      	str	r2, [r3, #8]
      break;
 80044f6:	e04f      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6899      	ldr	r1, [r3, #8]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f000 f996 	bl	8004838 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800451a:	609a      	str	r2, [r3, #8]
      break;
 800451c:	e03c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6859      	ldr	r1, [r3, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	461a      	mov	r2, r3
 800452c:	f000 f90a 	bl	8004744 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2150      	movs	r1, #80	; 0x50
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f963 	bl	8004802 <TIM_ITRx_SetConfig>
      break;
 800453c:	e02c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6859      	ldr	r1, [r3, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	461a      	mov	r2, r3
 800454c:	f000 f929 	bl	80047a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2160      	movs	r1, #96	; 0x60
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f953 	bl	8004802 <TIM_ITRx_SetConfig>
      break;
 800455c:	e01c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	461a      	mov	r2, r3
 800456c:	f000 f8ea 	bl	8004744 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2140      	movs	r1, #64	; 0x40
 8004576:	4618      	mov	r0, r3
 8004578:	f000 f943 	bl	8004802 <TIM_ITRx_SetConfig>
      break;
 800457c:	e00c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f000 f93a 	bl	8004802 <TIM_ITRx_SetConfig>
      break;
 800458e:	e003      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      break;
 8004594:	e000      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a40      	ldr	r2, [pc, #256]	; (8004718 <TIM_Base_SetConfig+0x114>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d00f      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a3d      	ldr	r2, [pc, #244]	; (800471c <TIM_Base_SetConfig+0x118>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00b      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a3c      	ldr	r2, [pc, #240]	; (8004720 <TIM_Base_SetConfig+0x11c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d007      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a3b      	ldr	r2, [pc, #236]	; (8004724 <TIM_Base_SetConfig+0x120>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a3a      	ldr	r2, [pc, #232]	; (8004728 <TIM_Base_SetConfig+0x124>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d108      	bne.n	8004656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a2f      	ldr	r2, [pc, #188]	; (8004718 <TIM_Base_SetConfig+0x114>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d02b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004664:	d027      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a2c      	ldr	r2, [pc, #176]	; (800471c <TIM_Base_SetConfig+0x118>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d023      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a2b      	ldr	r2, [pc, #172]	; (8004720 <TIM_Base_SetConfig+0x11c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a2a      	ldr	r2, [pc, #168]	; (8004724 <TIM_Base_SetConfig+0x120>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a29      	ldr	r2, [pc, #164]	; (8004728 <TIM_Base_SetConfig+0x124>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d017      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a28      	ldr	r2, [pc, #160]	; (800472c <TIM_Base_SetConfig+0x128>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a27      	ldr	r2, [pc, #156]	; (8004730 <TIM_Base_SetConfig+0x12c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00f      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a26      	ldr	r2, [pc, #152]	; (8004734 <TIM_Base_SetConfig+0x130>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a25      	ldr	r2, [pc, #148]	; (8004738 <TIM_Base_SetConfig+0x134>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d007      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a24      	ldr	r2, [pc, #144]	; (800473c <TIM_Base_SetConfig+0x138>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a23      	ldr	r2, [pc, #140]	; (8004740 <TIM_Base_SetConfig+0x13c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a0a      	ldr	r2, [pc, #40]	; (8004718 <TIM_Base_SetConfig+0x114>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0xf8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <TIM_Base_SetConfig+0x124>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d103      	bne.n	8004704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	615a      	str	r2, [r3, #20]
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40000c00 	.word	0x40000c00
 8004728:	40010400 	.word	0x40010400
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400
 8004734:	40014800 	.word	0x40014800
 8004738:	40001800 	.word	0x40001800
 800473c:	40001c00 	.word	0x40001c00
 8004740:	40002000 	.word	0x40002000

08004744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f023 0201 	bic.w	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f023 030a 	bic.w	r3, r3, #10
 8004780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	621a      	str	r2, [r3, #32]
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b087      	sub	sp, #28
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f023 0210 	bic.w	r2, r3, #16
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	031b      	lsls	r3, r3, #12
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	621a      	str	r2, [r3, #32]
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	f043 0307 	orr.w	r3, r3, #7
 8004824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004852:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	021a      	lsls	r2, r3, #8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	431a      	orrs	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4313      	orrs	r3, r2
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	609a      	str	r2, [r3, #8]
}
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800488c:	2302      	movs	r3, #2
 800488e:	e05a      	b.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a21      	ldr	r2, [pc, #132]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d022      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048dc:	d01d      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1d      	ldr	r2, [pc, #116]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d018      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1b      	ldr	r2, [pc, #108]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1a      	ldr	r2, [pc, #104]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00e      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a18      	ldr	r2, [pc, #96]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a15      	ldr	r2, [pc, #84]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d10c      	bne.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4313      	orrs	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40010400 	.word	0x40010400
 8004968:	40014000 	.word	0x40014000
 800496c:	40001800 	.word	0x40001800

08004970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <LL_GPIO_SetPinMode>:
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	; 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	fa93 f3a3 	rbit	r3, r3
 80049b2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	fab3 f383 	clz	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	2103      	movs	r1, #3
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	401a      	ands	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	fa93 f3a3 	rbit	r3, r3
 80049d2:	61bb      	str	r3, [r7, #24]
  return result;
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	fab3 f383 	clz	r3, r3
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]
}
 80049ea:	bf00      	nop
 80049ec:	3724      	adds	r7, #36	; 0x24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_GPIO_SetPinOutputType>:
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	431a      	orrs	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	605a      	str	r2, [r3, #4]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_GPIO_SetPinSpeed>:
{
 8004a26:	b480      	push	{r7}
 8004a28:	b089      	sub	sp, #36	; 0x24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	fa93 f3a3 	rbit	r3, r3
 8004a40:	613b      	str	r3, [r7, #16]
  return result;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	fab3 f383 	clz	r3, r3
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	2103      	movs	r1, #3
 8004a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	401a      	ands	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	fa93 f3a3 	rbit	r3, r3
 8004a60:	61bb      	str	r3, [r7, #24]
  return result;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	fab3 f383 	clz	r3, r3
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a72:	431a      	orrs	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	609a      	str	r2, [r3, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	3724      	adds	r7, #36	; 0x24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <LL_GPIO_SetPinPull>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	b089      	sub	sp, #36	; 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	fa93 f3a3 	rbit	r3, r3
 8004a9e:	613b      	str	r3, [r7, #16]
  return result;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	fab3 f383 	clz	r3, r3
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	2103      	movs	r1, #3
 8004aac:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	fa93 f3a3 	rbit	r3, r3
 8004abe:	61bb      	str	r3, [r7, #24]
  return result;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	fab3 f383 	clz	r3, r3
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	60da      	str	r2, [r3, #12]
}
 8004ad6:	bf00      	nop
 8004ad8:	3724      	adds	r7, #36	; 0x24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <LL_GPIO_SetAFPin_0_7>:
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b089      	sub	sp, #36	; 0x24
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a1a      	ldr	r2, [r3, #32]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	fa93 f3a3 	rbit	r3, r3
 8004afc:	613b      	str	r3, [r7, #16]
  return result;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	fab3 f383 	clz	r3, r3
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	210f      	movs	r1, #15
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	401a      	ands	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	61bb      	str	r3, [r7, #24]
  return result;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	fab3 f383 	clz	r3, r3
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	621a      	str	r2, [r3, #32]
}
 8004b34:	bf00      	nop
 8004b36:	3724      	adds	r7, #36	; 0x24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <LL_GPIO_SetAFPin_8_15>:
{
 8004b40:	b480      	push	{r7}
 8004b42:	b089      	sub	sp, #36	; 0x24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	fa93 f3a3 	rbit	r3, r3
 8004b5c:	613b      	str	r3, [r7, #16]
  return result;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	fab3 f383 	clz	r3, r3
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	210f      	movs	r1, #15
 8004b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	401a      	ands	r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	fa93 f3a3 	rbit	r3, r3
 8004b7e:	61bb      	str	r3, [r7, #24]
  return result;
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	fab3 f383 	clz	r3, r3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b96:	bf00      	nop
 8004b98:	3724      	adds	r7, #36	; 0x24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b088      	sub	sp, #32
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	613b      	str	r3, [r7, #16]
  return result;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	fab3 f383 	clz	r3, r3
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004bcc:	e050      	b.n	8004c70 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d042      	beq.n	8004c6a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d003      	beq.n	8004bf4 <LL_GPIO_Init+0x52>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d10d      	bne.n	8004c10 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	69b9      	ldr	r1, [r7, #24]
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff ff12 	bl	8004a26 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	461a      	mov	r2, r3
 8004c08:	69b9      	ldr	r1, [r7, #24]
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fef3 	bl	80049f6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	461a      	mov	r2, r3
 8004c16:	69b9      	ldr	r1, [r7, #24]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff ff33 	bl	8004a84 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d11a      	bne.n	8004c5c <LL_GPIO_Init+0xba>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	fa93 f3a3 	rbit	r3, r3
 8004c30:	60bb      	str	r3, [r7, #8]
  return result;
 8004c32:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004c34:	fab3 f383 	clz	r3, r3
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b07      	cmp	r3, #7
 8004c3c:	d807      	bhi.n	8004c4e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	461a      	mov	r2, r3
 8004c44:	69b9      	ldr	r1, [r7, #24]
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff ff4b 	bl	8004ae2 <LL_GPIO_SetAFPin_0_7>
 8004c4c:	e006      	b.n	8004c5c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	461a      	mov	r2, r3
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff ff72 	bl	8004b40 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	461a      	mov	r2, r3
 8004c62:	69b9      	ldr	r1, [r7, #24]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff fe97 	bl	8004998 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1a7      	bne.n	8004bce <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3720      	adds	r7, #32
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <LL_RCC_GetSysClkSource>:
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <LL_RCC_GetSysClkSource+0x18>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 030c 	and.w	r3, r3, #12
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800

08004ca4 <LL_RCC_GetAHBPrescaler>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004ca8:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <LL_RCC_GetAHBPrescaler+0x18>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40023800 	.word	0x40023800

08004cc0 <LL_RCC_GetAPB1Prescaler>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800

08004cdc <LL_RCC_GetAPB2Prescaler>:
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800

08004cf8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <LL_RCC_PLL_GetMainSource+0x18>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800

08004d14 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <LL_RCC_PLL_GetN+0x18>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	099b      	lsrs	r3, r3, #6
 8004d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	40023800 	.word	0x40023800

08004d30 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004d34:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <LL_RCC_PLL_GetP+0x18>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800

08004d4c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <LL_RCC_PLL_GetDivider+0x18>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800

08004d68 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004d70:	f000 f820 	bl	8004db4 <RCC_GetSystemClockFreq>
 8004d74:	4602      	mov	r2, r0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f840 	bl	8004e04 <RCC_GetHCLKClockFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f84e 	bl	8004e30 <RCC_GetPCLK1ClockFreq>
 8004d94:	4602      	mov	r2, r0
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f85a 	bl	8004e58 <RCC_GetPCLK2ClockFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60da      	str	r2, [r3, #12]
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004dbe:	f7ff ff63 	bl	8004c88 <LL_RCC_GetSysClkSource>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d00c      	beq.n	8004de2 <RCC_GetSystemClockFreq+0x2e>
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d80f      	bhi.n	8004dec <RCC_GetSystemClockFreq+0x38>
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <RCC_GetSystemClockFreq+0x22>
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d003      	beq.n	8004ddc <RCC_GetSystemClockFreq+0x28>
 8004dd4:	e00a      	b.n	8004dec <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <RCC_GetSystemClockFreq+0x48>)
 8004dd8:	607b      	str	r3, [r7, #4]
      break;
 8004dda:	e00a      	b.n	8004df2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004ddc:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <RCC_GetSystemClockFreq+0x4c>)
 8004dde:	607b      	str	r3, [r7, #4]
      break;
 8004de0:	e007      	b.n	8004df2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004de2:	2008      	movs	r0, #8
 8004de4:	f000 f84c 	bl	8004e80 <RCC_PLL_GetFreqDomain_SYS>
 8004de8:	6078      	str	r0, [r7, #4]
      break;
 8004dea:	e002      	b.n	8004df2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <RCC_GetSystemClockFreq+0x48>)
 8004dee:	607b      	str	r3, [r7, #4]
      break;
 8004df0:	bf00      	nop
  }

  return frequency;
 8004df2:	687b      	ldr	r3, [r7, #4]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	00f42400 	.word	0x00f42400
 8004e00:	007a1200 	.word	0x007a1200

08004e04 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004e0c:	f7ff ff4a 	bl	8004ca4 <LL_RCC_GetAHBPrescaler>
 8004e10:	4603      	mov	r3, r0
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <RCC_GetHCLKClockFreq+0x28>)
 8004e1a:	5cd3      	ldrb	r3, [r2, r3]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	40d3      	lsrs	r3, r2
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	08026528 	.word	0x08026528

08004e30 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004e38:	f7ff ff42 	bl	8004cc0 <LL_RCC_GetAPB1Prescaler>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	0a9b      	lsrs	r3, r3, #10
 8004e40:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <RCC_GetPCLK1ClockFreq+0x24>)
 8004e42:	5cd3      	ldrb	r3, [r2, r3]
 8004e44:	461a      	mov	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	40d3      	lsrs	r3, r2
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	08026538 	.word	0x08026538

08004e58 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004e60:	f7ff ff3c 	bl	8004cdc <LL_RCC_GetAPB2Prescaler>
 8004e64:	4603      	mov	r3, r0
 8004e66:	0b5b      	lsrs	r3, r3, #13
 8004e68:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <RCC_GetPCLK2ClockFreq+0x24>)
 8004e6a:	5cd3      	ldrb	r3, [r2, r3]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	40d3      	lsrs	r3, r2
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	08026538 	.word	0x08026538

08004e80 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	2300      	movs	r3, #0
 8004e92:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004e94:	f7ff ff30 	bl	8004cf8 <LL_RCC_PLL_GetMainSource>
 8004e98:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea6:	d003      	beq.n	8004eb0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004ea8:	e005      	b.n	8004eb6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004eaa:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004eac:	617b      	str	r3, [r7, #20]
      break;
 8004eae:	e005      	b.n	8004ebc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004eb0:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004eb2:	617b      	str	r3, [r7, #20]
      break;
 8004eb4:	e002      	b.n	8004ebc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ef4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004eb8:	617b      	str	r3, [r7, #20]
      break;
 8004eba:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d113      	bne.n	8004eea <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004ec2:	f7ff ff43 	bl	8004d4c <LL_RCC_PLL_GetDivider>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	fbb3 f4f2 	udiv	r4, r3, r2
 8004ece:	f7ff ff21 	bl	8004d14 <LL_RCC_PLL_GetN>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	fb03 f404 	mul.w	r4, r3, r4
 8004ed8:	f7ff ff2a 	bl	8004d30 <LL_RCC_PLL_GetP>
 8004edc:	4603      	mov	r3, r0
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	fbb4 f3f3 	udiv	r3, r4, r3
 8004ee8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004eea:	693b      	ldr	r3, [r7, #16]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd90      	pop	{r4, r7, pc}
 8004ef4:	00f42400 	.word	0x00f42400
 8004ef8:	007a1200 	.word	0x007a1200

08004efc <LL_USART_IsEnabled>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f10:	bf0c      	ite	eq
 8004f12:	2301      	moveq	r3, #1
 8004f14:	2300      	movne	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_USART_SetStopBitsLength>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	611a      	str	r2, [r3, #16]
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_USART_SetHWFlowCtrl>:
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	615a      	str	r2, [r3, #20]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <LL_USART_SetBaudRate>:
{
 8004f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f74:	b09f      	sub	sp, #124	; 0x7c
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6778      	str	r0, [r7, #116]	; 0x74
 8004f7a:	6739      	str	r1, [r7, #112]	; 0x70
 8004f7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f7e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f86:	f040 80bc 	bne.w	8005102 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f8c:	461c      	mov	r4, r3
 8004f8e:	f04f 0500 	mov.w	r5, #0
 8004f92:	4622      	mov	r2, r4
 8004f94:	462b      	mov	r3, r5
 8004f96:	eb12 0a02 	adds.w	sl, r2, r2
 8004f9a:	eb43 0b03 	adc.w	fp, r3, r3
 8004f9e:	4652      	mov	r2, sl
 8004fa0:	465b      	mov	r3, fp
 8004fa2:	1912      	adds	r2, r2, r4
 8004fa4:	eb45 0303 	adc.w	r3, r5, r3
 8004fa8:	f04f 0000 	mov.w	r0, #0
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	00d9      	lsls	r1, r3, #3
 8004fb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fb6:	00d0      	lsls	r0, r2, #3
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	1911      	adds	r1, r2, r4
 8004fbe:	6639      	str	r1, [r7, #96]	; 0x60
 8004fc0:	416b      	adcs	r3, r5
 8004fc2:	667b      	str	r3, [r7, #100]	; 0x64
 8004fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	1891      	adds	r1, r2, r2
 8004fce:	6339      	str	r1, [r7, #48]	; 0x30
 8004fd0:	415b      	adcs	r3, r3
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fd8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004fdc:	f7fb f9a0 	bl	8000320 <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4ba9      	ldr	r3, [pc, #676]	; (800528c <LL_USART_SetBaudRate+0x31c>)
 8004fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	b29e      	uxth	r6, r3
 8004ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ff4:	461c      	mov	r4, r3
 8004ff6:	f04f 0500 	mov.w	r5, #0
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	1891      	adds	r1, r2, r2
 8005000:	62b9      	str	r1, [r7, #40]	; 0x28
 8005002:	415b      	adcs	r3, r3
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800500a:	1912      	adds	r2, r2, r4
 800500c:	eb45 0303 	adc.w	r3, r5, r3
 8005010:	f04f 0000 	mov.w	r0, #0
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	00d9      	lsls	r1, r3, #3
 800501a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800501e:	00d0      	lsls	r0, r2, #3
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	1911      	adds	r1, r2, r4
 8005026:	65b9      	str	r1, [r7, #88]	; 0x58
 8005028:	416b      	adcs	r3, r5
 800502a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800502c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800502e:	461a      	mov	r2, r3
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	1891      	adds	r1, r2, r2
 8005036:	6239      	str	r1, [r7, #32]
 8005038:	415b      	adcs	r3, r3
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
 800503c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005040:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005044:	f7fb f96c 	bl	8000320 <__aeabi_uldivmod>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4b8f      	ldr	r3, [pc, #572]	; (800528c <LL_USART_SetBaudRate+0x31c>)
 800504e:	fba3 1302 	umull	r1, r3, r3, r2
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	2164      	movs	r1, #100	; 0x64
 8005056:	fb01 f303 	mul.w	r3, r1, r3
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	3332      	adds	r3, #50	; 0x32
 8005060:	4a8a      	ldr	r2, [pc, #552]	; (800528c <LL_USART_SetBaudRate+0x31c>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	b29b      	uxth	r3, r3
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	b29b      	uxth	r3, r3
 800506e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005072:	b29b      	uxth	r3, r3
 8005074:	4433      	add	r3, r6
 8005076:	b29e      	uxth	r6, r3
 8005078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800507a:	4618      	mov	r0, r3
 800507c:	f04f 0100 	mov.w	r1, #0
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	1894      	adds	r4, r2, r2
 8005086:	61bc      	str	r4, [r7, #24]
 8005088:	415b      	adcs	r3, r3
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005090:	1812      	adds	r2, r2, r0
 8005092:	eb41 0303 	adc.w	r3, r1, r3
 8005096:	f04f 0400 	mov.w	r4, #0
 800509a:	f04f 0500 	mov.w	r5, #0
 800509e:	00dd      	lsls	r5, r3, #3
 80050a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050a4:	00d4      	lsls	r4, r2, #3
 80050a6:	4622      	mov	r2, r4
 80050a8:	462b      	mov	r3, r5
 80050aa:	1814      	adds	r4, r2, r0
 80050ac:	653c      	str	r4, [r7, #80]	; 0x50
 80050ae:	414b      	adcs	r3, r1
 80050b0:	657b      	str	r3, [r7, #84]	; 0x54
 80050b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050b4:	461a      	mov	r2, r3
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	1891      	adds	r1, r2, r2
 80050bc:	6139      	str	r1, [r7, #16]
 80050be:	415b      	adcs	r3, r3
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80050ca:	f7fb f929 	bl	8000320 <__aeabi_uldivmod>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4b6e      	ldr	r3, [pc, #440]	; (800528c <LL_USART_SetBaudRate+0x31c>)
 80050d4:	fba3 1302 	umull	r1, r3, r3, r2
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	2164      	movs	r1, #100	; 0x64
 80050dc:	fb01 f303 	mul.w	r3, r1, r3
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	3332      	adds	r3, #50	; 0x32
 80050e6:	4a69      	ldr	r2, [pc, #420]	; (800528c <LL_USART_SetBaudRate+0x31c>)
 80050e8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	4433      	add	r3, r6
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050fe:	609a      	str	r2, [r3, #8]
}
 8005100:	e0be      	b.n	8005280 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005104:	461c      	mov	r4, r3
 8005106:	f04f 0500 	mov.w	r5, #0
 800510a:	4622      	mov	r2, r4
 800510c:	462b      	mov	r3, r5
 800510e:	eb12 0802 	adds.w	r8, r2, r2
 8005112:	eb43 0903 	adc.w	r9, r3, r3
 8005116:	4642      	mov	r2, r8
 8005118:	464b      	mov	r3, r9
 800511a:	1912      	adds	r2, r2, r4
 800511c:	eb45 0303 	adc.w	r3, r5, r3
 8005120:	f04f 0000 	mov.w	r0, #0
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	00d9      	lsls	r1, r3, #3
 800512a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800512e:	00d0      	lsls	r0, r2, #3
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	1911      	adds	r1, r2, r4
 8005136:	64b9      	str	r1, [r7, #72]	; 0x48
 8005138:	416b      	adcs	r3, r5
 800513a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800513c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800513e:	4618      	mov	r0, r3
 8005140:	f04f 0100 	mov.w	r1, #0
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	008b      	lsls	r3, r1, #2
 800514e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005152:	0082      	lsls	r2, r0, #2
 8005154:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005158:	f7fb f8e2 	bl	8000320 <__aeabi_uldivmod>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4b4a      	ldr	r3, [pc, #296]	; (800528c <LL_USART_SetBaudRate+0x31c>)
 8005162:	fba3 2302 	umull	r2, r3, r3, r2
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	b29b      	uxth	r3, r3
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	b29e      	uxth	r6, r3
 800516e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005170:	4618      	mov	r0, r3
 8005172:	f04f 0100 	mov.w	r1, #0
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	1894      	adds	r4, r2, r2
 800517c:	60bc      	str	r4, [r7, #8]
 800517e:	415b      	adcs	r3, r3
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005186:	1812      	adds	r2, r2, r0
 8005188:	eb41 0303 	adc.w	r3, r1, r3
 800518c:	f04f 0400 	mov.w	r4, #0
 8005190:	f04f 0500 	mov.w	r5, #0
 8005194:	00dd      	lsls	r5, r3, #3
 8005196:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800519a:	00d4      	lsls	r4, r2, #3
 800519c:	4622      	mov	r2, r4
 800519e:	462b      	mov	r3, r5
 80051a0:	1814      	adds	r4, r2, r0
 80051a2:	643c      	str	r4, [r7, #64]	; 0x40
 80051a4:	414b      	adcs	r3, r1
 80051a6:	647b      	str	r3, [r7, #68]	; 0x44
 80051a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051aa:	4618      	mov	r0, r3
 80051ac:	f04f 0100 	mov.w	r1, #0
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	008b      	lsls	r3, r1, #2
 80051ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051be:	0082      	lsls	r2, r0, #2
 80051c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80051c4:	f7fb f8ac 	bl	8000320 <__aeabi_uldivmod>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4b2f      	ldr	r3, [pc, #188]	; (800528c <LL_USART_SetBaudRate+0x31c>)
 80051ce:	fba3 1302 	umull	r1, r3, r3, r2
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	2164      	movs	r1, #100	; 0x64
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	3332      	adds	r3, #50	; 0x32
 80051e0:	4a2a      	ldr	r2, [pc, #168]	; (800528c <LL_USART_SetBaudRate+0x31c>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	4433      	add	r3, r6
 80051f2:	b29e      	uxth	r6, r3
 80051f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f6:	4618      	mov	r0, r3
 80051f8:	f04f 0100 	mov.w	r1, #0
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	1894      	adds	r4, r2, r2
 8005202:	603c      	str	r4, [r7, #0]
 8005204:	415b      	adcs	r3, r3
 8005206:	607b      	str	r3, [r7, #4]
 8005208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800520c:	1812      	adds	r2, r2, r0
 800520e:	eb41 0303 	adc.w	r3, r1, r3
 8005212:	f04f 0400 	mov.w	r4, #0
 8005216:	f04f 0500 	mov.w	r5, #0
 800521a:	00dd      	lsls	r5, r3, #3
 800521c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005220:	00d4      	lsls	r4, r2, #3
 8005222:	4622      	mov	r2, r4
 8005224:	462b      	mov	r3, r5
 8005226:	1814      	adds	r4, r2, r0
 8005228:	63bc      	str	r4, [r7, #56]	; 0x38
 800522a:	414b      	adcs	r3, r1
 800522c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800522e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005230:	4618      	mov	r0, r3
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	008b      	lsls	r3, r1, #2
 8005240:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005244:	0082      	lsls	r2, r0, #2
 8005246:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800524a:	f7fb f869 	bl	8000320 <__aeabi_uldivmod>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4b0e      	ldr	r3, [pc, #56]	; (800528c <LL_USART_SetBaudRate+0x31c>)
 8005254:	fba3 1302 	umull	r1, r3, r3, r2
 8005258:	095b      	lsrs	r3, r3, #5
 800525a:	2164      	movs	r1, #100	; 0x64
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	3332      	adds	r3, #50	; 0x32
 8005266:	4a09      	ldr	r2, [pc, #36]	; (800528c <LL_USART_SetBaudRate+0x31c>)
 8005268:	fba2 2303 	umull	r2, r3, r2, r3
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	b29b      	uxth	r3, r3
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	b29b      	uxth	r3, r3
 8005276:	4433      	add	r3, r6
 8005278:	b29b      	uxth	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800527e:	609a      	str	r2, [r3, #8]
}
 8005280:	bf00      	nop
 8005282:	377c      	adds	r7, #124	; 0x7c
 8005284:	46bd      	mov	sp, r7
 8005286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528a:	bf00      	nop
 800528c:	51eb851f 	.word	0x51eb851f

08005290 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fe2a 	bl	8004efc <LL_USART_IsEnabled>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d15e      	bne.n	800536c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052b6:	f023 030c 	bic.w	r3, r3, #12
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	6851      	ldr	r1, [r2, #4]
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	68d2      	ldr	r2, [r2, #12]
 80052c2:	4311      	orrs	r1, r2
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	6912      	ldr	r2, [r2, #16]
 80052c8:	4311      	orrs	r1, r2
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	6992      	ldr	r2, [r2, #24]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff fe21 	bl	8004f24 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff fe2e 	bl	8004f4a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80052ee:	f107 0308 	add.w	r3, r7, #8
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fd38 	bl	8004d68 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a1f      	ldr	r2, [pc, #124]	; (8005378 <LL_USART_Init+0xe8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d102      	bne.n	8005306 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	61bb      	str	r3, [r7, #24]
 8005304:	e021      	b.n	800534a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1c      	ldr	r2, [pc, #112]	; (800537c <LL_USART_Init+0xec>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d102      	bne.n	8005314 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	e01a      	b.n	800534a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1a      	ldr	r2, [pc, #104]	; (8005380 <LL_USART_Init+0xf0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d102      	bne.n	8005322 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e013      	b.n	800534a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a17      	ldr	r2, [pc, #92]	; (8005384 <LL_USART_Init+0xf4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d102      	bne.n	8005330 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	e00c      	b.n	800534a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a15      	ldr	r2, [pc, #84]	; (8005388 <LL_USART_Init+0xf8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d102      	bne.n	800533e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	e005      	b.n	800534a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a12      	ldr	r2, [pc, #72]	; (800538c <LL_USART_Init+0xfc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d101      	bne.n	800534a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00d      	beq.n	800536c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d009      	beq.n	800536c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8005358:	2300      	movs	r3, #0
 800535a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69b9      	ldr	r1, [r7, #24]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fe02 	bl	8004f70 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800536c:	7ffb      	ldrb	r3, [r7, #31]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40011000 	.word	0x40011000
 800537c:	40004400 	.word	0x40004400
 8005380:	40004800 	.word	0x40004800
 8005384:	40011400 	.word	0x40011400
 8005388:	40004c00 	.word	0x40004c00
 800538c:	40005000 	.word	0x40005000

08005390 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005398:	4a04      	ldr	r2, [pc, #16]	; (80053ac <LL_SetSystemCoreClock+0x1c>)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6013      	str	r3, [r2, #0]
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000008 	.word	0x20000008

080053b0 <AES_Generate_Rand_Key>:
#include <AES_128.h>

uint8_t AES128key[AES128_KEY_LEN];

//generate new key for new connect
void AES_Generate_Rand_Key() {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
	int i;
	srand(time(NULL));
 80053b6:	2000      	movs	r0, #0
 80053b8:	f01b ff1c 	bl	80211f4 <time>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4613      	mov	r3, r2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f01b fda6 	bl	8020f14 <srand>
	for(i = 0; i < AES128_KEY_LEN; i++) {
 80053c8:	2300      	movs	r3, #0
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	e00b      	b.n	80053e6 <AES_Generate_Rand_Key+0x36>
		AES128key[i] = (uint8_t)rand();
 80053ce:	f01b fdcf 	bl	8020f70 <rand>
 80053d2:	4603      	mov	r3, r0
 80053d4:	b2d9      	uxtb	r1, r3
 80053d6:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <AES_Generate_Rand_Key+0x48>)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4413      	add	r3, r2
 80053dc:	460a      	mov	r2, r1
 80053de:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < AES128_KEY_LEN; i++) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3301      	adds	r3, #1
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	ddf0      	ble.n	80053ce <AES_Generate_Rand_Key+0x1e>
	}
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	200059d4 	.word	0x200059d4

080053fc <AES_Get_Key>:

uint8_t* AES_Get_Key() {return AES128key;}
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
 8005400:	4b02      	ldr	r3, [pc, #8]	; (800540c <AES_Get_Key+0x10>)
 8005402:	4618      	mov	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	200059d4 	.word	0x200059d4

08005410 <KeyExpansionCore>:
   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

void KeyExpansionCore(uint8_t* in, uint8_t i)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
	// Rotate left
	uint32_t* q = (uint32_t*)in; //uint8_t* q =in;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60fb      	str	r3, [r7, #12]
	*q = (*q >> 8) | ((*q & 0xff) << 24);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	ea4f 2233 	mov.w	r2, r3, ror #8
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	601a      	str	r2, [r3, #0]
	// s-box four bytes
	in[0] = s_box[in[0]];	 in[1] = s_box[in[1]];
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	4b17      	ldr	r3, [pc, #92]	; (8005490 <KeyExpansionCore+0x80>)
 8005434:	5c9a      	ldrb	r2, [r3, r2]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3301      	adds	r3, #1
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	4619      	mov	r1, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3301      	adds	r3, #1
 8005446:	4a12      	ldr	r2, [pc, #72]	; (8005490 <KeyExpansionCore+0x80>)
 8005448:	5c52      	ldrb	r2, [r2, r1]
 800544a:	701a      	strb	r2, [r3, #0]
	in[2] = s_box[in[2]];	 in[3] = s_box[in[3]];
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3302      	adds	r3, #2
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	4619      	mov	r1, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3302      	adds	r3, #2
 8005458:	4a0d      	ldr	r2, [pc, #52]	; (8005490 <KeyExpansionCore+0x80>)
 800545a:	5c52      	ldrb	r2, [r2, r1]
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3303      	adds	r3, #3
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	4619      	mov	r1, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3303      	adds	r3, #3
 800546a:	4a09      	ldr	r2, [pc, #36]	; (8005490 <KeyExpansionCore+0x80>)
 800546c:	5c52      	ldrb	r2, [r2, r1]
 800546e:	701a      	strb	r2, [r3, #0]
	// Rcon
	in[0] ^= rcon[i];
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	781a      	ldrb	r2, [r3, #0]
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	4907      	ldr	r1, [pc, #28]	; (8005494 <KeyExpansionCore+0x84>)
 8005478:	5ccb      	ldrb	r3, [r1, r3]
 800547a:	4053      	eors	r3, r2
 800547c:	b2da      	uxtb	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	701a      	strb	r2, [r3, #0]
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	2000003c 	.word	0x2000003c
 8005494:	20000010 	.word	0x20000010

08005498 <KeyExpansion>:

void KeyExpansion(uint8_t* inputKey, uint8_t* expandedKeys)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
	// The first 16 bytes are the original key:
	for (int i = 0; i < 16; i++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	e00a      	b.n	80054be <KeyExpansion+0x26>
		expandedKeys[i] = inputKey[i];
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	441a      	add	r2, r3
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	440b      	add	r3, r1
 80054b4:	7812      	ldrb	r2, [r2, #0]
 80054b6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	3301      	adds	r3, #1
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	2b0f      	cmp	r3, #15
 80054c2:	ddf1      	ble.n	80054a8 <KeyExpansion+0x10>
	//Variables:
	int bytesGenerated = 16; // We've generated 16 bytes so far
 80054c4:	2310      	movs	r3, #16
 80054c6:	61bb      	str	r3, [r7, #24]
	int rconIteration = 0;  // Rcon Iteration begins at 1
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
	uint8_t temp[4]; // Temporary storage for core

	while (bytesGenerated < 176)
 80054cc:	e042      	b.n	8005554 <KeyExpansion+0xbc>
	{
		// Read 4 bytes for the core
		for (int i = 0; i < 4; i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	e00f      	b.n	80054f4 <KeyExpansion+0x5c>
			temp[i] = expandedKeys[i + bytesGenerated - 4];
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	4413      	add	r3, r2
 80054da:	3b04      	subs	r3, #4
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	4413      	add	r3, r2
 80054e0:	7819      	ldrb	r1, [r3, #0]
 80054e2:	f107 0208 	add.w	r2, r7, #8
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	4413      	add	r3, r2
 80054ea:	460a      	mov	r2, r1
 80054ec:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	3301      	adds	r3, #1
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	ddec      	ble.n	80054d4 <KeyExpansion+0x3c>
		//Perform the core once for each 16 byte key:
		if (bytesGenerated % 16 == 0)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <KeyExpansion+0x82>
		{
			KeyExpansionCore(temp, rconIteration);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	f107 0308 	add.w	r3, r7, #8
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff ff7e 	bl	8005410 <KeyExpansionCore>
			rconIteration++;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	3301      	adds	r3, #1
 8005518:	617b      	str	r3, [r7, #20]
		}
		//XOR temp with [bytesGenerates-16], and store in expandedKeys:
		for (uint8_t a = 0; a < 4; a++)
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
 800551e:	e016      	b.n	800554e <KeyExpansion+0xb6>
		{
			expandedKeys[bytesGenerated] =
				expandedKeys[bytesGenerated - 16] ^ temp[a];
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	3b10      	subs	r3, #16
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	4413      	add	r3, r2
 8005528:	7819      	ldrb	r1, [r3, #0]
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	f107 0220 	add.w	r2, r7, #32
 8005530:	4413      	add	r3, r2
 8005532:	f813 2c18 	ldrb.w	r2, [r3, #-24]
			expandedKeys[bytesGenerated] =
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	6838      	ldr	r0, [r7, #0]
 800553a:	4403      	add	r3, r0
 800553c:	404a      	eors	r2, r1
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
			bytesGenerated++;
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	3301      	adds	r3, #1
 8005546:	61bb      	str	r3, [r7, #24]
		for (uint8_t a = 0; a < 4; a++)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	3301      	adds	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b03      	cmp	r3, #3
 8005552:	d9e5      	bls.n	8005520 <KeyExpansion+0x88>
	while (bytesGenerated < 176)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2baf      	cmp	r3, #175	; 0xaf
 8005558:	ddb9      	ble.n	80054ce <KeyExpansion+0x36>
		}
	}
}
 800555a:	bf00      	nop
 800555c:	bf00      	nop
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <InvSubBytes>:
{
	for (int i = 0; i < 16; i++)
		state[i] = s_box[state[i]];
}
void InvSubBytes(uint8_t* state)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 16; i++)
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	e00d      	b.n	800558e <InvSubBytes+0x2a>
		state[i] = Invs_box[state[i]];
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4413      	add	r3, r2
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <InvSubBytes+0x40>)
 8005584:	5c52      	ldrb	r2, [r2, r1]
 8005586:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3301      	adds	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b0f      	cmp	r3, #15
 8005592:	ddee      	ble.n	8005572 <InvSubBytes+0xe>
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	2000013c 	.word	0x2000013c

080055a8 <InvShiftRows>:
		temp[i] = state[SR_box[i]];
	for (int i = 0; i < 16; i++)
		state[i] = temp[i];
}
void InvShiftRows(uint8_t* state)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b089      	sub	sp, #36	; 0x24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
	uint8_t temp[16];
	for (int i = 0; i < 16; i++)
 80055b0:	2300      	movs	r3, #0
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	e010      	b.n	80055d8 <InvShiftRows+0x30>
		temp[i] = state[InvSR_box[i]];
 80055b6:	4a16      	ldr	r2, [pc, #88]	; (8005610 <InvShiftRows+0x68>)
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	4413      	add	r3, r2
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	7819      	ldrb	r1, [r3, #0]
 80055c6:	f107 0208 	add.w	r2, r7, #8
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	460a      	mov	r2, r1
 80055d0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	3301      	adds	r3, #1
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b0f      	cmp	r3, #15
 80055dc:	ddeb      	ble.n	80055b6 <InvShiftRows+0xe>
	for (int i = 0; i < 16; i++)
 80055de:	2300      	movs	r3, #0
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e00b      	b.n	80055fc <InvShiftRows+0x54>
		state[i] = temp[i];
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	4413      	add	r3, r2
 80055ea:	f107 0108 	add.w	r1, r7, #8
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	440a      	add	r2, r1
 80055f2:	7812      	ldrb	r2, [r2, #0]
 80055f4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	3301      	adds	r3, #1
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2b0f      	cmp	r3, #15
 8005600:	ddf0      	ble.n	80055e4 <InvShiftRows+0x3c>
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	3724      	adds	r7, #36	; 0x24
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	2000001c 	.word	0x2000001c

08005614 <mulGF>:

uint8_t mulGF(uint8_t i, uint8_t Mix) // multiple in GF 2^8
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	460a      	mov	r2, r1
 800561e:	71fb      	strb	r3, [r7, #7]
 8005620:	4613      	mov	r3, r2
 8005622:	71bb      	strb	r3, [r7, #6]
	uint16_t a = i;
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	81fb      	strh	r3, [r7, #14]
	if (Mix == 1)  return a;						  //mul 1  0001
 8005628:	79bb      	ldrb	r3, [r7, #6]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d102      	bne.n	8005634 <mulGF+0x20>
 800562e:	89fb      	ldrh	r3, [r7, #14]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	e076      	b.n	8005722 <mulGF+0x10e>
	if (Mix == 3)  a = (i << 1) ^ i;				  //mul 3  0011
 8005634:	79bb      	ldrb	r3, [r7, #6]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d107      	bne.n	800564a <mulGF+0x36>
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	b21a      	sxth	r2, r3
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	b21b      	sxth	r3, r3
 8005644:	4053      	eors	r3, r2
 8005646:	b21b      	sxth	r3, r3
 8005648:	81fb      	strh	r3, [r7, #14]
	if (Mix == 2)  a = (i << 1);					  //mul 2  0010
 800564a:	79bb      	ldrb	r3, [r7, #6]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d103      	bne.n	8005658 <mulGF+0x44>
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	b29b      	uxth	r3, r3
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	81fb      	strh	r3, [r7, #14]
	if (Mix == 9)  a = (i << 3) ^ i;				  //mul 9  1001
 8005658:	79bb      	ldrb	r3, [r7, #6]
 800565a:	2b09      	cmp	r3, #9
 800565c:	d107      	bne.n	800566e <mulGF+0x5a>
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	b21a      	sxth	r2, r3
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	b21b      	sxth	r3, r3
 8005668:	4053      	eors	r3, r2
 800566a:	b21b      	sxth	r3, r3
 800566c:	81fb      	strh	r3, [r7, #14]
	if (Mix == 11) a = (i << 3) ^ (i << 1) ^ i;		  //mul 11 1011
 800566e:	79bb      	ldrb	r3, [r7, #6]
 8005670:	2b0b      	cmp	r3, #11
 8005672:	d10c      	bne.n	800568e <mulGF+0x7a>
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	b21a      	sxth	r2, r3
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	b21b      	sxth	r3, r3
 8005680:	4053      	eors	r3, r2
 8005682:	b21a      	sxth	r2, r3
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	b21b      	sxth	r3, r3
 8005688:	4053      	eors	r3, r2
 800568a:	b21b      	sxth	r3, r3
 800568c:	81fb      	strh	r3, [r7, #14]
	if (Mix == 13) a = (i << 3) ^ (i << 2) ^ i;		  //mul 13 1101
 800568e:	79bb      	ldrb	r3, [r7, #6]
 8005690:	2b0d      	cmp	r3, #13
 8005692:	d10c      	bne.n	80056ae <mulGF+0x9a>
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	b21a      	sxth	r2, r3
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	b21b      	sxth	r3, r3
 80056a0:	4053      	eors	r3, r2
 80056a2:	b21a      	sxth	r2, r3
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	b21b      	sxth	r3, r3
 80056a8:	4053      	eors	r3, r2
 80056aa:	b21b      	sxth	r3, r3
 80056ac:	81fb      	strh	r3, [r7, #14]
	if (Mix == 14) a = (i << 3) ^ (i << 2) ^ (i << 1);//mul 14 1110
 80056ae:	79bb      	ldrb	r3, [r7, #6]
 80056b0:	2b0e      	cmp	r3, #14
 80056b2:	d10d      	bne.n	80056d0 <mulGF+0xbc>
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	b21a      	sxth	r2, r3
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	b21b      	sxth	r3, r3
 80056c0:	4053      	eors	r3, r2
 80056c2:	b21a      	sxth	r2, r3
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	b21b      	sxth	r3, r3
 80056ca:	4053      	eors	r3, r2
 80056cc:	b21b      	sxth	r3, r3
 80056ce:	81fb      	strh	r3, [r7, #14]
	int k = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60bb      	str	r3, [r7, #8]
	while (a > 0xff)
 80056d4:	e020      	b.n	8005718 <mulGF+0x104>
	{
		k = a / 0x100; // 1 0000  0000
 80056d6:	89fb      	ldrh	r3, [r7, #14]
 80056d8:	0a1b      	lsrs	r3, r3, #8
 80056da:	b29b      	uxth	r3, r3
 80056dc:	60bb      	str	r3, [r7, #8]
		if (k >= 4) k = 4;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	dd01      	ble.n	80056e8 <mulGF+0xd4>
 80056e4:	2304      	movs	r3, #4
 80056e6:	60bb      	str	r3, [r7, #8]
		if (k >= 2 && k < 4) k = 2;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	dd04      	ble.n	80056f8 <mulGF+0xe4>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	dc01      	bgt.n	80056f8 <mulGF+0xe4>
 80056f4:	2302      	movs	r3, #2
 80056f6:	60bb      	str	r3, [r7, #8]
		a ^= (k * 0x11B); // 1 0001 1011: x^8 + x^4 + x^3 + x + 1
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	00d2      	lsls	r2, r2, #3
 8005700:	441a      	add	r2, r3
 8005702:	00d2      	lsls	r2, r2, #3
 8005704:	1ad2      	subs	r2, r2, r3
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	b29b      	uxth	r3, r3
 800570c:	b21a      	sxth	r2, r3
 800570e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005712:	4053      	eors	r3, r2
 8005714:	b21b      	sxth	r3, r3
 8005716:	81fb      	strh	r3, [r7, #14]
	while (a > 0xff)
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	2bff      	cmp	r3, #255	; 0xff
 800571c:	d8db      	bhi.n	80056d6 <mulGF+0xc2>
	}
	return a;
 800571e:	89fb      	ldrh	r3, [r7, #14]
 8005720:	b2db      	uxtb	r3, r3
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <InvMixColumns>:
	}
	for (int i = 0; i < 16; i++)
		state[i] = temp[i];
}
void InvMixColumns(uint8_t* state)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08c      	sub	sp, #48	; 0x30
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	uint8_t temp[16];
	uint8_t n = 0, k = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800573e:	2300      	movs	r3, #0
 8005740:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < 16; i++)
 8005744:	2300      	movs	r3, #0
 8005746:	62bb      	str	r3, [r7, #40]	; 0x28
 8005748:	e055      	b.n	80057f6 <InvMixColumns+0xc6>
	{
		if (i == 4) { n = 4;  k = 0; }
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	2b04      	cmp	r3, #4
 800574e:	d105      	bne.n	800575c <InvMixColumns+0x2c>
 8005750:	2304      	movs	r3, #4
 8005752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005756:	2300      	movs	r3, #0
 8005758:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if (i == 8) { n = 8;  k = 0; }
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	2b08      	cmp	r3, #8
 8005760:	d105      	bne.n	800576e <InvMixColumns+0x3e>
 8005762:	2308      	movs	r3, #8
 8005764:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005768:	2300      	movs	r3, #0
 800576a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if (i == 12) { n = 12; k = 0; }
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	2b0c      	cmp	r3, #12
 8005772:	d105      	bne.n	8005780 <InvMixColumns+0x50>
 8005774:	230c      	movs	r3, #12
 8005776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800577a:	2300      	movs	r3, #0
 800577c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		uint8_t tempXor[4];
		for (int j = 0; j < 4; j++)
 8005780:	2300      	movs	r3, #0
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
 8005784:	e01c      	b.n	80057c0 <InvMixColumns+0x90>
		{
			tempXor[j] = mulGF(state[j + n], InvMix[j + k * 4]);
 8005786:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	4413      	add	r3, r2
 800578e:	461a      	mov	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4413      	add	r3, r2
 8005794:	7818      	ldrb	r0, [r3, #0]
 8005796:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	4413      	add	r3, r2
 80057a0:	4a22      	ldr	r2, [pc, #136]	; (800582c <InvMixColumns+0xfc>)
 80057a2:	5cd3      	ldrb	r3, [r2, r3]
 80057a4:	4619      	mov	r1, r3
 80057a6:	f7ff ff35 	bl	8005614 <mulGF>
 80057aa:	4603      	mov	r3, r0
 80057ac:	4619      	mov	r1, r3
 80057ae:	f107 020c 	add.w	r2, r7, #12
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	4413      	add	r3, r2
 80057b6:	460a      	mov	r2, r1
 80057b8:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++)
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	3301      	adds	r3, #1
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	dddf      	ble.n	8005786 <InvMixColumns+0x56>
		}
		temp[i] = tempXor[0] ^ tempXor[1] ^ tempXor[2] ^ tempXor[3];
 80057c6:	7b3a      	ldrb	r2, [r7, #12]
 80057c8:	7b7b      	ldrb	r3, [r7, #13]
 80057ca:	4053      	eors	r3, r2
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	4053      	eors	r3, r2
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	4053      	eors	r3, r2
 80057d8:	b2d9      	uxtb	r1, r3
 80057da:	f107 0210 	add.w	r2, r7, #16
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	4413      	add	r3, r2
 80057e2:	460a      	mov	r2, r1
 80057e4:	701a      	strb	r2, [r3, #0]
		k++;
 80057e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057ea:	3301      	adds	r3, #1
 80057ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < 16; i++)
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	3301      	adds	r3, #1
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	2b0f      	cmp	r3, #15
 80057fa:	dda6      	ble.n	800574a <InvMixColumns+0x1a>
	}
	for (int i = 0; i < 16; i++)
 80057fc:	2300      	movs	r3, #0
 80057fe:	623b      	str	r3, [r7, #32]
 8005800:	e00b      	b.n	800581a <InvMixColumns+0xea>
		state[i] = temp[i];
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4413      	add	r3, r2
 8005808:	f107 0110 	add.w	r1, r7, #16
 800580c:	6a3a      	ldr	r2, [r7, #32]
 800580e:	440a      	add	r2, r1
 8005810:	7812      	ldrb	r2, [r2, #0]
 8005812:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	3301      	adds	r3, #1
 8005818:	623b      	str	r3, [r7, #32]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2b0f      	cmp	r3, #15
 800581e:	ddf0      	ble.n	8005802 <InvMixColumns+0xd2>
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	3730      	adds	r7, #48	; 0x30
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	2000002c 	.word	0x2000002c

08005830 <AddRoundKey>:
void AddRoundKey(uint8_t* state, uint8_t* roundKey)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 16; i++)
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e010      	b.n	8005862 <AddRoundKey+0x32>
		state[i] ^= roundKey[i];
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	7819      	ldrb	r1, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	4413      	add	r3, r2
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	4403      	add	r3, r0
 8005856:	404a      	eors	r2, r1
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3301      	adds	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b0f      	cmp	r3, #15
 8005866:	ddeb      	ble.n	8005840 <AddRoundKey+0x10>
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <AES_Decrypt_Block_Overwrite>:
	for (int i = 0; i < 16; i++)
		decrypted_cipher[i] = state[i];
}

void AES_Decrypt_Block_Overwrite(uint8_t* cipher, uint8_t* key)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b0b0      	sub	sp, #192	; 0xc0
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
	//trick exchange first and last two bytes
	uint8_t tmp = cipher[0];
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	cipher[0] = cipher[1];
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	785a      	ldrb	r2, [r3, #1]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	701a      	strb	r2, [r3, #0]
	cipher[1] = tmp;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3301      	adds	r3, #1
 8005894:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8005898:	701a      	strb	r2, [r3, #0]
	tmp = cipher[14];
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	7b9b      	ldrb	r3, [r3, #14]
 800589e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	cipher[14] = cipher[15];
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	330e      	adds	r3, #14
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	7bd2      	ldrb	r2, [r2, #15]
 80058aa:	701a      	strb	r2, [r3, #0]
	cipher[15] = tmp;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	330f      	adds	r3, #15
 80058b0:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 80058b4:	701a      	strb	r2, [r3, #0]

	//Expand the key
	uint8_t expandedKey[176];
	KeyExpansion(key, expandedKey);
 80058b6:	f107 0308 	add.w	r3, r7, #8
 80058ba:	4619      	mov	r1, r3
 80058bc:	6838      	ldr	r0, [r7, #0]
 80058be:	f7ff fdeb 	bl	8005498 <KeyExpansion>

	AddRoundKey(cipher, expandedKey + 160);
 80058c2:	f107 0308 	add.w	r3, r7, #8
 80058c6:	33a0      	adds	r3, #160	; 0xa0
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff ffb0 	bl	8005830 <AddRoundKey>

	for (int i = 8; i >= 0; i--)
 80058d0:	2308      	movs	r3, #8
 80058d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80058d6:	e019      	b.n	800590c <AES_Decrypt_Block_Overwrite+0x96>
	{
		InvShiftRows(cipher);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff fe65 	bl	80055a8 <InvShiftRows>
		InvSubBytes(cipher);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fe40 	bl	8005564 <InvSubBytes>
		AddRoundKey(cipher, expandedKey + (16 * (i + 1)));
 80058e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058e8:	3301      	adds	r3, #1
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	461a      	mov	r2, r3
 80058ee:	f107 0308 	add.w	r3, r7, #8
 80058f2:	4413      	add	r3, r2
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff ff9a 	bl	8005830 <AddRoundKey>
		InvMixColumns(cipher);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff ff17 	bl	8005730 <InvMixColumns>
	for (int i = 8; i >= 0; i--)
 8005902:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005906:	3b01      	subs	r3, #1
 8005908:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800590c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005910:	2b00      	cmp	r3, #0
 8005912:	dae1      	bge.n	80058d8 <AES_Decrypt_Block_Overwrite+0x62>
	}
	//Final Round
	InvShiftRows(cipher);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff fe47 	bl	80055a8 <InvShiftRows>
	InvSubBytes(cipher);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fe22 	bl	8005564 <InvSubBytes>
	AddRoundKey(cipher, expandedKey);
 8005920:	f107 0308 	add.w	r3, r7, #8
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ff82 	bl	8005830 <AddRoundKey>
}
 800592c:	bf00      	nop
 800592e:	37c0      	adds	r7, #192	; 0xc0
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <AES_Decrypt_Packet>:
	}
	return newLen;
}

//overwrite, make sure data memory size is multiple of a block size. return decrypted packet len, fail return -1
int AES_Decrypt_Packet(uint8_t *data, int len) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
	if(len % 16 != 0) return - 1;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <AES_Decrypt_Packet+0x1a>
 8005948:	f04f 33ff 	mov.w	r3, #4294967295
 800594c:	e019      	b.n	8005982 <AES_Decrypt_Packet+0x4e>
	int i;
	int blockNum = len / 16;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	da00      	bge.n	8005956 <AES_Decrypt_Packet+0x22>
 8005954:	330f      	adds	r3, #15
 8005956:	111b      	asrs	r3, r3, #4
 8005958:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < blockNum; i++) {
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e00b      	b.n	8005978 <AES_Decrypt_Packet+0x44>
		AES_Decrypt_Block_Overwrite(data + i*16, AES128key);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	461a      	mov	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	4908      	ldr	r1, [pc, #32]	; (800598c <AES_Decrypt_Packet+0x58>)
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff ff82 	bl	8005876 <AES_Decrypt_Block_Overwrite>
	for(i = 0; i < blockNum; i++) {
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3301      	adds	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	429a      	cmp	r2, r3
 800597e:	dbef      	blt.n	8005960 <AES_Decrypt_Packet+0x2c>
	}
	return len;
 8005980:	683b      	ldr	r3, [r7, #0]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200059d4 	.word	0x200059d4

08005990 <AES_Decrypt_Packet_Key>:

//overwrite, own key, make sure data memory size is multiple of a block size. return decrypted packet len, fail return -1
int AES_Decrypt_Packet_Key(uint8_t *data, int len, uint8_t *key) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
	if(len % 16 != 0) return - 1;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <AES_Decrypt_Packet_Key+0x1c>
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295
 80059aa:	e019      	b.n	80059e0 <AES_Decrypt_Packet_Key+0x50>
	int i;
	int blockNum = len / 16;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	da00      	bge.n	80059b4 <AES_Decrypt_Packet_Key+0x24>
 80059b2:	330f      	adds	r3, #15
 80059b4:	111b      	asrs	r3, r3, #4
 80059b6:	613b      	str	r3, [r7, #16]
	for(i = 0; i < blockNum; i++) {
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e00b      	b.n	80059d6 <AES_Decrypt_Packet_Key+0x46>
		AES_Decrypt_Block_Overwrite(data + i*16, key);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	461a      	mov	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff ff53 	bl	8005876 <AES_Decrypt_Block_Overwrite>
	for(i = 0; i < blockNum; i++) {
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	3301      	adds	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	dbef      	blt.n	80059be <AES_Decrypt_Packet_Key+0x2e>
	}
	return len;
 80059de:	68bb      	ldr	r3, [r7, #8]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <bn_decode>:
static bn_t bn_sub_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits);
static bn_t bn_add_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits);
static uint32_t bn_digit_bits(bn_t a);

void bn_decode(bn_t *bn, uint32_t digits, uint8_t *hexarr, uint32_t size)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b089      	sub	sp, #36	; 0x24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
    bn_t t;
    int j;
    uint32_t i, u;
    for(i=0,j=size-1; i<digits && j>=0; i++) {
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	61bb      	str	r3, [r7, #24]
 8005a00:	e024      	b.n	8005a4c <bn_decode+0x64>
        t = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8005a06:	2300      	movs	r3, #0
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	e010      	b.n	8005a2e <bn_decode+0x46>
            t |= ((bn_t)hexarr[j]) << u;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4413      	add	r3, r2
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61fb      	str	r3, [r7, #28]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	61bb      	str	r3, [r7, #24]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	db02      	blt.n	8005a3a <bn_decode+0x52>
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b1f      	cmp	r3, #31
 8005a38:	d9e8      	bls.n	8005a0c <bn_decode+0x24>
        }
        bn[i] = t;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	601a      	str	r2, [r3, #0]
    for(i=0,j=size-1; i<digits && j>=0; i++) {
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d20c      	bcs.n	8005a6e <bn_decode+0x86>
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	dad3      	bge.n	8005a02 <bn_decode+0x1a>
    }

    for(; i<digits; i++) {
 8005a5a:	e008      	b.n	8005a6e <bn_decode+0x86>
        bn[i] = 0;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
    for(; i<digits; i++) {
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d3f2      	bcc.n	8005a5c <bn_decode+0x74>
    }
}
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
 8005a7a:	3724      	adds	r7, #36	; 0x24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <bn_encode>:

void bn_encode(uint8_t *hexarr, uint32_t size, bn_t *bn, uint32_t digits)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b089      	sub	sp, #36	; 0x24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
    bn_t t;
    int j;
    uint32_t i, u;

    for(i=0,j=size-1; i<digits && j>=0; i++) {
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	e020      	b.n	8005ae0 <bn_encode+0x5c>
        t = bn[i];
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	613b      	str	r3, [r7, #16]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e00e      	b.n	8005ace <bn_encode+0x4a>
            hexarr[j] = (uint8_t)(t >> u);
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	fa22 f103 	lsr.w	r1, r2, r3
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	b2ca      	uxtb	r2, r1
 8005ac0:	701a      	strb	r2, [r3, #0]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	3308      	adds	r3, #8
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	db02      	blt.n	8005ada <bn_encode+0x56>
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b1f      	cmp	r3, #31
 8005ad8:	d9ea      	bls.n	8005ab0 <bn_encode+0x2c>
    for(i=0,j=size-1; i<digits && j>=0; i++) {
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	3301      	adds	r3, #1
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d20b      	bcs.n	8005b00 <bn_encode+0x7c>
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	dad7      	bge.n	8005a9e <bn_encode+0x1a>
        }
    }

    for(; j>=0; j--) {
 8005aee:	e007      	b.n	8005b00 <bn_encode+0x7c>
        hexarr[j] = 0;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	2200      	movs	r2, #0
 8005af8:	701a      	strb	r2, [r3, #0]
    for(; j>=0; j--) {
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	daf4      	bge.n	8005af0 <bn_encode+0x6c>
    }
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	3724      	adds	r7, #36	; 0x24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <bn_assign>:

void bn_assign(bn_t *a, bn_t *b, uint32_t digits)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for(i=0; i<digits; i++) {
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e00c      	b.n	8005b40 <bn_assign+0x2c>
        a[i] = b[i];
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	441a      	add	r2, r3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	440b      	add	r3, r1
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	601a      	str	r2, [r3, #0]
    for(i=0; i<digits; i++) {
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d3ee      	bcc.n	8005b26 <bn_assign+0x12>
    }
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <bn_assign_zero>:

void bn_assign_zero(bn_t *a, uint32_t digits)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i=0; i<digits; i++) {
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e008      	b.n	8005b78 <bn_assign_zero+0x22>
        a[i] = 0;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
    for(i=0; i<digits; i++) {
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d3f2      	bcc.n	8005b66 <bn_assign_zero+0x10>
    }
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <bn_sub>:

    return carry;
}

bn_t bn_sub(bn_t *a, bn_t *b, bn_t *c, uint32_t digits)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b089      	sub	sp, #36	; 0x24
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	603b      	str	r3, [r7, #0]
    bn_t ai, borrow;
    uint32_t i;

    borrow = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
    for(i=0; i<digits; i++) {
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	e033      	b.n	8005c0e <bn_sub+0x80>
        if((ai = b[i] - borrow) > (BN_MAX_DIGIT - borrow)) {
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	61fb      	str	r3, [r7, #28]
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d907      	bls.n	8005bd0 <bn_sub+0x42>
            ai = BN_MAX_DIGIT - c[i];
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	e015      	b.n	8005bfc <bn_sub+0x6e>
        } else if((ai -= c[i]) > (BN_MAX_DIGIT - c[i])) {
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4413      	add	r3, r2
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	43db      	mvns	r3, r3
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d902      	bls.n	8005bf8 <bn_sub+0x6a>
            borrow = 1;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	e001      	b.n	8005bfc <bn_sub+0x6e>
        } else {
            borrow = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61bb      	str	r3, [r7, #24]
        }
        a[i] = ai;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	601a      	str	r2, [r3, #0]
    for(i=0; i<digits; i++) {
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d3c7      	bcc.n	8005ba6 <bn_sub+0x18>
    }

    return borrow;
 8005c16:	69bb      	ldr	r3, [r7, #24]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3724      	adds	r7, #36	; 0x24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <bn_mul>:

void bn_mul(bn_t *a, bn_t *b, bn_t *c, uint32_t digits)
{
 8005c24:	b590      	push	{r4, r7, lr}
 8005c26:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8005c2a:	af02      	add	r7, sp, #8
 8005c2c:	f107 040c 	add.w	r4, r7, #12
 8005c30:	6020      	str	r0, [r4, #0]
 8005c32:	f107 0008 	add.w	r0, r7, #8
 8005c36:	6001      	str	r1, [r0, #0]
 8005c38:	1d39      	adds	r1, r7, #4
 8005c3a:	600a      	str	r2, [r1, #0]
 8005c3c:	463a      	mov	r2, r7
 8005c3e:	6013      	str	r3, [r2, #0]
    bn_t t[2*BN_MAX_DIGITS];
    uint32_t bdigits, cdigits, i;

    bn_assign_zero(t, 2*digits);
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	005a      	lsls	r2, r3, #1
 8005c46:	f107 0314 	add.w	r3, r7, #20
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff ff82 	bl	8005b56 <bn_assign_zero>
    bdigits = bn_digits(b, digits);
 8005c52:	463a      	mov	r2, r7
 8005c54:	f107 0308 	add.w	r3, r7, #8
 8005c58:	6811      	ldr	r1, [r2, #0]
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	f000 fbbf 	bl	80063de <bn_digits>
 8005c60:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
    cdigits = bn_digits(c, digits);
 8005c64:	463a      	mov	r2, r7
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	6811      	ldr	r1, [r2, #0]
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	f000 fbb7 	bl	80063de <bn_digits>
 8005c70:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

    for(i=0; i<bdigits; i++) {
 8005c74:	2300      	movs	r3, #0
 8005c76:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8005c7a:	e033      	b.n	8005ce4 <bn_mul+0xc0>
        t[i+cdigits] += bn_add_digit_mul(&t[i], &t[i], b[i], c, cdigits);
 8005c7c:	f107 0214 	add.w	r2, r7, #20
 8005c80:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	18d0      	adds	r0, r2, r3
 8005c88:	f107 0214 	add.w	r2, r7, #20
 8005c8c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	18d1      	adds	r1, r2, r3
 8005c94:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	f107 0208 	add.w	r2, r7, #8
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	681c      	ldr	r4, [r3, #0]
 8005ca4:	1d3b      	adds	r3, r7, #4
 8005ca6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8005caa:	9200      	str	r2, [sp, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4622      	mov	r2, r4
 8005cb0:	f000 fbb5 	bl	800641e <bn_add_digit_mul>
 8005cb4:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8005cb8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005cbc:	441a      	add	r2, r3
 8005cbe:	f107 0314 	add.w	r3, r7, #20
 8005cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc6:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8005cca:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8005cce:	440a      	add	r2, r1
 8005cd0:	18c1      	adds	r1, r0, r3
 8005cd2:	f107 0314 	add.w	r3, r7, #20
 8005cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i=0; i<bdigits; i++) {
 8005cda:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005cde:	3301      	adds	r3, #1
 8005ce0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8005ce4:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8005ce8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d3c5      	bcc.n	8005c7c <bn_mul+0x58>
    }

    bn_assign(a, t, 2*digits);
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	005a      	lsls	r2, r3, #1
 8005cf6:	f107 0114 	add.w	r1, r7, #20
 8005cfa:	f107 030c 	add.w	r3, r7, #12
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	f7ff ff08 	bl	8005b14 <bn_assign>

    // Clear potentially sensitive information
    memset((uint8_t *)t, 0, sizeof(t));
 8005d04:	f107 0314 	add.w	r3, r7, #20
 8005d08:	f44f 7202 	mov.w	r2, #520	; 0x208
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f01a ff9a 	bl	8020c48 <memset>
}
 8005d14:	bf00      	nop
 8005d16:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd90      	pop	{r4, r7, pc}

08005d1e <bn_div>:

void bn_div(bn_t *a, bn_t *b, bn_t *c, uint32_t cdigits, bn_t *d, uint32_t ddigits)
{
 8005d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d20:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	f107 060c 	add.w	r6, r7, #12
 8005d2a:	6030      	str	r0, [r6, #0]
 8005d2c:	f107 0008 	add.w	r0, r7, #8
 8005d30:	6001      	str	r1, [r0, #0]
 8005d32:	1d39      	adds	r1, r7, #4
 8005d34:	600a      	str	r2, [r1, #0]
 8005d36:	463a      	mov	r2, r7
 8005d38:	6013      	str	r3, [r2, #0]
    dbn_t tmp;
    bn_t ai, t, cc[2*BN_MAX_DIGITS+1], dd[BN_MAX_DIGITS];
    int i;
    uint32_t dddigits, shift;

    dddigits = bn_digits(d, ddigits);
 8005d3a:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 8005d3e:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8005d42:	f000 fb4c 	bl	80063de <bn_digits>
 8005d46:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
    if(dddigits == 0)
 8005d4a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 813a 	beq.w	8005fc8 <bn_div+0x2aa>
        return;

    shift = BN_DIGIT_BITS - bn_digit_bits(d[dddigits-1]);
 8005d54:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8005d64:	4413      	add	r3, r2
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fc38 	bl	80065de <bn_digit_bits>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f1c3 0320 	rsb	r3, r3, #32
 8005d74:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    bn_assign_zero(cc, dddigits);
 8005d78:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005d7c:	f8d7 1334 	ldr.w	r1, [r7, #820]	; 0x334
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fee8 	bl	8005b56 <bn_assign_zero>
    cc[cdigits] = bn_shift_l(cc, c, shift, cdigits);
 8005d86:	463b      	mov	r3, r7
 8005d88:	1d39      	adds	r1, r7, #4
 8005d8a:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005d94:	6809      	ldr	r1, [r1, #0]
 8005d96:	f000 f91c 	bl	8005fd2 <bn_shift_l>
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005da0:	463a      	mov	r2, r7
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    bn_shift_l(dd, d, shift, dddigits);
 8005da8:	f107 0010 	add.w	r0, r7, #16
 8005dac:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005db0:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005db4:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8005db8:	f000 f90b 	bl	8005fd2 <bn_shift_l>
    t = dd[dddigits-1];
 8005dbc:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005dc0:	1e5a      	subs	r2, r3, #1
 8005dc2:	f107 0310 	add.w	r3, r7, #16
 8005dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dca:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

    bn_assign_zero(a, cdigits);
 8005dce:	463a      	mov	r2, r7
 8005dd0:	f107 030c 	add.w	r3, r7, #12
 8005dd4:	6811      	ldr	r1, [r2, #0]
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	f7ff febd 	bl	8005b56 <bn_assign_zero>
    i = cdigits - dddigits;
 8005ddc:	463b      	mov	r3, r7
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
    for(; i>=0; i--) {
 8005dea:	e0c5      	b.n	8005f78 <bn_div+0x25a>
        if(t == BN_MAX_DIGIT) {
 8005dec:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d10b      	bne.n	8005e0e <bn_div+0xf0>
            ai = cc[i+dddigits];
 8005df6:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005dfa:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005dfe:	441a      	add	r2, r3
 8005e00:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e08:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8005e0c:	e036      	b.n	8005e7c <bn_div+0x15e>
        } else {
            tmp = cc[i+dddigits-1];
 8005e0e:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005e12:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005e16:	4413      	add	r3, r2
 8005e18:	1e5a      	subs	r2, r3, #1
 8005e1a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
            tmp += (dbn_t)cc[i+dddigits] << BN_DIGIT_BITS;
 8005e2c:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005e30:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005e34:	441a      	add	r2, r3
 8005e36:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f04f 0100 	mov.w	r1, #0
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	0003      	movs	r3, r0
 8005e4e:	2200      	movs	r2, #0
 8005e50:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8005e54:	1884      	adds	r4, r0, r2
 8005e56:	eb41 0503 	adc.w	r5, r1, r3
 8005e5a:	e9c7 45c8 	strd	r4, r5, [r7, #800]	; 0x320
            ai = tmp / (t + 1);
 8005e5e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005e62:	3301      	adds	r3, #1
 8005e64:	461a      	mov	r2, r3
 8005e66:	f04f 0300 	mov.w	r3, #0
 8005e6a:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8005e6e:	f7fa fa57 	bl	8000320 <__aeabi_uldivmod>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4613      	mov	r3, r2
 8005e78:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
        }

        cc[i+dddigits] -= bn_sub_digit_mul(&cc[i], &cc[i], ai, dd, dddigits);
 8005e7c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005e80:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	18d0      	adds	r0, r2, r3
 8005e88:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005e8c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	18d1      	adds	r1, r2, r3
 8005e94:	f107 0210 	add.w	r2, r7, #16
 8005e98:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8005ea4:	f000 fb2a 	bl	80064fc <bn_sub_digit_mul>
 8005ea8:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005eac:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005eb0:	441a      	add	r2, r3
 8005eb2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eba:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 8005ebe:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8005ec2:	440a      	add	r2, r1
 8005ec4:	1a19      	subs	r1, r3, r0
 8005ec6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // printf("cc[%d]: %08X\n", i, cc[i+dddigits]);
        while(cc[i+dddigits] || (bn_cmp(&cc[i], dd, dddigits) >= 0)) {
 8005ece:	e029      	b.n	8005f24 <bn_div+0x206>
            ai++;
 8005ed0:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
            cc[i+dddigits] -= bn_sub(&cc[i], &cc[i], dd, dddigits);
 8005eda:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005ede:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	18d0      	adds	r0, r2, r3
 8005ee6:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005eea:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	18d1      	adds	r1, r2, r3
 8005ef2:	f107 0210 	add.w	r2, r7, #16
 8005ef6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005efa:	f7ff fe48 	bl	8005b8e <bn_sub>
 8005efe:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005f02:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005f06:	441a      	add	r2, r3
 8005f08:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f10:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 8005f14:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8005f18:	440a      	add	r2, r1
 8005f1a:	1a19      	subs	r1, r3, r0
 8005f1c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        while(cc[i+dddigits] || (bn_cmp(&cc[i], dd, dddigits) >= 0)) {
 8005f24:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005f28:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005f2c:	441a      	add	r2, r3
 8005f2e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1ca      	bne.n	8005ed0 <bn_div+0x1b2>
 8005f3a:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005f3e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	f107 0110 	add.w	r1, r7, #16
 8005f4a:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fa11 	bl	8006376 <bn_cmp>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	daba      	bge.n	8005ed0 <bn_div+0x1b2>
        }
        a[i] = ai;
 8005f5a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	f107 020c 	add.w	r2, r7, #12
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	4413      	add	r3, r2
 8005f68:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8005f6c:	601a      	str	r2, [r3, #0]
    for(; i>=0; i--) {
 8005f6e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005f72:	3b01      	subs	r3, #1
 8005f74:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8005f78:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f6bf af35 	bge.w	8005dec <bn_div+0xce>
        // printf("ai[%d]: %08X\n", i, ai);
    }

    bn_assign_zero(b, ddigits);
 8005f82:	f107 0308 	add.w	r3, r7, #8
 8005f86:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	f7ff fde3 	bl	8005b56 <bn_assign_zero>
    bn_shift_r(b, cc, shift, dddigits);
 8005f90:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8005f94:	f107 0008 	add.w	r0, r7, #8
 8005f98:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005f9c:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005fa0:	6800      	ldr	r0, [r0, #0]
 8005fa2:	f000 f854 	bl	800604e <bn_shift_r>

    // Clear potentially sensitive information
    memset((uint8_t *)cc, 0, sizeof(cc));
 8005fa6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005faa:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005fae:	2100      	movs	r1, #0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f01a fe49 	bl	8020c48 <memset>
    memset((uint8_t *)dd, 0, sizeof(dd));
 8005fb6:	f107 0310 	add.w	r3, r7, #16
 8005fba:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f01a fe41 	bl	8020c48 <memset>
 8005fc6:	e000      	b.n	8005fca <bn_div+0x2ac>
        return;
 8005fc8:	bf00      	nop
}
 8005fca:	f507 7751 	add.w	r7, r7, #836	; 0x344
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fd2 <bn_shift_l>:

bn_t bn_shift_l(bn_t *a, bn_t *b, uint32_t c, uint32_t digits)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b089      	sub	sp, #36	; 0x24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
 8005fde:	603b      	str	r3, [r7, #0]
    bn_t bi, carry;
    uint32_t i, t;

    if(c >= BN_DIGIT_BITS)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b1f      	cmp	r3, #31
 8005fe4:	d901      	bls.n	8005fea <bn_shift_l+0x18>
        return 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	e02b      	b.n	8006042 <bn_shift_l+0x70>

    t = BN_DIGIT_BITS - c;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f1c3 0320 	rsb	r3, r3, #32
 8005ff0:	617b      	str	r3, [r7, #20]
    carry = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
    for(i=0; i<digits; i++) {
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	e01d      	b.n	8006038 <bn_shift_l+0x66>
        bi = b[i];
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	4413      	add	r3, r2
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	613b      	str	r3, [r7, #16]
        a[i] = (bi << c) | carry;
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	fa02 f103 	lsl.w	r1, r2, r3
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	430a      	orrs	r2, r1
 800601c:	601a      	str	r2, [r3, #0]
        carry = c ? (bi >> t) : 0;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <bn_shift_l+0x5c>
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	fa22 f303 	lsr.w	r3, r2, r3
 800602c:	e000      	b.n	8006030 <bn_shift_l+0x5e>
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
    for(i=0; i<digits; i++) {
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	3301      	adds	r3, #1
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d3dd      	bcc.n	8005ffc <bn_shift_l+0x2a>
    }

    return carry;
 8006040:	69fb      	ldr	r3, [r7, #28]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3724      	adds	r7, #36	; 0x24
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <bn_shift_r>:

bn_t bn_shift_r(bn_t *a, bn_t *b, uint32_t c, uint32_t digits)
{
 800604e:	b480      	push	{r7}
 8006050:	b089      	sub	sp, #36	; 0x24
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	603b      	str	r3, [r7, #0]
    bn_t bi, carry;
    int i;
    uint32_t t;

    if(c >= BN_DIGIT_BITS)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b1f      	cmp	r3, #31
 8006060:	d901      	bls.n	8006066 <bn_shift_r+0x18>
        return 0;
 8006062:	2300      	movs	r3, #0
 8006064:	e02b      	b.n	80060be <bn_shift_r+0x70>

    t = BN_DIGIT_BITS - c;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f1c3 0320 	rsb	r3, r3, #32
 800606c:	617b      	str	r3, [r7, #20]
    carry = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	61fb      	str	r3, [r7, #28]
    i = digits - 1;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	3b01      	subs	r3, #1
 8006076:	61bb      	str	r3, [r7, #24]
    for(; i>=0; i--) {
 8006078:	e01d      	b.n	80060b6 <bn_shift_r+0x68>
        bi = b[i];
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4413      	add	r3, r2
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	613b      	str	r3, [r7, #16]
        a[i] = (bi >> c) | carry;
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	fa22 f103 	lsr.w	r1, r2, r3
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4413      	add	r3, r2
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	430a      	orrs	r2, r1
 800609a:	601a      	str	r2, [r3, #0]
        carry = c ? (bi << t) : 0;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <bn_shift_r+0x5e>
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	e000      	b.n	80060ae <bn_shift_r+0x60>
 80060ac:	2300      	movs	r3, #0
 80060ae:	61fb      	str	r3, [r7, #28]
    for(; i>=0; i--) {
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	dade      	bge.n	800607a <bn_shift_r+0x2c>
    }

    return carry;
 80060bc:	69fb      	ldr	r3, [r7, #28]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3724      	adds	r7, #36	; 0x24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <bn_mod>:

void bn_mod(bn_t *a, bn_t *b, uint32_t bdigits, bn_t *c, uint32_t cdigits)
{
 80060ca:	b590      	push	{r4, r7, lr}
 80060cc:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	f107 040c 	add.w	r4, r7, #12
 80060d6:	6020      	str	r0, [r4, #0]
 80060d8:	f107 0008 	add.w	r0, r7, #8
 80060dc:	6001      	str	r1, [r0, #0]
 80060de:	1d39      	adds	r1, r7, #4
 80060e0:	600a      	str	r2, [r1, #0]
 80060e2:	463a      	mov	r2, r7
 80060e4:	6013      	str	r3, [r2, #0]
    bn_t t[2*BN_MAX_DIGITS] = {0};
 80060e6:	f107 0310 	add.w	r3, r7, #16
 80060ea:	4618      	mov	r0, r3
 80060ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80060f0:	461a      	mov	r2, r3
 80060f2:	2100      	movs	r1, #0
 80060f4:	f01a fda8 	bl	8020c48 <memset>

    bn_div(t, a, b, bdigits, c, cdigits);
 80060f8:	1d3b      	adds	r3, r7, #4
 80060fa:	f107 0208 	add.w	r2, r7, #8
 80060fe:	f107 010c 	add.w	r1, r7, #12
 8006102:	f107 0410 	add.w	r4, r7, #16
 8006106:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 800610a:	9001      	str	r0, [sp, #4]
 800610c:	4638      	mov	r0, r7
 800610e:	6800      	ldr	r0, [r0, #0]
 8006110:	9000      	str	r0, [sp, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6812      	ldr	r2, [r2, #0]
 8006116:	6809      	ldr	r1, [r1, #0]
 8006118:	4620      	mov	r0, r4
 800611a:	f7ff fe00 	bl	8005d1e <bn_div>

    // Clear potentially sensitive information
    memset((uint8_t *)t, 0, sizeof(t));
 800611e:	f107 0310 	add.w	r3, r7, #16
 8006122:	f44f 7202 	mov.w	r2, #520	; 0x208
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f01a fd8d 	bl	8020c48 <memset>
}
 800612e:	bf00      	nop
 8006130:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8006134:	46bd      	mov	sp, r7
 8006136:	bd90      	pop	{r4, r7, pc}

08006138 <bn_mod_mul>:

void bn_mod_mul(bn_t *a, bn_t *b, bn_t *c, bn_t *d, uint32_t digits)
{
 8006138:	b590      	push	{r4, r7, lr}
 800613a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800613e:	af02      	add	r7, sp, #8
 8006140:	f107 040c 	add.w	r4, r7, #12
 8006144:	6020      	str	r0, [r4, #0]
 8006146:	f107 0008 	add.w	r0, r7, #8
 800614a:	6001      	str	r1, [r0, #0]
 800614c:	1d39      	adds	r1, r7, #4
 800614e:	600a      	str	r2, [r1, #0]
 8006150:	463a      	mov	r2, r7
 8006152:	6013      	str	r3, [r2, #0]
    bn_t t[2*BN_MAX_DIGITS];

    bn_mul(t, b, c, digits);
 8006154:	1d3a      	adds	r2, r7, #4
 8006156:	f107 0108 	add.w	r1, r7, #8
 800615a:	f107 0010 	add.w	r0, r7, #16
 800615e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	6809      	ldr	r1, [r1, #0]
 8006166:	f7ff fd5d 	bl	8005c24 <bn_mul>
    bn_mod(a, t, 2*digits, d, digits);
 800616a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800616e:	005c      	lsls	r4, r3, #1
 8006170:	463b      	mov	r3, r7
 8006172:	f107 0110 	add.w	r1, r7, #16
 8006176:	f107 000c 	add.w	r0, r7, #12
 800617a:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 800617e:	9200      	str	r2, [sp, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4622      	mov	r2, r4
 8006184:	6800      	ldr	r0, [r0, #0]
 8006186:	f7ff ffa0 	bl	80060ca <bn_mod>

    // Clear potentially sensitive information
    memset((uint8_t *)t, 0, sizeof(t));
 800618a:	f107 0310 	add.w	r3, r7, #16
 800618e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f01a fd57 	bl	8020c48 <memset>
}
 800619a:	bf00      	nop
 800619c:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd90      	pop	{r4, r7, pc}

080061a4 <bn_mod_exp>:

void bn_mod_exp(bn_t *a, bn_t *b, bn_t *c, uint32_t cdigits, bn_t *d, uint32_t ddigits)
{
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
 80061aa:	af02      	add	r7, sp, #8
 80061ac:	f107 040c 	add.w	r4, r7, #12
 80061b0:	6020      	str	r0, [r4, #0]
 80061b2:	f107 0008 	add.w	r0, r7, #8
 80061b6:	6001      	str	r1, [r0, #0]
 80061b8:	1d39      	adds	r1, r7, #4
 80061ba:	600a      	str	r2, [r1, #0]
 80061bc:	463a      	mov	r2, r7
 80061be:	6013      	str	r3, [r2, #0]
    bn_t bpower[3][BN_MAX_DIGITS], ci, t[BN_MAX_DIGITS];
    int i;
    uint32_t ci_bits, j, s;

    bn_assign(bpower[0], b, ddigits);
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80061c8:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 80061cc:	6819      	ldr	r1, [r3, #0]
 80061ce:	f7ff fca1 	bl	8005b14 <bn_assign>
    bn_mod_mul(bpower[1], bpower[0], b, d, ddigits);
 80061d2:	f107 0208 	add.w	r2, r7, #8
 80061d6:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80061da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80061de:	f503 7082 	add.w	r0, r3, #260	; 0x104
 80061e2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	f7ff ffa3 	bl	8006138 <bn_mod_mul>
    bn_mod_mul(bpower[2], bpower[1], b, d, ddigits);
 80061f2:	f107 0208 	add.w	r2, r7, #8
 80061f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80061fa:	f503 7182 	add.w	r1, r3, #260	; 0x104
 80061fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006202:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8006206:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	f7ff ff91 	bl	8006138 <bn_mod_mul>

    BN_ASSIGN_DIGIT(t, 1, ddigits);
 8006216:	f107 0314 	add.w	r3, r7, #20
 800621a:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff fc99 	bl	8005b56 <bn_assign_zero>
 8006224:	f107 0314 	add.w	r3, r7, #20
 8006228:	2201      	movs	r2, #1
 800622a:	601a      	str	r2, [r3, #0]

    cdigits = bn_digits(c, cdigits);
 800622c:	463c      	mov	r4, r7
 800622e:	463a      	mov	r2, r7
 8006230:	1d3b      	adds	r3, r7, #4
 8006232:	6811      	ldr	r1, [r2, #0]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	f000 f8d2 	bl	80063de <bn_digits>
 800623a:	6020      	str	r0, [r4, #0]
    i = cdigits - 1;
 800623c:	463b      	mov	r3, r7
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3b01      	subs	r3, #1
 8006242:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
    for(; i>=0; i--) {
 8006246:	e074      	b.n	8006332 <bn_mod_exp+0x18e>
        ci = c[i];
 8006248:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	1d3a      	adds	r2, r7, #4
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	4413      	add	r3, r2
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
        ci_bits = BN_DIGIT_BITS;
 800625a:	2320      	movs	r3, #32
 800625c:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

        if(i == (int)(cdigits - 1)) {
 8006260:	463b      	mov	r3, r7
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3b01      	subs	r3, #1
 8006266:	461a      	mov	r2, r3
 8006268:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800626c:	4293      	cmp	r3, r2
 800626e:	d10f      	bne.n	8006290 <bn_mod_exp+0xec>
            while(!DIGIT_2MSB(ci)) {
 8006270:	e009      	b.n	8006286 <bn_mod_exp+0xe2>
                ci <<= 2;
 8006272:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
                ci_bits -= 2;
 800627c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8006280:	3b02      	subs	r3, #2
 8006282:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
            while(!DIGIT_2MSB(ci)) {
 8006286:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800628a:	0f9b      	lsrs	r3, r3, #30
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f0      	beq.n	8006272 <bn_mod_exp+0xce>
            }
        }

        for(j=0; j<ci_bits; j+=2) {
 8006290:	2300      	movs	r3, #0
 8006292:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8006296:	e041      	b.n	800631c <bn_mod_exp+0x178>
            bn_mod_mul(t, t, t, d, ddigits);
 8006298:	f107 0214 	add.w	r2, r7, #20
 800629c:	f107 0114 	add.w	r1, r7, #20
 80062a0:	f107 0014 	add.w	r0, r7, #20
 80062a4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80062ae:	f7ff ff43 	bl	8006138 <bn_mod_mul>
            bn_mod_mul(t, t, t, d, ddigits);
 80062b2:	f107 0214 	add.w	r2, r7, #20
 80062b6:	f107 0114 	add.w	r1, r7, #20
 80062ba:	f107 0014 	add.w	r0, r7, #20
 80062be:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80062c8:	f7ff ff36 	bl	8006138 <bn_mod_mul>
            if((s = DIGIT_2MSB(ci)) != 0) {
 80062cc:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80062d0:	0f9b      	lsrs	r3, r3, #30
 80062d2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80062d6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d014      	beq.n	8006308 <bn_mod_exp+0x164>
                bn_mod_mul(t, t, bpower[s-1], d, ddigits);
 80062de:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80062e2:	1e5a      	subs	r2, r3, #1
 80062e4:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80062e8:	4613      	mov	r3, r2
 80062ea:	019b      	lsls	r3, r3, #6
 80062ec:	4413      	add	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	18ca      	adds	r2, r1, r3
 80062f2:	f107 0114 	add.w	r1, r7, #20
 80062f6:	f107 0014 	add.w	r0, r7, #20
 80062fa:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8006304:	f7ff ff18 	bl	8006138 <bn_mod_mul>
            }
            ci <<= 2;
 8006308:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
        for(j=0; j<ci_bits; j+=2) {
 8006312:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8006316:	3302      	adds	r3, #2
 8006318:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 800631c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8006320:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8006324:	429a      	cmp	r2, r3
 8006326:	d3b7      	bcc.n	8006298 <bn_mod_exp+0xf4>
    for(; i>=0; i--) {
 8006328:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800632c:	3b01      	subs	r3, #1
 800632e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8006332:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8006336:	2b00      	cmp	r3, #0
 8006338:	da86      	bge.n	8006248 <bn_mod_exp+0xa4>
        }
    }

    bn_assign(a, t, ddigits);
 800633a:	f107 0114 	add.w	r1, r7, #20
 800633e:	f107 030c 	add.w	r3, r7, #12
 8006342:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	f7ff fbe4 	bl	8005b14 <bn_assign>

    // Clear potentially sensitive information
    memset((uint8_t *)bpower, 0, sizeof(bpower));
 800634c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006350:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8006354:	2100      	movs	r1, #0
 8006356:	4618      	mov	r0, r3
 8006358:	f01a fc76 	bl	8020c48 <memset>
    memset((uint8_t *)t, 0, sizeof(t));
 800635c:	f107 0314 	add.w	r3, r7, #20
 8006360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f01a fc6e 	bl	8020c48 <memset>
}
 800636c:	bf00      	nop
 800636e:	f207 473c 	addw	r7, r7, #1084	; 0x43c
 8006372:	46bd      	mov	sp, r7
 8006374:	bd90      	pop	{r4, r7, pc}

08006376 <bn_cmp>:

int bn_cmp(bn_t *a, bn_t *b, uint32_t digits)
{
 8006376:	b480      	push	{r7}
 8006378:	b087      	sub	sp, #28
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	607a      	str	r2, [r7, #4]
    int i;
    for(i=digits-1; i>=0; i--) {
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3b01      	subs	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e01f      	b.n	80063ca <bn_cmp+0x54>
        if(a[i] > b[i])     return 1;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	440b      	add	r3, r1
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d901      	bls.n	80063a6 <bn_cmp+0x30>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e015      	b.n	80063d2 <bn_cmp+0x5c>
        if(a[i] < b[i])     return -1;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	440b      	add	r3, r1
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d202      	bcs.n	80063c4 <bn_cmp+0x4e>
 80063be:	f04f 33ff 	mov.w	r3, #4294967295
 80063c2:	e006      	b.n	80063d2 <bn_cmp+0x5c>
    for(i=digits-1; i>=0; i--) {
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dadc      	bge.n	800638a <bn_cmp+0x14>
    }

    return 0;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <bn_digits>:

uint32_t bn_digits(bn_t *a, uint32_t digits)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
    int i;
    for(i=digits-1; i>=0; i--) {
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	e009      	b.n	8006404 <bn_digits+0x26>
        if(a[i])    break;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <bn_digits+0x2e>
    for(i=digits-1; i>=0; i--) {
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3b01      	subs	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	daf2      	bge.n	80063f0 <bn_digits+0x12>
 800640a:	e000      	b.n	800640e <bn_digits+0x30>
        if(a[i])    break;
 800640c:	bf00      	nop
    }

    return (i + 1);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <bn_add_digit_mul>:

static bn_t bn_add_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits)
{
 800641e:	b4b0      	push	{r4, r5, r7}
 8006420:	b08b      	sub	sp, #44	; 0x2c
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
 800642a:	603b      	str	r3, [r7, #0]
    dbn_t result;
    bn_t carry, rh, rl;
    uint32_t i;

    if(c == 0)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <bn_add_digit_mul+0x18>
        return 0;
 8006432:	2300      	movs	r3, #0
 8006434:	e05d      	b.n	80064f2 <bn_add_digit_mul+0xd4>

    carry = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 800643a:	2300      	movs	r3, #0
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	e053      	b.n	80064e8 <bn_add_digit_mul+0xca>
        result = (dbn_t)c * d[i];
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4618      	mov	r0, r3
 8006444:	f04f 0100 	mov.w	r1, #0
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	4413      	add	r3, r2
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	fb02 f501 	mul.w	r5, r2, r1
 800645c:	fb00 f403 	mul.w	r4, r0, r3
 8006460:	442c      	add	r4, r5
 8006462:	fba0 2302 	umull	r2, r3, r0, r2
 8006466:	18e1      	adds	r1, r4, r3
 8006468:	460b      	mov	r3, r1
 800646a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800646e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        rl = result & BN_MAX_DIGIT;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	617b      	str	r3, [r7, #20]
        rh = (result >> BN_DIGIT_BITS) & BN_MAX_DIGIT;
 8006476:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	000a      	movs	r2, r1
 8006484:	2300      	movs	r3, #0
 8006486:	4613      	mov	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
        if((a[i] = b[i] + carry) < carry) {
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	4413      	add	r3, r2
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649e:	440a      	add	r2, r1
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d902      	bls.n	80064b0 <bn_add_digit_mul+0x92>
            carry = 1;
 80064aa:	2301      	movs	r3, #1
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
 80064ae:	e001      	b.n	80064b4 <bn_add_digit_mul+0x96>
        } else {
            carry = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if((a[i] += rl) < rl) {
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	6819      	ldr	r1, [r3, #0]
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	440a      	add	r2, r1
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d902      	bls.n	80064da <bn_add_digit_mul+0xbc>
            carry++;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	3301      	adds	r3, #1
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        carry += rh;
 80064da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	3301      	adds	r3, #1
 80064e6:	623b      	str	r3, [r7, #32]
 80064e8:	6a3a      	ldr	r2, [r7, #32]
 80064ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d3a7      	bcc.n	8006440 <bn_add_digit_mul+0x22>
    }

    return carry;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	372c      	adds	r7, #44	; 0x2c
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bcb0      	pop	{r4, r5, r7}
 80064fa:	4770      	bx	lr

080064fc <bn_sub_digit_mul>:

static bn_t bn_sub_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits)
{
 80064fc:	b4b0      	push	{r4, r5, r7}
 80064fe:	b08b      	sub	sp, #44	; 0x2c
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
    dbn_t result;
    bn_t borrow, rh, rl;
    uint32_t i;

    if(c == 0)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <bn_sub_digit_mul+0x18>
        return 0;
 8006510:	2300      	movs	r3, #0
 8006512:	e05f      	b.n	80065d4 <bn_sub_digit_mul+0xd8>

    borrow = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 8006518:	2300      	movs	r3, #0
 800651a:	623b      	str	r3, [r7, #32]
 800651c:	e055      	b.n	80065ca <bn_sub_digit_mul+0xce>
        result = (dbn_t)c * d[i];
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4618      	mov	r0, r3
 8006522:	f04f 0100 	mov.w	r1, #0
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	4413      	add	r3, r2
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	fb02 f501 	mul.w	r5, r2, r1
 800653a:	fb00 f403 	mul.w	r4, r0, r3
 800653e:	442c      	add	r4, r5
 8006540:	fba0 2302 	umull	r2, r3, r0, r2
 8006544:	18e1      	adds	r1, r4, r3
 8006546:	460b      	mov	r3, r1
 8006548:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800654c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        rl = result & BN_MAX_DIGIT;
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	617b      	str	r3, [r7, #20]
        rh = (result >> BN_DIGIT_BITS) & BN_MAX_DIGIT;
 8006554:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	000a      	movs	r2, r1
 8006562:	2300      	movs	r3, #0
 8006564:	4613      	mov	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
        if((a[i] = b[i] - borrow) > (BN_MAX_DIGIT - borrow)) {
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	4413      	add	r3, r2
 8006570:	6819      	ldr	r1, [r3, #0]
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657c:	1a8a      	subs	r2, r1, r2
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	43db      	mvns	r3, r3
 8006586:	429a      	cmp	r2, r3
 8006588:	d902      	bls.n	8006590 <bn_sub_digit_mul+0x94>
            borrow = 1;
 800658a:	2301      	movs	r3, #1
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
 800658e:	e001      	b.n	8006594 <bn_sub_digit_mul+0x98>
        } else {
            borrow = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if((a[i] -= rl) > (BN_MAX_DIGIT - rl)) {
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	6819      	ldr	r1, [r3, #0]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	1a8a      	subs	r2, r1, r2
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	43db      	mvns	r3, r3
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d902      	bls.n	80065bc <bn_sub_digit_mul+0xc0>
            borrow++;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	3301      	adds	r3, #1
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
        borrow += rh;
 80065bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4413      	add	r3, r2
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	3301      	adds	r3, #1
 80065c8:	623b      	str	r3, [r7, #32]
 80065ca:	6a3a      	ldr	r2, [r7, #32]
 80065cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d3a5      	bcc.n	800651e <bn_sub_digit_mul+0x22>
    }

    return borrow;
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	372c      	adds	r7, #44	; 0x2c
 80065d8:	46bd      	mov	sp, r7
 80065da:	bcb0      	pop	{r4, r5, r7}
 80065dc:	4770      	bx	lr

080065de <bn_digit_bits>:

static uint32_t bn_digit_bits(bn_t a)
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for(i=0; i<BN_DIGIT_BITS; i++) {
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	e008      	b.n	80065fe <bn_digit_bits+0x20>
        if(a == 0)  break;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <bn_digit_bits+0x28>
        a >>= 1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	607b      	str	r3, [r7, #4]
    for(i=0; i<BN_DIGIT_BITS; i++) {
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b1f      	cmp	r3, #31
 8006602:	d9f3      	bls.n	80065ec <bn_digit_bits+0xe>
 8006604:	e000      	b.n	8006608 <bn_digit_bits+0x2a>
        if(a == 0)  break;
 8006606:	bf00      	nop
    }

    return i;
 8006608:	68fb      	ldr	r3, [r7, #12]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
	...

08006618 <savePosDma>:
DMA_POS_Struct dma_pos_array[DMA_POS_LOG_LEN];

unsigned int curOrderDmaPos = 0;

void savePosDma(int oldPos, int newPos, int returnTmp)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
    int index = curOrderDmaPos % DMA_POS_LOG_LEN;
 8006624:	4b18      	ldr	r3, [pc, #96]	; (8006688 <savePosDma+0x70>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4b18      	ldr	r3, [pc, #96]	; (800668c <savePosDma+0x74>)
 800662a:	fba3 1302 	umull	r1, r3, r3, r2
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	2164      	movs	r1, #100	; 0x64
 8006632:	fb01 f303 	mul.w	r3, r1, r3
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	617b      	str	r3, [r7, #20]
	dma_pos_array[index].order = curOrderDmaPos;
 800663a:	4b13      	ldr	r3, [pc, #76]	; (8006688 <savePosDma+0x70>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4914      	ldr	r1, [pc, #80]	; (8006690 <savePosDma+0x78>)
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	440b      	add	r3, r1
 8006646:	601a      	str	r2, [r3, #0]
    dma_pos_array[index].old_pos = oldPos;
 8006648:	4a11      	ldr	r2, [pc, #68]	; (8006690 <savePosDma+0x78>)
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	4413      	add	r3, r2
 8006650:	3304      	adds	r3, #4
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	601a      	str	r2, [r3, #0]
    dma_pos_array[index].new_pos = newPos;
 8006656:	4a0e      	ldr	r2, [pc, #56]	; (8006690 <savePosDma+0x78>)
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	4413      	add	r3, r2
 800665e:	3308      	adds	r3, #8
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	601a      	str	r2, [r3, #0]
    dma_pos_array[index].return_Tmp = returnTmp;
 8006664:	4a0a      	ldr	r2, [pc, #40]	; (8006690 <savePosDma+0x78>)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	4413      	add	r3, r2
 800666c:	330c      	adds	r3, #12
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	601a      	str	r2, [r3, #0]
    curOrderDmaPos++;
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <savePosDma+0x70>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3301      	adds	r3, #1
 8006678:	4a03      	ldr	r2, [pc, #12]	; (8006688 <savePosDma+0x70>)
 800667a:	6013      	str	r3, [r2, #0]
}
 800667c:	bf00      	nop
 800667e:	371c      	adds	r7, #28
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	20000588 	.word	0x20000588
 800668c:	51eb851f 	.word	0x51eb851f
 8006690:	200059e4 	.word	0x200059e4

08006694 <udp_receive_callback>:

extern struct netif gnetif;

//udp
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
    LOG_WRITE("recv udp\n");
    UDP_Packet_Analyze(p->payload, p->len);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	895b      	ldrh	r3, [r3, #10]
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f003 fb15 	bl	8009cdc <UDP_Packet_Analyze>

    /* Free receive pbuf */
    if (pbuf_free(p) != ERR_OK)
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f00e f960 	bl	8014978 <pbuf_free>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d005      	beq.n	80066ca <udp_receive_callback+0x36>
    {
        LOG_WRITE("recv udp pcb error\n");
        osEventFlagsSet(ConnectEthEventID, 1 << errorEthEnum);
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <udp_receive_callback+0x40>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2108      	movs	r1, #8
 80066c4:	4618      	mov	r0, r3
 80066c6:	f004 ffd9 	bl	800b67c <osEventFlagsSet>
    }
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20005984 	.word	0x20005984

080066d8 <udp_client_connect>:

void udp_client_connect(ip_addr_t serverIpAddr, uint16_t sererPort)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	807b      	strh	r3, [r7, #2]
    static bool bUdpFirstTime = true;
    err_t err;
    bool bUdpConnectErr = true;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
    LOG_WRITE("udp connect %d %d\n", bUdpFirstTime, upcb);
    if (bUdpFirstTime) /* First time - Create a new UDP control block  */
 80066e8:	4b1e      	ldr	r3, [pc, #120]	; (8006764 <udp_client_connect+0x8c>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d009      	beq.n	8006704 <udp_client_connect+0x2c>
    {
        upcb = udp_new();
 80066f0:	f015 fc46 	bl	801bf80 <udp_new>
 80066f4:	4603      	mov	r3, r0
 80066f6:	461a      	mov	r2, r3
 80066f8:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <udp_client_connect+0x90>)
 80066fa:	601a      	str	r2, [r3, #0]
        bUdpFirstTime = false;
 80066fc:	4b19      	ldr	r3, [pc, #100]	; (8006764 <udp_client_connect+0x8c>)
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	e008      	b.n	8006716 <udp_client_connect+0x3e>
    }
    else 
    {
        if (upcb != NULL)
 8006704:	4b18      	ldr	r3, [pc, #96]	; (8006768 <udp_client_connect+0x90>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <udp_client_connect+0x3e>
            udp_disconnect(upcb);
 800670c:	4b16      	ldr	r3, [pc, #88]	; (8006768 <udp_client_connect+0x90>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f015 fbab 	bl	801be6c <udp_disconnect>
    }

    if (upcb != NULL)
 8006716:	4b14      	ldr	r3, [pc, #80]	; (8006768 <udp_client_connect+0x90>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d015      	beq.n	800674a <udp_client_connect+0x72>
    {
        /* configure destination IP address and port */
        err = udp_connect(upcb, &serverIpAddr, sererPort);
 800671e:	4b12      	ldr	r3, [pc, #72]	; (8006768 <udp_client_connect+0x90>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	887a      	ldrh	r2, [r7, #2]
 8006724:	1d39      	adds	r1, r7, #4
 8006726:	4618      	mov	r0, r3
 8006728:	f015 fb32 	bl	801bd90 <udp_connect>
 800672c:	4603      	mov	r3, r0
 800672e:	73bb      	strb	r3, [r7, #14]

        if (err == ERR_OK)
 8006730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d108      	bne.n	800674a <udp_client_connect+0x72>
        {
            /* Set a receive callback for the upcb */
            udp_recv(upcb, udp_receive_callback, NULL);
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <udp_client_connect+0x90>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2200      	movs	r2, #0
 800673e:	490b      	ldr	r1, [pc, #44]	; (800676c <udp_client_connect+0x94>)
 8006740:	4618      	mov	r0, r3
 8006742:	f015 fbbb 	bl	801bebc <udp_recv>

            bUdpConnectErr = false;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (bUdpConnectErr)
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <udp_client_connect+0x84>
    {
        LOG_WRITE("create new udp pcb error\n");
        osEventFlagsSet(ConnectEthEventID, 1 << errorEthEnum);
 8006750:	4b07      	ldr	r3, [pc, #28]	; (8006770 <udp_client_connect+0x98>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2108      	movs	r1, #8
 8006756:	4618      	mov	r0, r3
 8006758:	f004 ff90 	bl	800b67c <osEventFlagsSet>
    }
}
 800675c:	bf00      	nop
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	2000023c 	.word	0x2000023c
 8006768:	20006028 	.word	0x20006028
 800676c:	08006695 	.word	0x08006695
 8006770:	20005984 	.word	0x20005984

08006774 <udp_client_send>:

void udp_client_send(uint8_t *data, int len)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
    LOG_WRITE("udp send %d %p\n", ethConnectStatus, upcb);

    if (ethConnectStatus != 2 || upcb == NULL)
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <udp_client_send+0x8c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d138      	bne.n	80067f8 <udp_client_send+0x84>
 8006786:	4b1f      	ldr	r3, [pc, #124]	; (8006804 <udp_client_send+0x90>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d034      	beq.n	80067f8 <udp_client_send+0x84>
        return;

    bool bUdpSendErr = true;
 800678e:	2301      	movs	r3, #1
 8006790:	73fb      	strb	r3, [r7, #15]
    struct pbuf *p;

    /* allocate pbuf from pool*/
    p = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_POOL);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800679a:	4619      	mov	r1, r3
 800679c:	2036      	movs	r0, #54	; 0x36
 800679e:	f00d fe07 	bl	80143b0 <pbuf_alloc>
 80067a2:	60b8      	str	r0, [r7, #8]

    if (p != NULL)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01c      	beq.n	80067e4 <udp_client_send+0x70>
    {
        /* copy data to pbuf */
        if (pbuf_take(p, data, len) == ERR_OK)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	68b8      	ldr	r0, [r7, #8]
 80067b4:	f00e fb94 	bl	8014ee0 <pbuf_take>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <udp_client_send+0x60>
        {
            /* send udp data */
            if (udp_send(upcb, p) == ERR_OK)
 80067be:	4b11      	ldr	r3, [pc, #68]	; (8006804 <udp_client_send+0x90>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f015 f871 	bl	801b8ac <udp_send>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <udp_client_send+0x60>
            {
                bUdpSendErr = false;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]
            }
        }
        /* free pbuf */
        if (pbuf_free(p) != ERR_OK)
 80067d4:	68b8      	ldr	r0, [r7, #8]
 80067d6:	f00e f8cf 	bl	8014978 <pbuf_free>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <udp_client_send+0x70>
        {
            bUdpSendErr = true;
 80067e0:	2301      	movs	r3, #1
 80067e2:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (bUdpSendErr)
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <udp_client_send+0x86>
    {
        LOG_WRITE("send udp pcb error\n");
        osEventFlagsSet(ConnectEthEventID, 1 << errorEthEnum);
 80067ea:	4b07      	ldr	r3, [pc, #28]	; (8006808 <udp_client_send+0x94>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2108      	movs	r1, #8
 80067f0:	4618      	mov	r0, r3
 80067f2:	f004 ff43 	bl	800b67c <osEventFlagsSet>
 80067f6:	e000      	b.n	80067fa <udp_client_send+0x86>
        return;
 80067f8:	bf00      	nop
    }
}
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	2000058c 	.word	0x2000058c
 8006804:	20006028 	.word	0x20006028
 8006808:	20005984 	.word	0x20005984

0800680c <ethSendTask>:

//tcp
void ethSendTask()
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	; 0x30
 8006810:	af02      	add	r7, sp, #8
    osStatus_t sendStt;
    err_t err;
    //wait until have packet
    for (;;)
    {
        sendStt = osMessageQueueGet(SendEthQueueID, &sendMsgObj, NULL, osWaitForever);
 8006812:	4b24      	ldr	r3, [pc, #144]	; (80068a4 <ethSendTask+0x98>)
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	f107 0108 	add.w	r1, r7, #8
 800681a:	f04f 33ff 	mov.w	r3, #4294967295
 800681e:	2200      	movs	r2, #0
 8006820:	f005 fb4e 	bl	800bec0 <osMessageQueueGet>
 8006824:	6238      	str	r0, [r7, #32]
        LOG_WRITE("eth send task %d %d\n", ethConnectStatus, sendMsgObj.type);
        if (ethConnectStatus == 0 || sendStt != osOK)
 8006826:	4b20      	ldr	r3, [pc, #128]	; (80068a8 <ethSendTask+0x9c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d038      	beq.n	80068a0 <ethSendTask+0x94>
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d135      	bne.n	80068a0 <ethSendTask+0x94>
            continue;
        if (sendMsgObj.type == 1)
 8006834:	7b3b      	ldrb	r3, [r7, #12]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d128      	bne.n	800688c <ethSendTask+0x80>
        {
            int nWritten = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
            size_t len;
            while (nWritten < sendMsgObj.len)
 800683e:	e020      	b.n	8006882 <ethSendTask+0x76>
            {
                err = netconn_write_partly(
 8006840:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <ethSendTask+0xa0>)
 8006842:	6818      	ldr	r0, [r3, #0]
                    conn,                                      //connection
                    (const void *)(sendMsgObj.ptr + nWritten), //buffer pointer
 8006844:	693a      	ldr	r2, [r7, #16]
                err = netconn_write_partly(
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                    (const void *)(sendMsgObj.ptr + nWritten), //buffer pointer
 8006848:	18d1      	adds	r1, r2, r3
                    (sendMsgObj.len - nWritten),               //buffer length
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	1ad3      	subs	r3, r2, r3
                err = netconn_write_partly(
 8006850:	461a      	mov	r2, r3
 8006852:	1d3b      	adds	r3, r7, #4
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	2304      	movs	r3, #4
 8006858:	f009 fd2e 	bl	80102b8 <netconn_write_partly>
 800685c:	4603      	mov	r3, r0
 800685e:	77fb      	strb	r3, [r7, #31]
                    NETCONN_DONTBLOCK,                         //no copy
                    (size_t *)&len);                           //written len
                if (err == ERR_OK)
 8006860:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d105      	bne.n	8006874 <ethSendTask+0x68>
                {
                    nWritten += (int)len;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	461a      	mov	r2, r3
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	4413      	add	r3, r2
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
 8006872:	e006      	b.n	8006882 <ethSendTask+0x76>
                }
                else
                {
                    //re-connect
                    osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum);
 8006874:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <ethSendTask+0xa4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2101      	movs	r1, #1
 800687a:	4618      	mov	r0, r3
 800687c:	f004 fefe 	bl	800b67c <osEventFlagsSet>
                    break;
 8006880:	e00f      	b.n	80068a2 <ethSendTask+0x96>
            while (nWritten < sendMsgObj.len)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006886:	429a      	cmp	r2, r3
 8006888:	dbda      	blt.n	8006840 <ethSendTask+0x34>
 800688a:	e7c2      	b.n	8006812 <ethSendTask+0x6>
                }
            }
        }
        else if (sendMsgObj.type == 2)
 800688c:	7b3b      	ldrb	r3, [r7, #12]
 800688e:	2b02      	cmp	r3, #2
 8006890:	d1bf      	bne.n	8006812 <ethSendTask+0x6>
        {
            udp_client_send(sendMsgObj.ptr, sendMsgObj.len);
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff ff6b 	bl	8006774 <udp_client_send>
 800689e:	e7b8      	b.n	8006812 <ethSendTask+0x6>
            continue;
 80068a0:	bf00      	nop
        sendStt = osMessageQueueGet(SendEthQueueID, &sendMsgObj, NULL, osWaitForever);
 80068a2:	e7b6      	b.n	8006812 <ethSendTask+0x6>
 80068a4:	20005840 	.word	0x20005840
 80068a8:	2000058c 	.word	0x2000058c
 80068ac:	20006024 	.word	0x20006024
 80068b0:	20005984 	.word	0x20005984

080068b4 <ethConnectRelease>:
        }
    }
}

void ethConnectRelease()
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
    //release tcp/udp stack
    ethConnectStatus = 0;
 80068b8:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <ethConnectRelease+0x30>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
    TCP_UDP_Stack_Release();
 80068be:	f003 fb41 	bl	8009f44 <TCP_UDP_Stack_Release>

    netconn_close(conn);  //close session
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <ethConnectRelease+0x34>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f009 fdf8 	bl	80104bc <netconn_close>
    netconn_delete(conn); //free memory
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <ethConnectRelease+0x34>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f009 faa7 	bl	800fe24 <netconn_delete>
    osDelay(RECONNECT_INTERVAR_ETH);
 80068d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80068da:	f004 fd7e 	bl	800b3da <osDelay>
}
 80068de:	bf00      	nop
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	2000058c 	.word	0x2000058c
 80068e8:	20006024 	.word	0x20006024

080068ec <ethConnectTcpUdp>:

//return 0 ~ success, -1 ~ fail
int ethConnectTcpUdp()
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
    ip_addr_t server_addr; //server address
    err_t err;
 
    int tryDhcp = 5;
 80068f2:	2305      	movs	r3, #5
 80068f4:	613b      	str	r3, [r7, #16]
    while (MX_LWIP_checkIsystem_ip_addr() == 0)
 80068f6:	e00b      	b.n	8006910 <ethConnectTcpUdp+0x24>
    {
        osDelay(1000);
 80068f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068fc:	f004 fd6d 	bl	800b3da <osDelay>
        if(tryDhcp-- < 0)
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1e5a      	subs	r2, r3, #1
 8006904:	613a      	str	r2, [r7, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	da02      	bge.n	8006910 <ethConnectTcpUdp+0x24>
        {
            //error connect
            return -1;
 800690a:	f04f 33ff 	mov.w	r3, #4294967295
 800690e:	e055      	b.n	80069bc <ethConnectTcpUdp+0xd0>
    while (MX_LWIP_checkIsystem_ip_addr() == 0)
 8006910:	f003 ff84 	bl	800a81c <MX_LWIP_checkIsystem_ip_addr>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0ee      	beq.n	80068f8 <ethConnectTcpUdp+0xc>
        }
    }

    //debug
    uint8_t* ipLWIP = MX_LWIP_getIP();
 800691a:	f003 ff97 	bl	800a84c <MX_LWIP_getIP>
 800691e:	4603      	mov	r3, r0
 8006920:	60bb      	str	r3, [r7, #8]
    if(ipLWIP != NULL)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
    {
        LOG_WRITE(">>> ip: %d %d %d %d\n", ipLWIP[0], ipLWIP[1], ipLWIP[2], ipLWIP[3]);
    }

    conn = netconn_new(NETCONN_TCP); //new tcp netconn
 8006926:	2200      	movs	r2, #0
 8006928:	2100      	movs	r1, #0
 800692a:	2010      	movs	r0, #16
 800692c:	f009 f9dc 	bl	800fce8 <netconn_new_with_proto_and_callback>
 8006930:	4603      	mov	r3, r0
 8006932:	4a24      	ldr	r2, [pc, #144]	; (80069c4 <ethConnectTcpUdp+0xd8>)
 8006934:	6013      	str	r3, [r2, #0]

    if (conn != NULL)
 8006936:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <ethConnectTcpUdp+0xd8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d03c      	beq.n	80069b8 <ethConnectTcpUdp+0xcc>
    {
        int tryGetIp = 5;
 800693e:	2305      	movs	r3, #5
 8006940:	60fb      	str	r3, [r7, #12]
        while (tryGetIp--)
 8006942:	e00a      	b.n	800695a <ethConnectTcpUdp+0x6e>
        {
            err = netconn_gethostbyname(serverDomain, &server_addr);
 8006944:	1d3b      	adds	r3, r7, #4
 8006946:	4619      	mov	r1, r3
 8006948:	481f      	ldr	r0, [pc, #124]	; (80069c8 <ethConnectTcpUdp+0xdc>)
 800694a:	f009 fddf 	bl	801050c <netconn_gethostbyname>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]
            if (err == ERR_OK)
 8006952:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <ethConnectTcpUdp+0x7a>
        while (tryGetIp--)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	1e5a      	subs	r2, r3, #1
 800695e:	60fa      	str	r2, [r7, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1ef      	bne.n	8006944 <ethConnectTcpUdp+0x58>
 8006964:	e000      	b.n	8006968 <ethConnectTcpUdp+0x7c>
            {
                break;
 8006966:	bf00      	nop
            }
        }

        if (err == ERR_OK)
 8006968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <ethConnectTcpUdp+0x9a>
            err = netconn_connect(conn, &server_addr, serverPort); //connect to the server
 8006970:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <ethConnectTcpUdp+0xd8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a15      	ldr	r2, [pc, #84]	; (80069cc <ethConnectTcpUdp+0xe0>)
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	b292      	uxth	r2, r2
 800697a:	1d39      	adds	r1, r7, #4
 800697c:	4618      	mov	r0, r3
 800697e:	f009 fa6d 	bl	800fe5c <netconn_connect>
 8006982:	4603      	mov	r3, r0
 8006984:	75fb      	strb	r3, [r7, #23]

        if (err == ERR_OK)
 8006986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d114      	bne.n	80069b8 <ethConnectTcpUdp+0xcc>
        {
            ethConnectStatus = 1; //done TCP
 800698e:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <ethConnectTcpUdp+0xe4>)
 8006990:	2201      	movs	r2, #1
 8006992:	601a      	str	r2, [r3, #0]
            udp_client_connect(server_addr, serverPort);
 8006994:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <ethConnectTcpUdp+0xe0>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff fe9b 	bl	80066d8 <udp_client_connect>
            TCP_UDP_Stack_Init(ConnectEthEventID, doneTLSEthEnum, reConEthEnum, true);
 80069a2:	4b0c      	ldr	r3, [pc, #48]	; (80069d4 <ethConnectTcpUdp+0xe8>)
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	2301      	movs	r3, #1
 80069a8:	2200      	movs	r2, #0
 80069aa:	2102      	movs	r1, #2
 80069ac:	f003 fa48 	bl	8009e40 <TCP_UDP_Stack_Init>
            TCP_Request(); //request rsa pub key
 80069b0:	f003 fb7c 	bl	800a0ac <TCP_Request>

            return 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	e001      	b.n	80069bc <ethConnectTcpUdp+0xd0>
    }
    else
    {
        LOG_WRITE("create new tcp conn error\n");
    }
    return -1;
 80069b8:	f04f 33ff 	mov.w	r3, #4294967295

}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20006024 	.word	0x20006024
 80069c8:	20000244 	.word	0x20000244
 80069cc:	200002a8 	.word	0x200002a8
 80069d0:	2000058c 	.word	0x2000058c
 80069d4:	20005984 	.word	0x20005984

080069d8 <ethRecv>:

//receive data, put in loop
void ethRecv()
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
    struct netbuf *buf;
    void *data;
    u16_t len; //buffer length

    err_t err = netconn_recv(conn, &buf);
 80069de:	4b18      	ldr	r3, [pc, #96]	; (8006a40 <ethRecv+0x68>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f107 0208 	add.w	r2, r7, #8
 80069e6:	4611      	mov	r1, r2
 80069e8:	4618      	mov	r0, r3
 80069ea:	f009 fbeb 	bl	80101c4 <netconn_recv>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]

    LOG_WRITE("net conn recv %d\n", err);

    if (err == ERR_OK)
 80069f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d117      	bne.n	8006a2a <ethRecv+0x52>
    {
        do
        {
            netbuf_data(buf, &data, &len); //receive data pointer & length
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	1cba      	adds	r2, r7, #2
 80069fe:	1d39      	adds	r1, r7, #4
 8006a00:	4618      	mov	r0, r3
 8006a02:	f00b f9f9 	bl	8011df8 <netbuf_data>
            TCP_Packet_Analyze(data, len);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	887a      	ldrh	r2, [r7, #2]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f003 f89b 	bl	8009b48 <TCP_Packet_Analyze>
        } while (netbuf_next(buf) >= 0); //check buffer empty
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f00b fa39 	bl	8011e8c <netbuf_next>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	daec      	bge.n	80069fa <ethRecv+0x22>
        netbuf_delete(buf);              //clear buffer
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f00b f9c8 	bl	8011db8 <netbuf_delete>
    }
    else
    {
        osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum);
    }
}
 8006a28:	e005      	b.n	8006a36 <ethRecv+0x5e>
        osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum);
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <ethRecv+0x6c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2101      	movs	r1, #1
 8006a30:	4618      	mov	r0, r3
 8006a32:	f004 fe23 	bl	800b67c <osEventFlagsSet>
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20006024 	.word	0x20006024
 8006a44:	20005984 	.word	0x20005984

08006a48 <ethConnectTask>:
int countethConnectTask = 0;
void ethConnectTask()
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
    //first time
    if(ethConnectTcpUdp() != 0)
 8006a4e:	f7ff ff4d 	bl	80068ec <ethConnectTcpUdp>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <ethConnectTask+0x1c>
    {
        osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum); //to re connect
 8006a58:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <ethConnectTask+0x80>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f004 fe0c 	bl	800b67c <osEventFlagsSet>

    LOG_WRITE("connectEthTask\n");
    int connectEthFlag;
    for (;;)
    {
        connectEthFlag = osEventFlagsWait(ConnectEthEventID, 0xFF, osFlagsWaitAny, 0);
 8006a64:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <ethConnectTask+0x80>)
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	21ff      	movs	r1, #255	; 0xff
 8006a6e:	f004 fe7b 	bl	800b768 <osEventFlagsWait>
 8006a72:	4603      	mov	r3, r0
 8006a74:	607b      	str	r3, [r7, #4]
        countethConnectTask++;
 8006a76:	4b15      	ldr	r3, [pc, #84]	; (8006acc <ethConnectTask+0x84>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	4a13      	ldr	r2, [pc, #76]	; (8006acc <ethConnectTask+0x84>)
 8006a7e:	6013      	str	r3, [r2, #0]
        // LOG_WRITE("connectEthFlag %d\n", connectEthFlag);
        if (connectEthFlag & (1 << errorEthEnum))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d11a      	bne.n	8006ac0 <ethConnectTask+0x78>
        {
            LOG_WRITE("conEthFlag err\n");
            //reboot stm32 by watch-dog
        }
        else if (connectEthFlag & (1 << reConEthEnum))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00d      	beq.n	8006ab0 <ethConnectTask+0x68>
        {
            ethConnectRelease();
 8006a94:	f7ff ff0e 	bl	80068b4 <ethConnectRelease>
            if(ethConnectTcpUdp() != 0)
 8006a98:	f7ff ff28 	bl	80068ec <ethConnectTcpUdp>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00e      	beq.n	8006ac0 <ethConnectTask+0x78>
            {
                osEventFlagsSet(ConnectEthEventID, 1 << errConEthEnum); //to re connect
 8006aa2:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <ethConnectTask+0x80>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f004 fde7 	bl	800b67c <osEventFlagsSet>
                continue;
 8006aae:	e009      	b.n	8006ac4 <ethConnectTask+0x7c>
            }
        }
        else if (connectEthFlag & (1 << doneTLSEthEnum))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <ethConnectTask+0x78>
        {
            ethConnectStatus = 2;
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <ethConnectTask+0x88>)
 8006abc:	2202      	movs	r2, #2
 8006abe:	601a      	str	r2, [r3, #0]
        }
        
        //recv data
        ethRecv();
 8006ac0:	f7ff ff8a 	bl	80069d8 <ethRecv>
        connectEthFlag = osEventFlagsWait(ConnectEthEventID, 0xFF, osFlagsWaitAny, 0);
 8006ac4:	e7ce      	b.n	8006a64 <ethConnectTask+0x1c>
 8006ac6:	bf00      	nop
 8006ac8:	20005984 	.word	0x20005984
 8006acc:	20000590 	.word	0x20000590
 8006ad0:	2000058c 	.word	0x2000058c

08006ad4 <ethSendIP>:
    }
}

bool ethSendIP(int type, uint8_t *data, int len)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	; 0x28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
    if (type != 1 && type != 2)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d004      	beq.n	8006af0 <ethSendIP+0x1c>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d001      	beq.n	8006af0 <ethSendIP+0x1c>
    {
        return false;
 8006aec:	2300      	movs	r3, #0
 8006aee:	e015      	b.n	8006b1c <ethSendIP+0x48>
    }
    LOG_WRITE("eth send %d\n", type);
    sendEthPack sendMsgObj;
    sendMsgObj.ptr = data;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	61bb      	str	r3, [r7, #24]
    sendMsgObj.len = len;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	61fb      	str	r3, [r7, #28]
    sendMsgObj.type = type;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	753b      	strb	r3, [r7, #20]
    osStatus_t sendMsgStt = osMessageQueuePut(SendEthQueueID, &sendMsgObj, 0U, 0U);
 8006afe:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <ethSendIP+0x50>)
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	f107 0110 	add.w	r1, r7, #16
 8006b06:	2300      	movs	r3, #0
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f005 f979 	bl	800be00 <osMessageQueuePut>
 8006b0e:	6278      	str	r0, [r7, #36]	; 0x24

    return (sendMsgStt == osOK);
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bf0c      	ite	eq
 8006b16:	2301      	moveq	r3, #1
 8006b18:	2300      	movne	r3, #0
 8006b1a:	b2db      	uxtb	r3, r3
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3728      	adds	r7, #40	; 0x28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20005840 	.word	0x20005840

08006b28 <md5hash>:
#include "md5.h"

uint8_t md5sum[MD5_LEN];

uint8_t* md5hash(uint8_t *initial_msg, int initial_len) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	1d3b      	adds	r3, r7, #4
 8006b32:	6018      	str	r0, [r3, #0]
 8006b34:	463b      	mov	r3, r7
 8006b36:	6019      	str	r1, [r3, #0]
    uint32_t *h0, *h1, *h2, *h3;
    h0 = (uint32_t*)md5sum;
 8006b38:	4bb1      	ldr	r3, [pc, #708]	; (8006e00 <md5hash+0x2d8>)
 8006b3a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    h1 = (uint32_t*)(md5sum + 4);
 8006b3e:	4bb1      	ldr	r3, [pc, #708]	; (8006e04 <md5hash+0x2dc>)
 8006b40:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    h2 = (uint32_t*)(md5sum + 8);
 8006b44:	4bb0      	ldr	r3, [pc, #704]	; (8006e08 <md5hash+0x2e0>)
 8006b46:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    h3 = (uint32_t*)(md5sum + 12);
 8006b4a:	4bb0      	ldr	r3, [pc, #704]	; (8006e0c <md5hash+0x2e4>)
 8006b4c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

    // Message (to prepare)
    uint8_t *msg = NULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 
    // Note: All variables are unsigned 32 bit and wrap modulo 2^32 when calculating
 
    // r specifies the per-round shift amounts
 
    uint32_t r[] = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
 8006b56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b5a:	4aad      	ldr	r2, [pc, #692]	; (8006e10 <md5hash+0x2e8>)
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	4611      	mov	r1, r2
 8006b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b64:	461a      	mov	r2, r3
 8006b66:	f01a f847 	bl	8020bf8 <memcpy>
                    5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
                    4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
                    6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};

    // Use binary integer part of the sines of integers (in radians) as constants// Initialize variables:
    uint32_t k[] = {
 8006b6a:	f107 0310 	add.w	r3, r7, #16
 8006b6e:	4aa9      	ldr	r2, [pc, #676]	; (8006e14 <md5hash+0x2ec>)
 8006b70:	4618      	mov	r0, r3
 8006b72:	4611      	mov	r1, r2
 8006b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f01a f83d 	bl	8020bf8 <memcpy>
        0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
        0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
        0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
        0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391};
 
    *h0 = 0x67452301;
 8006b7e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8006b82:	4aa5      	ldr	r2, [pc, #660]	; (8006e18 <md5hash+0x2f0>)
 8006b84:	601a      	str	r2, [r3, #0]
    *h1 = 0xefcdab89;
 8006b86:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006b8a:	4aa4      	ldr	r2, [pc, #656]	; (8006e1c <md5hash+0x2f4>)
 8006b8c:	601a      	str	r2, [r3, #0]
    *h2 = 0x98badcfe;
 8006b8e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8006b92:	4aa3      	ldr	r2, [pc, #652]	; (8006e20 <md5hash+0x2f8>)
 8006b94:	601a      	str	r2, [r3, #0]
    *h3 = 0x10325476;
 8006b96:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8006b9a:	4aa2      	ldr	r2, [pc, #648]	; (8006e24 <md5hash+0x2fc>)
 8006b9c:	601a      	str	r2, [r3, #0]
 
    // Pre-processing: padding with zeros
    //append "0" bit until message length in bit ≡ 448 (mod 512)
    //append length mod (2 pow 64) to message
 
    int new_len = ((((initial_len + 8) / 64) + 1) * 64) - 8;
 8006b9e:	463b      	mov	r3, r7
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da00      	bge.n	8006baa <md5hash+0x82>
 8006ba8:	333f      	adds	r3, #63	; 0x3f
 8006baa:	119b      	asrs	r3, r3, #6
 8006bac:	3301      	adds	r3, #1
 8006bae:	019b      	lsls	r3, r3, #6
 8006bb0:	3b08      	subs	r3, #8
 8006bb2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 
    msg = calloc(new_len + 64, 1); // also appends "0" bits 
 8006bb6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8006bba:	3340      	adds	r3, #64	; 0x40
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f019 fed6 	bl	8020970 <calloc>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
                                   // (we alloc also 64 extra bytes...)
    memcpy(msg, initial_msg, initial_len);
 8006bca:	463b      	mov	r3, r7
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	1d3b      	adds	r3, r7, #4
 8006bd0:	6819      	ldr	r1, [r3, #0]
 8006bd2:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8006bd6:	f01a f80f 	bl	8020bf8 <memcpy>
    msg[initial_len] = 128; // write the "1" bit
 8006bda:	463b      	mov	r3, r7
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8006be2:	4413      	add	r3, r2
 8006be4:	2280      	movs	r2, #128	; 0x80
 8006be6:	701a      	strb	r2, [r3, #0]
 
    uint32_t bits_len = 8*initial_len; // note, we append the len
 8006be8:	463b      	mov	r3, r7
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f107 030c 	add.w	r3, r7, #12
 8006bf4:	601a      	str	r2, [r3, #0]
    memcpy(msg + new_len, &bits_len, 4);           // in bits at the end of the buffer
 8006bf6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8006bfa:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8006bfe:	4413      	add	r3, r2
 8006c00:	f107 020c 	add.w	r2, r7, #12
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	601a      	str	r2, [r3, #0]
 
    // Process the message in successive 512-bit chunks:
    //for each 512-bit chunk of message:
    int offset;
    for(offset=0; offset<new_len; offset += (512/8)) {
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006c0e:	e0e5      	b.n	8006ddc <md5hash+0x2b4>
 
        // break chunk into sixteen 32-bit words w[j], 0 ≤ j ≤ 15
        uint32_t *w = (uint32_t *) (msg + offset);
 8006c10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8006c14:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8006c18:	4413      	add	r3, r2
 8006c1a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 
        // Initialize hash value for this chunk:
        uint32_t a = *h0;
 8006c1e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
        uint32_t b = *h1;
 8006c28:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
        uint32_t c = *h2;
 8006c32:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        uint32_t d = *h3;
 8006c3c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 
        // Main loop:
        uint32_t i;
        for(i = 0; i<64; i++) {
 8006c46:	2300      	movs	r3, #0
 8006c48:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006c4c:	e098      	b.n	8006d80 <md5hash+0x258>
            uint32_t f, g;

                if (i < 16) {
 8006c4e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006c52:	2b0f      	cmp	r3, #15
 8006c54:	d812      	bhi.n	8006c7c <md5hash+0x154>
                f = (b & c) | ((~b) & d);
 8006c56:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006c5a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006c5e:	401a      	ands	r2, r3
 8006c60:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006c64:	43d9      	mvns	r1, r3
 8006c66:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006c6a:	400b      	ands	r3, r1
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = i;
 8006c72:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006c76:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8006c7a:	e049      	b.n	8006d10 <md5hash+0x1e8>
            } else if (i < 32) {
 8006c7c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006c80:	2b1f      	cmp	r3, #31
 8006c82:	d818      	bhi.n	8006cb6 <md5hash+0x18e>
                f = (d & b) | ((~d) & c);
 8006c84:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8006c88:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006c8c:	401a      	ands	r2, r3
 8006c8e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006c92:	43d9      	mvns	r1, r3
 8006c94:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006c98:	400b      	ands	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = (5*i + 1) % 16;
 8006ca0:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	3301      	adds	r3, #1
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8006cb4:	e02c      	b.n	8006d10 <md5hash+0x1e8>
            } else if (i < 48) {
 8006cb6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006cba:	2b2f      	cmp	r3, #47	; 0x2f
 8006cbc:	d814      	bhi.n	8006ce8 <md5hash+0x1c0>
                f = b ^ c ^ d;
 8006cbe:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006cc2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006cc6:	4053      	eors	r3, r2
 8006cc8:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8006ccc:	4053      	eors	r3, r2
 8006cce:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = (3*i + 5) % 16;          
 8006cd2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	4413      	add	r3, r2
 8006cdc:	3305      	adds	r3, #5
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8006ce6:	e013      	b.n	8006d10 <md5hash+0x1e8>
            } else {
                f = c ^ (b | (~d));
 8006ce8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006cec:	43da      	mvns	r2, r3
 8006cee:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8006cf8:	4053      	eors	r3, r2
 8006cfa:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = (7*i) % 16;
 8006cfe:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006d02:	4613      	mov	r3, r2
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	f003 030f 	and.w	r3, r3, #15
 8006d0c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
            }

            uint32_t temp = d;
 8006d10:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006d14:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            d = c;
 8006d18:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006d1c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
            c = b;
 8006d20:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006d24:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
            // printf("rotateLeft(%x + %x + %x + %x, %d)\n", a, f, k[i], w[g], r[i]);
            b = b + LEFTROTATE((a + f + k[i] + w[g]), r[i]);
 8006d28:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006d2c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8006d30:	441a      	add	r2, r3
 8006d32:	f107 0310 	add.w	r3, r7, #16
 8006d36:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8006d3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d3e:	441a      	add	r2, r3
 8006d40:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8006d4a:	440b      	add	r3, r1
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	441a      	add	r2, r3
 8006d50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d54:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8006d58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d5c:	f1c3 0320 	rsb	r3, r3, #32
 8006d60:	fa62 f303 	ror.w	r3, r2, r3
 8006d64:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006d68:	4413      	add	r3, r2
 8006d6a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
            a = temp;
 8006d6e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006d72:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
        for(i = 0; i<64; i++) {
 8006d76:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006d80:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006d84:	2b3f      	cmp	r3, #63	; 0x3f
 8006d86:	f67f af62 	bls.w	8006c4e <md5hash+0x126>
        }
 
        // Add this chunk's hash to result so far:
        *h0 += a;
 8006d8a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006d94:	441a      	add	r2, r3
 8006d96:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8006d9a:	601a      	str	r2, [r3, #0]
        *h1 += b;
 8006d9c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006da6:	441a      	add	r2, r3
 8006da8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006dac:	601a      	str	r2, [r3, #0]
        *h2 += c;
 8006dae:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006db8:	441a      	add	r2, r3
 8006dba:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8006dbe:	601a      	str	r2, [r3, #0]
        *h3 += d;
 8006dc0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006dca:	441a      	add	r2, r3
 8006dcc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8006dd0:	601a      	str	r2, [r3, #0]
    for(offset=0; offset<new_len; offset += (512/8)) {
 8006dd2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8006dd6:	3340      	adds	r3, #64	; 0x40
 8006dd8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ddc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8006de0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8006de4:	429a      	cmp	r2, r3
 8006de6:	f6ff af13 	blt.w	8006c10 <md5hash+0xe8>
    }
 
    // cleanup
    free(msg);
 8006dea:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8006dee:	f019 feed 	bl	8020bcc <free>

    return md5sum;
 8006df2:	4b03      	ldr	r3, [pc, #12]	; (8006e00 <md5hash+0x2d8>)
 8006df4:	4618      	mov	r0, r3
 8006df6:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	2000602c 	.word	0x2000602c
 8006e04:	20006030 	.word	0x20006030
 8006e08:	20006034 	.word	0x20006034
 8006e0c:	20006038 	.word	0x20006038
 8006e10:	080222f8 	.word	0x080222f8
 8006e14:	080223f8 	.word	0x080223f8
 8006e18:	67452301 	.word	0x67452301
 8006e1c:	efcdab89 	.word	0xefcdab89
 8006e20:	98badcfe 	.word	0x98badcfe
 8006e24:	10325476 	.word	0x10325476

08006e28 <mp3GetFrame>:

int64_t curTimeDebug, offsetTimeDebug, curTimeDebugFirst = 0, curTimeDebugSecond = 0;

//get adu and frame from tcp packet and save to memory
void mp3GetFrame(MP3Struct *mp3Packet, int len)
{
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	b093      	sub	sp, #76	; 0x4c
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
    MP3LOG("mp3GetFrame\n");
 8006e34:	489d      	ldr	r0, [pc, #628]	; (80070ac <mp3GetFrame+0x284>)
 8006e36:	f01a f865 	bl	8020f04 <puts>

    //check property packet, len of adu and mp3 frame
    uint8_t *tmpPtr = mp3Packet->data + mp3Packet->sizeOfFirstFrame + (mp3Packet->numOfFrame - 1) * mp3Packet->frameSize;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8b3 3023 	ldrh.w	r3, [r3, #35]	; 0x23
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	4618      	mov	r0, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006e50:	3b01      	subs	r3, #1
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	f8b1 1025 	ldrh.w	r1, [r1, #37]	; 0x25
 8006e58:	b289      	uxth	r1, r1
 8006e5a:	fb01 f303 	mul.w	r3, r1, r3
 8006e5e:	4403      	add	r3, r0
 8006e60:	4413      	add	r3, r2
 8006e62:	63bb      	str	r3, [r7, #56]	; 0x38
    if (tmpPtr != (uint8_t *)mp3Packet + len)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4413      	add	r3, r2
 8006e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	f040 818b 	bne.w	8007188 <mp3GetFrame+0x360>
        return;

    //get volume, timeperframe
    newVol = mp3Packet->volume;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	7d5b      	ldrb	r3, [r3, #21]
 8006e76:	461a      	mov	r2, r3
 8006e78:	4b8d      	ldr	r3, [pc, #564]	; (80070b0 <mp3GetFrame+0x288>)
 8006e7a:	601a      	str	r2, [r3, #0]
    timeFrame = mp3Packet->timePerFrame;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006e82:	461a      	mov	r2, r3
 8006e84:	4b8b      	ldr	r3, [pc, #556]	; (80070b4 <mp3GetFrame+0x28c>)
 8006e86:	601a      	str	r2, [r3, #0]
    timePacket = mp3Packet->timePerFrame * mp3Packet->numOfFrame;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006e8e:	461a      	mov	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006e96:	fb03 f302 	mul.w	r3, r3, r2
 8006e9a:	4a87      	ldr	r2, [pc, #540]	; (80070b8 <mp3GetFrame+0x290>)
 8006e9c:	6013      	str	r3, [r2, #0]

    //check time, before save
    int64_t curTime = TCP_UDP_GetNtpTime();
 8006e9e:	f002 ff95 	bl	8009dcc <TCP_UDP_GetNtpTime>
 8006ea2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    curTimeDebug = curTime;
 8006ea6:	4985      	ldr	r1, [pc, #532]	; (80070bc <mp3GetFrame+0x294>)
 8006ea8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006eac:	e9c1 2300 	strd	r2, r3, [r1]
    if(curTime == 0) return; //don't have ntp time
 8006eb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f000 8169 	beq.w	800718c <mp3GetFrame+0x364>
    int64_t offsetTime = mp3Packet->timestamp - curTime;
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	f8d1 2016 	ldr.w	r2, [r1, #22]
 8006ec0:	f8d1 301a 	ldr.w	r3, [r1, #26]
 8006ec4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006ec8:	1a16      	subs	r6, r2, r0
 8006eca:	603e      	str	r6, [r7, #0]
 8006ecc:	eb63 0301 	sbc.w	r3, r3, r1
 8006ed0:	607b      	str	r3, [r7, #4]
 8006ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    offsetTimeDebug = offsetTime;
 8006eda:	4979      	ldr	r1, [pc, #484]	; (80070c0 <mp3GetFrame+0x298>)
 8006edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ee0:	e9c1 2300 	strd	r2, r3, [r1]

    //debug
    if(curTimeDebugFirst == 0) curTimeDebugFirst = curTime;
 8006ee4:	4b77      	ldr	r3, [pc, #476]	; (80070c4 <mp3GetFrame+0x29c>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	d104      	bne.n	8006ef8 <mp3GetFrame+0xd0>
 8006eee:	4975      	ldr	r1, [pc, #468]	; (80070c4 <mp3GetFrame+0x29c>)
 8006ef0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ef4:	e9c1 2300 	strd	r2, r3, [r1]
//    LOG_WRITE(">>> offset recv time %d", (int)offsetTime);

//   return;

    int numOfFrame;     //copy from tcp packet to memory
    if (offsetTime < 0) //packet come slow, need remove some frames
 8006ef8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	f173 0300 	sbcs.w	r3, r3, #0
 8006f02:	da29      	bge.n	8006f58 <mp3GetFrame+0x130>
    {
        int64_t numOfFrameWillRemove = (-offsetTime) / mp3Packet->timePerFrame + 1; // + 1 to margin
 8006f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f08:	4250      	negs	r0, r2
 8006f0a:	eb63 0143 	sbc.w	r1, r3, r3, lsl #1
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	f04f 0300 	mov.w	r3, #0
 8006f1a:	f7f9 f9b1 	bl	8000280 <__aeabi_ldivmod>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	f112 0a01 	adds.w	sl, r2, #1
 8006f26:	f143 0b00 	adc.w	fp, r3, #0
 8006f2a:	e9c7 ab08 	strd	sl, fp, [r7, #32]
        numOfFrame = (int)mp3Packet->numOfFrame - (int)numOfFrameWillRemove;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006f34:	461a      	mov	r2, r3
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	647b      	str	r3, [r7, #68]	; 0x44

        //debug     /////////////////////////
        if (numOfFrame < 0) //sth wrong ?
 8006f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f2c0 8126 	blt.w	8007190 <mp3GetFrame+0x368>
            LOG_WRITE("numOfFrame < 0 \n");
            return;
        }
        /////////////////////////////////////

        numOfFrame = min(numOfFrame, (int)mp3Packet->numOfFrame);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	bfa8      	it	ge
 8006f52:	4613      	movge	r3, r2
 8006f54:	647b      	str	r3, [r7, #68]	; 0x44
 8006f56:	e003      	b.n	8006f60 <mp3GetFrame+0x138>
    }
    else
    {
        numOfFrame = (int)mp3Packet->numOfFrame;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006f5e:	647b      	str	r3, [r7, #68]	; 0x44
    }

    //remain slot to save frame
    int remainSlotSaveFrame = MP3_NUM_OF_FRAME_MAX - numOfMp3FrameSaving;
 8006f60:	4b59      	ldr	r3, [pc, #356]	; (80070c8 <mp3GetFrame+0x2a0>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8006f68:	61fb      	str	r3, [r7, #28]

    //debug     //////////////////////
    if (remainSlotSaveFrame < 0) //sth wrong ?
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f2c0 8111 	blt.w	8007194 <mp3GetFrame+0x36c>
        LOG_WRITE("remainSlotSaveFrame < 0 \n");
        return;
    }
    //////////////////////////////////

    numOfFrame = min(numOfFrame, remainSlotSaveFrame);
 8006f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	4293      	cmp	r3, r2
 8006f78:	bfa8      	it	ge
 8006f7a:	4613      	movge	r3, r2
 8006f7c:	647b      	str	r3, [r7, #68]	; 0x44

    

    int numOfFrameRemoved = mp3Packet->numOfFrame - numOfFrame;               //use this to update timestamp
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006f84:	461a      	mov	r2, r3
 8006f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	61bb      	str	r3, [r7, #24]
    mp3Packet->timestamp += (int)mp3Packet->timePerFrame * numOfFrameRemoved; //update new timestamp
 8006f8c:	68f9      	ldr	r1, [r7, #12]
 8006f8e:	f8d1 2016 	ldr.w	r2, [r1, #22]
 8006f92:	f8d1 301a 	ldr.w	r3, [r1, #26]
 8006f96:	68f9      	ldr	r1, [r7, #12]
 8006f98:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	69b9      	ldr	r1, [r7, #24]
 8006fa0:	fb01 f100 	mul.w	r1, r1, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006faa:	1814      	adds	r4, r2, r0
 8006fac:	eb43 0501 	adc.w	r5, r3, r1
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3316      	adds	r3, #22
 8006fb4:	601c      	str	r4, [r3, #0]
 8006fb6:	605d      	str	r5, [r3, #4]

    int realFrameSize = mp3Packet->frameSize + 4; //4B for header
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8b3 3025 	ldrh.w	r3, [r3, #37]	; 0x25
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	617b      	str	r3, [r7, #20]
    uint8_t *framePtr = mp3Packet->data;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3328      	adds	r3, #40	; 0x28
 8006fc8:	643b      	str	r3, [r7, #64]	; 0x40
    //copy numOfFrame frame
    for (int i = 0; i < (int)numOfFrame; i++)
 8006fca:	2300      	movs	r3, #0
 8006fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fce:	e0c5      	b.n	800715c <mp3GetFrame+0x334>
    {
        FrameStruct *newFrame = (FrameStruct *)malloc(sizeof(FrameStruct));
 8006fd0:	2028      	movs	r0, #40	; 0x28
 8006fd2:	f019 fdf3 	bl	8020bbc <malloc>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	613b      	str	r3, [r7, #16]
        if (newFrame != NULL) //success allocate
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80ba 	beq.w	8007156 <mp3GetFrame+0x32e>
        {
            newFrame->nextFrame = NULL;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	60da      	str	r2, [r3, #12]
            newFrame->prevFrame = NULL;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2200      	movs	r2, #0
 8006fec:	609a      	str	r2, [r3, #8]

            if (i == 0) //adu frame
 8006fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10b      	bne.n	800700c <mp3GetFrame+0x1e4>
                newFrame->data = (uint8_t *)malloc(mp3Packet->sizeOfFirstFrame);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8b3 3023 	ldrh.w	r3, [r3, #35]	; 0x23
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f019 fddd 	bl	8020bbc <malloc>
 8007002:	4603      	mov	r3, r0
 8007004:	461a      	mov	r2, r3
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	621a      	str	r2, [r3, #32]
 800700a:	e007      	b.n	800701c <mp3GetFrame+0x1f4>
            else //mp3 frame
                newFrame->data = (uint8_t *)malloc(realFrameSize);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	4618      	mov	r0, r3
 8007010:	f019 fdd4 	bl	8020bbc <malloc>
 8007014:	4603      	mov	r3, r0
 8007016:	461a      	mov	r2, r3
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	621a      	str	r2, [r3, #32]
            if (newFrame->data != NULL)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 8094 	beq.w	800714e <mp3GetFrame+0x326>
            {
                if (i == 0)
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d119      	bne.n	8007060 <mp3GetFrame+0x238>
                {
                    //copy data
                    memcpy(newFrame->data, framePtr, mp3Packet->sizeOfFirstFrame);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	6a18      	ldr	r0, [r3, #32]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8b3 3023 	ldrh.w	r3, [r3, #35]	; 0x23
 8007036:	b29b      	uxth	r3, r3
 8007038:	461a      	mov	r2, r3
 800703a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800703c:	f019 fddc 	bl	8020bf8 <memcpy>
                    newFrame->len = mp3Packet->sizeOfFirstFrame;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8b3 3023 	ldrh.w	r3, [r3, #35]	; 0x23
 8007046:	b29b      	uxth	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	611a      	str	r2, [r3, #16]
                    framePtr += mp3Packet->sizeOfFirstFrame;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8b3 3023 	ldrh.w	r3, [r3, #35]	; 0x23
 8007054:	b29b      	uxth	r3, r3
 8007056:	461a      	mov	r2, r3
 8007058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800705a:	4413      	add	r3, r2
 800705c:	643b      	str	r3, [r7, #64]	; 0x40
 800705e:	e01b      	b.n	8007098 <mp3GetFrame+0x270>
                }
                else
                {
                    //copy data, first 4B header, then ....
                    memcpy(newFrame->data, mp3Packet->data, 4);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	3228      	adds	r2, #40	; 0x28
 8007068:	6812      	ldr	r2, [r2, #0]
 800706a:	601a      	str	r2, [r3, #0]
                    memcpy(newFrame->data + 4, framePtr, mp3Packet->frameSize);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	1d18      	adds	r0, r3, #4
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8b3 3025 	ldrh.w	r3, [r3, #37]	; 0x25
 8007078:	b29b      	uxth	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800707e:	f019 fdbb 	bl	8020bf8 <memcpy>
                    newFrame->len = realFrameSize;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	611a      	str	r2, [r3, #16]
                    framePtr += mp3Packet->frameSize;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8b3 3025 	ldrh.w	r3, [r3, #37]	; 0x25
 800708e:	b29b      	uxth	r3, r3
 8007090:	461a      	mov	r2, r3
 8007092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007094:	4413      	add	r3, r2
 8007096:	643b      	str	r3, [r7, #64]	; 0x40
                }

                //copy value id, session, timestamp
                if (i == (int)numOfFrame - 1) //last frame
 8007098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709a:	3b01      	subs	r3, #1
 800709c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800709e:	429a      	cmp	r2, r3
 80070a0:	d114      	bne.n	80070cc <mp3GetFrame+0x2a4>
                    newFrame->isTail = true;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2201      	movs	r2, #1
 80070a6:	771a      	strb	r2, [r3, #28]
 80070a8:	e013      	b.n	80070d2 <mp3GetFrame+0x2aa>
 80070aa:	bf00      	nop
 80070ac:	080224f8 	.word	0x080224f8
 80070b0:	20006050 	.word	0x20006050
 80070b4:	20006048 	.word	0x20006048
 80070b8:	2000604c 	.word	0x2000604c
 80070bc:	20006040 	.word	0x20006040
 80070c0:	20006058 	.word	0x20006058
 80070c4:	200005a0 	.word	0x200005a0
 80070c8:	20000594 	.word	0x20000594
                else
                    newFrame->isTail = false;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2200      	movs	r2, #0
 80070d0:	771a      	strb	r2, [r3, #28]
                newFrame->session = mp3Packet->session;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	619a      	str	r2, [r3, #24]
                newFrame->id = mp3Packet->frameID + i;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8d3 201e 	ldr.w	r2, [r3, #30]
 80070e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e4:	441a      	add	r2, r3
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	615a      	str	r2, [r3, #20]
                newFrame->timestamp = mp3Packet->timestamp + i * mp3Packet->timePerFrame;
 80070ea:	68f9      	ldr	r1, [r7, #12]
 80070ec:	f8d1 2016 	ldr.w	r2, [r1, #22]
 80070f0:	f8d1 301a 	ldr.w	r3, [r1, #26]
 80070f4:	68f9      	ldr	r1, [r7, #12]
 80070f6:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80070fa:	4608      	mov	r0, r1
 80070fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070fe:	fb01 f100 	mul.w	r1, r1, r0
 8007102:	4608      	mov	r0, r1
 8007104:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007108:	eb12 0800 	adds.w	r8, r2, r0
 800710c:	eb43 0901 	adc.w	r9, r3, r1
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	e9c3 8900 	strd	r8, r9, [r3]

                if (curFrame != NULL)
 8007116:	4b22      	ldr	r3, [pc, #136]	; (80071a0 <mp3GetFrame+0x378>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <mp3GetFrame+0x306>
                {
                    curFrame->nextFrame = newFrame;
 800711e:	4b20      	ldr	r3, [pc, #128]	; (80071a0 <mp3GetFrame+0x378>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	60da      	str	r2, [r3, #12]
                    newFrame->prevFrame = curFrame;
 8007126:	4b1e      	ldr	r3, [pc, #120]	; (80071a0 <mp3GetFrame+0x378>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	609a      	str	r2, [r3, #8]
                }
                curFrame = newFrame;
 800712e:	4a1c      	ldr	r2, [pc, #112]	; (80071a0 <mp3GetFrame+0x378>)
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	6013      	str	r3, [r2, #0]
                if (headFrame == NULL) //first time
 8007134:	4b1b      	ldr	r3, [pc, #108]	; (80071a4 <mp3GetFrame+0x37c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <mp3GetFrame+0x31a>
                    headFrame = newFrame;
 800713c:	4a19      	ldr	r2, [pc, #100]	; (80071a4 <mp3GetFrame+0x37c>)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6013      	str	r3, [r2, #0]

                numOfMp3FrameSaving++;
 8007142:	4b19      	ldr	r3, [pc, #100]	; (80071a8 <mp3GetFrame+0x380>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3301      	adds	r3, #1
 8007148:	4a17      	ldr	r2, [pc, #92]	; (80071a8 <mp3GetFrame+0x380>)
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	e003      	b.n	8007156 <mp3GetFrame+0x32e>
            }
            else
            {
                //free newFrame
                free(newFrame);
 800714e:	6938      	ldr	r0, [r7, #16]
 8007150:	f019 fd3c 	bl	8020bcc <free>
                LOG_WRITE("fail allocate new frame data\n");
                break; //not enough data
 8007154:	e007      	b.n	8007166 <mp3GetFrame+0x33e>
    for (int i = 0; i < (int)numOfFrame; i++)
 8007156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007158:	3301      	adds	r3, #1
 800715a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800715c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800715e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007160:	429a      	cmp	r2, r3
 8007162:	f6ff af35 	blt.w	8006fd0 <mp3GetFrame+0x1a8>
            LOG_WRITE("fail allocate new frame node\n");
        }
    }

    //debug
    if(numOfMp3FrameSaving >= 10 && curTimeDebugSecond == 0) curTimeDebugSecond = TCP_UDP_GetNtpTime();
 8007166:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <mp3GetFrame+0x380>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b09      	cmp	r3, #9
 800716c:	dd13      	ble.n	8007196 <mp3GetFrame+0x36e>
 800716e:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <mp3GetFrame+0x384>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	4313      	orrs	r3, r2
 8007176:	d10e      	bne.n	8007196 <mp3GetFrame+0x36e>
 8007178:	f002 fe28 	bl	8009dcc <TCP_UDP_GetNtpTime>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	490a      	ldr	r1, [pc, #40]	; (80071ac <mp3GetFrame+0x384>)
 8007182:	e9c1 2300 	strd	r2, r3, [r1]
 8007186:	e006      	b.n	8007196 <mp3GetFrame+0x36e>
        return;
 8007188:	bf00      	nop
 800718a:	e004      	b.n	8007196 <mp3GetFrame+0x36e>
    if(curTime == 0) return; //don't have ntp time
 800718c:	bf00      	nop
 800718e:	e002      	b.n	8007196 <mp3GetFrame+0x36e>
            return;
 8007190:	bf00      	nop
 8007192:	e000      	b.n	8007196 <mp3GetFrame+0x36e>
        return;
 8007194:	bf00      	nop
}
 8007196:	374c      	adds	r7, #76	; 0x4c
 8007198:	46bd      	mov	sp, r7
 800719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719e:	bf00      	nop
 80071a0:	2000059c 	.word	0x2000059c
 80071a4:	20000598 	.word	0x20000598
 80071a8:	20000594 	.word	0x20000594
 80071ac:	200005a8 	.word	0x200005a8

080071b0 <mp3GetVol>:

int mp3GetVol()
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
    MP3LOG("mp3GetVol\n");
 80071b4:	4803      	ldr	r0, [pc, #12]	; (80071c4 <mp3GetVol+0x14>)
 80071b6:	f019 fea5 	bl	8020f04 <puts>
    return newVol;
 80071ba:	4b03      	ldr	r3, [pc, #12]	; (80071c8 <mp3GetVol+0x18>)
 80071bc:	681b      	ldr	r3, [r3, #0]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	08022504 	.word	0x08022504
 80071c8:	20006050 	.word	0x20006050

080071cc <mp3GetNewFrame>:

FrameStruct *mp3GetNewFrame()
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
    MP3LOG("mp3GetNewFrame\n");
 80071d0:	4803      	ldr	r0, [pc, #12]	; (80071e0 <mp3GetNewFrame+0x14>)
 80071d2:	f019 fe97 	bl	8020f04 <puts>
    return headFrame;
 80071d6:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <mp3GetNewFrame+0x18>)
 80071d8:	681b      	ldr	r3, [r3, #0]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	08022510 	.word	0x08022510
 80071e4:	20000598 	.word	0x20000598

080071e8 <mp3RemoveFrame>:

void mp3RemoveFrame(FrameStruct *frame)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
    MP3LOG("mp3RemoveFrame\n");
 80071f0:	480f      	ldr	r0, [pc, #60]	; (8007230 <mp3RemoveFrame+0x48>)
 80071f2:	f019 fe87 	bl	8020f04 <puts>
    if(frame != NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d014      	beq.n	8007226 <mp3RemoveFrame+0x3e>
    {
        if(frame->data != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <mp3RemoveFrame+0x26>
            free(frame->data);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	4618      	mov	r0, r3
 800720a:	f019 fcdf 	bl	8020bcc <free>

        headFrame = frame->nextFrame; //point to next frame
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	4a08      	ldr	r2, [pc, #32]	; (8007234 <mp3RemoveFrame+0x4c>)
 8007214:	6013      	str	r3, [r2, #0]

        free(frame);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f019 fcd8 	bl	8020bcc <free>
        numOfMp3FrameSaving--;
 800721c:	4b06      	ldr	r3, [pc, #24]	; (8007238 <mp3RemoveFrame+0x50>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3b01      	subs	r3, #1
 8007222:	4a05      	ldr	r2, [pc, #20]	; (8007238 <mp3RemoveFrame+0x50>)
 8007224:	6013      	str	r3, [r2, #0]
    }
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	08022520 	.word	0x08022520
 8007234:	20000598 	.word	0x20000598
 8007238:	20000594 	.word	0x20000594

0800723c <mp3RemoveTcpFrame>:

//remove from current frame to tail frame
void mp3RemoveTcpFrame(FrameStruct *frame)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
    MP3LOG("mp3RemoveTcpFrame\n");
 8007244:	480c      	ldr	r0, [pc, #48]	; (8007278 <mp3RemoveTcpFrame+0x3c>)
 8007246:	f019 fe5d 	bl	8020f04 <puts>
    for(;;)
    {
        if(frame == NULL) return; //has nothing to delete
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00c      	beq.n	800726a <mp3RemoveTcpFrame+0x2e>
        bool endProcess = frame->isTail;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7f1b      	ldrb	r3, [r3, #28]
 8007254:	73fb      	strb	r3, [r7, #15]

        mp3RemoveFrame(frame);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff ffc6 	bl	80071e8 <mp3RemoveFrame>
        frame = headFrame;
 800725c:	4b07      	ldr	r3, [pc, #28]	; (800727c <mp3RemoveTcpFrame+0x40>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	607b      	str	r3, [r7, #4]

        if(endProcess) return; //reach tail
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d102      	bne.n	800726e <mp3RemoveTcpFrame+0x32>
    {
 8007268:	e7ef      	b.n	800724a <mp3RemoveTcpFrame+0xe>
        if(frame == NULL) return; //has nothing to delete
 800726a:	bf00      	nop
 800726c:	e000      	b.n	8007270 <mp3RemoveTcpFrame+0x34>
        if(endProcess) return; //reach tail
 800726e:	bf00      	nop
    }
}
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	08022530 	.word	0x08022530
 800727c:	20000598 	.word	0x20000598

08007280 <mp3CheckFrame>:

//return true ~ valid frame; false ~ fail, need read next frame
int64_t curTimeDebug3 = 0;
bool mp3CheckFrame(FrameStruct *frame)
{
 8007280:	b5b0      	push	{r4, r5, r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
    MP3LOG("mp3CheckFrame\n");
 8007288:	4851      	ldr	r0, [pc, #324]	; (80073d0 <mp3CheckFrame+0x150>)
 800728a:	f019 fe3b 	bl	8020f04 <puts>
    
    static bool IsRemoveTail = false;

    if(frame == NULL) return false;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <mp3CheckFrame+0x18>
 8007294:	2300      	movs	r3, #0
 8007296:	e097      	b.n	80073c8 <mp3CheckFrame+0x148>
    if(frame->data == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d106      	bne.n	80072ae <mp3CheckFrame+0x2e>
    {
        headFrame = frame->nextFrame;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	4a4b      	ldr	r2, [pc, #300]	; (80073d4 <mp3CheckFrame+0x154>)
 80072a6:	6013      	str	r3, [r2, #0]
        free(frame);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f019 fc8f 	bl	8020bcc <free>
    }

    if(IsRemoveTail && frame->isTail)
 80072ae:	4b4a      	ldr	r3, [pc, #296]	; (80073d8 <mp3CheckFrame+0x158>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00b      	beq.n	80072ce <mp3CheckFrame+0x4e>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	7f1b      	ldrb	r3, [r3, #28]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <mp3CheckFrame+0x4e>
    {
        //remove tail
        mp3RemoveFrame(frame);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff ff92 	bl	80071e8 <mp3RemoveFrame>
        IsRemoveTail = false;
 80072c4:	4b44      	ldr	r3, [pc, #272]	; (80073d8 <mp3CheckFrame+0x158>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
        return false;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e07c      	b.n	80073c8 <mp3CheckFrame+0x148>
    }

    //check time
    int64_t curTime = TCP_UDP_GetNtpTime();
 80072ce:	f002 fd7d 	bl	8009dcc <TCP_UDP_GetNtpTime>
 80072d2:	e9c7 0104 	strd	r0, r1, [r7, #16]
    int64_t offsetTime = TCP_UDP_GetNtpTime() - frame->timestamp;
 80072d6:	f002 fd79 	bl	8009dcc <TCP_UDP_GetNtpTime>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	1a84      	subs	r4, r0, r2
 80072e2:	eb61 0503 	sbc.w	r5, r1, r3
 80072e6:	e9c7 4502 	strd	r4, r5, [r7, #8]

    if(offsetTime > timePacket) //remove all frame to tail
 80072ea:	4b3c      	ldr	r3, [pc, #240]	; (80073dc <mp3CheckFrame+0x15c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80072f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072f8:	4290      	cmp	r0, r2
 80072fa:	eb71 0303 	sbcs.w	r3, r1, r3
 80072fe:	da13      	bge.n	8007328 <mp3CheckFrame+0xa8>
    {
    	if(curTimeDebug3 == 0) curTimeDebug3 = TCP_UDP_GetNtpTime();
 8007300:	4b37      	ldr	r3, [pc, #220]	; (80073e0 <mp3CheckFrame+0x160>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	4313      	orrs	r3, r2
 8007308:	d106      	bne.n	8007318 <mp3CheckFrame+0x98>
 800730a:	f002 fd5f 	bl	8009dcc <TCP_UDP_GetNtpTime>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4933      	ldr	r1, [pc, #204]	; (80073e0 <mp3CheckFrame+0x160>)
 8007314:	e9c1 2300 	strd	r2, r3, [r1]
        mp3RemoveTcpFrame(frame);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff ff8f 	bl	800723c <mp3RemoveTcpFrame>
        MP3LOG("mp3RemoveTcpFrame\n");
 800731e:	4831      	ldr	r0, [pc, #196]	; (80073e4 <mp3CheckFrame+0x164>)
 8007320:	f019 fdf0 	bl	8020f04 <puts>
        return false;
 8007324:	2300      	movs	r3, #0
 8007326:	e04f      	b.n	80073c8 <mp3CheckFrame+0x148>
    }
    else if(offsetTime > 2 * timeFrame) //remove just tail frame
 8007328:	4b2f      	ldr	r3, [pc, #188]	; (80073e8 <mp3CheckFrame+0x168>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	4618      	mov	r0, r3
 8007330:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007338:	4290      	cmp	r0, r2
 800733a:	eb71 0303 	sbcs.w	r3, r1, r3
 800733e:	da1f      	bge.n	8007380 <mp3CheckFrame+0x100>
    {
        MP3LOG("mp3 remove tail\n");
 8007340:	482a      	ldr	r0, [pc, #168]	; (80073ec <mp3CheckFrame+0x16c>)
 8007342:	f019 fddf 	bl	8020f04 <puts>
    	if(curTimeDebug3 == 0) curTimeDebug3 = TCP_UDP_GetNtpTime();
 8007346:	4b26      	ldr	r3, [pc, #152]	; (80073e0 <mp3CheckFrame+0x160>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	4313      	orrs	r3, r2
 800734e:	d106      	bne.n	800735e <mp3CheckFrame+0xde>
 8007350:	f002 fd3c 	bl	8009dcc <TCP_UDP_GetNtpTime>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4921      	ldr	r1, [pc, #132]	; (80073e0 <mp3CheckFrame+0x160>)
 800735a:	e9c1 2300 	strd	r2, r3, [r1]
        if(frame->isTail)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	7f1b      	ldrb	r3, [r3, #28]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d007      	beq.n	8007376 <mp3CheckFrame+0xf6>
        {
            mp3RemoveFrame(frame);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff ff3e 	bl	80071e8 <mp3RemoveFrame>
            IsRemoveTail = false;
 800736c:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <mp3CheckFrame+0x158>)
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]
            return false;
 8007372:	2300      	movs	r3, #0
 8007374:	e028      	b.n	80073c8 <mp3CheckFrame+0x148>
        }
        else
        { 
            IsRemoveTail = true;
 8007376:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <mp3CheckFrame+0x158>)
 8007378:	2201      	movs	r2, #1
 800737a:	701a      	strb	r2, [r3, #0]
            return true;
 800737c:	2301      	movs	r3, #1
 800737e:	e023      	b.n	80073c8 <mp3CheckFrame+0x148>
        }
    } 
    else if(offsetTime < -timeFrame)
 8007380:	4b19      	ldr	r3, [pc, #100]	; (80073e8 <mp3CheckFrame+0x168>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	425b      	negs	r3, r3
 8007386:	461a      	mov	r2, r3
 8007388:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800738c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007390:	4290      	cmp	r0, r2
 8007392:	eb71 0303 	sbcs.w	r3, r1, r3
 8007396:	da01      	bge.n	800739c <mp3CheckFrame+0x11c>
    {
        return false; //still early to play
 8007398:	2300      	movs	r3, #0
 800739a:	e015      	b.n	80073c8 <mp3CheckFrame+0x148>
    }
    else // -24 -> 48 ms
    {
    	if(curTimeDebug3 == 0) curTimeDebug3 = TCP_UDP_GetNtpTime();
 800739c:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <mp3CheckFrame+0x160>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	d106      	bne.n	80073b4 <mp3CheckFrame+0x134>
 80073a6:	f002 fd11 	bl	8009dcc <TCP_UDP_GetNtpTime>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	490c      	ldr	r1, [pc, #48]	; (80073e0 <mp3CheckFrame+0x160>)
 80073b0:	e9c1 2300 	strd	r2, r3, [r1]
        IsRemoveTail = false;
 80073b4:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <mp3CheckFrame+0x158>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
        MP3LOG("mp3 vaild frame %d\n", frame->id);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	4619      	mov	r1, r3
 80073c0:	480b      	ldr	r0, [pc, #44]	; (80073f0 <mp3CheckFrame+0x170>)
 80073c2:	f019 fd03 	bl	8020dcc <iprintf>
        return true;
 80073c6:	2301      	movs	r3, #1
    }
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bdb0      	pop	{r4, r5, r7, pc}
 80073d0:	08022544 	.word	0x08022544
 80073d4:	20000598 	.word	0x20000598
 80073d8:	200005b8 	.word	0x200005b8
 80073dc:	2000604c 	.word	0x2000604c
 80073e0:	200005b0 	.word	0x200005b0
 80073e4:	08022530 	.word	0x08022530
 80073e8:	20006048 	.word	0x20006048
 80073ec:	08022554 	.word	0x08022554
 80073f0:	08022564 	.word	0x08022564

080073f4 <generate_rand>:
int rsa_public_decrypt (uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk);
int rsa_private_encrypt(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_sk_t *sk);
int rsa_private_decrypt(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_sk_t *sk);

void generate_rand(uint8_t *block, uint32_t block_len)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i=0; i<block_len; i++) {
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e013      	b.n	800742c <generate_rand+0x38>
        srand ((unsigned)time(NULL));
 8007404:	2000      	movs	r0, #0
 8007406:	f019 fef5 	bl	80211f4 <time>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4613      	mov	r3, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f019 fd7f 	bl	8020f14 <srand>
        block[i] = rand();
 8007416:	f019 fdab 	bl	8020f70 <rand>
 800741a:	4601      	mov	r1, r0
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4413      	add	r3, r2
 8007422:	b2ca      	uxtb	r2, r1
 8007424:	701a      	strb	r2, [r3, #0]
    for(i=0; i<block_len; i++) {
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3301      	adds	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d3e7      	bcc.n	8007404 <generate_rand+0x10>
    }
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
	...

08007440 <rsa_public_encrypt>:
static int public_block_operation(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk);
static int private_block_operation(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_sk_t *sk);

uint8_t pkcs_block[RSA_MAX_MODULUS_LEN];
int rsa_public_encrypt(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08a      	sub	sp, #40	; 0x28
 8007444:	af02      	add	r7, sp, #8
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
    int status;
    uint8_t byte;// pkcs_block[RSA_MAX_MODULUS_LEN];
    uint32_t i, modulus_len;

    modulus_len = (pk->bits + 7) / 8;
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3307      	adds	r3, #7
 8007454:	08db      	lsrs	r3, r3, #3
 8007456:	61bb      	str	r3, [r7, #24]
    if(in_len + 11 > modulus_len) {
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	330b      	adds	r3, #11
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	429a      	cmp	r2, r3
 8007460:	d202      	bcs.n	8007468 <rsa_public_encrypt+0x28>
        return ERR_WRONG_LEN;
 8007462:	f241 0302 	movw	r3, #4098	; 0x1002
 8007466:	e041      	b.n	80074ec <rsa_public_encrypt+0xac>
    }

    pkcs_block[0] = 0;
 8007468:	4b22      	ldr	r3, [pc, #136]	; (80074f4 <rsa_public_encrypt+0xb4>)
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
    pkcs_block[1] = 2;
 800746e:	4b21      	ldr	r3, [pc, #132]	; (80074f4 <rsa_public_encrypt+0xb4>)
 8007470:	2202      	movs	r2, #2
 8007472:	705a      	strb	r2, [r3, #1]
    for(i=2; i<modulus_len-in_len-1; i++) {
 8007474:	2302      	movs	r3, #2
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	e011      	b.n	800749e <rsa_public_encrypt+0x5e>
        do {
            generate_rand(&byte, 1);
 800747a:	f107 0313 	add.w	r3, r7, #19
 800747e:	2101      	movs	r1, #1
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff ffb7 	bl	80073f4 <generate_rand>
        } while(byte == 0);
 8007486:	7cfb      	ldrb	r3, [r7, #19]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0f6      	beq.n	800747a <rsa_public_encrypt+0x3a>
        pkcs_block[i] = byte;
 800748c:	7cf9      	ldrb	r1, [r7, #19]
 800748e:	4a19      	ldr	r2, [pc, #100]	; (80074f4 <rsa_public_encrypt+0xb4>)
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	460a      	mov	r2, r1
 8007496:	701a      	strb	r2, [r3, #0]
    for(i=2; i<modulus_len-in_len-1; i++) {
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	3301      	adds	r3, #1
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d3e6      	bcc.n	800747a <rsa_public_encrypt+0x3a>
    }

    pkcs_block[i++] = 0;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	61fa      	str	r2, [r7, #28]
 80074b2:	4a10      	ldr	r2, [pc, #64]	; (80074f4 <rsa_public_encrypt+0xb4>)
 80074b4:	2100      	movs	r1, #0
 80074b6:	54d1      	strb	r1, [r2, r3]

    memcpy((uint8_t *)&pkcs_block[i], (uint8_t *)in, in_len);
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	4a0e      	ldr	r2, [pc, #56]	; (80074f4 <rsa_public_encrypt+0xb4>)
 80074bc:	4413      	add	r3, r2
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f019 fb98 	bl	8020bf8 <memcpy>
    status = public_block_operation(out, out_len, pkcs_block, modulus_len, pk);
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	4a09      	ldr	r2, [pc, #36]	; (80074f4 <rsa_public_encrypt+0xb4>)
 80074d0:	68b9      	ldr	r1, [r7, #8]
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 f810 	bl	80074f8 <public_block_operation>
 80074d8:	6178      	str	r0, [r7, #20]

    // Clear potentially sensitive information
    byte = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	74fb      	strb	r3, [r7, #19]
    memset((uint8_t *)pkcs_block, 0, sizeof(pkcs_block));
 80074de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074e2:	2100      	movs	r1, #0
 80074e4:	4803      	ldr	r0, [pc, #12]	; (80074f4 <rsa_public_encrypt+0xb4>)
 80074e6:	f019 fbaf 	bl	8020c48 <memset>

    return status;
 80074ea:	697b      	ldr	r3, [r7, #20]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3720      	adds	r7, #32
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20006164 	.word	0x20006164

080074f8 <public_block_operation>:

    return status;
}
bn_t c[BN_MAX_DIGITS], e[BN_MAX_DIGITS], m[BN_MAX_DIGITS], n[BN_MAX_DIGITS];
static int public_block_operation(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]
    uint32_t edigits, ndigits;

    bn_decode(m, BN_MAX_DIGITS, in, in_len);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	2141      	movs	r1, #65	; 0x41
 800750c:	4828      	ldr	r0, [pc, #160]	; (80075b0 <public_block_operation+0xb8>)
 800750e:	f7fe fa6b 	bl	80059e8 <bn_decode>
    bn_decode(n, BN_MAX_DIGITS, pk->modulus, RSA_MAX_MODULUS_LEN);
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	1d1a      	adds	r2, r3, #4
 8007516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800751a:	2141      	movs	r1, #65	; 0x41
 800751c:	4825      	ldr	r0, [pc, #148]	; (80075b4 <public_block_operation+0xbc>)
 800751e:	f7fe fa63 	bl	80059e8 <bn_decode>
    bn_decode(e, BN_MAX_DIGITS, pk->exponent, RSA_MAX_MODULUS_LEN);
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8007528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800752c:	2141      	movs	r1, #65	; 0x41
 800752e:	4822      	ldr	r0, [pc, #136]	; (80075b8 <public_block_operation+0xc0>)
 8007530:	f7fe fa5a 	bl	80059e8 <bn_decode>

    ndigits = bn_digits(n, BN_MAX_DIGITS);
 8007534:	2141      	movs	r1, #65	; 0x41
 8007536:	481f      	ldr	r0, [pc, #124]	; (80075b4 <public_block_operation+0xbc>)
 8007538:	f7fe ff51 	bl	80063de <bn_digits>
 800753c:	6178      	str	r0, [r7, #20]
    edigits = bn_digits(e, BN_MAX_DIGITS);
 800753e:	2141      	movs	r1, #65	; 0x41
 8007540:	481d      	ldr	r0, [pc, #116]	; (80075b8 <public_block_operation+0xc0>)
 8007542:	f7fe ff4c 	bl	80063de <bn_digits>
 8007546:	6138      	str	r0, [r7, #16]

    if(bn_cmp(m, n, ndigits) >= 0) {
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	491a      	ldr	r1, [pc, #104]	; (80075b4 <public_block_operation+0xbc>)
 800754c:	4818      	ldr	r0, [pc, #96]	; (80075b0 <public_block_operation+0xb8>)
 800754e:	f7fe ff12 	bl	8006376 <bn_cmp>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	db02      	blt.n	800755e <public_block_operation+0x66>
        return ERR_WRONG_DATA;
 8007558:	f241 0301 	movw	r3, #4097	; 0x1001
 800755c:	e023      	b.n	80075a6 <public_block_operation+0xae>
    }

    bn_mod_exp(c, m, e, edigits, n, ndigits);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	4b14      	ldr	r3, [pc, #80]	; (80075b4 <public_block_operation+0xbc>)
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	4a13      	ldr	r2, [pc, #76]	; (80075b8 <public_block_operation+0xc0>)
 800756a:	4911      	ldr	r1, [pc, #68]	; (80075b0 <public_block_operation+0xb8>)
 800756c:	4813      	ldr	r0, [pc, #76]	; (80075bc <public_block_operation+0xc4>)
 800756e:	f7fe fe19 	bl	80061a4 <bn_mod_exp>

    *out_len = (pk->bits + 7) / 8;
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3307      	adds	r3, #7
 8007578:	08da      	lsrs	r2, r3, #3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	601a      	str	r2, [r3, #0]
    bn_encode(out, *out_len, c, ndigits);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	6819      	ldr	r1, [r3, #0]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	4a0d      	ldr	r2, [pc, #52]	; (80075bc <public_block_operation+0xc4>)
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f7fe fa7c 	bl	8005a84 <bn_encode>

    // Clear potentially sensitive information
    memset((uint8_t *)c, 0, sizeof(c));
 800758c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007590:	2100      	movs	r1, #0
 8007592:	480a      	ldr	r0, [pc, #40]	; (80075bc <public_block_operation+0xc4>)
 8007594:	f019 fb58 	bl	8020c48 <memset>
    memset((uint8_t *)m, 0, sizeof(m));
 8007598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800759c:	2100      	movs	r1, #0
 800759e:	4804      	ldr	r0, [pc, #16]	; (80075b0 <public_block_operation+0xb8>)
 80075a0:	f019 fb52 	bl	8020c48 <memset>

    return 0;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	2000646c 	.word	0x2000646c
 80075b4:	20006060 	.word	0x20006060
 80075b8:	20006368 	.word	0x20006368
 80075bc:	20006264 	.word	0x20006264

080075c0 <RSA2048_Pubkey_Encrypt>:
    return 0;
}

rsa_pk_t pk = {0};
//return output len when success
int RSA2048_Pubkey_Encrypt(uint8_t* pubkey, int pubkeyLen, uint8_t* input, int inputLen, uint8_t* output) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	603b      	str	r3, [r7, #0]


    //exchange pubkey
    uint8_t tmp = pubkey[0];
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	75fb      	strb	r3, [r7, #23]
    pubkey[0] = pubkey[1];
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	785a      	ldrb	r2, [r3, #1]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	701a      	strb	r2, [r3, #0]
    pubkey[1] = tmp;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	7dfa      	ldrb	r2, [r7, #23]
 80075e2:	701a      	strb	r2, [r3, #0]

    tmp = pubkey[pubkeyLen - 2];
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	3b02      	subs	r3, #2
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	75fb      	strb	r3, [r7, #23]
    pubkey[pubkeyLen - 2] = pubkey[pubkeyLen - 1];
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	441a      	add	r2, r3
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	3b02      	subs	r3, #2
 80075fc:	68f9      	ldr	r1, [r7, #12]
 80075fe:	440b      	add	r3, r1
 8007600:	7812      	ldrb	r2, [r2, #0]
 8007602:	701a      	strb	r2, [r3, #0]
    pubkey[pubkeyLen - 1]  = tmp;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	3b01      	subs	r3, #1
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	7dfa      	ldrb	r2, [r7, #23]
 800760e:	701a      	strb	r2, [r3, #0]

    pk.bits = KEY_M_BITS;
 8007610:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <RSA2048_Pubkey_Encrypt+0xe8>)
 8007612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007616:	601a      	str	r2, [r3, #0]
    memcpy(&pk.modulus         [RSA_MAX_MODULUS_LEN- pubkeyLen],  pubkey,  pubkeyLen);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800761e:	4a22      	ldr	r2, [pc, #136]	; (80076a8 <RSA2048_Pubkey_Encrypt+0xe8>)
 8007620:	4413      	add	r3, r2
 8007622:	3304      	adds	r3, #4
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	68f9      	ldr	r1, [r7, #12]
 8007628:	4618      	mov	r0, r3
 800762a:	f019 fae5 	bl	8020bf8 <memcpy>
    // memcpy(&pk.modulus         [0],  key_m,  256);
    memcpy(&pk.exponent        [RSA_MAX_MODULUS_LEN-sizeof(key_e) ],  key_e,  sizeof(key_e ));
 800762e:	4b1e      	ldr	r3, [pc, #120]	; (80076a8 <RSA2048_Pubkey_Encrypt+0xe8>)
 8007630:	4a1e      	ldr	r2, [pc, #120]	; (80076ac <RSA2048_Pubkey_Encrypt+0xec>)
 8007632:	f203 2301 	addw	r3, r3, #513	; 0x201
 8007636:	8811      	ldrh	r1, [r2, #0]
 8007638:	7892      	ldrb	r2, [r2, #2]
 800763a:	8019      	strh	r1, [r3, #0]
 800763c:	709a      	strb	r2, [r3, #2]

    uint32_t outputLen;
    
    if(rsa_public_encrypt(output, &outputLen, (uint8_t*)input, inputLen, &pk) == 0) {
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	f107 0110 	add.w	r1, r7, #16
 8007644:	4a18      	ldr	r2, [pc, #96]	; (80076a8 <RSA2048_Pubkey_Encrypt+0xe8>)
 8007646:	9200      	str	r2, [sp, #0]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6a38      	ldr	r0, [r7, #32]
 800764c:	f7ff fef8 	bl	8007440 <rsa_public_encrypt>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d122      	bne.n	800769c <RSA2048_Pubkey_Encrypt+0xdc>
        //trick exchange first and last two bytes
    	tmp = output[0]; output[0] = output[1]; output[1] = tmp;
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	75fb      	strb	r3, [r7, #23]
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	785a      	ldrb	r2, [r3, #1]
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	3301      	adds	r3, #1
 8007668:	7dfa      	ldrb	r2, [r7, #23]
 800766a:	701a      	strb	r2, [r3, #0]
        tmp = output[outputLen - 2]; output[outputLen - 2] = output[outputLen - 1]; output[outputLen - 1] = tmp;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	3b02      	subs	r3, #2
 8007670:	6a3a      	ldr	r2, [r7, #32]
 8007672:	4413      	add	r3, r2
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	75fb      	strb	r3, [r7, #23]
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	3b01      	subs	r3, #1
 800767c:	6a3a      	ldr	r2, [r7, #32]
 800767e:	441a      	add	r2, r3
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	3b02      	subs	r3, #2
 8007684:	6a39      	ldr	r1, [r7, #32]
 8007686:	440b      	add	r3, r1
 8007688:	7812      	ldrb	r2, [r2, #0]
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	3b01      	subs	r3, #1
 8007690:	6a3a      	ldr	r2, [r7, #32]
 8007692:	4413      	add	r3, r2
 8007694:	7dfa      	ldrb	r2, [r7, #23]
 8007696:	701a      	strb	r2, [r3, #0]
        return outputLen;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	e001      	b.n	80076a0 <RSA2048_Pubkey_Encrypt+0xe0>
    }

    return -1;
 800769c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	200005bc 	.word	0x200005bc
 80076ac:	20000240 	.word	0x20000240

080076b0 <LL_DMA_EnableStream>:
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80076ba:	4a0c      	ldr	r2, [pc, #48]	; (80076ec <LL_DMA_EnableStream+0x3c>)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	4413      	add	r3, r2
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4413      	add	r3, r2
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4908      	ldr	r1, [pc, #32]	; (80076ec <LL_DMA_EnableStream+0x3c>)
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	440a      	add	r2, r1
 80076d0:	7812      	ldrb	r2, [r2, #0]
 80076d2:	4611      	mov	r1, r2
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	440a      	add	r2, r1
 80076d8:	f043 0301 	orr.w	r3, r3, #1
 80076dc:	6013      	str	r3, [r2, #0]
}
 80076de:	bf00      	nop
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	08026540 	.word	0x08026540

080076f0 <LL_DMA_DisableStream>:
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80076fa:	4a0c      	ldr	r2, [pc, #48]	; (800772c <LL_DMA_DisableStream+0x3c>)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	4413      	add	r3, r2
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4413      	add	r3, r2
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4908      	ldr	r1, [pc, #32]	; (800772c <LL_DMA_DisableStream+0x3c>)
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	440a      	add	r2, r1
 8007710:	7812      	ldrb	r2, [r2, #0]
 8007712:	4611      	mov	r1, r2
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	440a      	add	r2, r1
 8007718:	f023 0301 	bic.w	r3, r3, #1
 800771c:	6013      	str	r3, [r2, #0]
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	08026540 	.word	0x08026540

08007730 <LL_DMA_IsEnabledStream>:
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 800773a:	4a0a      	ldr	r2, [pc, #40]	; (8007764 <LL_DMA_IsEnabledStream+0x34>)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	4413      	add	r3, r2
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4413      	add	r3, r2
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b01      	cmp	r3, #1
 8007750:	bf0c      	ite	eq
 8007752:	2301      	moveq	r3, #1
 8007754:	2300      	movne	r3, #0
 8007756:	b2db      	uxtb	r3, r3
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	08026540 	.word	0x08026540

08007768 <LL_DMA_SetDataTransferDirection>:
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8007774:	4a0d      	ldr	r2, [pc, #52]	; (80077ac <LL_DMA_SetDataTransferDirection+0x44>)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4413      	add	r3, r2
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007788:	4908      	ldr	r1, [pc, #32]	; (80077ac <LL_DMA_SetDataTransferDirection+0x44>)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	440b      	add	r3, r1
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	4619      	mov	r1, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	440b      	add	r3, r1
 8007796:	4619      	mov	r1, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4313      	orrs	r3, r2
 800779c:	600b      	str	r3, [r1, #0]
}
 800779e:	bf00      	nop
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	08026540 	.word	0x08026540

080077b0 <LL_DMA_SetMode>:
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80077bc:	4a0d      	ldr	r2, [pc, #52]	; (80077f4 <LL_DMA_SetMode+0x44>)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4413      	add	r3, r2
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	4413      	add	r3, r2
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80077d0:	4908      	ldr	r1, [pc, #32]	; (80077f4 <LL_DMA_SetMode+0x44>)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	440b      	add	r3, r1
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	4619      	mov	r1, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	440b      	add	r3, r1
 80077de:	4619      	mov	r1, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	600b      	str	r3, [r1, #0]
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	08026540 	.word	0x08026540

080077f8 <LL_DMA_SetPeriphIncMode>:
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8007804:	4a0d      	ldr	r2, [pc, #52]	; (800783c <LL_DMA_SetPeriphIncMode+0x44>)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	4413      	add	r3, r2
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4413      	add	r3, r2
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007818:	4908      	ldr	r1, [pc, #32]	; (800783c <LL_DMA_SetPeriphIncMode+0x44>)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	440b      	add	r3, r1
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	4619      	mov	r1, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	440b      	add	r3, r1
 8007826:	4619      	mov	r1, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4313      	orrs	r3, r2
 800782c:	600b      	str	r3, [r1, #0]
}
 800782e:	bf00      	nop
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	08026540 	.word	0x08026540

08007840 <LL_DMA_SetMemoryIncMode>:
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800784c:	4a0d      	ldr	r2, [pc, #52]	; (8007884 <LL_DMA_SetMemoryIncMode+0x44>)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	4413      	add	r3, r2
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4413      	add	r3, r2
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007860:	4908      	ldr	r1, [pc, #32]	; (8007884 <LL_DMA_SetMemoryIncMode+0x44>)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	440b      	add	r3, r1
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	4619      	mov	r1, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	440b      	add	r3, r1
 800786e:	4619      	mov	r1, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4313      	orrs	r3, r2
 8007874:	600b      	str	r3, [r1, #0]
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	08026540 	.word	0x08026540

08007888 <LL_DMA_SetPeriphSize>:
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8007894:	4a0d      	ldr	r2, [pc, #52]	; (80078cc <LL_DMA_SetPeriphSize+0x44>)
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4413      	add	r3, r2
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4413      	add	r3, r2
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80078a8:	4908      	ldr	r1, [pc, #32]	; (80078cc <LL_DMA_SetPeriphSize+0x44>)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	440b      	add	r3, r1
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	4619      	mov	r1, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	440b      	add	r3, r1
 80078b6:	4619      	mov	r1, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	600b      	str	r3, [r1, #0]
}
 80078be:	bf00      	nop
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	08026540 	.word	0x08026540

080078d0 <LL_DMA_SetMemorySize>:
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80078dc:	4a0d      	ldr	r2, [pc, #52]	; (8007914 <LL_DMA_SetMemorySize+0x44>)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	4413      	add	r3, r2
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4413      	add	r3, r2
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80078f0:	4908      	ldr	r1, [pc, #32]	; (8007914 <LL_DMA_SetMemorySize+0x44>)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	440b      	add	r3, r1
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	4619      	mov	r1, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	440b      	add	r3, r1
 80078fe:	4619      	mov	r1, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4313      	orrs	r3, r2
 8007904:	600b      	str	r3, [r1, #0]
}
 8007906:	bf00      	nop
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	08026540 	.word	0x08026540

08007918 <LL_DMA_SetStreamPriorityLevel>:
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8007924:	4a0d      	ldr	r2, [pc, #52]	; (800795c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4413      	add	r3, r2
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4413      	add	r3, r2
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007938:	4908      	ldr	r1, [pc, #32]	; (800795c <LL_DMA_SetStreamPriorityLevel+0x44>)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	440b      	add	r3, r1
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	4619      	mov	r1, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	440b      	add	r3, r1
 8007946:	4619      	mov	r1, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4313      	orrs	r3, r2
 800794c:	600b      	str	r3, [r1, #0]
}
 800794e:	bf00      	nop
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	08026540 	.word	0x08026540

08007960 <LL_DMA_SetDataLength>:
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800796c:	4a0d      	ldr	r2, [pc, #52]	; (80079a4 <LL_DMA_SetDataLength+0x44>)
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	4413      	add	r3, r2
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	0c1b      	lsrs	r3, r3, #16
 800797e:	041b      	lsls	r3, r3, #16
 8007980:	4908      	ldr	r1, [pc, #32]	; (80079a4 <LL_DMA_SetDataLength+0x44>)
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	440a      	add	r2, r1
 8007986:	7812      	ldrb	r2, [r2, #0]
 8007988:	4611      	mov	r1, r2
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	440a      	add	r2, r1
 800798e:	4611      	mov	r1, r2
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	4313      	orrs	r3, r2
 8007994:	604b      	str	r3, [r1, #4]
}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	08026540 	.word	0x08026540

080079a8 <LL_DMA_GetDataLength>:
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 80079b2:	4a07      	ldr	r2, [pc, #28]	; (80079d0 <LL_DMA_GetDataLength+0x28>)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	4413      	add	r3, r2
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	b29b      	uxth	r3, r3
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	08026540 	.word	0x08026540

080079d4 <LL_DMA_SetChannelSelection>:
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80079e0:	4a0d      	ldr	r2, [pc, #52]	; (8007a18 <LL_DMA_SetChannelSelection+0x44>)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	4413      	add	r3, r2
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4413      	add	r3, r2
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80079f4:	4908      	ldr	r1, [pc, #32]	; (8007a18 <LL_DMA_SetChannelSelection+0x44>)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	440b      	add	r3, r1
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	4619      	mov	r1, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	440b      	add	r3, r1
 8007a02:	4619      	mov	r1, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	600b      	str	r3, [r1, #0]
}
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	08026540 	.word	0x08026540

08007a1c <LL_DMA_DisableFifoMode>:
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8007a26:	4a0c      	ldr	r2, [pc, #48]	; (8007a58 <LL_DMA_DisableFifoMode+0x3c>)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4413      	add	r3, r2
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	4908      	ldr	r1, [pc, #32]	; (8007a58 <LL_DMA_DisableFifoMode+0x3c>)
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	440a      	add	r2, r1
 8007a3c:	7812      	ldrb	r2, [r2, #0]
 8007a3e:	4611      	mov	r1, r2
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	440a      	add	r2, r1
 8007a44:	f023 0304 	bic.w	r3, r3, #4
 8007a48:	6153      	str	r3, [r2, #20]
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	08026540 	.word	0x08026540

08007a5c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8007a68:	4a07      	ldr	r2, [pc, #28]	; (8007a88 <LL_DMA_SetMemoryAddress+0x2c>)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	461a      	mov	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	60d3      	str	r3, [r2, #12]
}
 8007a7c:	bf00      	nop
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	08026540 	.word	0x08026540

08007a8c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8007a98:	4a07      	ldr	r2, [pc, #28]	; (8007ab8 <LL_DMA_SetPeriphAddress+0x2c>)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6093      	str	r3, [r2, #8]
}
 8007aac:	bf00      	nop
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	08026540 	.word	0x08026540

08007abc <LL_AHB1_GRP1_EnableClock>:
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007ac4:	4b08      	ldr	r3, [pc, #32]	; (8007ae8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ac8:	4907      	ldr	r1, [pc, #28]	; (8007ae8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007ad0:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007ada:	68fb      	ldr	r3, [r7, #12]
}
 8007adc:	bf00      	nop
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	40023800 	.word	0x40023800

08007aec <LL_APB2_GRP1_EnableClock>:
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007af4:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007af6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007af8:	4907      	ldr	r1, [pc, #28]	; (8007b18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007b00:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4013      	ands	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
}
 8007b0c:	bf00      	nop
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	40023800 	.word	0x40023800

08007b1c <LL_USART_Enable>:
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60da      	str	r2, [r3, #12]
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <LL_USART_Disable>:
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	60da      	str	r2, [r3, #12]
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <LL_USART_IsEnabled>:
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b70:	bf0c      	ite	eq
 8007b72:	2301      	moveq	r3, #1
 8007b74:	2300      	movne	r3, #0
 8007b76:	b2db      	uxtb	r3, r3
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <LL_USART_SetBaudRate>:
{
 8007b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	b09f      	sub	sp, #124	; 0x7c
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6778      	str	r0, [r7, #116]	; 0x74
 8007b8e:	6739      	str	r1, [r7, #112]	; 0x70
 8007b90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b92:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b9a:	f040 80bc 	bne.w	8007d16 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ba0:	461c      	mov	r4, r3
 8007ba2:	f04f 0500 	mov.w	r5, #0
 8007ba6:	4622      	mov	r2, r4
 8007ba8:	462b      	mov	r3, r5
 8007baa:	eb12 0a02 	adds.w	sl, r2, r2
 8007bae:	eb43 0b03 	adc.w	fp, r3, r3
 8007bb2:	4652      	mov	r2, sl
 8007bb4:	465b      	mov	r3, fp
 8007bb6:	1912      	adds	r2, r2, r4
 8007bb8:	eb45 0303 	adc.w	r3, r5, r3
 8007bbc:	f04f 0000 	mov.w	r0, #0
 8007bc0:	f04f 0100 	mov.w	r1, #0
 8007bc4:	00d9      	lsls	r1, r3, #3
 8007bc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bca:	00d0      	lsls	r0, r2, #3
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	1911      	adds	r1, r2, r4
 8007bd2:	6639      	str	r1, [r7, #96]	; 0x60
 8007bd4:	416b      	adcs	r3, r5
 8007bd6:	667b      	str	r3, [r7, #100]	; 0x64
 8007bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	1891      	adds	r1, r2, r2
 8007be2:	6339      	str	r1, [r7, #48]	; 0x30
 8007be4:	415b      	adcs	r3, r3
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
 8007be8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007bec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007bf0:	f7f8 fb96 	bl	8000320 <__aeabi_uldivmod>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4ba9      	ldr	r3, [pc, #676]	; (8007ea0 <LL_USART_SetBaudRate+0x31c>)
 8007bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	b29e      	uxth	r6, r3
 8007c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c08:	461c      	mov	r4, r3
 8007c0a:	f04f 0500 	mov.w	r5, #0
 8007c0e:	4622      	mov	r2, r4
 8007c10:	462b      	mov	r3, r5
 8007c12:	1891      	adds	r1, r2, r2
 8007c14:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c16:	415b      	adcs	r3, r3
 8007c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c1e:	1912      	adds	r2, r2, r4
 8007c20:	eb45 0303 	adc.w	r3, r5, r3
 8007c24:	f04f 0000 	mov.w	r0, #0
 8007c28:	f04f 0100 	mov.w	r1, #0
 8007c2c:	00d9      	lsls	r1, r3, #3
 8007c2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c32:	00d0      	lsls	r0, r2, #3
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	1911      	adds	r1, r2, r4
 8007c3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c3c:	416b      	adcs	r3, r5
 8007c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c42:	461a      	mov	r2, r3
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	1891      	adds	r1, r2, r2
 8007c4a:	6239      	str	r1, [r7, #32]
 8007c4c:	415b      	adcs	r3, r3
 8007c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c54:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c58:	f7f8 fb62 	bl	8000320 <__aeabi_uldivmod>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4b8f      	ldr	r3, [pc, #572]	; (8007ea0 <LL_USART_SetBaudRate+0x31c>)
 8007c62:	fba3 1302 	umull	r1, r3, r3, r2
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	2164      	movs	r1, #100	; 0x64
 8007c6a:	fb01 f303 	mul.w	r3, r1, r3
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	00db      	lsls	r3, r3, #3
 8007c72:	3332      	adds	r3, #50	; 0x32
 8007c74:	4a8a      	ldr	r2, [pc, #552]	; (8007ea0 <LL_USART_SetBaudRate+0x31c>)
 8007c76:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7a:	095b      	lsrs	r3, r3, #5
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	4433      	add	r3, r6
 8007c8a:	b29e      	uxth	r6, r3
 8007c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f04f 0100 	mov.w	r1, #0
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	1894      	adds	r4, r2, r2
 8007c9a:	61bc      	str	r4, [r7, #24]
 8007c9c:	415b      	adcs	r3, r3
 8007c9e:	61fb      	str	r3, [r7, #28]
 8007ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ca4:	1812      	adds	r2, r2, r0
 8007ca6:	eb41 0303 	adc.w	r3, r1, r3
 8007caa:	f04f 0400 	mov.w	r4, #0
 8007cae:	f04f 0500 	mov.w	r5, #0
 8007cb2:	00dd      	lsls	r5, r3, #3
 8007cb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cb8:	00d4      	lsls	r4, r2, #3
 8007cba:	4622      	mov	r2, r4
 8007cbc:	462b      	mov	r3, r5
 8007cbe:	1814      	adds	r4, r2, r0
 8007cc0:	653c      	str	r4, [r7, #80]	; 0x50
 8007cc2:	414b      	adcs	r3, r1
 8007cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8007cc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cc8:	461a      	mov	r2, r3
 8007cca:	f04f 0300 	mov.w	r3, #0
 8007cce:	1891      	adds	r1, r2, r2
 8007cd0:	6139      	str	r1, [r7, #16]
 8007cd2:	415b      	adcs	r3, r3
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007cda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007cde:	f7f8 fb1f 	bl	8000320 <__aeabi_uldivmod>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4b6e      	ldr	r3, [pc, #440]	; (8007ea0 <LL_USART_SetBaudRate+0x31c>)
 8007ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cec:	095b      	lsrs	r3, r3, #5
 8007cee:	2164      	movs	r1, #100	; 0x64
 8007cf0:	fb01 f303 	mul.w	r3, r1, r3
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	3332      	adds	r3, #50	; 0x32
 8007cfa:	4a69      	ldr	r2, [pc, #420]	; (8007ea0 <LL_USART_SetBaudRate+0x31c>)
 8007cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	4433      	add	r3, r6
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d12:	609a      	str	r2, [r3, #8]
}
 8007d14:	e0be      	b.n	8007e94 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d18:	461c      	mov	r4, r3
 8007d1a:	f04f 0500 	mov.w	r5, #0
 8007d1e:	4622      	mov	r2, r4
 8007d20:	462b      	mov	r3, r5
 8007d22:	eb12 0802 	adds.w	r8, r2, r2
 8007d26:	eb43 0903 	adc.w	r9, r3, r3
 8007d2a:	4642      	mov	r2, r8
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	1912      	adds	r2, r2, r4
 8007d30:	eb45 0303 	adc.w	r3, r5, r3
 8007d34:	f04f 0000 	mov.w	r0, #0
 8007d38:	f04f 0100 	mov.w	r1, #0
 8007d3c:	00d9      	lsls	r1, r3, #3
 8007d3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d42:	00d0      	lsls	r0, r2, #3
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	1911      	adds	r1, r2, r4
 8007d4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d4c:	416b      	adcs	r3, r5
 8007d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d52:	4618      	mov	r0, r3
 8007d54:	f04f 0100 	mov.w	r1, #0
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	f04f 0300 	mov.w	r3, #0
 8007d60:	008b      	lsls	r3, r1, #2
 8007d62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d66:	0082      	lsls	r2, r0, #2
 8007d68:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007d6c:	f7f8 fad8 	bl	8000320 <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4b4a      	ldr	r3, [pc, #296]	; (8007ea0 <LL_USART_SetBaudRate+0x31c>)
 8007d76:	fba3 2302 	umull	r2, r3, r3, r2
 8007d7a:	095b      	lsrs	r3, r3, #5
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	b29e      	uxth	r6, r3
 8007d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d84:	4618      	mov	r0, r3
 8007d86:	f04f 0100 	mov.w	r1, #0
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	1894      	adds	r4, r2, r2
 8007d90:	60bc      	str	r4, [r7, #8]
 8007d92:	415b      	adcs	r3, r3
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d9a:	1812      	adds	r2, r2, r0
 8007d9c:	eb41 0303 	adc.w	r3, r1, r3
 8007da0:	f04f 0400 	mov.w	r4, #0
 8007da4:	f04f 0500 	mov.w	r5, #0
 8007da8:	00dd      	lsls	r5, r3, #3
 8007daa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007dae:	00d4      	lsls	r4, r2, #3
 8007db0:	4622      	mov	r2, r4
 8007db2:	462b      	mov	r3, r5
 8007db4:	1814      	adds	r4, r2, r0
 8007db6:	643c      	str	r4, [r7, #64]	; 0x40
 8007db8:	414b      	adcs	r3, r1
 8007dba:	647b      	str	r3, [r7, #68]	; 0x44
 8007dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f04f 0100 	mov.w	r1, #0
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	008b      	lsls	r3, r1, #2
 8007dce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dd2:	0082      	lsls	r2, r0, #2
 8007dd4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007dd8:	f7f8 faa2 	bl	8000320 <__aeabi_uldivmod>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4b2f      	ldr	r3, [pc, #188]	; (8007ea0 <LL_USART_SetBaudRate+0x31c>)
 8007de2:	fba3 1302 	umull	r1, r3, r3, r2
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	2164      	movs	r1, #100	; 0x64
 8007dea:	fb01 f303 	mul.w	r3, r1, r3
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	3332      	adds	r3, #50	; 0x32
 8007df4:	4a2a      	ldr	r2, [pc, #168]	; (8007ea0 <LL_USART_SetBaudRate+0x31c>)
 8007df6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4433      	add	r3, r6
 8007e06:	b29e      	uxth	r6, r3
 8007e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f04f 0100 	mov.w	r1, #0
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	1894      	adds	r4, r2, r2
 8007e16:	603c      	str	r4, [r7, #0]
 8007e18:	415b      	adcs	r3, r3
 8007e1a:	607b      	str	r3, [r7, #4]
 8007e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e20:	1812      	adds	r2, r2, r0
 8007e22:	eb41 0303 	adc.w	r3, r1, r3
 8007e26:	f04f 0400 	mov.w	r4, #0
 8007e2a:	f04f 0500 	mov.w	r5, #0
 8007e2e:	00dd      	lsls	r5, r3, #3
 8007e30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e34:	00d4      	lsls	r4, r2, #3
 8007e36:	4622      	mov	r2, r4
 8007e38:	462b      	mov	r3, r5
 8007e3a:	1814      	adds	r4, r2, r0
 8007e3c:	63bc      	str	r4, [r7, #56]	; 0x38
 8007e3e:	414b      	adcs	r3, r1
 8007e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e44:	4618      	mov	r0, r3
 8007e46:	f04f 0100 	mov.w	r1, #0
 8007e4a:	f04f 0200 	mov.w	r2, #0
 8007e4e:	f04f 0300 	mov.w	r3, #0
 8007e52:	008b      	lsls	r3, r1, #2
 8007e54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e58:	0082      	lsls	r2, r0, #2
 8007e5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007e5e:	f7f8 fa5f 	bl	8000320 <__aeabi_uldivmod>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4b0e      	ldr	r3, [pc, #56]	; (8007ea0 <LL_USART_SetBaudRate+0x31c>)
 8007e68:	fba3 1302 	umull	r1, r3, r3, r2
 8007e6c:	095b      	lsrs	r3, r3, #5
 8007e6e:	2164      	movs	r1, #100	; 0x64
 8007e70:	fb01 f303 	mul.w	r3, r1, r3
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	011b      	lsls	r3, r3, #4
 8007e78:	3332      	adds	r3, #50	; 0x32
 8007e7a:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <LL_USART_SetBaudRate+0x31c>)
 8007e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e80:	095b      	lsrs	r3, r3, #5
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	4433      	add	r3, r6
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e92:	609a      	str	r2, [r3, #8]
}
 8007e94:	bf00      	nop
 8007e96:	377c      	adds	r7, #124	; 0x7c
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9e:	bf00      	nop
 8007ea0:	51eb851f 	.word	0x51eb851f

08007ea4 <LL_USART_ConfigAsyncMode>:
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	615a      	str	r2, [r3, #20]
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee0:	2b40      	cmp	r3, #64	; 0x40
 8007ee2:	bf0c      	ite	eq
 8007ee4:	2301      	moveq	r3, #1
 8007ee6:	2300      	movne	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f06:	2b80      	cmp	r3, #128	; 0x80
 8007f08:	bf0c      	ite	eq
 8007f0a:	2301      	moveq	r3, #1
 8007f0c:	2300      	movne	r3, #0
 8007f0e:	b2db      	uxtb	r3, r3
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b089      	sub	sp, #36	; 0x24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3314      	adds	r3, #20
 8007f28:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f38:	61fb      	str	r3, [r7, #28]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3314      	adds	r3, #20
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	61ba      	str	r2, [r7, #24]
 8007f42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	6979      	ldr	r1, [r7, #20]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e7      	bne.n	8007f24 <LL_USART_EnableDMAReq_RX+0x8>
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	3724      	adds	r7, #36	; 0x24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007f6e:	78fa      	ldrb	r2, [r7, #3]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	605a      	str	r2, [r3, #4]
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <LL_GPIO_ReadInputPort>:
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <LL_GPIO_SetOutputPin>:
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	619a      	str	r2, [r3, #24]
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	041a      	lsls	r2, r3, #16
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	619a      	str	r2, [r3, #24]
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
	...

08007fd4 <sim7600_powerON>:
int sim7600DisconnectTime = 0;

bool bSim7600IsRunning = false;

void sim7600_powerON()
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
  LOG_WRITE("powerOn\n");  
  Sim_PWR(0);
 8007fda:	2101      	movs	r1, #1
 8007fdc:	4821      	ldr	r0, [pc, #132]	; (8008064 <sim7600_powerON+0x90>)
 8007fde:	f7ff ffe9 	bl	8007fb4 <LL_GPIO_ResetOutputPin>
  osDelay(500);
 8007fe2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007fe6:	f003 f9f8 	bl	800b3da <osDelay>
  Sim_PWR(1);
 8007fea:	2101      	movs	r1, #1
 8007fec:	481d      	ldr	r0, [pc, #116]	; (8008064 <sim7600_powerON+0x90>)
 8007fee:	f7ff ffd3 	bl	8007f98 <LL_GPIO_SetOutputPin>
  osDelay(500);
 8007ff2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ff6:	f003 f9f0 	bl	800b3da <osDelay>
  Sim_PWR(0);
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	4819      	ldr	r0, [pc, #100]	; (8008064 <sim7600_powerON+0x90>)
 8007ffe:	f7ff ffd9 	bl	8007fb4 <LL_GPIO_ResetOutputPin>
  osDelay(1000); //margin
 8008002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008006:	f003 f9e8 	bl	800b3da <osDelay>

  //wait until sim_status == 1;, time-out 60s
  int try = 6000;
 800800a:	f241 7370 	movw	r3, #6000	; 0x1770
 800800e:	607b      	str	r3, [r7, #4]
  int count = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	603b      	str	r3, [r7, #0]
  while (try--)
 8008014:	e013      	b.n	800803e <sim7600_powerON+0x6a>
  {
    if (Sim_STT > 0)
 8008016:	4813      	ldr	r0, [pc, #76]	; (8008064 <sim7600_powerON+0x90>)
 8008018:	f7ff ffb2 	bl	8007f80 <LL_GPIO_ReadInputPort>
 800801c:	4603      	mov	r3, r0
 800801e:	f003 0304 	and.w	r3, r3, #4
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <sim7600_powerON+0x5a>
      count++;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	3301      	adds	r3, #1
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	e001      	b.n	8008032 <sim7600_powerON+0x5e>
    else
      count = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	603b      	str	r3, [r7, #0]
    if(count > 10)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b0a      	cmp	r3, #10
 8008036:	dc08      	bgt.n	800804a <sim7600_powerON+0x76>
      break;
    osDelay(10);
 8008038:	200a      	movs	r0, #10
 800803a:	f003 f9ce 	bl	800b3da <osDelay>
  while (try--)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	1e5a      	subs	r2, r3, #1
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e6      	bne.n	8008016 <sim7600_powerON+0x42>
 8008048:	e000      	b.n	800804c <sim7600_powerON+0x78>
      break;
 800804a:	bf00      	nop
  }
  osDelay(20000); //max time
 800804c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8008050:	f003 f9c3 	bl	800b3da <osDelay>

  bSim7600IsRunning = true;
 8008054:	4b04      	ldr	r3, [pc, #16]	; (8008068 <sim7600_powerON+0x94>)
 8008056:	2201      	movs	r2, #1
 8008058:	701a      	strb	r2, [r3, #0]
}
 800805a:	bf00      	nop
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	40021000 	.word	0x40021000
 8008068:	200007dc 	.word	0x200007dc

0800806c <sim7600_powerOFF>:

void sim7600_powerOFF()
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
  bSim7600IsRunning = false;
 8008072:	4b22      	ldr	r3, [pc, #136]	; (80080fc <sim7600_powerOFF+0x90>)
 8008074:	2200      	movs	r2, #0
 8008076:	701a      	strb	r2, [r3, #0]

  LOG_WRITE("powerOff\n");  
  Sim_PWR(0);
 8008078:	2101      	movs	r1, #1
 800807a:	4821      	ldr	r0, [pc, #132]	; (8008100 <sim7600_powerOFF+0x94>)
 800807c:	f7ff ff9a 	bl	8007fb4 <LL_GPIO_ResetOutputPin>
  osDelay(500);
 8008080:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008084:	f003 f9a9 	bl	800b3da <osDelay>
  Sim_PWR(1);
 8008088:	2101      	movs	r1, #1
 800808a:	481d      	ldr	r0, [pc, #116]	; (8008100 <sim7600_powerOFF+0x94>)
 800808c:	f7ff ff84 	bl	8007f98 <LL_GPIO_SetOutputPin>
  osDelay(4000);
 8008090:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8008094:	f003 f9a1 	bl	800b3da <osDelay>
  Sim_PWR(0);
 8008098:	2101      	movs	r1, #1
 800809a:	4819      	ldr	r0, [pc, #100]	; (8008100 <sim7600_powerOFF+0x94>)
 800809c:	f7ff ff8a 	bl	8007fb4 <LL_GPIO_ResetOutputPin>
  osDelay(1000); //margin
 80080a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080a4:	f003 f999 	bl	800b3da <osDelay>

  //wait until sim_status == 0;, time-out 60s
  int try = 6000;
 80080a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80080ac:	607b      	str	r3, [r7, #4]
  int count = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	603b      	str	r3, [r7, #0]
  while (try--)
 80080b2:	e013      	b.n	80080dc <sim7600_powerOFF+0x70>
  {
    if (Sim_STT == 0)
 80080b4:	4812      	ldr	r0, [pc, #72]	; (8008100 <sim7600_powerOFF+0x94>)
 80080b6:	f7ff ff63 	bl	8007f80 <LL_GPIO_ReadInputPort>
 80080ba:	4603      	mov	r3, r0
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d103      	bne.n	80080cc <sim7600_powerOFF+0x60>
      count++;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	3301      	adds	r3, #1
 80080c8:	603b      	str	r3, [r7, #0]
 80080ca:	e001      	b.n	80080d0 <sim7600_powerOFF+0x64>
    else
      count = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	603b      	str	r3, [r7, #0]
    if(count > 10) //remove noise
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b0a      	cmp	r3, #10
 80080d4:	dc08      	bgt.n	80080e8 <sim7600_powerOFF+0x7c>
      break;
    osDelay(10);
 80080d6:	200a      	movs	r0, #10
 80080d8:	f003 f97f 	bl	800b3da <osDelay>
  while (try--)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	1e5a      	subs	r2, r3, #1
 80080e0:	607a      	str	r2, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e6      	bne.n	80080b4 <sim7600_powerOFF+0x48>
 80080e6:	e000      	b.n	80080ea <sim7600_powerOFF+0x7e>
      break;
 80080e8:	bf00      	nop
  }
  osDelay(30000); //max time
 80080ea:	f247 5030 	movw	r0, #30000	; 0x7530
 80080ee:	f003 f974 	bl	800b3da <osDelay>
}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	200007dc 	.word	0x200007dc
 8008100:	40021000 	.word	0x40021000

08008104 <sim7600_reset>:

void sim7600_reset()
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0

  LOG_WRITE("reset\n");  

  Sim_RST(0);
 8008108:	2102      	movs	r1, #2
 800810a:	480c      	ldr	r0, [pc, #48]	; (800813c <sim7600_reset+0x38>)
 800810c:	f7ff ff52 	bl	8007fb4 <LL_GPIO_ResetOutputPin>
  osDelay(500);
 8008110:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008114:	f003 f961 	bl	800b3da <osDelay>
  Sim_RST(1);
 8008118:	2102      	movs	r1, #2
 800811a:	4808      	ldr	r0, [pc, #32]	; (800813c <sim7600_reset+0x38>)
 800811c:	f7ff ff3c 	bl	8007f98 <LL_GPIO_SetOutputPin>
  osDelay(400);
 8008120:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008124:	f003 f959 	bl	800b3da <osDelay>
  Sim_RST(0);
 8008128:	2102      	movs	r1, #2
 800812a:	4804      	ldr	r0, [pc, #16]	; (800813c <sim7600_reset+0x38>)
 800812c:	f7ff ff42 	bl	8007fb4 <LL_GPIO_ResetOutputPin>
  osDelay(30000);
 8008130:	f247 5030 	movw	r0, #30000	; 0x7530
 8008134:	f003 f951 	bl	800b3da <osDelay>
}
 8008138:	bf00      	nop
 800813a:	bd80      	pop	{r7, pc}
 800813c:	40021000 	.word	0x40021000

08008140 <sim7600_gpio_init>:

void sim7600_gpio_init()
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
  LOG_WRITE("gpioInit\n");  

  //gpio init
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008146:	463b      	mov	r3, r7
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	605a      	str	r2, [r3, #4]
 800814e:	609a      	str	r2, [r3, #8]
 8008150:	60da      	str	r2, [r3, #12]
 8008152:	611a      	str	r2, [r3, #16]
 8008154:	615a      	str	r2, [r3, #20]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8008156:	2010      	movs	r0, #16
 8008158:	f7ff fcb0 	bl	8007abc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800815c:	2001      	movs	r0, #1
 800815e:	f7ff fcad 	bl	8007abc <LL_AHB1_GRP1_EnableClock>

  //set default state at begin (high or low depend on hardware / circuit)
  LL_GPIO_ResetOutputPin(pwrSIM_GPIO_Port, pwrSIM_Pin | rstSIM_Pin);
 8008162:	2103      	movs	r1, #3
 8008164:	481a      	ldr	r0, [pc, #104]	; (80081d0 <sim7600_gpio_init+0x90>)
 8008166:	f7ff ff25 	bl	8007fb4 <LL_GPIO_ResetOutputPin>

  GPIO_InitStruct.Pin = pwrSIM_Pin | rstSIM_Pin;
 800816a:	2303      	movs	r3, #3
 800816c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800816e:	2301      	movs	r3, #1
 8008170:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008172:	2300      	movs	r3, #0
 8008174:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800817a:	2301      	movs	r3, #1
 800817c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(pwrSIM_GPIO_Port, &GPIO_InitStruct);
 800817e:	463b      	mov	r3, r7
 8008180:	4619      	mov	r1, r3
 8008182:	4813      	ldr	r0, [pc, #76]	; (80081d0 <sim7600_gpio_init+0x90>)
 8008184:	f7fc fd0d 	bl	8004ba2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = sttSIM_Pin; //status pin
 8008188:	2304      	movs	r3, #4
 800818a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800818c:	2300      	movs	r3, #0
 800818e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN; //need pull down to read exactly value from (sim_status -> TXS0108EPWR)
 8008190:	2302      	movs	r3, #2
 8008192:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(sttSIM_GPIO_Port, &GPIO_InitStruct);
 8008194:	463b      	mov	r3, r7
 8008196:	4619      	mov	r1, r3
 8008198:	480d      	ldr	r0, [pc, #52]	; (80081d0 <sim7600_gpio_init+0x90>)
 800819a:	f7fc fd02 	bl	8004ba2 <LL_GPIO_Init>

  LL_GPIO_ResetOutputPin(CTS_SIM_GPIO_Port, CTS_SIM_Pin);
 800819e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081a2:	480c      	ldr	r0, [pc, #48]	; (80081d4 <sim7600_gpio_init+0x94>)
 80081a4:	f7ff ff06 	bl	8007fb4 <LL_GPIO_ResetOutputPin>
  GPIO_InitStruct.Pin = CTS_SIM_Pin;
 80081a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081ac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80081ae:	2301      	movs	r3, #1
 80081b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80081b2:	2303      	movs	r3, #3
 80081b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80081ba:	2302      	movs	r3, #2
 80081bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CTS_SIM_GPIO_Port, &GPIO_InitStruct);
 80081be:	463b      	mov	r3, r7
 80081c0:	4619      	mov	r1, r3
 80081c2:	4804      	ldr	r0, [pc, #16]	; (80081d4 <sim7600_gpio_init+0x94>)
 80081c4:	f7fc fced 	bl	8004ba2 <LL_GPIO_Init>
}
 80081c8:	bf00      	nop
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	40021000 	.word	0x40021000
 80081d4:	40020000 	.word	0x40020000

080081d8 <sim7600_init>:

//initialize UART, DMA, GPIO for stm32-sim7600 to connect Internet + gps (full) or just use jps (mini)
void sim7600_init(bool isMini)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b090      	sub	sp, #64	; 0x40
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	71fb      	strb	r3, [r7, #7]
  LOG_WRITE("simInit\n");
  sim_dma_buff_size = 15000;
 80081e2:	4b62      	ldr	r3, [pc, #392]	; (800836c <sim7600_init+0x194>)
 80081e4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80081e8:	601a      	str	r2, [r3, #0]
  //   sim_dma_buff_size = SIM_BUFF_SIZE_FULL;
  //   sim_dma_buff = (uint8_t *)malloc(SIM_BUFF_SIZE_FULL); //circle buffer
  //   sim_buff = (uint8_t *)malloc(SIM_BUFF_SIZE_FULL + 1); //real data received (+1 bytes for '\0' end of string)
  // }

  sim7600_gpio_init();
 80081ea:	f7ff ffa9 	bl	8008140 <sim7600_gpio_init>

  LL_USART_Disable(USART1);
 80081ee:	4860      	ldr	r0, [pc, #384]	; (8008370 <sim7600_init+0x198>)
 80081f0:	f7ff fca4 	bl	8007b3c <LL_USART_Disable>
  while (LL_USART_IsEnabled(USART1)); //waite until En bit == 0
 80081f4:	bf00      	nop
 80081f6:	485e      	ldr	r0, [pc, #376]	; (8008370 <sim7600_init+0x198>)
 80081f8:	f7ff fcb0 	bl	8007b5c <LL_USART_IsEnabled>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f9      	bne.n	80081f6 <sim7600_init+0x1e>
  
  //disable DMA
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 8008202:	2102      	movs	r1, #2
 8008204:	485b      	ldr	r0, [pc, #364]	; (8008374 <sim7600_init+0x19c>)
 8008206:	f7ff fa73 	bl	80076f0 <LL_DMA_DisableStream>
  while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 800820a:	bf00      	nop
 800820c:	2102      	movs	r1, #2
 800820e:	4859      	ldr	r0, [pc, #356]	; (8008374 <sim7600_init+0x19c>)
 8008210:	f7ff fa8e 	bl	8007730 <LL_DMA_IsEnabledStream>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1f8      	bne.n	800820c <sim7600_init+0x34>
    ; //wait until En bit == 0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800821a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	605a      	str	r2, [r3, #4]
 8008224:	609a      	str	r2, [r3, #8]
 8008226:	60da      	str	r2, [r3, #12]
 8008228:	611a      	str	r2, [r3, #16]
 800822a:	615a      	str	r2, [r3, #20]
  //uart1 + DMA2 stream 2, channel 2 init
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800822c:	f107 030c 	add.w	r3, r7, #12
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	605a      	str	r2, [r3, #4]
 8008236:	609a      	str	r2, [r3, #8]
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	611a      	str	r2, [r3, #16]
 800823c:	615a      	str	r2, [r3, #20]
 800823e:	619a      	str	r2, [r3, #24]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8008240:	2010      	movs	r0, #16
 8008242:	f7ff fc53 	bl	8007aec <LL_APB2_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008246:	2001      	movs	r0, #1
 8008248:	f7ff fc38 	bl	8007abc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800824c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8008250:	f7ff fc34 	bl	8007abc <LL_AHB1_GRP1_EnableClock>
       * PA10   ------> USART1_RX
       * PA11   ------> USART1_CTS
       * PA12   ------> USART1_RTS
       */
  // GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10 |LL_GPIO_PIN_11|LL_GPIO_PIN_12;
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10 |LL_GPIO_PIN_11; //debug
 8008254:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800825a:	2302      	movs	r3, #2
 800825c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800825e:	2303      	movs	r3, #3
 8008260:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008262:	2300      	movs	r3, #0
 8008264:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008266:	2300      	movs	r3, #0
 8008268:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7; // AF_7 ~ USART1..3 see at datasheet (Figure.. Selecting an alternate function...)
 800826a:	2307      	movs	r3, #7
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800826e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008272:	4619      	mov	r1, r3
 8008274:	4840      	ldr	r0, [pc, #256]	; (8008378 <sim7600_init+0x1a0>)
 8008276:	f7fc fc94 	bl	8004ba2 <LL_GPIO_Init>

  /* USART1 RX DMA 2 stream 2 channel 4 Init */

  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 800827a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800827e:	2102      	movs	r1, #2
 8008280:	483c      	ldr	r0, [pc, #240]	; (8008374 <sim7600_init+0x19c>)
 8008282:	f7ff fba7 	bl	80079d4 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8008286:	2200      	movs	r2, #0
 8008288:	2102      	movs	r1, #2
 800828a:	483a      	ldr	r0, [pc, #232]	; (8008374 <sim7600_init+0x19c>)
 800828c:	f7ff fa6c 	bl	8007768 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_HIGH);
 8008290:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008294:	2102      	movs	r1, #2
 8008296:	4837      	ldr	r0, [pc, #220]	; (8008374 <sim7600_init+0x19c>)
 8008298:	f7ff fb3e 	bl	8007918 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 800829c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082a0:	2102      	movs	r1, #2
 80082a2:	4834      	ldr	r0, [pc, #208]	; (8008374 <sim7600_init+0x19c>)
 80082a4:	f7ff fa84 	bl	80077b0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 80082a8:	2200      	movs	r2, #0
 80082aa:	2102      	movs	r1, #2
 80082ac:	4831      	ldr	r0, [pc, #196]	; (8008374 <sim7600_init+0x19c>)
 80082ae:	f7ff faa3 	bl	80077f8 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 80082b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082b6:	2102      	movs	r1, #2
 80082b8:	482e      	ldr	r0, [pc, #184]	; (8008374 <sim7600_init+0x19c>)
 80082ba:	f7ff fac1 	bl	8007840 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 80082be:	2200      	movs	r2, #0
 80082c0:	2102      	movs	r1, #2
 80082c2:	482c      	ldr	r0, [pc, #176]	; (8008374 <sim7600_init+0x19c>)
 80082c4:	f7ff fae0 	bl	8007888 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 80082c8:	2200      	movs	r2, #0
 80082ca:	2102      	movs	r1, #2
 80082cc:	4829      	ldr	r0, [pc, #164]	; (8008374 <sim7600_init+0x19c>)
 80082ce:	f7ff faff 	bl	80078d0 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 80082d2:	2102      	movs	r1, #2
 80082d4:	4827      	ldr	r0, [pc, #156]	; (8008374 <sim7600_init+0x19c>)
 80082d6:	f7ff fba1 	bl	8007a1c <LL_DMA_DisableFifoMode>
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 80082da:	4a28      	ldr	r2, [pc, #160]	; (800837c <sim7600_init+0x1a4>)
 80082dc:	2102      	movs	r1, #2
 80082de:	4825      	ldr	r0, [pc, #148]	; (8008374 <sim7600_init+0x19c>)
 80082e0:	f7ff fbd4 	bl	8007a8c <LL_DMA_SetPeriphAddress>

  //set uart rx buffer receive
  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)sim_dma_buff);
 80082e4:	4b26      	ldr	r3, [pc, #152]	; (8008380 <sim7600_init+0x1a8>)
 80082e6:	461a      	mov	r2, r3
 80082e8:	2102      	movs	r1, #2
 80082ea:	4822      	ldr	r0, [pc, #136]	; (8008374 <sim7600_init+0x19c>)
 80082ec:	f7ff fbb6 	bl	8007a5c <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, sim_dma_buff_size);
 80082f0:	4b1e      	ldr	r3, [pc, #120]	; (800836c <sim7600_init+0x194>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	461a      	mov	r2, r3
 80082f6:	2102      	movs	r1, #2
 80082f8:	481e      	ldr	r0, [pc, #120]	; (8008374 <sim7600_init+0x19c>)
 80082fa:	f7ff fb31 	bl	8007960 <LL_DMA_SetDataLength>

  /* USART configuration */
  USART_InitStruct.BaudRate = SIM7600_BAUDRATE_DEFAULT;
 80082fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008302:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008304:	2300      	movs	r3, #0
 8008306:	613b      	str	r3, [r7, #16]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008308:	2300      	movs	r3, #0
 800830a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800830c:	2300      	movs	r3, #0
 800830e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008310:	230c      	movs	r3, #12
 8008312:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_CTS;
 8008314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008318:	623b      	str	r3, [r7, #32]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800831a:	2300      	movs	r3, #0
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
  LL_USART_Init(USART1, &USART_InitStruct);
 800831e:	f107 030c 	add.w	r3, r7, #12
 8008322:	4619      	mov	r1, r3
 8008324:	4812      	ldr	r0, [pc, #72]	; (8008370 <sim7600_init+0x198>)
 8008326:	f7fc ffb3 	bl	8005290 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800832a:	4811      	ldr	r0, [pc, #68]	; (8008370 <sim7600_init+0x198>)
 800832c:	f7ff fdba 	bl	8007ea4 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART1);
 8008330:	480f      	ldr	r0, [pc, #60]	; (8008370 <sim7600_init+0x198>)
 8008332:	f7ff fdf3 	bl	8007f1c <LL_USART_EnableDMAReq_RX>

  /* Enable USART and DMA */
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8008336:	2102      	movs	r1, #2
 8008338:	480e      	ldr	r0, [pc, #56]	; (8008374 <sim7600_init+0x19c>)
 800833a:	f7ff f9b9 	bl	80076b0 <LL_DMA_EnableStream>
  LL_USART_Enable(USART1);
 800833e:	480c      	ldr	r0, [pc, #48]	; (8008370 <sim7600_init+0x198>)
 8008340:	f7ff fbec 	bl	8007b1c <LL_USART_Enable>

  //wait until USART DMA is ready
  while (!LL_USART_IsEnabled(USART1) || !LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 8008344:	bf00      	nop
 8008346:	480a      	ldr	r0, [pc, #40]	; (8008370 <sim7600_init+0x198>)
 8008348:	f7ff fc08 	bl	8007b5c <LL_USART_IsEnabled>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0f9      	beq.n	8008346 <sim7600_init+0x16e>
 8008352:	2102      	movs	r1, #2
 8008354:	4807      	ldr	r0, [pc, #28]	; (8008374 <sim7600_init+0x19c>)
 8008356:	f7ff f9eb 	bl	8007730 <LL_DMA_IsEnabledStream>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0f2      	beq.n	8008346 <sim7600_init+0x16e>

  //power off to debug (don't need to plug out sim7600)
//  sim7600_powerOFF();

  //power on sim7600
  sim7600_powerON();
 8008360:	f7ff fe38 	bl	8007fd4 <sim7600_powerON>
}
 8008364:	bf00      	nop
 8008366:	3740      	adds	r7, #64	; 0x40
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20006574 	.word	0x20006574
 8008370:	40011000 	.word	0x40011000
 8008374:	40026400 	.word	0x40026400
 8008378:	40020000 	.word	0x40020000
 800837c:	40011004 	.word	0x40011004
 8008380:	2000a020 	.word	0x2000a020

08008384 <sim7600_update_response>:

void sim7600_update_response(const char *_res1, const char *_res2)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  LOG_WRITE("UpdateRes\n");
  if (_res1 != NULL && strlen(_res1) > 0)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d007      	beq.n	80083a4 <sim7600_update_response+0x20>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <sim7600_update_response+0x20>
    res1 = _res1;
 800839c:	4a0d      	ldr	r2, [pc, #52]	; (80083d4 <sim7600_update_response+0x50>)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	e002      	b.n	80083aa <sim7600_update_response+0x26>
  else
    res1 = NULL;
 80083a4:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <sim7600_update_response+0x50>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	601a      	str	r2, [r3, #0]

  if (_res2 != NULL && strlen(_res2) > 0)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d007      	beq.n	80083c0 <sim7600_update_response+0x3c>
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <sim7600_update_response+0x3c>
    res2 = _res2;
 80083b8:	4a07      	ldr	r2, [pc, #28]	; (80083d8 <sim7600_update_response+0x54>)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	e003      	b.n	80083c8 <sim7600_update_response+0x44>
  else
    res2 = NULL;
 80083c0:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <sim7600_update_response+0x54>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
}
 80083c6:	bf00      	nop
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	2000657c 	.word	0x2000657c
 80083d8:	20006570 	.word	0x20006570

080083dc <sim7600_usart_send_string>:

void sim7600_usart_send_string(const char *str)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  LOG_WRITE("sendStr\n");
  if(str != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00b      	beq.n	8008402 <sim7600_usart_send_string+0x26>
  {
    int tmpLen = strlen(str);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7f7 fef0 	bl	80001d0 <strlen>
 80083f0:	4603      	mov	r3, r0
 80083f2:	60fb      	str	r3, [r7, #12]
    if(tmpLen > 0)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	dd03      	ble.n	8008402 <sim7600_usart_send_string+0x26>
      sim7600_usart_send_byte(str, tmpLen);
 80083fa:	68f9      	ldr	r1, [r7, #12]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f805 	bl	800840c <sim7600_usart_send_byte>
  }
}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <sim7600_usart_send_byte>:
// __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
// {
//   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
// }
void sim7600_usart_send_byte(const void *data, int len)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  LOG_WRITE("sendBytes\n");
  const uint8_t *d = (uint8_t*)data;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	60fb      	str	r3, [r7, #12]

  for (; len > 0; --len, ++d)
 800841a:	e012      	b.n	8008442 <sim7600_usart_send_byte+0x36>
  {
    LL_USART_TransmitData8(USART1, *d);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	4619      	mov	r1, r3
 8008422:	480f      	ldr	r0, [pc, #60]	; (8008460 <sim7600_usart_send_byte+0x54>)
 8008424:	f7ff fd9d 	bl	8007f62 <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TXE(USART1))
 8008428:	bf00      	nop
 800842a:	480d      	ldr	r0, [pc, #52]	; (8008460 <sim7600_usart_send_byte+0x54>)
 800842c:	f7ff fd63 	bl	8007ef6 <LL_USART_IsActiveFlag_TXE>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0f9      	beq.n	800842a <sim7600_usart_send_byte+0x1e>
  for (; len > 0; --len, ++d)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	3b01      	subs	r3, #1
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3301      	adds	r3, #1
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	dce9      	bgt.n	800841c <sim7600_usart_send_byte+0x10>
      ;
  }
  while (!LL_USART_IsActiveFlag_TC(USART1))
 8008448:	bf00      	nop
 800844a:	4805      	ldr	r0, [pc, #20]	; (8008460 <sim7600_usart_send_byte+0x54>)
 800844c:	f7ff fd40 	bl	8007ed0 <LL_USART_IsActiveFlag_TC>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0f9      	beq.n	800844a <sim7600_usart_send_byte+0x3e>
    ;
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	40011000 	.word	0x40011000

08008464 <sim7600_send_cmd>:

//send direct AT cmd, return 0: fail, 1,2: response 1,2
int sim7600_send_cmd(const char *cmd, const char *response1, const char *response2, int timeout)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
  LOG_WRITE("sendCMD\n");
  uint32_t sendSimFlag = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]
  sim7600_update_response(response1, response2);
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	68b8      	ldr	r0, [r7, #8]
 800847a:	f7ff ff83 	bl	8008384 <sim7600_update_response>
  sim7600_usart_send_string(cmd);
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7ff ffac 	bl	80083dc <sim7600_usart_send_string>
  cmdSendStatus = 1;
 8008484:	4b12      	ldr	r3, [pc, #72]	; (80084d0 <sim7600_send_cmd+0x6c>)
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
  sendSimFlag = osEventFlagsWait(SendSimEventID, 3, osFlagsWaitAny, timeout); //500ms receive max 100 bytes with baud = 115200
 800848a:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <sim7600_send_cmd+0x70>)
 800848c:	6818      	ldr	r0, [r3, #0]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2200      	movs	r2, #0
 8008492:	2103      	movs	r1, #3
 8008494:	f003 f968 	bl	800b768 <osEventFlagsWait>
 8008498:	6178      	str	r0, [r7, #20]
  cmdSendStatus = 0;
 800849a:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <sim7600_send_cmd+0x6c>)
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]
  if(sendSimFlag == 1U || sendSimFlag == 2U)
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d002      	beq.n	80084ac <sim7600_send_cmd+0x48>
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d101      	bne.n	80084b0 <sim7600_send_cmd+0x4c>
  {
    return sendSimFlag;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	e00a      	b.n	80084c6 <sim7600_send_cmd+0x62>
  }
  else if(sendSimFlag != osFlagsErrorTimeout)
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f113 0f02 	cmn.w	r3, #2
 80084b6:	d005      	beq.n	80084c4 <sim7600_send_cmd+0x60>
  {
    LOG_WRITE("sim send cmd eror\n");
    osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 80084b8:	4b07      	ldr	r3, [pc, #28]	; (80084d8 <sim7600_send_cmd+0x74>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2104      	movs	r1, #4
 80084be:	4618      	mov	r0, r3
 80084c0:	f003 f8dc 	bl	800b67c <osEventFlagsSet>
  }
  return 0;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	200007c8 	.word	0x200007c8
 80084d4:	20005908 	.word	0x20005908
 80084d8:	20005920 	.word	0x20005920

080084dc <sim7600_AT>:

//push AT cmd to queue, return 0: fail, 1,2: response 1,2
int sim7600_AT(const char *cmd, const char *response1, const char *response2, int timeout, int try)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08e      	sub	sp, #56	; 0x38
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]
  LOG_WRITE("simAT\n");
  sendSimPack sendMsgObj;
  osStatus_t sendMsgStt;
  uint32_t sendMsgFlag = 0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34

  osEventFlagsId_t SimATEventID = osEventFlagsNew(NULL);
 80084ee:	2000      	movs	r0, #0
 80084f0:	f003 f885 	bl	800b5fe <osEventFlagsNew>
 80084f4:	6338      	str	r0, [r7, #48]	; 0x30
  if (SimATEventID == NULL)
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d107      	bne.n	800850c <sim7600_AT+0x30>
  {
    LOG_WRITE("SimATEventID eror\n");
    osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 80084fc:	4b31      	ldr	r3, [pc, #196]	; (80085c4 <sim7600_AT+0xe8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2104      	movs	r1, #4
 8008502:	4618      	mov	r0, r3
 8008504:	f003 f8ba 	bl	800b67c <osEventFlagsSet>
    return 0;
 8008508:	2300      	movs	r3, #0
 800850a:	e056      	b.n	80085ba <sim7600_AT+0xde>
  }

  //put data
  sendMsgObj.EventID = SimATEventID;
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	613b      	str	r3, [r7, #16]
  sendMsgObj.ptr = cmd;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	61bb      	str	r3, [r7, #24]
  sendMsgObj.res1 = response1;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	623b      	str	r3, [r7, #32]
  sendMsgObj.res2 = response2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
  sendMsgObj.timeout = timeout;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28
  sendMsgObj.type = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	753b      	strb	r3, [r7, #20]
  while (try-- > 0)
 8008524:	e040      	b.n	80085a8 <sim7600_AT+0xcc>
  {
    sendMsgStt = osMessageQueuePut(SendSimQueueID, &sendMsgObj, 0U, 0U);
 8008526:	4b28      	ldr	r3, [pc, #160]	; (80085c8 <sim7600_AT+0xec>)
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	f107 0110 	add.w	r1, r7, #16
 800852e:	2300      	movs	r3, #0
 8008530:	2200      	movs	r2, #0
 8008532:	f003 fc65 	bl	800be00 <osMessageQueuePut>
 8008536:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (sendMsgStt == osOK)
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	2b00      	cmp	r3, #0
 800853c:	d11d      	bne.n	800857a <sim7600_AT+0x9e>
    {
      sendMsgFlag = osEventFlagsWait(SimATEventID, 3, osFlagsWaitAny, timeout + 100); //+100 margin
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	3364      	adds	r3, #100	; 0x64
 8008542:	2200      	movs	r2, #0
 8008544:	2103      	movs	r1, #3
 8008546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008548:	f003 f90e 	bl	800b768 <osEventFlagsWait>
 800854c:	6378      	str	r0, [r7, #52]	; 0x34
      if (sendMsgFlag == 1 || sendMsgFlag == 2) 
 800854e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008550:	2b01      	cmp	r3, #1
 8008552:	d002      	beq.n	800855a <sim7600_AT+0x7e>
 8008554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008556:	2b02      	cmp	r3, #2
 8008558:	d104      	bne.n	8008564 <sim7600_AT+0x88>
      {
        osEventFlagsDelete(SimATEventID);
 800855a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800855c:	f003 f96a 	bl	800b834 <osEventFlagsDelete>
        return sendMsgFlag;
 8008560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008562:	e02a      	b.n	80085ba <sim7600_AT+0xde>
      }
      else if(sendMsgFlag != osFlagsErrorTimeout) //flag error
 8008564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008566:	f113 0f02 	cmn.w	r3, #2
 800856a:	d01d      	beq.n	80085a8 <sim7600_AT+0xcc>
      {
        LOG_WRITE("SendSimQueueID eror1\n");
        osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 800856c:	4b15      	ldr	r3, [pc, #84]	; (80085c4 <sim7600_AT+0xe8>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2104      	movs	r1, #4
 8008572:	4618      	mov	r0, r3
 8008574:	f003 f882 	bl	800b67c <osEventFlagsSet>
        break;
 8008578:	e01b      	b.n	80085b2 <sim7600_AT+0xd6>
      }
    }
    else if(sendMsgStt == osErrorTimeout || sendMsgStt == osErrorResource)
 800857a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857c:	f113 0f02 	cmn.w	r3, #2
 8008580:	d003      	beq.n	800858a <sim7600_AT+0xae>
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	f113 0f03 	cmn.w	r3, #3
 8008588:	d107      	bne.n	800859a <sim7600_AT+0xbe>
    {
      if(try > 0)
 800858a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800858c:	2b00      	cmp	r3, #0
 800858e:	dd0b      	ble.n	80085a8 <sim7600_AT+0xcc>
        osDelay(timeout);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f002 ff21 	bl	800b3da <osDelay>
      if(try > 0)
 8008598:	e006      	b.n	80085a8 <sim7600_AT+0xcc>
    }
    else //msg queue error
    {
      LOG_WRITE("SendSimQueueID error2\n");
      osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 800859a:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <sim7600_AT+0xe8>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2104      	movs	r1, #4
 80085a0:	4618      	mov	r0, r3
 80085a2:	f003 f86b 	bl	800b67c <osEventFlagsSet>
      break;
 80085a6:	e004      	b.n	80085b2 <sim7600_AT+0xd6>
  while (try-- > 0)
 80085a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085aa:	1e5a      	subs	r2, r3, #1
 80085ac:	643a      	str	r2, [r7, #64]	; 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dcb9      	bgt.n	8008526 <sim7600_AT+0x4a>
    }
  }
  osEventFlagsDelete(SimATEventID);
 80085b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085b4:	f003 f93e 	bl	800b834 <osEventFlagsDelete>
  return 0; //fail
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3738      	adds	r7, #56	; 0x38
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20005920 	.word	0x20005920
 80085c8:	2000592c 	.word	0x2000592c

080085cc <sim7600_AT_notify_error>:

//send AT and set simError flag if error, return false if send error
int sim7600_AT_notify_error(const char *cmd, const char *response1, const char *response2, int timeout, int try)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
  LOG_WRITE("simATnotify\n");
  int tmpFlag = sim7600_AT(cmd, response1, response2, timeout, try);
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f7ff ff79 	bl	80084dc <sim7600_AT>
 80085ea:	6178      	str	r0, [r7, #20]
  if (tmpFlag == 0) //error
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d105      	bne.n	80085fe <sim7600_AT_notify_error+0x32>
  {
    //set bit simError in ConfigSimEventID to restart and re config
    LOG_WRITE("sim7600_AT_notify error\n");
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 80085f2:	4b05      	ldr	r3, [pc, #20]	; (8008608 <sim7600_AT_notify_error+0x3c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2104      	movs	r1, #4
 80085f8:	4618      	mov	r0, r3
 80085fa:	f003 f83f 	bl	800b67c <osEventFlagsSet>
  }
  return tmpFlag;
 80085fe:	697b      	ldr	r3, [r7, #20]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	20005920 	.word	0x20005920

0800860c <sim7600_send_packet_ip>:
//debug
uint32_t waitTimecmdSendStatus2;

//send packet, type:1 - TCP , type:2 - UDP; return true: send successful, false: fail
bool sim7600_send_packet_ip(int type, const uint8_t *data, int data_length)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08a      	sub	sp, #40	; 0x28
 8008610:	af02      	add	r7, sp, #8
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  LOG_WRITE("sendIP %d\n", type);
  //can send udp when sim7600ConnectStatus  == 2 and tcp when sim7600ConnectStatus >= 1;
  char *sim7600_cmd_buff; //default null
  if (type == 2 && sim7600ConnectStatus == 2)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b02      	cmp	r3, #2
 800861c:	d11f      	bne.n	800865e <sim7600_send_packet_ip+0x52>
 800861e:	4b52      	ldr	r3, [pc, #328]	; (8008768 <sim7600_send_packet_ip+0x15c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d11b      	bne.n	800865e <sim7600_send_packet_ip+0x52>
  { 
    // udp
    if (serverDomain != NULL)
    {
      int tmpLen = strlen(serverDomain);
 8008626:	4851      	ldr	r0, [pc, #324]	; (800876c <sim7600_send_packet_ip+0x160>)
 8008628:	f7f7 fdd2 	bl	80001d0 <strlen>
 800862c:	4603      	mov	r3, r0
 800862e:	617b      	str	r3, [r7, #20]
      if (tmpLen > 0)
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2b00      	cmp	r3, #0
 8008634:	dd2a      	ble.n	800868c <sim7600_send_packet_ip+0x80>
      {
        sim7600_cmd_buff = (char *)malloc(tmpLen + 35);
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	3323      	adds	r3, #35	; 0x23
 800863a:	4618      	mov	r0, r3
 800863c:	f018 fabe 	bl	8020bbc <malloc>
 8008640:	4603      	mov	r3, r0
 8008642:	61fb      	str	r3, [r7, #28]
        if (sim7600_cmd_buff != NULL)
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d020      	beq.n	800868c <sim7600_send_packet_ip+0x80>
          sprintf(sim7600_cmd_buff, "AT+CIPSEND=1,%d,\"%s\",%d\r", data_length, serverDomain, serverPort);
 800864a:	4b49      	ldr	r3, [pc, #292]	; (8008770 <sim7600_send_packet_ip+0x164>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	4b46      	ldr	r3, [pc, #280]	; (800876c <sim7600_send_packet_ip+0x160>)
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	4947      	ldr	r1, [pc, #284]	; (8008774 <sim7600_send_packet_ip+0x168>)
 8008656:	69f8      	ldr	r0, [r7, #28]
 8008658:	f018 fd44 	bl	80210e4 <siprintf>
    if (serverDomain != NULL)
 800865c:	e016      	b.n	800868c <sim7600_send_packet_ip+0x80>
      }
    }
  }
  else if (type == 1 && sim7600ConnectStatus >= 1)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d111      	bne.n	8008688 <sim7600_send_packet_ip+0x7c>
 8008664:	4b40      	ldr	r3, [pc, #256]	; (8008768 <sim7600_send_packet_ip+0x15c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd0d      	ble.n	8008688 <sim7600_send_packet_ip+0x7c>
  { 
    //tcp
    sim7600_cmd_buff = (char*)malloc(25);
 800866c:	2019      	movs	r0, #25
 800866e:	f018 faa5 	bl	8020bbc <malloc>
 8008672:	4603      	mov	r3, r0
 8008674:	61fb      	str	r3, [r7, #28]
    if(sim7600_cmd_buff != NULL)
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d008      	beq.n	800868e <sim7600_send_packet_ip+0x82>
      sprintf(sim7600_cmd_buff, "AT+CIPSEND=0,%d\r", data_length);
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	493e      	ldr	r1, [pc, #248]	; (8008778 <sim7600_send_packet_ip+0x16c>)
 8008680:	69f8      	ldr	r0, [r7, #28]
 8008682:	f018 fd2f 	bl	80210e4 <siprintf>
    if(sim7600_cmd_buff != NULL)
 8008686:	e002      	b.n	800868e <sim7600_send_packet_ip+0x82>
  }
  else
  {
    return false;
 8008688:	2300      	movs	r3, #0
 800868a:	e068      	b.n	800875e <sim7600_send_packet_ip+0x152>
    if (serverDomain != NULL)
 800868c:	bf00      	nop
  }

  if (sim7600_cmd_buff == NULL) //can't allocate memory
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d107      	bne.n	80086a4 <sim7600_send_packet_ip+0x98>
  {
    LOG_WRITE("sim7600_send_packet_ip allocate error\n");
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8008694:	4b39      	ldr	r3, [pc, #228]	; (800877c <sim7600_send_packet_ip+0x170>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2104      	movs	r1, #4
 800869a:	4618      	mov	r0, r3
 800869c:	f002 ffee 	bl	800b67c <osEventFlagsSet>
    return false;
 80086a0:	2300      	movs	r3, #0
 80086a2:	e05c      	b.n	800875e <sim7600_send_packet_ip+0x152>
  }

  sim7600_usart_send_string(sim7600_cmd_buff);
 80086a4:	69f8      	ldr	r0, [r7, #28]
 80086a6:	f7ff fe99 	bl	80083dc <sim7600_usart_send_string>
  free(sim7600_cmd_buff);
 80086aa:	69f8      	ldr	r0, [r7, #28]
 80086ac:	f018 fa8e 	bl	8020bcc <free>
  // sim7600_update_response(">",""); //not necessaary, see sim7600_handle_received to know detail, at line cmdSendStatus == 2
  cmdSendStatus = 2; // -> ipSendStatus
 80086b0:	4b33      	ldr	r3, [pc, #204]	; (8008780 <sim7600_send_packet_ip+0x174>)
 80086b2:	2202      	movs	r2, #2
 80086b4:	601a      	str	r2, [r3, #0]

  //debug
  uint32_t tmpCNT = TIM2->CNT;
 80086b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	613b      	str	r3, [r7, #16]

  uint32_t sendSimFlag = osEventFlagsWait(SendSimEventID, 1U, osFlagsWaitAll, 500); //500ms receive max 100 bytes with baud = 115200
 80086be:	4b31      	ldr	r3, [pc, #196]	; (8008784 <sim7600_send_packet_ip+0x178>)
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80086c6:	2201      	movs	r2, #1
 80086c8:	2101      	movs	r1, #1
 80086ca:	f003 f84d 	bl	800b768 <osEventFlagsWait>
 80086ce:	61b8      	str	r0, [r7, #24]

  //debug
  waitTimecmdSendStatus2 = (TIM2->CNT - tmpCNT) >> 1;
 80086d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	085b      	lsrs	r3, r3, #1
 80086dc:	4a2a      	ldr	r2, [pc, #168]	; (8008788 <sim7600_send_packet_ip+0x17c>)
 80086de:	6013      	str	r3, [r2, #0]

  if (sendSimFlag == 1U)
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d113      	bne.n	800870e <sim7600_send_packet_ip+0x102>
  { //recevied >
    sim7600_update_response("+CIPSEND", "+CIPERROR");
 80086e6:	4929      	ldr	r1, [pc, #164]	; (800878c <sim7600_send_packet_ip+0x180>)
 80086e8:	4829      	ldr	r0, [pc, #164]	; (8008790 <sim7600_send_packet_ip+0x184>)
 80086ea:	f7ff fe4b 	bl	8008384 <sim7600_update_response>
    sim7600_usart_send_byte(data, data_length);
 80086ee:	6879      	ldr	r1, [r7, #4]
 80086f0:	68b8      	ldr	r0, [r7, #8]
 80086f2:	f7ff fe8b 	bl	800840c <sim7600_usart_send_byte>
    cmdSendStatus = 1; // -> ipSendStatus
 80086f6:	4b22      	ldr	r3, [pc, #136]	; (8008780 <sim7600_send_packet_ip+0x174>)
 80086f8:	2201      	movs	r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
    sendSimFlag = osEventFlagsWait(SendSimEventID, 3U, osFlagsWaitAny, 5000);
 80086fc:	4b21      	ldr	r3, [pc, #132]	; (8008784 <sim7600_send_packet_ip+0x178>)
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	f241 3388 	movw	r3, #5000	; 0x1388
 8008704:	2200      	movs	r2, #0
 8008706:	2103      	movs	r1, #3
 8008708:	f003 f82e 	bl	800b768 <osEventFlagsWait>
 800870c:	61b8      	str	r0, [r7, #24]
  }
  cmdSendStatus = 0; // reset
 800870e:	4b1c      	ldr	r3, [pc, #112]	; (8008780 <sim7600_send_packet_ip+0x174>)
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
  if(sendSimFlag == 1U) //send success full
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d104      	bne.n	8008724 <sim7600_send_packet_ip+0x118>
  {
    send_ip_error_count = 0;
 800871a:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <sim7600_send_packet_ip+0x188>)
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]
    return true;
 8008720:	2301      	movs	r3, #1
 8008722:	e01c      	b.n	800875e <sim7600_send_packet_ip+0x152>
  }
  else if(sendSimFlag == 2U)
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d112      	bne.n	8008750 <sim7600_send_packet_ip+0x144>
  {
    send_ip_error_count++;
 800872a:	4b1a      	ldr	r3, [pc, #104]	; (8008794 <sim7600_send_packet_ip+0x188>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3301      	adds	r3, #1
 8008730:	4a18      	ldr	r2, [pc, #96]	; (8008794 <sim7600_send_packet_ip+0x188>)
 8008732:	6013      	str	r3, [r2, #0]
    if(send_ip_error_count >= SEND_IP_ERROR_COUNT_MAX)
 8008734:	4b17      	ldr	r3, [pc, #92]	; (8008794 <sim7600_send_packet_ip+0x188>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b04      	cmp	r3, #4
 800873a:	dd0f      	ble.n	800875c <sim7600_send_packet_ip+0x150>
    {
      send_ip_error_count = 0;
 800873c:	4b15      	ldr	r3, [pc, #84]	; (8008794 <sim7600_send_packet_ip+0x188>)
 800873e:	2200      	movs	r2, #0
 8008740:	601a      	str	r2, [r3, #0]
      osEventFlagsSet(ConnectSimEventID, 1 << ipCloseEnum); //re-CONNECT
 8008742:	4b15      	ldr	r3, [pc, #84]	; (8008798 <sim7600_send_packet_ip+0x18c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2110      	movs	r1, #16
 8008748:	4618      	mov	r0, r3
 800874a:	f002 ff97 	bl	800b67c <osEventFlagsSet>
 800874e:	e005      	b.n	800875c <sim7600_send_packet_ip+0x150>
    }
  }
  else //don't recv response -> something wrong
  {
    LOG_WRITE("sendSimFlag error\n");
    osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart, reset
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <sim7600_send_packet_ip+0x170>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2104      	movs	r1, #4
 8008756:	4618      	mov	r0, r3
 8008758:	f002 ff90 	bl	800b67c <osEventFlagsSet>
  }
  return false;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3720      	adds	r7, #32
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200007d0 	.word	0x200007d0
 800876c:	20000244 	.word	0x20000244
 8008770:	200002a8 	.word	0x200002a8
 8008774:	08022578 	.word	0x08022578
 8008778:	08022594 	.word	0x08022594
 800877c:	20005920 	.word	0x20005920
 8008780:	200007c8 	.word	0x200007c8
 8008784:	20005908 	.word	0x20005908
 8008788:	20006578 	.word	0x20006578
 800878c:	080225a8 	.word	0x080225a8
 8008790:	080225b4 	.word	0x080225b4
 8008794:	200007cc 	.word	0x200007cc
 8008798:	20005924 	.word	0x20005924

0800879c <sim7600_IP>:

//send IP packet by put to send sim queue. type: 2-udp, 1-tcp
bool sim7600_IP(int type, uint8_t *data, int len)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08c      	sub	sp, #48	; 0x30
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
  LOG_WRITE("simIP %d\n", type);;
  if(type != 1 && type != 2)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d004      	beq.n	80087b8 <sim7600_IP+0x1c>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d001      	beq.n	80087b8 <sim7600_IP+0x1c>
  {
    return false;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e015      	b.n	80087e4 <sim7600_IP+0x48>
  }
  sendSimPack sendMsgObj;
  sendMsgObj.ptr = data;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	61bb      	str	r3, [r7, #24]
  sendMsgObj.len = len;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	61fb      	str	r3, [r7, #28]
  sendMsgObj.type = type;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	753b      	strb	r3, [r7, #20]
  osStatus_t sendMsgStt = osMessageQueuePut(SendSimQueueID, &sendMsgObj, 0U, 0U);
 80087c6:	4b09      	ldr	r3, [pc, #36]	; (80087ec <sim7600_IP+0x50>)
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	f107 0110 	add.w	r1, r7, #16
 80087ce:	2300      	movs	r3, #0
 80087d0:	2200      	movs	r2, #0
 80087d2:	f003 fb15 	bl	800be00 <osMessageQueuePut>
 80087d6:	62f8      	str	r0, [r7, #44]	; 0x2c

  return (sendMsgStt == osOK);
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bf0c      	ite	eq
 80087de:	2301      	moveq	r3, #1
 80087e0:	2300      	movne	r3, #0
 80087e2:	b2db      	uxtb	r3, r3
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3730      	adds	r7, #48	; 0x30
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	2000592c 	.word	0x2000592c

080087f0 <sim7600_fullConfig>:
  return true;
}

//full config for internet
bool sim7600_fullConfig()
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08a      	sub	sp, #40	; 0x28
 80087f4:	af02      	add	r7, sp, #8
  LOG_WRITE("fullConfig\n");
  char sim7600_cmd_buff[25];
  //change to main baudrate permantly
  // sprintf(sim7600_cmd_buff, "AT+IPR=%d\r\n", SIM7600_BAUDRATE_MAIN); //temporarily
  sprintf(sim7600_cmd_buff, "AT+IPREX=%d\r\n", SIM7600_BAUDRATE_MAIN); //permantly, prevent receive "...SMS DONE..." after reboot/power-up
 80087f6:	1d3b      	adds	r3, r7, #4
 80087f8:	4a4b      	ldr	r2, [pc, #300]	; (8008928 <sim7600_fullConfig+0x138>)
 80087fa:	494c      	ldr	r1, [pc, #304]	; (800892c <sim7600_fullConfig+0x13c>)
 80087fc:	4618      	mov	r0, r3
 80087fe:	f018 fc71 	bl	80210e4 <siprintf>
  sim7600_AT(sim7600_cmd_buff, "OK", NULL, 500, 2);              //don't check for the first config
 8008802:	1d38      	adds	r0, r7, #4
 8008804:	2302      	movs	r3, #2
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800880c:	2200      	movs	r2, #0
 800880e:	4948      	ldr	r1, [pc, #288]	; (8008930 <sim7600_fullConfig+0x140>)
 8008810:	f7ff fe64 	bl	80084dc <sim7600_AT>
  sim7600_change_baud(SIM7600_BAUDRATE_MAIN);
 8008814:	4844      	ldr	r0, [pc, #272]	; (8008928 <sim7600_fullConfig+0x138>)
 8008816:	f000 fe13 	bl	8009440 <sim7600_change_baud>
  if (!sim7600_AT(sim7600_cmd_buff, "OK", NULL, 500, 2))
 800881a:	1d38      	adds	r0, r7, #4
 800881c:	2302      	movs	r3, #2
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008824:	2200      	movs	r2, #0
 8008826:	4942      	ldr	r1, [pc, #264]	; (8008930 <sim7600_fullConfig+0x140>)
 8008828:	f7ff fe58 	bl	80084dc <sim7600_AT>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <sim7600_fullConfig+0x46>
    return false;
 8008832:	2300      	movs	r3, #0
 8008834:	e073      	b.n	800891e <sim7600_fullConfig+0x12e>
  //echo cmd off
  if (!sim7600_AT("ATE0\r\n", "OK", NULL, 500, 2))
 8008836:	2302      	movs	r3, #2
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800883e:	2200      	movs	r2, #0
 8008840:	493b      	ldr	r1, [pc, #236]	; (8008930 <sim7600_fullConfig+0x140>)
 8008842:	483c      	ldr	r0, [pc, #240]	; (8008934 <sim7600_fullConfig+0x144>)
 8008844:	f7ff fe4a 	bl	80084dc <sim7600_AT>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <sim7600_fullConfig+0x62>
    return false;
 800884e:	2300      	movs	r3, #0
 8008850:	e065      	b.n	800891e <sim7600_fullConfig+0x12e>
  restartSimstatus = 0; //reset
 8008852:	4b39      	ldr	r3, [pc, #228]	; (8008938 <sim7600_fullConfig+0x148>)
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]

  //flow control AT+IFC=2,2 (sim_RTS, sim_CTS respectively)
  if (!sim7600_AT("AT+IFC=2,2\r\n", "OK", NULL, 500, 2))
 8008858:	2302      	movs	r3, #2
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008860:	2200      	movs	r2, #0
 8008862:	4933      	ldr	r1, [pc, #204]	; (8008930 <sim7600_fullConfig+0x140>)
 8008864:	4835      	ldr	r0, [pc, #212]	; (800893c <sim7600_fullConfig+0x14c>)
 8008866:	f7ff fe39 	bl	80084dc <sim7600_AT>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <sim7600_fullConfig+0x84>
    return false;
 8008870:	2300      	movs	r3, #0
 8008872:	e054      	b.n	800891e <sim7600_fullConfig+0x12e>

  //check sim
  if (!sim7600_AT("at+ciccid\r\n", "OK", NULL, 500, 2))
 8008874:	2302      	movs	r3, #2
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800887c:	2200      	movs	r2, #0
 800887e:	492c      	ldr	r1, [pc, #176]	; (8008930 <sim7600_fullConfig+0x140>)
 8008880:	482f      	ldr	r0, [pc, #188]	; (8008940 <sim7600_fullConfig+0x150>)
 8008882:	f7ff fe2b 	bl	80084dc <sim7600_AT>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <sim7600_fullConfig+0xa0>
    return false;
 800888c:	2300      	movs	r3, #0
 800888e:	e046      	b.n	800891e <sim7600_fullConfig+0x12e>
  if (!sim7600_AT("at+csq\r\n", "OK", NULL, 500, 2))
 8008890:	2302      	movs	r3, #2
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008898:	2200      	movs	r2, #0
 800889a:	4925      	ldr	r1, [pc, #148]	; (8008930 <sim7600_fullConfig+0x140>)
 800889c:	4829      	ldr	r0, [pc, #164]	; (8008944 <sim7600_fullConfig+0x154>)
 800889e:	f7ff fe1d 	bl	80084dc <sim7600_AT>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <sim7600_fullConfig+0xbc>
    return false;
 80088a8:	2300      	movs	r3, #0
 80088aa:	e038      	b.n	800891e <sim7600_fullConfig+0x12e>

  // set timeout value for AT+NETOPEN/AT+CIPOPEN/AT+CIPSEND
  //AT+CIPTIMEOUT=10000,10000,5000 ~ 10s, 10s, 5s
  if (!sim7600_AT("AT+CIPTIMEOUT=10000,10000,5000\r\n", "OK", NULL, 500, 2))
 80088ac:	2302      	movs	r3, #2
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80088b4:	2200      	movs	r2, #0
 80088b6:	491e      	ldr	r1, [pc, #120]	; (8008930 <sim7600_fullConfig+0x140>)
 80088b8:	4823      	ldr	r0, [pc, #140]	; (8008948 <sim7600_fullConfig+0x158>)
 80088ba:	f7ff fe0f 	bl	80084dc <sim7600_AT>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <sim7600_fullConfig+0xd8>
    return false;
 80088c4:	2300      	movs	r3, #0
 80088c6:	e02a      	b.n	800891e <sim7600_fullConfig+0x12e>
  //10 times retranmission IP packet, no(0) delay to output data received
  //ack=0, 1:error result code with string values
  //1:add data header, the format is â€œ+RECEIVE,<link num>,<data length>â€�
  //< AsyncMode > = 0
  //minimum retransmission timeout value for TCP connection in ms : 500
  if (!sim7600_AT("AT+CIPCCFG=10,0,0,1,1,0,500\r\n", "OK", NULL, 500, 2))
 80088c8:	2302      	movs	r3, #2
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80088d0:	2200      	movs	r2, #0
 80088d2:	4917      	ldr	r1, [pc, #92]	; (8008930 <sim7600_fullConfig+0x140>)
 80088d4:	481d      	ldr	r0, [pc, #116]	; (800894c <sim7600_fullConfig+0x15c>)
 80088d6:	f7ff fe01 	bl	80084dc <sim7600_AT>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <sim7600_fullConfig+0xf4>
    return false;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e01c      	b.n	800891e <sim7600_fullConfig+0x12e>

  //display header when receive â€œ+RECEIVE,<link num>,<data length>â€�
  //AT+CIPHEAD=1 : \r\nOK\r\n
  if (!sim7600_AT("AT+CIPHEAD=1\r\n", "OK", NULL, 500, 2))
 80088e4:	2302      	movs	r3, #2
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80088ec:	2200      	movs	r2, #0
 80088ee:	4910      	ldr	r1, [pc, #64]	; (8008930 <sim7600_fullConfig+0x140>)
 80088f0:	4817      	ldr	r0, [pc, #92]	; (8008950 <sim7600_fullConfig+0x160>)
 80088f2:	f7ff fdf3 	bl	80084dc <sim7600_AT>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <sim7600_fullConfig+0x110>
    return false;
 80088fc:	2300      	movs	r3, #0
 80088fe:	e00e      	b.n	800891e <sim7600_fullConfig+0x12e>

  //don't display remote IP (server ip)
  //AT+CIPSRIP=0 : \r\nOK\r\n
  if (!sim7600_AT("AT+CIPSRIP=0\r\n", "OK", NULL, 500, 2))
 8008900:	2302      	movs	r3, #2
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008908:	2200      	movs	r2, #0
 800890a:	4909      	ldr	r1, [pc, #36]	; (8008930 <sim7600_fullConfig+0x140>)
 800890c:	4811      	ldr	r0, [pc, #68]	; (8008954 <sim7600_fullConfig+0x164>)
 800890e:	f7ff fde5 	bl	80084dc <sim7600_AT>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <sim7600_fullConfig+0x12c>
    return false;
 8008918:	2300      	movs	r3, #0
 800891a:	e000      	b.n	800891e <sim7600_fullConfig+0x12e>

  return true;
 800891c:	2301      	movs	r3, #1
}
 800891e:	4618      	mov	r0, r3
 8008920:	3720      	adds	r7, #32
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	002dc6c0 	.word	0x002dc6c0
 800892c:	080225c0 	.word	0x080225c0
 8008930:	080225d0 	.word	0x080225d0
 8008934:	080225d4 	.word	0x080225d4
 8008938:	200007c4 	.word	0x200007c4
 800893c:	080225dc 	.word	0x080225dc
 8008940:	080225ec 	.word	0x080225ec
 8008944:	080225f8 	.word	0x080225f8
 8008948:	08022604 	.word	0x08022604
 800894c:	08022628 	.word	0x08022628
 8008950:	08022648 	.word	0x08022648
 8008954:	08022658 	.word	0x08022658

08008958 <sim7600_fullConfigTask>:

void sim7600_fullConfigTask()
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af02      	add	r7, sp, #8
  // }


  LOG_WRITE("fullConfigTask\n");
  //first config
  sim7600_init(false);
 800895e:	2000      	movs	r0, #0
 8008960:	f7ff fc3a 	bl	80081d8 <sim7600_init>
    LOG_WRITE("sim7600_fullConfigTask error0\n");
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart sim7600 and reset stm32
  }
  else
  {
    if (sim7600_fullConfig())
 8008964:	f7ff ff44 	bl	80087f0 <sim7600_fullConfig>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00c      	beq.n	8008988 <sim7600_fullConfigTask+0x30>
    {
      //set event to invoke connect task open net and open socket tcp, udp
      osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 800896e:	4b4c      	ldr	r3, [pc, #304]	; (8008aa0 <sim7600_fullConfigTask+0x148>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2102      	movs	r1, #2
 8008974:	4618      	mov	r0, r3
 8008976:	f002 fe81 	bl	800b67c <osEventFlagsSet>
      osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 800897a:	4b49      	ldr	r3, [pc, #292]	; (8008aa0 <sim7600_fullConfigTask+0x148>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2101      	movs	r1, #1
 8008980:	4618      	mov	r0, r3
 8008982:	f002 fe7b 	bl	800b67c <osEventFlagsSet>
 8008986:	e005      	b.n	8008994 <sim7600_fullConfigTask+0x3c>
    }
    else
    { //error
      LOG_WRITE("sim7600_fullConfigTask error1\n");
      //set bit simError in ConfigSimEventID to restart and re-config
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8008988:	4b46      	ldr	r3, [pc, #280]	; (8008aa4 <sim7600_fullConfigTask+0x14c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2104      	movs	r1, #4
 800898e:	4618      	mov	r0, r3
 8008990:	f002 fe74 	bl	800b67c <osEventFlagsSet>
  }
  ////
  int configSimFlag;
  for (;;)
  {
    configSimFlag = osEventFlagsWait(ConfigSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8008994:	4b43      	ldr	r3, [pc, #268]	; (8008aa4 <sim7600_fullConfigTask+0x14c>)
 8008996:	6818      	ldr	r0, [r3, #0]
 8008998:	f04f 33ff 	mov.w	r3, #4294967295
 800899c:	2202      	movs	r2, #2
 800899e:	21ff      	movs	r1, #255	; 0xff
 80089a0:	f002 fee2 	bl	800b768 <osEventFlagsWait>
 80089a4:	4603      	mov	r3, r0
 80089a6:	607b      	str	r3, [r7, #4]
    LOG_WRITE("configSimFlag %d\n", configSimFlag);
    if(configSimFlag < 0) //error 0xFFFFFFF...U
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da06      	bge.n	80089bc <sim7600_fullConfigTask+0x64>
    {
      LOG_WRITE("configSimFlag errorFlag\n");
      LOG_WRITE("sim7600_fullConfigTask error2\n");
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 80089ae:	4b3d      	ldr	r3, [pc, #244]	; (8008aa4 <sim7600_fullConfigTask+0x14c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2104      	movs	r1, #4
 80089b4:	4618      	mov	r0, r3
 80089b6:	f002 fe61 	bl	800b67c <osEventFlagsSet>
 80089ba:	e7eb      	b.n	8008994 <sim7600_fullConfigTask+0x3c>
    }
    //analyze follow priority
    else if (configSimFlag & (1 << simErrorEnum))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f003 0304 	and.w	r3, r3, #4
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d020      	beq.n	8008a08 <sim7600_fullConfigTask+0xb0>
    {
      LOG_WRITE("configSimFlag simError\n");
      osEventFlagsClear(ConfigSimEventID, 1 << simErrorEnum);
 80089c6:	4b37      	ldr	r3, [pc, #220]	; (8008aa4 <sim7600_fullConfigTask+0x14c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2104      	movs	r1, #4
 80089cc:	4618      	mov	r0, r3
 80089ce:	f002 fe99 	bl	800b704 <osEventFlagsClear>
      //restart then clear all flag, var
      sim7600_restart(); //restart + reset
 80089d2:	f000 fd89 	bl	80094e8 <sim7600_restart>
      if (sim7600_fullConfig())
 80089d6:	f7ff ff0b 	bl	80087f0 <sim7600_fullConfig>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00c      	beq.n	80089fa <sim7600_fullConfigTask+0xa2>
      {
        //set event to invoke connect task open net and open socket tcp, udp
        osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 80089e0:	4b2f      	ldr	r3, [pc, #188]	; (8008aa0 <sim7600_fullConfigTask+0x148>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2102      	movs	r1, #2
 80089e6:	4618      	mov	r0, r3
 80089e8:	f002 fe48 	bl	800b67c <osEventFlagsSet>
        osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 80089ec:	4b2c      	ldr	r3, [pc, #176]	; (8008aa0 <sim7600_fullConfigTask+0x148>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2101      	movs	r1, #1
 80089f2:	4618      	mov	r0, r3
 80089f4:	f002 fe42 	bl	800b67c <osEventFlagsSet>
 80089f8:	e7cc      	b.n	8008994 <sim7600_fullConfigTask+0x3c>
      }
      else
      { //error
        LOG_WRITE("sim7600_fullConfigTask error3\n");
        //set bit simError in ConfigSimEventID to restart and re config
        osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 80089fa:	4b2a      	ldr	r3, [pc, #168]	; (8008aa4 <sim7600_fullConfigTask+0x14c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2104      	movs	r1, #4
 8008a00:	4618      	mov	r0, r3
 8008a02:	f002 fe3b 	bl	800b67c <osEventFlagsSet>
 8008a06:	e7c5      	b.n	8008994 <sim7600_fullConfigTask+0x3c>
      }
    }
    else if(configSimFlag & (1 << rebootEnum))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d01e      	beq.n	8008a50 <sim7600_fullConfigTask+0xf8>
    {
      LOG_WRITE("configSimFlag rebootEnum\n");
      osEventFlagsClear(ConfigSimEventID, 1 << rebootEnum);
 8008a12:	4b24      	ldr	r3, [pc, #144]	; (8008aa4 <sim7600_fullConfigTask+0x14c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2108      	movs	r1, #8
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f002 fe73 	bl	800b704 <osEventFlagsClear>
      if (sim7600_fullConfig())
 8008a1e:	f7ff fee7 	bl	80087f0 <sim7600_fullConfig>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00c      	beq.n	8008a42 <sim7600_fullConfigTask+0xea>
      {
        //set event to invoke connect task open net and open socket tcp, udp
        osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 8008a28:	4b1d      	ldr	r3, [pc, #116]	; (8008aa0 <sim7600_fullConfigTask+0x148>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2102      	movs	r1, #2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f002 fe24 	bl	800b67c <osEventFlagsSet>
        osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8008a34:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <sim7600_fullConfigTask+0x148>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2101      	movs	r1, #1
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f002 fe1e 	bl	800b67c <osEventFlagsSet>
 8008a40:	e7a8      	b.n	8008994 <sim7600_fullConfigTask+0x3c>
      }
      else
      { //error
        LOG_WRITE("sim7600_fullConfigTask error4\n");
        //set bit simError in ConfigSimEventID to restart and re config
        osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8008a42:	4b18      	ldr	r3, [pc, #96]	; (8008aa4 <sim7600_fullConfigTask+0x14c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2104      	movs	r1, #4
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f002 fe17 	bl	800b67c <osEventFlagsSet>
 8008a4e:	e7a1      	b.n	8008994 <sim7600_fullConfigTask+0x3c>
      }
    }
    else if (configSimFlag & (1 << callingEnum))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00f      	beq.n	8008a7a <sim7600_fullConfigTask+0x122>
    {
      LOG_WRITE("configSimFlag calling\n");
      osEventFlagsClear(ConfigSimEventID, 1 << callingEnum);
 8008a5a:	4b12      	ldr	r3, [pc, #72]	; (8008aa4 <sim7600_fullConfigTask+0x14c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2102      	movs	r1, #2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f002 fe4f 	bl	800b704 <osEventFlagsClear>
      //send AT+CHUP to end call
      sim7600_AT_notify_error("AT+CHUP", "OK", NULL, 500, 2);
 8008a66:	2302      	movs	r3, #2
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008a6e:	2200      	movs	r2, #0
 8008a70:	490d      	ldr	r1, [pc, #52]	; (8008aa8 <sim7600_fullConfigTask+0x150>)
 8008a72:	480e      	ldr	r0, [pc, #56]	; (8008aac <sim7600_fullConfigTask+0x154>)
 8008a74:	f7ff fdaa 	bl	80085cc <sim7600_AT_notify_error>
 8008a78:	e78c      	b.n	8008994 <sim7600_fullConfigTask+0x3c>
    //   //reconnect TCP, UDP
    //   osEventFlagsClear(ConfigSimEventID, 1 << IPerrorEnum);
    //   // osEventFlagsSet(ConnectSimEventID, 1U);
    //   osThreadFlagsSet(connectSimTaskHandle, 1 << reConEnum);
    // }
    else if (configSimFlag & (1 << smsEnum))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d006      	beq.n	8008a92 <sim7600_fullConfigTask+0x13a>
    {
      LOG_WRITE("configSimFlag sms\n");
      osEventFlagsClear(ConfigSimEventID, 1 << smsEnum);
 8008a84:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <sim7600_fullConfigTask+0x14c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2101      	movs	r1, #1
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f002 fe3a 	bl	800b704 <osEventFlagsClear>
 8008a90:	e780      	b.n	8008994 <sim7600_fullConfigTask+0x3c>
    else
    { //something wrong
      LOG_WRITE("configSimFlag sthElse\n");
      LOG_WRITE("sim7600_fullConfigTask error5\n");
      //set bit simError in ConfigSimEventID to restart and re config
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8008a92:	4b04      	ldr	r3, [pc, #16]	; (8008aa4 <sim7600_fullConfigTask+0x14c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2104      	movs	r1, #4
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f002 fdef 	bl	800b67c <osEventFlagsSet>
    configSimFlag = osEventFlagsWait(ConfigSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8008a9e:	e779      	b.n	8008994 <sim7600_fullConfigTask+0x3c>
 8008aa0:	20005924 	.word	0x20005924
 8008aa4:	20005920 	.word	0x20005920
 8008aa8:	080225d0 	.word	0x080225d0
 8008aac:	08022668 	.word	0x08022668

08008ab0 <sim7600_connectTask>:
    }
  }
}

void sim7600_connectTask()
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af02      	add	r7, sp, #8
  LOG_WRITE("connectTask\n");
  int connectSimFlag;
  for (;;)
  {
    // connectSimFlag = osThreadFlagsWait(0xFF, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
    connectSimFlag = osEventFlagsWait(ConnectSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8008ab6:	4ba1      	ldr	r3, [pc, #644]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008ab8:	6818      	ldr	r0, [r3, #0]
 8008aba:	f04f 33ff 	mov.w	r3, #4294967295
 8008abe:	2202      	movs	r2, #2
 8008ac0:	21ff      	movs	r1, #255	; 0xff
 8008ac2:	f002 fe51 	bl	800b768 <osEventFlagsWait>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	613b      	str	r3, [r7, #16]
    LOG_WRITE("connectSimFlag %d\n", connectSimFlag);
    if (connectSimFlag < 0) //error 0xFFFFFFF...U
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	da06      	bge.n	8008ade <sim7600_connectTask+0x2e>
    {
      LOG_WRITE("connectSimFlag errorFlag\n");
      LOG_WRITE("sim7600_connectTask error0\n");
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 8008ad0:	4b9b      	ldr	r3, [pc, #620]	; (8008d40 <sim7600_connectTask+0x290>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2104      	movs	r1, #4
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f002 fdd0 	bl	800b67c <osEventFlagsSet>
 8008adc:	e7eb      	b.n	8008ab6 <sim7600_connectTask+0x6>
    }
    else if (connectSimFlag & (1 << netErrorEnum))
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d03e      	beq.n	8008b66 <sim7600_connectTask+0xb6>
    {
      LOG_WRITE("connectSimFlag netError\n");
      osEventFlagsClear(ConnectSimEventID, 1 << netErrorEnum);
 8008ae8:	4b94      	ldr	r3, [pc, #592]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2108      	movs	r1, #8
 8008aee:	4618      	mov	r0, r3
 8008af0:	f002 fe08 	bl	800b704 <osEventFlagsClear>

      //release tcp/udp stack
      sim7600ConnectStatus = 0;
 8008af4:	4b93      	ldr	r3, [pc, #588]	; (8008d44 <sim7600_connectTask+0x294>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
      TCP_UDP_Stack_Release();
 8008afa:	f001 fa23 	bl	8009f44 <TCP_UDP_Stack_Release>

      //close IP socket (tcp, udp)
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue; //tcp //+CIPCLOSE: 0,0
 8008afe:	2302      	movs	r3, #2
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	f242 7310 	movw	r3, #10000	; 0x2710
 8008b06:	4a90      	ldr	r2, [pc, #576]	; (8008d48 <sim7600_connectTask+0x298>)
 8008b08:	4990      	ldr	r1, [pc, #576]	; (8008d4c <sim7600_connectTask+0x29c>)
 8008b0a:	4891      	ldr	r0, [pc, #580]	; (8008d50 <sim7600_connectTask+0x2a0>)
 8008b0c:	f7ff fd5e 	bl	80085cc <sim7600_AT_notify_error>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 8104 	beq.w	8008d20 <sim7600_connectTask+0x270>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue; //udp //+CIPCLOSE: 1,0
 8008b18:	2302      	movs	r3, #2
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	f242 7310 	movw	r3, #10000	; 0x2710
 8008b20:	4a8c      	ldr	r2, [pc, #560]	; (8008d54 <sim7600_connectTask+0x2a4>)
 8008b22:	498a      	ldr	r1, [pc, #552]	; (8008d4c <sim7600_connectTask+0x29c>)
 8008b24:	488c      	ldr	r0, [pc, #560]	; (8008d58 <sim7600_connectTask+0x2a8>)
 8008b26:	f7ff fd51 	bl	80085cc <sim7600_AT_notify_error>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 80f9 	beq.w	8008d24 <sim7600_connectTask+0x274>
      //close net
      if (!sim7600_AT_notify_error("AT+NETCLOSE\r\n", "OK", "+NETCLOSE: 2", 10000, 2)) continue; //+NETCLOSE: 0
 8008b32:	2302      	movs	r3, #2
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	f242 7310 	movw	r3, #10000	; 0x2710
 8008b3a:	4a88      	ldr	r2, [pc, #544]	; (8008d5c <sim7600_connectTask+0x2ac>)
 8008b3c:	4983      	ldr	r1, [pc, #524]	; (8008d4c <sim7600_connectTask+0x29c>)
 8008b3e:	4888      	ldr	r0, [pc, #544]	; (8008d60 <sim7600_connectTask+0x2b0>)
 8008b40:	f7ff fd44 	bl	80085cc <sim7600_AT_notify_error>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 80ee 	beq.w	8008d28 <sim7600_connectTask+0x278>

      //set flag to open net and tcp/udp again
      osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 8008b4c:	4b7b      	ldr	r3, [pc, #492]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2102      	movs	r1, #2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f002 fd92 	bl	800b67c <osEventFlagsSet>
      osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8008b58:	4b78      	ldr	r3, [pc, #480]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f002 fd8c 	bl	800b67c <osEventFlagsSet>
 8008b64:	e7a7      	b.n	8008ab6 <sim7600_connectTask+0x6>
    }
    else if (connectSimFlag & (1 << openNetEnum))
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d011      	beq.n	8008b94 <sim7600_connectTask+0xe4>
    {
      LOG_WRITE("connectSimFlag openNet\n");
      osEventFlagsClear(ConnectSimEventID, 1 << openNetEnum);
 8008b70:	4b72      	ldr	r3, [pc, #456]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2102      	movs	r1, #2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f002 fdc4 	bl	800b704 <osEventFlagsClear>

      //open network
      if (!sim7600_AT_notify_error("AT+NETOPEN\r\n", "OK", NULL, 10000, 2)) continue; //+NETOPEN: 0
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	f242 7310 	movw	r3, #10000	; 0x2710
 8008b84:	2200      	movs	r2, #0
 8008b86:	4971      	ldr	r1, [pc, #452]	; (8008d4c <sim7600_connectTask+0x29c>)
 8008b88:	4876      	ldr	r0, [pc, #472]	; (8008d64 <sim7600_connectTask+0x2b4>)
 8008b8a:	f7ff fd1f 	bl	80085cc <sim7600_AT_notify_error>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	e790      	b.n	8008ab6 <sim7600_connectTask+0x6>
    }
    else if (connectSimFlag & (1 << ipCloseEnum))
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f003 0310 	and.w	r3, r3, #16
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d030      	beq.n	8008c00 <sim7600_connectTask+0x150>
    {
      LOG_WRITE("connectSimFlag ipClose\n");
      sim7600DisconnectTime++;
 8008b9e:	4b72      	ldr	r3, [pc, #456]	; (8008d68 <sim7600_connectTask+0x2b8>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	4a70      	ldr	r2, [pc, #448]	; (8008d68 <sim7600_connectTask+0x2b8>)
 8008ba6:	6013      	str	r3, [r2, #0]

      osEventFlagsClear(ConnectSimEventID, 1 << ipCloseEnum);
 8008ba8:	4b64      	ldr	r3, [pc, #400]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2110      	movs	r1, #16
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f002 fda8 	bl	800b704 <osEventFlagsClear>

      //release tcp/udp stack
      sim7600ConnectStatus = 0;
 8008bb4:	4b63      	ldr	r3, [pc, #396]	; (8008d44 <sim7600_connectTask+0x294>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
      TCP_UDP_Stack_Release();
 8008bba:	f001 f9c3 	bl	8009f44 <TCP_UDP_Stack_Release>

      //maybe tcp/udp, one of them is closed, so to make sure before open tcp/udp connect, release all
      //close IP socket (tcp, udp)
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	f242 7310 	movw	r3, #10000	; 0x2710
 8008bc6:	4a60      	ldr	r2, [pc, #384]	; (8008d48 <sim7600_connectTask+0x298>)
 8008bc8:	4960      	ldr	r1, [pc, #384]	; (8008d4c <sim7600_connectTask+0x29c>)
 8008bca:	4861      	ldr	r0, [pc, #388]	; (8008d50 <sim7600_connectTask+0x2a0>)
 8008bcc:	f7ff fcfe 	bl	80085cc <sim7600_AT_notify_error>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 80aa 	beq.w	8008d2c <sim7600_connectTask+0x27c>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	f242 7310 	movw	r3, #10000	; 0x2710
 8008be0:	4a5c      	ldr	r2, [pc, #368]	; (8008d54 <sim7600_connectTask+0x2a4>)
 8008be2:	495a      	ldr	r1, [pc, #360]	; (8008d4c <sim7600_connectTask+0x29c>)
 8008be4:	485c      	ldr	r0, [pc, #368]	; (8008d58 <sim7600_connectTask+0x2a8>)
 8008be6:	f7ff fcf1 	bl	80085cc <sim7600_AT_notify_error>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 809f 	beq.w	8008d30 <sim7600_connectTask+0x280>

      //then set openCon flag to re-open tcp/udp connect
      osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8008bf2:	4b52      	ldr	r3, [pc, #328]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2101      	movs	r1, #1
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f002 fd3f 	bl	800b67c <osEventFlagsSet>
 8008bfe:	e75a      	b.n	8008ab6 <sim7600_connectTask+0x6>
    }
    else if ((connectSimFlag & (1 << openConEnum)) && sim7600ConnectStatus == 0)
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d059      	beq.n	8008cbe <sim7600_connectTask+0x20e>
 8008c0a:	4b4e      	ldr	r3, [pc, #312]	; (8008d44 <sim7600_connectTask+0x294>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d155      	bne.n	8008cbe <sim7600_connectTask+0x20e>
    {
      LOG_WRITE("connectSimFlag openCon\n");
      sim7600ConnectTime++;
 8008c12:	4b56      	ldr	r3, [pc, #344]	; (8008d6c <sim7600_connectTask+0x2bc>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3301      	adds	r3, #1
 8008c18:	4a54      	ldr	r2, [pc, #336]	; (8008d6c <sim7600_connectTask+0x2bc>)
 8008c1a:	6013      	str	r3, [r2, #0]

      osEventFlagsClear(ConnectSimEventID, 1 << openConEnum);
 8008c1c:	4b47      	ldr	r3, [pc, #284]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2101      	movs	r1, #1
 8008c22:	4618      	mov	r0, r3
 8008c24:	f002 fd6e 	bl	800b704 <osEventFlagsClear>
      //check connectToHostCount, if > connectToHostCountMax then change serverDomain, serverport
      //open tcp connect
      char *sim7600_cmd_buff;
      if(serverDomain != NULL)
      {
        int tmpLen = strlen(serverDomain);
 8008c28:	4851      	ldr	r0, [pc, #324]	; (8008d70 <sim7600_connectTask+0x2c0>)
 8008c2a:	f7f7 fad1 	bl	80001d0 <strlen>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	60fb      	str	r3, [r7, #12]
        if(tmpLen > 0)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dd06      	ble.n	8008c46 <sim7600_connectTask+0x196>
          sim7600_cmd_buff = (char*)malloc(tmpLen + 35);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3323      	adds	r3, #35	; 0x23
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f017 ffbd 	bl	8020bbc <malloc>
 8008c42:	4603      	mov	r3, r0
 8008c44:	617b      	str	r3, [r7, #20]
      }
      if(sim7600_cmd_buff == NULL) //can't allocate mem in heap
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d106      	bne.n	8008c5a <sim7600_connectTask+0x1aa>
      {
        LOG_WRITE("sim7600_connectTask error1\n");
        osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart
 8008c4c:	4b3c      	ldr	r3, [pc, #240]	; (8008d40 <sim7600_connectTask+0x290>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2104      	movs	r1, #4
 8008c52:	4618      	mov	r0, r3
 8008c54:	f002 fd12 	bl	800b67c <osEventFlagsSet>
        continue;
 8008c58:	e06f      	b.n	8008d3a <sim7600_connectTask+0x28a>
      }
      sprintf(sim7600_cmd_buff, "AT+CIPOPEN=0,\"TCP\",\"%s\",%d\r\n", serverDomain, serverPort);
 8008c5a:	4b46      	ldr	r3, [pc, #280]	; (8008d74 <sim7600_connectTask+0x2c4>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a44      	ldr	r2, [pc, #272]	; (8008d70 <sim7600_connectTask+0x2c0>)
 8008c60:	4945      	ldr	r1, [pc, #276]	; (8008d78 <sim7600_connectTask+0x2c8>)
 8008c62:	6978      	ldr	r0, [r7, #20]
 8008c64:	f018 fa3e 	bl	80210e4 <siprintf>
      int tmpResTCP = sim7600_AT_notify_error(sim7600_cmd_buff, "+CIPOPEN: 0,0", "+CIPOPEN: 0", 10000, 2);
 8008c68:	2302      	movs	r3, #2
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8008c70:	4a42      	ldr	r2, [pc, #264]	; (8008d7c <sim7600_connectTask+0x2cc>)
 8008c72:	4943      	ldr	r1, [pc, #268]	; (8008d80 <sim7600_connectTask+0x2d0>)
 8008c74:	6978      	ldr	r0, [r7, #20]
 8008c76:	f7ff fca9 	bl	80085cc <sim7600_AT_notify_error>
 8008c7a:	60b8      	str	r0, [r7, #8]
      free(sim7600_cmd_buff);
 8008c7c:	6978      	ldr	r0, [r7, #20]
 8008c7e:	f017 ffa5 	bl	8020bcc <free>
      if (tmpResTCP == 1) //successful open
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d10c      	bne.n	8008ca2 <sim7600_connectTask+0x1f2>
      {
        //open tcp success
        sim7600ConnectStatus = 1;
 8008c88:	4b2e      	ldr	r3, [pc, #184]	; (8008d44 <sim7600_connectTask+0x294>)
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]
        //init tcp udp stack to start TLS handshake
        TCP_UDP_Stack_Init(ConnectSimEventID, doneTLSEnum, ipCloseEnum, false);
 8008c8e:	4b2b      	ldr	r3, [pc, #172]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	2300      	movs	r3, #0
 8008c94:	2204      	movs	r2, #4
 8008c96:	2102      	movs	r1, #2
 8008c98:	f001 f8d2 	bl	8009e40 <TCP_UDP_Stack_Init>
        TCP_Request(); //request rsa pub key
 8008c9c:	f001 fa06 	bl	800a0ac <TCP_Request>
    {
 8008ca0:	e048      	b.n	8008d34 <sim7600_connectTask+0x284>
      }
      else if(tmpResTCP == 2) //open fail, re-connect
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d145      	bne.n	8008d34 <sim7600_connectTask+0x284>
      {
        osDelay(RECONNECT_INTERVAL);
 8008ca8:	f242 7010 	movw	r0, #10000	; 0x2710
 8008cac:	f002 fb95 	bl	800b3da <osDelay>
        osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8008cb0:	4b22      	ldr	r3, [pc, #136]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f002 fce0 	bl	800b67c <osEventFlagsSet>
    {
 8008cbc:	e03a      	b.n	8008d34 <sim7600_connectTask+0x284>
      }
    }
    else if ((connectSimFlag & (1 << doneTLSEnum)) && sim7600ConnectStatus == 1)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d024      	beq.n	8008d12 <sim7600_connectTask+0x262>
 8008cc8:	4b1e      	ldr	r3, [pc, #120]	; (8008d44 <sim7600_connectTask+0x294>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d120      	bne.n	8008d12 <sim7600_connectTask+0x262>
    {
      LOG_WRITE("connectSimFlag doneTLS\n");
      osEventFlagsClear(ConnectSimEventID, 1 << doneTLSEnum);
 8008cd0:	4b1a      	ldr	r3, [pc, #104]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2104      	movs	r1, #4
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f002 fd14 	bl	800b704 <osEventFlagsClear>

      //open UDP connect
      int tmpResUDP = sim7600_AT_notify_error("AT+CIPOPEN=1,\"UDP\",,,8080\r\n", "+CIPOPEN: 1,0", "+CIPOPEN: 1", 10000, 2);
 8008cdc:	2302      	movs	r3, #2
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	f242 7310 	movw	r3, #10000	; 0x2710
 8008ce4:	4a27      	ldr	r2, [pc, #156]	; (8008d84 <sim7600_connectTask+0x2d4>)
 8008ce6:	4928      	ldr	r1, [pc, #160]	; (8008d88 <sim7600_connectTask+0x2d8>)
 8008ce8:	4828      	ldr	r0, [pc, #160]	; (8008d8c <sim7600_connectTask+0x2dc>)
 8008cea:	f7ff fc6f 	bl	80085cc <sim7600_AT_notify_error>
 8008cee:	6078      	str	r0, [r7, #4]
      if(tmpResUDP == 1) //successful
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d103      	bne.n	8008cfe <sim7600_connectTask+0x24e>
      {
        sim7600ConnectStatus = 2;
 8008cf6:	4b13      	ldr	r3, [pc, #76]	; (8008d44 <sim7600_connectTask+0x294>)
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	601a      	str	r2, [r3, #0]
    {
 8008cfc:	e01c      	b.n	8008d38 <sim7600_connectTask+0x288>
        //successful, reset connectToHostCount, change Domain2 <-> Domain1 if neccessary
      }
      else if(tmpResUDP == 2) //open fail
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d119      	bne.n	8008d38 <sim7600_connectTask+0x288>
      {
        osEventFlagsSet(ConnectSimEventID, 1 << ipCloseEnum);
 8008d04:	4b0d      	ldr	r3, [pc, #52]	; (8008d3c <sim7600_connectTask+0x28c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2110      	movs	r1, #16
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f002 fcb6 	bl	800b67c <osEventFlagsSet>
    {
 8008d10:	e012      	b.n	8008d38 <sim7600_connectTask+0x288>
    // }
    else
    { //something wrong
      LOG_WRITE("connectSimFlag sthElse\n");
      LOG_WRITE("sim7600_connectTask error2\n");
      osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart
 8008d12:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <sim7600_connectTask+0x290>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2104      	movs	r1, #4
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f002 fcaf 	bl	800b67c <osEventFlagsSet>
 8008d1e:	e6ca      	b.n	8008ab6 <sim7600_connectTask+0x6>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue; //tcp //+CIPCLOSE: 0,0
 8008d20:	bf00      	nop
 8008d22:	e6c8      	b.n	8008ab6 <sim7600_connectTask+0x6>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue; //udp //+CIPCLOSE: 1,0
 8008d24:	bf00      	nop
 8008d26:	e6c6      	b.n	8008ab6 <sim7600_connectTask+0x6>
      if (!sim7600_AT_notify_error("AT+NETCLOSE\r\n", "OK", "+NETCLOSE: 2", 10000, 2)) continue; //+NETCLOSE: 0
 8008d28:	bf00      	nop
 8008d2a:	e6c4      	b.n	8008ab6 <sim7600_connectTask+0x6>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue;
 8008d2c:	bf00      	nop
 8008d2e:	e6c2      	b.n	8008ab6 <sim7600_connectTask+0x6>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue;
 8008d30:	bf00      	nop
 8008d32:	e6c0      	b.n	8008ab6 <sim7600_connectTask+0x6>
    {
 8008d34:	bf00      	nop
 8008d36:	e6be      	b.n	8008ab6 <sim7600_connectTask+0x6>
    {
 8008d38:	bf00      	nop
    connectSimFlag = osEventFlagsWait(ConnectSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8008d3a:	e6bc      	b.n	8008ab6 <sim7600_connectTask+0x6>
 8008d3c:	20005924 	.word	0x20005924
 8008d40:	20005920 	.word	0x20005920
 8008d44:	200007d0 	.word	0x200007d0
 8008d48:	08022670 	.word	0x08022670
 8008d4c:	080225d0 	.word	0x080225d0
 8008d50:	08022680 	.word	0x08022680
 8008d54:	08022690 	.word	0x08022690
 8008d58:	080226a0 	.word	0x080226a0
 8008d5c:	080226b0 	.word	0x080226b0
 8008d60:	080226c0 	.word	0x080226c0
 8008d64:	080226d0 	.word	0x080226d0
 8008d68:	200007d8 	.word	0x200007d8
 8008d6c:	200007d4 	.word	0x200007d4
 8008d70:	20000244 	.word	0x20000244
 8008d74:	200002a8 	.word	0x200002a8
 8008d78:	080226e0 	.word	0x080226e0
 8008d7c:	08022700 	.word	0x08022700
 8008d80:	0802270c 	.word	0x0802270c
 8008d84:	0802271c 	.word	0x0802271c
 8008d88:	08022728 	.word	0x08022728
 8008d8c:	08022738 	.word	0x08022738

08008d90 <sim7600_sendTask>:
{
	return true;
}

void sim7600_sendTask()
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08a      	sub	sp, #40	; 0x28
 8008d94:	af00      	add	r7, sp, #0
  LOG_WRITE("sendTask\n");
  sendSimPack sendMsgObj;
  osStatus_t sendMsgStt;
  for (;;)
  {
    sendMsgStt = osMessageQueueGet(SendSimQueueID, &sendMsgObj, NULL, osWaitForever); //wait until has msg
 8008d96:	4b19      	ldr	r3, [pc, #100]	; (8008dfc <sim7600_sendTask+0x6c>)
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	1d39      	adds	r1, r7, #4
 8008d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008da0:	2200      	movs	r2, #0
 8008da2:	f003 f88d 	bl	800bec0 <osMessageQueueGet>
 8008da6:	6278      	str	r0, [r7, #36]	; 0x24
    LOG_WRITE("sendMsgStt %d\n", sendMsgStt);
    if (sendMsgStt == osOK && bSim7600IsRunning)
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1f3      	bne.n	8008d96 <sim7600_sendTask+0x6>
 8008dae:	4b14      	ldr	r3, [pc, #80]	; (8008e00 <sim7600_sendTask+0x70>)
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0ef      	beq.n	8008d96 <sim7600_sendTask+0x6>
    {
      LOG_WRITE("sendMsgType %d\n", sendMsgObj.type);
      //check send msg type
      if (sendMsgObj.type == 0)
 8008db6:	7a3b      	ldrb	r3, [r7, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d116      	bne.n	8008dea <sim7600_sendTask+0x5a>
      { //normal cmd
        int tmpRes = sim7600_send_cmd(sendMsgObj.ptr, sendMsgObj.res1, sendMsgObj.res2, sendMsgObj.timeout);
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	6979      	ldr	r1, [r7, #20]
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	f7ff fb4e 	bl	8008464 <sim7600_send_cmd>
 8008dc8:	6238      	str	r0, [r7, #32]
        if (tmpRes == 1 || tmpRes == 2)
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d002      	beq.n	8008dd6 <sim7600_sendTask+0x46>
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d1df      	bne.n	8008d96 <sim7600_sendTask+0x6>
        {
          if (sendMsgObj.EventID != NULL) //can't make hard error
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0dc      	beq.n	8008d96 <sim7600_sendTask+0x6>
            osEventFlagsSet(sendMsgObj.EventID, tmpRes);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a3a      	ldr	r2, [r7, #32]
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f002 fc4a 	bl	800b67c <osEventFlagsSet>
 8008de8:	e7d5      	b.n	8008d96 <sim7600_sendTask+0x6>
        }
      }
      else
      { //send TCP packet
        sim7600_send_packet_ip(sendMsgObj.type, sendMsgObj.ptr, sendMsgObj.len);
 8008dea:	7a3b      	ldrb	r3, [r7, #8]
 8008dec:	4618      	mov	r0, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	4619      	mov	r1, r3
 8008df4:	f7ff fc0a 	bl	800860c <sim7600_send_packet_ip>
    sendMsgStt = osMessageQueueGet(SendSimQueueID, &sendMsgObj, NULL, osWaitForever); //wait until has msg
 8008df8:	e7cd      	b.n	8008d96 <sim7600_sendTask+0x6>
 8008dfa:	bf00      	nop
 8008dfc:	2000592c 	.word	0x2000592c
 8008e00:	200007dc 	.word	0x200007dc

08008e04 <sim7600_recvTask>:
    }
  }
}

void sim7600_recvTask()
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  LOG_WRITE("recvTask\n");
  for (;;)
  {
    osDelay(RECV_SIM_TASK_INTERVAL);
 8008e08:	2005      	movs	r0, #5
 8008e0a:	f002 fae6 	bl	800b3da <osDelay>
    if(bSim7600IsRunning)
 8008e0e:	4b03      	ldr	r3, [pc, #12]	; (8008e1c <sim7600_recvTask+0x18>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0f8      	beq.n	8008e08 <sim7600_recvTask+0x4>
      sim7600_usart_rx_check();
 8008e16:	f000 f803 	bl	8008e20 <sim7600_usart_rx_check>
    osDelay(RECV_SIM_TASK_INTERVAL);
 8008e1a:	e7f5      	b.n	8008e08 <sim7600_recvTask+0x4>
 8008e1c:	200007dc 	.word	0x200007dc

08008e20 <sim7600_usart_rx_check>:
//global var
int old_pos_dma = 0;
int new_pos_dma = 0;

void sim7600_usart_rx_check()
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
  SIM7600_PAUSE_RX();
 8008e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e2a:	4850      	ldr	r0, [pc, #320]	; (8008f6c <sim7600_usart_rx_check+0x14c>)
 8008e2c:	f7ff f8b4 	bl	8007f98 <LL_GPIO_SetOutputPin>
  
  /* Calculate current position in buffer */
  new_pos_dma = sim_dma_buff_size - (int)(LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2) & 0xFFFF);
 8008e30:	4b4f      	ldr	r3, [pc, #316]	; (8008f70 <sim7600_usart_rx_check+0x150>)
 8008e32:	681c      	ldr	r4, [r3, #0]
 8008e34:	2102      	movs	r1, #2
 8008e36:	484f      	ldr	r0, [pc, #316]	; (8008f74 <sim7600_usart_rx_check+0x154>)
 8008e38:	f7fe fdb6 	bl	80079a8 <LL_DMA_GetDataLength>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	1ae3      	subs	r3, r4, r3
 8008e42:	4a4d      	ldr	r2, [pc, #308]	; (8008f78 <sim7600_usart_rx_check+0x158>)
 8008e44:	6013      	str	r3, [r2, #0]
  if(new_pos_dma < 0)
 8008e46:	4b4c      	ldr	r3, [pc, #304]	; (8008f78 <sim7600_usart_rx_check+0x158>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	da0b      	bge.n	8008e66 <sim7600_usart_rx_check+0x46>
  {
    LOG_WRITE("new_pos_dma < 0\n");
    //something wrong
    SIM7600_RESUME_RX();
 8008e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e52:	4846      	ldr	r0, [pc, #280]	; (8008f6c <sim7600_usart_rx_check+0x14c>)
 8008e54:	f7ff f8ae 	bl	8007fb4 <LL_GPIO_ResetOutputPin>
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 8008e58:	4b48      	ldr	r3, [pc, #288]	; (8008f7c <sim7600_usart_rx_check+0x15c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2104      	movs	r1, #4
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f002 fc0c 	bl	800b67c <osEventFlagsSet>
    return;
 8008e64:	e07f      	b.n	8008f66 <sim7600_usart_rx_check+0x146>
  }
  //0 1 2 3 4 5
  if (new_pos_dma != old_pos_dma)
 8008e66:	4b44      	ldr	r3, [pc, #272]	; (8008f78 <sim7600_usart_rx_check+0x158>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	4b45      	ldr	r3, [pc, #276]	; (8008f80 <sim7600_usart_rx_check+0x160>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d074      	beq.n	8008f5c <sim7600_usart_rx_check+0x13c>
  { /* Check change in received data */
    LOG_WRITE("new_pos_dma %d, oldPos %d\n", new_pos_dma, old_pos_dma);
    if (new_pos_dma > old_pos_dma)
 8008e72:	4b41      	ldr	r3, [pc, #260]	; (8008f78 <sim7600_usart_rx_check+0x158>)
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	4b42      	ldr	r3, [pc, #264]	; (8008f80 <sim7600_usart_rx_check+0x160>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	dd12      	ble.n	8008ea4 <sim7600_usart_rx_check+0x84>
    { /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      //usart_process_data(&usart_rx_dma_buffer[old_pos_dma], new_pos_dma - old_pos_dma);
      sim_buff_length = new_pos_dma - old_pos_dma;
 8008e7e:	4b3e      	ldr	r3, [pc, #248]	; (8008f78 <sim7600_usart_rx_check+0x158>)
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	4b3f      	ldr	r3, [pc, #252]	; (8008f80 <sim7600_usart_rx_check+0x160>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	4a3e      	ldr	r2, [pc, #248]	; (8008f84 <sim7600_usart_rx_check+0x164>)
 8008e8a:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buff + old_pos_dma, sim_buff_length);
 8008e8c:	4b3c      	ldr	r3, [pc, #240]	; (8008f80 <sim7600_usart_rx_check+0x160>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	461a      	mov	r2, r3
 8008e92:	4b3d      	ldr	r3, [pc, #244]	; (8008f88 <sim7600_usart_rx_check+0x168>)
 8008e94:	4413      	add	r3, r2
 8008e96:	4a3b      	ldr	r2, [pc, #236]	; (8008f84 <sim7600_usart_rx_check+0x164>)
 8008e98:	6812      	ldr	r2, [r2, #0]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	483b      	ldr	r0, [pc, #236]	; (8008f8c <sim7600_usart_rx_check+0x16c>)
 8008e9e:	f017 feab 	bl	8020bf8 <memcpy>
 8008ea2:	e027      	b.n	8008ef4 <sim7600_usart_rx_check+0xd4>
    }
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      sim_buff_length = sim_dma_buff_size - old_pos_dma; //0 1 2 3 4
 8008ea4:	4b32      	ldr	r3, [pc, #200]	; (8008f70 <sim7600_usart_rx_check+0x150>)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	4b35      	ldr	r3, [pc, #212]	; (8008f80 <sim7600_usart_rx_check+0x160>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	4a35      	ldr	r2, [pc, #212]	; (8008f84 <sim7600_usart_rx_check+0x164>)
 8008eb0:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buff + old_pos_dma, sim_buff_length);
 8008eb2:	4b33      	ldr	r3, [pc, #204]	; (8008f80 <sim7600_usart_rx_check+0x160>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	4b33      	ldr	r3, [pc, #204]	; (8008f88 <sim7600_usart_rx_check+0x168>)
 8008eba:	4413      	add	r3, r2
 8008ebc:	4a31      	ldr	r2, [pc, #196]	; (8008f84 <sim7600_usart_rx_check+0x164>)
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4832      	ldr	r0, [pc, #200]	; (8008f8c <sim7600_usart_rx_check+0x16c>)
 8008ec4:	f017 fe98 	bl	8020bf8 <memcpy>
      /* Check and continue with beginning of buffer */
      if (new_pos_dma > 0)
 8008ec8:	4b2b      	ldr	r3, [pc, #172]	; (8008f78 <sim7600_usart_rx_check+0x158>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dd11      	ble.n	8008ef4 <sim7600_usart_rx_check+0xd4>
      {
        //usart_process_data(&usart_rx_dma_buffer[0], new_pos_dma);
        memcpy(sim_buff + sim_buff_length, sim_dma_buff, new_pos_dma);
 8008ed0:	4b2c      	ldr	r3, [pc, #176]	; (8008f84 <sim7600_usart_rx_check+0x164>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	4b2d      	ldr	r3, [pc, #180]	; (8008f8c <sim7600_usart_rx_check+0x16c>)
 8008ed8:	4413      	add	r3, r2
 8008eda:	4a27      	ldr	r2, [pc, #156]	; (8008f78 <sim7600_usart_rx_check+0x158>)
 8008edc:	6812      	ldr	r2, [r2, #0]
 8008ede:	492a      	ldr	r1, [pc, #168]	; (8008f88 <sim7600_usart_rx_check+0x168>)
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f017 fe89 	bl	8020bf8 <memcpy>
        sim_buff_length += new_pos_dma;
 8008ee6:	4b27      	ldr	r3, [pc, #156]	; (8008f84 <sim7600_usart_rx_check+0x164>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	4b23      	ldr	r3, [pc, #140]	; (8008f78 <sim7600_usart_rx_check+0x158>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4413      	add	r3, r2
 8008ef0:	4a24      	ldr	r2, [pc, #144]	; (8008f84 <sim7600_usart_rx_check+0x164>)
 8008ef2:	6013      	str	r3, [r2, #0]
      }
    }

    //debug /////////////////////////////////////
    uint8_t tmp = sim_buff[10]; sim_buff[10] = 0;
 8008ef4:	4b25      	ldr	r3, [pc, #148]	; (8008f8c <sim7600_usart_rx_check+0x16c>)
 8008ef6:	7a9b      	ldrb	r3, [r3, #10]
 8008ef8:	71fb      	strb	r3, [r7, #7]
 8008efa:	4b24      	ldr	r3, [pc, #144]	; (8008f8c <sim7600_usart_rx_check+0x16c>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	729a      	strb	r2, [r3, #10]
    LOG_WRITE("simbuff %s\n", sim_buff);
    sim_buff[10] = tmp;
 8008f00:	4a22      	ldr	r2, [pc, #136]	; (8008f8c <sim7600_usart_rx_check+0x16c>)
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	7293      	strb	r3, [r2, #10]
    //////////////////////////////////////////////

    int returnTmp = sim7600_handle_received_data();
 8008f06:	f000 f8d3 	bl	80090b0 <sim7600_handle_received_data>
 8008f0a:	6038      	str	r0, [r7, #0]
    SIM7600_RESUME_RX();
 8008f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008f10:	4816      	ldr	r0, [pc, #88]	; (8008f6c <sim7600_usart_rx_check+0x14c>)
 8008f12:	f7ff f84f 	bl	8007fb4 <LL_GPIO_ResetOutputPin>
    LOG_WRITE("returnTmp %d\n", returnTmp);
    if (returnTmp < 0) //something wrong
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	da06      	bge.n	8008f2a <sim7600_usart_rx_check+0x10a>
    {
      LOG_WRITE("returnTmp < 0\n");
      //something wrong
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 8008f1c:	4b17      	ldr	r3, [pc, #92]	; (8008f7c <sim7600_usart_rx_check+0x15c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2104      	movs	r1, #4
 8008f22:	4618      	mov	r0, r3
 8008f24:	f002 fbaa 	bl	800b67c <osEventFlagsSet>
      return;
 8008f28:	e01d      	b.n	8008f66 <sim7600_usart_rx_check+0x146>
    }

    //debug //////////////////////////////////////
    savePosDma(old_pos_dma, new_pos_dma, returnTmp);
 8008f2a:	4b15      	ldr	r3, [pc, #84]	; (8008f80 <sim7600_usart_rx_check+0x160>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a12      	ldr	r2, [pc, #72]	; (8008f78 <sim7600_usart_rx_check+0x158>)
 8008f30:	6811      	ldr	r1, [r2, #0]
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fd fb6f 	bl	8006618 <savePosDma>
    //////////////////////////////////////////////

    old_pos_dma += returnTmp;
 8008f3a:	4b11      	ldr	r3, [pc, #68]	; (8008f80 <sim7600_usart_rx_check+0x160>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	4413      	add	r3, r2
 8008f42:	4a0f      	ldr	r2, [pc, #60]	; (8008f80 <sim7600_usart_rx_check+0x160>)
 8008f44:	6013      	str	r3, [r2, #0]
    old_pos_dma %= sim_dma_buff_size; // ~ if(old_pos_dma >= sim_dma_buff_size) old_pos_dma -= sim_dma_buff_size;
 8008f46:	4b0e      	ldr	r3, [pc, #56]	; (8008f80 <sim7600_usart_rx_check+0x160>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a09      	ldr	r2, [pc, #36]	; (8008f70 <sim7600_usart_rx_check+0x150>)
 8008f4c:	6812      	ldr	r2, [r2, #0]
 8008f4e:	fb93 f1f2 	sdiv	r1, r3, r2
 8008f52:	fb02 f201 	mul.w	r2, r2, r1
 8008f56:	1a9b      	subs	r3, r3, r2
 8008f58:	4a09      	ldr	r2, [pc, #36]	; (8008f80 <sim7600_usart_rx_check+0x160>)
 8008f5a:	6013      	str	r3, [r2, #0]
  }

  SIM7600_RESUME_RX();
 8008f5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008f60:	4802      	ldr	r0, [pc, #8]	; (8008f6c <sim7600_usart_rx_check+0x14c>)
 8008f62:	f7ff f827 	bl	8007fb4 <LL_GPIO_ResetOutputPin>
}
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd90      	pop	{r4, r7, pc}
 8008f6c:	40020000 	.word	0x40020000
 8008f70:	20006574 	.word	0x20006574
 8008f74:	40026400 	.word	0x40026400
 8008f78:	200007e4 	.word	0x200007e4
 8008f7c:	20005920 	.word	0x20005920
 8008f80:	200007e0 	.word	0x200007e0
 8008f84:	20006580 	.word	0x20006580
 8008f88:	2000a020 	.word	0x2000a020
 8008f8c:	20006584 	.word	0x20006584

08008f90 <check_normal_response>:

//return 0 ~ success + continue, 1~ no success,2 ~ return sim_buff_index
//__STATIC_INLINE  ~ macro
int check_normal_response(uint8_t *posOfSubStr, const char *response, int *_sim_buff_index) //macro
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
  LOG_WRITE("chkRes\n");
  //simple because all data received is string
  *_sim_buff_index = posOfSubStr + strlen(response) - sim_buff; // + 2 for "\r\n"
 8008f9c:	68b8      	ldr	r0, [r7, #8]
 8008f9e:	f7f7 f917 	bl	80001d0 <strlen>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	4a04      	ldr	r2, [pc, #16]	; (8008fbc <check_normal_response+0x2c>)
 8008faa:	1a9a      	subs	r2, r3, r2
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	601a      	str	r2, [r3, #0]
  return 0;
 8008fb0:	2300      	movs	r3, #0
    //return _sim_buff_index; don't have enough data
  {
    LOG_WRITE("chkIp 2\n");
    return 2;
  }
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20006584 	.word	0x20006584

08008fc0 <check_normal_ip_packet>:

//return 0 ~ success + continue, 1~ no success (error),2 ~ return sim_buff_index (don't have enough data)
int check_normal_ip_packet(uint8_t *posOfSubStrSave, const char *response, int *_sim_buff_index, uint8_t **outputData, int *outputLen)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	603b      	str	r3, [r7, #0]
  LOG_WRITE("chkIpRes, %d, %x, resLen %d\n", *_sim_buff_index, posOfSubStrSave, strlen(response));
  //check whether have \r\n at buffer
  posOfSubStrSave += strlen(response);                      //point to length of IP packet (right after ",1," or ",0,")
 8008fce:	68b8      	ldr	r0, [r7, #8]
 8008fd0:	f7f7 f8fe 	bl	80001d0 <strlen>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	4413      	add	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]
  if(posOfSubStrSave >= (sim_buff + sim_buff_length))
 8008fdc:	4b32      	ldr	r3, [pc, #200]	; (80090a8 <check_normal_ip_packet+0xe8>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	4b32      	ldr	r3, [pc, #200]	; (80090ac <check_normal_ip_packet+0xec>)
 8008fe4:	4413      	add	r3, r2
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d301      	bcc.n	8008ff0 <check_normal_ip_packet+0x30>
  {
    LOG_WRITE("chkIpRes pos >= (sim_+ sim_b)\n");
    return 2;
 8008fec:	2302      	movs	r3, #2
 8008fee:	e056      	b.n	800909e <check_normal_ip_packet+0xde>
  }
  uint8_t *pointerTo_r_n = strstr(posOfSubStrSave, "\r"); //point to '\r'
 8008ff0:	210d      	movs	r1, #13
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f018 f8d9 	bl	80211aa <strchr>
 8008ff8:	61b8      	str	r0, [r7, #24]
  //in the worst case ',' after  "+RECEIVE,1" is last character of sim_buff
  // ->  posOfSubStrSave point to sim_buff[sim_buff_length] = '\0' (initialize above) -> pointerTo_r_n == NULL
  if (pointerTo_r_n != NULL && (pointerTo_r_n - posOfSubStrSave) <= 4) //,0,1500\r\n
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d042      	beq.n	8009086 <check_normal_ip_packet+0xc6>
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b04      	cmp	r3, #4
 8009008:	dc3d      	bgt.n	8009086 <check_normal_ip_packet+0xc6>
  {
    int lengthOfIPPacket = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	61fb      	str	r3, [r7, #28]
    while (posOfSubStrSave < pointerTo_r_n)
 800900e:	e018      	b.n	8009042 <check_normal_ip_packet+0x82>
    { //make sure break when meet '\r'
      char numberTmp = (char)(*posOfSubStrSave);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	75fb      	strb	r3, [r7, #23]
      if (numberTmp >= '0' && numberTmp <= '9')
 8009016:	7dfb      	ldrb	r3, [r7, #23]
 8009018:	2b2f      	cmp	r3, #47	; 0x2f
 800901a:	d910      	bls.n	800903e <check_normal_ip_packet+0x7e>
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	2b39      	cmp	r3, #57	; 0x39
 8009020:	d80d      	bhi.n	800903e <check_normal_ip_packet+0x7e>
      {
        lengthOfIPPacket = lengthOfIPPacket * 10 + numberTmp - '0';
 8009022:	69fa      	ldr	r2, [r7, #28]
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	461a      	mov	r2, r3
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	4413      	add	r3, r2
 8009032:	3b30      	subs	r3, #48	; 0x30
 8009034:	61fb      	str	r3, [r7, #28]
      else
      { //data maybe bit-error -> restart
        LOG_WRITE("chkIpRes Err1\n");
        return 1;
      }
      posOfSubStrSave++;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3301      	adds	r3, #1
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	e001      	b.n	8009042 <check_normal_ip_packet+0x82>
        return 1;
 800903e:	2301      	movs	r3, #1
 8009040:	e02d      	b.n	800909e <check_normal_ip_packet+0xde>
    while (posOfSubStrSave < pointerTo_r_n)
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	429a      	cmp	r2, r3
 8009048:	d3e2      	bcc.n	8009010 <check_normal_ip_packet+0x50>
    }
    posOfSubStrSave += 2;                                                //point to data
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3302      	adds	r3, #2
 800904e:	60fb      	str	r3, [r7, #12]
    if (posOfSubStrSave + lengthOfIPPacket > sim_buff + sim_buff_length) // don't have enough data
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	441a      	add	r2, r3
 8009056:	4b14      	ldr	r3, [pc, #80]	; (80090a8 <check_normal_ip_packet+0xe8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4619      	mov	r1, r3
 800905c:	4b13      	ldr	r3, [pc, #76]	; (80090ac <check_normal_ip_packet+0xec>)
 800905e:	440b      	add	r3, r1
 8009060:	429a      	cmp	r2, r3
 8009062:	d901      	bls.n	8009068 <check_normal_ip_packet+0xa8>
    {
      return 2;
 8009064:	2302      	movs	r3, #2
 8009066:	e01a      	b.n	800909e <check_normal_ip_packet+0xde>
    }
    //else data is sastified
    *outputData = posOfSubStrSave;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	601a      	str	r2, [r3, #0]
    *outputLen = lengthOfIPPacket;
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	69fa      	ldr	r2, [r7, #28]
 8009072:	601a      	str	r2, [r3, #0]
    *_sim_buff_index = posOfSubStrSave - sim_buff + lengthOfIPPacket;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4a0d      	ldr	r2, [pc, #52]	; (80090ac <check_normal_ip_packet+0xec>)
 8009078:	1a9a      	subs	r2, r3, r2
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	441a      	add	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	601a      	str	r2, [r3, #0]
    LOG_WRITE("ipPacket len %d\n", lengthOfIPPacket);
    return 0;
 8009082:	2300      	movs	r3, #0
 8009084:	e00b      	b.n	800909e <check_normal_ip_packet+0xde>
  }
  else if (posOfSubStrSave + 6 < sim_buff + sim_buff_length) //the worst case: +RECEIVE,1,1500\r\n
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	1d9a      	adds	r2, r3, #6
 800908a:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <check_normal_ip_packet+0xe8>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4619      	mov	r1, r3
 8009090:	4b06      	ldr	r3, [pc, #24]	; (80090ac <check_normal_ip_packet+0xec>)
 8009092:	440b      	add	r3, r1
 8009094:	429a      	cmp	r2, r3
 8009096:	d201      	bcs.n	800909c <check_normal_ip_packet+0xdc>
  {
    //data may be error-bit
    LOG_WRITE("chkIpRes Err2\n");
    return 1;
 8009098:	2301      	movs	r3, #1
 800909a:	e000      	b.n	800909e <check_normal_ip_packet+0xde>
  }
  else
    return 2; //dont have enough data
 800909c:	2302      	movs	r3, #2
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3720      	adds	r7, #32
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20006580 	.word	0x20006580
 80090ac:	20006584 	.word	0x20006584

080090b0 <sim7600_handle_received_data>:

// "+CIPERROR",   //6 send IP packet error

 //handle received data, return num of bytes handled
int sim7600_handle_received_data()
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08e      	sub	sp, #56	; 0x38
 80090b4:	af02      	add	r7, sp, #8
  LOG_WRITE("simHdlRecv\n");
  //make sure sim_buff is string
  sim_buff[sim_buff_length] = '\0'; //can do this since real size of sim_buff = sim_buff_size + 1, so even sim_buff_length (max) = sim_buff_size, it is still oke
 80090b6:	4ba4      	ldr	r3, [pc, #656]	; (8009348 <sim7600_handle_received_data+0x298>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4aa4      	ldr	r2, [pc, #656]	; (800934c <sim7600_handle_received_data+0x29c>)
 80090bc:	2100      	movs	r1, #0
 80090be:	54d1      	strb	r1, [r2, r3]
  uint8_t *posOfSubStr;
  uint8_t *posOfSubStrSave;
  int sim_buff_index = 0;
 80090c0:	2300      	movs	r3, #0
 80090c2:	617b      	str	r3, [r7, #20]
  // }

  //can do this, since all data is string
  // if ((strstr(sim_buff, "CPIN: READY") != NULL) &&
  //         (strstr(sim_buff, "SMS DONE") != NULL) && 
  if(strstr(sim_buff, "PB DONE") != NULL)
 80090c4:	49a2      	ldr	r1, [pc, #648]	; (8009350 <sim7600_handle_received_data+0x2a0>)
 80090c6:	48a1      	ldr	r0, [pc, #644]	; (800934c <sim7600_handle_received_data+0x29c>)
 80090c8:	f018 f87c 	bl	80211c4 <strstr>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d008      	beq.n	80090e4 <sim7600_handle_received_data+0x34>
  {
    LOG_WRITE("sim is rebooted\n");
    osEventFlagsSet(ConfigSimEventID, 1 << rebootEnum);
 80090d2:	4ba0      	ldr	r3, [pc, #640]	; (8009354 <sim7600_handle_received_data+0x2a4>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2108      	movs	r1, #8
 80090d8:	4618      	mov	r0, r3
 80090da:	f002 facf 	bl	800b67c <osEventFlagsSet>
    return sim_buff_length;
 80090de:	4b9a      	ldr	r3, [pc, #616]	; (8009348 <sim7600_handle_received_data+0x298>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	e19c      	b.n	800941e <sim7600_handle_received_data+0x36e>
  }

  while (true)
  {
    LOG_WRITE("sim_buff_index %d\n", sim_buff_index);
    posOfSubStrSave = NULL;
 80090e4:	2300      	movs	r3, #0
 80090e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sim_buff_index == sim_buff_length)
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	4b97      	ldr	r3, [pc, #604]	; (8009348 <sim7600_handle_received_data+0x298>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d102      	bne.n	80090f8 <sim7600_handle_received_data+0x48>
      return sim_buff_length; //reach end of buff
 80090f2:	4b95      	ldr	r3, [pc, #596]	; (8009348 <sim7600_handle_received_data+0x298>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	e192      	b.n	800941e <sim7600_handle_received_data+0x36e>
    else if(sim_buff_index > sim_buff_length) //out of index
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	4b93      	ldr	r3, [pc, #588]	; (8009348 <sim7600_handle_received_data+0x298>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	429a      	cmp	r2, r3
 8009100:	dd02      	ble.n	8009108 <sim7600_handle_received_data+0x58>
    {
      //something wrong
      LOG_WRITE("return sim_buff_index error\n");
      return sim_buff_length;
 8009102:	4b91      	ldr	r3, [pc, #580]	; (8009348 <sim7600_handle_received_data+0x298>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	e18a      	b.n	800941e <sim7600_handle_received_data+0x36e>
    }

    int resultCheck = -1;
 8009108:	f04f 33ff 	mov.w	r3, #4294967295
 800910c:	62bb      	str	r3, [r7, #40]	; 0x28
    //first check cmd response
    const char *checkCmdResPtr;
    if (cmdSendStatus == 1)
 800910e:	4b92      	ldr	r3, [pc, #584]	; (8009358 <sim7600_handle_received_data+0x2a8>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d139      	bne.n	800918a <sim7600_handle_received_data+0xda>
    {
      if (res1 != NULL)
 8009116:	4b91      	ldr	r3, [pc, #580]	; (800935c <sim7600_handle_received_data+0x2ac>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d014      	beq.n	8009148 <sim7600_handle_received_data+0x98>
      {
        posOfSubStr = strstr(sim_buff + sim_buff_index, res1);
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	461a      	mov	r2, r3
 8009122:	4b8a      	ldr	r3, [pc, #552]	; (800934c <sim7600_handle_received_data+0x29c>)
 8009124:	4413      	add	r3, r2
 8009126:	4a8d      	ldr	r2, [pc, #564]	; (800935c <sim7600_handle_received_data+0x2ac>)
 8009128:	6812      	ldr	r2, [r2, #0]
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f018 f849 	bl	80211c4 <strstr>
 8009132:	61b8      	str	r0, [r7, #24]
        if (posOfSubStr != NULL)
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d006      	beq.n	8009148 <sim7600_handle_received_data+0x98>
        {
          posOfSubStrSave = posOfSubStr;
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	62fb      	str	r3, [r7, #44]	; 0x2c
          checkCmdResPtr = res1;
 800913e:	4b87      	ldr	r3, [pc, #540]	; (800935c <sim7600_handle_received_data+0x2ac>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
          resultCheck = LIST_RESPONSE_SIZE;
 8009144:	2306      	movs	r3, #6
 8009146:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
      if (res2 != NULL)
 8009148:	4b85      	ldr	r3, [pc, #532]	; (8009360 <sim7600_handle_received_data+0x2b0>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d030      	beq.n	80091b2 <sim7600_handle_received_data+0x102>
      {
        posOfSubStr = strstr(sim_buff + sim_buff_index, res2);
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	461a      	mov	r2, r3
 8009154:	4b7d      	ldr	r3, [pc, #500]	; (800934c <sim7600_handle_received_data+0x29c>)
 8009156:	4413      	add	r3, r2
 8009158:	4a81      	ldr	r2, [pc, #516]	; (8009360 <sim7600_handle_received_data+0x2b0>)
 800915a:	6812      	ldr	r2, [r2, #0]
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f018 f830 	bl	80211c4 <strstr>
 8009164:	61b8      	str	r0, [r7, #24]
        if (posOfSubStr != NULL && (posOfSubStr < posOfSubStrSave || posOfSubStrSave == NULL))
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d022      	beq.n	80091b2 <sim7600_handle_received_data+0x102>
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009170:	429a      	cmp	r2, r3
 8009172:	d302      	bcc.n	800917a <sim7600_handle_received_data+0xca>
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d11b      	bne.n	80091b2 <sim7600_handle_received_data+0x102>
        {
          posOfSubStrSave = posOfSubStr;
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	62fb      	str	r3, [r7, #44]	; 0x2c
          checkCmdResPtr = res2;
 800917e:	4b78      	ldr	r3, [pc, #480]	; (8009360 <sim7600_handle_received_data+0x2b0>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	627b      	str	r3, [r7, #36]	; 0x24
          resultCheck = LIST_RESPONSE_SIZE;
 8009184:	2306      	movs	r3, #6
 8009186:	62bb      	str	r3, [r7, #40]	; 0x28
 8009188:	e013      	b.n	80091b2 <sim7600_handle_received_data+0x102>
        }
      }
    }
    else if (cmdSendStatus == 2)
 800918a:	4b73      	ldr	r3, [pc, #460]	; (8009358 <sim7600_handle_received_data+0x2a8>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d10f      	bne.n	80091b2 <sim7600_handle_received_data+0x102>
    {
      posOfSubStr = strstr(sim_buff + sim_buff_index, ">");
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	461a      	mov	r2, r3
 8009196:	4b6d      	ldr	r3, [pc, #436]	; (800934c <sim7600_handle_received_data+0x29c>)
 8009198:	4413      	add	r3, r2
 800919a:	213e      	movs	r1, #62	; 0x3e
 800919c:	4618      	mov	r0, r3
 800919e:	f018 f804 	bl	80211aa <strchr>
 80091a2:	61b8      	str	r0, [r7, #24]
      if (posOfSubStr != NULL)
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <sim7600_handle_received_data+0x102>
      {
        posOfSubStrSave = posOfSubStr;
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        resultCheck = LIST_RESPONSE_SIZE;
 80091ae:	2306      	movs	r3, #6
 80091b0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }

    //check in list
    for (int i = 0; i < LIST_RESPONSE_SIZE; i++)
 80091b2:	2300      	movs	r3, #0
 80091b4:	623b      	str	r3, [r7, #32]
 80091b6:	e01f      	b.n	80091f8 <sim7600_handle_received_data+0x148>
    {
      posOfSubStr = strstr(sim_buff + sim_buff_index, listResponse[i]);
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	461a      	mov	r2, r3
 80091bc:	4b63      	ldr	r3, [pc, #396]	; (800934c <sim7600_handle_received_data+0x29c>)
 80091be:	18d0      	adds	r0, r2, r3
 80091c0:	6a3a      	ldr	r2, [r7, #32]
 80091c2:	4613      	mov	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4a66      	ldr	r2, [pc, #408]	; (8009364 <sim7600_handle_received_data+0x2b4>)
 80091cc:	4413      	add	r3, r2
 80091ce:	4619      	mov	r1, r3
 80091d0:	f017 fff8 	bl	80211c4 <strstr>
 80091d4:	61b8      	str	r0, [r7, #24]
      if (posOfSubStr != NULL && (posOfSubStr < posOfSubStrSave || posOfSubStrSave == NULL))
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00a      	beq.n	80091f2 <sim7600_handle_received_data+0x142>
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d302      	bcc.n	80091ea <sim7600_handle_received_data+0x13a>
 80091e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d103      	bne.n	80091f2 <sim7600_handle_received_data+0x142>
      {
        posOfSubStrSave = posOfSubStr;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        resultCheck = i;
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < LIST_RESPONSE_SIZE; i++)
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	3301      	adds	r3, #1
 80091f6:	623b      	str	r3, [r7, #32]
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	2b05      	cmp	r3, #5
 80091fc:	dddc      	ble.n	80091b8 <sim7600_handle_received_data+0x108>
      }
    }

    LOG_WRITE("resCheck %d, cmdStt %d\n", resultCheck, cmdSendStatus);
    int resultTmp = -1;
 80091fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009202:	61fb      	str	r3, [r7, #28]
    if (resultCheck < 0) // nothing can find
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	2b00      	cmp	r3, #0
 8009208:	da0a      	bge.n	8009220 <sim7600_handle_received_data+0x170>
    {
      if((sim_buff_length - sim_buff_index) > 100)
 800920a:	4b4f      	ldr	r3, [pc, #316]	; (8009348 <sim7600_handle_received_data+0x298>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	2b64      	cmp	r3, #100	; 0x64
 8009214:	f340 80f7 	ble.w	8009406 <sim7600_handle_received_data+0x356>
      {
        resultTmp = -1;
 8009218:	f04f 33ff 	mov.w	r3, #4294967295
 800921c:	61fb      	str	r3, [r7, #28]
 800921e:	e0f2      	b.n	8009406 <sim7600_handle_received_data+0x356>
      }
    }                          

    else if (resultCheck == 0) //udp received
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	2b00      	cmp	r3, #0
 8009224:	d11d      	bne.n	8009262 <sim7600_handle_received_data+0x1b2>
    {
      uint8_t *udpData;
      int udpDataLen;
      resultTmp = check_normal_ip_packet(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index, &udpData, &udpDataLen);
 8009226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009228:	4613      	mov	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4a4c      	ldr	r2, [pc, #304]	; (8009364 <sim7600_handle_received_data+0x2b4>)
 8009232:	1899      	adds	r1, r3, r2
 8009234:	f107 0010 	add.w	r0, r7, #16
 8009238:	f107 0214 	add.w	r2, r7, #20
 800923c:	f107 030c 	add.w	r3, r7, #12
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	4603      	mov	r3, r0
 8009244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009246:	f7ff febb 	bl	8008fc0 <check_normal_ip_packet>
 800924a:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0)
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b00      	cmp	r3, #0
 8009250:	f040 80d9 	bne.w	8009406 <sim7600_handle_received_data+0x356>
      {
        UDP_Packet_Analyze(udpData, udpDataLen);
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f000 fd3e 	bl	8009cdc <UDP_Packet_Analyze>
 8009260:	e740      	b.n	80090e4 <sim7600_handle_received_data+0x34>
        continue;
      }
    }
    else if (resultCheck == 1) //1 net error
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	2b01      	cmp	r3, #1
 8009266:	d118      	bne.n	800929a <sim7600_handle_received_data+0x1ea>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8009268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4a3c      	ldr	r2, [pc, #240]	; (8009364 <sim7600_handle_received_data+0x2b4>)
 8009274:	4413      	add	r3, r2
 8009276:	f107 0214 	add.w	r2, r7, #20
 800927a:	4619      	mov	r1, r3
 800927c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800927e:	f7ff fe87 	bl	8008f90 <check_normal_response>
 8009282:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	2b00      	cmp	r3, #0
 8009288:	f040 80bd 	bne.w	8009406 <sim7600_handle_received_data+0x356>
      {
        //sim7600 error, handle in a task sim7600 config task
        osEventFlagsSet(ConnectSimEventID, 1 << netErrorEnum);
 800928c:	4b36      	ldr	r3, [pc, #216]	; (8009368 <sim7600_handle_received_data+0x2b8>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2108      	movs	r1, #8
 8009292:	4618      	mov	r0, r3
 8009294:	f002 f9f2 	bl	800b67c <osEventFlagsSet>
        continue;
 8009298:	e0c0      	b.n	800941c <sim7600_handle_received_data+0x36c>
      }
    }
    else if (resultCheck == 2) //2 udp/tcp closed , reconnect
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	2b02      	cmp	r3, #2
 800929e:	d118      	bne.n	80092d2 <sim7600_handle_received_data+0x222>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 80092a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092a2:	4613      	mov	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4a2e      	ldr	r2, [pc, #184]	; (8009364 <sim7600_handle_received_data+0x2b4>)
 80092ac:	4413      	add	r3, r2
 80092ae:	f107 0214 	add.w	r2, r7, #20
 80092b2:	4619      	mov	r1, r3
 80092b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092b6:	f7ff fe6b 	bl	8008f90 <check_normal_response>
 80092ba:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f040 80a1 	bne.w	8009406 <sim7600_handle_received_data+0x356>
      {
        osEventFlagsSet(ConnectSimEventID, 1 << ipCloseEnum); //notify connectTask that need to reconnect
 80092c4:	4b28      	ldr	r3, [pc, #160]	; (8009368 <sim7600_handle_received_data+0x2b8>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2110      	movs	r1, #16
 80092ca:	4618      	mov	r0, r3
 80092cc:	f002 f9d6 	bl	800b67c <osEventFlagsSet>
        continue;
 80092d0:	e0a4      	b.n	800941c <sim7600_handle_received_data+0x36c>
      }
    }
    else if (resultCheck == 3) //3 received TCP packet
 80092d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d11c      	bne.n	8009312 <sim7600_handle_received_data+0x262>
    {
      uint8_t *tcpData;
      int tcpDataLen;
      resultTmp = check_normal_ip_packet(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index, &tcpData, &tcpDataLen);
 80092d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4a20      	ldr	r2, [pc, #128]	; (8009364 <sim7600_handle_received_data+0x2b4>)
 80092e4:	1899      	adds	r1, r3, r2
 80092e6:	f107 0008 	add.w	r0, r7, #8
 80092ea:	f107 0214 	add.w	r2, r7, #20
 80092ee:	1d3b      	adds	r3, r7, #4
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	4603      	mov	r3, r0
 80092f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092f6:	f7ff fe63 	bl	8008fc0 <check_normal_ip_packet>
 80092fa:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0)
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f040 8081 	bne.w	8009406 <sim7600_handle_received_data+0x356>
      {
        TCP_Packet_Analyze(tcpData, tcpDataLen);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	4611      	mov	r1, r2
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fc1c 	bl	8009b48 <TCP_Packet_Analyze>
 8009310:	e6e8      	b.n	80090e4 <sim7600_handle_received_data+0x34>
        continue;
      }
    }
    else if (resultCheck == 4) //4 call
 8009312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009314:	2b04      	cmp	r3, #4
 8009316:	d129      	bne.n	800936c <sim7600_handle_received_data+0x2bc>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8009318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800931a:	4613      	mov	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4a10      	ldr	r2, [pc, #64]	; (8009364 <sim7600_handle_received_data+0x2b4>)
 8009324:	4413      	add	r3, r2
 8009326:	f107 0214 	add.w	r2, r7, #20
 800932a:	4619      	mov	r1, r3
 800932c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800932e:	f7ff fe2f 	bl	8008f90 <check_normal_response>
 8009332:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d165      	bne.n	8009406 <sim7600_handle_received_data+0x356>
      {
        osEventFlagsSet(ConfigSimEventID, 1 << callingEnum); //notify configTask to hang-up
 800933a:	4b06      	ldr	r3, [pc, #24]	; (8009354 <sim7600_handle_received_data+0x2a4>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2102      	movs	r1, #2
 8009340:	4618      	mov	r0, r3
 8009342:	f002 f99b 	bl	800b67c <osEventFlagsSet>
        continue;
 8009346:	e069      	b.n	800941c <sim7600_handle_received_data+0x36c>
 8009348:	20006580 	.word	0x20006580
 800934c:	20006584 	.word	0x20006584
 8009350:	08022754 	.word	0x08022754
 8009354:	20005920 	.word	0x20005920
 8009358:	200007c8 	.word	0x200007c8
 800935c:	2000657c 	.word	0x2000657c
 8009360:	20006570 	.word	0x20006570
 8009364:	200002ac 	.word	0x200002ac
 8009368:	20005924 	.word	0x20005924
      }
    }
    else if (resultCheck == 5) //sms
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	2b05      	cmp	r3, #5
 8009370:	d117      	bne.n	80093a2 <sim7600_handle_received_data+0x2f2>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8009372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009374:	4613      	mov	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4a2a      	ldr	r2, [pc, #168]	; (8009428 <sim7600_handle_received_data+0x378>)
 800937e:	4413      	add	r3, r2
 8009380:	f107 0214 	add.w	r2, r7, #20
 8009384:	4619      	mov	r1, r3
 8009386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009388:	f7ff fe02 	bl	8008f90 <check_normal_response>
 800938c:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d138      	bne.n	8009406 <sim7600_handle_received_data+0x356>
      {
        osEventFlagsSet(ConfigSimEventID, 1 << smsEnum); //notify configTask to hang up
 8009394:	4b25      	ldr	r3, [pc, #148]	; (800942c <sim7600_handle_received_data+0x37c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2101      	movs	r1, #1
 800939a:	4618      	mov	r0, r3
 800939c:	f002 f96e 	bl	800b67c <osEventFlagsSet>
        continue;
 80093a0:	e03c      	b.n	800941c <sim7600_handle_received_data+0x36c>
      }
    }
    else //cmd check
    {
      LOG_WRITE("cmdSendStt %d\n", cmdSendStatus);
      if (cmdSendStatus == 2)
 80093a2:	4b23      	ldr	r3, [pc, #140]	; (8009430 <sim7600_handle_received_data+0x380>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d10b      	bne.n	80093c2 <sim7600_handle_received_data+0x312>
      {                                      //just need '>'
        osEventFlagsSet(SendSimEventID, 1U); //notify to send task
 80093aa:	4b22      	ldr	r3, [pc, #136]	; (8009434 <sim7600_handle_received_data+0x384>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2101      	movs	r1, #1
 80093b0:	4618      	mov	r0, r3
 80093b2:	f002 f963 	bl	800b67c <osEventFlagsSet>
        // osThreadYield();
        //change sim_buff_index
        sim_buff_index = posOfSubStrSave - sim_buff + 1; // + 1 for ">"
 80093b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b8:	4a1f      	ldr	r2, [pc, #124]	; (8009438 <sim7600_handle_received_data+0x388>)
 80093ba:	1a9b      	subs	r3, r3, r2
 80093bc:	3301      	adds	r3, #1
 80093be:	617b      	str	r3, [r7, #20]
        continue;
 80093c0:	e02c      	b.n	800941c <sim7600_handle_received_data+0x36c>
      }
      else if (cmdSendStatus == 1)
 80093c2:	4b1b      	ldr	r3, [pc, #108]	; (8009430 <sim7600_handle_received_data+0x380>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d11d      	bne.n	8009406 <sim7600_handle_received_data+0x356>
      {
        //check whether have \r\n at the end of this response
        resultTmp = check_normal_response(posOfSubStrSave, checkCmdResPtr, &sim_buff_index);
 80093ca:	f107 0314 	add.w	r3, r7, #20
 80093ce:	461a      	mov	r2, r3
 80093d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093d4:	f7ff fddc 	bl	8008f90 <check_normal_response>
 80093d8:	61f8      	str	r0, [r7, #28]
        if (resultTmp == 0)
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d112      	bne.n	8009406 <sim7600_handle_received_data+0x356>
        {
          //notify to send task
          if (checkCmdResPtr == res1)
 80093e0:	4b16      	ldr	r3, [pc, #88]	; (800943c <sim7600_handle_received_data+0x38c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d106      	bne.n	80093f8 <sim7600_handle_received_data+0x348>
          {
            osEventFlagsSet(SendSimEventID, 1U);
 80093ea:	4b12      	ldr	r3, [pc, #72]	; (8009434 <sim7600_handle_received_data+0x384>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2101      	movs	r1, #1
 80093f0:	4618      	mov	r0, r3
 80093f2:	f002 f943 	bl	800b67c <osEventFlagsSet>
          }
          else
          {
            osEventFlagsSet(SendSimEventID, 2U);
          }
          continue;
 80093f6:	e011      	b.n	800941c <sim7600_handle_received_data+0x36c>
            osEventFlagsSet(SendSimEventID, 2U);
 80093f8:	4b0e      	ldr	r3, [pc, #56]	; (8009434 <sim7600_handle_received_data+0x384>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2102      	movs	r1, #2
 80093fe:	4618      	mov	r0, r3
 8009400:	f002 f93c 	bl	800b67c <osEventFlagsSet>
          continue;
 8009404:	e00a      	b.n	800941c <sim7600_handle_received_data+0x36c>
      }
    }

    LOG_WRITE("resultTmp %d\n", resultTmp);
    //data or net error, need to start
    if (resultTmp == 1)
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d105      	bne.n	8009418 <sim7600_handle_received_data+0x368>
    {
      //error need to start
      osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //notify configTask to restart and re config
 800940c:	4b07      	ldr	r3, [pc, #28]	; (800942c <sim7600_handle_received_data+0x37c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2104      	movs	r1, #4
 8009412:	4618      	mov	r0, r3
 8009414:	f002 f932 	bl	800b67c <osEventFlagsSet>
    }
    //dont have enough data
    //else if(resultTmp == 2) return sim_buff_index;
    return sim_buff_index;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	e000      	b.n	800941e <sim7600_handle_received_data+0x36e>
  {
 800941c:	e662      	b.n	80090e4 <sim7600_handle_received_data+0x34>
  //     }
  //   }
  //   break; //if can't find \r\n .. \r\n sastified
  // }
  // return sim_buff_index;
}
 800941e:	4618      	mov	r0, r3
 8009420:	3730      	adds	r7, #48	; 0x30
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	200002ac 	.word	0x200002ac
 800942c:	20005920 	.word	0x20005920
 8009430:	200007c8 	.word	0x200007c8
 8009434:	20005908 	.word	0x20005908
 8009438:	20006584 	.word	0x20006584
 800943c:	2000657c 	.word	0x2000657c

08009440 <sim7600_change_baud>:
//   if(checksum == sim7600_check_sum_data(tcpPacket, length - 2)) return true;
//   return false;
// }

void sim7600_change_baud(uint32_t baudrate)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  LOG_WRITE("changeBaud %lu\n", baudrate);
  LL_USART_Disable(USART1);
 8009448:	4807      	ldr	r0, [pc, #28]	; (8009468 <sim7600_change_baud+0x28>)
 800944a:	f7fe fb77 	bl	8007b3c <LL_USART_Disable>
  sim7600SetBaudrate(baudrate);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	4906      	ldr	r1, [pc, #24]	; (800946c <sim7600_change_baud+0x2c>)
 8009454:	4804      	ldr	r0, [pc, #16]	; (8009468 <sim7600_change_baud+0x28>)
 8009456:	f7fe fb95 	bl	8007b84 <LL_USART_SetBaudRate>
  LL_USART_Enable(USART1);
 800945a:	4803      	ldr	r0, [pc, #12]	; (8009468 <sim7600_change_baud+0x28>)
 800945c:	f7fe fb5e 	bl	8007b1c <LL_USART_Enable>
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	40011000 	.word	0x40011000
 800946c:	0501bd00 	.word	0x0501bd00

08009470 <sim7600_reset_all_state>:
//restart/reset module
//1st use pwr pin
//2nd use rst pin

void sim7600_reset_all_state()
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
  connectToHostCount = 0;
 8009474:	4b13      	ldr	r3, [pc, #76]	; (80094c4 <sim7600_reset_all_state+0x54>)
 8009476:	2200      	movs	r2, #0
 8009478:	601a      	str	r2, [r3, #0]

  sim7600ConnectStatus = 0;
 800947a:	4b13      	ldr	r3, [pc, #76]	; (80094c8 <sim7600_reset_all_state+0x58>)
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]

  //clear event
  osEventFlagsClear(ConfigSimEventID, 0xFF);
 8009480:	4b12      	ldr	r3, [pc, #72]	; (80094cc <sim7600_reset_all_state+0x5c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	21ff      	movs	r1, #255	; 0xff
 8009486:	4618      	mov	r0, r3
 8009488:	f002 f93c 	bl	800b704 <osEventFlagsClear>
  osEventFlagsClear(ConnectSimEventID, 0xFF);
 800948c:	4b10      	ldr	r3, [pc, #64]	; (80094d0 <sim7600_reset_all_state+0x60>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	21ff      	movs	r1, #255	; 0xff
 8009492:	4618      	mov	r0, r3
 8009494:	f002 f936 	bl	800b704 <osEventFlagsClear>

  //clear message queue
  osMessageQueueReset(SendSimQueueID);
 8009498:	4b0e      	ldr	r3, [pc, #56]	; (80094d4 <sim7600_reset_all_state+0x64>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4618      	mov	r0, r3
 800949e:	f002 fd8d 	bl	800bfbc <osMessageQueueReset>

  cmdSendStatus = 0;
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <sim7600_reset_all_state+0x68>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]
  osEventFlagsClear(SendSimEventID, 0xFF);
 80094a8:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <sim7600_reset_all_state+0x6c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	21ff      	movs	r1, #255	; 0xff
 80094ae:	4618      	mov	r0, r3
 80094b0:	f002 f928 	bl	800b704 <osEventFlagsClear>

  old_pos_dma = 0;
 80094b4:	4b0a      	ldr	r3, [pc, #40]	; (80094e0 <sim7600_reset_all_state+0x70>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
  new_pos_dma = 0;
 80094ba:	4b0a      	ldr	r3, [pc, #40]	; (80094e4 <sim7600_reset_all_state+0x74>)
 80094bc:	2200      	movs	r2, #0
 80094be:	601a      	str	r2, [r3, #0]
}
 80094c0:	bf00      	nop
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	200007c0 	.word	0x200007c0
 80094c8:	200007d0 	.word	0x200007d0
 80094cc:	20005920 	.word	0x20005920
 80094d0:	20005924 	.word	0x20005924
 80094d4:	2000592c 	.word	0x2000592c
 80094d8:	200007c8 	.word	0x200007c8
 80094dc:	20005908 	.word	0x20005908
 80094e0:	200007e0 	.word	0x200007e0
 80094e4:	200007e4 	.word	0x200007e4

080094e8 <sim7600_restart>:

void sim7600_restart()
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
  // {
  //   /* code */
  // }
  

  LL_USART_Disable(USART1);
 80094ec:	4828      	ldr	r0, [pc, #160]	; (8009590 <sim7600_restart+0xa8>)
 80094ee:	f7fe fb25 	bl	8007b3c <LL_USART_Disable>
  while (LL_USART_IsEnabled(USART1)); //waite until En bit == 0
 80094f2:	bf00      	nop
 80094f4:	4826      	ldr	r0, [pc, #152]	; (8009590 <sim7600_restart+0xa8>)
 80094f6:	f7fe fb31 	bl	8007b5c <LL_USART_IsEnabled>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f9      	bne.n	80094f4 <sim7600_restart+0xc>
  
  //disable DMA
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 8009500:	2102      	movs	r1, #2
 8009502:	4824      	ldr	r0, [pc, #144]	; (8009594 <sim7600_restart+0xac>)
 8009504:	f7fe f8f4 	bl	80076f0 <LL_DMA_DisableStream>
  while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 8009508:	bf00      	nop
 800950a:	2102      	movs	r1, #2
 800950c:	4821      	ldr	r0, [pc, #132]	; (8009594 <sim7600_restart+0xac>)
 800950e:	f7fe f90f 	bl	8007730 <LL_DMA_IsEnabledStream>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1f8      	bne.n	800950a <sim7600_restart+0x22>
    ; //wait until En bit == 0

  //reset global var
  sim7600_reset_all_state();
 8009518:	f7ff ffaa 	bl	8009470 <sim7600_reset_all_state>

  if (restartSimstatus < MAX_NUM_RESTART_SIM7600) //0-19
 800951c:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <sim7600_restart+0xb0>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b13      	cmp	r3, #19
 8009522:	dc07      	bgt.n	8009534 <sim7600_restart+0x4c>
  {
    //use pwr pin to power off
    sim7600_powerOFF();
 8009524:	f7fe fda2 	bl	800806c <sim7600_powerOFF>
    restartSimstatus++;
 8009528:	4b1b      	ldr	r3, [pc, #108]	; (8009598 <sim7600_restart+0xb0>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3301      	adds	r3, #1
 800952e:	4a1a      	ldr	r2, [pc, #104]	; (8009598 <sim7600_restart+0xb0>)
 8009530:	6013      	str	r3, [r2, #0]
 8009532:	e013      	b.n	800955c <sim7600_restart+0x74>
  }
  else if (restartSimstatus < (MAX_NUM_RESTART_SIM7600 + MAX_NUM_RESET_SIM7600)) // 20-21
 8009534:	4b18      	ldr	r3, [pc, #96]	; (8009598 <sim7600_restart+0xb0>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b15      	cmp	r3, #21
 800953a:	dc09      	bgt.n	8009550 <sim7600_restart+0x68>
  {
    sim7600_reset();
 800953c:	f7fe fde2 	bl	8008104 <sim7600_reset>
    sim7600_powerOFF();
 8009540:	f7fe fd94 	bl	800806c <sim7600_powerOFF>
    restartSimstatus++;
 8009544:	4b14      	ldr	r3, [pc, #80]	; (8009598 <sim7600_restart+0xb0>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3301      	adds	r3, #1
 800954a:	4a13      	ldr	r2, [pc, #76]	; (8009598 <sim7600_restart+0xb0>)
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	e005      	b.n	800955c <sim7600_restart+0x74>
  }
  else // >=22
  {
    //delay to wait
    osDelay(SLEEP_MINUTES_SIM7600 * 60 * 1000); // SLEEP_MINUTES_SIM7600 minutes
 8009550:	4812      	ldr	r0, [pc, #72]	; (800959c <sim7600_restart+0xb4>)
 8009552:	f001 ff42 	bl	800b3da <osDelay>
    restartSimstatus = 0;
 8009556:	4b10      	ldr	r3, [pc, #64]	; (8009598 <sim7600_restart+0xb0>)
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]
  }

  //reset global var
  sim7600_reset_all_state();
 800955c:	f7ff ff88 	bl	8009470 <sim7600_reset_all_state>

  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8009560:	2102      	movs	r1, #2
 8009562:	480c      	ldr	r0, [pc, #48]	; (8009594 <sim7600_restart+0xac>)
 8009564:	f7fe f8a4 	bl	80076b0 <LL_DMA_EnableStream>
  while (!LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 8009568:	bf00      	nop
 800956a:	2102      	movs	r1, #2
 800956c:	4809      	ldr	r0, [pc, #36]	; (8009594 <sim7600_restart+0xac>)
 800956e:	f7fe f8df 	bl	8007730 <LL_DMA_IsEnabledStream>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d0f8      	beq.n	800956a <sim7600_restart+0x82>
    ; //wait until En bit == 1

  //change baud rate to default
  sim7600_change_baud(SIM7600_BAUDRATE_DEFAULT); // in this function usart is enable again
 8009578:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800957c:	f7ff ff60 	bl	8009440 <sim7600_change_baud>
  LL_USART_Enable(USART1);
 8009580:	4803      	ldr	r0, [pc, #12]	; (8009590 <sim7600_restart+0xa8>)
 8009582:	f7fe facb 	bl	8007b1c <LL_USART_Enable>

  //power on again
  sim7600_powerON();
 8009586:	f7fe fd25 	bl	8007fd4 <sim7600_powerON>

  //resume all task
}
 800958a:	bf00      	nop
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	40011000 	.word	0x40011000
 8009594:	40026400 	.word	0x40026400
 8009598:	200007c4 	.word	0x200007c4
 800959c:	02932e00 	.word	0x02932e00

080095a0 <TCP_UDP_Notify>:
} connectType;

osEventFlagsId_t TCP_UDP_StackEventID;
//notify to ethernet or sim7600 stack
void TCP_UDP_Notify(int flagsEnum)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  LOG_WRITE("tcpUdpNotify %d\n", flagsEnum);
  osEventFlagsSet(TCP_UDP_StackEventID, 1 << flagsEnum);
 80095a8:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <TCP_UDP_Notify+0x24>)
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	2101      	movs	r1, #1
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	fa01 f303 	lsl.w	r3, r1, r3
 80095b4:	4619      	mov	r1, r3
 80095b6:	4610      	mov	r0, r2
 80095b8:	f002 f860 	bl	800b67c <osEventFlagsSet>
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20010400 	.word	0x20010400

080095c8 <TCP_UDP_Send>:

//payload : 1-tcp, 2-udp
bool TCP_UDP_Send(int type, uint8_t *data, int len)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  LOG_WRITE("tcpUdpSend %d\n", type);
  if (connectType == connectTypeSim7600)
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <TCP_UDP_Send+0x38>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d106      	bne.n	80095ea <TCP_UDP_Send+0x22>
  {
    return sim7600_IP(type, data, len);
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	68b9      	ldr	r1, [r7, #8]
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f7ff f8db 	bl	800879c <sim7600_IP>
 80095e6:	4603      	mov	r3, r0
 80095e8:	e005      	b.n	80095f6 <TCP_UDP_Send+0x2e>
  }
  else
  {
    return ethSendIP(type, data, len);
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f7fd fa70 	bl	8006ad4 <ethSendIP>
 80095f4:	4603      	mov	r3, r0
  }
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	200103fc 	.word	0x200103fc

08009604 <AudioPacketHandle>:

MP3Struct *mp3Packet;
bool AudioPacketHandle(uint8_t *data, int len)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  mp3Packet = (MP3Struct*)data;
 800960e:	4a18      	ldr	r2, [pc, #96]	; (8009670 <AudioPacketHandle+0x6c>)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6013      	str	r3, [r2, #0]

  //decrypt 16B next with old aes key to get new key
  if(AES_Decrypt_Packet(data + 16, 16) > 0)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	3310      	adds	r3, #16
 8009618:	2110      	movs	r1, #16
 800961a:	4618      	mov	r0, r3
 800961c:	f7fc f98a 	bl	8005934 <AES_Decrypt_Packet>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	dd1f      	ble.n	8009666 <AudioPacketHandle+0x62>
  {
    //decrypt with mp3 key, from volume
    int lenPacketDecrypt = len - MP3_PACKET_HEADER_LEN_BEFORE_VOLUME;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	3b15      	subs	r3, #21
 800962a:	60fb      	str	r3, [r7, #12]
    lenPacketDecrypt -=  (lenPacketDecrypt % 16); //make sure it is multiple of 16 aes block len
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	425a      	negs	r2, r3
 8009630:	f003 030f 	and.w	r3, r3, #15
 8009634:	f002 020f 	and.w	r2, r2, #15
 8009638:	bf58      	it	pl
 800963a:	4253      	negpl	r3, r2
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	60fb      	str	r3, [r7, #12]
    if(AES_Decrypt_Packet_Key(&(mp3Packet->volume), lenPacketDecrypt, mp3Packet->aesMP3key) > 0)
 8009642:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <AudioPacketHandle+0x6c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f103 0015 	add.w	r0, r3, #21
 800964a:	4b09      	ldr	r3, [pc, #36]	; (8009670 <AudioPacketHandle+0x6c>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3305      	adds	r3, #5
 8009650:	461a      	mov	r2, r3
 8009652:	68f9      	ldr	r1, [r7, #12]
 8009654:	f7fc f99c 	bl	8005990 <AES_Decrypt_Packet_Key>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	dd03      	ble.n	8009666 <AudioPacketHandle+0x62>
    {
      mp3GetFrame(data, len);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7fd fbe1 	bl	8006e28 <mp3GetFrame>
    }
  }
  //wrong mp3 packet
  LOG_WRITE("mp3 packet error\n");
}
 8009666:	bf00      	nop
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	200103f0 	.word	0x200103f0

08009674 <TCP_Packet_Handle>:

int realPacketLen; //len payload , not including md5
int totalTCPBytes = 0;
void TCP_Packet_Handle()
{
 8009674:	b590      	push	{r4, r7, lr}
 8009676:	b08b      	sub	sp, #44	; 0x2c
 8009678:	af02      	add	r7, sp, #8
  LOG_WRITE("tcpPacketHdl\n");
  ISError = true;
 800967a:	4ba3      	ldr	r3, [pc, #652]	; (8009908 <TCP_Packet_Handle+0x294>)
 800967c:	2201      	movs	r2, #1
 800967e:	701a      	strb	r2, [r3, #0]
  PacketTCPStruct *packetTcpHeader = (PacketTCPStruct *)TcpBuff;
 8009680:	4ba2      	ldr	r3, [pc, #648]	; (800990c <TCP_Packet_Handle+0x298>)
 8009682:	61bb      	str	r3, [r7, #24]
  totalTCPBytes += packetTcpHeader->len;
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	b29b      	uxth	r3, r3
 800968a:	461a      	mov	r2, r3
 800968c:	4ba0      	ldr	r3, [pc, #640]	; (8009910 <TCP_Packet_Handle+0x29c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4413      	add	r3, r2
 8009692:	4a9f      	ldr	r2, [pc, #636]	; (8009910 <TCP_Packet_Handle+0x29c>)
 8009694:	6013      	str	r3, [r2, #0]
  realPacketLen = packetTcpHeader->len - SIZE_OF_MD5;
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	b29b      	uxth	r3, r3
 800969c:	3b10      	subs	r3, #16
 800969e:	4a9d      	ldr	r2, [pc, #628]	; (8009914 <TCP_Packet_Handle+0x2a0>)
 80096a0:	6013      	str	r3, [r2, #0]
  if (!IsTLSHanshaked)
 80096a2:	4b9d      	ldr	r3, [pc, #628]	; (8009918 <TCP_Packet_Handle+0x2a4>)
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	f083 0301 	eor.w	r3, r3, #1
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 80ea 	beq.w	8009886 <TCP_Packet_Handle+0x212>
  {
    if (TCPConnectStatus == 0 && realPacketLen == SIZE_OF_PUBKEY)
 80096b2:	4b9a      	ldr	r3, [pc, #616]	; (800991c <TCP_Packet_Handle+0x2a8>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f040 80a3 	bne.w	8009802 <TCP_Packet_Handle+0x18e>
 80096bc:	4b95      	ldr	r3, [pc, #596]	; (8009914 <TCP_Packet_Handle+0x2a0>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c4:	f040 809d 	bne.w	8009802 <TCP_Packet_Handle+0x18e>
    {
      //check MD5
      if (CheckMD5(packetTcpHeader))
 80096c8:	69b8      	ldr	r0, [r7, #24]
 80096ca:	f000 fcfb 	bl	800a0c4 <CheckMD5>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 8108 	beq.w	80098e6 <TCP_Packet_Handle+0x272>
      {
        PacketTCPStruct *rsaPacketHeader = (PacketTCPStruct *)RSA_Packet;
 80096d6:	4b92      	ldr	r3, [pc, #584]	; (8009920 <TCP_Packet_Handle+0x2ac>)
 80096d8:	60bb      	str	r3, [r7, #8]

        //copy salt first
        srand(time(0));
 80096da:	2000      	movs	r0, #0
 80096dc:	f017 fd8a 	bl	80211f4 <time>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4613      	mov	r3, r2
 80096e6:	4618      	mov	r0, r3
 80096e8:	f017 fc14 	bl	8020f14 <srand>
        int j;
        for (j = 0; j < saltLen; j++)
 80096ec:	2300      	movs	r3, #0
 80096ee:	61fb      	str	r3, [r7, #28]
 80096f0:	e019      	b.n	8009726 <TCP_Packet_Handle+0xb2>
        {
          rsaPacketHeader->payload[j] = (uint8_t)rand();
 80096f2:	f017 fc3d 	bl	8020f70 <rand>
 80096f6:	4603      	mov	r3, r0
 80096f8:	b2d9      	uxtb	r1, r3
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	4413      	add	r3, r2
 8009700:	3312      	adds	r3, #18
 8009702:	460a      	mov	r2, r1
 8009704:	701a      	strb	r2, [r3, #0]
          salt[j] = rsaPacketHeader->payload[j] & 0x7F;
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	4413      	add	r3, r2
 800970c:	3312      	adds	r3, #18
 800970e:	781a      	ldrb	r2, [r3, #0]
 8009710:	4b84      	ldr	r3, [pc, #528]	; (8009924 <TCP_Packet_Handle+0x2b0>)
 8009712:	6819      	ldr	r1, [r3, #0]
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	440b      	add	r3, r1
 8009718:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < saltLen; j++)
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	3301      	adds	r3, #1
 8009724:	61fb      	str	r3, [r7, #28]
 8009726:	4b80      	ldr	r3, [pc, #512]	; (8009928 <TCP_Packet_Handle+0x2b4>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	429a      	cmp	r2, r3
 800972e:	dbe0      	blt.n	80096f2 <TCP_Packet_Handle+0x7e>
        }
        //copy next ID
        memcpy(rsaPacketHeader->payload + saltLen, DeviceID, saltLen);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	3312      	adds	r3, #18
 8009734:	4a7c      	ldr	r2, [pc, #496]	; (8009928 <TCP_Packet_Handle+0x2b4>)
 8009736:	6812      	ldr	r2, [r2, #0]
 8009738:	4413      	add	r3, r2
 800973a:	4a7c      	ldr	r2, [pc, #496]	; (800992c <TCP_Packet_Handle+0x2b8>)
 800973c:	6811      	ldr	r1, [r2, #0]
 800973e:	4a7a      	ldr	r2, [pc, #488]	; (8009928 <TCP_Packet_Handle+0x2b4>)
 8009740:	6812      	ldr	r2, [r2, #0]
 8009742:	4618      	mov	r0, r3
 8009744:	f017 fa58 	bl	8020bf8 <memcpy>
        //convert text with salt
        ConvertTextWithSalt(rsaPacketHeader->payload, saltLen, saltLen, Add);
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	f103 0012 	add.w	r0, r3, #18
 800974e:	4b76      	ldr	r3, [pc, #472]	; (8009928 <TCP_Packet_Handle+0x2b4>)
 8009750:	6819      	ldr	r1, [r3, #0]
 8009752:	4b75      	ldr	r3, [pc, #468]	; (8009928 <TCP_Packet_Handle+0x2b4>)
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	2300      	movs	r3, #0
 8009758:	f000 fcf2 	bl	800a140 <ConvertTextWithSalt>

        //then AES key
        AES_Generate_Rand_Key();
 800975c:	f7fb fe28 	bl	80053b0 <AES_Generate_Rand_Key>
        memcpy(rsaPacketHeader->payload + saltLen + saltLen, AES_Get_Key(), AES128_KEY_LEN);
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f103 0212 	add.w	r2, r3, #18
 8009766:	4b70      	ldr	r3, [pc, #448]	; (8009928 <TCP_Packet_Handle+0x2b4>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	18d4      	adds	r4, r2, r3
 800976e:	f7fb fe45 	bl	80053fc <AES_Get_Key>
 8009772:	4603      	mov	r3, r0
 8009774:	2210      	movs	r2, #16
 8009776:	4619      	mov	r1, r3
 8009778:	4620      	mov	r0, r4
 800977a:	f017 fa3d 	bl	8020bf8 <memcpy>

        //caculate md5
        uint8_t *md5sum = md5hash(rsaPacketHeader->payload, saltLen + saltLen + AES128_KEY_LEN);
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	f103 0212 	add.w	r2, r3, #18
 8009784:	4b68      	ldr	r3, [pc, #416]	; (8009928 <TCP_Packet_Handle+0x2b4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3308      	adds	r3, #8
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	4619      	mov	r1, r3
 800978e:	4610      	mov	r0, r2
 8009790:	f7fd f9ca 	bl	8006b28 <md5hash>
 8009794:	6078      	str	r0, [r7, #4]
        memcpy(rsaPacketHeader->md5, md5sum, MD5_LEN);
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	3302      	adds	r3, #2
 800979a:	2210      	movs	r2, #16
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	4618      	mov	r0, r3
 80097a0:	f017 fa2a 	bl	8020bf8 <memcpy>

        //next encrypt from md5
        if (RSA2048_Pubkey_Encrypt(packetTcpHeader->payload, RSA_MAX_MODULUS_LEN, rsaPacketHeader->md5, SIZE_OF_MD5 + saltLen + saltLen + AES128_KEY_LEN, rsaPacketHeader->md5) > 0)
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	f103 0012 	add.w	r0, r3, #18
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	1c99      	adds	r1, r3, #2
 80097ae:	4b5e      	ldr	r3, [pc, #376]	; (8009928 <TCP_Packet_Handle+0x2b4>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f103 0210 	add.w	r2, r3, #16
 80097b6:	4b5c      	ldr	r3, [pc, #368]	; (8009928 <TCP_Packet_Handle+0x2b4>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4413      	add	r3, r2
 80097bc:	f103 0210 	add.w	r2, r3, #16
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	3302      	adds	r3, #2
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	4613      	mov	r3, r2
 80097c8:	460a      	mov	r2, r1
 80097ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80097ce:	f7fd fef7 	bl	80075c0 <RSA2048_Pubkey_Encrypt>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f340 8086 	ble.w	80098e6 <TCP_Packet_Handle+0x272>
        {
          rsaPacketHeader->len = RSA_BLOCK_LEN;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	2200      	movs	r2, #0
 80097de:	701a      	strb	r2, [r3, #0]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f042 0201 	orr.w	r2, r2, #1
 80097e6:	705a      	strb	r2, [r3, #1]
          TCPConnectStatus = 1;
 80097e8:	4b4c      	ldr	r3, [pc, #304]	; (800991c <TCP_Packet_Handle+0x2a8>)
 80097ea:	2201      	movs	r2, #1
 80097ec:	601a      	str	r2, [r3, #0]
          TCP_UDP_Send(1, RSA_Packet, RSA_PACKET_LEN);
 80097ee:	f44f 7281 	mov.w	r2, #258	; 0x102
 80097f2:	494b      	ldr	r1, [pc, #300]	; (8009920 <TCP_Packet_Handle+0x2ac>)
 80097f4:	2001      	movs	r0, #1
 80097f6:	f7ff fee7 	bl	80095c8 <TCP_UDP_Send>
          ISError = false;
 80097fa:	4b43      	ldr	r3, [pc, #268]	; (8009908 <TCP_Packet_Handle+0x294>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	701a      	strb	r2, [r3, #0]
      if (CheckMD5(packetTcpHeader))
 8009800:	e071      	b.n	80098e6 <TCP_Packet_Handle+0x272>
        }
      }
    }
    else if (TCPConnectStatus == 1 && realPacketLen >= AES128_BLOCK_LEN && (realPacketLen % AES128_BLOCK_LEN) == 0)
 8009802:	4b46      	ldr	r3, [pc, #280]	; (800991c <TCP_Packet_Handle+0x2a8>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d16e      	bne.n	80098e8 <TCP_Packet_Handle+0x274>
 800980a:	4b42      	ldr	r3, [pc, #264]	; (8009914 <TCP_Packet_Handle+0x2a0>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b0f      	cmp	r3, #15
 8009810:	dd6a      	ble.n	80098e8 <TCP_Packet_Handle+0x274>
 8009812:	4b40      	ldr	r3, [pc, #256]	; (8009914 <TCP_Packet_Handle+0x2a0>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 030f 	and.w	r3, r3, #15
 800981a:	2b00      	cmp	r3, #0
 800981c:	d164      	bne.n	80098e8 <TCP_Packet_Handle+0x274>
    {
      if (CheckMD5(packetTcpHeader))
 800981e:	69b8      	ldr	r0, [r7, #24]
 8009820:	f000 fc50 	bl	800a0c4 <CheckMD5>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d05e      	beq.n	80098e8 <TCP_Packet_Handle+0x274>
      {
        if (AES_Decrypt_Packet(packetTcpHeader->payload, realPacketLen) == realPacketLen)
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	3312      	adds	r3, #18
 800982e:	4a39      	ldr	r2, [pc, #228]	; (8009914 <TCP_Packet_Handle+0x2a0>)
 8009830:	6812      	ldr	r2, [r2, #0]
 8009832:	4611      	mov	r1, r2
 8009834:	4618      	mov	r0, r3
 8009836:	f7fc f87d 	bl	8005934 <AES_Decrypt_Packet>
 800983a:	4602      	mov	r2, r0
 800983c:	4b35      	ldr	r3, [pc, #212]	; (8009914 <TCP_Packet_Handle+0x2a0>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d151      	bne.n	80098e8 <TCP_Packet_Handle+0x274>
        {
          //check salt ACK
          if (CheckSaltACK(packetTcpHeader->payload, realPacketLen))
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	3312      	adds	r3, #18
 8009848:	4a32      	ldr	r2, [pc, #200]	; (8009914 <TCP_Packet_Handle+0x2a0>)
 800984a:	6812      	ldr	r2, [r2, #0]
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f000 fce2 	bl	800a218 <CheckSaltACK>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d046      	beq.n	80098e8 <TCP_Packet_Handle+0x274>
          {
            TCP_UDP_Notify(TCP_UDP_Flag.Success); //notify connect task success, then to open UDP connect
 800985a:	4b35      	ldr	r3, [pc, #212]	; (8009930 <TCP_Packet_Handle+0x2bc>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff fe9e 	bl	80095a0 <TCP_UDP_Notify>
            TCPConnectStatus = 2;
 8009864:	4b2d      	ldr	r3, [pc, #180]	; (800991c <TCP_Packet_Handle+0x2a8>)
 8009866:	2202      	movs	r2, #2
 8009868:	601a      	str	r2, [r3, #0]
            IsTLSHanshaked = true;
 800986a:	4b2b      	ldr	r3, [pc, #172]	; (8009918 <TCP_Packet_Handle+0x2a4>)
 800986c:	2201      	movs	r2, #1
 800986e:	701a      	strb	r2, [r3, #0]
            //successful, delete timer osTimerStop, reset connectToHostCount, change Domain2 <-> Domain1 if neccessary
            osTimerStart(TCPTimerOnceID, TIMER_INTERVAL);
 8009870:	4b30      	ldr	r3, [pc, #192]	; (8009934 <TCP_Packet_Handle+0x2c0>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009878:	4618      	mov	r0, r3
 800987a:	f001 fe5b 	bl	800b534 <osTimerStart>
            ISError = false;
 800987e:	4b22      	ldr	r3, [pc, #136]	; (8009908 <TCP_Packet_Handle+0x294>)
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
 8009884:	e030      	b.n	80098e8 <TCP_Packet_Handle+0x274>
      }
    }
  }
  else //handle TLS packet
  {
    ISError = false;
 8009886:	4b20      	ldr	r3, [pc, #128]	; (8009908 <TCP_Packet_Handle+0x294>)
 8009888:	2200      	movs	r2, #0
 800988a:	701a      	strb	r2, [r3, #0]

    //debug
    int *order = (int*)(TcpBuff + 4);
 800988c:	4b2a      	ldr	r3, [pc, #168]	; (8009938 <TCP_Packet_Handle+0x2c4>)
 800988e:	617b      	str	r3, [r7, #20]
    int llen = packetTcpHeader->len + 4; // + 4B len
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	b29b      	uxth	r3, r3
 8009896:	3304      	adds	r3, #4
 8009898:	613b      	str	r3, [r7, #16]
    // if(packetTcpHeader->len < 1000)
    // {
    //   LOG_WRITE("error tcp packet len:%d\n", packetTcpHeader->len);
    // }

    if(CheckMD5(packetTcpHeader))
 800989a:	69b8      	ldr	r0, [r7, #24]
 800989c:	f000 fc12 	bl	800a0c4 <CheckMD5>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d020      	beq.n	80098e8 <TCP_Packet_Handle+0x274>
    {
      //check payload has at least 16B (1 AES block)
      if(realPacketLen >= AES128_BLOCK_LEN)
 80098a6:	4b1b      	ldr	r3, [pc, #108]	; (8009914 <TCP_Packet_Handle+0x2a0>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b0f      	cmp	r3, #15
 80098ac:	dd1c      	ble.n	80098e8 <TCP_Packet_Handle+0x274>
      {
        //decrype first 16B to check type of packet
        if(AES_Decrypt_Packet(packetTcpHeader->payload, AES128_BLOCK_LEN) > 0)
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	3312      	adds	r3, #18
 80098b2:	2110      	movs	r1, #16
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fc f83d 	bl	8005934 <AES_Decrypt_Packet>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	dd13      	ble.n	80098e8 <TCP_Packet_Handle+0x274>
        {
          uint8_t typeOfPacket = packetTcpHeader->payload[0];
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	7c9b      	ldrb	r3, [r3, #18]
 80098c4:	73fb      	strb	r3, [r7, #15]
          if(typeOfPacket == mp3PacketEnum && realPacketLen > MP3_PACKET_HEADER_LEN)
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d10d      	bne.n	80098e8 <TCP_Packet_Handle+0x274>
 80098cc:	4b11      	ldr	r3, [pc, #68]	; (8009914 <TCP_Packet_Handle+0x2a0>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b28      	cmp	r3, #40	; 0x28
 80098d2:	dd09      	ble.n	80098e8 <TCP_Packet_Handle+0x274>
          {
        	  AudioPacketHandle(packetTcpHeader->payload, realPacketLen);
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	3312      	adds	r3, #18
 80098d8:	4a0e      	ldr	r2, [pc, #56]	; (8009914 <TCP_Packet_Handle+0x2a0>)
 80098da:	6812      	ldr	r2, [r2, #0]
 80098dc:	4611      	mov	r1, r2
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fe90 	bl	8009604 <AudioPacketHandle>
 80098e4:	e000      	b.n	80098e8 <TCP_Packet_Handle+0x274>
      if (CheckMD5(packetTcpHeader))
 80098e6:	bf00      	nop
        }
      }
    }
  }
  
  if (ISError)
 80098e8:	4b07      	ldr	r3, [pc, #28]	; (8009908 <TCP_Packet_Handle+0x294>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d007      	beq.n	8009900 <TCP_Packet_Handle+0x28c>
  {
    LOG_WRITE("TCP_Packet_Handle recv error\n");
    TCP_UDP_Notify(TCP_UDP_Flag.Error);
 80098f0:	4b0f      	ldr	r3, [pc, #60]	; (8009930 <TCP_Packet_Handle+0x2bc>)
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff fe53 	bl	80095a0 <TCP_UDP_Notify>
    ISError = false;
 80098fa:	4b03      	ldr	r3, [pc, #12]	; (8009908 <TCP_Packet_Handle+0x294>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	701a      	strb	r2, [r3, #0]
  }
}
 8009900:	bf00      	nop
 8009902:	3724      	adds	r7, #36	; 0x24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd90      	pop	{r4, r7, pc}
 8009908:	200007ed 	.word	0x200007ed
 800990c:	2000dab8 	.word	0x2000dab8
 8009910:	20000800 	.word	0x20000800
 8009914:	20010430 	.word	0x20010430
 8009918:	200007ec 	.word	0x200007ec
 800991c:	200007e8 	.word	0x200007e8
 8009920:	200101e8 	.word	0x200101e8
 8009924:	200101e4 	.word	0x200101e4
 8009928:	200103f8 	.word	0x200103f8
 800992c:	20000004 	.word	0x20000004
 8009930:	200101c8 	.word	0x200101c8
 8009934:	200058e8 	.word	0x200058e8
 8009938:	2000dabc 	.word	0x2000dabc

0800993c <HexStringToByteArray>:
//convert hex string to byte array, auto override. return len of byte array if success, else return -1
uint8_t hexStringMap[255];
bool bHexStringMapFrist = true;

int HexStringToByteArray()
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
  //initialize
  if(bHexStringMapFrist)
 8009942:	4b3a      	ldr	r3, [pc, #232]	; (8009a2c <HexStringToByteArray+0xf0>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d040      	beq.n	80099cc <HexStringToByteArray+0x90>
  {
    bHexStringMapFrist = false;
 800994a:	4b38      	ldr	r3, [pc, #224]	; (8009a2c <HexStringToByteArray+0xf0>)
 800994c:	2200      	movs	r2, #0
 800994e:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 255; i++)
 8009950:	2300      	movs	r3, #0
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	e037      	b.n	80099c6 <HexStringToByteArray+0x8a>
    {
      if(i >= '0' && i <= '9')
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b2f      	cmp	r3, #47	; 0x2f
 800995a:	dd0c      	ble.n	8009976 <HexStringToByteArray+0x3a>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2b39      	cmp	r3, #57	; 0x39
 8009960:	dc09      	bgt.n	8009976 <HexStringToByteArray+0x3a>
      {
        hexStringMap[i] = i - '0';
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	b2db      	uxtb	r3, r3
 8009966:	3b30      	subs	r3, #48	; 0x30
 8009968:	b2d9      	uxtb	r1, r3
 800996a:	4a31      	ldr	r2, [pc, #196]	; (8009a30 <HexStringToByteArray+0xf4>)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	460a      	mov	r2, r1
 8009972:	701a      	strb	r2, [r3, #0]
 8009974:	e024      	b.n	80099c0 <HexStringToByteArray+0x84>
      }
      else if(i >= 'A' && i <= 'F')
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2b40      	cmp	r3, #64	; 0x40
 800997a:	dd0c      	ble.n	8009996 <HexStringToByteArray+0x5a>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b46      	cmp	r3, #70	; 0x46
 8009980:	dc09      	bgt.n	8009996 <HexStringToByteArray+0x5a>
      {
        hexStringMap[i] = i - 'A' + 10;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	b2db      	uxtb	r3, r3
 8009986:	3b37      	subs	r3, #55	; 0x37
 8009988:	b2d9      	uxtb	r1, r3
 800998a:	4a29      	ldr	r2, [pc, #164]	; (8009a30 <HexStringToByteArray+0xf4>)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4413      	add	r3, r2
 8009990:	460a      	mov	r2, r1
 8009992:	701a      	strb	r2, [r3, #0]
 8009994:	e014      	b.n	80099c0 <HexStringToByteArray+0x84>
      }
      else if(i >= 'a' && i <= 'f')
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2b60      	cmp	r3, #96	; 0x60
 800999a:	dd0c      	ble.n	80099b6 <HexStringToByteArray+0x7a>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2b66      	cmp	r3, #102	; 0x66
 80099a0:	dc09      	bgt.n	80099b6 <HexStringToByteArray+0x7a>
      {
        hexStringMap[i] = i - 'a' + 10;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	3b57      	subs	r3, #87	; 0x57
 80099a8:	b2d9      	uxtb	r1, r3
 80099aa:	4a21      	ldr	r2, [pc, #132]	; (8009a30 <HexStringToByteArray+0xf4>)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4413      	add	r3, r2
 80099b0:	460a      	mov	r2, r1
 80099b2:	701a      	strb	r2, [r3, #0]
 80099b4:	e004      	b.n	80099c0 <HexStringToByteArray+0x84>
      }
      else
      {
        hexStringMap[i] = 0;
 80099b6:	4a1e      	ldr	r2, [pc, #120]	; (8009a30 <HexStringToByteArray+0xf4>)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4413      	add	r3, r2
 80099bc:	2200      	movs	r2, #0
 80099be:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 255; i++)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	3301      	adds	r3, #1
 80099c4:	60fb      	str	r3, [r7, #12]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2bfe      	cmp	r3, #254	; 0xfe
 80099ca:	ddc4      	ble.n	8009956 <HexStringToByteArray+0x1a>
      }
    }
  }

  int i, j; //i for hex string, j for byte array
  for(i = 0, j = 0; i < TcpBuffOffset; i+=2, j++)
 80099cc:	2300      	movs	r3, #0
 80099ce:	60bb      	str	r3, [r7, #8]
 80099d0:	2300      	movs	r3, #0
 80099d2:	607b      	str	r3, [r7, #4]
 80099d4:	e01e      	b.n	8009a14 <HexStringToByteArray+0xd8>
  {
    uint8_t tmpByte = (hexStringMap[TcpBuff[i]] << 4) | hexStringMap[TcpBuff[i+1]];
 80099d6:	4a17      	ldr	r2, [pc, #92]	; (8009a34 <HexStringToByteArray+0xf8>)
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	4413      	add	r3, r2
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	4b13      	ldr	r3, [pc, #76]	; (8009a30 <HexStringToByteArray+0xf4>)
 80099e2:	5c9b      	ldrb	r3, [r3, r2]
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	b25a      	sxtb	r2, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	3301      	adds	r3, #1
 80099ec:	4911      	ldr	r1, [pc, #68]	; (8009a34 <HexStringToByteArray+0xf8>)
 80099ee:	5ccb      	ldrb	r3, [r1, r3]
 80099f0:	4619      	mov	r1, r3
 80099f2:	4b0f      	ldr	r3, [pc, #60]	; (8009a30 <HexStringToByteArray+0xf4>)
 80099f4:	5c5b      	ldrb	r3, [r3, r1]
 80099f6:	b25b      	sxtb	r3, r3
 80099f8:	4313      	orrs	r3, r2
 80099fa:	b25b      	sxtb	r3, r3
 80099fc:	70fb      	strb	r3, [r7, #3]
    TcpBuff[j] = tmpByte;
 80099fe:	4a0d      	ldr	r2, [pc, #52]	; (8009a34 <HexStringToByteArray+0xf8>)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4413      	add	r3, r2
 8009a04:	78fa      	ldrb	r2, [r7, #3]
 8009a06:	701a      	strb	r2, [r3, #0]
  for(i = 0, j = 0; i < TcpBuffOffset; i+=2, j++)
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	3302      	adds	r3, #2
 8009a0c:	60bb      	str	r3, [r7, #8]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3301      	adds	r3, #1
 8009a12:	607b      	str	r3, [r7, #4]
 8009a14:	4b08      	ldr	r3, [pc, #32]	; (8009a38 <HexStringToByteArray+0xfc>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	dbdb      	blt.n	80099d6 <HexStringToByteArray+0x9a>
  }
  return j;
 8009a1e:	687b      	ldr	r3, [r7, #4]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	20000334 	.word	0x20000334
 8009a30:	200102f0 	.word	0x200102f0
 8009a34:	2000dab8 	.word	0x2000dab8
 8009a38:	200007f0 	.word	0x200007f0

08009a3c <HexStringToByteArrayUDP>:

//retrun >0 ~ successful, -1~fail
uint8_t UdpBuff[UDP_BUFF_LEN];
int HexStringToByteArrayUDP(uint8_t *data, int len)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  if(len != UDP_PACKET_LEN) return -1;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2b1c      	cmp	r3, #28
 8009a4a:	d002      	beq.n	8009a52 <HexStringToByteArrayUDP+0x16>
 8009a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a50:	e06e      	b.n	8009b30 <HexStringToByteArrayUDP+0xf4>
  //initialize map table
  if(bHexStringMapFrist)
 8009a52:	4b3a      	ldr	r3, [pc, #232]	; (8009b3c <HexStringToByteArrayUDP+0x100>)
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d040      	beq.n	8009adc <HexStringToByteArrayUDP+0xa0>
  {
    bHexStringMapFrist = false;
 8009a5a:	4b38      	ldr	r3, [pc, #224]	; (8009b3c <HexStringToByteArrayUDP+0x100>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 255; i++)
 8009a60:	2300      	movs	r3, #0
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	e037      	b.n	8009ad6 <HexStringToByteArrayUDP+0x9a>
    {
      if(i >= '0' && i <= '9')
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b2f      	cmp	r3, #47	; 0x2f
 8009a6a:	dd0c      	ble.n	8009a86 <HexStringToByteArrayUDP+0x4a>
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2b39      	cmp	r3, #57	; 0x39
 8009a70:	dc09      	bgt.n	8009a86 <HexStringToByteArrayUDP+0x4a>
      {
        hexStringMap[i] = i - '0';
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	3b30      	subs	r3, #48	; 0x30
 8009a78:	b2d9      	uxtb	r1, r3
 8009a7a:	4a31      	ldr	r2, [pc, #196]	; (8009b40 <HexStringToByteArrayUDP+0x104>)
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	4413      	add	r3, r2
 8009a80:	460a      	mov	r2, r1
 8009a82:	701a      	strb	r2, [r3, #0]
 8009a84:	e024      	b.n	8009ad0 <HexStringToByteArrayUDP+0x94>
      }
      else if(i >= 'A' && i <= 'F')
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	2b40      	cmp	r3, #64	; 0x40
 8009a8a:	dd0c      	ble.n	8009aa6 <HexStringToByteArrayUDP+0x6a>
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2b46      	cmp	r3, #70	; 0x46
 8009a90:	dc09      	bgt.n	8009aa6 <HexStringToByteArrayUDP+0x6a>
      {
        hexStringMap[i] = i - 'A' + 10;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	3b37      	subs	r3, #55	; 0x37
 8009a98:	b2d9      	uxtb	r1, r3
 8009a9a:	4a29      	ldr	r2, [pc, #164]	; (8009b40 <HexStringToByteArrayUDP+0x104>)
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	460a      	mov	r2, r1
 8009aa2:	701a      	strb	r2, [r3, #0]
 8009aa4:	e014      	b.n	8009ad0 <HexStringToByteArrayUDP+0x94>
      }
      else if(i >= 'a' && i <= 'f')
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	2b60      	cmp	r3, #96	; 0x60
 8009aaa:	dd0c      	ble.n	8009ac6 <HexStringToByteArrayUDP+0x8a>
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	2b66      	cmp	r3, #102	; 0x66
 8009ab0:	dc09      	bgt.n	8009ac6 <HexStringToByteArrayUDP+0x8a>
      {
        hexStringMap[i] = i - 'a' + 10;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	3b57      	subs	r3, #87	; 0x57
 8009ab8:	b2d9      	uxtb	r1, r3
 8009aba:	4a21      	ldr	r2, [pc, #132]	; (8009b40 <HexStringToByteArrayUDP+0x104>)
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	4413      	add	r3, r2
 8009ac0:	460a      	mov	r2, r1
 8009ac2:	701a      	strb	r2, [r3, #0]
 8009ac4:	e004      	b.n	8009ad0 <HexStringToByteArrayUDP+0x94>
      }
      else
      {
        hexStringMap[i] = 0;
 8009ac6:	4a1e      	ldr	r2, [pc, #120]	; (8009b40 <HexStringToByteArrayUDP+0x104>)
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	4413      	add	r3, r2
 8009acc:	2200      	movs	r2, #0
 8009ace:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 255; i++)
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	617b      	str	r3, [r7, #20]
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2bfe      	cmp	r3, #254	; 0xfe
 8009ada:	ddc4      	ble.n	8009a66 <HexStringToByteArrayUDP+0x2a>
      }
    }
  }

  int i, j; //i for hex string, j for byte array
  for(i = 0, j = 0; i < len; i+=2, j++)
 8009adc:	2300      	movs	r3, #0
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	e01f      	b.n	8009b26 <HexStringToByteArrayUDP+0xea>
  {
    UdpBuff[j] = (hexStringMap[data[i]] << 4) | hexStringMap[data[i+1]];
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	4413      	add	r3, r2
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	4b13      	ldr	r3, [pc, #76]	; (8009b40 <HexStringToByteArrayUDP+0x104>)
 8009af2:	5c9b      	ldrb	r3, [r3, r2]
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	b25a      	sxtb	r2, r3
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	3301      	adds	r3, #1
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	440b      	add	r3, r1
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	4619      	mov	r1, r3
 8009b04:	4b0e      	ldr	r3, [pc, #56]	; (8009b40 <HexStringToByteArrayUDP+0x104>)
 8009b06:	5c5b      	ldrb	r3, [r3, r1]
 8009b08:	b25b      	sxtb	r3, r3
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	b25b      	sxtb	r3, r3
 8009b0e:	b2d9      	uxtb	r1, r3
 8009b10:	4a0c      	ldr	r2, [pc, #48]	; (8009b44 <HexStringToByteArrayUDP+0x108>)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	4413      	add	r3, r2
 8009b16:	460a      	mov	r2, r1
 8009b18:	701a      	strb	r2, [r3, #0]
  for(i = 0, j = 0; i < len; i+=2, j++)
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	3302      	adds	r3, #2
 8009b1e:	613b      	str	r3, [r7, #16]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	dbdb      	blt.n	8009ae6 <HexStringToByteArrayUDP+0xaa>
  }
  return j;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	20000334 	.word	0x20000334
 8009b40:	200102f0 	.word	0x200102f0
 8009b44:	200101d4 	.word	0x200101d4

08009b48 <TCP_Packet_Analyze>:

//packet string hex
void TCP_Packet_Analyze(uint8_t *recvData, int length)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  int upper = length;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	613b      	str	r3, [r7, #16]
  int offset = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	61fb      	str	r3, [r7, #28]
  while (length > 0)
 8009b5a:	e078      	b.n	8009c4e <TCP_Packet_Analyze+0x106>
  {
    int eofPackIndx = -1;
 8009b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b60:	61bb      	str	r3, [r7, #24]

    for (int i = offset; i < upper; i++)
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	617b      	str	r3, [r7, #20]
 8009b66:	e00b      	b.n	8009b80 <TCP_Packet_Analyze+0x38>
    {
      if (recvData[i] == '#')
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2b23      	cmp	r3, #35	; 0x23
 8009b72:	d102      	bne.n	8009b7a <TCP_Packet_Analyze+0x32>
      {
        eofPackIndx = i;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	61bb      	str	r3, [r7, #24]
        break;
 8009b78:	e006      	b.n	8009b88 <TCP_Packet_Analyze+0x40>
    for (int i = offset; i < upper; i++)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	617b      	str	r3, [r7, #20]
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	dbef      	blt.n	8009b68 <TCP_Packet_Analyze+0x20>
      }
    }
    if (eofPackIndx == -1) //not find "#"
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8e:	d11c      	bne.n	8009bca <TCP_Packet_Analyze+0x82>
    {
      if (TcpBuffOffset + length < TCP_BUFF_LEN)
 8009b90:	4b33      	ldr	r3, [pc, #204]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	4413      	add	r3, r2
 8009b98:	f242 720f 	movw	r2, #9999	; 0x270f
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	dc56      	bgt.n	8009c4e <TCP_Packet_Analyze+0x106>
      {
        // System.Buffer.BlockCopy(recvData, offset, Tcpbuff, TcpbuffOffset, length);
        memcpy(TcpBuff + TcpBuffOffset, recvData + offset, length);
 8009ba0:	4b2f      	ldr	r3, [pc, #188]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	4b2f      	ldr	r3, [pc, #188]	; (8009c64 <TCP_Packet_Analyze+0x11c>)
 8009ba8:	18d0      	adds	r0, r2, r3
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	4413      	add	r3, r2
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	f017 f820 	bl	8020bf8 <memcpy>
        TcpBuffOffset += length;
 8009bb8:	4b29      	ldr	r3, [pc, #164]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	4a27      	ldr	r2, [pc, #156]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009bc2:	6013      	str	r3, [r2, #0]
        length = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	e041      	b.n	8009c4e <TCP_Packet_Analyze+0x106>
      }
    }
    else
    {
      int lenTmp = eofPackIndx - offset; // 0 1 2 3 4
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	60fb      	str	r3, [r7, #12]
      if (lenTmp > 0 && TcpBuffOffset + lenTmp < TCP_BUFF_LEN)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	dd19      	ble.n	8009c0c <TCP_Packet_Analyze+0xc4>
 8009bd8:	4b21      	ldr	r3, [pc, #132]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	f242 720f 	movw	r2, #9999	; 0x270f
 8009be4:	4293      	cmp	r3, r2
 8009be6:	dc11      	bgt.n	8009c0c <TCP_Packet_Analyze+0xc4>
      {
        // System.Buffer.BlockCopy(recvData, offset, Tcpbuff, TcpbuffOffset, lenTmp);
        memcpy(TcpBuff + TcpBuffOffset, recvData + offset, lenTmp);
 8009be8:	4b1d      	ldr	r3, [pc, #116]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	461a      	mov	r2, r3
 8009bee:	4b1d      	ldr	r3, [pc, #116]	; (8009c64 <TCP_Packet_Analyze+0x11c>)
 8009bf0:	18d0      	adds	r0, r2, r3
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	f016 fffc 	bl	8020bf8 <memcpy>
        TcpBuffOffset += lenTmp;
 8009c00:	4b17      	ldr	r3, [pc, #92]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	4a15      	ldr	r2, [pc, #84]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009c0a:	6013      	str	r3, [r2, #0]
      }
      offset = eofPackIndx + 1; //+1 for "#"
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	61fb      	str	r3, [r7, #28]
      length -= (lenTmp + 1);     // +1 for "#"
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	603b      	str	r3, [r7, #0]

      //handle tcp packet
      if (TcpBuffOffset % 2 == 0) //byte to hex string -> double length of packet
 8009c1c:	4b10      	ldr	r3, [pc, #64]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10f      	bne.n	8009c48 <TCP_Packet_Analyze+0x100>
      {
        //TcpbuffOffset ~ length of Tcp packet
        //convert hex string to byte array
        TcpBuffOffset = HexStringToByteArray();
 8009c28:	f7ff fe88 	bl	800993c <HexStringToByteArray>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	4a0c      	ldr	r2, [pc, #48]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009c30:	6013      	str	r3, [r2, #0]

        //check length field
        int lenOfPacket = (int)(*(uint16_t *)TcpBuff);
 8009c32:	4b0c      	ldr	r3, [pc, #48]	; (8009c64 <TCP_Packet_Analyze+0x11c>)
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	60bb      	str	r3, [r7, #8]
        if (lenOfPacket == TcpBuffOffset - 2) //2 byte of length field
 8009c38:	4b09      	ldr	r3, [pc, #36]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3b02      	subs	r3, #2
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d101      	bne.n	8009c48 <TCP_Packet_Analyze+0x100>
        {
//          curPacketSize = lenOfPacket;s
          TCP_Packet_Handle();
 8009c44:	f7ff fd16 	bl	8009674 <TCP_Packet_Handle>
        }
      }
      TcpBuffOffset = 0;
 8009c48:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <TCP_Packet_Analyze+0x118>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	601a      	str	r2, [r3, #0]
  while (length > 0)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	dc83      	bgt.n	8009b5c <TCP_Packet_Analyze+0x14>
    }
  }
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop
 8009c58:	3720      	adds	r7, #32
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	200007f0 	.word	0x200007f0
 8009c64:	2000dab8 	.word	0x2000dab8

08009c68 <checkSum>:

uint16_t checkSum(uint8_t *ptr, int length)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
	uint32_t checksum = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60fb      	str	r3, [r7, #12]
	while (length > 1) //cong het cac byte16 lai
 8009c76:	e00f      	b.n	8009c98 <checkSum+0x30>
	{
		checksum += ((uint32_t)*ptr << 8) | (uint32_t) *(ptr + 1);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	021b      	lsls	r3, r3, #8
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	3201      	adds	r2, #1
 8009c82:	7812      	ldrb	r2, [r2, #0]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	4413      	add	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]
		ptr += 2;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3302      	adds	r3, #2
 8009c90:	607b      	str	r3, [r7, #4]
		length -= 2;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	3b02      	subs	r3, #2
 8009c96:	603b      	str	r3, [r7, #0]
	while (length > 1) //cong het cac byte16 lai
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	dcec      	bgt.n	8009c78 <checkSum+0x10>
	}
	if (length)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00c      	beq.n	8009cbe <checkSum+0x56>
	{
		checksum += ((uint32_t)*ptr) << 8; //neu con le 1 byte
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	021b      	lsls	r3, r3, #8
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	4413      	add	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
	}
	while (checksum >> 16)
 8009cb0:	e005      	b.n	8009cbe <checkSum+0x56>
	{
		checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	0c1b      	lsrs	r3, r3, #16
 8009cba:	4413      	add	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]
	while (checksum >> 16)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	0c1b      	lsrs	r3, r3, #16
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1f5      	bne.n	8009cb2 <checkSum+0x4a>
	}
	//nghich dao bit
	checksum = ~checksum;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	43db      	mvns	r3, r3
 8009cca:	60fb      	str	r3, [r7, #12]

	return (uint16_t)checksum;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	b29b      	uxth	r3, r3
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <UDP_Packet_Analyze>:

uint32_t rtt;
int64_t ntpTime = 0, ntpStart; //ntpstart = timer of stm32 when receive ntpTime
void UDP_Packet_Analyze(uint8_t *data, int len)
{
 8009cdc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	6039      	str	r1, [r7, #0]
  LOG_WRITE("udpPacketAnalyze\n");
  //ntp packet
  if (len == UDP_PACKET_LEN)
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2b1c      	cmp	r3, #28
 8009cec:	d15f      	bne.n	8009dae <UDP_Packet_Analyze+0xd2>
  {
    if(HexStringToByteArrayUDP(data, len) != UDP_BUFF_LEN) return;
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7ff fea3 	bl	8009a3c <HexStringToByteArrayUDP>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b0e      	cmp	r3, #14
 8009cfa:	d155      	bne.n	8009da8 <UDP_Packet_Analyze+0xcc>

    NTPStruct2 *ntpPack = (NTPStruct2 *)UdpBuff;
 8009cfc:	4b2e      	ldr	r3, [pc, #184]	; (8009db8 <UDP_Packet_Analyze+0xdc>)
 8009cfe:	60fb      	str	r3, [r7, #12]

    if(checkSum((uint8_t*)UdpBuff, UDP_BUFF_LEN - 2) != ntpPack->checksum) return; //-2B checksum
 8009d00:	210c      	movs	r1, #12
 8009d02:	482d      	ldr	r0, [pc, #180]	; (8009db8 <UDP_Packet_Analyze+0xdc>)
 8009d04:	f7ff ffb0 	bl	8009c68 <checkSum>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	899b      	ldrh	r3, [r3, #12]
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d14a      	bne.n	8009dac <UDP_Packet_Analyze+0xd0>

    uint32_t recvNTPTime = TIM_NTP->CNT;
 8009d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	60bb      	str	r3, [r7, #8]
    rtt = (recvNTPTime - ntpPack->clientTime) >> 1; // >> 1 ~ / 2 (since TIM_NTP tick 0.5ms)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	085b      	lsrs	r3, r3, #1
 8009d28:	4a24      	ldr	r2, [pc, #144]	; (8009dbc <UDP_Packet_Analyze+0xe0>)
 8009d2a:	6013      	str	r3, [r2, #0]

    //the first time, get as soon as posible
    if (ntpTime == 0)
 8009d2c:	4b24      	ldr	r3, [pc, #144]	; (8009dc0 <UDP_Packet_Analyze+0xe4>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	d117      	bne.n	8009d66 <UDP_Packet_Analyze+0x8a>
    {
      ntpTime = ntpPack->serverTime + rtt / 2;
 8009d36:	68f9      	ldr	r1, [r7, #12]
 8009d38:	680a      	ldr	r2, [r1, #0]
 8009d3a:	684b      	ldr	r3, [r1, #4]
 8009d3c:	491f      	ldr	r1, [pc, #124]	; (8009dbc <UDP_Packet_Analyze+0xe0>)
 8009d3e:	6809      	ldr	r1, [r1, #0]
 8009d40:	0849      	lsrs	r1, r1, #1
 8009d42:	4608      	mov	r0, r1
 8009d44:	f04f 0100 	mov.w	r1, #0
 8009d48:	eb12 0800 	adds.w	r8, r2, r0
 8009d4c:	eb43 0901 	adc.w	r9, r3, r1
 8009d50:	4b1b      	ldr	r3, [pc, #108]	; (8009dc0 <UDP_Packet_Analyze+0xe4>)
 8009d52:	e9c3 8900 	strd	r8, r9, [r3]
      ntpStart = recvNTPTime >> 1; // /2 since TIMER tick 0.5ms
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	085b      	lsrs	r3, r3, #1
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f04f 0300 	mov.w	r3, #0
 8009d60:	4918      	ldr	r1, [pc, #96]	; (8009dc4 <UDP_Packet_Analyze+0xe8>)
 8009d62:	e9c1 2300 	strd	r2, r3, [r1]
    }

    //get until enough percious
    if (rtt < RTT_NTP_MAX)
 8009d66:	4b15      	ldr	r3, [pc, #84]	; (8009dbc <UDP_Packet_Analyze+0xe0>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b63      	cmp	r3, #99	; 0x63
 8009d6c:	d81f      	bhi.n	8009dae <UDP_Packet_Analyze+0xd2>
    {
      udpTimerCount++;
 8009d6e:	4b16      	ldr	r3, [pc, #88]	; (8009dc8 <UDP_Packet_Analyze+0xec>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3301      	adds	r3, #1
 8009d74:	4a14      	ldr	r2, [pc, #80]	; (8009dc8 <UDP_Packet_Analyze+0xec>)
 8009d76:	6013      	str	r3, [r2, #0]
      ntpTime = ntpPack->serverTime + rtt / 2;
 8009d78:	68f9      	ldr	r1, [r7, #12]
 8009d7a:	680a      	ldr	r2, [r1, #0]
 8009d7c:	684b      	ldr	r3, [r1, #4]
 8009d7e:	490f      	ldr	r1, [pc, #60]	; (8009dbc <UDP_Packet_Analyze+0xe0>)
 8009d80:	6809      	ldr	r1, [r1, #0]
 8009d82:	0849      	lsrs	r1, r1, #1
 8009d84:	4608      	mov	r0, r1
 8009d86:	f04f 0100 	mov.w	r1, #0
 8009d8a:	1814      	adds	r4, r2, r0
 8009d8c:	eb43 0501 	adc.w	r5, r3, r1
 8009d90:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <UDP_Packet_Analyze+0xe4>)
 8009d92:	e9c3 4500 	strd	r4, r5, [r3]
      ntpStart = recvNTPTime >> 1; // >> 1 ~ /2 since TIMER tick 0.5ms
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	085b      	lsrs	r3, r3, #1
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f04f 0300 	mov.w	r3, #0
 8009da0:	4908      	ldr	r1, [pc, #32]	; (8009dc4 <UDP_Packet_Analyze+0xe8>)
 8009da2:	e9c1 2300 	strd	r2, r3, [r1]
 8009da6:	e002      	b.n	8009dae <UDP_Packet_Analyze+0xd2>
    if(HexStringToByteArrayUDP(data, len) != UDP_BUFF_LEN) return;
 8009da8:	bf00      	nop
 8009daa:	e000      	b.n	8009dae <UDP_Packet_Analyze+0xd2>
    if(checkSum((uint8_t*)UdpBuff, UDP_BUFF_LEN - 2) != ntpPack->checksum) return; //-2B checksum
 8009dac:	bf00      	nop
    }
  }
}
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009db6:	bf00      	nop
 8009db8:	200101d4 	.word	0x200101d4
 8009dbc:	200103f4 	.word	0x200103f4
 8009dc0:	20000808 	.word	0x20000808
 8009dc4:	20010408 	.word	0x20010408
 8009dc8:	200007fc 	.word	0x200007fc

08009dcc <TCP_UDP_GetNtpTime>:

//get UTC NTP time
int64_t TCP_UDP_GetNtpTime()
{
 8009dcc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
  if(ntpTime == 0) return 0; //don't have ntp time
 8009dd4:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <TCP_UDP_GetNtpTime+0x6c>)
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	d104      	bne.n	8009de8 <TCP_UDP_GetNtpTime+0x1c>
 8009dde:	f04f 0800 	mov.w	r8, #0
 8009de2:	f04f 0900 	mov.w	r9, #0
 8009de6:	e01e      	b.n	8009e26 <TCP_UDP_GetNtpTime+0x5a>
  int64_t curTime = TIM_NTP->CNT;
 8009de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	461a      	mov	r2, r3
 8009df0:	f04f 0300 	mov.w	r3, #0
 8009df4:	e9c7 2300 	strd	r2, r3, [r7]
  return ntpTime + (curTime >> 1) - ntpStart; //  >> 1 ~ /2 since TIMER tick 0.5ms
 8009df8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009dfc:	f04f 0200 	mov.w	r2, #0
 8009e00:	f04f 0300 	mov.w	r3, #0
 8009e04:	0862      	lsrs	r2, r4, #1
 8009e06:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8009e0a:	106b      	asrs	r3, r5, #1
 8009e0c:	4c0a      	ldr	r4, [pc, #40]	; (8009e38 <TCP_UDP_GetNtpTime+0x6c>)
 8009e0e:	e9d4 4500 	ldrd	r4, r5, [r4]
 8009e12:	1910      	adds	r0, r2, r4
 8009e14:	eb43 0105 	adc.w	r1, r3, r5
 8009e18:	4b08      	ldr	r3, [pc, #32]	; (8009e3c <TCP_UDP_GetNtpTime+0x70>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	ebb0 0802 	subs.w	r8, r0, r2
 8009e22:	eb61 0903 	sbc.w	r9, r1, r3
 8009e26:	4642      	mov	r2, r8
 8009e28:	464b      	mov	r3, r9
}
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8009e36:	4770      	bx	lr
 8009e38:	20000808 	.word	0x20000808
 8009e3c:	20010408 	.word	0x20010408

08009e40 <TCP_UDP_Stack_Init>:
//   }
// }

//init after TCP three-way handshake, but before RSA-AES handshake
void TCP_UDP_Stack_Init(osEventFlagsId_t eventID, int successFlag, int errorFlag, bool IsETH)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	70fb      	strb	r3, [r7, #3]
  LOG_WRITE("tcpUdpInit\n");
  //only one time after reboot
  if (salt == NULL)
 8009e4e:	4b2d      	ldr	r3, [pc, #180]	; (8009f04 <TCP_UDP_Stack_Init+0xc4>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d118      	bne.n	8009e88 <TCP_UDP_Stack_Init+0x48>
  {
    saltLen = strlen(DeviceID);
 8009e56:	4b2c      	ldr	r3, [pc, #176]	; (8009f08 <TCP_UDP_Stack_Init+0xc8>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7f6 f9b8 	bl	80001d0 <strlen>
 8009e60:	4603      	mov	r3, r0
 8009e62:	461a      	mov	r2, r3
 8009e64:	4b29      	ldr	r3, [pc, #164]	; (8009f0c <TCP_UDP_Stack_Init+0xcc>)
 8009e66:	601a      	str	r2, [r3, #0]
    if (saltLen > DEVICE_LEN_MAX)
 8009e68:	4b28      	ldr	r3, [pc, #160]	; (8009f0c <TCP_UDP_Stack_Init+0xcc>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b32      	cmp	r3, #50	; 0x32
 8009e6e:	dd02      	ble.n	8009e76 <TCP_UDP_Stack_Init+0x36>
      saltLen = DEVICE_LEN_MAX;
 8009e70:	4b26      	ldr	r3, [pc, #152]	; (8009f0c <TCP_UDP_Stack_Init+0xcc>)
 8009e72:	2232      	movs	r2, #50	; 0x32
 8009e74:	601a      	str	r2, [r3, #0]
    salt = (uint8_t *)malloc(saltLen);
 8009e76:	4b25      	ldr	r3, [pc, #148]	; (8009f0c <TCP_UDP_Stack_Init+0xcc>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f016 fe9e 	bl	8020bbc <malloc>
 8009e80:	4603      	mov	r3, r0
 8009e82:	461a      	mov	r2, r3
 8009e84:	4b1f      	ldr	r3, [pc, #124]	; (8009f04 <TCP_UDP_Stack_Init+0xc4>)
 8009e86:	601a      	str	r2, [r3, #0]
  }

  TCPConnectStatus = 0;
 8009e88:	4b21      	ldr	r3, [pc, #132]	; (8009f10 <TCP_UDP_Stack_Init+0xd0>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	601a      	str	r2, [r3, #0]
  IsTLSHanshaked = false;
 8009e8e:	4b21      	ldr	r3, [pc, #132]	; (8009f14 <TCP_UDP_Stack_Init+0xd4>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	701a      	strb	r2, [r3, #0]
  ISError = false;
 8009e94:	4b20      	ldr	r3, [pc, #128]	; (8009f18 <TCP_UDP_Stack_Init+0xd8>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	701a      	strb	r2, [r3, #0]

  TcpBuffOffset = 0;
 8009e9a:	4b20      	ldr	r3, [pc, #128]	; (8009f1c <TCP_UDP_Stack_Init+0xdc>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	601a      	str	r2, [r3, #0]
  bIsPending = false;
 8009ea0:	4b1f      	ldr	r3, [pc, #124]	; (8009f20 <TCP_UDP_Stack_Init+0xe0>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	701a      	strb	r2, [r3, #0]
  remainData = 0;
 8009ea6:	4b1f      	ldr	r3, [pc, #124]	; (8009f24 <TCP_UDP_Stack_Init+0xe4>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]

  udpTimerCount = 0;
 8009eac:	4b1e      	ldr	r3, [pc, #120]	; (8009f28 <TCP_UDP_Stack_Init+0xe8>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]
  tcpTimerCount = 1;
 8009eb2:	4b1e      	ldr	r3, [pc, #120]	; (8009f2c <TCP_UDP_Stack_Init+0xec>)
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	601a      	str	r2, [r3, #0]
  ntpTime = 0;
 8009eb8:	491d      	ldr	r1, [pc, #116]	; (8009f30 <TCP_UDP_Stack_Init+0xf0>)
 8009eba:	f04f 0200 	mov.w	r2, #0
 8009ebe:	f04f 0300 	mov.w	r3, #0
 8009ec2:	e9c1 2300 	strd	r2, r3, [r1]

  if (IsETH)
 8009ec6:	78fb      	ldrb	r3, [r7, #3]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d003      	beq.n	8009ed4 <TCP_UDP_Stack_Init+0x94>
  {
    connectType = connectTypeETH;
 8009ecc:	4b19      	ldr	r3, [pc, #100]	; (8009f34 <TCP_UDP_Stack_Init+0xf4>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	701a      	strb	r2, [r3, #0]
 8009ed2:	e002      	b.n	8009eda <TCP_UDP_Stack_Init+0x9a>
  }
  else
  {
    connectType = connectTypeSim7600;
 8009ed4:	4b17      	ldr	r3, [pc, #92]	; (8009f34 <TCP_UDP_Stack_Init+0xf4>)
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	701a      	strb	r2, [r3, #0]
  }

  TCP_UDP_StackEventID = eventID;
 8009eda:	4a17      	ldr	r2, [pc, #92]	; (8009f38 <TCP_UDP_Stack_Init+0xf8>)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6013      	str	r3, [r2, #0]
  TCP_UDP_Flag.Success = successFlag; //successful TLS handshake
 8009ee0:	4a16      	ldr	r2, [pc, #88]	; (8009f3c <TCP_UDP_Stack_Init+0xfc>)
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	6013      	str	r3, [r2, #0]
  TCP_UDP_Flag.Error = errorFlag;
 8009ee6:	4a15      	ldr	r2, [pc, #84]	; (8009f3c <TCP_UDP_Stack_Init+0xfc>)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6093      	str	r3, [r2, #8]

  //send request rsa-pubkey
  //  TCP_UDP_Send(1, Keepalive_Packet, Keepalive_Packet_LEN);

  //init timer time-out tcp connect (max time before recv "ACK"))
  osTimerStart(TCPTimerOnceID, TLS_HANDSHAKE_TIMEOUT);
 8009eec:	4b14      	ldr	r3, [pc, #80]	; (8009f40 <TCP_UDP_Stack_Init+0x100>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f644 6120 	movw	r1, #20000	; 0x4e20
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f001 fb1d 	bl	800b534 <osTimerStart>
}
 8009efa:	bf00      	nop
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	200101e4 	.word	0x200101e4
 8009f08:	20000004 	.word	0x20000004
 8009f0c:	200103f8 	.word	0x200103f8
 8009f10:	200007e8 	.word	0x200007e8
 8009f14:	200007ec 	.word	0x200007ec
 8009f18:	200007ed 	.word	0x200007ed
 8009f1c:	200007f0 	.word	0x200007f0
 8009f20:	200007f4 	.word	0x200007f4
 8009f24:	200007f8 	.word	0x200007f8
 8009f28:	200007fc 	.word	0x200007fc
 8009f2c:	20000330 	.word	0x20000330
 8009f30:	20000808 	.word	0x20000808
 8009f34:	200103fc 	.word	0x200103fc
 8009f38:	20010400 	.word	0x20010400
 8009f3c:	200101c8 	.word	0x200101c8
 8009f40:	200058e8 	.word	0x200058e8

08009f44 <TCP_UDP_Stack_Release>:

//stop timer before re-connect
void TCP_UDP_Stack_Release()
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
  LOG_WRITE("tcpUdpRelease\n");
  osTimerStop(TCPTimerOnceID);
 8009f48:	4b04      	ldr	r3, [pc, #16]	; (8009f5c <TCP_UDP_Stack_Release+0x18>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 fb1f 	bl	800b590 <osTimerStop>
  IsTLSHanshaked = false;
 8009f52:	4b03      	ldr	r3, [pc, #12]	; (8009f60 <TCP_UDP_Stack_Release+0x1c>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
}
 8009f58:	bf00      	nop
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	200058e8 	.word	0x200058e8
 8009f60:	200007ec 	.word	0x200007ec

08009f64 <TCP_Timer_Callback>:

// osTimerStop(TCPTimerOnceID);
//time-out -> recconnect TCP/UDP
void TCP_Timer_Callback(void *argument)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  LOG_WRITE("tcpTimerCallb\n");
  (void)argument;
  if (!IsTLSHanshaked)
 8009f6c:	4b43      	ldr	r3, [pc, #268]	; (800a07c <TCP_Timer_Callback+0x118>)
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	f083 0301 	eor.w	r3, r3, #1
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d005      	beq.n	8009f86 <TCP_Timer_Callback+0x22>
  {
    TCP_UDP_Notify(TCP_UDP_Flag.Error);
 8009f7a:	4b41      	ldr	r3, [pc, #260]	; (800a080 <TCP_Timer_Callback+0x11c>)
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7ff fb0e 	bl	80095a0 <TCP_UDP_Notify>
    return;
 8009f84:	e076      	b.n	800a074 <TCP_Timer_Callback+0x110>
  }

  if (tcpTimerCount % SEND_STAUS_INTERVAL == 0)
 8009f86:	4b3f      	ldr	r3, [pc, #252]	; (800a084 <TCP_Timer_Callback+0x120>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	4b3f      	ldr	r3, [pc, #252]	; (800a088 <TCP_Timer_Callback+0x124>)
 8009f8c:	fb83 1302 	smull	r1, r3, r3, r2
 8009f90:	1159      	asrs	r1, r3, #5
 8009f92:	17d3      	asrs	r3, r2, #31
 8009f94:	1acb      	subs	r3, r1, r3
 8009f96:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009f9a:	fb01 f303 	mul.w	r3, r1, r3
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d113      	bne.n	8009fcc <TCP_Timer_Callback+0x68>
  {
    int diffStatus = 0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	617b      	str	r3, [r7, #20]
    memcpy(Status_Packet + 2, (uint8_t *)(&diffStatus), 4);
 8009fa8:	4a38      	ldr	r2, [pc, #224]	; (800a08c <TCP_Timer_Callback+0x128>)
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	6013      	str	r3, [r2, #0]
    if (TCP_UDP_Send(1, Status_Packet, Status_Packet_LEN))
 8009fae:	2306      	movs	r3, #6
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	4937      	ldr	r1, [pc, #220]	; (800a090 <TCP_Timer_Callback+0x12c>)
 8009fb4:	2001      	movs	r0, #1
 8009fb6:	f7ff fb07 	bl	80095c8 <TCP_UDP_Send>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d028      	beq.n	800a012 <TCP_Timer_Callback+0xae>
    {
      tcpTimerCount++;
 8009fc0:	4b30      	ldr	r3, [pc, #192]	; (800a084 <TCP_Timer_Callback+0x120>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	4a2f      	ldr	r2, [pc, #188]	; (800a084 <TCP_Timer_Callback+0x120>)
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	e022      	b.n	800a012 <TCP_Timer_Callback+0xae>
    }
  }
  else if (tcpTimerCount % KEEP_ALIVE_INTERVAL == 0)
 8009fcc:	4b2d      	ldr	r3, [pc, #180]	; (800a084 <TCP_Timer_Callback+0x120>)
 8009fce:	6819      	ldr	r1, [r3, #0]
 8009fd0:	4b30      	ldr	r3, [pc, #192]	; (800a094 <TCP_Timer_Callback+0x130>)
 8009fd2:	fb83 2301 	smull	r2, r3, r3, r1
 8009fd6:	10da      	asrs	r2, r3, #3
 8009fd8:	17cb      	asrs	r3, r1, #31
 8009fda:	1ad2      	subs	r2, r2, r3
 8009fdc:	4613      	mov	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	1aca      	subs	r2, r1, r3
 8009fe6:	2a00      	cmp	r2, #0
 8009fe8:	d10e      	bne.n	800a008 <TCP_Timer_Callback+0xa4>
  {
    if (TCP_UDP_Send(1, Keepalive_Packet, Keepalive_Packet_LEN))
 8009fea:	2303      	movs	r3, #3
 8009fec:	461a      	mov	r2, r3
 8009fee:	492a      	ldr	r1, [pc, #168]	; (800a098 <TCP_Timer_Callback+0x134>)
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	f7ff fae9 	bl	80095c8 <TCP_UDP_Send>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00a      	beq.n	800a012 <TCP_Timer_Callback+0xae>
    {
      tcpTimerCount++;
 8009ffc:	4b21      	ldr	r3, [pc, #132]	; (800a084 <TCP_Timer_Callback+0x120>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3301      	adds	r3, #1
 800a002:	4a20      	ldr	r2, [pc, #128]	; (800a084 <TCP_Timer_Callback+0x120>)
 800a004:	6013      	str	r3, [r2, #0]
 800a006:	e004      	b.n	800a012 <TCP_Timer_Callback+0xae>
    }
  }
  else
    tcpTimerCount++;
 800a008:	4b1e      	ldr	r3, [pc, #120]	; (800a084 <TCP_Timer_Callback+0x120>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3301      	adds	r3, #1
 800a00e:	4a1d      	ldr	r2, [pc, #116]	; (800a084 <TCP_Timer_Callback+0x120>)
 800a010:	6013      	str	r3, [r2, #0]

  if (udpTimerCount % NTP_INTERVAL == 0)
 800a012:	4b22      	ldr	r3, [pc, #136]	; (800a09c <TCP_Timer_Callback+0x138>)
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	4b1c      	ldr	r3, [pc, #112]	; (800a088 <TCP_Timer_Callback+0x124>)
 800a018:	fb83 1302 	smull	r1, r3, r3, r2
 800a01c:	1159      	asrs	r1, r3, #5
 800a01e:	17d3      	asrs	r3, r2, #31
 800a020:	1acb      	subs	r3, r1, r3
 800a022:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800a026:	fb01 f303 	mul.w	r3, r1, r3
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d115      	bne.n	800a05c <TCP_Timer_Callback+0xf8>
    // memcpy(NTP_Packet, md5Sum, MD5_LEN);
    // //encrypt md5 sum
    // AES_Encrypt_Packet_Key(NTP_Packet, 16, (uint8_t*)ntpAESkey);

    // TCP_UDP_Send(2, NTP_Packet, NTP_PACKET_LEN);
    uint32_t curT = TIM_NTP->CNT;
 800a030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	613b      	str	r3, [r7, #16]
 800a038:	693b      	ldr	r3, [r7, #16]
    memcpy(NTP_Packet, (uint8_t *)(&curT), 4);
 800a03a:	4a19      	ldr	r2, [pc, #100]	; (800a0a0 <TCP_Timer_Callback+0x13c>)
 800a03c:	6013      	str	r3, [r2, #0]
    uint16_t _checksum = checkSum(NTP_Packet, 4);
 800a03e:	2104      	movs	r1, #4
 800a040:	4817      	ldr	r0, [pc, #92]	; (800a0a0 <TCP_Timer_Callback+0x13c>)
 800a042:	f7ff fe11 	bl	8009c68 <checkSum>
 800a046:	4603      	mov	r3, r0
 800a048:	81fb      	strh	r3, [r7, #14]
    memcpy(NTP_Packet + 4, (uint8_t*)(&_checksum), 2);
 800a04a:	4a16      	ldr	r2, [pc, #88]	; (800a0a4 <TCP_Timer_Callback+0x140>)
 800a04c:	89fb      	ldrh	r3, [r7, #14]
 800a04e:	8013      	strh	r3, [r2, #0]
    TCP_UDP_Send(2, NTP_Packet, 6);
 800a050:	2206      	movs	r2, #6
 800a052:	4913      	ldr	r1, [pc, #76]	; (800a0a0 <TCP_Timer_Callback+0x13c>)
 800a054:	2002      	movs	r0, #2
 800a056:	f7ff fab7 	bl	80095c8 <TCP_UDP_Send>
 800a05a:	e004      	b.n	800a066 <TCP_Timer_Callback+0x102>
  }
  else
  {
    udpTimerCount++;
 800a05c:	4b0f      	ldr	r3, [pc, #60]	; (800a09c <TCP_Timer_Callback+0x138>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3301      	adds	r3, #1
 800a062:	4a0e      	ldr	r2, [pc, #56]	; (800a09c <TCP_Timer_Callback+0x138>)
 800a064:	6013      	str	r3, [r2, #0]
  }
  
  osTimerStart(TCPTimerOnceID, TIMER_INTERVAL);
 800a066:	4b10      	ldr	r3, [pc, #64]	; (800a0a8 <TCP_Timer_Callback+0x144>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a06e:	4618      	mov	r0, r3
 800a070:	f001 fa60 	bl	800b534 <osTimerStart>
}
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	200007ec 	.word	0x200007ec
 800a080:	200101c8 	.word	0x200101c8
 800a084:	20000330 	.word	0x20000330
 800a088:	1b4e81b5 	.word	0x1b4e81b5
 800a08c:	2000032a 	.word	0x2000032a
 800a090:	20000328 	.word	0x20000328
 800a094:	66666667 	.word	0x66666667
 800a098:	20000324 	.word	0x20000324
 800a09c:	200007fc 	.word	0x200007fc
 800a0a0:	20010410 	.word	0x20010410
 800a0a4:	20010414 	.word	0x20010414
 800a0a8:	200058e8 	.word	0x200058e8

0800a0ac <TCP_Request>:

//request rsa pub key
void TCP_Request()
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  TCP_UDP_Send(1, Keepalive_Packet, Keepalive_Packet_LEN);
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	4902      	ldr	r1, [pc, #8]	; (800a0c0 <TCP_Request+0x14>)
 800a0b6:	2001      	movs	r0, #1
 800a0b8:	f7ff fa86 	bl	80095c8 <TCP_UDP_Send>
}
 800a0bc:	bf00      	nop
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	20000324 	.word	0x20000324

0800a0c4 <CheckMD5>:

bool Is_TCP_LTSHanshake_Connected() { return IsTLSHanshaked; }

//with pubkey packet (first packet), not necessary to decrypt md5
bool CheckMD5(PacketTCPStruct *packet)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  LOG_WRITE("chkMD5\n");
  if (TCPConnectStatus != 0) // >=1
 800a0cc:	4b1a      	ldr	r3, [pc, #104]	; (800a138 <CheckMD5+0x74>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00c      	beq.n	800a0ee <CheckMD5+0x2a>
  {
    int res = AES_Decrypt_Packet(packet->md5, SIZE_OF_MD5);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3302      	adds	r3, #2
 800a0d8:	2110      	movs	r1, #16
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fb fc2a 	bl	8005934 <AES_Decrypt_Packet>
 800a0e0:	6138      	str	r0, [r7, #16]
    if (res == -1)
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e8:	d101      	bne.n	800a0ee <CheckMD5+0x2a>
      return false;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	e01f      	b.n	800a12e <CheckMD5+0x6a>
  }
  uint8_t *md5Sum = md5hash(packet->payload, realPacketLen);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3312      	adds	r3, #18
 800a0f2:	4a12      	ldr	r2, [pc, #72]	; (800a13c <CheckMD5+0x78>)
 800a0f4:	6812      	ldr	r2, [r2, #0]
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fc fd15 	bl	8006b28 <md5hash>
 800a0fe:	60f8      	str	r0, [r7, #12]
  int i;
  for (i = 0; i < SIZE_OF_MD5; i++)
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	e00f      	b.n	800a126 <CheckMD5+0x62>
  {
    if (packet->md5[i] != md5Sum[i])
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	4413      	add	r3, r2
 800a10c:	3302      	adds	r3, #2
 800a10e:	781a      	ldrb	r2, [r3, #0]
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	68f9      	ldr	r1, [r7, #12]
 800a114:	440b      	add	r3, r1
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d001      	beq.n	800a120 <CheckMD5+0x5c>
      return false;
 800a11c:	2300      	movs	r3, #0
 800a11e:	e006      	b.n	800a12e <CheckMD5+0x6a>
  for (i = 0; i < SIZE_OF_MD5; i++)
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	3301      	adds	r3, #1
 800a124:	617b      	str	r3, [r7, #20]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	2b0f      	cmp	r3, #15
 800a12a:	ddec      	ble.n	800a106 <CheckMD5+0x42>
  }
  return true;
 800a12c:	2301      	movs	r3, #1
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3718      	adds	r7, #24
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	200007e8 	.word	0x200007e8
 800a13c:	20010430 	.word	0x20010430

0800a140 <ConvertTextWithSalt>:

void ConvertTextWithSalt(uint8_t *data, int offset, int len, enum SaltEnum saltType)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	70fb      	strb	r3, [r7, #3]
  LOG_WRITE("convertTextSalt\n");
  if (salt == NULL)
 800a14e:	4b30      	ldr	r3, [pc, #192]	; (800a210 <ConvertTextWithSalt+0xd0>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d055      	beq.n	800a202 <ConvertTextWithSalt+0xc2>
    return; //something wrong ???

  int i = 0, j = 0;
 800a156:	2300      	movs	r3, #0
 800a158:	617b      	str	r3, [r7, #20]
 800a15a:	2300      	movs	r3, #0
 800a15c:	613b      	str	r3, [r7, #16]
  if (saltType == Add)
 800a15e:	78fb      	ldrb	r3, [r7, #3]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d149      	bne.n	800a1f8 <ConvertTextWithSalt+0xb8>
  {
    while (j < len)
 800a164:	e021      	b.n	800a1aa <ConvertTextWithSalt+0x6a>
    {
      data[j + offset] += salt[i];
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	4413      	add	r3, r2
 800a16c:	461a      	mov	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	4413      	add	r3, r2
 800a172:	7819      	ldrb	r1, [r3, #0]
 800a174:	4b26      	ldr	r3, [pc, #152]	; (800a210 <ConvertTextWithSalt+0xd0>)
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	4413      	add	r3, r2
 800a17c:	781a      	ldrb	r2, [r3, #0]
 800a17e:	6938      	ldr	r0, [r7, #16]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4403      	add	r3, r0
 800a184:	4618      	mov	r0, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4403      	add	r3, r0
 800a18a:	440a      	add	r2, r1
 800a18c:	b2d2      	uxtb	r2, r2
 800a18e:	701a      	strb	r2, [r3, #0]
      j++;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	3301      	adds	r3, #1
 800a194:	613b      	str	r3, [r7, #16]
      i++;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	3301      	adds	r3, #1
 800a19a:	617b      	str	r3, [r7, #20]
      if (i == saltLen)
 800a19c:	4b1d      	ldr	r3, [pc, #116]	; (800a214 <ConvertTextWithSalt+0xd4>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d101      	bne.n	800a1aa <ConvertTextWithSalt+0x6a>
        i = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	617b      	str	r3, [r7, #20]
    while (j < len)
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	dbd9      	blt.n	800a166 <ConvertTextWithSalt+0x26>
 800a1b2:	e027      	b.n	800a204 <ConvertTextWithSalt+0xc4>
  }
  else //sub
  {
    while (j < len)
    {
      data[j + offset] -= salt[i];
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	7819      	ldrb	r1, [r3, #0]
 800a1c2:	4b13      	ldr	r3, [pc, #76]	; (800a210 <ConvertTextWithSalt+0xd0>)
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	781a      	ldrb	r2, [r3, #0]
 800a1cc:	6938      	ldr	r0, [r7, #16]
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	4403      	add	r3, r0
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	4403      	add	r3, r0
 800a1d8:	1a8a      	subs	r2, r1, r2
 800a1da:	b2d2      	uxtb	r2, r2
 800a1dc:	701a      	strb	r2, [r3, #0]
      j++;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	613b      	str	r3, [r7, #16]
      i++;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	617b      	str	r3, [r7, #20]
      if (i == saltLen)
 800a1ea:	4b0a      	ldr	r3, [pc, #40]	; (800a214 <ConvertTextWithSalt+0xd4>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d101      	bne.n	800a1f8 <ConvertTextWithSalt+0xb8>
        i = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	617b      	str	r3, [r7, #20]
    while (j < len)
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	dbd9      	blt.n	800a1b4 <ConvertTextWithSalt+0x74>
 800a200:	e000      	b.n	800a204 <ConvertTextWithSalt+0xc4>
    return; //something wrong ???
 800a202:	bf00      	nop
    }
  }
}
 800a204:	371c      	adds	r7, #28
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	200101e4 	.word	0x200101e4
 800a214:	200103f8 	.word	0x200103f8

0800a218 <CheckSaltACK>:

//check data is the same with salt
bool CheckSaltACK(uint8_t *data, int len)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  LOG_WRITE("chkSaltACK\n");
  if (len >= saltLen)
 800a222:	4b14      	ldr	r3, [pc, #80]	; (800a274 <CheckSaltACK+0x5c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	429a      	cmp	r2, r3
 800a22a:	db1b      	blt.n	800a264 <CheckSaltACK+0x4c>
  {
    int i;
    for (i = 0; i < saltLen; i++)
 800a22c:	2300      	movs	r3, #0
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	e011      	b.n	800a256 <CheckSaltACK+0x3e>
    {
      if ((data[i] & 0x7F) != salt[i])
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	4413      	add	r3, r2
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a23e:	4a0e      	ldr	r2, [pc, #56]	; (800a278 <CheckSaltACK+0x60>)
 800a240:	6811      	ldr	r1, [r2, #0]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	440a      	add	r2, r1
 800a246:	7812      	ldrb	r2, [r2, #0]
 800a248:	4293      	cmp	r3, r2
 800a24a:	d001      	beq.n	800a250 <CheckSaltACK+0x38>
        return false;
 800a24c:	2300      	movs	r3, #0
 800a24e:	e00a      	b.n	800a266 <CheckSaltACK+0x4e>
    for (i = 0; i < saltLen; i++)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	3301      	adds	r3, #1
 800a254:	60fb      	str	r3, [r7, #12]
 800a256:	4b07      	ldr	r3, [pc, #28]	; (800a274 <CheckSaltACK+0x5c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	dbe8      	blt.n	800a232 <CheckSaltACK+0x1a>
    }
    return true;
 800a260:	2301      	movs	r3, #1
 800a262:	e000      	b.n	800a266 <CheckSaltACK+0x4e>
  }
  return false;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	200103f8 	.word	0x200103f8
 800a278:	200101e4 	.word	0x200101e4

0800a27c <VS1063_SPI_ReadByte>:
int mainVol = 80;

#define VSLOG_WRITE printf

static uint8_t VS1063_SPI_ReadByte(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
	uint8_t rxData;

	HAL_StatusTypeDef res = HAL_SPI_Receive(&spiAudio, &rxData, 1, SPI_TIMEOUT_BYTE);
 800a282:	1db9      	adds	r1, r7, #6
 800a284:	2332      	movs	r3, #50	; 0x32
 800a286:	2201      	movs	r2, #1
 800a288:	4809      	ldr	r0, [pc, #36]	; (800a2b0 <VS1063_SPI_ReadByte+0x34>)
 800a28a:	f7f9 fab8 	bl	80037fe <HAL_SPI_Receive>
 800a28e:	4603      	mov	r3, r0
 800a290:	71fb      	strb	r3, [r7, #7]
	if (res != HAL_OK)
 800a292:	79fb      	ldrb	r3, [r7, #7]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d005      	beq.n	800a2a4 <VS1063_SPI_ReadByte+0x28>
	{
		VSLOG_WRITE("HAL_SPI_Receive Error\n");
 800a298:	4806      	ldr	r0, [pc, #24]	; (800a2b4 <VS1063_SPI_ReadByte+0x38>)
 800a29a:	f016 fe33 	bl	8020f04 <puts>
		errorVS1063A = true;
 800a29e:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <VS1063_SPI_ReadByte+0x3c>)
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	701a      	strb	r2, [r3, #0]
	}

	return rxData;
 800a2a4:	79bb      	ldrb	r3, [r7, #6]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20005848 	.word	0x20005848
 800a2b4:	0802275c 	.word	0x0802275c
 800a2b8:	20000335 	.word	0x20000335

0800a2bc <VS1063_SPI_WriteByte>:

static void VS1063_SPI_WriteByte(uint8_t TxData)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res = HAL_SPI_Transmit(&spiAudio, &TxData, 1, SPI_TIMEOUT_BYTE);
 800a2c6:	1df9      	adds	r1, r7, #7
 800a2c8:	2332      	movs	r3, #50	; 0x32
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	4808      	ldr	r0, [pc, #32]	; (800a2f0 <VS1063_SPI_WriteByte+0x34>)
 800a2ce:	f7f9 f95a 	bl	8003586 <HAL_SPI_Transmit>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	73fb      	strb	r3, [r7, #15]
	if (res != HAL_OK)
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d005      	beq.n	800a2e8 <VS1063_SPI_WriteByte+0x2c>
	{
		VSLOG_WRITE("HAL_SPI_Transmit Error\n");
 800a2dc:	4805      	ldr	r0, [pc, #20]	; (800a2f4 <VS1063_SPI_WriteByte+0x38>)
 800a2de:	f016 fe11 	bl	8020f04 <puts>
		errorVS1063A = true;
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <VS1063_SPI_WriteByte+0x3c>)
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	701a      	strb	r2, [r3, #0]
	}
}
 800a2e8:	bf00      	nop
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	20005848 	.word	0x20005848
 800a2f4:	08022774 	.word	0x08022774
 800a2f8:	20000335 	.word	0x20000335

0800a2fc <VS1063_SPI_WriteArray>:

static void VS1063_SPI_WriteArray(uint8_t *TxData, int len)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
	VSLOG_WRITE("VS1063_SPI_WriteArray\n");
 800a306:	480d      	ldr	r0, [pc, #52]	; (800a33c <VS1063_SPI_WriteArray+0x40>)
 800a308:	f016 fdfc 	bl	8020f04 <puts>
	HAL_StatusTypeDef res = HAL_SPI_Transmit(&spiAudio, TxData, len, HAL_MAX_DELAY);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	b29a      	uxth	r2, r3
 800a310:	f04f 33ff 	mov.w	r3, #4294967295
 800a314:	6879      	ldr	r1, [r7, #4]
 800a316:	480a      	ldr	r0, [pc, #40]	; (800a340 <VS1063_SPI_WriteArray+0x44>)
 800a318:	f7f9 f935 	bl	8003586 <HAL_SPI_Transmit>
 800a31c:	4603      	mov	r3, r0
 800a31e:	73fb      	strb	r3, [r7, #15]
	if (res != HAL_OK)
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d005      	beq.n	800a332 <VS1063_SPI_WriteArray+0x36>
	{
		VSLOG_WRITE("HAL_SPI_Transmit Error\n");
 800a326:	4807      	ldr	r0, [pc, #28]	; (800a344 <VS1063_SPI_WriteArray+0x48>)
 800a328:	f016 fdec 	bl	8020f04 <puts>
		errorVS1063A = true;
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <VS1063_SPI_WriteArray+0x4c>)
 800a32e:	2201      	movs	r2, #1
 800a330:	701a      	strb	r2, [r3, #0]
	}
}
 800a332:	bf00      	nop
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	0802278c 	.word	0x0802278c
 800a340:	20005848 	.word	0x20005848
 800a344:	08022774 	.word	0x08022774
 800a348:	20000335 	.word	0x20000335

0800a34c <waitMp3DREQ>:

//return 1 ~ success, 0 ~ , wait until MP3_DREQ == 1
int waitMp3DREQ()
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
	VSLOG_WRITE("waitMp3DREQ\n");
 800a352:	4810      	ldr	r0, [pc, #64]	; (800a394 <waitMp3DREQ+0x48>)
 800a354:	f016 fdd6 	bl	8020f04 <puts>
	int try = MP3_DREQ_WAIT_CLKS;
 800a358:	4b0f      	ldr	r3, [pc, #60]	; (800a398 <waitMp3DREQ+0x4c>)
 800a35a:	607b      	str	r3, [r7, #4]
	while (try-- && MP3_DREQ == 0)
 800a35c:	bf00      	nop
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	1e5a      	subs	r2, r3, #1
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d007      	beq.n	800a378 <waitMp3DREQ+0x2c>
 800a368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a36c:	480b      	ldr	r0, [pc, #44]	; (800a39c <waitMp3DREQ+0x50>)
 800a36e:	f7f8 ffe3 	bl	8003338 <HAL_GPIO_ReadPin>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d0f2      	beq.n	800a35e <waitMp3DREQ+0x12>
		;

	if (try <= 0)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	dc04      	bgt.n	800a388 <waitMp3DREQ+0x3c>
	{
		errorVS1063A = true;
 800a37e:	4b08      	ldr	r3, [pc, #32]	; (800a3a0 <waitMp3DREQ+0x54>)
 800a380:	2201      	movs	r2, #1
 800a382:	701a      	strb	r2, [r3, #0]
		return 0;
 800a384:	2300      	movs	r3, #0
 800a386:	e000      	b.n	800a38a <waitMp3DREQ+0x3e>
	}

	return 1;
 800a388:	2301      	movs	r3, #1
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	080227a4 	.word	0x080227a4
 800a398:	000493e0 	.word	0x000493e0
 800a39c:	40021000 	.word	0x40021000
 800a3a0:	20000335 	.word	0x20000335

0800a3a4 <VS1063_WriteReg>:

void VS1063_WriteReg(uint8_t reg, uint16_t value)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	460a      	mov	r2, r1
 800a3ae:	71fb      	strb	r3, [r7, #7]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	80bb      	strh	r3, [r7, #4]
	VSLOG_WRITE("VS1063_WriteReg\n");
 800a3b4:	4813      	ldr	r0, [pc, #76]	; (800a404 <VS1063_WriteReg+0x60>)
 800a3b6:	f016 fda5 	bl	8020f04 <puts>
	waitMp3DREQ();
 800a3ba:	f7ff ffc7 	bl	800a34c <waitMp3DREQ>

	SCI_ENABLE
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a3c4:	4810      	ldr	r0, [pc, #64]	; (800a408 <VS1063_WriteReg+0x64>)
 800a3c6:	f7f8 ffcf 	bl	8003368 <HAL_GPIO_WritePin>

	VS1063_SPI_WriteByte(VS_WRITE_COMMAND);
 800a3ca:	2002      	movs	r0, #2
 800a3cc:	f7ff ff76 	bl	800a2bc <VS1063_SPI_WriteByte>
	VS1063_SPI_WriteByte(reg);
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff ff72 	bl	800a2bc <VS1063_SPI_WriteByte>
	VS1063_SPI_WriteByte(value >> 8);
 800a3d8:	88bb      	ldrh	r3, [r7, #4]
 800a3da:	0a1b      	lsrs	r3, r3, #8
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff ff6b 	bl	800a2bc <VS1063_SPI_WriteByte>
	VS1063_SPI_WriteByte(value);
 800a3e6:	88bb      	ldrh	r3, [r7, #4]
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff ff66 	bl	800a2bc <VS1063_SPI_WriteByte>

	SCI_DISABLE
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a3f6:	4804      	ldr	r0, [pc, #16]	; (800a408 <VS1063_WriteReg+0x64>)
 800a3f8:	f7f8 ffb6 	bl	8003368 <HAL_GPIO_WritePin>
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	080227b0 	.word	0x080227b0
 800a408:	40021000 	.word	0x40021000

0800a40c <VS1063_ReadReg>:

uint16_t VS1063_ReadReg(uint8_t reg)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	4603      	mov	r3, r0
 800a414:	71fb      	strb	r3, [r7, #7]
	uint16_t value;
	VSLOG_WRITE("VS1063_ReadReg\n");
 800a416:	4815      	ldr	r0, [pc, #84]	; (800a46c <VS1063_ReadReg+0x60>)
 800a418:	f016 fd74 	bl	8020f04 <puts>

	waitMp3DREQ();
 800a41c:	f7ff ff96 	bl	800a34c <waitMp3DREQ>

	SCI_ENABLE
 800a420:	2200      	movs	r2, #0
 800a422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a426:	4812      	ldr	r0, [pc, #72]	; (800a470 <VS1063_ReadReg+0x64>)
 800a428:	f7f8 ff9e 	bl	8003368 <HAL_GPIO_WritePin>

	VS1063_SPI_WriteByte(VS_READ_COMMAND);
 800a42c:	2003      	movs	r0, #3
 800a42e:	f7ff ff45 	bl	800a2bc <VS1063_SPI_WriteByte>
	VS1063_SPI_WriteByte(reg);
 800a432:	79fb      	ldrb	r3, [r7, #7]
 800a434:	4618      	mov	r0, r3
 800a436:	f7ff ff41 	bl	800a2bc <VS1063_SPI_WriteByte>
	value = VS1063_SPI_ReadByte();
 800a43a:	f7ff ff1f 	bl	800a27c <VS1063_SPI_ReadByte>
 800a43e:	4603      	mov	r3, r0
 800a440:	81fb      	strh	r3, [r7, #14]
	value = value << 8;
 800a442:	89fb      	ldrh	r3, [r7, #14]
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	81fb      	strh	r3, [r7, #14]
	value |= VS1063_SPI_ReadByte();
 800a448:	f7ff ff18 	bl	800a27c <VS1063_SPI_ReadByte>
 800a44c:	4603      	mov	r3, r0
 800a44e:	b29a      	uxth	r2, r3
 800a450:	89fb      	ldrh	r3, [r7, #14]
 800a452:	4313      	orrs	r3, r2
 800a454:	81fb      	strh	r3, [r7, #14]

	SCI_DISABLE
 800a456:	2201      	movs	r2, #1
 800a458:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a45c:	4804      	ldr	r0, [pc, #16]	; (800a470 <VS1063_ReadReg+0x64>)
 800a45e:	f7f8 ff83 	bl	8003368 <HAL_GPIO_WritePin>

	return value;
 800a462:	89fb      	ldrh	r3, [r7, #14]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	080227c0 	.word	0x080227c0
 800a470:	40021000 	.word	0x40021000

0800a474 <VS1063_SoftReset>:
	VSLOG_WRITE("VS1063_GetDecodeTime\n");
	return VS1063_ReadReg(SPI_DECODE_TIME);
}

void VS1063_SoftReset(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
	VSLOG_WRITE("VS1063_SoftReset\n");
 800a47a:	4818      	ldr	r0, [pc, #96]	; (800a4dc <VS1063_SoftReset+0x68>)
 800a47c:	f016 fd42 	bl	8020f04 <puts>
	VS1063_WriteReg(SPI_MODE, (SM_SDINEW | SM_RESET)); /* */
 800a480:	f640 0104 	movw	r1, #2052	; 0x804
 800a484:	2000      	movs	r0, #0
 800a486:	f7ff ff8d 	bl	800a3a4 <VS1063_WriteReg>
	osDelay(2);										   /* 1.35ms */
 800a48a:	2002      	movs	r0, #2
 800a48c:	f000 ffa5 	bl	800b3da <osDelay>

	int retry = 5;
 800a490:	2305      	movs	r3, #5
 800a492:	607b      	str	r3, [r7, #4]
	while (VS1063_ReadReg(SPI_CLOCKF) != CONFIG_SPI_CLOCKF)
 800a494:	e013      	b.n	800a4be <VS1063_SoftReset+0x4a>
	{
		VS1063_WriteReg(SPI_CLOCKF, CONFIG_SPI_CLOCKF);
 800a496:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 800a49a:	2003      	movs	r0, #3
 800a49c:	f7ff ff82 	bl	800a3a4 <VS1063_WriteReg>
		osDelay(1);
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	f000 ff9a 	bl	800b3da <osDelay>
		if (retry-- < 0)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	1e5a      	subs	r2, r3, #1
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	da06      	bge.n	800a4be <VS1063_SoftReset+0x4a>
		{
			printf("SPI_CLOCKF Set Error\r\n");
 800a4b0:	480b      	ldr	r0, [pc, #44]	; (800a4e0 <VS1063_SoftReset+0x6c>)
 800a4b2:	f016 fd27 	bl	8020f04 <puts>
			errorVS1063A = true;
 800a4b6:	4b0b      	ldr	r3, [pc, #44]	; (800a4e4 <VS1063_SoftReset+0x70>)
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	701a      	strb	r2, [r3, #0]
			return;
 800a4bc:	e00b      	b.n	800a4d6 <VS1063_SoftReset+0x62>
	while (VS1063_ReadReg(SPI_CLOCKF) != CONFIG_SPI_CLOCKF)
 800a4be:	2003      	movs	r0, #3
 800a4c0:	f7ff ffa4 	bl	800a40c <VS1063_ReadReg>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 800a4ca:	d1e4      	bne.n	800a496 <VS1063_SoftReset+0x22>
		}
	}

	VS1063_SetVol(mainVol);
 800a4cc:	4b06      	ldr	r3, [pc, #24]	; (800a4e8 <VS1063_SoftReset+0x74>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 f80b 	bl	800a4ec <VS1063_SetVol>
}
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	08022800 	.word	0x08022800
 800a4e0:	08022814 	.word	0x08022814
 800a4e4:	20000335 	.word	0x20000335
 800a4e8:	2000033c 	.word	0x2000033c

0800a4ec <VS1063_SetVol>:

//input vol 0-100 ~ %, convert 0-100 ~ 0xFE-0x00
void VS1063_SetVol(int vol)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	vol = vol * volMul / 100;
 800a4f4:	4b1c      	ldr	r3, [pc, #112]	; (800a568 <VS1063_SetVol+0x7c>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	fb02 f303 	mul.w	r3, r2, r3
 800a4fe:	4a1b      	ldr	r2, [pc, #108]	; (800a56c <VS1063_SetVol+0x80>)
 800a500:	fb82 1203 	smull	r1, r2, r2, r3
 800a504:	1152      	asrs	r2, r2, #5
 800a506:	17db      	asrs	r3, r3, #31
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	607b      	str	r3, [r7, #4]
	if (vol >= 100)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b63      	cmp	r3, #99	; 0x63
 800a510:	dd02      	ble.n	800a518 <VS1063_SetVol+0x2c>
	{
		vol = 0x00;
 800a512:	2300      	movs	r3, #0
 800a514:	607b      	str	r3, [r7, #4]
 800a516:	e013      	b.n	800a540 <VS1063_SetVol+0x54>
	}
	else if (vol <= 0)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	dc02      	bgt.n	800a524 <VS1063_SetVol+0x38>
	{
		vol = 0xFE;
 800a51e:	23fe      	movs	r3, #254	; 0xfe
 800a520:	607b      	str	r3, [r7, #4]
 800a522:	e00d      	b.n	800a540 <VS1063_SetVol+0x54>
	}
	else
	{
		vol = (100 - vol) * 0xFE / 100;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 800a52a:	4613      	mov	r3, r2
 800a52c:	01db      	lsls	r3, r3, #7
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	005b      	lsls	r3, r3, #1
 800a532:	4a0e      	ldr	r2, [pc, #56]	; (800a56c <VS1063_SetVol+0x80>)
 800a534:	fb82 1203 	smull	r1, r2, r2, r3
 800a538:	1152      	asrs	r2, r2, #5
 800a53a:	17db      	asrs	r3, r3, #31
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	607b      	str	r3, [r7, #4]
	}
	vol = vol | (vol << 8); //convert to 2 channels
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	021b      	lsls	r3, r3, #8
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	4313      	orrs	r3, r2
 800a548:	607b      	str	r3, [r7, #4]
	VSLOG_WRITE("vs1063 set vol %X", vol);
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	4808      	ldr	r0, [pc, #32]	; (800a570 <VS1063_SetVol+0x84>)
 800a54e:	f016 fc3d 	bl	8020dcc <iprintf>
	VS1063_WriteReg(SPI_VOL, vol);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	b29b      	uxth	r3, r3
 800a556:	4619      	mov	r1, r3
 800a558:	200b      	movs	r0, #11
 800a55a:	f7ff ff23 	bl	800a3a4 <VS1063_WriteReg>
}
 800a55e:	bf00      	nop
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20000338 	.word	0x20000338
 800a56c:	51eb851f 	.word	0x51eb851f
 800a570:	0802282c 	.word	0x0802282c

0800a574 <VS1063_Init>:
// 	    }
// }
//

void VS1063_Init(void)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
	if (!errorVS1063A)
 800a57a:	4b32      	ldr	r3, [pc, #200]	; (800a644 <VS1063_Init+0xd0>)
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	f083 0301 	eor.w	r3, r3, #1
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b00      	cmp	r3, #0
 800a586:	d158      	bne.n	800a63a <VS1063_Init+0xc6>
		return;

	VSLOG_WRITE("VS1063_Init\n");
 800a588:	482f      	ldr	r0, [pc, #188]	; (800a648 <VS1063_Init+0xd4>)
 800a58a:	f016 fcbb 	bl	8020f04 <puts>

	//change spi baud
	spiAudio.Init.BaudRatePrescaler = SPI_AUDIO_PRESCLE_RESET;
 800a58e:	4b2f      	ldr	r3, [pc, #188]	; (800a64c <VS1063_Init+0xd8>)
 800a590:	2230      	movs	r2, #48	; 0x30
 800a592:	61da      	str	r2, [r3, #28]
	if (HAL_SPI_Init(&spiAudio) != HAL_OK)
 800a594:	482d      	ldr	r0, [pc, #180]	; (800a64c <VS1063_Init+0xd8>)
 800a596:	f7f8 ff6d 	bl	8003474 <HAL_SPI_Init>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <VS1063_Init+0x30>
	{
		Error_Handler();
 800a5a0:	f7f6 ffe4 	bl	800156c <Error_Handler>
	}

	MP3_Reset(0);
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2180      	movs	r1, #128	; 0x80
 800a5a8:	4829      	ldr	r0, [pc, #164]	; (800a650 <VS1063_Init+0xdc>)
 800a5aa:	f7f8 fedd 	bl	8003368 <HAL_GPIO_WritePin>
	osDelay(100);
 800a5ae:	2064      	movs	r0, #100	; 0x64
 800a5b0:	f000 ff13 	bl	800b3da <osDelay>
	MP3_Reset(1);
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	2180      	movs	r1, #128	; 0x80
 800a5b8:	4825      	ldr	r0, [pc, #148]	; (800a650 <VS1063_Init+0xdc>)
 800a5ba:	f7f8 fed5 	bl	8003368 <HAL_GPIO_WritePin>

	MP3_DCS(1);
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a5c4:	4822      	ldr	r0, [pc, #136]	; (800a650 <VS1063_Init+0xdc>)
 800a5c6:	f7f8 fecf 	bl	8003368 <HAL_GPIO_WritePin>
	MP3_CCS(1);
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5d0:	481f      	ldr	r0, [pc, #124]	; (800a650 <VS1063_Init+0xdc>)
 800a5d2:	f7f8 fec9 	bl	8003368 <HAL_GPIO_WritePin>

	osDelay(100);
 800a5d6:	2064      	movs	r0, #100	; 0x64
 800a5d8:	f000 feff 	bl	800b3da <osDelay>

	//config
	VS1063_WriteReg(SPI_MODE, SM_SDINEW | SM_RESET); /* */
 800a5dc:	f640 0104 	movw	r1, #2052	; 0x804
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	f7ff fedf 	bl	800a3a4 <VS1063_WriteReg>
	osDelay(2);							  /* 1.35ms */
 800a5e6:	2002      	movs	r0, #2
 800a5e8:	f000 fef7 	bl	800b3da <osDelay>

	int retry = 5;
 800a5ec:	2305      	movs	r3, #5
 800a5ee:	607b      	str	r3, [r7, #4]
	while (VS1063_ReadReg(SPI_CLOCKF) != CONFIG_SPI_CLOCKF)
 800a5f0:	e013      	b.n	800a61a <VS1063_Init+0xa6>
	{
		VS1063_WriteReg(SPI_CLOCKF, CONFIG_SPI_CLOCKF);
 800a5f2:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 800a5f6:	2003      	movs	r0, #3
 800a5f8:	f7ff fed4 	bl	800a3a4 <VS1063_WriteReg>
		osDelay(1);
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	f000 feec 	bl	800b3da <osDelay>
		if (retry-- < 0)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	1e5a      	subs	r2, r3, #1
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	da06      	bge.n	800a61a <VS1063_Init+0xa6>
		{
			printf("SPI_CLOCKF Set Error\r\n");
 800a60c:	4811      	ldr	r0, [pc, #68]	; (800a654 <VS1063_Init+0xe0>)
 800a60e:	f016 fc79 	bl	8020f04 <puts>
			errorVS1063A = true;
 800a612:	4b0c      	ldr	r3, [pc, #48]	; (800a644 <VS1063_Init+0xd0>)
 800a614:	2201      	movs	r2, #1
 800a616:	701a      	strb	r2, [r3, #0]
			return;
 800a618:	e010      	b.n	800a63c <VS1063_Init+0xc8>
	while (VS1063_ReadReg(SPI_CLOCKF) != CONFIG_SPI_CLOCKF)
 800a61a:	2003      	movs	r0, #3
 800a61c:	f7ff fef6 	bl	800a40c <VS1063_ReadReg>
 800a620:	4603      	mov	r3, r0
 800a622:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 800a626:	d1e4      	bne.n	800a5f2 <VS1063_Init+0x7e>
	//	if (HAL_SPI_Init(&spiAudio) != HAL_OK)
	//	{
	//		Error_Handler();
	//	}

	VS1063_SetVol(mainVol);
 800a628:	4b0b      	ldr	r3, [pc, #44]	; (800a658 <VS1063_Init+0xe4>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff ff5d 	bl	800a4ec <VS1063_SetVol>
	errorVS1063A = false;
 800a632:	4b04      	ldr	r3, [pc, #16]	; (800a644 <VS1063_Init+0xd0>)
 800a634:	2200      	movs	r2, #0
 800a636:	701a      	strb	r2, [r3, #0]
 800a638:	e000      	b.n	800a63c <VS1063_Init+0xc8>
		return;
 800a63a:	bf00      	nop
}
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000335 	.word	0x20000335
 800a648:	08022840 	.word	0x08022840
 800a64c:	20005848 	.word	0x20005848
 800a650:	40021000 	.word	0x40021000
 800a654:	08022814 	.word	0x08022814
 800a658:	2000033c 	.word	0x2000033c

0800a65c <VS1063_PlayBeep>:

void VS1063_PlayBeep(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
	int in;

	SDI_ENABLE
 800a662:	2200      	movs	r2, #0
 800a664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a668:	480e      	ldr	r0, [pc, #56]	; (800a6a4 <VS1063_PlayBeep+0x48>)
 800a66a:	f7f8 fe7d 	bl	8003368 <HAL_GPIO_WritePin>

	//	VS1063_SPI_WriteArray(szBeepMP3, sizeof(szBeepMP3));
	for (in = 0; in < sizeof(szBeepMP3); in++)
 800a66e:	2300      	movs	r3, #0
 800a670:	607b      	str	r3, [r7, #4]
 800a672:	e009      	b.n	800a688 <VS1063_PlayBeep+0x2c>
		VS1063_SPI_WriteByte(szBeepMP3[in]);
 800a674:	4a0c      	ldr	r2, [pc, #48]	; (800a6a8 <VS1063_PlayBeep+0x4c>)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4413      	add	r3, r2
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff fe1d 	bl	800a2bc <VS1063_SPI_WriteByte>
	for (in = 0; in < sizeof(szBeepMP3); in++)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	3301      	adds	r3, #1
 800a686:	607b      	str	r3, [r7, #4]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800a68e:	d3f1      	bcc.n	800a674 <VS1063_PlayBeep+0x18>

	SDI_DISABLE
 800a690:	2201      	movs	r2, #1
 800a692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a696:	4803      	ldr	r0, [pc, #12]	; (800a6a4 <VS1063_PlayBeep+0x48>)
 800a698:	f7f8 fe66 	bl	8003368 <HAL_GPIO_WritePin>
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	40021000 	.word	0x40021000
 800a6a8:	20000340 	.word	0x20000340

0800a6ac <VS1063_PlayMP3>:

//send len byte of data frame to vs1063
void VS1063_PlayMP3(uint8_t *data, int len)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
	SDI_ENABLE
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a6bc:	4808      	ldr	r0, [pc, #32]	; (800a6e0 <VS1063_PlayMP3+0x34>)
 800a6be:	f7f8 fe53 	bl	8003368 <HAL_GPIO_WritePin>

	VS1063_SPI_WriteArray(data, len);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff fe19 	bl	800a2fc <VS1063_SPI_WriteArray>

	SDI_DISABLE
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a6d0:	4803      	ldr	r0, [pc, #12]	; (800a6e0 <VS1063_PlayMP3+0x34>)
 800a6d2:	f7f8 fe49 	bl	8003368 <HAL_GPIO_WritePin>
}
 800a6d6:	bf00      	nop
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	40021000 	.word	0x40021000

0800a6e4 <VS1063_PlayMp3Frame>:

void VS1063_PlayMp3Frame()
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
	static int pendingOffset = 0;
	static FrameStruct *curFrame = NULL;
	VSLOG_WRITE("*");
 800a6ea:	202a      	movs	r0, #42	; 0x2a
 800a6ec:	f016 fb86 	bl	8020dfc <putchar>
	for (;;)
	{
		if (curFrame == NULL)
 800a6f0:	4b36      	ldr	r3, [pc, #216]	; (800a7cc <VS1063_PlayMp3Frame+0xe8>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d104      	bne.n	800a702 <VS1063_PlayMp3Frame+0x1e>
		{
			curFrame = mp3GetNewFrame();
 800a6f8:	f7fc fd68 	bl	80071cc <mp3GetNewFrame>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	4a33      	ldr	r2, [pc, #204]	; (800a7cc <VS1063_PlayMp3Frame+0xe8>)
 800a700:	6013      	str	r3, [r2, #0]
		}

		if(curFrame == NULL) return; //have noting to play
 800a702:	4b32      	ldr	r3, [pc, #200]	; (800a7cc <VS1063_PlayMp3Frame+0xe8>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d05a      	beq.n	800a7c0 <VS1063_PlayMp3Frame+0xdc>

		//check real-time, if pendingOffset == 0
		if(pendingOffset == 0 && !mp3CheckFrame(curFrame))
 800a70a:	4b31      	ldr	r3, [pc, #196]	; (800a7d0 <VS1063_PlayMp3Frame+0xec>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10e      	bne.n	800a730 <VS1063_PlayMp3Frame+0x4c>
 800a712:	4b2e      	ldr	r3, [pc, #184]	; (800a7cc <VS1063_PlayMp3Frame+0xe8>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4618      	mov	r0, r3
 800a718:	f7fc fdb2 	bl	8007280 <mp3CheckFrame>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f083 0301 	eor.w	r3, r3, #1
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b00      	cmp	r3, #0
 800a726:	d003      	beq.n	800a730 <VS1063_PlayMp3Frame+0x4c>
		{
			curFrame = NULL;
 800a728:	4b28      	ldr	r3, [pc, #160]	; (800a7cc <VS1063_PlayMp3Frame+0xe8>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	601a      	str	r2, [r3, #0]
			return;
 800a72e:	e04a      	b.n	800a7c6 <VS1063_PlayMp3Frame+0xe2>
		}
		
		if(MP3_DREQ == 1) //can send data
 800a730:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a734:	4827      	ldr	r0, [pc, #156]	; (800a7d4 <VS1063_PlayMp3Frame+0xf0>)
 800a736:	f7f8 fdff 	bl	8003338 <HAL_GPIO_ReadPin>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d141      	bne.n	800a7c4 <VS1063_PlayMp3Frame+0xe0>
		{
			VSLOG_WRITE("+");
 800a740:	202b      	movs	r0, #43	; 0x2b
 800a742:	f016 fb5b 	bl	8020dfc <putchar>
			int remainLen = curFrame->len - pendingOffset;
 800a746:	4b21      	ldr	r3, [pc, #132]	; (800a7cc <VS1063_PlayMp3Frame+0xe8>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	691a      	ldr	r2, [r3, #16]
 800a74c:	4b20      	ldr	r3, [pc, #128]	; (800a7d0 <VS1063_PlayMp3Frame+0xec>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	607b      	str	r3, [r7, #4]
			if(remainLen >= 32)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b1f      	cmp	r3, #31
 800a758:	dd0f      	ble.n	800a77a <VS1063_PlayMp3Frame+0x96>
			{
				VS1063_PlayMP3(curFrame->data + pendingOffset, 32);
 800a75a:	4b1c      	ldr	r3, [pc, #112]	; (800a7cc <VS1063_PlayMp3Frame+0xe8>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	4a1b      	ldr	r2, [pc, #108]	; (800a7d0 <VS1063_PlayMp3Frame+0xec>)
 800a762:	6812      	ldr	r2, [r2, #0]
 800a764:	4413      	add	r3, r2
 800a766:	2120      	movs	r1, #32
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff ff9f 	bl	800a6ac <VS1063_PlayMP3>
				pendingOffset += 32;
 800a76e:	4b18      	ldr	r3, [pc, #96]	; (800a7d0 <VS1063_PlayMp3Frame+0xec>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3320      	adds	r3, #32
 800a774:	4a16      	ldr	r2, [pc, #88]	; (800a7d0 <VS1063_PlayMp3Frame+0xec>)
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	e7ba      	b.n	800a6f0 <VS1063_PlayMp3Frame+0xc>
			}
			else if(remainLen >= 0)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	db18      	blt.n	800a7b2 <VS1063_PlayMp3Frame+0xce>
			{
				if(remainLen > 0)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	dd09      	ble.n	800a79a <VS1063_PlayMp3Frame+0xb6>
					VS1063_PlayMP3(curFrame->data + pendingOffset, remainLen);
 800a786:	4b11      	ldr	r3, [pc, #68]	; (800a7cc <VS1063_PlayMp3Frame+0xe8>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	6a1b      	ldr	r3, [r3, #32]
 800a78c:	4a10      	ldr	r2, [pc, #64]	; (800a7d0 <VS1063_PlayMp3Frame+0xec>)
 800a78e:	6812      	ldr	r2, [r2, #0]
 800a790:	4413      	add	r3, r2
 800a792:	6879      	ldr	r1, [r7, #4]
 800a794:	4618      	mov	r0, r3
 800a796:	f7ff ff89 	bl	800a6ac <VS1063_PlayMP3>
				pendingOffset = 0;
 800a79a:	4b0d      	ldr	r3, [pc, #52]	; (800a7d0 <VS1063_PlayMp3Frame+0xec>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	601a      	str	r2, [r3, #0]
				mp3RemoveFrame(curFrame);
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <VS1063_PlayMp3Frame+0xe8>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fc fd1f 	bl	80071e8 <mp3RemoveFrame>
				curFrame = NULL;
 800a7aa:	4b08      	ldr	r3, [pc, #32]	; (800a7cc <VS1063_PlayMp3Frame+0xe8>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	601a      	str	r2, [r3, #0]
 800a7b0:	e79e      	b.n	800a6f0 <VS1063_PlayMp3Frame+0xc>
			// 	mp3RemoveFrame(curFrame);
			// 	curFrame = NULL;
			// }
			else // <0 something wrong
			{
				errorVS1063A = true;
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <VS1063_PlayMp3Frame+0xf4>)
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	701a      	strb	r2, [r3, #0]
				VSLOG_WRITE("VS1063_PlayMp3Frame error\n");
 800a7b8:	4808      	ldr	r0, [pc, #32]	; (800a7dc <VS1063_PlayMp3Frame+0xf8>)
 800a7ba:	f016 fba3 	bl	8020f04 <puts>
				return;
 800a7be:	e002      	b.n	800a7c6 <VS1063_PlayMp3Frame+0xe2>
		if(curFrame == NULL) return; //have noting to play
 800a7c0:	bf00      	nop
 800a7c2:	e000      	b.n	800a7c6 <VS1063_PlayMp3Frame+0xe2>
			}
			continue;
		}
		else
		{
			return;
 800a7c4:	bf00      	nop
		}
	}
}
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20000810 	.word	0x20000810
 800a7d0:	20000814 	.word	0x20000814
 800a7d4:	40021000 	.word	0x40021000
 800a7d8:	20000335 	.word	0x20000335
 800a7dc:	0802284c 	.word	0x0802284c

0800a7e0 <VS1063_PlayMP3_Task>:

void VS1063_PlayMP3_Task()
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	af00      	add	r7, sp, #0
	for (;;)
	{
		//init , reset if has error
		VS1063_Init();
 800a7e4:	f7ff fec6 	bl	800a574 <VS1063_Init>

		//read pin MIC, FM signal, config input audio

		//config vol
		if (mp3GetVol() != mainVol)
 800a7e8:	f7fc fce2 	bl	80071b0 <mp3GetVol>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	4b0a      	ldr	r3, [pc, #40]	; (800a818 <VS1063_PlayMP3_Task+0x38>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d009      	beq.n	800a80a <VS1063_PlayMP3_Task+0x2a>
		{
			mainVol = mp3GetVol();
 800a7f6:	f7fc fcdb 	bl	80071b0 <mp3GetVol>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	4a06      	ldr	r2, [pc, #24]	; (800a818 <VS1063_PlayMP3_Task+0x38>)
 800a7fe:	6013      	str	r3, [r2, #0]
			VS1063_SetVol(mainVol);
 800a800:	4b05      	ldr	r3, [pc, #20]	; (800a818 <VS1063_PlayMP3_Task+0x38>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff fe71 	bl	800a4ec <VS1063_SetVol>
		}

		//play mp3
		 VS1063_PlayMp3Frame();
 800a80a:	f7ff ff6b 	bl	800a6e4 <VS1063_PlayMp3Frame>

//		VS1063_PlayBeep();

		 osDelay(VS1063_TASK_INTERVAL);
 800a80e:	200a      	movs	r0, #10
 800a810:	f000 fde3 	bl	800b3da <osDelay>
		VS1063_Init();
 800a814:	e7e6      	b.n	800a7e4 <VS1063_PlayMP3_Task+0x4>
 800a816:	bf00      	nop
 800a818:	2000033c 	.word	0x2000033c

0800a81c <MX_LWIP_checkIsystem_ip_addr>:
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
int MX_LWIP_checkIsystem_ip_addr()
{
 800a81c:	b480      	push	{r7}
 800a81e:	af00      	add	r7, sp, #0
	if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 800a820:	4b09      	ldr	r3, [pc, #36]	; (800a848 <MX_LWIP_checkIsystem_ip_addr+0x2c>)
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d007      	beq.n	800a838 <MX_LWIP_checkIsystem_ip_addr+0x1c>
 800a828:	4b07      	ldr	r3, [pc, #28]	; (800a848 <MX_LWIP_checkIsystem_ip_addr+0x2c>)
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <MX_LWIP_checkIsystem_ip_addr+0x1c>
 800a830:	4b05      	ldr	r3, [pc, #20]	; (800a848 <MX_LWIP_checkIsystem_ip_addr+0x2c>)
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <MX_LWIP_checkIsystem_ip_addr+0x20>
	{
	   return 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	e000      	b.n	800a83e <MX_LWIP_checkIsystem_ip_addr+0x22>
	}
	return 1;
 800a83c:	2301      	movs	r3, #1
}
 800a83e:	4618      	mov	r0, r3
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	20010460 	.word	0x20010460

0800a84c <MX_LWIP_getIP>:
// uint8_t ipDHCP[4];
uint8_t *MX_LWIP_getIP()
{
 800a84c:	b480      	push	{r7}
 800a84e:	af00      	add	r7, sp, #0
  if (gnetif.ip_addr.addr != 0)
 800a850:	4b05      	ldr	r3, [pc, #20]	; (800a868 <MX_LWIP_getIP+0x1c>)
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <MX_LWIP_getIP+0x10>
  {
    return (uint8_t*)(&gnetif.ip_addr.addr);
 800a858:	4b04      	ldr	r3, [pc, #16]	; (800a86c <MX_LWIP_getIP+0x20>)
 800a85a:	e000      	b.n	800a85e <MX_LWIP_getIP+0x12>
  }
  else
  {
    return NULL;
 800a85c:	2300      	movs	r3, #0
  }
}
 800a85e:	4618      	mov	r0, r3
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	20010460 	.word	0x20010460
 800a86c:	20010464 	.word	0x20010464

0800a870 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a876:	2100      	movs	r1, #0
 800a878:	2000      	movs	r0, #0
 800a87a:	f007 fca5 	bl	80121c8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800a87e:	4b2a      	ldr	r3, [pc, #168]	; (800a928 <MX_LWIP_Init+0xb8>)
 800a880:	2200      	movs	r2, #0
 800a882:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800a884:	4b29      	ldr	r3, [pc, #164]	; (800a92c <MX_LWIP_Init+0xbc>)
 800a886:	2200      	movs	r2, #0
 800a888:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800a88a:	4b29      	ldr	r3, [pc, #164]	; (800a930 <MX_LWIP_Init+0xc0>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a890:	4b28      	ldr	r3, [pc, #160]	; (800a934 <MX_LWIP_Init+0xc4>)
 800a892:	9302      	str	r3, [sp, #8]
 800a894:	4b28      	ldr	r3, [pc, #160]	; (800a938 <MX_LWIP_Init+0xc8>)
 800a896:	9301      	str	r3, [sp, #4]
 800a898:	2300      	movs	r3, #0
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	4b24      	ldr	r3, [pc, #144]	; (800a930 <MX_LWIP_Init+0xc0>)
 800a89e:	4a23      	ldr	r2, [pc, #140]	; (800a92c <MX_LWIP_Init+0xbc>)
 800a8a0:	4921      	ldr	r1, [pc, #132]	; (800a928 <MX_LWIP_Init+0xb8>)
 800a8a2:	4826      	ldr	r0, [pc, #152]	; (800a93c <MX_LWIP_Init+0xcc>)
 800a8a4:	f009 f9ea 	bl	8013c7c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a8a8:	4824      	ldr	r0, [pc, #144]	; (800a93c <MX_LWIP_Init+0xcc>)
 800a8aa:	f009 fba1 	bl	8013ff0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a8ae:	4b23      	ldr	r3, [pc, #140]	; (800a93c <MX_LWIP_Init+0xcc>)
 800a8b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a8b4:	089b      	lsrs	r3, r3, #2
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d003      	beq.n	800a8c8 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a8c0:	481e      	ldr	r0, [pc, #120]	; (800a93c <MX_LWIP_Init+0xcc>)
 800a8c2:	f009 fba5 	bl	8014010 <netif_set_up>
 800a8c6:	e002      	b.n	800a8ce <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a8c8:	481c      	ldr	r0, [pc, #112]	; (800a93c <MX_LWIP_Init+0xcc>)
 800a8ca:	f009 fc0d 	bl	80140e8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800a8ce:	491c      	ldr	r1, [pc, #112]	; (800a940 <MX_LWIP_Init+0xd0>)
 800a8d0:	481a      	ldr	r0, [pc, #104]	; (800a93c <MX_LWIP_Init+0xcc>)
 800a8d2:	f009 fca3 	bl	801421c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2101      	movs	r1, #1
 800a8da:	2001      	movs	r0, #1
 800a8dc:	f001 f8d9 	bl	800ba92 <osSemaphoreNew>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	4a18      	ldr	r2, [pc, #96]	; (800a944 <MX_LWIP_Init+0xd4>)
 800a8e4:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800a8e6:	4b18      	ldr	r3, [pc, #96]	; (800a948 <MX_LWIP_Init+0xd8>)
 800a8e8:	4a14      	ldr	r2, [pc, #80]	; (800a93c <MX_LWIP_Init+0xcc>)
 800a8ea:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800a8ec:	4b15      	ldr	r3, [pc, #84]	; (800a944 <MX_LWIP_Init+0xd4>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a15      	ldr	r2, [pc, #84]	; (800a948 <MX_LWIP_Init+0xd8>)
 800a8f2:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800a8f4:	2224      	movs	r2, #36	; 0x24
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	4814      	ldr	r0, [pc, #80]	; (800a94c <MX_LWIP_Init+0xdc>)
 800a8fa:	f016 f9a5 	bl	8020c48 <memset>
  attributes.name = "LinkThr";
 800a8fe:	4b13      	ldr	r3, [pc, #76]	; (800a94c <MX_LWIP_Init+0xdc>)
 800a900:	4a13      	ldr	r2, [pc, #76]	; (800a950 <MX_LWIP_Init+0xe0>)
 800a902:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800a904:	4b11      	ldr	r3, [pc, #68]	; (800a94c <MX_LWIP_Init+0xdc>)
 800a906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a90a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800a90c:	4b0f      	ldr	r3, [pc, #60]	; (800a94c <MX_LWIP_Init+0xdc>)
 800a90e:	2210      	movs	r2, #16
 800a910:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800a912:	4a0e      	ldr	r2, [pc, #56]	; (800a94c <MX_LWIP_Init+0xdc>)
 800a914:	490c      	ldr	r1, [pc, #48]	; (800a948 <MX_LWIP_Init+0xd8>)
 800a916:	480f      	ldr	r0, [pc, #60]	; (800a954 <MX_LWIP_Init+0xe4>)
 800a918:	f000 fccd 	bl	800b2b6 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800a91c:	4807      	ldr	r0, [pc, #28]	; (800a93c <MX_LWIP_Init+0xcc>)
 800a91e:	f011 ff1f 	bl	801c760 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a922:	bf00      	nop
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	20010498 	.word	0x20010498
 800a92c:	2001049c 	.word	0x2001049c
 800a930:	200104a0 	.word	0x200104a0
 800a934:	080120d9 	.word	0x080120d9
 800a938:	0800af81 	.word	0x0800af81
 800a93c:	20010460 	.word	0x20010460
 800a940:	0800b065 	.word	0x0800b065
 800a944:	20000818 	.word	0x20000818
 800a948:	20010434 	.word	0x20010434
 800a94c:	2001043c 	.word	0x2001043c
 800a950:	08022868 	.word	0x08022868
 800a954:	0800afed 	.word	0x0800afed

0800a958 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b08e      	sub	sp, #56	; 0x38
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a964:	2200      	movs	r2, #0
 800a966:	601a      	str	r2, [r3, #0]
 800a968:	605a      	str	r2, [r3, #4]
 800a96a:	609a      	str	r2, [r3, #8]
 800a96c:	60da      	str	r2, [r3, #12]
 800a96e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a4a      	ldr	r2, [pc, #296]	; (800aaa0 <HAL_ETH_MspInit+0x148>)
 800a976:	4293      	cmp	r3, r2
 800a978:	f040 808d 	bne.w	800aa96 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a97c:	2300      	movs	r3, #0
 800a97e:	623b      	str	r3, [r7, #32]
 800a980:	4b48      	ldr	r3, [pc, #288]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a984:	4a47      	ldr	r2, [pc, #284]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a986:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a98a:	6313      	str	r3, [r2, #48]	; 0x30
 800a98c:	4b45      	ldr	r3, [pc, #276]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a98e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a994:	623b      	str	r3, [r7, #32]
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	2300      	movs	r3, #0
 800a99a:	61fb      	str	r3, [r7, #28]
 800a99c:	4b41      	ldr	r3, [pc, #260]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a0:	4a40      	ldr	r2, [pc, #256]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a9a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a9a6:	6313      	str	r3, [r2, #48]	; 0x30
 800a9a8:	4b3e      	ldr	r3, [pc, #248]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a9b0:	61fb      	str	r3, [r7, #28]
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	61bb      	str	r3, [r7, #24]
 800a9b8:	4b3a      	ldr	r3, [pc, #232]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9bc:	4a39      	ldr	r2, [pc, #228]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a9be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a9c2:	6313      	str	r3, [r2, #48]	; 0x30
 800a9c4:	4b37      	ldr	r3, [pc, #220]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9cc:	61bb      	str	r3, [r7, #24]
 800a9ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	617b      	str	r3, [r7, #20]
 800a9d4:	4b33      	ldr	r3, [pc, #204]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d8:	4a32      	ldr	r2, [pc, #200]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a9da:	f043 0304 	orr.w	r3, r3, #4
 800a9de:	6313      	str	r3, [r2, #48]	; 0x30
 800a9e0:	4b30      	ldr	r3, [pc, #192]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e4:	f003 0304 	and.w	r3, r3, #4
 800a9e8:	617b      	str	r3, [r7, #20]
 800a9ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	613b      	str	r3, [r7, #16]
 800a9f0:	4b2c      	ldr	r3, [pc, #176]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f4:	4a2b      	ldr	r2, [pc, #172]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a9f6:	f043 0301 	orr.w	r3, r3, #1
 800a9fa:	6313      	str	r3, [r2, #48]	; 0x30
 800a9fc:	4b29      	ldr	r3, [pc, #164]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800a9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa00:	f003 0301 	and.w	r3, r3, #1
 800aa04:	613b      	str	r3, [r7, #16]
 800aa06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	4b25      	ldr	r3, [pc, #148]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800aa0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa10:	4a24      	ldr	r2, [pc, #144]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800aa12:	f043 0302 	orr.w	r3, r3, #2
 800aa16:	6313      	str	r3, [r2, #48]	; 0x30
 800aa18:	4b22      	ldr	r3, [pc, #136]	; (800aaa4 <HAL_ETH_MspInit+0x14c>)
 800aa1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1c:	f003 0302 	and.w	r3, r3, #2
 800aa20:	60fb      	str	r3, [r7, #12]
 800aa22:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800aa24:	2332      	movs	r3, #50	; 0x32
 800aa26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa30:	2303      	movs	r3, #3
 800aa32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aa34:	230b      	movs	r3, #11
 800aa36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	481a      	ldr	r0, [pc, #104]	; (800aaa8 <HAL_ETH_MspInit+0x150>)
 800aa40:	f7f8 fade 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800aa44:	2386      	movs	r3, #134	; 0x86
 800aa46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa48:	2302      	movs	r3, #2
 800aa4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa50:	2303      	movs	r3, #3
 800aa52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aa54:	230b      	movs	r3, #11
 800aa56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4813      	ldr	r0, [pc, #76]	; (800aaac <HAL_ETH_MspInit+0x154>)
 800aa60:	f7f8 face 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800aa64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa72:	2303      	movs	r3, #3
 800aa74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aa76:	230b      	movs	r3, #11
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa7e:	4619      	mov	r1, r3
 800aa80:	480b      	ldr	r0, [pc, #44]	; (800aab0 <HAL_ETH_MspInit+0x158>)
 800aa82:	f7f8 fabd 	bl	8003000 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800aa86:	2200      	movs	r2, #0
 800aa88:	2105      	movs	r1, #5
 800aa8a:	203d      	movs	r0, #61	; 0x3d
 800aa8c:	f7f7 f8e8 	bl	8001c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800aa90:	203d      	movs	r0, #61	; 0x3d
 800aa92:	f7f7 f901 	bl	8001c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800aa96:	bf00      	nop
 800aa98:	3738      	adds	r7, #56	; 0x38
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	40028000 	.word	0x40028000
 800aaa4:	40023800 	.word	0x40023800
 800aaa8:	40020800 	.word	0x40020800
 800aaac:	40020000 	.word	0x40020000
 800aab0:	40020400 	.word	0x40020400

0800aab4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800aabc:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <HAL_ETH_RxCpltCallback+0x1c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f001 f8c1 	bl	800bc48 <osSemaphoreRelease>
}
 800aac6:	bf00      	nop
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	2000081c 	.word	0x2000081c

0800aad4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b090      	sub	sp, #64	; 0x40
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800aadc:	2300      	movs	r3, #0
 800aade:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800aae0:	4b5d      	ldr	r3, [pc, #372]	; (800ac58 <low_level_init+0x184>)
 800aae2:	4a5e      	ldr	r2, [pc, #376]	; (800ac5c <low_level_init+0x188>)
 800aae4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800aae6:	4b5c      	ldr	r3, [pc, #368]	; (800ac58 <low_level_init+0x184>)
 800aae8:	2201      	movs	r2, #1
 800aaea:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800aaec:	4b5a      	ldr	r3, [pc, #360]	; (800ac58 <low_level_init+0x184>)
 800aaee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aaf2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800aaf4:	4b58      	ldr	r3, [pc, #352]	; (800ac58 <low_level_init+0x184>)
 800aaf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aafa:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800aafc:	4b56      	ldr	r3, [pc, #344]	; (800ac58 <low_level_init+0x184>)
 800aafe:	2201      	movs	r2, #1
 800ab00:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800ab02:	2300      	movs	r3, #0
 800ab04:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800ab06:	2380      	movs	r3, #128	; 0x80
 800ab08:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800ab0a:	23e1      	movs	r3, #225	; 0xe1
 800ab0c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800ab12:	2300      	movs	r3, #0
 800ab14:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800ab16:	2300      	movs	r3, #0
 800ab18:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800ab1a:	4a4f      	ldr	r2, [pc, #316]	; (800ac58 <low_level_init+0x184>)
 800ab1c:	f107 030c 	add.w	r3, r7, #12
 800ab20:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800ab22:	4b4d      	ldr	r3, [pc, #308]	; (800ac58 <low_level_init+0x184>)
 800ab24:	2201      	movs	r2, #1
 800ab26:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ab28:	4b4b      	ldr	r3, [pc, #300]	; (800ac58 <low_level_init+0x184>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ab2e:	4b4a      	ldr	r3, [pc, #296]	; (800ac58 <low_level_init+0x184>)
 800ab30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ab34:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ab36:	4848      	ldr	r0, [pc, #288]	; (800ac58 <low_level_init+0x184>)
 800ab38:	f7f7 f8bc 	bl	8001cb4 <HAL_ETH_Init>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800ab42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d108      	bne.n	800ab5c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ab50:	f043 0304 	orr.w	r3, r3, #4
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ab5c:	2304      	movs	r3, #4
 800ab5e:	4a40      	ldr	r2, [pc, #256]	; (800ac60 <low_level_init+0x18c>)
 800ab60:	4940      	ldr	r1, [pc, #256]	; (800ac64 <low_level_init+0x190>)
 800ab62:	483d      	ldr	r0, [pc, #244]	; (800ac58 <low_level_init+0x184>)
 800ab64:	f7f7 fa42 	bl	8001fec <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ab68:	2304      	movs	r3, #4
 800ab6a:	4a3f      	ldr	r2, [pc, #252]	; (800ac68 <low_level_init+0x194>)
 800ab6c:	493f      	ldr	r1, [pc, #252]	; (800ac6c <low_level_init+0x198>)
 800ab6e:	483a      	ldr	r0, [pc, #232]	; (800ac58 <low_level_init+0x184>)
 800ab70:	f7f7 faa5 	bl	80020be <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2206      	movs	r2, #6
 800ab78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ab7c:	4b36      	ldr	r3, [pc, #216]	; (800ac58 <low_level_init+0x184>)
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	781a      	ldrb	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ab88:	4b33      	ldr	r3, [pc, #204]	; (800ac58 <low_level_init+0x184>)
 800ab8a:	695b      	ldr	r3, [r3, #20]
 800ab8c:	785a      	ldrb	r2, [r3, #1]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ab94:	4b30      	ldr	r3, [pc, #192]	; (800ac58 <low_level_init+0x184>)
 800ab96:	695b      	ldr	r3, [r3, #20]
 800ab98:	789a      	ldrb	r2, [r3, #2]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800aba0:	4b2d      	ldr	r3, [pc, #180]	; (800ac58 <low_level_init+0x184>)
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	78da      	ldrb	r2, [r3, #3]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800abac:	4b2a      	ldr	r3, [pc, #168]	; (800ac58 <low_level_init+0x184>)
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	791a      	ldrb	r2, [r3, #4]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800abb8:	4b27      	ldr	r3, [pc, #156]	; (800ac58 <low_level_init+0x184>)
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	795a      	ldrb	r2, [r3, #5]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800abca:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800abd2:	f043 030a 	orr.w	r3, r3, #10
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800abde:	2200      	movs	r2, #0
 800abe0:	2101      	movs	r1, #1
 800abe2:	2001      	movs	r0, #1
 800abe4:	f000 ff55 	bl	800ba92 <osSemaphoreNew>
 800abe8:	4603      	mov	r3, r0
 800abea:	4a21      	ldr	r2, [pc, #132]	; (800ac70 <low_level_init+0x19c>)
 800abec:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800abee:	f107 0314 	add.w	r3, r7, #20
 800abf2:	2224      	movs	r2, #36	; 0x24
 800abf4:	2100      	movs	r1, #0
 800abf6:	4618      	mov	r0, r3
 800abf8:	f016 f826 	bl	8020c48 <memset>
  attributes.name = "EthIf";
 800abfc:	4b1d      	ldr	r3, [pc, #116]	; (800ac74 <low_level_init+0x1a0>)
 800abfe:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800ac00:	f240 2326 	movw	r3, #550	; 0x226
 800ac04:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800ac06:	2330      	movs	r3, #48	; 0x30
 800ac08:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800ac0a:	f107 0314 	add.w	r3, r7, #20
 800ac0e:	461a      	mov	r2, r3
 800ac10:	6879      	ldr	r1, [r7, #4]
 800ac12:	4819      	ldr	r0, [pc, #100]	; (800ac78 <low_level_init+0x1a4>)
 800ac14:	f000 fb4f 	bl	800b2b6 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800ac18:	480f      	ldr	r0, [pc, #60]	; (800ac58 <low_level_init+0x184>)
 800ac1a:	f7f7 fd78 	bl	800270e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800ac1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ac22:	461a      	mov	r2, r3
 800ac24:	211d      	movs	r1, #29
 800ac26:	480c      	ldr	r0, [pc, #48]	; (800ac58 <low_level_init+0x184>)
 800ac28:	f7f7 fca3 	bl	8002572 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2e:	f043 030b 	orr.w	r3, r3, #11
 800ac32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ac34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac36:	461a      	mov	r2, r3
 800ac38:	211d      	movs	r1, #29
 800ac3a:	4807      	ldr	r0, [pc, #28]	; (800ac58 <low_level_init+0x184>)
 800ac3c:	f7f7 fd01 	bl	8002642 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800ac40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ac44:	461a      	mov	r2, r3
 800ac46:	211d      	movs	r1, #29
 800ac48:	4803      	ldr	r0, [pc, #12]	; (800ac58 <low_level_init+0x184>)
 800ac4a:	f7f7 fc92 	bl	8002572 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ac4e:	bf00      	nop
 800ac50:	3740      	adds	r7, #64	; 0x40
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	20011d74 	.word	0x20011d74
 800ac5c:	40028000 	.word	0x40028000
 800ac60:	20011dbc 	.word	0x20011dbc
 800ac64:	200104a4 	.word	0x200104a4
 800ac68:	20010524 	.word	0x20010524
 800ac6c:	20011cf4 	.word	0x20011cf4
 800ac70:	2000081c 	.word	0x2000081c
 800ac74:	08022870 	.word	0x08022870
 800ac78:	0800af21 	.word	0x0800af21

0800ac7c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08a      	sub	sp, #40	; 0x28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800ac86:	4b4b      	ldr	r3, [pc, #300]	; (800adb4 <low_level_output+0x138>)
 800ac88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800ac9e:	4b45      	ldr	r3, [pc, #276]	; (800adb4 <low_level_output+0x138>)
 800aca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	623b      	str	r3, [r7, #32]
 800acac:	e05a      	b.n	800ad64 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	da03      	bge.n	800acbe <low_level_output+0x42>
      {
        errval = ERR_USE;
 800acb6:	23f8      	movs	r3, #248	; 0xf8
 800acb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800acbc:	e05c      	b.n	800ad78 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	895b      	ldrh	r3, [r3, #10]
 800acc2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800acc8:	e02f      	b.n	800ad2a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	18d0      	adds	r0, r2, r3
 800acd0:	6a3b      	ldr	r3, [r7, #32]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	18d1      	adds	r1, r2, r3
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800acde:	3304      	adds	r3, #4
 800ace0:	461a      	mov	r2, r3
 800ace2:	f015 ff89 	bl	8020bf8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	da03      	bge.n	800acfc <low_level_output+0x80>
        {
          errval = ERR_USE;
 800acf4:	23f8      	movs	r3, #248	; 0xf8
 800acf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800acfa:	e03d      	b.n	800ad78 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	4413      	add	r3, r2
 800ad08:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800ad0c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800ad18:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800ad24:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d8c8      	bhi.n	800acca <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800ad38:	69fa      	ldr	r2, [r7, #28]
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	18d0      	adds	r0, r2, r3
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	685a      	ldr	r2, [r3, #4]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	4413      	add	r3, r2
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	f015 ff55 	bl	8020bf8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4413      	add	r3, r2
 800ad54:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800ad5e:	6a3b      	ldr	r3, [r7, #32]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	623b      	str	r3, [r7, #32]
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1a1      	bne.n	800acae <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800ad6a:	6979      	ldr	r1, [r7, #20]
 800ad6c:	4811      	ldr	r0, [pc, #68]	; (800adb4 <low_level_output+0x138>)
 800ad6e:	f7f7 fa13 	bl	8002198 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800ad78:	4b0e      	ldr	r3, [pc, #56]	; (800adb4 <low_level_output+0x138>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad80:	3314      	adds	r3, #20
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 0320 	and.w	r3, r3, #32
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00d      	beq.n	800ada8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800ad8c:	4b09      	ldr	r3, [pc, #36]	; (800adb4 <low_level_output+0x138>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad94:	3314      	adds	r3, #20
 800ad96:	2220      	movs	r2, #32
 800ad98:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800ad9a:	4b06      	ldr	r3, [pc, #24]	; (800adb4 <low_level_output+0x138>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada2:	3304      	adds	r3, #4
 800ada4:	2200      	movs	r2, #0
 800ada6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800ada8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800adac:	4618      	mov	r0, r3
 800adae:	3728      	adds	r7, #40	; 0x28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	20011d74 	.word	0x20011d74

0800adb8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08c      	sub	sp, #48	; 0x30
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800adc0:	2300      	movs	r3, #0
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800adc4:	2300      	movs	r3, #0
 800adc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800add8:	2300      	movs	r3, #0
 800adda:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800addc:	484f      	ldr	r0, [pc, #316]	; (800af1c <low_level_input+0x164>)
 800adde:	f7f7 fac5 	bl	800236c <HAL_ETH_GetReceivedFrame_IT>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <low_level_input+0x34>

    return NULL;
 800ade8:	2300      	movs	r3, #0
 800adea:	e092      	b.n	800af12 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800adec:	4b4b      	ldr	r3, [pc, #300]	; (800af1c <low_level_input+0x164>)
 800adee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800adf2:	4b4a      	ldr	r3, [pc, #296]	; (800af1c <low_level_input+0x164>)
 800adf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800adf8:	89fb      	ldrh	r3, [r7, #14]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d007      	beq.n	800ae0e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800adfe:	89fb      	ldrh	r3, [r7, #14]
 800ae00:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800ae04:	4619      	mov	r1, r3
 800ae06:	2000      	movs	r0, #0
 800ae08:	f009 fad2 	bl	80143b0 <pbuf_alloc>
 800ae0c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800ae0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d04b      	beq.n	800aeac <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ae14:	4b41      	ldr	r3, [pc, #260]	; (800af1c <low_level_input+0x164>)
 800ae16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae18:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800ae1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae20:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae22:	e040      	b.n	800aea6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800ae24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae26:	895b      	ldrh	r3, [r3, #10]
 800ae28:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800ae2e:	e021      	b.n	800ae74 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	18d0      	adds	r0, r2, r3
 800ae38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	18d1      	adds	r1, r2, r3
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800ae44:	3304      	adds	r3, #4
 800ae46:	461a      	mov	r2, r3
 800ae48:	f015 fed6 	bl	8020bf8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800ae52:	6a3b      	ldr	r3, [r7, #32]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800ae58:	69fa      	ldr	r2, [r7, #28]
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800ae62:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800ae64:	69ba      	ldr	r2, [r7, #24]
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800ae6e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800ae70:	2300      	movs	r3, #0
 800ae72:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	4413      	add	r3, r2
 800ae7a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d8d6      	bhi.n	800ae30 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	18d0      	adds	r0, r2, r3
 800ae8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	4413      	add	r3, r2
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	4619      	mov	r1, r3
 800ae94:	f015 feb0 	bl	8020bf8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800ae98:	69fa      	ldr	r2, [r7, #28]
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	62bb      	str	r3, [r7, #40]	; 0x28
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1bb      	bne.n	800ae24 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800aeac:	4b1b      	ldr	r3, [pc, #108]	; (800af1c <low_level_input+0x164>)
 800aeae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	613b      	str	r3, [r7, #16]
 800aeb6:	e00b      	b.n	800aed0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800aec0:	6a3b      	ldr	r3, [r7, #32]
 800aec2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	3301      	adds	r3, #1
 800aece:	613b      	str	r3, [r7, #16]
 800aed0:	4b12      	ldr	r3, [pc, #72]	; (800af1c <low_level_input+0x164>)
 800aed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d3ee      	bcc.n	800aeb8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800aeda:	4b10      	ldr	r3, [pc, #64]	; (800af1c <low_level_input+0x164>)
 800aedc:	2200      	movs	r2, #0
 800aede:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800aee0:	4b0e      	ldr	r3, [pc, #56]	; (800af1c <low_level_input+0x164>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee8:	3314      	adds	r3, #20
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00d      	beq.n	800af10 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800aef4:	4b09      	ldr	r3, [pc, #36]	; (800af1c <low_level_input+0x164>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aefc:	3314      	adds	r3, #20
 800aefe:	2280      	movs	r2, #128	; 0x80
 800af00:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800af02:	4b06      	ldr	r3, [pc, #24]	; (800af1c <low_level_input+0x164>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af0a:	3308      	adds	r3, #8
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
  }
  return p;
 800af10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800af12:	4618      	mov	r0, r3
 800af14:	3730      	adds	r7, #48	; 0x30
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20011d74 	.word	0x20011d74

0800af20 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800af2c:	4b12      	ldr	r3, [pc, #72]	; (800af78 <ethernetif_input+0x58>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f04f 31ff 	mov.w	r1, #4294967295
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fe35 	bl	800bba4 <osSemaphoreAcquire>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1f5      	bne.n	800af2c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800af40:	480e      	ldr	r0, [pc, #56]	; (800af7c <ethernetif_input+0x5c>)
 800af42:	f015 fcbb 	bl	80208bc <sys_mutex_lock>
        p = low_level_input( netif );
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f7ff ff36 	bl	800adb8 <low_level_input>
 800af4c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00a      	beq.n	800af6a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	68f9      	ldr	r1, [r7, #12]
 800af5a:	68b8      	ldr	r0, [r7, #8]
 800af5c:	4798      	blx	r3
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d002      	beq.n	800af6a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800af64:	68b8      	ldr	r0, [r7, #8]
 800af66:	f009 fd07 	bl	8014978 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800af6a:	4804      	ldr	r0, [pc, #16]	; (800af7c <ethernetif_input+0x5c>)
 800af6c:	f015 fcb5 	bl	80208da <sys_mutex_unlock>
      } while(p!=NULL);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1e4      	bne.n	800af40 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800af76:	e7d9      	b.n	800af2c <ethernetif_input+0xc>
 800af78:	2000081c 	.word	0x2000081c
 800af7c:	200135cc 	.word	0x200135cc

0800af80 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d106      	bne.n	800af9c <ethernetif_init+0x1c>
 800af8e:	4b0e      	ldr	r3, [pc, #56]	; (800afc8 <ethernetif_init+0x48>)
 800af90:	f44f 720c 	mov.w	r2, #560	; 0x230
 800af94:	490d      	ldr	r1, [pc, #52]	; (800afcc <ethernetif_init+0x4c>)
 800af96:	480e      	ldr	r0, [pc, #56]	; (800afd0 <ethernetif_init+0x50>)
 800af98:	f015 ff18 	bl	8020dcc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2273      	movs	r2, #115	; 0x73
 800afa0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2274      	movs	r2, #116	; 0x74
 800afa8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a09      	ldr	r2, [pc, #36]	; (800afd4 <ethernetif_init+0x54>)
 800afb0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a08      	ldr	r2, [pc, #32]	; (800afd8 <ethernetif_init+0x58>)
 800afb6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff fd8b 	bl	800aad4 <low_level_init>

  return ERR_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	08022878 	.word	0x08022878
 800afcc:	08022894 	.word	0x08022894
 800afd0:	080228a4 	.word	0x080228a4
 800afd4:	0801e68d 	.word	0x0801e68d
 800afd8:	0800ac7d 	.word	0x0800ac7d

0800afdc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800afe0:	f7f6 fd56 	bl	8001a90 <HAL_GetTick>
 800afe4:	4603      	mov	r3, r0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	bd80      	pop	{r7, pc}
	...

0800afec <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800affc:	f107 0308 	add.w	r3, r7, #8
 800b000:	461a      	mov	r2, r3
 800b002:	2101      	movs	r1, #1
 800b004:	4816      	ldr	r0, [pc, #88]	; (800b060 <ethernetif_set_link+0x74>)
 800b006:	f7f7 fab4 	bl	8002572 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f003 0304 	and.w	r3, r3, #4
 800b010:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b01a:	f003 0304 	and.w	r3, r3, #4
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d108      	bne.n	800b034 <ethernetif_set_link+0x48>
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d005      	beq.n	800b034 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f009 f88d 	bl	801414c <netif_set_link_up>
 800b032:	e011      	b.n	800b058 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b03c:	089b      	lsrs	r3, r3, #2
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b00      	cmp	r3, #0
 800b046:	d007      	beq.n	800b058 <ethernetif_set_link+0x6c>
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d104      	bne.n	800b058 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4618      	mov	r0, r3
 800b054:	f009 f8b2 	bl	80141bc <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800b058:	20c8      	movs	r0, #200	; 0xc8
 800b05a:	f000 f9be 	bl	800b3da <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b05e:	e7cd      	b.n	800affc <ethernetif_set_link+0x10>
 800b060:	20011d74 	.word	0x20011d74

0800b064 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800b070:	2300      	movs	r3, #0
 800b072:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b07a:	089b      	lsrs	r3, r3, #2
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d05d      	beq.n	800b142 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b086:	4b34      	ldr	r3, [pc, #208]	; (800b158 <ethernetif_update_config+0xf4>)
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d03f      	beq.n	800b10e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b08e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b092:	2100      	movs	r1, #0
 800b094:	4830      	ldr	r0, [pc, #192]	; (800b158 <ethernetif_update_config+0xf4>)
 800b096:	f7f7 fad4 	bl	8002642 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b09a:	f7f6 fcf9 	bl	8001a90 <HAL_GetTick>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b0a2:	f107 0308 	add.w	r3, r7, #8
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	482b      	ldr	r0, [pc, #172]	; (800b158 <ethernetif_update_config+0xf4>)
 800b0ac:	f7f7 fa61 	bl	8002572 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b0b0:	f7f6 fcee 	bl	8001a90 <HAL_GetTick>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b0be:	d828      	bhi.n	800b112 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f003 0320 	and.w	r3, r3, #32
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d0eb      	beq.n	800b0a2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b0ca:	f107 0308 	add.w	r3, r7, #8
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	2110      	movs	r1, #16
 800b0d2:	4821      	ldr	r0, [pc, #132]	; (800b158 <ethernetif_update_config+0xf4>)
 800b0d4:	f7f7 fa4d 	bl	8002572 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	f003 0304 	and.w	r3, r3, #4
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d004      	beq.n	800b0ec <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b0e2:	4b1d      	ldr	r3, [pc, #116]	; (800b158 <ethernetif_update_config+0xf4>)
 800b0e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0e8:	60da      	str	r2, [r3, #12]
 800b0ea:	e002      	b.n	800b0f2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b0ec:	4b1a      	ldr	r3, [pc, #104]	; (800b158 <ethernetif_update_config+0xf4>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	f003 0302 	and.w	r3, r3, #2
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800b0fc:	4b16      	ldr	r3, [pc, #88]	; (800b158 <ethernetif_update_config+0xf4>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	609a      	str	r2, [r3, #8]
 800b102:	e016      	b.n	800b132 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800b104:	4b14      	ldr	r3, [pc, #80]	; (800b158 <ethernetif_update_config+0xf4>)
 800b106:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b10a:	609a      	str	r2, [r3, #8]
 800b10c:	e011      	b.n	800b132 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800b10e:	bf00      	nop
 800b110:	e000      	b.n	800b114 <ethernetif_update_config+0xb0>
          goto error;
 800b112:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b114:	4b10      	ldr	r3, [pc, #64]	; (800b158 <ethernetif_update_config+0xf4>)
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	08db      	lsrs	r3, r3, #3
 800b11a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800b11c:	4b0e      	ldr	r3, [pc, #56]	; (800b158 <ethernetif_update_config+0xf4>)
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	085b      	lsrs	r3, r3, #1
 800b122:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b124:	4313      	orrs	r3, r2
 800b126:	b29b      	uxth	r3, r3
 800b128:	461a      	mov	r2, r3
 800b12a:	2100      	movs	r1, #0
 800b12c:	480a      	ldr	r0, [pc, #40]	; (800b158 <ethernetif_update_config+0xf4>)
 800b12e:	f7f7 fa88 	bl	8002642 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b132:	2100      	movs	r1, #0
 800b134:	4808      	ldr	r0, [pc, #32]	; (800b158 <ethernetif_update_config+0xf4>)
 800b136:	f7f7 fb49 	bl	80027cc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800b13a:	4807      	ldr	r0, [pc, #28]	; (800b158 <ethernetif_update_config+0xf4>)
 800b13c:	f7f7 fae7 	bl	800270e <HAL_ETH_Start>
 800b140:	e002      	b.n	800b148 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800b142:	4805      	ldr	r0, [pc, #20]	; (800b158 <ethernetif_update_config+0xf4>)
 800b144:	f7f7 fb12 	bl	800276c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f807 	bl	800b15c <ethernetif_notify_conn_changed>
}
 800b14e:	bf00      	nop
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20011d74 	.word	0x20011d74

0800b15c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <__NVIC_SetPriority>:
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	6039      	str	r1, [r7, #0]
 800b17a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b17c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b180:	2b00      	cmp	r3, #0
 800b182:	db0a      	blt.n	800b19a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	b2da      	uxtb	r2, r3
 800b188:	490c      	ldr	r1, [pc, #48]	; (800b1bc <__NVIC_SetPriority+0x4c>)
 800b18a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b18e:	0112      	lsls	r2, r2, #4
 800b190:	b2d2      	uxtb	r2, r2
 800b192:	440b      	add	r3, r1
 800b194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b198:	e00a      	b.n	800b1b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	4908      	ldr	r1, [pc, #32]	; (800b1c0 <__NVIC_SetPriority+0x50>)
 800b1a0:	79fb      	ldrb	r3, [r7, #7]
 800b1a2:	f003 030f 	and.w	r3, r3, #15
 800b1a6:	3b04      	subs	r3, #4
 800b1a8:	0112      	lsls	r2, r2, #4
 800b1aa:	b2d2      	uxtb	r2, r2
 800b1ac:	440b      	add	r3, r1
 800b1ae:	761a      	strb	r2, [r3, #24]
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	e000e100 	.word	0xe000e100
 800b1c0:	e000ed00 	.word	0xe000ed00

0800b1c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b1c8:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <SysTick_Handler+0x1c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b1cc:	f003 faf0 	bl	800e7b0 <xTaskGetSchedulerState>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d001      	beq.n	800b1da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b1d6:	f004 faef 	bl	800f7b8 <xPortSysTickHandler>
  }
}
 800b1da:	bf00      	nop
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	e000e010 	.word	0xe000e010

0800b1e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	f06f 0004 	mvn.w	r0, #4
 800b1ee:	f7ff ffbf 	bl	800b170 <__NVIC_SetPriority>
#endif
}
 800b1f2:	bf00      	nop
 800b1f4:	bd80      	pop	{r7, pc}
	...

0800b1f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1fe:	f3ef 8305 	mrs	r3, IPSR
 800b202:	603b      	str	r3, [r7, #0]
  return(result);
 800b204:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b20a:	f06f 0305 	mvn.w	r3, #5
 800b20e:	607b      	str	r3, [r7, #4]
 800b210:	e00c      	b.n	800b22c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b212:	4b0a      	ldr	r3, [pc, #40]	; (800b23c <osKernelInitialize+0x44>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d105      	bne.n	800b226 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b21a:	4b08      	ldr	r3, [pc, #32]	; (800b23c <osKernelInitialize+0x44>)
 800b21c:	2201      	movs	r2, #1
 800b21e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b220:	2300      	movs	r3, #0
 800b222:	607b      	str	r3, [r7, #4]
 800b224:	e002      	b.n	800b22c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b226:	f04f 33ff 	mov.w	r3, #4294967295
 800b22a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b22c:	687b      	ldr	r3, [r7, #4]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	20000820 	.word	0x20000820

0800b240 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b246:	f3ef 8305 	mrs	r3, IPSR
 800b24a:	603b      	str	r3, [r7, #0]
  return(result);
 800b24c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b252:	f06f 0305 	mvn.w	r3, #5
 800b256:	607b      	str	r3, [r7, #4]
 800b258:	e010      	b.n	800b27c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b25a:	4b0b      	ldr	r3, [pc, #44]	; (800b288 <osKernelStart+0x48>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d109      	bne.n	800b276 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b262:	f7ff ffbf 	bl	800b1e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b266:	4b08      	ldr	r3, [pc, #32]	; (800b288 <osKernelStart+0x48>)
 800b268:	2202      	movs	r2, #2
 800b26a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b26c:	f002 fd66 	bl	800dd3c <vTaskStartScheduler>
      stat = osOK;
 800b270:	2300      	movs	r3, #0
 800b272:	607b      	str	r3, [r7, #4]
 800b274:	e002      	b.n	800b27c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b276:	f04f 33ff 	mov.w	r3, #4294967295
 800b27a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b27c:	687b      	ldr	r3, [r7, #4]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20000820 	.word	0x20000820

0800b28c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b292:	f3ef 8305 	mrs	r3, IPSR
 800b296:	603b      	str	r3, [r7, #0]
  return(result);
 800b298:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b29e:	f002 fe7b 	bl	800df98 <xTaskGetTickCountFromISR>
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	e002      	b.n	800b2ac <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b2a6:	f002 fe67 	bl	800df78 <xTaskGetTickCount>
 800b2aa:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b2ac:	687b      	ldr	r3, [r7, #4]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b08e      	sub	sp, #56	; 0x38
 800b2ba:	af04      	add	r7, sp, #16
 800b2bc:	60f8      	str	r0, [r7, #12]
 800b2be:	60b9      	str	r1, [r7, #8]
 800b2c0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2c6:	f3ef 8305 	mrs	r3, IPSR
 800b2ca:	617b      	str	r3, [r7, #20]
  return(result);
 800b2cc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d17e      	bne.n	800b3d0 <osThreadNew+0x11a>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d07b      	beq.n	800b3d0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b2d8:	2380      	movs	r3, #128	; 0x80
 800b2da:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b2dc:	2318      	movs	r3, #24
 800b2de:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d045      	beq.n	800b37c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <osThreadNew+0x48>
        name = attr->name;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d002      	beq.n	800b30c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d008      	beq.n	800b324 <osThreadNew+0x6e>
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	2b38      	cmp	r3, #56	; 0x38
 800b316:	d805      	bhi.n	800b324 <osThreadNew+0x6e>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	f003 0301 	and.w	r3, r3, #1
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <osThreadNew+0x72>
        return (NULL);
 800b324:	2300      	movs	r3, #0
 800b326:	e054      	b.n	800b3d2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d003      	beq.n	800b338 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	089b      	lsrs	r3, r3, #2
 800b336:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00e      	beq.n	800b35e <osThreadNew+0xa8>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	2bc3      	cmp	r3, #195	; 0xc3
 800b346:	d90a      	bls.n	800b35e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d006      	beq.n	800b35e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <osThreadNew+0xa8>
        mem = 1;
 800b358:	2301      	movs	r3, #1
 800b35a:	61bb      	str	r3, [r7, #24]
 800b35c:	e010      	b.n	800b380 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10c      	bne.n	800b380 <osThreadNew+0xca>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d108      	bne.n	800b380 <osThreadNew+0xca>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d104      	bne.n	800b380 <osThreadNew+0xca>
          mem = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	61bb      	str	r3, [r7, #24]
 800b37a:	e001      	b.n	800b380 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d110      	bne.n	800b3a8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b38e:	9202      	str	r2, [sp, #8]
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	6a3a      	ldr	r2, [r7, #32]
 800b39a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f002 fadb 	bl	800d958 <xTaskCreateStatic>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	613b      	str	r3, [r7, #16]
 800b3a6:	e013      	b.n	800b3d0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d110      	bne.n	800b3d0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	f107 0310 	add.w	r3, r7, #16
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f002 fb26 	bl	800da12 <xTaskCreate>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d001      	beq.n	800b3d0 <osThreadNew+0x11a>
            hTask = NULL;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b3d0:	693b      	ldr	r3, [r7, #16]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3728      	adds	r7, #40	; 0x28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e2:	f3ef 8305 	mrs	r3, IPSR
 800b3e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d003      	beq.n	800b3f6 <osDelay+0x1c>
    stat = osErrorISR;
 800b3ee:	f06f 0305 	mvn.w	r3, #5
 800b3f2:	60fb      	str	r3, [r7, #12]
 800b3f4:	e007      	b.n	800b406 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d002      	beq.n	800b406 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f002 fc67 	bl	800dcd4 <vTaskDelay>
    }
  }

  return (stat);
 800b406:	68fb      	ldr	r3, [r7, #12]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f003 ffd0 	bl	800f3be <pvTimerGetTimerID>
 800b41e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d005      	beq.n	800b432 <TimerCallback+0x22>
    callb->func (callb->arg);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	6852      	ldr	r2, [r2, #4]
 800b42e:	4610      	mov	r0, r2
 800b430:	4798      	blx	r3
  }
}
 800b432:	bf00      	nop
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
	...

0800b43c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b08c      	sub	sp, #48	; 0x30
 800b440:	af02      	add	r7, sp, #8
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	607a      	str	r2, [r7, #4]
 800b446:	603b      	str	r3, [r7, #0]
 800b448:	460b      	mov	r3, r1
 800b44a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b44c:	2300      	movs	r3, #0
 800b44e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b450:	f3ef 8305 	mrs	r3, IPSR
 800b454:	613b      	str	r3, [r7, #16]
  return(result);
 800b456:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d163      	bne.n	800b524 <osTimerNew+0xe8>
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d060      	beq.n	800b524 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b462:	2008      	movs	r0, #8
 800b464:	f004 fa38 	bl	800f8d8 <pvPortMalloc>
 800b468:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d059      	beq.n	800b524 <osTimerNew+0xe8>
      callb->func = func;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b47c:	7afb      	ldrb	r3, [r7, #11]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d102      	bne.n	800b488 <osTimerNew+0x4c>
        reload = pdFALSE;
 800b482:	2300      	movs	r3, #0
 800b484:	61fb      	str	r3, [r7, #28]
 800b486:	e001      	b.n	800b48c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b488:	2301      	movs	r3, #1
 800b48a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b48c:	f04f 33ff 	mov.w	r3, #4294967295
 800b490:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b492:	2300      	movs	r3, #0
 800b494:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d01c      	beq.n	800b4d6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d002      	beq.n	800b4aa <osTimerNew+0x6e>
          name = attr->name;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d006      	beq.n	800b4c0 <osTimerNew+0x84>
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	2b2b      	cmp	r3, #43	; 0x2b
 800b4b8:	d902      	bls.n	800b4c0 <osTimerNew+0x84>
          mem = 1;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	61bb      	str	r3, [r7, #24]
 800b4be:	e00c      	b.n	800b4da <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d108      	bne.n	800b4da <osTimerNew+0x9e>
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d104      	bne.n	800b4da <osTimerNew+0x9e>
            mem = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	61bb      	str	r3, [r7, #24]
 800b4d4:	e001      	b.n	800b4da <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d10c      	bne.n	800b4fa <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	4b12      	ldr	r3, [pc, #72]	; (800b530 <osTimerNew+0xf4>)
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	69fa      	ldr	r2, [r7, #28]
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4f2:	f003 fbbc 	bl	800ec6e <xTimerCreateStatic>
 800b4f6:	6238      	str	r0, [r7, #32]
 800b4f8:	e00b      	b.n	800b512 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d108      	bne.n	800b512 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b500:	4b0b      	ldr	r3, [pc, #44]	; (800b530 <osTimerNew+0xf4>)
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	69fa      	ldr	r2, [r7, #28]
 800b508:	2101      	movs	r1, #1
 800b50a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b50c:	f003 fb8e 	bl	800ec2c <xTimerCreate>
 800b510:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800b512:	6a3b      	ldr	r3, [r7, #32]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d105      	bne.n	800b524 <osTimerNew+0xe8>
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <osTimerNew+0xe8>
        vPortFree (callb);
 800b51e:	6978      	ldr	r0, [r7, #20]
 800b520:	f004 faa6 	bl	800fa70 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b524:	6a3b      	ldr	r3, [r7, #32]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3728      	adds	r7, #40	; 0x28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	0800b411 	.word	0x0800b411

0800b534 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af02      	add	r7, sp, #8
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b542:	f3ef 8305 	mrs	r3, IPSR
 800b546:	60fb      	str	r3, [r7, #12]
  return(result);
 800b548:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d003      	beq.n	800b556 <osTimerStart+0x22>
    stat = osErrorISR;
 800b54e:	f06f 0305 	mvn.w	r3, #5
 800b552:	617b      	str	r3, [r7, #20]
 800b554:	e017      	b.n	800b586 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d103      	bne.n	800b564 <osTimerStart+0x30>
    stat = osErrorParameter;
 800b55c:	f06f 0303 	mvn.w	r3, #3
 800b560:	617b      	str	r3, [r7, #20]
 800b562:	e010      	b.n	800b586 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800b564:	2300      	movs	r3, #0
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	2300      	movs	r3, #0
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	2104      	movs	r1, #4
 800b56e:	6938      	ldr	r0, [r7, #16]
 800b570:	f003 fbf6 	bl	800ed60 <xTimerGenericCommand>
 800b574:	4603      	mov	r3, r0
 800b576:	2b01      	cmp	r3, #1
 800b578:	d102      	bne.n	800b580 <osTimerStart+0x4c>
      stat = osOK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	e002      	b.n	800b586 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800b580:	f06f 0302 	mvn.w	r3, #2
 800b584:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b586:	697b      	ldr	r3, [r7, #20]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af02      	add	r7, sp, #8
 800b596:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b59c:	f3ef 8305 	mrs	r3, IPSR
 800b5a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d003      	beq.n	800b5b0 <osTimerStop+0x20>
    stat = osErrorISR;
 800b5a8:	f06f 0305 	mvn.w	r3, #5
 800b5ac:	617b      	str	r3, [r7, #20]
 800b5ae:	e021      	b.n	800b5f4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d103      	bne.n	800b5be <osTimerStop+0x2e>
    stat = osErrorParameter;
 800b5b6:	f06f 0303 	mvn.w	r3, #3
 800b5ba:	617b      	str	r3, [r7, #20]
 800b5bc:	e01a      	b.n	800b5f4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800b5be:	6938      	ldr	r0, [r7, #16]
 800b5c0:	f003 fed4 	bl	800f36c <xTimerIsTimerActive>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d103      	bne.n	800b5d2 <osTimerStop+0x42>
      stat = osErrorResource;
 800b5ca:	f06f 0302 	mvn.w	r3, #2
 800b5ce:	617b      	str	r3, [r7, #20]
 800b5d0:	e010      	b.n	800b5f4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	2200      	movs	r2, #0
 800b5da:	2103      	movs	r1, #3
 800b5dc:	6938      	ldr	r0, [r7, #16]
 800b5de:	f003 fbbf 	bl	800ed60 <xTimerGenericCommand>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d102      	bne.n	800b5ee <osTimerStop+0x5e>
        stat = osOK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	617b      	str	r3, [r7, #20]
 800b5ec:	e002      	b.n	800b5f4 <osTimerStop+0x64>
      } else {
        stat = osError;
 800b5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b5f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b5f4:	697b      	ldr	r3, [r7, #20]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b086      	sub	sp, #24
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800b606:	2300      	movs	r3, #0
 800b608:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b60a:	f3ef 8305 	mrs	r3, IPSR
 800b60e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b610:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800b612:	2b00      	cmp	r3, #0
 800b614:	d12d      	bne.n	800b672 <osEventFlagsNew+0x74>
    mem = -1;
 800b616:	f04f 33ff 	mov.w	r3, #4294967295
 800b61a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d015      	beq.n	800b64e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d006      	beq.n	800b638 <osEventFlagsNew+0x3a>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	2b1f      	cmp	r3, #31
 800b630:	d902      	bls.n	800b638 <osEventFlagsNew+0x3a>
        mem = 1;
 800b632:	2301      	movs	r3, #1
 800b634:	613b      	str	r3, [r7, #16]
 800b636:	e00c      	b.n	800b652 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d108      	bne.n	800b652 <osEventFlagsNew+0x54>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d104      	bne.n	800b652 <osEventFlagsNew+0x54>
          mem = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	613b      	str	r3, [r7, #16]
 800b64c:	e001      	b.n	800b652 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d106      	bne.n	800b666 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 fd27 	bl	800c0b0 <xEventGroupCreateStatic>
 800b662:	6178      	str	r0, [r7, #20]
 800b664:	e005      	b.n	800b672 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d102      	bne.n	800b672 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800b66c:	f000 fd57 	bl	800c11e <xEventGroupCreate>
 800b670:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800b672:	697b      	ldr	r3, [r7, #20]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3718      	adds	r7, #24
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d004      	beq.n	800b69a <osEventFlagsSet+0x1e>
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b696:	2b00      	cmp	r3, #0
 800b698:	d003      	beq.n	800b6a2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800b69a:	f06f 0303 	mvn.w	r3, #3
 800b69e:	617b      	str	r3, [r7, #20]
 800b6a0:	e028      	b.n	800b6f4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6a2:	f3ef 8305 	mrs	r3, IPSR
 800b6a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d01d      	beq.n	800b6ea <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800b6b2:	f107 0308 	add.w	r3, r7, #8
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	6938      	ldr	r0, [r7, #16]
 800b6bc:	f000 ff84 	bl	800c5c8 <xEventGroupSetBitsFromISR>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d103      	bne.n	800b6ce <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800b6c6:	f06f 0302 	mvn.w	r3, #2
 800b6ca:	617b      	str	r3, [r7, #20]
 800b6cc:	e012      	b.n	800b6f4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00d      	beq.n	800b6f4 <osEventFlagsSet+0x78>
 800b6d8:	4b09      	ldr	r3, [pc, #36]	; (800b700 <osEventFlagsSet+0x84>)
 800b6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	e004      	b.n	800b6f4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6938      	ldr	r0, [r7, #16]
 800b6ee:	f000 fe6f 	bl	800c3d0 <xEventGroupSetBits>
 800b6f2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800b6f4:	697b      	ldr	r3, [r7, #20]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3718      	adds	r7, #24
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	e000ed04 	.word	0xe000ed04

0800b704 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d004      	beq.n	800b722 <osEventFlagsClear+0x1e>
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d003      	beq.n	800b72a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800b722:	f06f 0303 	mvn.w	r3, #3
 800b726:	617b      	str	r3, [r7, #20]
 800b728:	e019      	b.n	800b75e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b72a:	f3ef 8305 	mrs	r3, IPSR
 800b72e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b730:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00e      	beq.n	800b754 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800b736:	6938      	ldr	r0, [r7, #16]
 800b738:	f000 fe26 	bl	800c388 <xEventGroupGetBitsFromISR>
 800b73c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	6938      	ldr	r0, [r7, #16]
 800b742:	f000 fe0d 	bl	800c360 <xEventGroupClearBitsFromISR>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d108      	bne.n	800b75e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 800b74c:	f06f 0302 	mvn.w	r3, #2
 800b750:	617b      	str	r3, [r7, #20]
 800b752:	e004      	b.n	800b75e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6938      	ldr	r0, [r7, #16]
 800b758:	f000 fdca 	bl	800c2f0 <xEventGroupClearBits>
 800b75c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800b75e:	697b      	ldr	r3, [r7, #20]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3718      	adds	r7, #24
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08c      	sub	sp, #48	; 0x30
 800b76c:	af02      	add	r7, sp, #8
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d004      	beq.n	800b78a <osEventFlagsWait+0x22>
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d003      	beq.n	800b792 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800b78a:	f06f 0303 	mvn.w	r3, #3
 800b78e:	61fb      	str	r3, [r7, #28]
 800b790:	e04b      	b.n	800b82a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b792:	f3ef 8305 	mrs	r3, IPSR
 800b796:	617b      	str	r3, [r7, #20]
  return(result);
 800b798:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800b79e:	f06f 0305 	mvn.w	r3, #5
 800b7a2:	61fb      	str	r3, [r7, #28]
 800b7a4:	e041      	b.n	800b82a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b7b4:	e001      	b.n	800b7ba <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f003 0302 	and.w	r3, r3, #2
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	623b      	str	r3, [r7, #32]
 800b7c8:	e001      	b.n	800b7ce <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d4:	6a3a      	ldr	r2, [r7, #32]
 800b7d6:	68b9      	ldr	r1, [r7, #8]
 800b7d8:	69b8      	ldr	r0, [r7, #24]
 800b7da:	f000 fcbb 	bl	800c154 <xEventGroupWaitBits>
 800b7de:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f003 0301 	and.w	r3, r3, #1
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d010      	beq.n	800b80c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d019      	beq.n	800b82a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800b7fc:	f06f 0301 	mvn.w	r3, #1
 800b800:	61fb      	str	r3, [r7, #28]
 800b802:	e012      	b.n	800b82a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800b804:	f06f 0302 	mvn.w	r3, #2
 800b808:	61fb      	str	r3, [r7, #28]
 800b80a:	e00e      	b.n	800b82a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	4013      	ands	r3, r2
 800b812:	2b00      	cmp	r3, #0
 800b814:	d109      	bne.n	800b82a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800b81c:	f06f 0301 	mvn.w	r3, #1
 800b820:	61fb      	str	r3, [r7, #28]
 800b822:	e002      	b.n	800b82a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800b824:	f06f 0302 	mvn.w	r3, #2
 800b828:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800b82a:	69fb      	ldr	r3, [r7, #28]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3728      	adds	r7, #40	; 0x28
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <osEventFlagsDelete>:

osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id) {
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b840:	f3ef 8305 	mrs	r3, IPSR
 800b844:	60fb      	str	r3, [r7, #12]
  return(result);
 800b846:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <osEventFlagsDelete+0x20>
    stat = osErrorISR;
 800b84c:	f06f 0305 	mvn.w	r3, #5
 800b850:	617b      	str	r3, [r7, #20]
 800b852:	e00b      	b.n	800b86c <osEventFlagsDelete+0x38>
  }
  else if (hEventGroup == NULL) {
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d103      	bne.n	800b862 <osEventFlagsDelete+0x2e>
    stat = osErrorParameter;
 800b85a:	f06f 0303 	mvn.w	r3, #3
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	e004      	b.n	800b86c <osEventFlagsDelete+0x38>
  }
  else {
    stat = osOK;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]
    vEventGroupDelete (hEventGroup);
 800b866:	6938      	ldr	r0, [r7, #16]
 800b868:	f000 fe3d 	bl	800c4e6 <vEventGroupDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b86c:	697b      	ldr	r3, [r7, #20]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <osMutexNew>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b876:	b580      	push	{r7, lr}
 800b878:	b088      	sub	sp, #32
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b87e:	2300      	movs	r3, #0
 800b880:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b882:	f3ef 8305 	mrs	r3, IPSR
 800b886:	60bb      	str	r3, [r7, #8]
  return(result);
 800b888:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d174      	bne.n	800b978 <osMutexNew+0x102>
    if (attr != NULL) {
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d003      	beq.n	800b89c <osMutexNew+0x26>
      type = attr->attr_bits;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	61bb      	str	r3, [r7, #24]
 800b89a:	e001      	b.n	800b8a0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b89c:	2300      	movs	r3, #0
 800b89e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <osMutexNew+0x3a>
      rmtx = 1U;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	e001      	b.n	800b8b4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	f003 0308 	and.w	r3, r3, #8
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d15c      	bne.n	800b978 <osMutexNew+0x102>
      mem = -1;
 800b8be:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d015      	beq.n	800b8f6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d006      	beq.n	800b8e0 <osMutexNew+0x6a>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	2b4f      	cmp	r3, #79	; 0x4f
 800b8d8:	d902      	bls.n	800b8e0 <osMutexNew+0x6a>
          mem = 1;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	613b      	str	r3, [r7, #16]
 800b8de:	e00c      	b.n	800b8fa <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d108      	bne.n	800b8fa <osMutexNew+0x84>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d104      	bne.n	800b8fa <osMutexNew+0x84>
            mem = 0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	613b      	str	r3, [r7, #16]
 800b8f4:	e001      	b.n	800b8fa <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d112      	bne.n	800b926 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d007      	beq.n	800b916 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	4619      	mov	r1, r3
 800b90c:	2004      	movs	r0, #4
 800b90e:	f001 f892 	bl	800ca36 <xQueueCreateMutexStatic>
 800b912:	61f8      	str	r0, [r7, #28]
 800b914:	e016      	b.n	800b944 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	4619      	mov	r1, r3
 800b91c:	2001      	movs	r0, #1
 800b91e:	f001 f88a 	bl	800ca36 <xQueueCreateMutexStatic>
 800b922:	61f8      	str	r0, [r7, #28]
 800b924:	e00e      	b.n	800b944 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10b      	bne.n	800b944 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d004      	beq.n	800b93c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b932:	2004      	movs	r0, #4
 800b934:	f001 f867 	bl	800ca06 <xQueueCreateMutex>
 800b938:	61f8      	str	r0, [r7, #28]
 800b93a:	e003      	b.n	800b944 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b93c:	2001      	movs	r0, #1
 800b93e:	f001 f862 	bl	800ca06 <xQueueCreateMutex>
 800b942:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00c      	beq.n	800b964 <osMutexNew+0xee>
        if (attr != NULL) {
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <osMutexNew+0xe2>
          name = attr->name;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	60fb      	str	r3, [r7, #12]
 800b956:	e001      	b.n	800b95c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b958:	2300      	movs	r3, #0
 800b95a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b95c:	68f9      	ldr	r1, [r7, #12]
 800b95e:	69f8      	ldr	r0, [r7, #28]
 800b960:	f001 ff72 	bl	800d848 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d006      	beq.n	800b978 <osMutexNew+0x102>
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d003      	beq.n	800b978 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	f043 0301 	orr.w	r3, r3, #1
 800b976:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b978:	69fb      	ldr	r3, [r7, #28]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3720      	adds	r7, #32
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b982:	b580      	push	{r7, lr}
 800b984:	b086      	sub	sp, #24
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f023 0301 	bic.w	r3, r3, #1
 800b992:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f003 0301 	and.w	r3, r3, #1
 800b99a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b99c:	2300      	movs	r3, #0
 800b99e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9a0:	f3ef 8305 	mrs	r3, IPSR
 800b9a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9a6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b9ac:	f06f 0305 	mvn.w	r3, #5
 800b9b0:	617b      	str	r3, [r7, #20]
 800b9b2:	e02c      	b.n	800ba0e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d103      	bne.n	800b9c2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b9ba:	f06f 0303 	mvn.w	r3, #3
 800b9be:	617b      	str	r3, [r7, #20]
 800b9c0:	e025      	b.n	800ba0e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d011      	beq.n	800b9ec <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6938      	ldr	r0, [r7, #16]
 800b9cc:	f001 f882 	bl	800cad4 <xQueueTakeMutexRecursive>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d01b      	beq.n	800ba0e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d003      	beq.n	800b9e4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b9dc:	f06f 0301 	mvn.w	r3, #1
 800b9e0:	617b      	str	r3, [r7, #20]
 800b9e2:	e014      	b.n	800ba0e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b9e4:	f06f 0302 	mvn.w	r3, #2
 800b9e8:	617b      	str	r3, [r7, #20]
 800b9ea:	e010      	b.n	800ba0e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6938      	ldr	r0, [r7, #16]
 800b9f0:	f001 fc16 	bl	800d220 <xQueueSemaphoreTake>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d009      	beq.n	800ba0e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d003      	beq.n	800ba08 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ba00:	f06f 0301 	mvn.w	r3, #1
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	e002      	b.n	800ba0e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ba08:	f06f 0302 	mvn.w	r3, #2
 800ba0c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ba0e:	697b      	ldr	r3, [r7, #20]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3718      	adds	r7, #24
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f023 0301 	bic.w	r3, r3, #1
 800ba26:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba34:	f3ef 8305 	mrs	r3, IPSR
 800ba38:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba3a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d003      	beq.n	800ba48 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ba40:	f06f 0305 	mvn.w	r3, #5
 800ba44:	617b      	str	r3, [r7, #20]
 800ba46:	e01f      	b.n	800ba88 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d103      	bne.n	800ba56 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ba4e:	f06f 0303 	mvn.w	r3, #3
 800ba52:	617b      	str	r3, [r7, #20]
 800ba54:	e018      	b.n	800ba88 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d009      	beq.n	800ba70 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ba5c:	6938      	ldr	r0, [r7, #16]
 800ba5e:	f001 f805 	bl	800ca6c <xQueueGiveMutexRecursive>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d00f      	beq.n	800ba88 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ba68:	f06f 0302 	mvn.w	r3, #2
 800ba6c:	617b      	str	r3, [r7, #20]
 800ba6e:	e00b      	b.n	800ba88 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ba70:	2300      	movs	r3, #0
 800ba72:	2200      	movs	r2, #0
 800ba74:	2100      	movs	r1, #0
 800ba76:	6938      	ldr	r0, [r7, #16]
 800ba78:	f001 f8cc 	bl	800cc14 <xQueueGenericSend>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d002      	beq.n	800ba88 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ba82:	f06f 0302 	mvn.w	r3, #2
 800ba86:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ba88:	697b      	ldr	r3, [r7, #20]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3718      	adds	r7, #24
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b08a      	sub	sp, #40	; 0x28
 800ba96:	af02      	add	r7, sp, #8
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baa2:	f3ef 8305 	mrs	r3, IPSR
 800baa6:	613b      	str	r3, [r7, #16]
  return(result);
 800baa8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d175      	bne.n	800bb9a <osSemaphoreNew+0x108>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d072      	beq.n	800bb9a <osSemaphoreNew+0x108>
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d86e      	bhi.n	800bb9a <osSemaphoreNew+0x108>
    mem = -1;
 800babc:	f04f 33ff 	mov.w	r3, #4294967295
 800bac0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d015      	beq.n	800baf4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d006      	beq.n	800bade <osSemaphoreNew+0x4c>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	2b4f      	cmp	r3, #79	; 0x4f
 800bad6:	d902      	bls.n	800bade <osSemaphoreNew+0x4c>
        mem = 1;
 800bad8:	2301      	movs	r3, #1
 800bada:	61bb      	str	r3, [r7, #24]
 800badc:	e00c      	b.n	800baf8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d108      	bne.n	800baf8 <osSemaphoreNew+0x66>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d104      	bne.n	800baf8 <osSemaphoreNew+0x66>
          mem = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	61bb      	str	r3, [r7, #24]
 800baf2:	e001      	b.n	800baf8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800baf4:	2300      	movs	r3, #0
 800baf6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bafe:	d04c      	beq.n	800bb9a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d128      	bne.n	800bb58 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d10a      	bne.n	800bb22 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	2203      	movs	r2, #3
 800bb12:	9200      	str	r2, [sp, #0]
 800bb14:	2200      	movs	r2, #0
 800bb16:	2100      	movs	r1, #0
 800bb18:	2001      	movs	r0, #1
 800bb1a:	f000 fe85 	bl	800c828 <xQueueGenericCreateStatic>
 800bb1e:	61f8      	str	r0, [r7, #28]
 800bb20:	e005      	b.n	800bb2e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bb22:	2203      	movs	r2, #3
 800bb24:	2100      	movs	r1, #0
 800bb26:	2001      	movs	r0, #1
 800bb28:	f000 fef6 	bl	800c918 <xQueueGenericCreate>
 800bb2c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d022      	beq.n	800bb7a <osSemaphoreNew+0xe8>
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d01f      	beq.n	800bb7a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2100      	movs	r1, #0
 800bb40:	69f8      	ldr	r0, [r7, #28]
 800bb42:	f001 f867 	bl	800cc14 <xQueueGenericSend>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d016      	beq.n	800bb7a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800bb4c:	69f8      	ldr	r0, [r7, #28]
 800bb4e:	f001 fd2f 	bl	800d5b0 <vQueueDelete>
            hSemaphore = NULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	61fb      	str	r3, [r7, #28]
 800bb56:	e010      	b.n	800bb7a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d108      	bne.n	800bb70 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	461a      	mov	r2, r3
 800bb64:	68b9      	ldr	r1, [r7, #8]
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f000 ffea 	bl	800cb40 <xQueueCreateCountingSemaphoreStatic>
 800bb6c:	61f8      	str	r0, [r7, #28]
 800bb6e:	e004      	b.n	800bb7a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f001 f81b 	bl	800cbae <xQueueCreateCountingSemaphore>
 800bb78:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00c      	beq.n	800bb9a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <osSemaphoreNew+0xfc>
          name = attr->name;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	617b      	str	r3, [r7, #20]
 800bb8c:	e001      	b.n	800bb92 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bb92:	6979      	ldr	r1, [r7, #20]
 800bb94:	69f8      	ldr	r0, [r7, #28]
 800bb96:	f001 fe57 	bl	800d848 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bb9a:	69fb      	ldr	r3, [r7, #28]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3720      	adds	r7, #32
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d103      	bne.n	800bbc4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bbbc:	f06f 0303 	mvn.w	r3, #3
 800bbc0:	617b      	str	r3, [r7, #20]
 800bbc2:	e039      	b.n	800bc38 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbc4:	f3ef 8305 	mrs	r3, IPSR
 800bbc8:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbca:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d022      	beq.n	800bc16 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800bbd6:	f06f 0303 	mvn.w	r3, #3
 800bbda:	617b      	str	r3, [r7, #20]
 800bbdc:	e02c      	b.n	800bc38 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bbe2:	f107 0308 	add.w	r3, r7, #8
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	2100      	movs	r1, #0
 800bbea:	6938      	ldr	r0, [r7, #16]
 800bbec:	f001 fc24 	bl	800d438 <xQueueReceiveFromISR>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d003      	beq.n	800bbfe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800bbf6:	f06f 0302 	mvn.w	r3, #2
 800bbfa:	617b      	str	r3, [r7, #20]
 800bbfc:	e01c      	b.n	800bc38 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d019      	beq.n	800bc38 <osSemaphoreAcquire+0x94>
 800bc04:	4b0f      	ldr	r3, [pc, #60]	; (800bc44 <osSemaphoreAcquire+0xa0>)
 800bc06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	e010      	b.n	800bc38 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6938      	ldr	r0, [r7, #16]
 800bc1a:	f001 fb01 	bl	800d220 <xQueueSemaphoreTake>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d009      	beq.n	800bc38 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800bc2a:	f06f 0301 	mvn.w	r3, #1
 800bc2e:	617b      	str	r3, [r7, #20]
 800bc30:	e002      	b.n	800bc38 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800bc32:	f06f 0302 	mvn.w	r3, #2
 800bc36:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bc38:	697b      	ldr	r3, [r7, #20]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	e000ed04 	.word	0xe000ed04

0800bc48 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bc54:	2300      	movs	r3, #0
 800bc56:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d103      	bne.n	800bc66 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bc5e:	f06f 0303 	mvn.w	r3, #3
 800bc62:	617b      	str	r3, [r7, #20]
 800bc64:	e02c      	b.n	800bcc0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc66:	f3ef 8305 	mrs	r3, IPSR
 800bc6a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d01a      	beq.n	800bca8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800bc72:	2300      	movs	r3, #0
 800bc74:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bc76:	f107 0308 	add.w	r3, r7, #8
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	6938      	ldr	r0, [r7, #16]
 800bc7e:	f001 f962 	bl	800cf46 <xQueueGiveFromISR>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d003      	beq.n	800bc90 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800bc88:	f06f 0302 	mvn.w	r3, #2
 800bc8c:	617b      	str	r3, [r7, #20]
 800bc8e:	e017      	b.n	800bcc0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d014      	beq.n	800bcc0 <osSemaphoreRelease+0x78>
 800bc96:	4b0d      	ldr	r3, [pc, #52]	; (800bccc <osSemaphoreRelease+0x84>)
 800bc98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	e00b      	b.n	800bcc0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bca8:	2300      	movs	r3, #0
 800bcaa:	2200      	movs	r2, #0
 800bcac:	2100      	movs	r1, #0
 800bcae:	6938      	ldr	r0, [r7, #16]
 800bcb0:	f000 ffb0 	bl	800cc14 <xQueueGenericSend>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d002      	beq.n	800bcc0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800bcba:	f06f 0302 	mvn.w	r3, #2
 800bcbe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bcc0:	697b      	ldr	r3, [r7, #20]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	e000ed04 	.word	0xe000ed04

0800bcd0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcdc:	f3ef 8305 	mrs	r3, IPSR
 800bce0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bce2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d003      	beq.n	800bcf0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800bce8:	f06f 0305 	mvn.w	r3, #5
 800bcec:	617b      	str	r3, [r7, #20]
 800bcee:	e00e      	b.n	800bd0e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d103      	bne.n	800bcfe <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800bcf6:	f06f 0303 	mvn.w	r3, #3
 800bcfa:	617b      	str	r3, [r7, #20]
 800bcfc:	e007      	b.n	800bd0e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800bcfe:	6938      	ldr	r0, [r7, #16]
 800bd00:	f001 fdcc 	bl	800d89c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800bd08:	6938      	ldr	r0, [r7, #16]
 800bd0a:	f001 fc51 	bl	800d5b0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800bd0e:	697b      	ldr	r3, [r7, #20]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08a      	sub	sp, #40	; 0x28
 800bd1c:	af02      	add	r7, sp, #8
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd28:	f3ef 8305 	mrs	r3, IPSR
 800bd2c:	613b      	str	r3, [r7, #16]
  return(result);
 800bd2e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d15f      	bne.n	800bdf4 <osMessageQueueNew+0xdc>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d05c      	beq.n	800bdf4 <osMessageQueueNew+0xdc>
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d059      	beq.n	800bdf4 <osMessageQueueNew+0xdc>
    mem = -1;
 800bd40:	f04f 33ff 	mov.w	r3, #4294967295
 800bd44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d029      	beq.n	800bda0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d012      	beq.n	800bd7a <osMessageQueueNew+0x62>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	2b4f      	cmp	r3, #79	; 0x4f
 800bd5a:	d90e      	bls.n	800bd7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00a      	beq.n	800bd7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	695a      	ldr	r2, [r3, #20]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	68b9      	ldr	r1, [r7, #8]
 800bd6c:	fb01 f303 	mul.w	r3, r1, r3
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d302      	bcc.n	800bd7a <osMessageQueueNew+0x62>
        mem = 1;
 800bd74:	2301      	movs	r3, #1
 800bd76:	61bb      	str	r3, [r7, #24]
 800bd78:	e014      	b.n	800bda4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d110      	bne.n	800bda4 <osMessageQueueNew+0x8c>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d10c      	bne.n	800bda4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d108      	bne.n	800bda4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d104      	bne.n	800bda4 <osMessageQueueNew+0x8c>
          mem = 0;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	61bb      	str	r3, [r7, #24]
 800bd9e:	e001      	b.n	800bda4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bda0:	2300      	movs	r3, #0
 800bda2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d10b      	bne.n	800bdc2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	691a      	ldr	r2, [r3, #16]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	9100      	str	r1, [sp, #0]
 800bdb6:	68b9      	ldr	r1, [r7, #8]
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 fd35 	bl	800c828 <xQueueGenericCreateStatic>
 800bdbe:	61f8      	str	r0, [r7, #28]
 800bdc0:	e008      	b.n	800bdd4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d105      	bne.n	800bdd4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bdc8:	2200      	movs	r2, #0
 800bdca:	68b9      	ldr	r1, [r7, #8]
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f000 fda3 	bl	800c918 <xQueueGenericCreate>
 800bdd2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00c      	beq.n	800bdf4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d003      	beq.n	800bde8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	617b      	str	r3, [r7, #20]
 800bde6:	e001      	b.n	800bdec <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bde8:	2300      	movs	r3, #0
 800bdea:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bdec:	6979      	ldr	r1, [r7, #20]
 800bdee:	69f8      	ldr	r0, [r7, #28]
 800bdf0:	f001 fd2a 	bl	800d848 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bdf4:	69fb      	ldr	r3, [r7, #28]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3720      	adds	r7, #32
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
	...

0800be00 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800be00:	b580      	push	{r7, lr}
 800be02:	b088      	sub	sp, #32
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	603b      	str	r3, [r7, #0]
 800be0c:	4613      	mov	r3, r2
 800be0e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800be14:	2300      	movs	r3, #0
 800be16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be18:	f3ef 8305 	mrs	r3, IPSR
 800be1c:	617b      	str	r3, [r7, #20]
  return(result);
 800be1e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800be20:	2b00      	cmp	r3, #0
 800be22:	d028      	beq.n	800be76 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d005      	beq.n	800be36 <osMessageQueuePut+0x36>
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <osMessageQueuePut+0x36>
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800be36:	f06f 0303 	mvn.w	r3, #3
 800be3a:	61fb      	str	r3, [r7, #28]
 800be3c:	e038      	b.n	800beb0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800be3e:	2300      	movs	r3, #0
 800be40:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800be42:	f107 0210 	add.w	r2, r7, #16
 800be46:	2300      	movs	r3, #0
 800be48:	68b9      	ldr	r1, [r7, #8]
 800be4a:	69b8      	ldr	r0, [r7, #24]
 800be4c:	f000 ffe0 	bl	800ce10 <xQueueGenericSendFromISR>
 800be50:	4603      	mov	r3, r0
 800be52:	2b01      	cmp	r3, #1
 800be54:	d003      	beq.n	800be5e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800be56:	f06f 0302 	mvn.w	r3, #2
 800be5a:	61fb      	str	r3, [r7, #28]
 800be5c:	e028      	b.n	800beb0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d025      	beq.n	800beb0 <osMessageQueuePut+0xb0>
 800be64:	4b15      	ldr	r3, [pc, #84]	; (800bebc <osMessageQueuePut+0xbc>)
 800be66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	e01c      	b.n	800beb0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <osMessageQueuePut+0x82>
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d103      	bne.n	800be8a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800be82:	f06f 0303 	mvn.w	r3, #3
 800be86:	61fb      	str	r3, [r7, #28]
 800be88:	e012      	b.n	800beb0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800be8a:	2300      	movs	r3, #0
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	68b9      	ldr	r1, [r7, #8]
 800be90:	69b8      	ldr	r0, [r7, #24]
 800be92:	f000 febf 	bl	800cc14 <xQueueGenericSend>
 800be96:	4603      	mov	r3, r0
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d009      	beq.n	800beb0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d003      	beq.n	800beaa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bea2:	f06f 0301 	mvn.w	r3, #1
 800bea6:	61fb      	str	r3, [r7, #28]
 800bea8:	e002      	b.n	800beb0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800beaa:	f06f 0302 	mvn.w	r3, #2
 800beae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800beb0:	69fb      	ldr	r3, [r7, #28]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3720      	adds	r7, #32
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	e000ed04 	.word	0xe000ed04

0800bec0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b088      	sub	sp, #32
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
 800becc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bed6:	f3ef 8305 	mrs	r3, IPSR
 800beda:	617b      	str	r3, [r7, #20]
  return(result);
 800bedc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d028      	beq.n	800bf34 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <osMessageQueueGet+0x34>
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d002      	beq.n	800bef4 <osMessageQueueGet+0x34>
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bef4:	f06f 0303 	mvn.w	r3, #3
 800bef8:	61fb      	str	r3, [r7, #28]
 800befa:	e037      	b.n	800bf6c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800befc:	2300      	movs	r3, #0
 800befe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bf00:	f107 0310 	add.w	r3, r7, #16
 800bf04:	461a      	mov	r2, r3
 800bf06:	68b9      	ldr	r1, [r7, #8]
 800bf08:	69b8      	ldr	r0, [r7, #24]
 800bf0a:	f001 fa95 	bl	800d438 <xQueueReceiveFromISR>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d003      	beq.n	800bf1c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bf14:	f06f 0302 	mvn.w	r3, #2
 800bf18:	61fb      	str	r3, [r7, #28]
 800bf1a:	e027      	b.n	800bf6c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d024      	beq.n	800bf6c <osMessageQueueGet+0xac>
 800bf22:	4b15      	ldr	r3, [pc, #84]	; (800bf78 <osMessageQueueGet+0xb8>)
 800bf24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf28:	601a      	str	r2, [r3, #0]
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	e01b      	b.n	800bf6c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <osMessageQueueGet+0x80>
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d103      	bne.n	800bf48 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bf40:	f06f 0303 	mvn.w	r3, #3
 800bf44:	61fb      	str	r3, [r7, #28]
 800bf46:	e011      	b.n	800bf6c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bf48:	683a      	ldr	r2, [r7, #0]
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	69b8      	ldr	r0, [r7, #24]
 800bf4e:	f001 f887 	bl	800d060 <xQueueReceive>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d009      	beq.n	800bf6c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bf5e:	f06f 0301 	mvn.w	r3, #1
 800bf62:	61fb      	str	r3, [r7, #28]
 800bf64:	e002      	b.n	800bf6c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bf66:	f06f 0302 	mvn.w	r3, #2
 800bf6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bf6c:	69fb      	ldr	r3, [r7, #28]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3720      	adds	r7, #32
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	e000ed04 	.word	0xe000ed04

0800bf7c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d102      	bne.n	800bf94 <osMessageQueueGetCount+0x18>
    count = 0U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
 800bf92:	e00e      	b.n	800bfb2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf94:	f3ef 8305 	mrs	r3, IPSR
 800bf98:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d004      	beq.n	800bfaa <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800bfa0:	6938      	ldr	r0, [r7, #16]
 800bfa2:	f001 fae7 	bl	800d574 <uxQueueMessagesWaitingFromISR>
 800bfa6:	6178      	str	r0, [r7, #20]
 800bfa8:	e003      	b.n	800bfb2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800bfaa:	6938      	ldr	r0, [r7, #16]
 800bfac:	f001 fac4 	bl	800d538 <uxQueueMessagesWaiting>
 800bfb0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800bfb2:	697b      	ldr	r3, [r7, #20]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3718      	adds	r7, #24
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfc8:	f3ef 8305 	mrs	r3, IPSR
 800bfcc:	60fb      	str	r3, [r7, #12]
  return(result);
 800bfce:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d003      	beq.n	800bfdc <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800bfd4:	f06f 0305 	mvn.w	r3, #5
 800bfd8:	617b      	str	r3, [r7, #20]
 800bfda:	e00c      	b.n	800bff6 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d103      	bne.n	800bfea <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800bfe2:	f06f 0303 	mvn.w	r3, #3
 800bfe6:	617b      	str	r3, [r7, #20]
 800bfe8:	e005      	b.n	800bff6 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800bfee:	2100      	movs	r1, #0
 800bff0:	6938      	ldr	r0, [r7, #16]
 800bff2:	f000 fbb1 	bl	800c758 <xQueueGenericReset>
  }

  return (stat);
 800bff6:	697b      	ldr	r3, [r7, #20]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3718      	adds	r7, #24
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <osMessageQueueDelete>:

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c00c:	f3ef 8305 	mrs	r3, IPSR
 800c010:	60fb      	str	r3, [r7, #12]
  return(result);
 800c012:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c014:	2b00      	cmp	r3, #0
 800c016:	d003      	beq.n	800c020 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800c018:	f06f 0305 	mvn.w	r3, #5
 800c01c:	617b      	str	r3, [r7, #20]
 800c01e:	e00e      	b.n	800c03e <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d103      	bne.n	800c02e <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800c026:	f06f 0303 	mvn.w	r3, #3
 800c02a:	617b      	str	r3, [r7, #20]
 800c02c:	e007      	b.n	800c03e <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800c02e:	6938      	ldr	r0, [r7, #16]
 800c030:	f001 fc34 	bl	800d89c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c034:	2300      	movs	r3, #0
 800c036:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800c038:	6938      	ldr	r0, [r7, #16]
 800c03a:	f001 fab9 	bl	800d5b0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c03e:	697b      	ldr	r3, [r7, #20]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	4a07      	ldr	r2, [pc, #28]	; (800c074 <vApplicationGetIdleTaskMemory+0x2c>)
 800c058:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	4a06      	ldr	r2, [pc, #24]	; (800c078 <vApplicationGetIdleTaskMemory+0x30>)
 800c05e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2280      	movs	r2, #128	; 0x80
 800c064:	601a      	str	r2, [r3, #0]
}
 800c066:	bf00      	nop
 800c068:	3714      	adds	r7, #20
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20000824 	.word	0x20000824
 800c078:	200008e8 	.word	0x200008e8

0800c07c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	4a07      	ldr	r2, [pc, #28]	; (800c0a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c08c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	4a06      	ldr	r2, [pc, #24]	; (800c0ac <vApplicationGetTimerTaskMemory+0x30>)
 800c092:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c09a:	601a      	str	r2, [r3, #0]
}
 800c09c:	bf00      	nop
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr
 800c0a8:	20000ae8 	.word	0x20000ae8
 800c0ac:	20000bac 	.word	0x20000bac

0800c0b0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10a      	bne.n	800c0d4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c0d4:	2320      	movs	r3, #32
 800c0d6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	2b20      	cmp	r3, #32
 800c0dc:	d00a      	beq.n	800c0f4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	60fb      	str	r3, [r7, #12]
}
 800c0f0:	bf00      	nop
 800c0f2:	e7fe      	b.n	800c0f2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00a      	beq.n	800c114 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	2200      	movs	r2, #0
 800c102:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	3304      	adds	r3, #4
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 fa71 	bl	800c5f0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	2201      	movs	r2, #1
 800c112:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c114:	697b      	ldr	r3, [r7, #20]
	}
 800c116:	4618      	mov	r0, r3
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b082      	sub	sp, #8
 800c122:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c124:	2020      	movs	r0, #32
 800c126:	f003 fbd7 	bl	800f8d8 <pvPortMalloc>
 800c12a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00a      	beq.n	800c148 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	3304      	adds	r3, #4
 800c13c:	4618      	mov	r0, r3
 800c13e:	f000 fa57 	bl	800c5f0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c148:	687b      	ldr	r3, [r7, #4]
	}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
	...

0800c154 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b090      	sub	sp, #64	; 0x40
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c166:	2300      	movs	r3, #0
 800c168:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c16a:	2300      	movs	r3, #0
 800c16c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10a      	bne.n	800c18a <xEventGroupWaitBits+0x36>
	__asm volatile
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	623b      	str	r3, [r7, #32]
}
 800c186:	bf00      	nop
 800c188:	e7fe      	b.n	800c188 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00a      	beq.n	800c1aa <xEventGroupWaitBits+0x56>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	61fb      	str	r3, [r7, #28]
}
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10a      	bne.n	800c1c6 <xEventGroupWaitBits+0x72>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	61bb      	str	r3, [r7, #24]
}
 800c1c2:	bf00      	nop
 800c1c4:	e7fe      	b.n	800c1c4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1c6:	f002 faf3 	bl	800e7b0 <xTaskGetSchedulerState>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d102      	bne.n	800c1d6 <xEventGroupWaitBits+0x82>
 800c1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d101      	bne.n	800c1da <xEventGroupWaitBits+0x86>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e000      	b.n	800c1dc <xEventGroupWaitBits+0x88>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10a      	bne.n	800c1f6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	617b      	str	r3, [r7, #20]
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800c1f6:	f001 fe13 	bl	800de20 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	68b9      	ldr	r1, [r7, #8]
 800c204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c206:	f000 f9bd 	bl	800c584 <prvTestWaitCondition>
 800c20a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800c20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00e      	beq.n	800c230 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c216:	2300      	movs	r3, #0
 800c218:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d028      	beq.n	800c272 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	43db      	mvns	r3, r3
 800c228:	401a      	ands	r2, r3
 800c22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22c:	601a      	str	r2, [r3, #0]
 800c22e:	e020      	b.n	800c272 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c232:	2b00      	cmp	r3, #0
 800c234:	d104      	bne.n	800c240 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c238:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800c23a:	2301      	movs	r3, #1
 800c23c:	633b      	str	r3, [r7, #48]	; 0x30
 800c23e:	e018      	b.n	800c272 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c24c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d003      	beq.n	800c25c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c256:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c25a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25e:	1d18      	adds	r0, r3, #4
 800c260:	68ba      	ldr	r2, [r7, #8]
 800c262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c264:	4313      	orrs	r3, r2
 800c266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c268:	4619      	mov	r1, r3
 800c26a:	f002 f805 	bl	800e278 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c26e:	2300      	movs	r3, #0
 800c270:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c272:	f001 fde3 	bl	800de3c <xTaskResumeAll>
 800c276:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d031      	beq.n	800c2e2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800c27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c280:	2b00      	cmp	r3, #0
 800c282:	d107      	bne.n	800c294 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800c284:	4b19      	ldr	r3, [pc, #100]	; (800c2ec <xEventGroupWaitBits+0x198>)
 800c286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c28a:	601a      	str	r2, [r3, #0]
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c294:	f002 fc02 	bl	800ea9c <uxTaskResetEventItemValue>
 800c298:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d11a      	bne.n	800c2da <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800c2a4:	f003 f9f6 	bl	800f694 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	68b9      	ldr	r1, [r7, #8]
 800c2b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c2b4:	f000 f966 	bl	800c584 <prvTestWaitCondition>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d009      	beq.n	800c2d2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d006      	beq.n	800c2d2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	43db      	mvns	r3, r3
 800c2cc:	401a      	ands	r2, r3
 800c2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800c2d6:	f003 fa0d 	bl	800f6f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3740      	adds	r7, #64	; 0x40
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	e000ed04 	.word	0xe000ed04

0800c2f0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10a      	bne.n	800c31a <xEventGroupClearBits+0x2a>
	__asm volatile
 800c304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	60fb      	str	r3, [r7, #12]
}
 800c316:	bf00      	nop
 800c318:	e7fe      	b.n	800c318 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00a      	beq.n	800c33a <xEventGroupClearBits+0x4a>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	60bb      	str	r3, [r7, #8]
}
 800c336:	bf00      	nop
 800c338:	e7fe      	b.n	800c338 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800c33a:	f003 f9ab 	bl	800f694 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	43db      	mvns	r3, r3
 800c34c:	401a      	ands	r2, r3
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800c352:	f003 f9cf 	bl	800f6f4 <vPortExitCritical>

	return uxReturn;
 800c356:	693b      	ldr	r3, [r7, #16]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3718      	adds	r7, #24
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c36a:	2300      	movs	r3, #0
 800c36c:	683a      	ldr	r2, [r7, #0]
 800c36e:	6879      	ldr	r1, [r7, #4]
 800c370:	4804      	ldr	r0, [pc, #16]	; (800c384 <xEventGroupClearBitsFromISR+0x24>)
 800c372:	f003 f845 	bl	800f400 <xTimerPendFunctionCallFromISR>
 800c376:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800c378:	68fb      	ldr	r3, [r7, #12]
	}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	0800c56b 	.word	0x0800c56b

0800c388 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800c388:	b480      	push	{r7}
 800c38a:	b089      	sub	sp, #36	; 0x24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c394:	f3ef 8211 	mrs	r2, BASEPRI
 800c398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	60fa      	str	r2, [r7, #12]
 800c3aa:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3ae:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	617b      	str	r3, [r7, #20]
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c3c0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800c3c2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3724      	adds	r7, #36	; 0x24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b08e      	sub	sp, #56	; 0x38
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10a      	bne.n	800c402 <xEventGroupSetBits+0x32>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	613b      	str	r3, [r7, #16]
}
 800c3fe:	bf00      	nop
 800c400:	e7fe      	b.n	800c400 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00a      	beq.n	800c422 <xEventGroupSetBits+0x52>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	60fb      	str	r3, [r7, #12]
}
 800c41e:	bf00      	nop
 800c420:	e7fe      	b.n	800c420 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c424:	3304      	adds	r3, #4
 800c426:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42a:	3308      	adds	r3, #8
 800c42c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c42e:	f001 fcf7 	bl	800de20 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	431a      	orrs	r2, r3
 800c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c442:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c444:	e03c      	b.n	800c4c0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c452:	2300      	movs	r3, #0
 800c454:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c45c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c464:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d108      	bne.n	800c482 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	4013      	ands	r3, r2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00b      	beq.n	800c494 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800c47c:	2301      	movs	r3, #1
 800c47e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c480:	e008      	b.n	800c494 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	4013      	ands	r3, r2
 800c48a:	69ba      	ldr	r2, [r7, #24]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d101      	bne.n	800c494 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c490:	2301      	movs	r3, #1
 800c492:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c496:	2b00      	cmp	r3, #0
 800c498:	d010      	beq.n	800c4bc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d003      	beq.n	800c4ac <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c4b8:	f001 ffaa 	bl	800e410 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800c4c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4c2:	6a3b      	ldr	r3, [r7, #32]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d1be      	bne.n	800c446 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	43db      	mvns	r3, r3
 800c4d0:	401a      	ands	r2, r3
 800c4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c4d6:	f001 fcb1 	bl	800de3c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4dc:	681b      	ldr	r3, [r3, #0]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3738      	adds	r7, #56	; 0x38
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b086      	sub	sp, #24
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 800c4f8:	f001 fc92 	bl	800de20 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800c4fc:	e017      	b.n	800c52e <vEventGroupDelete+0x48>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	68da      	ldr	r2, [r3, #12]
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	3308      	adds	r3, #8
 800c506:	429a      	cmp	r2, r3
 800c508:	d10a      	bne.n	800c520 <vEventGroupDelete+0x3a>
	__asm volatile
 800c50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	60fb      	str	r3, [r7, #12]
}
 800c51c:	bf00      	nop
 800c51e:	e7fe      	b.n	800c51e <vEventGroupDelete+0x38>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800c528:	4618      	mov	r0, r3
 800c52a:	f001 ff71 	bl	800e410 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1e3      	bne.n	800c4fe <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	7f1b      	ldrb	r3, [r3, #28]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d102      	bne.n	800c544 <vEventGroupDelete+0x5e>
			{
				vPortFree( pxEventBits );
 800c53e:	6978      	ldr	r0, [r7, #20]
 800c540:	f003 fa96 	bl	800fa70 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 800c544:	f001 fc7a 	bl	800de3c <xTaskResumeAll>
}
 800c548:	bf00      	nop
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f7ff ff37 	bl	800c3d0 <xEventGroupSetBits>
}
 800c562:	bf00      	nop
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7ff feba 	bl	800c2f0 <xEventGroupClearBits>
}
 800c57c:	bf00      	nop
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c584:	b480      	push	{r7}
 800c586:	b087      	sub	sp, #28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c590:	2300      	movs	r3, #0
 800c592:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d107      	bne.n	800c5aa <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	4013      	ands	r3, r2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00a      	beq.n	800c5ba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	617b      	str	r3, [r7, #20]
 800c5a8:	e007      	b.n	800c5ba <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	68ba      	ldr	r2, [r7, #8]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d101      	bne.n	800c5ba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c5ba:	697b      	ldr	r3, [r7, #20]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	371c      	adds	r7, #28
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b086      	sub	sp, #24
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	68f9      	ldr	r1, [r7, #12]
 800c5da:	4804      	ldr	r0, [pc, #16]	; (800c5ec <xEventGroupSetBitsFromISR+0x24>)
 800c5dc:	f002 ff10 	bl	800f400 <xTimerPendFunctionCallFromISR>
 800c5e0:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c5e2:	697b      	ldr	r3, [r7, #20]
	}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3718      	adds	r7, #24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	0800c551 	.word	0x0800c551

0800c5f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f103 0208 	add.w	r2, r3, #8
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f04f 32ff 	mov.w	r2, #4294967295
 800c608:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f103 0208 	add.w	r2, r3, #8
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f103 0208 	add.w	r2, r3, #8
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c63e:	bf00      	nop
 800c640:	370c      	adds	r7, #12
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c64a:	b480      	push	{r7}
 800c64c:	b085      	sub	sp, #20
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	689a      	ldr	r2, [r3, #8]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	1c5a      	adds	r2, r3, #1
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	601a      	str	r2, [r3, #0]
}
 800c686:	bf00      	nop
 800c688:	3714      	adds	r7, #20
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c692:	b480      	push	{r7}
 800c694:	b085      	sub	sp, #20
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a8:	d103      	bne.n	800c6b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	60fb      	str	r3, [r7, #12]
 800c6b0:	e00c      	b.n	800c6cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	3308      	adds	r3, #8
 800c6b6:	60fb      	str	r3, [r7, #12]
 800c6b8:	e002      	b.n	800c6c0 <vListInsert+0x2e>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d2f6      	bcs.n	800c6ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	601a      	str	r2, [r3, #0]
}
 800c6f8:	bf00      	nop
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	6892      	ldr	r2, [r2, #8]
 800c71a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	6852      	ldr	r2, [r2, #4]
 800c724:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d103      	bne.n	800c738 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	689a      	ldr	r2, [r3, #8]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	1e5a      	subs	r2, r3, #1
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10a      	bne.n	800c782 <xQueueGenericReset+0x2a>
	__asm volatile
 800c76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	60bb      	str	r3, [r7, #8]
}
 800c77e:	bf00      	nop
 800c780:	e7fe      	b.n	800c780 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c782:	f002 ff87 	bl	800f694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78e:	68f9      	ldr	r1, [r7, #12]
 800c790:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c792:	fb01 f303 	mul.w	r3, r1, r3
 800c796:	441a      	add	r2, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	68f9      	ldr	r1, [r7, #12]
 800c7b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7b8:	fb01 f303 	mul.w	r3, r1, r3
 800c7bc:	441a      	add	r2, r3
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	22ff      	movs	r2, #255	; 0xff
 800c7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	22ff      	movs	r2, #255	; 0xff
 800c7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d114      	bne.n	800c802 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d01a      	beq.n	800c816 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3310      	adds	r3, #16
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f001 fdaf 	bl	800e348 <xTaskRemoveFromEventList>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d012      	beq.n	800c816 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c7f0:	4b0c      	ldr	r3, [pc, #48]	; (800c824 <xQueueGenericReset+0xcc>)
 800c7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7f6:	601a      	str	r2, [r3, #0]
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	e009      	b.n	800c816 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3310      	adds	r3, #16
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff fef2 	bl	800c5f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	3324      	adds	r3, #36	; 0x24
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff feed 	bl	800c5f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c816:	f002 ff6d 	bl	800f6f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c81a:	2301      	movs	r3, #1
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	e000ed04 	.word	0xe000ed04

0800c828 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08e      	sub	sp, #56	; 0x38
 800c82c:	af02      	add	r7, sp, #8
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10a      	bne.n	800c852 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c84e:	bf00      	nop
 800c850:	e7fe      	b.n	800c850 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10a      	bne.n	800c86e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c86a:	bf00      	nop
 800c86c:	e7fe      	b.n	800c86c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d002      	beq.n	800c87a <xQueueGenericCreateStatic+0x52>
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <xQueueGenericCreateStatic+0x56>
 800c87a:	2301      	movs	r3, #1
 800c87c:	e000      	b.n	800c880 <xQueueGenericCreateStatic+0x58>
 800c87e:	2300      	movs	r3, #0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10a      	bne.n	800c89a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	623b      	str	r3, [r7, #32]
}
 800c896:	bf00      	nop
 800c898:	e7fe      	b.n	800c898 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d102      	bne.n	800c8a6 <xQueueGenericCreateStatic+0x7e>
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <xQueueGenericCreateStatic+0x82>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e000      	b.n	800c8ac <xQueueGenericCreateStatic+0x84>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10a      	bne.n	800c8c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	61fb      	str	r3, [r7, #28]
}
 800c8c2:	bf00      	nop
 800c8c4:	e7fe      	b.n	800c8c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c8c6:	2350      	movs	r3, #80	; 0x50
 800c8c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2b50      	cmp	r3, #80	; 0x50
 800c8ce:	d00a      	beq.n	800c8e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	61bb      	str	r3, [r7, #24]
}
 800c8e2:	bf00      	nop
 800c8e4:	e7fe      	b.n	800c8e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c8e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00d      	beq.n	800c90e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	4613      	mov	r3, r2
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	68b9      	ldr	r1, [r7, #8]
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 f83f 	bl	800c98c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c910:	4618      	mov	r0, r3
 800c912:	3730      	adds	r7, #48	; 0x30
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08a      	sub	sp, #40	; 0x28
 800c91c:	af02      	add	r7, sp, #8
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	4613      	mov	r3, r2
 800c924:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10a      	bne.n	800c942 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	613b      	str	r3, [r7, #16]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	fb02 f303 	mul.w	r3, r2, r3
 800c94a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	3350      	adds	r3, #80	; 0x50
 800c950:	4618      	mov	r0, r3
 800c952:	f002 ffc1 	bl	800f8d8 <pvPortMalloc>
 800c956:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d011      	beq.n	800c982 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	3350      	adds	r3, #80	; 0x50
 800c966:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c970:	79fa      	ldrb	r2, [r7, #7]
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	4613      	mov	r3, r2
 800c978:	697a      	ldr	r2, [r7, #20]
 800c97a:	68b9      	ldr	r1, [r7, #8]
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f000 f805 	bl	800c98c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c982:	69bb      	ldr	r3, [r7, #24]
	}
 800c984:	4618      	mov	r0, r3
 800c986:	3720      	adds	r7, #32
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d103      	bne.n	800c9a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	69ba      	ldr	r2, [r7, #24]
 800c9a4:	601a      	str	r2, [r3, #0]
 800c9a6:	e002      	b.n	800c9ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	68ba      	ldr	r2, [r7, #8]
 800c9b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c9ba:	2101      	movs	r1, #1
 800c9bc:	69b8      	ldr	r0, [r7, #24]
 800c9be:	f7ff fecb 	bl	800c758 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	78fa      	ldrb	r2, [r7, #3]
 800c9c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c9ca:	bf00      	nop
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b082      	sub	sp, #8
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00e      	beq.n	800c9fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 f90b 	bl	800cc14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c9fe:	bf00      	nop
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b086      	sub	sp, #24
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ca10:	2301      	movs	r3, #1
 800ca12:	617b      	str	r3, [r7, #20]
 800ca14:	2300      	movs	r3, #0
 800ca16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ca18:	79fb      	ldrb	r3, [r7, #7]
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	6939      	ldr	r1, [r7, #16]
 800ca1e:	6978      	ldr	r0, [r7, #20]
 800ca20:	f7ff ff7a 	bl	800c918 <xQueueGenericCreate>
 800ca24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f7ff ffd3 	bl	800c9d2 <prvInitialiseMutex>

		return xNewQueue;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
	}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3718      	adds	r7, #24
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b088      	sub	sp, #32
 800ca3a:	af02      	add	r7, sp, #8
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	6039      	str	r1, [r7, #0]
 800ca40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ca42:	2301      	movs	r3, #1
 800ca44:	617b      	str	r3, [r7, #20]
 800ca46:	2300      	movs	r3, #0
 800ca48:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ca4a:	79fb      	ldrb	r3, [r7, #7]
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	2200      	movs	r2, #0
 800ca52:	6939      	ldr	r1, [r7, #16]
 800ca54:	6978      	ldr	r0, [r7, #20]
 800ca56:	f7ff fee7 	bl	800c828 <xQueueGenericCreateStatic>
 800ca5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f7ff ffb8 	bl	800c9d2 <prvInitialiseMutex>

		return xNewQueue;
 800ca62:	68fb      	ldr	r3, [r7, #12]
	}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3718      	adds	r7, #24
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ca6c:	b590      	push	{r4, r7, lr}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10a      	bne.n	800ca94 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	60fb      	str	r3, [r7, #12]
}
 800ca90:	bf00      	nop
 800ca92:	e7fe      	b.n	800ca92 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	689c      	ldr	r4, [r3, #8]
 800ca98:	f001 fe7a 	bl	800e790 <xTaskGetCurrentTaskHandle>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	429c      	cmp	r4, r3
 800caa0:	d111      	bne.n	800cac6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	1e5a      	subs	r2, r3, #1
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d105      	bne.n	800cac0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cab4:	2300      	movs	r3, #0
 800cab6:	2200      	movs	r2, #0
 800cab8:	2100      	movs	r1, #0
 800caba:	6938      	ldr	r0, [r7, #16]
 800cabc:	f000 f8aa 	bl	800cc14 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cac0:	2301      	movs	r3, #1
 800cac2:	617b      	str	r3, [r7, #20]
 800cac4:	e001      	b.n	800caca <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cac6:	2300      	movs	r3, #0
 800cac8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800caca:	697b      	ldr	r3, [r7, #20]
	}
 800cacc:	4618      	mov	r0, r3
 800cace:	371c      	adds	r7, #28
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd90      	pop	{r4, r7, pc}

0800cad4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cad4:	b590      	push	{r4, r7, lr}
 800cad6:	b087      	sub	sp, #28
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10a      	bne.n	800cafe <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800cae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caec:	f383 8811 	msr	BASEPRI, r3
 800caf0:	f3bf 8f6f 	isb	sy
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	60fb      	str	r3, [r7, #12]
}
 800cafa:	bf00      	nop
 800cafc:	e7fe      	b.n	800cafc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	689c      	ldr	r4, [r3, #8]
 800cb02:	f001 fe45 	bl	800e790 <xTaskGetCurrentTaskHandle>
 800cb06:	4603      	mov	r3, r0
 800cb08:	429c      	cmp	r4, r3
 800cb0a:	d107      	bne.n	800cb1c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cb16:	2301      	movs	r3, #1
 800cb18:	617b      	str	r3, [r7, #20]
 800cb1a:	e00c      	b.n	800cb36 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	6938      	ldr	r0, [r7, #16]
 800cb20:	f000 fb7e 	bl	800d220 <xQueueSemaphoreTake>
 800cb24:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d004      	beq.n	800cb36 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	1c5a      	adds	r2, r3, #1
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cb36:	697b      	ldr	r3, [r7, #20]
	}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	371c      	adds	r7, #28
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd90      	pop	{r4, r7, pc}

0800cb40 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b08a      	sub	sp, #40	; 0x28
 800cb44:	af02      	add	r7, sp, #8
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d10a      	bne.n	800cb68 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	61bb      	str	r3, [r7, #24]
}
 800cb64:	bf00      	nop
 800cb66:	e7fe      	b.n	800cb66 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d90a      	bls.n	800cb86 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	617b      	str	r3, [r7, #20]
}
 800cb82:	bf00      	nop
 800cb84:	e7fe      	b.n	800cb84 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb86:	2302      	movs	r3, #2
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2100      	movs	r1, #0
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f7ff fe49 	bl	800c828 <xQueueGenericCreateStatic>
 800cb96:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d002      	beq.n	800cba4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cba4:	69fb      	ldr	r3, [r7, #28]
	}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3720      	adds	r7, #32
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b086      	sub	sp, #24
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10a      	bne.n	800cbd4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc2:	f383 8811 	msr	BASEPRI, r3
 800cbc6:	f3bf 8f6f 	isb	sy
 800cbca:	f3bf 8f4f 	dsb	sy
 800cbce:	613b      	str	r3, [r7, #16]
}
 800cbd0:	bf00      	nop
 800cbd2:	e7fe      	b.n	800cbd2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cbd4:	683a      	ldr	r2, [r7, #0]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d90a      	bls.n	800cbf2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	60fb      	str	r3, [r7, #12]
}
 800cbee:	bf00      	nop
 800cbf0:	e7fe      	b.n	800cbf0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f7ff fe8e 	bl	800c918 <xQueueGenericCreate>
 800cbfc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc0a:	697b      	ldr	r3, [r7, #20]
	}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3718      	adds	r7, #24
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b08e      	sub	sp, #56	; 0x38
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
 800cc20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc22:	2300      	movs	r3, #0
 800cc24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10a      	bne.n	800cc46 <xQueueGenericSend+0x32>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d103      	bne.n	800cc54 <xQueueGenericSend+0x40>
 800cc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <xQueueGenericSend+0x44>
 800cc54:	2301      	movs	r3, #1
 800cc56:	e000      	b.n	800cc5a <xQueueGenericSend+0x46>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10a      	bne.n	800cc74 <xQueueGenericSend+0x60>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc70:	bf00      	nop
 800cc72:	e7fe      	b.n	800cc72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2b02      	cmp	r3, #2
 800cc78:	d103      	bne.n	800cc82 <xQueueGenericSend+0x6e>
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d101      	bne.n	800cc86 <xQueueGenericSend+0x72>
 800cc82:	2301      	movs	r3, #1
 800cc84:	e000      	b.n	800cc88 <xQueueGenericSend+0x74>
 800cc86:	2300      	movs	r3, #0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10a      	bne.n	800cca2 <xQueueGenericSend+0x8e>
	__asm volatile
 800cc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc90:	f383 8811 	msr	BASEPRI, r3
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	623b      	str	r3, [r7, #32]
}
 800cc9e:	bf00      	nop
 800cca0:	e7fe      	b.n	800cca0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cca2:	f001 fd85 	bl	800e7b0 <xTaskGetSchedulerState>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d102      	bne.n	800ccb2 <xQueueGenericSend+0x9e>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <xQueueGenericSend+0xa2>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e000      	b.n	800ccb8 <xQueueGenericSend+0xa4>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d10a      	bne.n	800ccd2 <xQueueGenericSend+0xbe>
	__asm volatile
 800ccbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc0:	f383 8811 	msr	BASEPRI, r3
 800ccc4:	f3bf 8f6f 	isb	sy
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	61fb      	str	r3, [r7, #28]
}
 800ccce:	bf00      	nop
 800ccd0:	e7fe      	b.n	800ccd0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ccd2:	f002 fcdf 	bl	800f694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d302      	bcc.n	800cce8 <xQueueGenericSend+0xd4>
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d129      	bne.n	800cd3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cce8:	683a      	ldr	r2, [r7, #0]
 800ccea:	68b9      	ldr	r1, [r7, #8]
 800ccec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccee:	f000 fc9a 	bl	800d626 <prvCopyDataToQueue>
 800ccf2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d010      	beq.n	800cd1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	3324      	adds	r3, #36	; 0x24
 800cd00:	4618      	mov	r0, r3
 800cd02:	f001 fb21 	bl	800e348 <xTaskRemoveFromEventList>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d013      	beq.n	800cd34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd0c:	4b3f      	ldr	r3, [pc, #252]	; (800ce0c <xQueueGenericSend+0x1f8>)
 800cd0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd12:	601a      	str	r2, [r3, #0]
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	e00a      	b.n	800cd34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d007      	beq.n	800cd34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd24:	4b39      	ldr	r3, [pc, #228]	; (800ce0c <xQueueGenericSend+0x1f8>)
 800cd26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd2a:	601a      	str	r2, [r3, #0]
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cd34:	f002 fcde 	bl	800f6f4 <vPortExitCritical>
				return pdPASS;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e063      	b.n	800ce04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d103      	bne.n	800cd4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd42:	f002 fcd7 	bl	800f6f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	e05c      	b.n	800ce04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d106      	bne.n	800cd5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd50:	f107 0314 	add.w	r3, r7, #20
 800cd54:	4618      	mov	r0, r3
 800cd56:	f001 fbbd 	bl	800e4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd5e:	f002 fcc9 	bl	800f6f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd62:	f001 f85d 	bl	800de20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd66:	f002 fc95 	bl	800f694 <vPortEnterCritical>
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd70:	b25b      	sxtb	r3, r3
 800cd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd76:	d103      	bne.n	800cd80 <xQueueGenericSend+0x16c>
 800cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd86:	b25b      	sxtb	r3, r3
 800cd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd8c:	d103      	bne.n	800cd96 <xQueueGenericSend+0x182>
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd90:	2200      	movs	r2, #0
 800cd92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd96:	f002 fcad 	bl	800f6f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd9a:	1d3a      	adds	r2, r7, #4
 800cd9c:	f107 0314 	add.w	r3, r7, #20
 800cda0:	4611      	mov	r1, r2
 800cda2:	4618      	mov	r0, r3
 800cda4:	f001 fbac 	bl	800e500 <xTaskCheckForTimeOut>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d124      	bne.n	800cdf8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cdae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdb0:	f000 fd31 	bl	800d816 <prvIsQueueFull>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d018      	beq.n	800cdec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbc:	3310      	adds	r3, #16
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f001 fa34 	bl	800e230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cdc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdca:	f000 fcbc 	bl	800d746 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cdce:	f001 f835 	bl	800de3c <xTaskResumeAll>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f47f af7c 	bne.w	800ccd2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cdda:	4b0c      	ldr	r3, [pc, #48]	; (800ce0c <xQueueGenericSend+0x1f8>)
 800cddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	e772      	b.n	800ccd2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cdec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdee:	f000 fcaa 	bl	800d746 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cdf2:	f001 f823 	bl	800de3c <xTaskResumeAll>
 800cdf6:	e76c      	b.n	800ccd2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cdf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdfa:	f000 fca4 	bl	800d746 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdfe:	f001 f81d 	bl	800de3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3738      	adds	r7, #56	; 0x38
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	e000ed04 	.word	0xe000ed04

0800ce10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b090      	sub	sp, #64	; 0x40
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
 800ce1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ce22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10a      	bne.n	800ce3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ce28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2c:	f383 8811 	msr	BASEPRI, r3
 800ce30:	f3bf 8f6f 	isb	sy
 800ce34:	f3bf 8f4f 	dsb	sy
 800ce38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce3a:	bf00      	nop
 800ce3c:	e7fe      	b.n	800ce3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d103      	bne.n	800ce4c <xQueueGenericSendFromISR+0x3c>
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d101      	bne.n	800ce50 <xQueueGenericSendFromISR+0x40>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	e000      	b.n	800ce52 <xQueueGenericSendFromISR+0x42>
 800ce50:	2300      	movs	r3, #0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10a      	bne.n	800ce6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ce56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5a:	f383 8811 	msr	BASEPRI, r3
 800ce5e:	f3bf 8f6f 	isb	sy
 800ce62:	f3bf 8f4f 	dsb	sy
 800ce66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce68:	bf00      	nop
 800ce6a:	e7fe      	b.n	800ce6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	2b02      	cmp	r3, #2
 800ce70:	d103      	bne.n	800ce7a <xQueueGenericSendFromISR+0x6a>
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d101      	bne.n	800ce7e <xQueueGenericSendFromISR+0x6e>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e000      	b.n	800ce80 <xQueueGenericSendFromISR+0x70>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10a      	bne.n	800ce9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ce84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	623b      	str	r3, [r7, #32]
}
 800ce96:	bf00      	nop
 800ce98:	e7fe      	b.n	800ce98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce9a:	f002 fcdd 	bl	800f858 <vPortValidateInterruptPriority>
	__asm volatile
 800ce9e:	f3ef 8211 	mrs	r2, BASEPRI
 800cea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea6:	f383 8811 	msr	BASEPRI, r3
 800ceaa:	f3bf 8f6f 	isb	sy
 800ceae:	f3bf 8f4f 	dsb	sy
 800ceb2:	61fa      	str	r2, [r7, #28]
 800ceb4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800ceb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ceb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ceba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d302      	bcc.n	800cecc <xQueueGenericSendFromISR+0xbc>
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d12f      	bne.n	800cf2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ced2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ced6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	68b9      	ldr	r1, [r7, #8]
 800cee0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cee2:	f000 fba0 	bl	800d626 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cee6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ceea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceee:	d112      	bne.n	800cf16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d016      	beq.n	800cf26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefa:	3324      	adds	r3, #36	; 0x24
 800cefc:	4618      	mov	r0, r3
 800cefe:	f001 fa23 	bl	800e348 <xTaskRemoveFromEventList>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00e      	beq.n	800cf26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00b      	beq.n	800cf26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2201      	movs	r2, #1
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	e007      	b.n	800cf26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	b25a      	sxtb	r2, r3
 800cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf26:	2301      	movs	r3, #1
 800cf28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cf2a:	e001      	b.n	800cf30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf32:	617b      	str	r3, [r7, #20]
	__asm volatile
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	f383 8811 	msr	BASEPRI, r3
}
 800cf3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3740      	adds	r7, #64	; 0x40
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b08e      	sub	sp, #56	; 0x38
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d10a      	bne.n	800cf70 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	623b      	str	r3, [r7, #32]
}
 800cf6c:	bf00      	nop
 800cf6e:	e7fe      	b.n	800cf6e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00a      	beq.n	800cf8e <xQueueGiveFromISR+0x48>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	f383 8811 	msr	BASEPRI, r3
 800cf80:	f3bf 8f6f 	isb	sy
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	61fb      	str	r3, [r7, #28]
}
 800cf8a:	bf00      	nop
 800cf8c:	e7fe      	b.n	800cf8c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d103      	bne.n	800cf9e <xQueueGiveFromISR+0x58>
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d101      	bne.n	800cfa2 <xQueueGiveFromISR+0x5c>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e000      	b.n	800cfa4 <xQueueGiveFromISR+0x5e>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d10a      	bne.n	800cfbe <xQueueGiveFromISR+0x78>
	__asm volatile
 800cfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	61bb      	str	r3, [r7, #24]
}
 800cfba:	bf00      	nop
 800cfbc:	e7fe      	b.n	800cfbc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfbe:	f002 fc4b 	bl	800f858 <vPortValidateInterruptPriority>
	__asm volatile
 800cfc2:	f3ef 8211 	mrs	r2, BASEPRI
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	617a      	str	r2, [r7, #20]
 800cfd8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cfda:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d22b      	bcs.n	800d046 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	1c5a      	adds	r2, r3, #1
 800cffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d000:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d008:	d112      	bne.n	800d030 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d016      	beq.n	800d040 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	3324      	adds	r3, #36	; 0x24
 800d016:	4618      	mov	r0, r3
 800d018:	f001 f996 	bl	800e348 <xTaskRemoveFromEventList>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00e      	beq.n	800d040 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00b      	beq.n	800d040 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	2201      	movs	r2, #1
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	e007      	b.n	800d040 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d034:	3301      	adds	r3, #1
 800d036:	b2db      	uxtb	r3, r3
 800d038:	b25a      	sxtb	r2, r3
 800d03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d040:	2301      	movs	r3, #1
 800d042:	637b      	str	r3, [r7, #52]	; 0x34
 800d044:	e001      	b.n	800d04a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d046:	2300      	movs	r3, #0
 800d048:	637b      	str	r3, [r7, #52]	; 0x34
 800d04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f383 8811 	msr	BASEPRI, r3
}
 800d054:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3738      	adds	r7, #56	; 0x38
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b08c      	sub	sp, #48	; 0x30
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d06c:	2300      	movs	r3, #0
 800d06e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d076:	2b00      	cmp	r3, #0
 800d078:	d10a      	bne.n	800d090 <xQueueReceive+0x30>
	__asm volatile
 800d07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	623b      	str	r3, [r7, #32]
}
 800d08c:	bf00      	nop
 800d08e:	e7fe      	b.n	800d08e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d103      	bne.n	800d09e <xQueueReceive+0x3e>
 800d096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d101      	bne.n	800d0a2 <xQueueReceive+0x42>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e000      	b.n	800d0a4 <xQueueReceive+0x44>
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d10a      	bne.n	800d0be <xQueueReceive+0x5e>
	__asm volatile
 800d0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ac:	f383 8811 	msr	BASEPRI, r3
 800d0b0:	f3bf 8f6f 	isb	sy
 800d0b4:	f3bf 8f4f 	dsb	sy
 800d0b8:	61fb      	str	r3, [r7, #28]
}
 800d0ba:	bf00      	nop
 800d0bc:	e7fe      	b.n	800d0bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0be:	f001 fb77 	bl	800e7b0 <xTaskGetSchedulerState>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d102      	bne.n	800d0ce <xQueueReceive+0x6e>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d101      	bne.n	800d0d2 <xQueueReceive+0x72>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e000      	b.n	800d0d4 <xQueueReceive+0x74>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10a      	bne.n	800d0ee <xQueueReceive+0x8e>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0dc:	f383 8811 	msr	BASEPRI, r3
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	61bb      	str	r3, [r7, #24]
}
 800d0ea:	bf00      	nop
 800d0ec:	e7fe      	b.n	800d0ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0ee:	f002 fad1 	bl	800f694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d01f      	beq.n	800d13e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0fe:	68b9      	ldr	r1, [r7, #8]
 800d100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d102:	f000 fafa 	bl	800d6fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d108:	1e5a      	subs	r2, r3, #1
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d110:	691b      	ldr	r3, [r3, #16]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00f      	beq.n	800d136 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d118:	3310      	adds	r3, #16
 800d11a:	4618      	mov	r0, r3
 800d11c:	f001 f914 	bl	800e348 <xTaskRemoveFromEventList>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d007      	beq.n	800d136 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d126:	4b3d      	ldr	r3, [pc, #244]	; (800d21c <xQueueReceive+0x1bc>)
 800d128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d12c:	601a      	str	r2, [r3, #0]
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d136:	f002 fadd 	bl	800f6f4 <vPortExitCritical>
				return pdPASS;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e069      	b.n	800d212 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d103      	bne.n	800d14c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d144:	f002 fad6 	bl	800f6f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d148:	2300      	movs	r3, #0
 800d14a:	e062      	b.n	800d212 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d106      	bne.n	800d160 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d152:	f107 0310 	add.w	r3, r7, #16
 800d156:	4618      	mov	r0, r3
 800d158:	f001 f9bc 	bl	800e4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d15c:	2301      	movs	r3, #1
 800d15e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d160:	f002 fac8 	bl	800f6f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d164:	f000 fe5c 	bl	800de20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d168:	f002 fa94 	bl	800f694 <vPortEnterCritical>
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d172:	b25b      	sxtb	r3, r3
 800d174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d178:	d103      	bne.n	800d182 <xQueueReceive+0x122>
 800d17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17c:	2200      	movs	r2, #0
 800d17e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d188:	b25b      	sxtb	r3, r3
 800d18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d18e:	d103      	bne.n	800d198 <xQueueReceive+0x138>
 800d190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d192:	2200      	movs	r2, #0
 800d194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d198:	f002 faac 	bl	800f6f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d19c:	1d3a      	adds	r2, r7, #4
 800d19e:	f107 0310 	add.w	r3, r7, #16
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f001 f9ab 	bl	800e500 <xTaskCheckForTimeOut>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d123      	bne.n	800d1f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1b2:	f000 fb1a 	bl	800d7ea <prvIsQueueEmpty>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d017      	beq.n	800d1ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1be:	3324      	adds	r3, #36	; 0x24
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f001 f833 	bl	800e230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1cc:	f000 fabb 	bl	800d746 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1d0:	f000 fe34 	bl	800de3c <xTaskResumeAll>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d189      	bne.n	800d0ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d1da:	4b10      	ldr	r3, [pc, #64]	; (800d21c <xQueueReceive+0x1bc>)
 800d1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1e0:	601a      	str	r2, [r3, #0]
 800d1e2:	f3bf 8f4f 	dsb	sy
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	e780      	b.n	800d0ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d1ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ee:	f000 faaa 	bl	800d746 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1f2:	f000 fe23 	bl	800de3c <xTaskResumeAll>
 800d1f6:	e77a      	b.n	800d0ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d1f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1fa:	f000 faa4 	bl	800d746 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1fe:	f000 fe1d 	bl	800de3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d204:	f000 faf1 	bl	800d7ea <prvIsQueueEmpty>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f43f af6f 	beq.w	800d0ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d210:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d212:	4618      	mov	r0, r3
 800d214:	3730      	adds	r7, #48	; 0x30
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	e000ed04 	.word	0xe000ed04

0800d220 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08e      	sub	sp, #56	; 0x38
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d22a:	2300      	movs	r3, #0
 800d22c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d232:	2300      	movs	r3, #0
 800d234:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d10a      	bne.n	800d252 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d240:	f383 8811 	msr	BASEPRI, r3
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	f3bf 8f4f 	dsb	sy
 800d24c:	623b      	str	r3, [r7, #32]
}
 800d24e:	bf00      	nop
 800d250:	e7fe      	b.n	800d250 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00a      	beq.n	800d270 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	61fb      	str	r3, [r7, #28]
}
 800d26c:	bf00      	nop
 800d26e:	e7fe      	b.n	800d26e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d270:	f001 fa9e 	bl	800e7b0 <xTaskGetSchedulerState>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d102      	bne.n	800d280 <xQueueSemaphoreTake+0x60>
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d101      	bne.n	800d284 <xQueueSemaphoreTake+0x64>
 800d280:	2301      	movs	r3, #1
 800d282:	e000      	b.n	800d286 <xQueueSemaphoreTake+0x66>
 800d284:	2300      	movs	r3, #0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10a      	bne.n	800d2a0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	61bb      	str	r3, [r7, #24]
}
 800d29c:	bf00      	nop
 800d29e:	e7fe      	b.n	800d29e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2a0:	f002 f9f8 	bl	800f694 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d024      	beq.n	800d2fa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b2:	1e5a      	subs	r2, r3, #1
 800d2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d104      	bne.n	800d2ca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d2c0:	f001 fc04 	bl	800eacc <pvTaskIncrementMutexHeldCount>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00f      	beq.n	800d2f2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d4:	3310      	adds	r3, #16
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f001 f836 	bl	800e348 <xTaskRemoveFromEventList>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d007      	beq.n	800d2f2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2e2:	4b54      	ldr	r3, [pc, #336]	; (800d434 <xQueueSemaphoreTake+0x214>)
 800d2e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e8:	601a      	str	r2, [r3, #0]
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2f2:	f002 f9ff 	bl	800f6f4 <vPortExitCritical>
				return pdPASS;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e097      	b.n	800d42a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d111      	bne.n	800d324 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00a      	beq.n	800d31c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	617b      	str	r3, [r7, #20]
}
 800d318:	bf00      	nop
 800d31a:	e7fe      	b.n	800d31a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d31c:	f002 f9ea 	bl	800f6f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d320:	2300      	movs	r3, #0
 800d322:	e082      	b.n	800d42a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d326:	2b00      	cmp	r3, #0
 800d328:	d106      	bne.n	800d338 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d32a:	f107 030c 	add.w	r3, r7, #12
 800d32e:	4618      	mov	r0, r3
 800d330:	f001 f8d0 	bl	800e4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d334:	2301      	movs	r3, #1
 800d336:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d338:	f002 f9dc 	bl	800f6f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d33c:	f000 fd70 	bl	800de20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d340:	f002 f9a8 	bl	800f694 <vPortEnterCritical>
 800d344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d34a:	b25b      	sxtb	r3, r3
 800d34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d350:	d103      	bne.n	800d35a <xQueueSemaphoreTake+0x13a>
 800d352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d354:	2200      	movs	r2, #0
 800d356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d360:	b25b      	sxtb	r3, r3
 800d362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d366:	d103      	bne.n	800d370 <xQueueSemaphoreTake+0x150>
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d370:	f002 f9c0 	bl	800f6f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d374:	463a      	mov	r2, r7
 800d376:	f107 030c 	add.w	r3, r7, #12
 800d37a:	4611      	mov	r1, r2
 800d37c:	4618      	mov	r0, r3
 800d37e:	f001 f8bf 	bl	800e500 <xTaskCheckForTimeOut>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d132      	bne.n	800d3ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d388:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d38a:	f000 fa2e 	bl	800d7ea <prvIsQueueEmpty>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d026      	beq.n	800d3e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d109      	bne.n	800d3b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d39c:	f002 f97a 	bl	800f694 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f001 fa21 	bl	800e7ec <xTaskPriorityInherit>
 800d3aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d3ac:	f002 f9a2 	bl	800f6f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	3324      	adds	r3, #36	; 0x24
 800d3b4:	683a      	ldr	r2, [r7, #0]
 800d3b6:	4611      	mov	r1, r2
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f000 ff39 	bl	800e230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3c0:	f000 f9c1 	bl	800d746 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3c4:	f000 fd3a 	bl	800de3c <xTaskResumeAll>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	f47f af68 	bne.w	800d2a0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d3d0:	4b18      	ldr	r3, [pc, #96]	; (800d434 <xQueueSemaphoreTake+0x214>)
 800d3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	e75e      	b.n	800d2a0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d3e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3e4:	f000 f9af 	bl	800d746 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3e8:	f000 fd28 	bl	800de3c <xTaskResumeAll>
 800d3ec:	e758      	b.n	800d2a0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d3ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3f0:	f000 f9a9 	bl	800d746 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3f4:	f000 fd22 	bl	800de3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3fa:	f000 f9f6 	bl	800d7ea <prvIsQueueEmpty>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	f43f af4d 	beq.w	800d2a0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00d      	beq.n	800d428 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d40c:	f002 f942 	bl	800f694 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d412:	f000 f8f0 	bl	800d5f6 <prvGetDisinheritPriorityAfterTimeout>
 800d416:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41a:	689b      	ldr	r3, [r3, #8]
 800d41c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d41e:	4618      	mov	r0, r3
 800d420:	f001 faba 	bl	800e998 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d424:	f002 f966 	bl	800f6f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d428:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3738      	adds	r7, #56	; 0x38
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	e000ed04 	.word	0xe000ed04

0800d438 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08e      	sub	sp, #56	; 0x38
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d10a      	bne.n	800d464 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d452:	f383 8811 	msr	BASEPRI, r3
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	f3bf 8f4f 	dsb	sy
 800d45e:	623b      	str	r3, [r7, #32]
}
 800d460:	bf00      	nop
 800d462:	e7fe      	b.n	800d462 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d103      	bne.n	800d472 <xQueueReceiveFromISR+0x3a>
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <xQueueReceiveFromISR+0x3e>
 800d472:	2301      	movs	r3, #1
 800d474:	e000      	b.n	800d478 <xQueueReceiveFromISR+0x40>
 800d476:	2300      	movs	r3, #0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10a      	bne.n	800d492 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	61fb      	str	r3, [r7, #28]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d492:	f002 f9e1 	bl	800f858 <vPortValidateInterruptPriority>
	__asm volatile
 800d496:	f3ef 8211 	mrs	r2, BASEPRI
 800d49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	61ba      	str	r2, [r7, #24]
 800d4ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d4ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d02f      	beq.n	800d51e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4c8:	68b9      	ldr	r1, [r7, #8]
 800d4ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4cc:	f000 f915 	bl	800d6fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d2:	1e5a      	subs	r2, r3, #1
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d4d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e0:	d112      	bne.n	800d508 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e4:	691b      	ldr	r3, [r3, #16]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d016      	beq.n	800d518 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ec:	3310      	adds	r3, #16
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f000 ff2a 	bl	800e348 <xTaskRemoveFromEventList>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00e      	beq.n	800d518 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00b      	beq.n	800d518 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	601a      	str	r2, [r3, #0]
 800d506:	e007      	b.n	800d518 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d50c:	3301      	adds	r3, #1
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	b25a      	sxtb	r2, r3
 800d512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d518:	2301      	movs	r3, #1
 800d51a:	637b      	str	r3, [r7, #52]	; 0x34
 800d51c:	e001      	b.n	800d522 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d51e:	2300      	movs	r3, #0
 800d520:	637b      	str	r3, [r7, #52]	; 0x34
 800d522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d524:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	f383 8811 	msr	BASEPRI, r3
}
 800d52c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d530:	4618      	mov	r0, r3
 800d532:	3738      	adds	r7, #56	; 0x38
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d10a      	bne.n	800d55c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	60bb      	str	r3, [r7, #8]
}
 800d558:	bf00      	nop
 800d55a:	e7fe      	b.n	800d55a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d55c:	f002 f89a 	bl	800f694 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d564:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d566:	f002 f8c5 	bl	800f6f4 <vPortExitCritical>

	return uxReturn;
 800d56a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d56c:	4618      	mov	r0, r3
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d574:	b480      	push	{r7}
 800d576:	b087      	sub	sp, #28
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d10a      	bne.n	800d59c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800d586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58a:	f383 8811 	msr	BASEPRI, r3
 800d58e:	f3bf 8f6f 	isb	sy
 800d592:	f3bf 8f4f 	dsb	sy
 800d596:	60fb      	str	r3, [r7, #12]
}
 800d598:	bf00      	nop
 800d59a:	e7fe      	b.n	800d59a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d5a2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	371c      	adds	r7, #28
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d10a      	bne.n	800d5d8 <vQueueDelete+0x28>
	__asm volatile
 800d5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	60bb      	str	r3, [r7, #8]
}
 800d5d4:	bf00      	nop
 800d5d6:	e7fe      	b.n	800d5d6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	f000 f95f 	bl	800d89c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d102      	bne.n	800d5ee <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f002 fa41 	bl	800fa70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d5ee:	bf00      	nop
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d5f6:	b480      	push	{r7}
 800d5f8:	b085      	sub	sp, #20
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d602:	2b00      	cmp	r3, #0
 800d604:	d006      	beq.n	800d614 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d610:	60fb      	str	r3, [r7, #12]
 800d612:	e001      	b.n	800d618 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d614:	2300      	movs	r3, #0
 800d616:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d618:	68fb      	ldr	r3, [r7, #12]
	}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3714      	adds	r7, #20
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b086      	sub	sp, #24
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	60f8      	str	r0, [r7, #12]
 800d62e:	60b9      	str	r1, [r7, #8]
 800d630:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d632:	2300      	movs	r3, #0
 800d634:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d63a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d640:	2b00      	cmp	r3, #0
 800d642:	d10d      	bne.n	800d660 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d14d      	bne.n	800d6e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	4618      	mov	r0, r3
 800d652:	f001 f933 	bl	800e8bc <xTaskPriorityDisinherit>
 800d656:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2200      	movs	r2, #0
 800d65c:	609a      	str	r2, [r3, #8]
 800d65e:	e043      	b.n	800d6e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d119      	bne.n	800d69a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6858      	ldr	r0, [r3, #4]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66e:	461a      	mov	r2, r3
 800d670:	68b9      	ldr	r1, [r7, #8]
 800d672:	f013 fac1 	bl	8020bf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	685a      	ldr	r2, [r3, #4]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67e:	441a      	add	r2, r3
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	685a      	ldr	r2, [r3, #4]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d32b      	bcc.n	800d6e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	605a      	str	r2, [r3, #4]
 800d698:	e026      	b.n	800d6e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	68d8      	ldr	r0, [r3, #12]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	68b9      	ldr	r1, [r7, #8]
 800d6a6:	f013 faa7 	bl	8020bf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	68da      	ldr	r2, [r3, #12]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b2:	425b      	negs	r3, r3
 800d6b4:	441a      	add	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	68da      	ldr	r2, [r3, #12]
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d207      	bcs.n	800d6d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	689a      	ldr	r2, [r3, #8]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ce:	425b      	negs	r3, r3
 800d6d0:	441a      	add	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d105      	bne.n	800d6e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d002      	beq.n	800d6e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d6f0:	697b      	ldr	r3, [r7, #20]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3718      	adds	r7, #24
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b082      	sub	sp, #8
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
 800d702:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d018      	beq.n	800d73e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68da      	ldr	r2, [r3, #12]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d714:	441a      	add	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	68da      	ldr	r2, [r3, #12]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	689b      	ldr	r3, [r3, #8]
 800d722:	429a      	cmp	r2, r3
 800d724:	d303      	bcc.n	800d72e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	68d9      	ldr	r1, [r3, #12]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d736:	461a      	mov	r2, r3
 800d738:	6838      	ldr	r0, [r7, #0]
 800d73a:	f013 fa5d 	bl	8020bf8 <memcpy>
	}
}
 800d73e:	bf00      	nop
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b084      	sub	sp, #16
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d74e:	f001 ffa1 	bl	800f694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d758:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d75a:	e011      	b.n	800d780 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d760:	2b00      	cmp	r3, #0
 800d762:	d012      	beq.n	800d78a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	3324      	adds	r3, #36	; 0x24
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 fded 	bl	800e348 <xTaskRemoveFromEventList>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d001      	beq.n	800d778 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d774:	f000 ff26 	bl	800e5c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d778:	7bfb      	ldrb	r3, [r7, #15]
 800d77a:	3b01      	subs	r3, #1
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d784:	2b00      	cmp	r3, #0
 800d786:	dce9      	bgt.n	800d75c <prvUnlockQueue+0x16>
 800d788:	e000      	b.n	800d78c <prvUnlockQueue+0x46>
					break;
 800d78a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	22ff      	movs	r2, #255	; 0xff
 800d790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d794:	f001 ffae 	bl	800f6f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d798:	f001 ff7c 	bl	800f694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7a4:	e011      	b.n	800d7ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	691b      	ldr	r3, [r3, #16]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d012      	beq.n	800d7d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	3310      	adds	r3, #16
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f000 fdc8 	bl	800e348 <xTaskRemoveFromEventList>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d001      	beq.n	800d7c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7be:	f000 ff01 	bl	800e5c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7c2:	7bbb      	ldrb	r3, [r7, #14]
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	dce9      	bgt.n	800d7a6 <prvUnlockQueue+0x60>
 800d7d2:	e000      	b.n	800d7d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	22ff      	movs	r2, #255	; 0xff
 800d7da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d7de:	f001 ff89 	bl	800f6f4 <vPortExitCritical>
}
 800d7e2:	bf00      	nop
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b084      	sub	sp, #16
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7f2:	f001 ff4f 	bl	800f694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d102      	bne.n	800d804 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d7fe:	2301      	movs	r3, #1
 800d800:	60fb      	str	r3, [r7, #12]
 800d802:	e001      	b.n	800d808 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d804:	2300      	movs	r3, #0
 800d806:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d808:	f001 ff74 	bl	800f6f4 <vPortExitCritical>

	return xReturn;
 800d80c:	68fb      	ldr	r3, [r7, #12]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b084      	sub	sp, #16
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d81e:	f001 ff39 	bl	800f694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d102      	bne.n	800d834 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d82e:	2301      	movs	r3, #1
 800d830:	60fb      	str	r3, [r7, #12]
 800d832:	e001      	b.n	800d838 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d834:	2300      	movs	r3, #0
 800d836:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d838:	f001 ff5c 	bl	800f6f4 <vPortExitCritical>

	return xReturn;
 800d83c:	68fb      	ldr	r3, [r7, #12]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
	...

0800d848 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d852:	2300      	movs	r3, #0
 800d854:	60fb      	str	r3, [r7, #12]
 800d856:	e014      	b.n	800d882 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d858:	4a0f      	ldr	r2, [pc, #60]	; (800d898 <vQueueAddToRegistry+0x50>)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10b      	bne.n	800d87c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d864:	490c      	ldr	r1, [pc, #48]	; (800d898 <vQueueAddToRegistry+0x50>)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d86e:	4a0a      	ldr	r2, [pc, #40]	; (800d898 <vQueueAddToRegistry+0x50>)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	00db      	lsls	r3, r3, #3
 800d874:	4413      	add	r3, r2
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d87a:	e006      	b.n	800d88a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	3301      	adds	r3, #1
 800d880:	60fb      	str	r3, [r7, #12]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2b07      	cmp	r3, #7
 800d886:	d9e7      	bls.n	800d858 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d888:	bf00      	nop
 800d88a:	bf00      	nop
 800d88c:	3714      	adds	r7, #20
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	2001358c 	.word	0x2001358c

0800d89c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	60fb      	str	r3, [r7, #12]
 800d8a8:	e016      	b.n	800d8d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d8aa:	4a10      	ldr	r2, [pc, #64]	; (800d8ec <vQueueUnregisterQueue+0x50>)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	00db      	lsls	r3, r3, #3
 800d8b0:	4413      	add	r3, r2
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d10b      	bne.n	800d8d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d8ba:	4a0c      	ldr	r2, [pc, #48]	; (800d8ec <vQueueUnregisterQueue+0x50>)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2100      	movs	r1, #0
 800d8c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d8c4:	4a09      	ldr	r2, [pc, #36]	; (800d8ec <vQueueUnregisterQueue+0x50>)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	00db      	lsls	r3, r3, #3
 800d8ca:	4413      	add	r3, r2
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	605a      	str	r2, [r3, #4]
				break;
 800d8d0:	e006      	b.n	800d8e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	60fb      	str	r3, [r7, #12]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2b07      	cmp	r3, #7
 800d8dc:	d9e5      	bls.n	800d8aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d8de:	bf00      	nop
 800d8e0:	bf00      	nop
 800d8e2:	3714      	adds	r7, #20
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr
 800d8ec:	2001358c 	.word	0x2001358c

0800d8f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d900:	f001 fec8 	bl	800f694 <vPortEnterCritical>
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d90a:	b25b      	sxtb	r3, r3
 800d90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d910:	d103      	bne.n	800d91a <vQueueWaitForMessageRestricted+0x2a>
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	2200      	movs	r2, #0
 800d916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d920:	b25b      	sxtb	r3, r3
 800d922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d926:	d103      	bne.n	800d930 <vQueueWaitForMessageRestricted+0x40>
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d930:	f001 fee0 	bl	800f6f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d106      	bne.n	800d94a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	3324      	adds	r3, #36	; 0x24
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	68b9      	ldr	r1, [r7, #8]
 800d944:	4618      	mov	r0, r3
 800d946:	f000 fcd3 	bl	800e2f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d94a:	6978      	ldr	r0, [r7, #20]
 800d94c:	f7ff fefb 	bl	800d746 <prvUnlockQueue>
	}
 800d950:	bf00      	nop
 800d952:	3718      	adds	r7, #24
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08e      	sub	sp, #56	; 0x38
 800d95c:	af04      	add	r7, sp, #16
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
 800d964:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d10a      	bne.n	800d982 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	623b      	str	r3, [r7, #32]
}
 800d97e:	bf00      	nop
 800d980:	e7fe      	b.n	800d980 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10a      	bne.n	800d99e <xTaskCreateStatic+0x46>
	__asm volatile
 800d988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98c:	f383 8811 	msr	BASEPRI, r3
 800d990:	f3bf 8f6f 	isb	sy
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	61fb      	str	r3, [r7, #28]
}
 800d99a:	bf00      	nop
 800d99c:	e7fe      	b.n	800d99c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d99e:	23c4      	movs	r3, #196	; 0xc4
 800d9a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	2bc4      	cmp	r3, #196	; 0xc4
 800d9a6:	d00a      	beq.n	800d9be <xTaskCreateStatic+0x66>
	__asm volatile
 800d9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	61bb      	str	r3, [r7, #24]
}
 800d9ba:	bf00      	nop
 800d9bc:	e7fe      	b.n	800d9bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d9be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d01e      	beq.n	800da04 <xTaskCreateStatic+0xac>
 800d9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d01b      	beq.n	800da04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d8:	2202      	movs	r2, #2
 800d9da:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d9de:	2300      	movs	r3, #0
 800d9e0:	9303      	str	r3, [sp, #12]
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e4:	9302      	str	r3, [sp, #8]
 800d9e6:	f107 0314 	add.w	r3, r7, #20
 800d9ea:	9301      	str	r3, [sp, #4]
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	68b9      	ldr	r1, [r7, #8]
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	f000 f850 	bl	800da9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9fe:	f000 f8f9 	bl	800dbf4 <prvAddNewTaskToReadyList>
 800da02:	e001      	b.n	800da08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800da04:	2300      	movs	r3, #0
 800da06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da08:	697b      	ldr	r3, [r7, #20]
	}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3728      	adds	r7, #40	; 0x28
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da12:	b580      	push	{r7, lr}
 800da14:	b08c      	sub	sp, #48	; 0x30
 800da16:	af04      	add	r7, sp, #16
 800da18:	60f8      	str	r0, [r7, #12]
 800da1a:	60b9      	str	r1, [r7, #8]
 800da1c:	603b      	str	r3, [r7, #0]
 800da1e:	4613      	mov	r3, r2
 800da20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da22:	88fb      	ldrh	r3, [r7, #6]
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	4618      	mov	r0, r3
 800da28:	f001 ff56 	bl	800f8d8 <pvPortMalloc>
 800da2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00e      	beq.n	800da52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da34:	20c4      	movs	r0, #196	; 0xc4
 800da36:	f001 ff4f 	bl	800f8d8 <pvPortMalloc>
 800da3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d003      	beq.n	800da4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	697a      	ldr	r2, [r7, #20]
 800da46:	631a      	str	r2, [r3, #48]	; 0x30
 800da48:	e005      	b.n	800da56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da4a:	6978      	ldr	r0, [r7, #20]
 800da4c:	f002 f810 	bl	800fa70 <vPortFree>
 800da50:	e001      	b.n	800da56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da52:	2300      	movs	r3, #0
 800da54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d017      	beq.n	800da8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	2200      	movs	r2, #0
 800da60:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da64:	88fa      	ldrh	r2, [r7, #6]
 800da66:	2300      	movs	r3, #0
 800da68:	9303      	str	r3, [sp, #12]
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	9302      	str	r3, [sp, #8]
 800da6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	68b9      	ldr	r1, [r7, #8]
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f000 f80e 	bl	800da9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da80:	69f8      	ldr	r0, [r7, #28]
 800da82:	f000 f8b7 	bl	800dbf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da86:	2301      	movs	r3, #1
 800da88:	61bb      	str	r3, [r7, #24]
 800da8a:	e002      	b.n	800da92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da8c:	f04f 33ff 	mov.w	r3, #4294967295
 800da90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da92:	69bb      	ldr	r3, [r7, #24]
	}
 800da94:	4618      	mov	r0, r3
 800da96:	3720      	adds	r7, #32
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b088      	sub	sp, #32
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
 800daa8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800daaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	461a      	mov	r2, r3
 800dab4:	21a5      	movs	r1, #165	; 0xa5
 800dab6:	f013 f8c7 	bl	8020c48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800daba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dac4:	3b01      	subs	r3, #1
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	f023 0307 	bic.w	r3, r3, #7
 800dad2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	f003 0307 	and.w	r3, r3, #7
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d00a      	beq.n	800daf4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	617b      	str	r3, [r7, #20]
}
 800daf0:	bf00      	nop
 800daf2:	e7fe      	b.n	800daf2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800daf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf6:	69ba      	ldr	r2, [r7, #24]
 800daf8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d01f      	beq.n	800db40 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db00:	2300      	movs	r3, #0
 800db02:	61fb      	str	r3, [r7, #28]
 800db04:	e012      	b.n	800db2c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db06:	68ba      	ldr	r2, [r7, #8]
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	4413      	add	r3, r2
 800db0c:	7819      	ldrb	r1, [r3, #0]
 800db0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	4413      	add	r3, r2
 800db14:	3334      	adds	r3, #52	; 0x34
 800db16:	460a      	mov	r2, r1
 800db18:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	4413      	add	r3, r2
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d006      	beq.n	800db34 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	3301      	adds	r3, #1
 800db2a:	61fb      	str	r3, [r7, #28]
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	2b0f      	cmp	r3, #15
 800db30:	d9e9      	bls.n	800db06 <prvInitialiseNewTask+0x6a>
 800db32:	e000      	b.n	800db36 <prvInitialiseNewTask+0x9a>
			{
				break;
 800db34:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db38:	2200      	movs	r2, #0
 800db3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db3e:	e003      	b.n	800db48 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db42:	2200      	movs	r2, #0
 800db44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4a:	2b37      	cmp	r3, #55	; 0x37
 800db4c:	d901      	bls.n	800db52 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db4e:	2337      	movs	r3, #55	; 0x37
 800db50:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db5c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	2200      	movs	r2, #0
 800db62:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db66:	3304      	adds	r3, #4
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fe fd61 	bl	800c630 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	3318      	adds	r3, #24
 800db72:	4618      	mov	r0, r3
 800db74:	f7fe fd5c 	bl	800c630 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db8c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	2200      	movs	r2, #0
 800db92:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db96:	2200      	movs	r2, #0
 800db98:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba6:	335c      	adds	r3, #92	; 0x5c
 800dba8:	2260      	movs	r2, #96	; 0x60
 800dbaa:	2100      	movs	r1, #0
 800dbac:	4618      	mov	r0, r3
 800dbae:	f013 f84b 	bl	8020c48 <memset>
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	4a0c      	ldr	r2, [pc, #48]	; (800dbe8 <prvInitialiseNewTask+0x14c>)
 800dbb6:	661a      	str	r2, [r3, #96]	; 0x60
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	4a0c      	ldr	r2, [pc, #48]	; (800dbec <prvInitialiseNewTask+0x150>)
 800dbbc:	665a      	str	r2, [r3, #100]	; 0x64
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc0:	4a0b      	ldr	r2, [pc, #44]	; (800dbf0 <prvInitialiseNewTask+0x154>)
 800dbc2:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dbc4:	683a      	ldr	r2, [r7, #0]
 800dbc6:	68f9      	ldr	r1, [r7, #12]
 800dbc8:	69b8      	ldr	r0, [r7, #24]
 800dbca:	f001 fc39 	bl	800f440 <pxPortInitialiseStack>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d002      	beq.n	800dbe0 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbe0:	bf00      	nop
 800dbe2:	3720      	adds	r7, #32
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	080267bc 	.word	0x080267bc
 800dbec:	080267dc 	.word	0x080267dc
 800dbf0:	0802679c 	.word	0x0802679c

0800dbf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dbfc:	f001 fd4a 	bl	800f694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc00:	4b2d      	ldr	r3, [pc, #180]	; (800dcb8 <prvAddNewTaskToReadyList+0xc4>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3301      	adds	r3, #1
 800dc06:	4a2c      	ldr	r2, [pc, #176]	; (800dcb8 <prvAddNewTaskToReadyList+0xc4>)
 800dc08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc0a:	4b2c      	ldr	r3, [pc, #176]	; (800dcbc <prvAddNewTaskToReadyList+0xc8>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d109      	bne.n	800dc26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc12:	4a2a      	ldr	r2, [pc, #168]	; (800dcbc <prvAddNewTaskToReadyList+0xc8>)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc18:	4b27      	ldr	r3, [pc, #156]	; (800dcb8 <prvAddNewTaskToReadyList+0xc4>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d110      	bne.n	800dc42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc20:	f000 fcf4 	bl	800e60c <prvInitialiseTaskLists>
 800dc24:	e00d      	b.n	800dc42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc26:	4b26      	ldr	r3, [pc, #152]	; (800dcc0 <prvAddNewTaskToReadyList+0xcc>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d109      	bne.n	800dc42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc2e:	4b23      	ldr	r3, [pc, #140]	; (800dcbc <prvAddNewTaskToReadyList+0xc8>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d802      	bhi.n	800dc42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc3c:	4a1f      	ldr	r2, [pc, #124]	; (800dcbc <prvAddNewTaskToReadyList+0xc8>)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc42:	4b20      	ldr	r3, [pc, #128]	; (800dcc4 <prvAddNewTaskToReadyList+0xd0>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3301      	adds	r3, #1
 800dc48:	4a1e      	ldr	r2, [pc, #120]	; (800dcc4 <prvAddNewTaskToReadyList+0xd0>)
 800dc4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc4c:	4b1d      	ldr	r3, [pc, #116]	; (800dcc4 <prvAddNewTaskToReadyList+0xd0>)
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc58:	4b1b      	ldr	r3, [pc, #108]	; (800dcc8 <prvAddNewTaskToReadyList+0xd4>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d903      	bls.n	800dc68 <prvAddNewTaskToReadyList+0x74>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc64:	4a18      	ldr	r2, [pc, #96]	; (800dcc8 <prvAddNewTaskToReadyList+0xd4>)
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	4413      	add	r3, r2
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	4a15      	ldr	r2, [pc, #84]	; (800dccc <prvAddNewTaskToReadyList+0xd8>)
 800dc76:	441a      	add	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	4610      	mov	r0, r2
 800dc80:	f7fe fce3 	bl	800c64a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc84:	f001 fd36 	bl	800f6f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc88:	4b0d      	ldr	r3, [pc, #52]	; (800dcc0 <prvAddNewTaskToReadyList+0xcc>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00e      	beq.n	800dcae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc90:	4b0a      	ldr	r3, [pc, #40]	; (800dcbc <prvAddNewTaskToReadyList+0xc8>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d207      	bcs.n	800dcae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc9e:	4b0c      	ldr	r3, [pc, #48]	; (800dcd0 <prvAddNewTaskToReadyList+0xdc>)
 800dca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dca4:	601a      	str	r2, [r3, #0]
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcae:	bf00      	nop
 800dcb0:	3708      	adds	r7, #8
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	20001480 	.word	0x20001480
 800dcbc:	20000fac 	.word	0x20000fac
 800dcc0:	2000148c 	.word	0x2000148c
 800dcc4:	2000149c 	.word	0x2000149c
 800dcc8:	20001488 	.word	0x20001488
 800dccc:	20000fb0 	.word	0x20000fb0
 800dcd0:	e000ed04 	.word	0xe000ed04

0800dcd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d017      	beq.n	800dd16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dce6:	4b13      	ldr	r3, [pc, #76]	; (800dd34 <vTaskDelay+0x60>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00a      	beq.n	800dd04 <vTaskDelay+0x30>
	__asm volatile
 800dcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf2:	f383 8811 	msr	BASEPRI, r3
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	f3bf 8f4f 	dsb	sy
 800dcfe:	60bb      	str	r3, [r7, #8]
}
 800dd00:	bf00      	nop
 800dd02:	e7fe      	b.n	800dd02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dd04:	f000 f88c 	bl	800de20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd08:	2100      	movs	r1, #0
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fef2 	bl	800eaf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd10:	f000 f894 	bl	800de3c <xTaskResumeAll>
 800dd14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d107      	bne.n	800dd2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dd1c:	4b06      	ldr	r3, [pc, #24]	; (800dd38 <vTaskDelay+0x64>)
 800dd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	f3bf 8f4f 	dsb	sy
 800dd28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd2c:	bf00      	nop
 800dd2e:	3710      	adds	r7, #16
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	200014a8 	.word	0x200014a8
 800dd38:	e000ed04 	.word	0xe000ed04

0800dd3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b08a      	sub	sp, #40	; 0x28
 800dd40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd42:	2300      	movs	r3, #0
 800dd44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd46:	2300      	movs	r3, #0
 800dd48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd4a:	463a      	mov	r2, r7
 800dd4c:	1d39      	adds	r1, r7, #4
 800dd4e:	f107 0308 	add.w	r3, r7, #8
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe f978 	bl	800c048 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd58:	6839      	ldr	r1, [r7, #0]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	68ba      	ldr	r2, [r7, #8]
 800dd5e:	9202      	str	r2, [sp, #8]
 800dd60:	9301      	str	r3, [sp, #4]
 800dd62:	2300      	movs	r3, #0
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	2300      	movs	r3, #0
 800dd68:	460a      	mov	r2, r1
 800dd6a:	4925      	ldr	r1, [pc, #148]	; (800de00 <vTaskStartScheduler+0xc4>)
 800dd6c:	4825      	ldr	r0, [pc, #148]	; (800de04 <vTaskStartScheduler+0xc8>)
 800dd6e:	f7ff fdf3 	bl	800d958 <xTaskCreateStatic>
 800dd72:	4603      	mov	r3, r0
 800dd74:	4a24      	ldr	r2, [pc, #144]	; (800de08 <vTaskStartScheduler+0xcc>)
 800dd76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd78:	4b23      	ldr	r3, [pc, #140]	; (800de08 <vTaskStartScheduler+0xcc>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d002      	beq.n	800dd86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd80:	2301      	movs	r3, #1
 800dd82:	617b      	str	r3, [r7, #20]
 800dd84:	e001      	b.n	800dd8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd86:	2300      	movs	r3, #0
 800dd88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d102      	bne.n	800dd96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd90:	f000 ff04 	bl	800eb9c <xTimerCreateTimerTask>
 800dd94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d11d      	bne.n	800ddd8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800dd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda0:	f383 8811 	msr	BASEPRI, r3
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	613b      	str	r3, [r7, #16]
}
 800ddae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ddb0:	4b16      	ldr	r3, [pc, #88]	; (800de0c <vTaskStartScheduler+0xd0>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	335c      	adds	r3, #92	; 0x5c
 800ddb6:	4a16      	ldr	r2, [pc, #88]	; (800de10 <vTaskStartScheduler+0xd4>)
 800ddb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ddba:	4b16      	ldr	r3, [pc, #88]	; (800de14 <vTaskStartScheduler+0xd8>)
 800ddbc:	f04f 32ff 	mov.w	r2, #4294967295
 800ddc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ddc2:	4b15      	ldr	r3, [pc, #84]	; (800de18 <vTaskStartScheduler+0xdc>)
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ddc8:	4b14      	ldr	r3, [pc, #80]	; (800de1c <vTaskStartScheduler+0xe0>)
 800ddca:	2200      	movs	r2, #0
 800ddcc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ddce:	f7f2 ffbf 	bl	8000d50 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ddd2:	f001 fbbd 	bl	800f550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddd6:	e00e      	b.n	800ddf6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddde:	d10a      	bne.n	800ddf6 <vTaskStartScheduler+0xba>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	60fb      	str	r3, [r7, #12]
}
 800ddf2:	bf00      	nop
 800ddf4:	e7fe      	b.n	800ddf4 <vTaskStartScheduler+0xb8>
}
 800ddf6:	bf00      	nop
 800ddf8:	3718      	adds	r7, #24
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	080228cc 	.word	0x080228cc
 800de04:	0800e5dd 	.word	0x0800e5dd
 800de08:	200014a4 	.word	0x200014a4
 800de0c:	20000fac 	.word	0x20000fac
 800de10:	20000504 	.word	0x20000504
 800de14:	200014a0 	.word	0x200014a0
 800de18:	2000148c 	.word	0x2000148c
 800de1c:	20001484 	.word	0x20001484

0800de20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de20:	b480      	push	{r7}
 800de22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de24:	4b04      	ldr	r3, [pc, #16]	; (800de38 <vTaskSuspendAll+0x18>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	3301      	adds	r3, #1
 800de2a:	4a03      	ldr	r2, [pc, #12]	; (800de38 <vTaskSuspendAll+0x18>)
 800de2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de2e:	bf00      	nop
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr
 800de38:	200014a8 	.word	0x200014a8

0800de3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de42:	2300      	movs	r3, #0
 800de44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de46:	2300      	movs	r3, #0
 800de48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de4a:	4b42      	ldr	r3, [pc, #264]	; (800df54 <xTaskResumeAll+0x118>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10a      	bne.n	800de68 <xTaskResumeAll+0x2c>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	603b      	str	r3, [r7, #0]
}
 800de64:	bf00      	nop
 800de66:	e7fe      	b.n	800de66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de68:	f001 fc14 	bl	800f694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de6c:	4b39      	ldr	r3, [pc, #228]	; (800df54 <xTaskResumeAll+0x118>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	3b01      	subs	r3, #1
 800de72:	4a38      	ldr	r2, [pc, #224]	; (800df54 <xTaskResumeAll+0x118>)
 800de74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de76:	4b37      	ldr	r3, [pc, #220]	; (800df54 <xTaskResumeAll+0x118>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d162      	bne.n	800df44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de7e:	4b36      	ldr	r3, [pc, #216]	; (800df58 <xTaskResumeAll+0x11c>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d05e      	beq.n	800df44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de86:	e02f      	b.n	800dee8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de88:	4b34      	ldr	r3, [pc, #208]	; (800df5c <xTaskResumeAll+0x120>)
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3318      	adds	r3, #24
 800de94:	4618      	mov	r0, r3
 800de96:	f7fe fc35 	bl	800c704 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3304      	adds	r3, #4
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fe fc30 	bl	800c704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dea8:	4b2d      	ldr	r3, [pc, #180]	; (800df60 <xTaskResumeAll+0x124>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	429a      	cmp	r2, r3
 800deae:	d903      	bls.n	800deb8 <xTaskResumeAll+0x7c>
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb4:	4a2a      	ldr	r2, [pc, #168]	; (800df60 <xTaskResumeAll+0x124>)
 800deb6:	6013      	str	r3, [r2, #0]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800debc:	4613      	mov	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	4413      	add	r3, r2
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	4a27      	ldr	r2, [pc, #156]	; (800df64 <xTaskResumeAll+0x128>)
 800dec6:	441a      	add	r2, r3
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	3304      	adds	r3, #4
 800decc:	4619      	mov	r1, r3
 800dece:	4610      	mov	r0, r2
 800ded0:	f7fe fbbb 	bl	800c64a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded8:	4b23      	ldr	r3, [pc, #140]	; (800df68 <xTaskResumeAll+0x12c>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dede:	429a      	cmp	r2, r3
 800dee0:	d302      	bcc.n	800dee8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dee2:	4b22      	ldr	r3, [pc, #136]	; (800df6c <xTaskResumeAll+0x130>)
 800dee4:	2201      	movs	r2, #1
 800dee6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dee8:	4b1c      	ldr	r3, [pc, #112]	; (800df5c <xTaskResumeAll+0x120>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d1cb      	bne.n	800de88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d001      	beq.n	800defa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800def6:	f000 fc2b 	bl	800e750 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800defa:	4b1d      	ldr	r3, [pc, #116]	; (800df70 <xTaskResumeAll+0x134>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d010      	beq.n	800df28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df06:	f000 f859 	bl	800dfbc <xTaskIncrementTick>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800df10:	4b16      	ldr	r3, [pc, #88]	; (800df6c <xTaskResumeAll+0x130>)
 800df12:	2201      	movs	r2, #1
 800df14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3b01      	subs	r3, #1
 800df1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1f1      	bne.n	800df06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800df22:	4b13      	ldr	r3, [pc, #76]	; (800df70 <xTaskResumeAll+0x134>)
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df28:	4b10      	ldr	r3, [pc, #64]	; (800df6c <xTaskResumeAll+0x130>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d009      	beq.n	800df44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df30:	2301      	movs	r3, #1
 800df32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df34:	4b0f      	ldr	r3, [pc, #60]	; (800df74 <xTaskResumeAll+0x138>)
 800df36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df3a:	601a      	str	r2, [r3, #0]
 800df3c:	f3bf 8f4f 	dsb	sy
 800df40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df44:	f001 fbd6 	bl	800f6f4 <vPortExitCritical>

	return xAlreadyYielded;
 800df48:	68bb      	ldr	r3, [r7, #8]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3710      	adds	r7, #16
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	200014a8 	.word	0x200014a8
 800df58:	20001480 	.word	0x20001480
 800df5c:	20001440 	.word	0x20001440
 800df60:	20001488 	.word	0x20001488
 800df64:	20000fb0 	.word	0x20000fb0
 800df68:	20000fac 	.word	0x20000fac
 800df6c:	20001494 	.word	0x20001494
 800df70:	20001490 	.word	0x20001490
 800df74:	e000ed04 	.word	0xe000ed04

0800df78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df7e:	4b05      	ldr	r3, [pc, #20]	; (800df94 <xTaskGetTickCount+0x1c>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df84:	687b      	ldr	r3, [r7, #4]
}
 800df86:	4618      	mov	r0, r3
 800df88:	370c      	adds	r7, #12
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	20001484 	.word	0x20001484

0800df98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df9e:	f001 fc5b 	bl	800f858 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dfa6:	4b04      	ldr	r3, [pc, #16]	; (800dfb8 <xTaskGetTickCountFromISR+0x20>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfac:	683b      	ldr	r3, [r7, #0]
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	20001484 	.word	0x20001484

0800dfbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b086      	sub	sp, #24
 800dfc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfc6:	4b4f      	ldr	r3, [pc, #316]	; (800e104 <xTaskIncrementTick+0x148>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f040 808f 	bne.w	800e0ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dfd0:	4b4d      	ldr	r3, [pc, #308]	; (800e108 <xTaskIncrementTick+0x14c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dfd8:	4a4b      	ldr	r2, [pc, #300]	; (800e108 <xTaskIncrementTick+0x14c>)
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d120      	bne.n	800e026 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dfe4:	4b49      	ldr	r3, [pc, #292]	; (800e10c <xTaskIncrementTick+0x150>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00a      	beq.n	800e004 <xTaskIncrementTick+0x48>
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	603b      	str	r3, [r7, #0]
}
 800e000:	bf00      	nop
 800e002:	e7fe      	b.n	800e002 <xTaskIncrementTick+0x46>
 800e004:	4b41      	ldr	r3, [pc, #260]	; (800e10c <xTaskIncrementTick+0x150>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	60fb      	str	r3, [r7, #12]
 800e00a:	4b41      	ldr	r3, [pc, #260]	; (800e110 <xTaskIncrementTick+0x154>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4a3f      	ldr	r2, [pc, #252]	; (800e10c <xTaskIncrementTick+0x150>)
 800e010:	6013      	str	r3, [r2, #0]
 800e012:	4a3f      	ldr	r2, [pc, #252]	; (800e110 <xTaskIncrementTick+0x154>)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6013      	str	r3, [r2, #0]
 800e018:	4b3e      	ldr	r3, [pc, #248]	; (800e114 <xTaskIncrementTick+0x158>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	3301      	adds	r3, #1
 800e01e:	4a3d      	ldr	r2, [pc, #244]	; (800e114 <xTaskIncrementTick+0x158>)
 800e020:	6013      	str	r3, [r2, #0]
 800e022:	f000 fb95 	bl	800e750 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e026:	4b3c      	ldr	r3, [pc, #240]	; (800e118 <xTaskIncrementTick+0x15c>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	693a      	ldr	r2, [r7, #16]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d349      	bcc.n	800e0c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e030:	4b36      	ldr	r3, [pc, #216]	; (800e10c <xTaskIncrementTick+0x150>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d104      	bne.n	800e044 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e03a:	4b37      	ldr	r3, [pc, #220]	; (800e118 <xTaskIncrementTick+0x15c>)
 800e03c:	f04f 32ff 	mov.w	r2, #4294967295
 800e040:	601a      	str	r2, [r3, #0]
					break;
 800e042:	e03f      	b.n	800e0c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e044:	4b31      	ldr	r3, [pc, #196]	; (800e10c <xTaskIncrementTick+0x150>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e054:	693a      	ldr	r2, [r7, #16]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	429a      	cmp	r2, r3
 800e05a:	d203      	bcs.n	800e064 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e05c:	4a2e      	ldr	r2, [pc, #184]	; (800e118 <xTaskIncrementTick+0x15c>)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e062:	e02f      	b.n	800e0c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	3304      	adds	r3, #4
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fe fb4b 	bl	800c704 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e072:	2b00      	cmp	r3, #0
 800e074:	d004      	beq.n	800e080 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	3318      	adds	r3, #24
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fb42 	bl	800c704 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e084:	4b25      	ldr	r3, [pc, #148]	; (800e11c <xTaskIncrementTick+0x160>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d903      	bls.n	800e094 <xTaskIncrementTick+0xd8>
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e090:	4a22      	ldr	r2, [pc, #136]	; (800e11c <xTaskIncrementTick+0x160>)
 800e092:	6013      	str	r3, [r2, #0]
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e098:	4613      	mov	r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	4413      	add	r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	4a1f      	ldr	r2, [pc, #124]	; (800e120 <xTaskIncrementTick+0x164>)
 800e0a2:	441a      	add	r2, r3
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	3304      	adds	r3, #4
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	f7fe facd 	bl	800c64a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b4:	4b1b      	ldr	r3, [pc, #108]	; (800e124 <xTaskIncrementTick+0x168>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d3b8      	bcc.n	800e030 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0c2:	e7b5      	b.n	800e030 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0c4:	4b17      	ldr	r3, [pc, #92]	; (800e124 <xTaskIncrementTick+0x168>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ca:	4915      	ldr	r1, [pc, #84]	; (800e120 <xTaskIncrementTick+0x164>)
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	4413      	add	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	440b      	add	r3, r1
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d901      	bls.n	800e0e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0e0:	4b11      	ldr	r3, [pc, #68]	; (800e128 <xTaskIncrementTick+0x16c>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d007      	beq.n	800e0f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	617b      	str	r3, [r7, #20]
 800e0ec:	e004      	b.n	800e0f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0ee:	4b0f      	ldr	r3, [pc, #60]	; (800e12c <xTaskIncrementTick+0x170>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	4a0d      	ldr	r2, [pc, #52]	; (800e12c <xTaskIncrementTick+0x170>)
 800e0f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0f8:	697b      	ldr	r3, [r7, #20]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3718      	adds	r7, #24
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	200014a8 	.word	0x200014a8
 800e108:	20001484 	.word	0x20001484
 800e10c:	20001438 	.word	0x20001438
 800e110:	2000143c 	.word	0x2000143c
 800e114:	20001498 	.word	0x20001498
 800e118:	200014a0 	.word	0x200014a0
 800e11c:	20001488 	.word	0x20001488
 800e120:	20000fb0 	.word	0x20000fb0
 800e124:	20000fac 	.word	0x20000fac
 800e128:	20001494 	.word	0x20001494
 800e12c:	20001490 	.word	0x20001490

0800e130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e136:	4b36      	ldr	r3, [pc, #216]	; (800e210 <vTaskSwitchContext+0xe0>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d003      	beq.n	800e146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e13e:	4b35      	ldr	r3, [pc, #212]	; (800e214 <vTaskSwitchContext+0xe4>)
 800e140:	2201      	movs	r2, #1
 800e142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e144:	e05f      	b.n	800e206 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800e146:	4b33      	ldr	r3, [pc, #204]	; (800e214 <vTaskSwitchContext+0xe4>)
 800e148:	2200      	movs	r2, #0
 800e14a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e14c:	f7f2 fe0e 	bl	8000d6c <getRunTimeCounterValue>
 800e150:	4603      	mov	r3, r0
 800e152:	4a31      	ldr	r2, [pc, #196]	; (800e218 <vTaskSwitchContext+0xe8>)
 800e154:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e156:	4b30      	ldr	r3, [pc, #192]	; (800e218 <vTaskSwitchContext+0xe8>)
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	4b30      	ldr	r3, [pc, #192]	; (800e21c <vTaskSwitchContext+0xec>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d909      	bls.n	800e176 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e162:	4b2f      	ldr	r3, [pc, #188]	; (800e220 <vTaskSwitchContext+0xf0>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e168:	4a2b      	ldr	r2, [pc, #172]	; (800e218 <vTaskSwitchContext+0xe8>)
 800e16a:	6810      	ldr	r0, [r2, #0]
 800e16c:	4a2b      	ldr	r2, [pc, #172]	; (800e21c <vTaskSwitchContext+0xec>)
 800e16e:	6812      	ldr	r2, [r2, #0]
 800e170:	1a82      	subs	r2, r0, r2
 800e172:	440a      	add	r2, r1
 800e174:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e176:	4b28      	ldr	r3, [pc, #160]	; (800e218 <vTaskSwitchContext+0xe8>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a28      	ldr	r2, [pc, #160]	; (800e21c <vTaskSwitchContext+0xec>)
 800e17c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e17e:	4b29      	ldr	r3, [pc, #164]	; (800e224 <vTaskSwitchContext+0xf4>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	e010      	b.n	800e1a8 <vTaskSwitchContext+0x78>
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10a      	bne.n	800e1a2 <vTaskSwitchContext+0x72>
	__asm volatile
 800e18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e190:	f383 8811 	msr	BASEPRI, r3
 800e194:	f3bf 8f6f 	isb	sy
 800e198:	f3bf 8f4f 	dsb	sy
 800e19c:	607b      	str	r3, [r7, #4]
}
 800e19e:	bf00      	nop
 800e1a0:	e7fe      	b.n	800e1a0 <vTaskSwitchContext+0x70>
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	60fb      	str	r3, [r7, #12]
 800e1a8:	491f      	ldr	r1, [pc, #124]	; (800e228 <vTaskSwitchContext+0xf8>)
 800e1aa:	68fa      	ldr	r2, [r7, #12]
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	4413      	add	r3, r2
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	440b      	add	r3, r1
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d0e4      	beq.n	800e186 <vTaskSwitchContext+0x56>
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4413      	add	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	4a18      	ldr	r2, [pc, #96]	; (800e228 <vTaskSwitchContext+0xf8>)
 800e1c8:	4413      	add	r3, r2
 800e1ca:	60bb      	str	r3, [r7, #8]
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	685a      	ldr	r2, [r3, #4]
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	605a      	str	r2, [r3, #4]
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	685a      	ldr	r2, [r3, #4]
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	3308      	adds	r3, #8
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d104      	bne.n	800e1ec <vTaskSwitchContext+0xbc>
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	685a      	ldr	r2, [r3, #4]
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	605a      	str	r2, [r3, #4]
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	4a0b      	ldr	r2, [pc, #44]	; (800e220 <vTaskSwitchContext+0xf0>)
 800e1f4:	6013      	str	r3, [r2, #0]
 800e1f6:	4a0b      	ldr	r2, [pc, #44]	; (800e224 <vTaskSwitchContext+0xf4>)
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1fc:	4b08      	ldr	r3, [pc, #32]	; (800e220 <vTaskSwitchContext+0xf0>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	335c      	adds	r3, #92	; 0x5c
 800e202:	4a0a      	ldr	r2, [pc, #40]	; (800e22c <vTaskSwitchContext+0xfc>)
 800e204:	6013      	str	r3, [r2, #0]
}
 800e206:	bf00      	nop
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	200014a8 	.word	0x200014a8
 800e214:	20001494 	.word	0x20001494
 800e218:	200014b0 	.word	0x200014b0
 800e21c:	200014ac 	.word	0x200014ac
 800e220:	20000fac 	.word	0x20000fac
 800e224:	20001488 	.word	0x20001488
 800e228:	20000fb0 	.word	0x20000fb0
 800e22c:	20000504 	.word	0x20000504

0800e230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10a      	bne.n	800e256 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e244:	f383 8811 	msr	BASEPRI, r3
 800e248:	f3bf 8f6f 	isb	sy
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	60fb      	str	r3, [r7, #12]
}
 800e252:	bf00      	nop
 800e254:	e7fe      	b.n	800e254 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e256:	4b07      	ldr	r3, [pc, #28]	; (800e274 <vTaskPlaceOnEventList+0x44>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	3318      	adds	r3, #24
 800e25c:	4619      	mov	r1, r3
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f7fe fa17 	bl	800c692 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e264:	2101      	movs	r1, #1
 800e266:	6838      	ldr	r0, [r7, #0]
 800e268:	f000 fc44 	bl	800eaf4 <prvAddCurrentTaskToDelayedList>
}
 800e26c:	bf00      	nop
 800e26e:	3710      	adds	r7, #16
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	20000fac 	.word	0x20000fac

0800e278 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b086      	sub	sp, #24
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10a      	bne.n	800e2a0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	617b      	str	r3, [r7, #20]
}
 800e29c:	bf00      	nop
 800e29e:	e7fe      	b.n	800e29e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e2a0:	4b11      	ldr	r3, [pc, #68]	; (800e2e8 <vTaskPlaceOnUnorderedEventList+0x70>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10a      	bne.n	800e2be <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800e2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ac:	f383 8811 	msr	BASEPRI, r3
 800e2b0:	f3bf 8f6f 	isb	sy
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	613b      	str	r3, [r7, #16]
}
 800e2ba:	bf00      	nop
 800e2bc:	e7fe      	b.n	800e2bc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e2be:	4b0b      	ldr	r3, [pc, #44]	; (800e2ec <vTaskPlaceOnUnorderedEventList+0x74>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68ba      	ldr	r2, [r7, #8]
 800e2c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800e2c8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2ca:	4b08      	ldr	r3, [pc, #32]	; (800e2ec <vTaskPlaceOnUnorderedEventList+0x74>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	3318      	adds	r3, #24
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f7fe f9b9 	bl	800c64a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2d8:	2101      	movs	r1, #1
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fc0a 	bl	800eaf4 <prvAddCurrentTaskToDelayedList>
}
 800e2e0:	bf00      	nop
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	200014a8 	.word	0x200014a8
 800e2ec:	20000fac 	.word	0x20000fac

0800e2f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b086      	sub	sp, #24
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d10a      	bne.n	800e318 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	f383 8811 	msr	BASEPRI, r3
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	617b      	str	r3, [r7, #20]
}
 800e314:	bf00      	nop
 800e316:	e7fe      	b.n	800e316 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e318:	4b0a      	ldr	r3, [pc, #40]	; (800e344 <vTaskPlaceOnEventListRestricted+0x54>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	3318      	adds	r3, #24
 800e31e:	4619      	mov	r1, r3
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	f7fe f992 	bl	800c64a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e32c:	f04f 33ff 	mov.w	r3, #4294967295
 800e330:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e332:	6879      	ldr	r1, [r7, #4]
 800e334:	68b8      	ldr	r0, [r7, #8]
 800e336:	f000 fbdd 	bl	800eaf4 <prvAddCurrentTaskToDelayedList>
	}
 800e33a:	bf00      	nop
 800e33c:	3718      	adds	r7, #24
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	20000fac 	.word	0x20000fac

0800e348 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d10a      	bne.n	800e374 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	60fb      	str	r3, [r7, #12]
}
 800e370:	bf00      	nop
 800e372:	e7fe      	b.n	800e372 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	3318      	adds	r3, #24
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fe f9c3 	bl	800c704 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e37e:	4b1e      	ldr	r3, [pc, #120]	; (800e3f8 <xTaskRemoveFromEventList+0xb0>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d11d      	bne.n	800e3c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	3304      	adds	r3, #4
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fe f9ba 	bl	800c704 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e394:	4b19      	ldr	r3, [pc, #100]	; (800e3fc <xTaskRemoveFromEventList+0xb4>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d903      	bls.n	800e3a4 <xTaskRemoveFromEventList+0x5c>
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a0:	4a16      	ldr	r2, [pc, #88]	; (800e3fc <xTaskRemoveFromEventList+0xb4>)
 800e3a2:	6013      	str	r3, [r2, #0]
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	4413      	add	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4a13      	ldr	r2, [pc, #76]	; (800e400 <xTaskRemoveFromEventList+0xb8>)
 800e3b2:	441a      	add	r2, r3
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	4610      	mov	r0, r2
 800e3bc:	f7fe f945 	bl	800c64a <vListInsertEnd>
 800e3c0:	e005      	b.n	800e3ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	3318      	adds	r3, #24
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	480e      	ldr	r0, [pc, #56]	; (800e404 <xTaskRemoveFromEventList+0xbc>)
 800e3ca:	f7fe f93e 	bl	800c64a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d2:	4b0d      	ldr	r3, [pc, #52]	; (800e408 <xTaskRemoveFromEventList+0xc0>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d905      	bls.n	800e3e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e3e0:	4b0a      	ldr	r3, [pc, #40]	; (800e40c <xTaskRemoveFromEventList+0xc4>)
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	601a      	str	r2, [r3, #0]
 800e3e6:	e001      	b.n	800e3ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e3ec:	697b      	ldr	r3, [r7, #20]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3718      	adds	r7, #24
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	200014a8 	.word	0x200014a8
 800e3fc:	20001488 	.word	0x20001488
 800e400:	20000fb0 	.word	0x20000fb0
 800e404:	20001440 	.word	0x20001440
 800e408:	20000fac 	.word	0x20000fac
 800e40c:	20001494 	.word	0x20001494

0800e410 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b086      	sub	sp, #24
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e41a:	4b29      	ldr	r3, [pc, #164]	; (800e4c0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d10a      	bne.n	800e438 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800e422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e426:	f383 8811 	msr	BASEPRI, r3
 800e42a:	f3bf 8f6f 	isb	sy
 800e42e:	f3bf 8f4f 	dsb	sy
 800e432:	613b      	str	r3, [r7, #16]
}
 800e434:	bf00      	nop
 800e436:	e7fe      	b.n	800e436 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10a      	bne.n	800e464 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	60fb      	str	r3, [r7, #12]
}
 800e460:	bf00      	nop
 800e462:	e7fe      	b.n	800e462 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7fe f94d 	bl	800c704 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	3304      	adds	r3, #4
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fe f948 	bl	800c704 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e478:	4b12      	ldr	r3, [pc, #72]	; (800e4c4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d903      	bls.n	800e488 <vTaskRemoveFromUnorderedEventList+0x78>
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e484:	4a0f      	ldr	r2, [pc, #60]	; (800e4c4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e486:	6013      	str	r3, [r2, #0]
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e48c:	4613      	mov	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	4413      	add	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	4a0c      	ldr	r2, [pc, #48]	; (800e4c8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e496:	441a      	add	r2, r3
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	3304      	adds	r3, #4
 800e49c:	4619      	mov	r1, r3
 800e49e:	4610      	mov	r0, r2
 800e4a0:	f7fe f8d3 	bl	800c64a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a8:	4b08      	ldr	r3, [pc, #32]	; (800e4cc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d902      	bls.n	800e4b8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e4b2:	4b07      	ldr	r3, [pc, #28]	; (800e4d0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	601a      	str	r2, [r3, #0]
	}
}
 800e4b8:	bf00      	nop
 800e4ba:	3718      	adds	r7, #24
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	200014a8 	.word	0x200014a8
 800e4c4:	20001488 	.word	0x20001488
 800e4c8:	20000fb0 	.word	0x20000fb0
 800e4cc:	20000fac 	.word	0x20000fac
 800e4d0:	20001494 	.word	0x20001494

0800e4d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e4dc:	4b06      	ldr	r3, [pc, #24]	; (800e4f8 <vTaskInternalSetTimeOutState+0x24>)
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e4e4:	4b05      	ldr	r3, [pc, #20]	; (800e4fc <vTaskInternalSetTimeOutState+0x28>)
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	605a      	str	r2, [r3, #4]
}
 800e4ec:	bf00      	nop
 800e4ee:	370c      	adds	r7, #12
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr
 800e4f8:	20001498 	.word	0x20001498
 800e4fc:	20001484 	.word	0x20001484

0800e500 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b088      	sub	sp, #32
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d10a      	bne.n	800e526 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e514:	f383 8811 	msr	BASEPRI, r3
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	613b      	str	r3, [r7, #16]
}
 800e522:	bf00      	nop
 800e524:	e7fe      	b.n	800e524 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d10a      	bne.n	800e542 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e530:	f383 8811 	msr	BASEPRI, r3
 800e534:	f3bf 8f6f 	isb	sy
 800e538:	f3bf 8f4f 	dsb	sy
 800e53c:	60fb      	str	r3, [r7, #12]
}
 800e53e:	bf00      	nop
 800e540:	e7fe      	b.n	800e540 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e542:	f001 f8a7 	bl	800f694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e546:	4b1d      	ldr	r3, [pc, #116]	; (800e5bc <xTaskCheckForTimeOut+0xbc>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	69ba      	ldr	r2, [r7, #24]
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e55e:	d102      	bne.n	800e566 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e560:	2300      	movs	r3, #0
 800e562:	61fb      	str	r3, [r7, #28]
 800e564:	e023      	b.n	800e5ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	4b15      	ldr	r3, [pc, #84]	; (800e5c0 <xTaskCheckForTimeOut+0xc0>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d007      	beq.n	800e582 <xTaskCheckForTimeOut+0x82>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	69ba      	ldr	r2, [r7, #24]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d302      	bcc.n	800e582 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e57c:	2301      	movs	r3, #1
 800e57e:	61fb      	str	r3, [r7, #28]
 800e580:	e015      	b.n	800e5ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	697a      	ldr	r2, [r7, #20]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d20b      	bcs.n	800e5a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	1ad2      	subs	r2, r2, r3
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f7ff ff9b 	bl	800e4d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	61fb      	str	r3, [r7, #28]
 800e5a2:	e004      	b.n	800e5ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e5ae:	f001 f8a1 	bl	800f6f4 <vPortExitCritical>

	return xReturn;
 800e5b2:	69fb      	ldr	r3, [r7, #28]
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3720      	adds	r7, #32
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	20001484 	.word	0x20001484
 800e5c0:	20001498 	.word	0x20001498

0800e5c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e5c8:	4b03      	ldr	r3, [pc, #12]	; (800e5d8 <vTaskMissedYield+0x14>)
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	601a      	str	r2, [r3, #0]
}
 800e5ce:	bf00      	nop
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr
 800e5d8:	20001494 	.word	0x20001494

0800e5dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e5e4:	f000 f852 	bl	800e68c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e5e8:	4b06      	ldr	r3, [pc, #24]	; (800e604 <prvIdleTask+0x28>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d9f9      	bls.n	800e5e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e5f0:	4b05      	ldr	r3, [pc, #20]	; (800e608 <prvIdleTask+0x2c>)
 800e5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5f6:	601a      	str	r2, [r3, #0]
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e600:	e7f0      	b.n	800e5e4 <prvIdleTask+0x8>
 800e602:	bf00      	nop
 800e604:	20000fb0 	.word	0x20000fb0
 800e608:	e000ed04 	.word	0xe000ed04

0800e60c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b082      	sub	sp, #8
 800e610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e612:	2300      	movs	r3, #0
 800e614:	607b      	str	r3, [r7, #4]
 800e616:	e00c      	b.n	800e632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	4613      	mov	r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4413      	add	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4a12      	ldr	r2, [pc, #72]	; (800e66c <prvInitialiseTaskLists+0x60>)
 800e624:	4413      	add	r3, r2
 800e626:	4618      	mov	r0, r3
 800e628:	f7fd ffe2 	bl	800c5f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	3301      	adds	r3, #1
 800e630:	607b      	str	r3, [r7, #4]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b37      	cmp	r3, #55	; 0x37
 800e636:	d9ef      	bls.n	800e618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e638:	480d      	ldr	r0, [pc, #52]	; (800e670 <prvInitialiseTaskLists+0x64>)
 800e63a:	f7fd ffd9 	bl	800c5f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e63e:	480d      	ldr	r0, [pc, #52]	; (800e674 <prvInitialiseTaskLists+0x68>)
 800e640:	f7fd ffd6 	bl	800c5f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e644:	480c      	ldr	r0, [pc, #48]	; (800e678 <prvInitialiseTaskLists+0x6c>)
 800e646:	f7fd ffd3 	bl	800c5f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e64a:	480c      	ldr	r0, [pc, #48]	; (800e67c <prvInitialiseTaskLists+0x70>)
 800e64c:	f7fd ffd0 	bl	800c5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e650:	480b      	ldr	r0, [pc, #44]	; (800e680 <prvInitialiseTaskLists+0x74>)
 800e652:	f7fd ffcd 	bl	800c5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e656:	4b0b      	ldr	r3, [pc, #44]	; (800e684 <prvInitialiseTaskLists+0x78>)
 800e658:	4a05      	ldr	r2, [pc, #20]	; (800e670 <prvInitialiseTaskLists+0x64>)
 800e65a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e65c:	4b0a      	ldr	r3, [pc, #40]	; (800e688 <prvInitialiseTaskLists+0x7c>)
 800e65e:	4a05      	ldr	r2, [pc, #20]	; (800e674 <prvInitialiseTaskLists+0x68>)
 800e660:	601a      	str	r2, [r3, #0]
}
 800e662:	bf00      	nop
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	20000fb0 	.word	0x20000fb0
 800e670:	20001410 	.word	0x20001410
 800e674:	20001424 	.word	0x20001424
 800e678:	20001440 	.word	0x20001440
 800e67c:	20001454 	.word	0x20001454
 800e680:	2000146c 	.word	0x2000146c
 800e684:	20001438 	.word	0x20001438
 800e688:	2000143c 	.word	0x2000143c

0800e68c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e692:	e019      	b.n	800e6c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e694:	f000 fffe 	bl	800f694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e698:	4b10      	ldr	r3, [pc, #64]	; (800e6dc <prvCheckTasksWaitingTermination+0x50>)
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7fe f82d 	bl	800c704 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e6aa:	4b0d      	ldr	r3, [pc, #52]	; (800e6e0 <prvCheckTasksWaitingTermination+0x54>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	4a0b      	ldr	r2, [pc, #44]	; (800e6e0 <prvCheckTasksWaitingTermination+0x54>)
 800e6b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e6b4:	4b0b      	ldr	r3, [pc, #44]	; (800e6e4 <prvCheckTasksWaitingTermination+0x58>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	4a0a      	ldr	r2, [pc, #40]	; (800e6e4 <prvCheckTasksWaitingTermination+0x58>)
 800e6bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e6be:	f001 f819 	bl	800f6f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 f810 	bl	800e6e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6c8:	4b06      	ldr	r3, [pc, #24]	; (800e6e4 <prvCheckTasksWaitingTermination+0x58>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d1e1      	bne.n	800e694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e6d0:	bf00      	nop
 800e6d2:	bf00      	nop
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	20001454 	.word	0x20001454
 800e6e0:	20001480 	.word	0x20001480
 800e6e4:	20001468 	.word	0x20001468

0800e6e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	335c      	adds	r3, #92	; 0x5c
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f012 fc89 	bl	802100c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800e700:	2b00      	cmp	r3, #0
 800e702:	d108      	bne.n	800e716 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e708:	4618      	mov	r0, r3
 800e70a:	f001 f9b1 	bl	800fa70 <vPortFree>
				vPortFree( pxTCB );
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f001 f9ae 	bl	800fa70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e714:	e018      	b.n	800e748 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d103      	bne.n	800e728 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f001 f9a5 	bl	800fa70 <vPortFree>
	}
 800e726:	e00f      	b.n	800e748 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800e72e:	2b02      	cmp	r3, #2
 800e730:	d00a      	beq.n	800e748 <prvDeleteTCB+0x60>
	__asm volatile
 800e732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	60fb      	str	r3, [r7, #12]
}
 800e744:	bf00      	nop
 800e746:	e7fe      	b.n	800e746 <prvDeleteTCB+0x5e>
	}
 800e748:	bf00      	nop
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e756:	4b0c      	ldr	r3, [pc, #48]	; (800e788 <prvResetNextTaskUnblockTime+0x38>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d104      	bne.n	800e76a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e760:	4b0a      	ldr	r3, [pc, #40]	; (800e78c <prvResetNextTaskUnblockTime+0x3c>)
 800e762:	f04f 32ff 	mov.w	r2, #4294967295
 800e766:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e768:	e008      	b.n	800e77c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e76a:	4b07      	ldr	r3, [pc, #28]	; (800e788 <prvResetNextTaskUnblockTime+0x38>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	68db      	ldr	r3, [r3, #12]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	4a04      	ldr	r2, [pc, #16]	; (800e78c <prvResetNextTaskUnblockTime+0x3c>)
 800e77a:	6013      	str	r3, [r2, #0]
}
 800e77c:	bf00      	nop
 800e77e:	370c      	adds	r7, #12
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr
 800e788:	20001438 	.word	0x20001438
 800e78c:	200014a0 	.word	0x200014a0

0800e790 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e796:	4b05      	ldr	r3, [pc, #20]	; (800e7ac <xTaskGetCurrentTaskHandle+0x1c>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e79c:	687b      	ldr	r3, [r7, #4]
	}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	370c      	adds	r7, #12
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	20000fac 	.word	0x20000fac

0800e7b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e7b6:	4b0b      	ldr	r3, [pc, #44]	; (800e7e4 <xTaskGetSchedulerState+0x34>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d102      	bne.n	800e7c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	607b      	str	r3, [r7, #4]
 800e7c2:	e008      	b.n	800e7d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7c4:	4b08      	ldr	r3, [pc, #32]	; (800e7e8 <xTaskGetSchedulerState+0x38>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d102      	bne.n	800e7d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	607b      	str	r3, [r7, #4]
 800e7d0:	e001      	b.n	800e7d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e7d6:	687b      	ldr	r3, [r7, #4]
	}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr
 800e7e4:	2000148c 	.word	0x2000148c
 800e7e8:	200014a8 	.word	0x200014a8

0800e7ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d051      	beq.n	800e8a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e806:	4b2a      	ldr	r3, [pc, #168]	; (800e8b0 <xTaskPriorityInherit+0xc4>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d241      	bcs.n	800e894 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	699b      	ldr	r3, [r3, #24]
 800e814:	2b00      	cmp	r3, #0
 800e816:	db06      	blt.n	800e826 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e818:	4b25      	ldr	r3, [pc, #148]	; (800e8b0 <xTaskPriorityInherit+0xc4>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e81e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	6959      	ldr	r1, [r3, #20]
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e82e:	4613      	mov	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	4413      	add	r3, r2
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	4a1f      	ldr	r2, [pc, #124]	; (800e8b4 <xTaskPriorityInherit+0xc8>)
 800e838:	4413      	add	r3, r2
 800e83a:	4299      	cmp	r1, r3
 800e83c:	d122      	bne.n	800e884 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	3304      	adds	r3, #4
 800e842:	4618      	mov	r0, r3
 800e844:	f7fd ff5e 	bl	800c704 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e848:	4b19      	ldr	r3, [pc, #100]	; (800e8b0 <xTaskPriorityInherit+0xc4>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e856:	4b18      	ldr	r3, [pc, #96]	; (800e8b8 <xTaskPriorityInherit+0xcc>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d903      	bls.n	800e866 <xTaskPriorityInherit+0x7a>
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e862:	4a15      	ldr	r2, [pc, #84]	; (800e8b8 <xTaskPriorityInherit+0xcc>)
 800e864:	6013      	str	r3, [r2, #0]
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e86a:	4613      	mov	r3, r2
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	4413      	add	r3, r2
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	4a10      	ldr	r2, [pc, #64]	; (800e8b4 <xTaskPriorityInherit+0xc8>)
 800e874:	441a      	add	r2, r3
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	3304      	adds	r3, #4
 800e87a:	4619      	mov	r1, r3
 800e87c:	4610      	mov	r0, r2
 800e87e:	f7fd fee4 	bl	800c64a <vListInsertEnd>
 800e882:	e004      	b.n	800e88e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e884:	4b0a      	ldr	r3, [pc, #40]	; (800e8b0 <xTaskPriorityInherit+0xc4>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e88e:	2301      	movs	r3, #1
 800e890:	60fb      	str	r3, [r7, #12]
 800e892:	e008      	b.n	800e8a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e898:	4b05      	ldr	r3, [pc, #20]	; (800e8b0 <xTaskPriorityInherit+0xc4>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d201      	bcs.n	800e8a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
	}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3710      	adds	r7, #16
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	20000fac 	.word	0x20000fac
 800e8b4:	20000fb0 	.word	0x20000fb0
 800e8b8:	20001488 	.word	0x20001488

0800e8bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b086      	sub	sp, #24
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d056      	beq.n	800e980 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e8d2:	4b2e      	ldr	r3, [pc, #184]	; (800e98c <xTaskPriorityDisinherit+0xd0>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	693a      	ldr	r2, [r7, #16]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d00a      	beq.n	800e8f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e0:	f383 8811 	msr	BASEPRI, r3
 800e8e4:	f3bf 8f6f 	isb	sy
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	60fb      	str	r3, [r7, #12]
}
 800e8ee:	bf00      	nop
 800e8f0:	e7fe      	b.n	800e8f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d10a      	bne.n	800e910 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fe:	f383 8811 	msr	BASEPRI, r3
 800e902:	f3bf 8f6f 	isb	sy
 800e906:	f3bf 8f4f 	dsb	sy
 800e90a:	60bb      	str	r3, [r7, #8]
}
 800e90c:	bf00      	nop
 800e90e:	e7fe      	b.n	800e90e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e914:	1e5a      	subs	r2, r3, #1
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e922:	429a      	cmp	r2, r3
 800e924:	d02c      	beq.n	800e980 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d128      	bne.n	800e980 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	3304      	adds	r3, #4
 800e932:	4618      	mov	r0, r3
 800e934:	f7fd fee6 	bl	800c704 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e944:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e950:	4b0f      	ldr	r3, [pc, #60]	; (800e990 <xTaskPriorityDisinherit+0xd4>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	429a      	cmp	r2, r3
 800e956:	d903      	bls.n	800e960 <xTaskPriorityDisinherit+0xa4>
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e95c:	4a0c      	ldr	r2, [pc, #48]	; (800e990 <xTaskPriorityDisinherit+0xd4>)
 800e95e:	6013      	str	r3, [r2, #0]
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e964:	4613      	mov	r3, r2
 800e966:	009b      	lsls	r3, r3, #2
 800e968:	4413      	add	r3, r2
 800e96a:	009b      	lsls	r3, r3, #2
 800e96c:	4a09      	ldr	r2, [pc, #36]	; (800e994 <xTaskPriorityDisinherit+0xd8>)
 800e96e:	441a      	add	r2, r3
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	3304      	adds	r3, #4
 800e974:	4619      	mov	r1, r3
 800e976:	4610      	mov	r0, r2
 800e978:	f7fd fe67 	bl	800c64a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e97c:	2301      	movs	r3, #1
 800e97e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e980:	697b      	ldr	r3, [r7, #20]
	}
 800e982:	4618      	mov	r0, r3
 800e984:	3718      	adds	r7, #24
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	20000fac 	.word	0x20000fac
 800e990:	20001488 	.word	0x20001488
 800e994:	20000fb0 	.word	0x20000fb0

0800e998 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b088      	sub	sp, #32
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d06a      	beq.n	800ea86 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d10a      	bne.n	800e9ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	60fb      	str	r3, [r7, #12]
}
 800e9ca:	bf00      	nop
 800e9cc:	e7fe      	b.n	800e9cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9d2:	683a      	ldr	r2, [r7, #0]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d902      	bls.n	800e9de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	61fb      	str	r3, [r7, #28]
 800e9dc:	e002      	b.n	800e9e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e8:	69fa      	ldr	r2, [r7, #28]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d04b      	beq.n	800ea86 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9f2:	697a      	ldr	r2, [r7, #20]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d146      	bne.n	800ea86 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e9f8:	4b25      	ldr	r3, [pc, #148]	; (800ea90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	69ba      	ldr	r2, [r7, #24]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d10a      	bne.n	800ea18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	60bb      	str	r3, [r7, #8]
}
 800ea14:	bf00      	nop
 800ea16:	e7fe      	b.n	800ea16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	69fa      	ldr	r2, [r7, #28]
 800ea22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	699b      	ldr	r3, [r3, #24]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	db04      	blt.n	800ea36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	6959      	ldr	r1, [r3, #20]
 800ea3a:	693a      	ldr	r2, [r7, #16]
 800ea3c:	4613      	mov	r3, r2
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	4413      	add	r3, r2
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	4a13      	ldr	r2, [pc, #76]	; (800ea94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ea46:	4413      	add	r3, r2
 800ea48:	4299      	cmp	r1, r3
 800ea4a:	d11c      	bne.n	800ea86 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	3304      	adds	r3, #4
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fd fe57 	bl	800c704 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea5a:	4b0f      	ldr	r3, [pc, #60]	; (800ea98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d903      	bls.n	800ea6a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea66:	4a0c      	ldr	r2, [pc, #48]	; (800ea98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ea68:	6013      	str	r3, [r2, #0]
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea6e:	4613      	mov	r3, r2
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	4413      	add	r3, r2
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4a07      	ldr	r2, [pc, #28]	; (800ea94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ea78:	441a      	add	r2, r3
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	3304      	adds	r3, #4
 800ea7e:	4619      	mov	r1, r3
 800ea80:	4610      	mov	r0, r2
 800ea82:	f7fd fde2 	bl	800c64a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ea86:	bf00      	nop
 800ea88:	3720      	adds	r7, #32
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	20000fac 	.word	0x20000fac
 800ea94:	20000fb0 	.word	0x20000fb0
 800ea98:	20001488 	.word	0x20001488

0800ea9c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800eaa2:	4b09      	ldr	r3, [pc, #36]	; (800eac8 <uxTaskResetEventItemValue+0x2c>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	699b      	ldr	r3, [r3, #24]
 800eaa8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaaa:	4b07      	ldr	r3, [pc, #28]	; (800eac8 <uxTaskResetEventItemValue+0x2c>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab0:	4b05      	ldr	r3, [pc, #20]	; (800eac8 <uxTaskResetEventItemValue+0x2c>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800eab8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800eaba:	687b      	ldr	r3, [r7, #4]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr
 800eac8:	20000fac 	.word	0x20000fac

0800eacc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eacc:	b480      	push	{r7}
 800eace:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ead0:	4b07      	ldr	r3, [pc, #28]	; (800eaf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d004      	beq.n	800eae2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ead8:	4b05      	ldr	r3, [pc, #20]	; (800eaf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eade:	3201      	adds	r2, #1
 800eae0:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800eae2:	4b03      	ldr	r3, [pc, #12]	; (800eaf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800eae4:	681b      	ldr	r3, [r3, #0]
	}
 800eae6:	4618      	mov	r0, r3
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr
 800eaf0:	20000fac 	.word	0x20000fac

0800eaf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eafe:	4b21      	ldr	r3, [pc, #132]	; (800eb84 <prvAddCurrentTaskToDelayedList+0x90>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb04:	4b20      	ldr	r3, [pc, #128]	; (800eb88 <prvAddCurrentTaskToDelayedList+0x94>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	3304      	adds	r3, #4
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fd fdfa 	bl	800c704 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb16:	d10a      	bne.n	800eb2e <prvAddCurrentTaskToDelayedList+0x3a>
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d007      	beq.n	800eb2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb1e:	4b1a      	ldr	r3, [pc, #104]	; (800eb88 <prvAddCurrentTaskToDelayedList+0x94>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	3304      	adds	r3, #4
 800eb24:	4619      	mov	r1, r3
 800eb26:	4819      	ldr	r0, [pc, #100]	; (800eb8c <prvAddCurrentTaskToDelayedList+0x98>)
 800eb28:	f7fd fd8f 	bl	800c64a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eb2c:	e026      	b.n	800eb7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eb2e:	68fa      	ldr	r2, [r7, #12]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	4413      	add	r3, r2
 800eb34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eb36:	4b14      	ldr	r3, [pc, #80]	; (800eb88 <prvAddCurrentTaskToDelayedList+0x94>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	68ba      	ldr	r2, [r7, #8]
 800eb3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d209      	bcs.n	800eb5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb46:	4b12      	ldr	r3, [pc, #72]	; (800eb90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	4b0f      	ldr	r3, [pc, #60]	; (800eb88 <prvAddCurrentTaskToDelayedList+0x94>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	3304      	adds	r3, #4
 800eb50:	4619      	mov	r1, r3
 800eb52:	4610      	mov	r0, r2
 800eb54:	f7fd fd9d 	bl	800c692 <vListInsert>
}
 800eb58:	e010      	b.n	800eb7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb5a:	4b0e      	ldr	r3, [pc, #56]	; (800eb94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	4b0a      	ldr	r3, [pc, #40]	; (800eb88 <prvAddCurrentTaskToDelayedList+0x94>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	3304      	adds	r3, #4
 800eb64:	4619      	mov	r1, r3
 800eb66:	4610      	mov	r0, r2
 800eb68:	f7fd fd93 	bl	800c692 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eb6c:	4b0a      	ldr	r3, [pc, #40]	; (800eb98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	68ba      	ldr	r2, [r7, #8]
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d202      	bcs.n	800eb7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800eb76:	4a08      	ldr	r2, [pc, #32]	; (800eb98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	6013      	str	r3, [r2, #0]
}
 800eb7c:	bf00      	nop
 800eb7e:	3710      	adds	r7, #16
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	20001484 	.word	0x20001484
 800eb88:	20000fac 	.word	0x20000fac
 800eb8c:	2000146c 	.word	0x2000146c
 800eb90:	2000143c 	.word	0x2000143c
 800eb94:	20001438 	.word	0x20001438
 800eb98:	200014a0 	.word	0x200014a0

0800eb9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b08a      	sub	sp, #40	; 0x28
 800eba0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eba2:	2300      	movs	r3, #0
 800eba4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eba6:	f000 fba1 	bl	800f2ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ebaa:	4b1c      	ldr	r3, [pc, #112]	; (800ec1c <xTimerCreateTimerTask+0x80>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d021      	beq.n	800ebf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ebba:	1d3a      	adds	r2, r7, #4
 800ebbc:	f107 0108 	add.w	r1, r7, #8
 800ebc0:	f107 030c 	add.w	r3, r7, #12
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fd fa59 	bl	800c07c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ebca:	6879      	ldr	r1, [r7, #4]
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	9202      	str	r2, [sp, #8]
 800ebd2:	9301      	str	r3, [sp, #4]
 800ebd4:	2302      	movs	r3, #2
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	2300      	movs	r3, #0
 800ebda:	460a      	mov	r2, r1
 800ebdc:	4910      	ldr	r1, [pc, #64]	; (800ec20 <xTimerCreateTimerTask+0x84>)
 800ebde:	4811      	ldr	r0, [pc, #68]	; (800ec24 <xTimerCreateTimerTask+0x88>)
 800ebe0:	f7fe feba 	bl	800d958 <xTaskCreateStatic>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	4a10      	ldr	r2, [pc, #64]	; (800ec28 <xTimerCreateTimerTask+0x8c>)
 800ebe8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ebea:	4b0f      	ldr	r3, [pc, #60]	; (800ec28 <xTimerCreateTimerTask+0x8c>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d001      	beq.n	800ebf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d10a      	bne.n	800ec12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ebfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec00:	f383 8811 	msr	BASEPRI, r3
 800ec04:	f3bf 8f6f 	isb	sy
 800ec08:	f3bf 8f4f 	dsb	sy
 800ec0c:	613b      	str	r3, [r7, #16]
}
 800ec0e:	bf00      	nop
 800ec10:	e7fe      	b.n	800ec10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ec12:	697b      	ldr	r3, [r7, #20]
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3718      	adds	r7, #24
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	200014e4 	.word	0x200014e4
 800ec20:	080228fc 	.word	0x080228fc
 800ec24:	0800ee95 	.word	0x0800ee95
 800ec28:	200014e8 	.word	0x200014e8

0800ec2c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b088      	sub	sp, #32
 800ec30:	af02      	add	r7, sp, #8
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
 800ec38:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ec3a:	202c      	movs	r0, #44	; 0x2c
 800ec3c:	f000 fe4c 	bl	800f8d8 <pvPortMalloc>
 800ec40:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00d      	beq.n	800ec64 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	9301      	str	r3, [sp, #4]
 800ec54:	6a3b      	ldr	r3, [r7, #32]
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	68b9      	ldr	r1, [r7, #8]
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	f000 f843 	bl	800ecea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ec64:	697b      	ldr	r3, [r7, #20]
	}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3718      	adds	r7, #24
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b08a      	sub	sp, #40	; 0x28
 800ec72:	af02      	add	r7, sp, #8
 800ec74:	60f8      	str	r0, [r7, #12]
 800ec76:	60b9      	str	r1, [r7, #8]
 800ec78:	607a      	str	r2, [r7, #4]
 800ec7a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ec7c:	232c      	movs	r3, #44	; 0x2c
 800ec7e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	2b2c      	cmp	r3, #44	; 0x2c
 800ec84:	d00a      	beq.n	800ec9c <xTimerCreateStatic+0x2e>
	__asm volatile
 800ec86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8a:	f383 8811 	msr	BASEPRI, r3
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f3bf 8f4f 	dsb	sy
 800ec96:	61bb      	str	r3, [r7, #24]
}
 800ec98:	bf00      	nop
 800ec9a:	e7fe      	b.n	800ec9a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ec9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ec9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10a      	bne.n	800ecba <xTimerCreateStatic+0x4c>
	__asm volatile
 800eca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca8:	f383 8811 	msr	BASEPRI, r3
 800ecac:	f3bf 8f6f 	isb	sy
 800ecb0:	f3bf 8f4f 	dsb	sy
 800ecb4:	617b      	str	r3, [r7, #20]
}
 800ecb6:	bf00      	nop
 800ecb8:	e7fe      	b.n	800ecb8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ecba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d00d      	beq.n	800ece0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	2202      	movs	r2, #2
 800ecc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	9301      	str	r3, [sp, #4]
 800ecd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	68b9      	ldr	r1, [r7, #8]
 800ecda:	68f8      	ldr	r0, [r7, #12]
 800ecdc:	f000 f805 	bl	800ecea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ece0:	69fb      	ldr	r3, [r7, #28]
	}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3720      	adds	r7, #32
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b086      	sub	sp, #24
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	60f8      	str	r0, [r7, #12]
 800ecf2:	60b9      	str	r1, [r7, #8]
 800ecf4:	607a      	str	r2, [r7, #4]
 800ecf6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d10a      	bne.n	800ed14 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ecfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed02:	f383 8811 	msr	BASEPRI, r3
 800ed06:	f3bf 8f6f 	isb	sy
 800ed0a:	f3bf 8f4f 	dsb	sy
 800ed0e:	617b      	str	r3, [r7, #20]
}
 800ed10:	bf00      	nop
 800ed12:	e7fe      	b.n	800ed12 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ed14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d01e      	beq.n	800ed58 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ed1a:	f000 fae7 	bl	800f2ec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ed1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed20:	68fa      	ldr	r2, [r7, #12]
 800ed22:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ed24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed26:	68ba      	ldr	r2, [r7, #8]
 800ed28:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ed2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2c:	683a      	ldr	r2, [r7, #0]
 800ed2e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ed30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed32:	6a3a      	ldr	r2, [r7, #32]
 800ed34:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ed36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed38:	3304      	adds	r3, #4
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fd fc78 	bl	800c630 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d008      	beq.n	800ed58 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ed46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed4c:	f043 0304 	orr.w	r3, r3, #4
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ed58:	bf00      	nop
 800ed5a:	3718      	adds	r7, #24
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b08a      	sub	sp, #40	; 0x28
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
 800ed6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d10a      	bne.n	800ed8e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ed78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7c:	f383 8811 	msr	BASEPRI, r3
 800ed80:	f3bf 8f6f 	isb	sy
 800ed84:	f3bf 8f4f 	dsb	sy
 800ed88:	623b      	str	r3, [r7, #32]
}
 800ed8a:	bf00      	nop
 800ed8c:	e7fe      	b.n	800ed8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ed8e:	4b1a      	ldr	r3, [pc, #104]	; (800edf8 <xTimerGenericCommand+0x98>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d02a      	beq.n	800edec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	2b05      	cmp	r3, #5
 800eda6:	dc18      	bgt.n	800edda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eda8:	f7ff fd02 	bl	800e7b0 <xTaskGetSchedulerState>
 800edac:	4603      	mov	r3, r0
 800edae:	2b02      	cmp	r3, #2
 800edb0:	d109      	bne.n	800edc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800edb2:	4b11      	ldr	r3, [pc, #68]	; (800edf8 <xTimerGenericCommand+0x98>)
 800edb4:	6818      	ldr	r0, [r3, #0]
 800edb6:	f107 0110 	add.w	r1, r7, #16
 800edba:	2300      	movs	r3, #0
 800edbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edbe:	f7fd ff29 	bl	800cc14 <xQueueGenericSend>
 800edc2:	6278      	str	r0, [r7, #36]	; 0x24
 800edc4:	e012      	b.n	800edec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800edc6:	4b0c      	ldr	r3, [pc, #48]	; (800edf8 <xTimerGenericCommand+0x98>)
 800edc8:	6818      	ldr	r0, [r3, #0]
 800edca:	f107 0110 	add.w	r1, r7, #16
 800edce:	2300      	movs	r3, #0
 800edd0:	2200      	movs	r2, #0
 800edd2:	f7fd ff1f 	bl	800cc14 <xQueueGenericSend>
 800edd6:	6278      	str	r0, [r7, #36]	; 0x24
 800edd8:	e008      	b.n	800edec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800edda:	4b07      	ldr	r3, [pc, #28]	; (800edf8 <xTimerGenericCommand+0x98>)
 800eddc:	6818      	ldr	r0, [r3, #0]
 800edde:	f107 0110 	add.w	r1, r7, #16
 800ede2:	2300      	movs	r3, #0
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	f7fe f813 	bl	800ce10 <xQueueGenericSendFromISR>
 800edea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3728      	adds	r7, #40	; 0x28
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	200014e4 	.word	0x200014e4

0800edfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b088      	sub	sp, #32
 800ee00:	af02      	add	r7, sp, #8
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee06:	4b22      	ldr	r3, [pc, #136]	; (800ee90 <prvProcessExpiredTimer+0x94>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	3304      	adds	r3, #4
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fd fc75 	bl	800c704 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee20:	f003 0304 	and.w	r3, r3, #4
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d022      	beq.n	800ee6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	699a      	ldr	r2, [r3, #24]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	18d1      	adds	r1, r2, r3
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	683a      	ldr	r2, [r7, #0]
 800ee34:	6978      	ldr	r0, [r7, #20]
 800ee36:	f000 f8d1 	bl	800efdc <prvInsertTimerInActiveList>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d01f      	beq.n	800ee80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee40:	2300      	movs	r3, #0
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	2300      	movs	r3, #0
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	2100      	movs	r1, #0
 800ee4a:	6978      	ldr	r0, [r7, #20]
 800ee4c:	f7ff ff88 	bl	800ed60 <xTimerGenericCommand>
 800ee50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d113      	bne.n	800ee80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ee58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5c:	f383 8811 	msr	BASEPRI, r3
 800ee60:	f3bf 8f6f 	isb	sy
 800ee64:	f3bf 8f4f 	dsb	sy
 800ee68:	60fb      	str	r3, [r7, #12]
}
 800ee6a:	bf00      	nop
 800ee6c:	e7fe      	b.n	800ee6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee74:	f023 0301 	bic.w	r3, r3, #1
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	6a1b      	ldr	r3, [r3, #32]
 800ee84:	6978      	ldr	r0, [r7, #20]
 800ee86:	4798      	blx	r3
}
 800ee88:	bf00      	nop
 800ee8a:	3718      	adds	r7, #24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	200014dc 	.word	0x200014dc

0800ee94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee9c:	f107 0308 	add.w	r3, r7, #8
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 f857 	bl	800ef54 <prvGetNextExpireTime>
 800eea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	4619      	mov	r1, r3
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f000 f803 	bl	800eeb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eeb2:	f000 f8d5 	bl	800f060 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eeb6:	e7f1      	b.n	800ee9c <prvTimerTask+0x8>

0800eeb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eec2:	f7fe ffad 	bl	800de20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eec6:	f107 0308 	add.w	r3, r7, #8
 800eeca:	4618      	mov	r0, r3
 800eecc:	f000 f866 	bl	800ef9c <prvSampleTimeNow>
 800eed0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d130      	bne.n	800ef3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d10a      	bne.n	800eef4 <prvProcessTimerOrBlockTask+0x3c>
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d806      	bhi.n	800eef4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eee6:	f7fe ffa9 	bl	800de3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eeea:	68f9      	ldr	r1, [r7, #12]
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f7ff ff85 	bl	800edfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eef2:	e024      	b.n	800ef3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d008      	beq.n	800ef0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eefa:	4b13      	ldr	r3, [pc, #76]	; (800ef48 <prvProcessTimerOrBlockTask+0x90>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d101      	bne.n	800ef08 <prvProcessTimerOrBlockTask+0x50>
 800ef04:	2301      	movs	r3, #1
 800ef06:	e000      	b.n	800ef0a <prvProcessTimerOrBlockTask+0x52>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ef0c:	4b0f      	ldr	r3, [pc, #60]	; (800ef4c <prvProcessTimerOrBlockTask+0x94>)
 800ef0e:	6818      	ldr	r0, [r3, #0]
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	4619      	mov	r1, r3
 800ef1a:	f7fe fce9 	bl	800d8f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ef1e:	f7fe ff8d 	bl	800de3c <xTaskResumeAll>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10a      	bne.n	800ef3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ef28:	4b09      	ldr	r3, [pc, #36]	; (800ef50 <prvProcessTimerOrBlockTask+0x98>)
 800ef2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef2e:	601a      	str	r2, [r3, #0]
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	f3bf 8f6f 	isb	sy
}
 800ef38:	e001      	b.n	800ef3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ef3a:	f7fe ff7f 	bl	800de3c <xTaskResumeAll>
}
 800ef3e:	bf00      	nop
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	200014e0 	.word	0x200014e0
 800ef4c:	200014e4 	.word	0x200014e4
 800ef50:	e000ed04 	.word	0xe000ed04

0800ef54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ef54:	b480      	push	{r7}
 800ef56:	b085      	sub	sp, #20
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef5c:	4b0e      	ldr	r3, [pc, #56]	; (800ef98 <prvGetNextExpireTime+0x44>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d101      	bne.n	800ef6a <prvGetNextExpireTime+0x16>
 800ef66:	2201      	movs	r2, #1
 800ef68:	e000      	b.n	800ef6c <prvGetNextExpireTime+0x18>
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d105      	bne.n	800ef84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef78:	4b07      	ldr	r3, [pc, #28]	; (800ef98 <prvGetNextExpireTime+0x44>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	60fb      	str	r3, [r7, #12]
 800ef82:	e001      	b.n	800ef88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ef84:	2300      	movs	r3, #0
 800ef86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ef88:	68fb      	ldr	r3, [r7, #12]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3714      	adds	r7, #20
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr
 800ef96:	bf00      	nop
 800ef98:	200014dc 	.word	0x200014dc

0800ef9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800efa4:	f7fe ffe8 	bl	800df78 <xTaskGetTickCount>
 800efa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800efaa:	4b0b      	ldr	r3, [pc, #44]	; (800efd8 <prvSampleTimeNow+0x3c>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68fa      	ldr	r2, [r7, #12]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d205      	bcs.n	800efc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800efb4:	f000 f936 	bl	800f224 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2201      	movs	r2, #1
 800efbc:	601a      	str	r2, [r3, #0]
 800efbe:	e002      	b.n	800efc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800efc6:	4a04      	ldr	r2, [pc, #16]	; (800efd8 <prvSampleTimeNow+0x3c>)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800efcc:	68fb      	ldr	r3, [r7, #12]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	200014ec 	.word	0x200014ec

0800efdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b086      	sub	sp, #24
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	607a      	str	r2, [r7, #4]
 800efe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800efea:	2300      	movs	r3, #0
 800efec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	68ba      	ldr	r2, [r7, #8]
 800eff2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	68fa      	ldr	r2, [r7, #12]
 800eff8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800effa:	68ba      	ldr	r2, [r7, #8]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	429a      	cmp	r2, r3
 800f000:	d812      	bhi.n	800f028 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	1ad2      	subs	r2, r2, r3
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	699b      	ldr	r3, [r3, #24]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d302      	bcc.n	800f016 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f010:	2301      	movs	r3, #1
 800f012:	617b      	str	r3, [r7, #20]
 800f014:	e01b      	b.n	800f04e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f016:	4b10      	ldr	r3, [pc, #64]	; (800f058 <prvInsertTimerInActiveList+0x7c>)
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	3304      	adds	r3, #4
 800f01e:	4619      	mov	r1, r3
 800f020:	4610      	mov	r0, r2
 800f022:	f7fd fb36 	bl	800c692 <vListInsert>
 800f026:	e012      	b.n	800f04e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d206      	bcs.n	800f03e <prvInsertTimerInActiveList+0x62>
 800f030:	68ba      	ldr	r2, [r7, #8]
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	429a      	cmp	r2, r3
 800f036:	d302      	bcc.n	800f03e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f038:	2301      	movs	r3, #1
 800f03a:	617b      	str	r3, [r7, #20]
 800f03c:	e007      	b.n	800f04e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f03e:	4b07      	ldr	r3, [pc, #28]	; (800f05c <prvInsertTimerInActiveList+0x80>)
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	3304      	adds	r3, #4
 800f046:	4619      	mov	r1, r3
 800f048:	4610      	mov	r0, r2
 800f04a:	f7fd fb22 	bl	800c692 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f04e:	697b      	ldr	r3, [r7, #20]
}
 800f050:	4618      	mov	r0, r3
 800f052:	3718      	adds	r7, #24
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}
 800f058:	200014e0 	.word	0x200014e0
 800f05c:	200014dc 	.word	0x200014dc

0800f060 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b08e      	sub	sp, #56	; 0x38
 800f064:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f066:	e0ca      	b.n	800f1fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	da18      	bge.n	800f0a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f06e:	1d3b      	adds	r3, r7, #4
 800f070:	3304      	adds	r3, #4
 800f072:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f076:	2b00      	cmp	r3, #0
 800f078:	d10a      	bne.n	800f090 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07e:	f383 8811 	msr	BASEPRI, r3
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	f3bf 8f4f 	dsb	sy
 800f08a:	61fb      	str	r3, [r7, #28]
}
 800f08c:	bf00      	nop
 800f08e:	e7fe      	b.n	800f08e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f096:	6850      	ldr	r0, [r2, #4]
 800f098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f09a:	6892      	ldr	r2, [r2, #8]
 800f09c:	4611      	mov	r1, r2
 800f09e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	f2c0 80aa 	blt.w	800f1fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ae:	695b      	ldr	r3, [r3, #20]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d004      	beq.n	800f0be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b6:	3304      	adds	r3, #4
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fd fb23 	bl	800c704 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0be:	463b      	mov	r3, r7
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7ff ff6b 	bl	800ef9c <prvSampleTimeNow>
 800f0c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2b09      	cmp	r3, #9
 800f0cc:	f200 8097 	bhi.w	800f1fe <prvProcessReceivedCommands+0x19e>
 800f0d0:	a201      	add	r2, pc, #4	; (adr r2, 800f0d8 <prvProcessReceivedCommands+0x78>)
 800f0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d6:	bf00      	nop
 800f0d8:	0800f101 	.word	0x0800f101
 800f0dc:	0800f101 	.word	0x0800f101
 800f0e0:	0800f101 	.word	0x0800f101
 800f0e4:	0800f175 	.word	0x0800f175
 800f0e8:	0800f189 	.word	0x0800f189
 800f0ec:	0800f1d3 	.word	0x0800f1d3
 800f0f0:	0800f101 	.word	0x0800f101
 800f0f4:	0800f101 	.word	0x0800f101
 800f0f8:	0800f175 	.word	0x0800f175
 800f0fc:	0800f189 	.word	0x0800f189
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f106:	f043 0301 	orr.w	r3, r3, #1
 800f10a:	b2da      	uxtb	r2, r3
 800f10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f10e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	699b      	ldr	r3, [r3, #24]
 800f118:	18d1      	adds	r1, r2, r3
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f120:	f7ff ff5c 	bl	800efdc <prvInsertTimerInActiveList>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d069      	beq.n	800f1fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12c:	6a1b      	ldr	r3, [r3, #32]
 800f12e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f130:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f138:	f003 0304 	and.w	r3, r3, #4
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d05e      	beq.n	800f1fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f144:	699b      	ldr	r3, [r3, #24]
 800f146:	441a      	add	r2, r3
 800f148:	2300      	movs	r3, #0
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	2300      	movs	r3, #0
 800f14e:	2100      	movs	r1, #0
 800f150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f152:	f7ff fe05 	bl	800ed60 <xTimerGenericCommand>
 800f156:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f158:	6a3b      	ldr	r3, [r7, #32]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d14f      	bne.n	800f1fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f162:	f383 8811 	msr	BASEPRI, r3
 800f166:	f3bf 8f6f 	isb	sy
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	61bb      	str	r3, [r7, #24]
}
 800f170:	bf00      	nop
 800f172:	e7fe      	b.n	800f172 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f17a:	f023 0301 	bic.w	r3, r3, #1
 800f17e:	b2da      	uxtb	r2, r3
 800f180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f186:	e03a      	b.n	800f1fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f18e:	f043 0301 	orr.w	r3, r3, #1
 800f192:	b2da      	uxtb	r2, r3
 800f194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a2:	699b      	ldr	r3, [r3, #24]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d10a      	bne.n	800f1be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ac:	f383 8811 	msr	BASEPRI, r3
 800f1b0:	f3bf 8f6f 	isb	sy
 800f1b4:	f3bf 8f4f 	dsb	sy
 800f1b8:	617b      	str	r3, [r7, #20]
}
 800f1ba:	bf00      	nop
 800f1bc:	e7fe      	b.n	800f1bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c0:	699a      	ldr	r2, [r3, #24]
 800f1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c4:	18d1      	adds	r1, r2, r3
 800f1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1cc:	f7ff ff06 	bl	800efdc <prvInsertTimerInActiveList>
					break;
 800f1d0:	e015      	b.n	800f1fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1d8:	f003 0302 	and.w	r3, r3, #2
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d103      	bne.n	800f1e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1e2:	f000 fc45 	bl	800fa70 <vPortFree>
 800f1e6:	e00a      	b.n	800f1fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1ee:	f023 0301 	bic.w	r3, r3, #1
 800f1f2:	b2da      	uxtb	r2, r3
 800f1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f1fa:	e000      	b.n	800f1fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f1fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1fe:	4b08      	ldr	r3, [pc, #32]	; (800f220 <prvProcessReceivedCommands+0x1c0>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	1d39      	adds	r1, r7, #4
 800f204:	2200      	movs	r2, #0
 800f206:	4618      	mov	r0, r3
 800f208:	f7fd ff2a 	bl	800d060 <xQueueReceive>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f47f af2a 	bne.w	800f068 <prvProcessReceivedCommands+0x8>
	}
}
 800f214:	bf00      	nop
 800f216:	bf00      	nop
 800f218:	3730      	adds	r7, #48	; 0x30
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	200014e4 	.word	0x200014e4

0800f224 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b088      	sub	sp, #32
 800f228:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f22a:	e048      	b.n	800f2be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f22c:	4b2d      	ldr	r3, [pc, #180]	; (800f2e4 <prvSwitchTimerLists+0xc0>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f236:	4b2b      	ldr	r3, [pc, #172]	; (800f2e4 <prvSwitchTimerLists+0xc0>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	3304      	adds	r3, #4
 800f244:	4618      	mov	r0, r3
 800f246:	f7fd fa5d 	bl	800c704 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	6a1b      	ldr	r3, [r3, #32]
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f258:	f003 0304 	and.w	r3, r3, #4
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d02e      	beq.n	800f2be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	693a      	ldr	r2, [r7, #16]
 800f266:	4413      	add	r3, r2
 800f268:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f26a:	68ba      	ldr	r2, [r7, #8]
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d90e      	bls.n	800f290 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	68ba      	ldr	r2, [r7, #8]
 800f276:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f27e:	4b19      	ldr	r3, [pc, #100]	; (800f2e4 <prvSwitchTimerLists+0xc0>)
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	3304      	adds	r3, #4
 800f286:	4619      	mov	r1, r3
 800f288:	4610      	mov	r0, r2
 800f28a:	f7fd fa02 	bl	800c692 <vListInsert>
 800f28e:	e016      	b.n	800f2be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f290:	2300      	movs	r3, #0
 800f292:	9300      	str	r3, [sp, #0]
 800f294:	2300      	movs	r3, #0
 800f296:	693a      	ldr	r2, [r7, #16]
 800f298:	2100      	movs	r1, #0
 800f29a:	68f8      	ldr	r0, [r7, #12]
 800f29c:	f7ff fd60 	bl	800ed60 <xTimerGenericCommand>
 800f2a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10a      	bne.n	800f2be <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	603b      	str	r3, [r7, #0]
}
 800f2ba:	bf00      	nop
 800f2bc:	e7fe      	b.n	800f2bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f2be:	4b09      	ldr	r3, [pc, #36]	; (800f2e4 <prvSwitchTimerLists+0xc0>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d1b1      	bne.n	800f22c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f2c8:	4b06      	ldr	r3, [pc, #24]	; (800f2e4 <prvSwitchTimerLists+0xc0>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f2ce:	4b06      	ldr	r3, [pc, #24]	; (800f2e8 <prvSwitchTimerLists+0xc4>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4a04      	ldr	r2, [pc, #16]	; (800f2e4 <prvSwitchTimerLists+0xc0>)
 800f2d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f2d6:	4a04      	ldr	r2, [pc, #16]	; (800f2e8 <prvSwitchTimerLists+0xc4>)
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	6013      	str	r3, [r2, #0]
}
 800f2dc:	bf00      	nop
 800f2de:	3718      	adds	r7, #24
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}
 800f2e4:	200014dc 	.word	0x200014dc
 800f2e8:	200014e0 	.word	0x200014e0

0800f2ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f2f2:	f000 f9cf 	bl	800f694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f2f6:	4b15      	ldr	r3, [pc, #84]	; (800f34c <prvCheckForValidListAndQueue+0x60>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d120      	bne.n	800f340 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f2fe:	4814      	ldr	r0, [pc, #80]	; (800f350 <prvCheckForValidListAndQueue+0x64>)
 800f300:	f7fd f976 	bl	800c5f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f304:	4813      	ldr	r0, [pc, #76]	; (800f354 <prvCheckForValidListAndQueue+0x68>)
 800f306:	f7fd f973 	bl	800c5f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f30a:	4b13      	ldr	r3, [pc, #76]	; (800f358 <prvCheckForValidListAndQueue+0x6c>)
 800f30c:	4a10      	ldr	r2, [pc, #64]	; (800f350 <prvCheckForValidListAndQueue+0x64>)
 800f30e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f310:	4b12      	ldr	r3, [pc, #72]	; (800f35c <prvCheckForValidListAndQueue+0x70>)
 800f312:	4a10      	ldr	r2, [pc, #64]	; (800f354 <prvCheckForValidListAndQueue+0x68>)
 800f314:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f316:	2300      	movs	r3, #0
 800f318:	9300      	str	r3, [sp, #0]
 800f31a:	4b11      	ldr	r3, [pc, #68]	; (800f360 <prvCheckForValidListAndQueue+0x74>)
 800f31c:	4a11      	ldr	r2, [pc, #68]	; (800f364 <prvCheckForValidListAndQueue+0x78>)
 800f31e:	2110      	movs	r1, #16
 800f320:	200a      	movs	r0, #10
 800f322:	f7fd fa81 	bl	800c828 <xQueueGenericCreateStatic>
 800f326:	4603      	mov	r3, r0
 800f328:	4a08      	ldr	r2, [pc, #32]	; (800f34c <prvCheckForValidListAndQueue+0x60>)
 800f32a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f32c:	4b07      	ldr	r3, [pc, #28]	; (800f34c <prvCheckForValidListAndQueue+0x60>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d005      	beq.n	800f340 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f334:	4b05      	ldr	r3, [pc, #20]	; (800f34c <prvCheckForValidListAndQueue+0x60>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	490b      	ldr	r1, [pc, #44]	; (800f368 <prvCheckForValidListAndQueue+0x7c>)
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fe fa84 	bl	800d848 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f340:	f000 f9d8 	bl	800f6f4 <vPortExitCritical>
}
 800f344:	bf00      	nop
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	200014e4 	.word	0x200014e4
 800f350:	200014b4 	.word	0x200014b4
 800f354:	200014c8 	.word	0x200014c8
 800f358:	200014dc 	.word	0x200014dc
 800f35c:	200014e0 	.word	0x200014e0
 800f360:	20001590 	.word	0x20001590
 800f364:	200014f0 	.word	0x200014f0
 800f368:	08022904 	.word	0x08022904

0800f36c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b086      	sub	sp, #24
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d10a      	bne.n	800f394 <xTimerIsTimerActive+0x28>
	__asm volatile
 800f37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f382:	f383 8811 	msr	BASEPRI, r3
 800f386:	f3bf 8f6f 	isb	sy
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	60fb      	str	r3, [r7, #12]
}
 800f390:	bf00      	nop
 800f392:	e7fe      	b.n	800f392 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f394:	f000 f97e 	bl	800f694 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f39e:	f003 0301 	and.w	r3, r3, #1
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d102      	bne.n	800f3ac <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	617b      	str	r3, [r7, #20]
 800f3aa:	e001      	b.n	800f3b0 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800f3b0:	f000 f9a0 	bl	800f6f4 <vPortExitCritical>

	return xReturn;
 800f3b4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3718      	adds	r7, #24
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b086      	sub	sp, #24
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d10a      	bne.n	800f3e6 <pvTimerGetTimerID+0x28>
	__asm volatile
 800f3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d4:	f383 8811 	msr	BASEPRI, r3
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	60fb      	str	r3, [r7, #12]
}
 800f3e2:	bf00      	nop
 800f3e4:	e7fe      	b.n	800f3e4 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f3e6:	f000 f955 	bl	800f694 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	69db      	ldr	r3, [r3, #28]
 800f3ee:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f3f0:	f000 f980 	bl	800f6f4 <vPortExitCritical>

	return pvReturn;
 800f3f4:	693b      	ldr	r3, [r7, #16]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3718      	adds	r7, #24
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
	...

0800f400 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f400:	b580      	push	{r7, lr}
 800f402:	b08a      	sub	sp, #40	; 0x28
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]
 800f40c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f40e:	f06f 0301 	mvn.w	r3, #1
 800f412:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f420:	4b06      	ldr	r3, [pc, #24]	; (800f43c <xTimerPendFunctionCallFromISR+0x3c>)
 800f422:	6818      	ldr	r0, [r3, #0]
 800f424:	f107 0114 	add.w	r1, r7, #20
 800f428:	2300      	movs	r3, #0
 800f42a:	683a      	ldr	r2, [r7, #0]
 800f42c:	f7fd fcf0 	bl	800ce10 <xQueueGenericSendFromISR>
 800f430:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f434:	4618      	mov	r0, r3
 800f436:	3728      	adds	r7, #40	; 0x28
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	200014e4 	.word	0x200014e4

0800f440 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f440:	b480      	push	{r7}
 800f442:	b085      	sub	sp, #20
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	3b04      	subs	r3, #4
 800f450:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	3b04      	subs	r3, #4
 800f45e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	f023 0201 	bic.w	r2, r3, #1
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	3b04      	subs	r3, #4
 800f46e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f470:	4a0c      	ldr	r2, [pc, #48]	; (800f4a4 <pxPortInitialiseStack+0x64>)
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	3b14      	subs	r3, #20
 800f47a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	3b04      	subs	r3, #4
 800f486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	f06f 0202 	mvn.w	r2, #2
 800f48e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	3b20      	subs	r3, #32
 800f494:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f496:	68fb      	ldr	r3, [r7, #12]
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3714      	adds	r7, #20
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	0800f4a9 	.word	0x0800f4a9

0800f4a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f4b2:	4b12      	ldr	r3, [pc, #72]	; (800f4fc <prvTaskExitError+0x54>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ba:	d00a      	beq.n	800f4d2 <prvTaskExitError+0x2a>
	__asm volatile
 800f4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c0:	f383 8811 	msr	BASEPRI, r3
 800f4c4:	f3bf 8f6f 	isb	sy
 800f4c8:	f3bf 8f4f 	dsb	sy
 800f4cc:	60fb      	str	r3, [r7, #12]
}
 800f4ce:	bf00      	nop
 800f4d0:	e7fe      	b.n	800f4d0 <prvTaskExitError+0x28>
	__asm volatile
 800f4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	60bb      	str	r3, [r7, #8]
}
 800f4e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f4e6:	bf00      	nop
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d0fc      	beq.n	800f4e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f4ee:	bf00      	nop
 800f4f0:	bf00      	nop
 800f4f2:	3714      	adds	r7, #20
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr
 800f4fc:	200004f0 	.word	0x200004f0

0800f500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f500:	4b07      	ldr	r3, [pc, #28]	; (800f520 <pxCurrentTCBConst2>)
 800f502:	6819      	ldr	r1, [r3, #0]
 800f504:	6808      	ldr	r0, [r1, #0]
 800f506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f50a:	f380 8809 	msr	PSP, r0
 800f50e:	f3bf 8f6f 	isb	sy
 800f512:	f04f 0000 	mov.w	r0, #0
 800f516:	f380 8811 	msr	BASEPRI, r0
 800f51a:	4770      	bx	lr
 800f51c:	f3af 8000 	nop.w

0800f520 <pxCurrentTCBConst2>:
 800f520:	20000fac 	.word	0x20000fac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f524:	bf00      	nop
 800f526:	bf00      	nop

0800f528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f528:	4808      	ldr	r0, [pc, #32]	; (800f54c <prvPortStartFirstTask+0x24>)
 800f52a:	6800      	ldr	r0, [r0, #0]
 800f52c:	6800      	ldr	r0, [r0, #0]
 800f52e:	f380 8808 	msr	MSP, r0
 800f532:	f04f 0000 	mov.w	r0, #0
 800f536:	f380 8814 	msr	CONTROL, r0
 800f53a:	b662      	cpsie	i
 800f53c:	b661      	cpsie	f
 800f53e:	f3bf 8f4f 	dsb	sy
 800f542:	f3bf 8f6f 	isb	sy
 800f546:	df00      	svc	0
 800f548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f54a:	bf00      	nop
 800f54c:	e000ed08 	.word	0xe000ed08

0800f550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f556:	4b46      	ldr	r3, [pc, #280]	; (800f670 <xPortStartScheduler+0x120>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4a46      	ldr	r2, [pc, #280]	; (800f674 <xPortStartScheduler+0x124>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d10a      	bne.n	800f576 <xPortStartScheduler+0x26>
	__asm volatile
 800f560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f564:	f383 8811 	msr	BASEPRI, r3
 800f568:	f3bf 8f6f 	isb	sy
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	613b      	str	r3, [r7, #16]
}
 800f572:	bf00      	nop
 800f574:	e7fe      	b.n	800f574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f576:	4b3e      	ldr	r3, [pc, #248]	; (800f670 <xPortStartScheduler+0x120>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4a3f      	ldr	r2, [pc, #252]	; (800f678 <xPortStartScheduler+0x128>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d10a      	bne.n	800f596 <xPortStartScheduler+0x46>
	__asm volatile
 800f580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f584:	f383 8811 	msr	BASEPRI, r3
 800f588:	f3bf 8f6f 	isb	sy
 800f58c:	f3bf 8f4f 	dsb	sy
 800f590:	60fb      	str	r3, [r7, #12]
}
 800f592:	bf00      	nop
 800f594:	e7fe      	b.n	800f594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f596:	4b39      	ldr	r3, [pc, #228]	; (800f67c <xPortStartScheduler+0x12c>)
 800f598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	22ff      	movs	r2, #255	; 0xff
 800f5a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f5b0:	78fb      	ldrb	r3, [r7, #3]
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f5b8:	b2da      	uxtb	r2, r3
 800f5ba:	4b31      	ldr	r3, [pc, #196]	; (800f680 <xPortStartScheduler+0x130>)
 800f5bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f5be:	4b31      	ldr	r3, [pc, #196]	; (800f684 <xPortStartScheduler+0x134>)
 800f5c0:	2207      	movs	r2, #7
 800f5c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5c4:	e009      	b.n	800f5da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f5c6:	4b2f      	ldr	r3, [pc, #188]	; (800f684 <xPortStartScheduler+0x134>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	3b01      	subs	r3, #1
 800f5cc:	4a2d      	ldr	r2, [pc, #180]	; (800f684 <xPortStartScheduler+0x134>)
 800f5ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f5d0:	78fb      	ldrb	r3, [r7, #3]
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5da:	78fb      	ldrb	r3, [r7, #3]
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5e2:	2b80      	cmp	r3, #128	; 0x80
 800f5e4:	d0ef      	beq.n	800f5c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f5e6:	4b27      	ldr	r3, [pc, #156]	; (800f684 <xPortStartScheduler+0x134>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f1c3 0307 	rsb	r3, r3, #7
 800f5ee:	2b04      	cmp	r3, #4
 800f5f0:	d00a      	beq.n	800f608 <xPortStartScheduler+0xb8>
	__asm volatile
 800f5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f6:	f383 8811 	msr	BASEPRI, r3
 800f5fa:	f3bf 8f6f 	isb	sy
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	60bb      	str	r3, [r7, #8]
}
 800f604:	bf00      	nop
 800f606:	e7fe      	b.n	800f606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f608:	4b1e      	ldr	r3, [pc, #120]	; (800f684 <xPortStartScheduler+0x134>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	021b      	lsls	r3, r3, #8
 800f60e:	4a1d      	ldr	r2, [pc, #116]	; (800f684 <xPortStartScheduler+0x134>)
 800f610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f612:	4b1c      	ldr	r3, [pc, #112]	; (800f684 <xPortStartScheduler+0x134>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f61a:	4a1a      	ldr	r2, [pc, #104]	; (800f684 <xPortStartScheduler+0x134>)
 800f61c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	b2da      	uxtb	r2, r3
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f626:	4b18      	ldr	r3, [pc, #96]	; (800f688 <xPortStartScheduler+0x138>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4a17      	ldr	r2, [pc, #92]	; (800f688 <xPortStartScheduler+0x138>)
 800f62c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f632:	4b15      	ldr	r3, [pc, #84]	; (800f688 <xPortStartScheduler+0x138>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4a14      	ldr	r2, [pc, #80]	; (800f688 <xPortStartScheduler+0x138>)
 800f638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f63c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f63e:	f000 f8dd 	bl	800f7fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f642:	4b12      	ldr	r3, [pc, #72]	; (800f68c <xPortStartScheduler+0x13c>)
 800f644:	2200      	movs	r2, #0
 800f646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f648:	f000 f8fc 	bl	800f844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f64c:	4b10      	ldr	r3, [pc, #64]	; (800f690 <xPortStartScheduler+0x140>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a0f      	ldr	r2, [pc, #60]	; (800f690 <xPortStartScheduler+0x140>)
 800f652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f658:	f7ff ff66 	bl	800f528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f65c:	f7fe fd68 	bl	800e130 <vTaskSwitchContext>
	prvTaskExitError();
 800f660:	f7ff ff22 	bl	800f4a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f664:	2300      	movs	r3, #0
}
 800f666:	4618      	mov	r0, r3
 800f668:	3718      	adds	r7, #24
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	e000ed00 	.word	0xe000ed00
 800f674:	410fc271 	.word	0x410fc271
 800f678:	410fc270 	.word	0x410fc270
 800f67c:	e000e400 	.word	0xe000e400
 800f680:	200015e0 	.word	0x200015e0
 800f684:	200015e4 	.word	0x200015e4
 800f688:	e000ed20 	.word	0xe000ed20
 800f68c:	200004f0 	.word	0x200004f0
 800f690:	e000ef34 	.word	0xe000ef34

0800f694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
	__asm volatile
 800f69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f69e:	f383 8811 	msr	BASEPRI, r3
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	f3bf 8f4f 	dsb	sy
 800f6aa:	607b      	str	r3, [r7, #4]
}
 800f6ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f6ae:	4b0f      	ldr	r3, [pc, #60]	; (800f6ec <vPortEnterCritical+0x58>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	4a0d      	ldr	r2, [pc, #52]	; (800f6ec <vPortEnterCritical+0x58>)
 800f6b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f6b8:	4b0c      	ldr	r3, [pc, #48]	; (800f6ec <vPortEnterCritical+0x58>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d10f      	bne.n	800f6e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f6c0:	4b0b      	ldr	r3, [pc, #44]	; (800f6f0 <vPortEnterCritical+0x5c>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00a      	beq.n	800f6e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ce:	f383 8811 	msr	BASEPRI, r3
 800f6d2:	f3bf 8f6f 	isb	sy
 800f6d6:	f3bf 8f4f 	dsb	sy
 800f6da:	603b      	str	r3, [r7, #0]
}
 800f6dc:	bf00      	nop
 800f6de:	e7fe      	b.n	800f6de <vPortEnterCritical+0x4a>
	}
}
 800f6e0:	bf00      	nop
 800f6e2:	370c      	adds	r7, #12
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr
 800f6ec:	200004f0 	.word	0x200004f0
 800f6f0:	e000ed04 	.word	0xe000ed04

0800f6f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f6fa:	4b12      	ldr	r3, [pc, #72]	; (800f744 <vPortExitCritical+0x50>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d10a      	bne.n	800f718 <vPortExitCritical+0x24>
	__asm volatile
 800f702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f706:	f383 8811 	msr	BASEPRI, r3
 800f70a:	f3bf 8f6f 	isb	sy
 800f70e:	f3bf 8f4f 	dsb	sy
 800f712:	607b      	str	r3, [r7, #4]
}
 800f714:	bf00      	nop
 800f716:	e7fe      	b.n	800f716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f718:	4b0a      	ldr	r3, [pc, #40]	; (800f744 <vPortExitCritical+0x50>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	3b01      	subs	r3, #1
 800f71e:	4a09      	ldr	r2, [pc, #36]	; (800f744 <vPortExitCritical+0x50>)
 800f720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f722:	4b08      	ldr	r3, [pc, #32]	; (800f744 <vPortExitCritical+0x50>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d105      	bne.n	800f736 <vPortExitCritical+0x42>
 800f72a:	2300      	movs	r3, #0
 800f72c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	f383 8811 	msr	BASEPRI, r3
}
 800f734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f736:	bf00      	nop
 800f738:	370c      	adds	r7, #12
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop
 800f744:	200004f0 	.word	0x200004f0
	...

0800f750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f750:	f3ef 8009 	mrs	r0, PSP
 800f754:	f3bf 8f6f 	isb	sy
 800f758:	4b15      	ldr	r3, [pc, #84]	; (800f7b0 <pxCurrentTCBConst>)
 800f75a:	681a      	ldr	r2, [r3, #0]
 800f75c:	f01e 0f10 	tst.w	lr, #16
 800f760:	bf08      	it	eq
 800f762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76a:	6010      	str	r0, [r2, #0]
 800f76c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f770:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f774:	f380 8811 	msr	BASEPRI, r0
 800f778:	f3bf 8f4f 	dsb	sy
 800f77c:	f3bf 8f6f 	isb	sy
 800f780:	f7fe fcd6 	bl	800e130 <vTaskSwitchContext>
 800f784:	f04f 0000 	mov.w	r0, #0
 800f788:	f380 8811 	msr	BASEPRI, r0
 800f78c:	bc09      	pop	{r0, r3}
 800f78e:	6819      	ldr	r1, [r3, #0]
 800f790:	6808      	ldr	r0, [r1, #0]
 800f792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f796:	f01e 0f10 	tst.w	lr, #16
 800f79a:	bf08      	it	eq
 800f79c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f7a0:	f380 8809 	msr	PSP, r0
 800f7a4:	f3bf 8f6f 	isb	sy
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop
 800f7ac:	f3af 8000 	nop.w

0800f7b0 <pxCurrentTCBConst>:
 800f7b0:	20000fac 	.word	0x20000fac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f7b4:	bf00      	nop
 800f7b6:	bf00      	nop

0800f7b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c2:	f383 8811 	msr	BASEPRI, r3
 800f7c6:	f3bf 8f6f 	isb	sy
 800f7ca:	f3bf 8f4f 	dsb	sy
 800f7ce:	607b      	str	r3, [r7, #4]
}
 800f7d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f7d2:	f7fe fbf3 	bl	800dfbc <xTaskIncrementTick>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d003      	beq.n	800f7e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f7dc:	4b06      	ldr	r3, [pc, #24]	; (800f7f8 <xPortSysTickHandler+0x40>)
 800f7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7e2:	601a      	str	r2, [r3, #0]
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	f383 8811 	msr	BASEPRI, r3
}
 800f7ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f7f0:	bf00      	nop
 800f7f2:	3708      	adds	r7, #8
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	e000ed04 	.word	0xe000ed04

0800f7fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f800:	4b0b      	ldr	r3, [pc, #44]	; (800f830 <vPortSetupTimerInterrupt+0x34>)
 800f802:	2200      	movs	r2, #0
 800f804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f806:	4b0b      	ldr	r3, [pc, #44]	; (800f834 <vPortSetupTimerInterrupt+0x38>)
 800f808:	2200      	movs	r2, #0
 800f80a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f80c:	4b0a      	ldr	r3, [pc, #40]	; (800f838 <vPortSetupTimerInterrupt+0x3c>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a0a      	ldr	r2, [pc, #40]	; (800f83c <vPortSetupTimerInterrupt+0x40>)
 800f812:	fba2 2303 	umull	r2, r3, r2, r3
 800f816:	099b      	lsrs	r3, r3, #6
 800f818:	4a09      	ldr	r2, [pc, #36]	; (800f840 <vPortSetupTimerInterrupt+0x44>)
 800f81a:	3b01      	subs	r3, #1
 800f81c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f81e:	4b04      	ldr	r3, [pc, #16]	; (800f830 <vPortSetupTimerInterrupt+0x34>)
 800f820:	2207      	movs	r2, #7
 800f822:	601a      	str	r2, [r3, #0]
}
 800f824:	bf00      	nop
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop
 800f830:	e000e010 	.word	0xe000e010
 800f834:	e000e018 	.word	0xe000e018
 800f838:	20000008 	.word	0x20000008
 800f83c:	10624dd3 	.word	0x10624dd3
 800f840:	e000e014 	.word	0xe000e014

0800f844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f854 <vPortEnableVFP+0x10>
 800f848:	6801      	ldr	r1, [r0, #0]
 800f84a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f84e:	6001      	str	r1, [r0, #0]
 800f850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f852:	bf00      	nop
 800f854:	e000ed88 	.word	0xe000ed88

0800f858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f858:	b480      	push	{r7}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f85e:	f3ef 8305 	mrs	r3, IPSR
 800f862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2b0f      	cmp	r3, #15
 800f868:	d914      	bls.n	800f894 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f86a:	4a17      	ldr	r2, [pc, #92]	; (800f8c8 <vPortValidateInterruptPriority+0x70>)
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	4413      	add	r3, r2
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f874:	4b15      	ldr	r3, [pc, #84]	; (800f8cc <vPortValidateInterruptPriority+0x74>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	7afa      	ldrb	r2, [r7, #11]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d20a      	bcs.n	800f894 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	607b      	str	r3, [r7, #4]
}
 800f890:	bf00      	nop
 800f892:	e7fe      	b.n	800f892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f894:	4b0e      	ldr	r3, [pc, #56]	; (800f8d0 <vPortValidateInterruptPriority+0x78>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f89c:	4b0d      	ldr	r3, [pc, #52]	; (800f8d4 <vPortValidateInterruptPriority+0x7c>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d90a      	bls.n	800f8ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a8:	f383 8811 	msr	BASEPRI, r3
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f3bf 8f4f 	dsb	sy
 800f8b4:	603b      	str	r3, [r7, #0]
}
 800f8b6:	bf00      	nop
 800f8b8:	e7fe      	b.n	800f8b8 <vPortValidateInterruptPriority+0x60>
	}
 800f8ba:	bf00      	nop
 800f8bc:	3714      	adds	r7, #20
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop
 800f8c8:	e000e3f0 	.word	0xe000e3f0
 800f8cc:	200015e0 	.word	0x200015e0
 800f8d0:	e000ed0c 	.word	0xe000ed0c
 800f8d4:	200015e4 	.word	0x200015e4

0800f8d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08a      	sub	sp, #40	; 0x28
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f8e4:	f7fe fa9c 	bl	800de20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f8e8:	4b5b      	ldr	r3, [pc, #364]	; (800fa58 <pvPortMalloc+0x180>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d101      	bne.n	800f8f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f8f0:	f000 f920 	bl	800fb34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f8f4:	4b59      	ldr	r3, [pc, #356]	; (800fa5c <pvPortMalloc+0x184>)
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4013      	ands	r3, r2
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	f040 8093 	bne.w	800fa28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d01d      	beq.n	800f944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f908:	2208      	movs	r2, #8
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4413      	add	r3, r2
 800f90e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f003 0307 	and.w	r3, r3, #7
 800f916:	2b00      	cmp	r3, #0
 800f918:	d014      	beq.n	800f944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f023 0307 	bic.w	r3, r3, #7
 800f920:	3308      	adds	r3, #8
 800f922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f003 0307 	and.w	r3, r3, #7
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00a      	beq.n	800f944 <pvPortMalloc+0x6c>
	__asm volatile
 800f92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	617b      	str	r3, [r7, #20]
}
 800f940:	bf00      	nop
 800f942:	e7fe      	b.n	800f942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d06e      	beq.n	800fa28 <pvPortMalloc+0x150>
 800f94a:	4b45      	ldr	r3, [pc, #276]	; (800fa60 <pvPortMalloc+0x188>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	429a      	cmp	r2, r3
 800f952:	d869      	bhi.n	800fa28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f954:	4b43      	ldr	r3, [pc, #268]	; (800fa64 <pvPortMalloc+0x18c>)
 800f956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f958:	4b42      	ldr	r3, [pc, #264]	; (800fa64 <pvPortMalloc+0x18c>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f95e:	e004      	b.n	800f96a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	429a      	cmp	r2, r3
 800f972:	d903      	bls.n	800f97c <pvPortMalloc+0xa4>
 800f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d1f1      	bne.n	800f960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f97c:	4b36      	ldr	r3, [pc, #216]	; (800fa58 <pvPortMalloc+0x180>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f982:	429a      	cmp	r2, r3
 800f984:	d050      	beq.n	800fa28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f986:	6a3b      	ldr	r3, [r7, #32]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2208      	movs	r2, #8
 800f98c:	4413      	add	r3, r2
 800f98e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	6a3b      	ldr	r3, [r7, #32]
 800f996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99a:	685a      	ldr	r2, [r3, #4]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	1ad2      	subs	r2, r2, r3
 800f9a0:	2308      	movs	r3, #8
 800f9a2:	005b      	lsls	r3, r3, #1
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d91f      	bls.n	800f9e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4413      	add	r3, r2
 800f9ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9b0:	69bb      	ldr	r3, [r7, #24]
 800f9b2:	f003 0307 	and.w	r3, r3, #7
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00a      	beq.n	800f9d0 <pvPortMalloc+0xf8>
	__asm volatile
 800f9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9be:	f383 8811 	msr	BASEPRI, r3
 800f9c2:	f3bf 8f6f 	isb	sy
 800f9c6:	f3bf 8f4f 	dsb	sy
 800f9ca:	613b      	str	r3, [r7, #16]
}
 800f9cc:	bf00      	nop
 800f9ce:	e7fe      	b.n	800f9ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d2:	685a      	ldr	r2, [r3, #4]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	1ad2      	subs	r2, r2, r3
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f9e2:	69b8      	ldr	r0, [r7, #24]
 800f9e4:	f000 f908 	bl	800fbf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f9e8:	4b1d      	ldr	r3, [pc, #116]	; (800fa60 <pvPortMalloc+0x188>)
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	4a1b      	ldr	r2, [pc, #108]	; (800fa60 <pvPortMalloc+0x188>)
 800f9f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f9f6:	4b1a      	ldr	r3, [pc, #104]	; (800fa60 <pvPortMalloc+0x188>)
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	4b1b      	ldr	r3, [pc, #108]	; (800fa68 <pvPortMalloc+0x190>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d203      	bcs.n	800fa0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa02:	4b17      	ldr	r3, [pc, #92]	; (800fa60 <pvPortMalloc+0x188>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	4a18      	ldr	r2, [pc, #96]	; (800fa68 <pvPortMalloc+0x190>)
 800fa08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	4b13      	ldr	r3, [pc, #76]	; (800fa5c <pvPortMalloc+0x184>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	431a      	orrs	r2, r3
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fa1e:	4b13      	ldr	r3, [pc, #76]	; (800fa6c <pvPortMalloc+0x194>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	3301      	adds	r3, #1
 800fa24:	4a11      	ldr	r2, [pc, #68]	; (800fa6c <pvPortMalloc+0x194>)
 800fa26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fa28:	f7fe fa08 	bl	800de3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	f003 0307 	and.w	r3, r3, #7
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d00a      	beq.n	800fa4c <pvPortMalloc+0x174>
	__asm volatile
 800fa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa3a:	f383 8811 	msr	BASEPRI, r3
 800fa3e:	f3bf 8f6f 	isb	sy
 800fa42:	f3bf 8f4f 	dsb	sy
 800fa46:	60fb      	str	r3, [r7, #12]
}
 800fa48:	bf00      	nop
 800fa4a:	e7fe      	b.n	800fa4a <pvPortMalloc+0x172>
	return pvReturn;
 800fa4c:	69fb      	ldr	r3, [r7, #28]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3728      	adds	r7, #40	; 0x28
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	200051f0 	.word	0x200051f0
 800fa5c:	20005204 	.word	0x20005204
 800fa60:	200051f4 	.word	0x200051f4
 800fa64:	200051e8 	.word	0x200051e8
 800fa68:	200051f8 	.word	0x200051f8
 800fa6c:	200051fc 	.word	0x200051fc

0800fa70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b086      	sub	sp, #24
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d04d      	beq.n	800fb1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fa82:	2308      	movs	r3, #8
 800fa84:	425b      	negs	r3, r3
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	4413      	add	r3, r2
 800fa8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	685a      	ldr	r2, [r3, #4]
 800fa94:	4b24      	ldr	r3, [pc, #144]	; (800fb28 <vPortFree+0xb8>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4013      	ands	r3, r2
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d10a      	bne.n	800fab4 <vPortFree+0x44>
	__asm volatile
 800fa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa2:	f383 8811 	msr	BASEPRI, r3
 800faa6:	f3bf 8f6f 	isb	sy
 800faaa:	f3bf 8f4f 	dsb	sy
 800faae:	60fb      	str	r3, [r7, #12]
}
 800fab0:	bf00      	nop
 800fab2:	e7fe      	b.n	800fab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d00a      	beq.n	800fad2 <vPortFree+0x62>
	__asm volatile
 800fabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	60bb      	str	r3, [r7, #8]
}
 800face:	bf00      	nop
 800fad0:	e7fe      	b.n	800fad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	685a      	ldr	r2, [r3, #4]
 800fad6:	4b14      	ldr	r3, [pc, #80]	; (800fb28 <vPortFree+0xb8>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4013      	ands	r3, r2
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d01e      	beq.n	800fb1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d11a      	bne.n	800fb1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	685a      	ldr	r2, [r3, #4]
 800faec:	4b0e      	ldr	r3, [pc, #56]	; (800fb28 <vPortFree+0xb8>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	43db      	mvns	r3, r3
 800faf2:	401a      	ands	r2, r3
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800faf8:	f7fe f992 	bl	800de20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	685a      	ldr	r2, [r3, #4]
 800fb00:	4b0a      	ldr	r3, [pc, #40]	; (800fb2c <vPortFree+0xbc>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4413      	add	r3, r2
 800fb06:	4a09      	ldr	r2, [pc, #36]	; (800fb2c <vPortFree+0xbc>)
 800fb08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb0a:	6938      	ldr	r0, [r7, #16]
 800fb0c:	f000 f874 	bl	800fbf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fb10:	4b07      	ldr	r3, [pc, #28]	; (800fb30 <vPortFree+0xc0>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	3301      	adds	r3, #1
 800fb16:	4a06      	ldr	r2, [pc, #24]	; (800fb30 <vPortFree+0xc0>)
 800fb18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fb1a:	f7fe f98f 	bl	800de3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fb1e:	bf00      	nop
 800fb20:	3718      	adds	r7, #24
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	20005204 	.word	0x20005204
 800fb2c:	200051f4 	.word	0x200051f4
 800fb30:	20005200 	.word	0x20005200

0800fb34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fb34:	b480      	push	{r7}
 800fb36:	b085      	sub	sp, #20
 800fb38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fb3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fb3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fb40:	4b27      	ldr	r3, [pc, #156]	; (800fbe0 <prvHeapInit+0xac>)
 800fb42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f003 0307 	and.w	r3, r3, #7
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d00c      	beq.n	800fb68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	3307      	adds	r3, #7
 800fb52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f023 0307 	bic.w	r3, r3, #7
 800fb5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fb5c:	68ba      	ldr	r2, [r7, #8]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	1ad3      	subs	r3, r2, r3
 800fb62:	4a1f      	ldr	r2, [pc, #124]	; (800fbe0 <prvHeapInit+0xac>)
 800fb64:	4413      	add	r3, r2
 800fb66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb6c:	4a1d      	ldr	r2, [pc, #116]	; (800fbe4 <prvHeapInit+0xb0>)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fb72:	4b1c      	ldr	r3, [pc, #112]	; (800fbe4 <prvHeapInit+0xb0>)
 800fb74:	2200      	movs	r2, #0
 800fb76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	68ba      	ldr	r2, [r7, #8]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fb80:	2208      	movs	r2, #8
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	1a9b      	subs	r3, r3, r2
 800fb86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f023 0307 	bic.w	r3, r3, #7
 800fb8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	4a15      	ldr	r2, [pc, #84]	; (800fbe8 <prvHeapInit+0xb4>)
 800fb94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fb96:	4b14      	ldr	r3, [pc, #80]	; (800fbe8 <prvHeapInit+0xb4>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fb9e:	4b12      	ldr	r3, [pc, #72]	; (800fbe8 <prvHeapInit+0xb4>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	2200      	movs	r2, #0
 800fba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	68fa      	ldr	r2, [r7, #12]
 800fbae:	1ad2      	subs	r2, r2, r3
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fbb4:	4b0c      	ldr	r3, [pc, #48]	; (800fbe8 <prvHeapInit+0xb4>)
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	4a0a      	ldr	r2, [pc, #40]	; (800fbec <prvHeapInit+0xb8>)
 800fbc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	4a09      	ldr	r2, [pc, #36]	; (800fbf0 <prvHeapInit+0xbc>)
 800fbca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fbcc:	4b09      	ldr	r3, [pc, #36]	; (800fbf4 <prvHeapInit+0xc0>)
 800fbce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fbd2:	601a      	str	r2, [r3, #0]
}
 800fbd4:	bf00      	nop
 800fbd6:	3714      	adds	r7, #20
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr
 800fbe0:	200015e8 	.word	0x200015e8
 800fbe4:	200051e8 	.word	0x200051e8
 800fbe8:	200051f0 	.word	0x200051f0
 800fbec:	200051f8 	.word	0x200051f8
 800fbf0:	200051f4 	.word	0x200051f4
 800fbf4:	20005204 	.word	0x20005204

0800fbf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b085      	sub	sp, #20
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc00:	4b28      	ldr	r3, [pc, #160]	; (800fca4 <prvInsertBlockIntoFreeList+0xac>)
 800fc02:	60fb      	str	r3, [r7, #12]
 800fc04:	e002      	b.n	800fc0c <prvInsertBlockIntoFreeList+0x14>
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	60fb      	str	r3, [r7, #12]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d8f7      	bhi.n	800fc06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	68ba      	ldr	r2, [r7, #8]
 800fc20:	4413      	add	r3, r2
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d108      	bne.n	800fc3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	685a      	ldr	r2, [r3, #4]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	441a      	add	r2, r3
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	68ba      	ldr	r2, [r7, #8]
 800fc44:	441a      	add	r2, r3
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d118      	bne.n	800fc80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	4b15      	ldr	r3, [pc, #84]	; (800fca8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d00d      	beq.n	800fc76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	685a      	ldr	r2, [r3, #4]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	441a      	add	r2, r3
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	681a      	ldr	r2, [r3, #0]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	601a      	str	r2, [r3, #0]
 800fc74:	e008      	b.n	800fc88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fc76:	4b0c      	ldr	r3, [pc, #48]	; (800fca8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	601a      	str	r2, [r3, #0]
 800fc7e:	e003      	b.n	800fc88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d002      	beq.n	800fc96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc96:	bf00      	nop
 800fc98:	3714      	adds	r7, #20
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop
 800fca4:	200051e8 	.word	0x200051e8
 800fca8:	200051f0 	.word	0x200051f0

0800fcac <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	330c      	adds	r3, #12
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	6839      	ldr	r1, [r7, #0]
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f002 fa6b 	bl	801219c <tcpip_send_msg_wait_sem>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800fcca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d103      	bne.n	800fcda <netconn_apimsg+0x2e>
    return apimsg->err;
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fcd8:	e001      	b.n	800fcde <netconn_apimsg+0x32>
  }
  return err;
 800fcda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
	...

0800fce8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b08c      	sub	sp, #48	; 0x30
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	603a      	str	r2, [r7, #0]
 800fcf2:	71fb      	strb	r3, [r7, #7]
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800fcf8:	79fb      	ldrb	r3, [r7, #7]
 800fcfa:	6839      	ldr	r1, [r7, #0]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f001 f80b 	bl	8010d18 <netconn_alloc>
 800fd02:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800fd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d054      	beq.n	800fdb4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800fd0a:	79bb      	ldrb	r3, [r7, #6]
 800fd0c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800fd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd10:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800fd12:	f107 0308 	add.w	r3, r7, #8
 800fd16:	4619      	mov	r1, r3
 800fd18:	4829      	ldr	r0, [pc, #164]	; (800fdc0 <netconn_new_with_proto_and_callback+0xd8>)
 800fd1a:	f7ff ffc7 	bl	800fcac <netconn_apimsg>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800fd24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d043      	beq.n	800fdb4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800fd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d005      	beq.n	800fd40 <netconn_new_with_proto_and_callback+0x58>
 800fd34:	4b23      	ldr	r3, [pc, #140]	; (800fdc4 <netconn_new_with_proto_and_callback+0xdc>)
 800fd36:	22a3      	movs	r2, #163	; 0xa3
 800fd38:	4923      	ldr	r1, [pc, #140]	; (800fdc8 <netconn_new_with_proto_and_callback+0xe0>)
 800fd3a:	4824      	ldr	r0, [pc, #144]	; (800fdcc <netconn_new_with_proto_and_callback+0xe4>)
 800fd3c:	f011 f846 	bl	8020dcc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800fd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd42:	3310      	adds	r3, #16
 800fd44:	4618      	mov	r0, r3
 800fd46:	f010 fceb 	bl	8020720 <sys_mbox_valid>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d105      	bne.n	800fd5c <netconn_new_with_proto_and_callback+0x74>
 800fd50:	4b1c      	ldr	r3, [pc, #112]	; (800fdc4 <netconn_new_with_proto_and_callback+0xdc>)
 800fd52:	22a4      	movs	r2, #164	; 0xa4
 800fd54:	491e      	ldr	r1, [pc, #120]	; (800fdd0 <netconn_new_with_proto_and_callback+0xe8>)
 800fd56:	481d      	ldr	r0, [pc, #116]	; (800fdcc <netconn_new_with_proto_and_callback+0xe4>)
 800fd58:	f011 f838 	bl	8020dcc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800fd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5e:	3314      	adds	r3, #20
 800fd60:	4618      	mov	r0, r3
 800fd62:	f010 fcdd 	bl	8020720 <sys_mbox_valid>
 800fd66:	4603      	mov	r3, r0
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d005      	beq.n	800fd78 <netconn_new_with_proto_and_callback+0x90>
 800fd6c:	4b15      	ldr	r3, [pc, #84]	; (800fdc4 <netconn_new_with_proto_and_callback+0xdc>)
 800fd6e:	22a6      	movs	r2, #166	; 0xa6
 800fd70:	4918      	ldr	r1, [pc, #96]	; (800fdd4 <netconn_new_with_proto_and_callback+0xec>)
 800fd72:	4816      	ldr	r0, [pc, #88]	; (800fdcc <netconn_new_with_proto_and_callback+0xe4>)
 800fd74:	f011 f82a 	bl	8020dcc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800fd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7a:	330c      	adds	r3, #12
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f010 fd5d 	bl	802083c <sys_sem_valid>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d105      	bne.n	800fd94 <netconn_new_with_proto_and_callback+0xac>
 800fd88:	4b0e      	ldr	r3, [pc, #56]	; (800fdc4 <netconn_new_with_proto_and_callback+0xdc>)
 800fd8a:	22a9      	movs	r2, #169	; 0xa9
 800fd8c:	4912      	ldr	r1, [pc, #72]	; (800fdd8 <netconn_new_with_proto_and_callback+0xf0>)
 800fd8e:	480f      	ldr	r0, [pc, #60]	; (800fdcc <netconn_new_with_proto_and_callback+0xe4>)
 800fd90:	f011 f81c 	bl	8020dcc <iprintf>
      sys_sem_free(&conn->op_completed);
 800fd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd96:	330c      	adds	r3, #12
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f010 fd42 	bl	8020822 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800fd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda0:	3310      	adds	r3, #16
 800fda2:	4618      	mov	r0, r3
 800fda4:	f010 fc48 	bl	8020638 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800fda8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdaa:	2007      	movs	r0, #7
 800fdac:	f003 ff34 	bl	8013c18 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	e000      	b.n	800fdb6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800fdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3730      	adds	r7, #48	; 0x30
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	08010ced 	.word	0x08010ced
 800fdc4:	0802290c 	.word	0x0802290c
 800fdc8:	08022940 	.word	0x08022940
 800fdcc:	08022964 	.word	0x08022964
 800fdd0:	0802298c 	.word	0x0802298c
 800fdd4:	080229a4 	.word	0x080229a4
 800fdd8:	080229c8 	.word	0x080229c8

0800fddc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b08c      	sub	sp, #48	; 0x30
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d101      	bne.n	800fdee <netconn_prepare_delete+0x12>
    return ERR_OK;
 800fdea:	2300      	movs	r3, #0
 800fdec:	e014      	b.n	800fe18 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800fdf2:	2329      	movs	r3, #41	; 0x29
 800fdf4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800fdf6:	f107 030c 	add.w	r3, r7, #12
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	4808      	ldr	r0, [pc, #32]	; (800fe20 <netconn_prepare_delete+0x44>)
 800fdfe:	f7ff ff55 	bl	800fcac <netconn_apimsg>
 800fe02:	4603      	mov	r3, r0
 800fe04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800fe08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d002      	beq.n	800fe16 <netconn_prepare_delete+0x3a>
    return err;
 800fe10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800fe14:	e000      	b.n	800fe18 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800fe16:	2300      	movs	r3, #0
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3730      	adds	r7, #48	; 0x30
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	08011251 	.word	0x08011251

0800fe24 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d101      	bne.n	800fe36 <netconn_delete+0x12>
    return ERR_OK;
 800fe32:	2300      	movs	r3, #0
 800fe34:	e00d      	b.n	800fe52 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f7ff ffd0 	bl	800fddc <netconn_prepare_delete>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800fe40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d102      	bne.n	800fe4e <netconn_delete+0x2a>
    netconn_free(conn);
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f000 ffd3 	bl	8010df4 <netconn_free>
  }
  return err;
 800fe4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
	...

0800fe5c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b08e      	sub	sp, #56	; 0x38
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	4613      	mov	r3, r2
 800fe68:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d109      	bne.n	800fe84 <netconn_connect+0x28>
 800fe70:	4b11      	ldr	r3, [pc, #68]	; (800feb8 <netconn_connect+0x5c>)
 800fe72:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800fe76:	4911      	ldr	r1, [pc, #68]	; (800febc <netconn_connect+0x60>)
 800fe78:	4811      	ldr	r0, [pc, #68]	; (800fec0 <netconn_connect+0x64>)
 800fe7a:	f010 ffa7 	bl	8020dcc <iprintf>
 800fe7e:	f06f 030f 	mvn.w	r3, #15
 800fe82:	e015      	b.n	800feb0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d101      	bne.n	800fe8e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800fe8a:	4b0e      	ldr	r3, [pc, #56]	; (800fec4 <netconn_connect+0x68>)
 800fe8c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800fe96:	88fb      	ldrh	r3, [r7, #6]
 800fe98:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800fe9a:	f107 0314 	add.w	r3, r7, #20
 800fe9e:	4619      	mov	r1, r3
 800fea0:	4809      	ldr	r0, [pc, #36]	; (800fec8 <netconn_connect+0x6c>)
 800fea2:	f7ff ff03 	bl	800fcac <netconn_apimsg>
 800fea6:	4603      	mov	r3, r0
 800fea8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800feac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3738      	adds	r7, #56	; 0x38
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	0802290c 	.word	0x0802290c
 800febc:	08022a80 	.word	0x08022a80
 800fec0:	08022964 	.word	0x08022964
 800fec4:	08026684 	.word	0x08026684
 800fec8:	08011539 	.word	0x08011539

0800fecc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b088      	sub	sp, #32
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	60f8      	str	r0, [r7, #12]
 800fed4:	60b9      	str	r1, [r7, #8]
 800fed6:	4613      	mov	r3, r2
 800fed8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800feda:	2300      	movs	r3, #0
 800fedc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d109      	bne.n	800fef8 <netconn_recv_data+0x2c>
 800fee4:	4b58      	ldr	r3, [pc, #352]	; (8010048 <netconn_recv_data+0x17c>)
 800fee6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800feea:	4958      	ldr	r1, [pc, #352]	; (801004c <netconn_recv_data+0x180>)
 800feec:	4858      	ldr	r0, [pc, #352]	; (8010050 <netconn_recv_data+0x184>)
 800feee:	f010 ff6d 	bl	8020dcc <iprintf>
 800fef2:	f06f 030f 	mvn.w	r3, #15
 800fef6:	e0a2      	b.n	801003e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	2200      	movs	r2, #0
 800fefc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d109      	bne.n	800ff18 <netconn_recv_data+0x4c>
 800ff04:	4b50      	ldr	r3, [pc, #320]	; (8010048 <netconn_recv_data+0x17c>)
 800ff06:	f240 224a 	movw	r2, #586	; 0x24a
 800ff0a:	4952      	ldr	r1, [pc, #328]	; (8010054 <netconn_recv_data+0x188>)
 800ff0c:	4850      	ldr	r0, [pc, #320]	; (8010050 <netconn_recv_data+0x184>)
 800ff0e:	f010 ff5d 	bl	8020dcc <iprintf>
 800ff12:	f06f 030f 	mvn.w	r3, #15
 800ff16:	e092      	b.n	801003e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	3310      	adds	r3, #16
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f010 fbff 	bl	8020720 <sys_mbox_valid>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d10e      	bne.n	800ff46 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ff28:	68f8      	ldr	r0, [r7, #12]
 800ff2a:	f000 fad4 	bl	80104d6 <netconn_err>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800ff32:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d002      	beq.n	800ff40 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800ff3a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ff3e:	e07e      	b.n	801003e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800ff40:	f06f 030a 	mvn.w	r3, #10
 800ff44:	e07b      	b.n	801003e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	7f1b      	ldrb	r3, [r3, #28]
 800ff4a:	f003 0302 	and.w	r3, r3, #2
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d10f      	bne.n	800ff72 <netconn_recv_data+0xa6>
 800ff52:	79fb      	ldrb	r3, [r7, #7]
 800ff54:	f003 0304 	and.w	r3, r3, #4
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d10a      	bne.n	800ff72 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	7f1b      	ldrb	r3, [r3, #28]
 800ff60:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d104      	bne.n	800ff72 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d023      	beq.n	800ffba <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	3310      	adds	r3, #16
 800ff76:	f107 0218 	add.w	r2, r7, #24
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f010 fbb8 	bl	80206f2 <sys_arch_mbox_tryfetch>
 800ff82:	4603      	mov	r3, r0
 800ff84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff88:	d11f      	bne.n	800ffca <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800ff8a:	68f8      	ldr	r0, [r7, #12]
 800ff8c:	f000 faa3 	bl	80104d6 <netconn_err>
 800ff90:	4603      	mov	r3, r0
 800ff92:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800ff94:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d002      	beq.n	800ffa2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800ff9c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ffa0:	e04d      	b.n	801003e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	7f1b      	ldrb	r3, [r3, #28]
 800ffa6:	f003 0301 	and.w	r3, r3, #1
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d002      	beq.n	800ffb4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800ffae:	f06f 030a 	mvn.w	r3, #10
 800ffb2:	e044      	b.n	801003e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800ffb4:	f06f 0306 	mvn.w	r3, #6
 800ffb8:	e041      	b.n	801003e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	3310      	adds	r3, #16
 800ffbe:	f107 0118 	add.w	r1, r7, #24
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f010 fb63 	bl	8020690 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ffd2:	2b10      	cmp	r3, #16
 800ffd4:	d117      	bne.n	8010006 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	f107 0217 	add.w	r2, r7, #23
 800ffdc:	4611      	mov	r1, r2
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f000 fb26 	bl	8010630 <lwip_netconn_is_err_msg>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d009      	beq.n	800fffe <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ffea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ffee:	f113 0f0f 	cmn.w	r3, #15
 800fff2:	d101      	bne.n	800fff8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800fff4:	2300      	movs	r3, #0
 800fff6:	e022      	b.n	801003e <netconn_recv_data+0x172>
      }
      return err;
 800fff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fffc:	e01f      	b.n	801003e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800fffe:	69bb      	ldr	r3, [r7, #24]
 8010000:	891b      	ldrh	r3, [r3, #8]
 8010002:	83fb      	strh	r3, [r7, #30]
 8010004:	e00d      	b.n	8010022 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8010006:	69bb      	ldr	r3, [r7, #24]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d106      	bne.n	801001a <netconn_recv_data+0x14e>
 801000c:	4b0e      	ldr	r3, [pc, #56]	; (8010048 <netconn_recv_data+0x17c>)
 801000e:	f240 2291 	movw	r2, #657	; 0x291
 8010012:	4911      	ldr	r1, [pc, #68]	; (8010058 <netconn_recv_data+0x18c>)
 8010014:	480e      	ldr	r0, [pc, #56]	; (8010050 <netconn_recv_data+0x184>)
 8010016:	f010 fed9 	bl	8020dcc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	891b      	ldrh	r3, [r3, #8]
 8010020:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010026:	2b00      	cmp	r3, #0
 8010028:	d005      	beq.n	8010036 <netconn_recv_data+0x16a>
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801002e:	8bfa      	ldrh	r2, [r7, #30]
 8010030:	2101      	movs	r1, #1
 8010032:	68f8      	ldr	r0, [r7, #12]
 8010034:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8010036:	69ba      	ldr	r2, [r7, #24]
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801003c:	2300      	movs	r3, #0
}
 801003e:	4618      	mov	r0, r3
 8010040:	3720      	adds	r7, #32
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}
 8010046:	bf00      	nop
 8010048:	0802290c 	.word	0x0802290c
 801004c:	08022b24 	.word	0x08022b24
 8010050:	08022964 	.word	0x08022964
 8010054:	08022b44 	.word	0x08022b44
 8010058:	08022b60 	.word	0x08022b60

0801005c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b084      	sub	sp, #16
 8010060:	af00      	add	r7, sp, #0
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d005      	beq.n	801007a <netconn_tcp_recvd_msg+0x1e>
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010076:	2b10      	cmp	r3, #16
 8010078:	d009      	beq.n	801008e <netconn_tcp_recvd_msg+0x32>
 801007a:	4b0c      	ldr	r3, [pc, #48]	; (80100ac <netconn_tcp_recvd_msg+0x50>)
 801007c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8010080:	490b      	ldr	r1, [pc, #44]	; (80100b0 <netconn_tcp_recvd_msg+0x54>)
 8010082:	480c      	ldr	r0, [pc, #48]	; (80100b4 <netconn_tcp_recvd_msg+0x58>)
 8010084:	f010 fea2 	bl	8020dcc <iprintf>
 8010088:	f06f 030f 	mvn.w	r3, #15
 801008c:	e00a      	b.n	80100a4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	68ba      	ldr	r2, [r7, #8]
 8010098:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 801009a:	6879      	ldr	r1, [r7, #4]
 801009c:	4806      	ldr	r0, [pc, #24]	; (80100b8 <netconn_tcp_recvd_msg+0x5c>)
 801009e:	f7ff fe05 	bl	800fcac <netconn_apimsg>
 80100a2:	4603      	mov	r3, r0
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	0802290c 	.word	0x0802290c
 80100b0:	08022b6c 	.word	0x08022b6c
 80100b4:	08022964 	.word	0x08022964
 80100b8:	080116b5 	.word	0x080116b5

080100bc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b090      	sub	sp, #64	; 0x40
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	4613      	mov	r3, r2
 80100c8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	3310      	adds	r3, #16
 80100ce:	4618      	mov	r0, r3
 80100d0:	f010 fb26 	bl	8020720 <sys_mbox_valid>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d102      	bne.n	80100e0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80100da:	f06f 030a 	mvn.w	r3, #10
 80100de:	e06d      	b.n	80101bc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	7f1b      	ldrb	r3, [r3, #28]
 80100e4:	b25b      	sxtb	r3, r3
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	da07      	bge.n	80100fa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	7f1b      	ldrb	r3, [r3, #28]
 80100ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100f2:	b2da      	uxtb	r2, r3
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80100f8:	e039      	b.n	801016e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80100fa:	79fb      	ldrb	r3, [r7, #7]
 80100fc:	461a      	mov	r2, r3
 80100fe:	68b9      	ldr	r1, [r7, #8]
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	f7ff fee3 	bl	800fecc <netconn_recv_data>
 8010106:	4603      	mov	r3, r0
 8010108:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 801010c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010110:	2b00      	cmp	r3, #0
 8010112:	d002      	beq.n	801011a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8010114:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010118:	e050      	b.n	80101bc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8010120:	79fb      	ldrb	r3, [r7, #7]
 8010122:	f003 0308 	and.w	r3, r3, #8
 8010126:	2b00      	cmp	r3, #0
 8010128:	d10e      	bne.n	8010148 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 801012a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012c:	2b00      	cmp	r3, #0
 801012e:	d002      	beq.n	8010136 <netconn_recv_data_tcp+0x7a>
 8010130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010132:	891b      	ldrh	r3, [r3, #8]
 8010134:	e000      	b.n	8010138 <netconn_recv_data_tcp+0x7c>
 8010136:	2301      	movs	r3, #1
 8010138:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 801013a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801013c:	f107 0214 	add.w	r2, r7, #20
 8010140:	4619      	mov	r1, r3
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f7ff ff8a 	bl	801005c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8010148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014a:	2b00      	cmp	r3, #0
 801014c:	d134      	bne.n	80101b8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 801014e:	79fb      	ldrb	r3, [r7, #7]
 8010150:	f003 0310 	and.w	r3, r3, #16
 8010154:	2b00      	cmp	r3, #0
 8010156:	d009      	beq.n	801016c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	7f1b      	ldrb	r3, [r3, #28]
 801015c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010160:	b2da      	uxtb	r2, r3
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8010166:	f06f 0306 	mvn.w	r3, #6
 801016a:	e027      	b.n	80101bc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 801016c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010172:	2b00      	cmp	r3, #0
 8010174:	d005      	beq.n	8010182 <netconn_recv_data_tcp+0xc6>
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017a:	2200      	movs	r2, #0
 801017c:	2101      	movs	r1, #1
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	685b      	ldr	r3, [r3, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d10f      	bne.n	80101aa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f000 f9a3 	bl	80104d6 <netconn_err>
 8010190:	4603      	mov	r3, r0
 8010192:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8010196:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801019a:	2b00      	cmp	r3, #0
 801019c:	d002      	beq.n	80101a4 <netconn_recv_data_tcp+0xe8>
          return err;
 801019e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80101a2:	e00b      	b.n	80101bc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80101a4:	f06f 030d 	mvn.w	r3, #13
 80101a8:	e008      	b.n	80101bc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80101aa:	2101      	movs	r1, #1
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f000 f955 	bl	801045c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80101b2:	f06f 030e 	mvn.w	r3, #14
 80101b6:	e001      	b.n	80101bc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80101b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3740      	adds	r7, #64	; 0x40
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b086      	sub	sp, #24
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80101ce:	2300      	movs	r3, #0
 80101d0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d109      	bne.n	80101ec <netconn_recv+0x28>
 80101d8:	4b32      	ldr	r3, [pc, #200]	; (80102a4 <netconn_recv+0xe0>)
 80101da:	f240 3263 	movw	r2, #867	; 0x363
 80101de:	4932      	ldr	r1, [pc, #200]	; (80102a8 <netconn_recv+0xe4>)
 80101e0:	4832      	ldr	r0, [pc, #200]	; (80102ac <netconn_recv+0xe8>)
 80101e2:	f010 fdf3 	bl	8020dcc <iprintf>
 80101e6:	f06f 030f 	mvn.w	r3, #15
 80101ea:	e056      	b.n	801029a <netconn_recv+0xd6>
  *new_buf = NULL;
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	2200      	movs	r2, #0
 80101f0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d109      	bne.n	801020c <netconn_recv+0x48>
 80101f8:	4b2a      	ldr	r3, [pc, #168]	; (80102a4 <netconn_recv+0xe0>)
 80101fa:	f240 3265 	movw	r2, #869	; 0x365
 80101fe:	492c      	ldr	r1, [pc, #176]	; (80102b0 <netconn_recv+0xec>)
 8010200:	482a      	ldr	r0, [pc, #168]	; (80102ac <netconn_recv+0xe8>)
 8010202:	f010 fde3 	bl	8020dcc <iprintf>
 8010206:	f06f 030f 	mvn.w	r3, #15
 801020a:	e046      	b.n	801029a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010214:	2b10      	cmp	r3, #16
 8010216:	d13a      	bne.n	801028e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8010218:	2300      	movs	r3, #0
 801021a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801021c:	2006      	movs	r0, #6
 801021e:	f003 fca9 	bl	8013b74 <memp_malloc>
 8010222:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d102      	bne.n	8010230 <netconn_recv+0x6c>
      return ERR_MEM;
 801022a:	f04f 33ff 	mov.w	r3, #4294967295
 801022e:	e034      	b.n	801029a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8010230:	f107 030c 	add.w	r3, r7, #12
 8010234:	2200      	movs	r2, #0
 8010236:	4619      	mov	r1, r3
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7ff ff3f 	bl	80100bc <netconn_recv_data_tcp>
 801023e:	4603      	mov	r3, r0
 8010240:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010242:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d006      	beq.n	8010258 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 801024a:	6979      	ldr	r1, [r7, #20]
 801024c:	2006      	movs	r0, #6
 801024e:	f003 fce3 	bl	8013c18 <memp_free>
      return err;
 8010252:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010256:	e020      	b.n	801029a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d106      	bne.n	801026c <netconn_recv+0xa8>
 801025e:	4b11      	ldr	r3, [pc, #68]	; (80102a4 <netconn_recv+0xe0>)
 8010260:	f240 3279 	movw	r2, #889	; 0x379
 8010264:	4913      	ldr	r1, [pc, #76]	; (80102b4 <netconn_recv+0xf0>)
 8010266:	4811      	ldr	r0, [pc, #68]	; (80102ac <netconn_recv+0xe8>)
 8010268:	f010 fdb0 	bl	8020dcc <iprintf>

    buf->p = p;
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010272:	68fa      	ldr	r2, [r7, #12]
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	2200      	movs	r2, #0
 801027c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	2200      	movs	r2, #0
 8010282:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	697a      	ldr	r2, [r7, #20]
 8010288:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 801028a:	2300      	movs	r3, #0
 801028c:	e005      	b.n	801029a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 801028e:	2200      	movs	r2, #0
 8010290:	6839      	ldr	r1, [r7, #0]
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f7ff fe1a 	bl	800fecc <netconn_recv_data>
 8010298:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 801029a:	4618      	mov	r0, r3
 801029c:	3718      	adds	r7, #24
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	0802290c 	.word	0x0802290c
 80102a8:	08022b24 	.word	0x08022b24
 80102ac:	08022964 	.word	0x08022964
 80102b0:	08022b44 	.word	0x08022b44
 80102b4:	08022bbc 	.word	0x08022bbc

080102b8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b088      	sub	sp, #32
 80102bc:	af02      	add	r7, sp, #8
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	607a      	str	r2, [r7, #4]
 80102c4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80102ce:	78fa      	ldrb	r2, [r7, #3]
 80102d0:	f107 0110 	add.w	r1, r7, #16
 80102d4:	6a3b      	ldr	r3, [r7, #32]
 80102d6:	9300      	str	r3, [sp, #0]
 80102d8:	4613      	mov	r3, r2
 80102da:	2201      	movs	r2, #1
 80102dc:	68f8      	ldr	r0, [r7, #12]
 80102de:	f000 f805 	bl	80102ec <netconn_write_vectors_partly>
 80102e2:	4603      	mov	r3, r0
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3718      	adds	r7, #24
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b092      	sub	sp, #72	; 0x48
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	4611      	mov	r1, r2
 80102f8:	461a      	mov	r2, r3
 80102fa:	460b      	mov	r3, r1
 80102fc:	80fb      	strh	r3, [r7, #6]
 80102fe:	4613      	mov	r3, r2
 8010300:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d109      	bne.n	801031c <netconn_write_vectors_partly+0x30>
 8010308:	4b4e      	ldr	r3, [pc, #312]	; (8010444 <netconn_write_vectors_partly+0x158>)
 801030a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801030e:	494e      	ldr	r1, [pc, #312]	; (8010448 <netconn_write_vectors_partly+0x15c>)
 8010310:	484e      	ldr	r0, [pc, #312]	; (801044c <netconn_write_vectors_partly+0x160>)
 8010312:	f010 fd5b 	bl	8020dcc <iprintf>
 8010316:	f06f 030f 	mvn.w	r3, #15
 801031a:	e08e      	b.n	801043a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010324:	2b10      	cmp	r3, #16
 8010326:	d009      	beq.n	801033c <netconn_write_vectors_partly+0x50>
 8010328:	4b46      	ldr	r3, [pc, #280]	; (8010444 <netconn_write_vectors_partly+0x158>)
 801032a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801032e:	4948      	ldr	r1, [pc, #288]	; (8010450 <netconn_write_vectors_partly+0x164>)
 8010330:	4846      	ldr	r0, [pc, #280]	; (801044c <netconn_write_vectors_partly+0x160>)
 8010332:	f010 fd4b 	bl	8020dcc <iprintf>
 8010336:	f06f 0305 	mvn.w	r3, #5
 801033a:	e07e      	b.n	801043a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	7f1b      	ldrb	r3, [r3, #28]
 8010340:	f003 0302 	and.w	r3, r3, #2
 8010344:	2b00      	cmp	r3, #0
 8010346:	d104      	bne.n	8010352 <netconn_write_vectors_partly+0x66>
 8010348:	797b      	ldrb	r3, [r7, #5]
 801034a:	f003 0304 	and.w	r3, r3, #4
 801034e:	2b00      	cmp	r3, #0
 8010350:	d001      	beq.n	8010356 <netconn_write_vectors_partly+0x6a>
 8010352:	2301      	movs	r3, #1
 8010354:	e000      	b.n	8010358 <netconn_write_vectors_partly+0x6c>
 8010356:	2300      	movs	r3, #0
 8010358:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 801035c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010360:	2b00      	cmp	r3, #0
 8010362:	d005      	beq.n	8010370 <netconn_write_vectors_partly+0x84>
 8010364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010366:	2b00      	cmp	r3, #0
 8010368:	d102      	bne.n	8010370 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 801036a:	f06f 0305 	mvn.w	r3, #5
 801036e:	e064      	b.n	801043a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8010370:	2300      	movs	r3, #0
 8010372:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8010374:	2300      	movs	r3, #0
 8010376:	643b      	str	r3, [r7, #64]	; 0x40
 8010378:	e015      	b.n	80103a6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 801037a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801037c:	00db      	lsls	r3, r3, #3
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	4413      	add	r3, r2
 8010382:	685b      	ldr	r3, [r3, #4]
 8010384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010386:	4413      	add	r3, r2
 8010388:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 801038a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801038c:	00db      	lsls	r3, r3, #3
 801038e:	68ba      	ldr	r2, [r7, #8]
 8010390:	4413      	add	r3, r2
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010396:	429a      	cmp	r2, r3
 8010398:	d202      	bcs.n	80103a0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 801039a:	f06f 0305 	mvn.w	r3, #5
 801039e:	e04c      	b.n	801043a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80103a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a2:	3301      	adds	r3, #1
 80103a4:	643b      	str	r3, [r7, #64]	; 0x40
 80103a6:	88fb      	ldrh	r3, [r7, #6]
 80103a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80103aa:	429a      	cmp	r2, r3
 80103ac:	dbe5      	blt.n	801037a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80103ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d101      	bne.n	80103b8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80103b4:	2300      	movs	r3, #0
 80103b6:	e040      	b.n	801043a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80103b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	da0a      	bge.n	80103d4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80103be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d102      	bne.n	80103ca <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80103c4:	f06f 0305 	mvn.w	r3, #5
 80103c8:	e037      	b.n	801043a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80103ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80103ce:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80103d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80103dc:	88fb      	ldrh	r3, [r7, #6]
 80103de:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80103e0:	2300      	movs	r3, #0
 80103e2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80103e4:	797b      	ldrb	r3, [r7, #5]
 80103e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80103ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103ec:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80103ee:	2300      	movs	r3, #0
 80103f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80103f2:	f107 0314 	add.w	r3, r7, #20
 80103f6:	4619      	mov	r1, r3
 80103f8:	4816      	ldr	r0, [pc, #88]	; (8010454 <netconn_write_vectors_partly+0x168>)
 80103fa:	f7ff fc57 	bl	800fcac <netconn_apimsg>
 80103fe:	4603      	mov	r3, r0
 8010400:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8010404:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010408:	2b00      	cmp	r3, #0
 801040a:	d114      	bne.n	8010436 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 801040c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801040e:	2b00      	cmp	r3, #0
 8010410:	d002      	beq.n	8010418 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8010412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010416:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8010418:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801041c:	2b00      	cmp	r3, #0
 801041e:	d10a      	bne.n	8010436 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8010420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010424:	429a      	cmp	r2, r3
 8010426:	d006      	beq.n	8010436 <netconn_write_vectors_partly+0x14a>
 8010428:	4b06      	ldr	r3, [pc, #24]	; (8010444 <netconn_write_vectors_partly+0x158>)
 801042a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801042e:	490a      	ldr	r1, [pc, #40]	; (8010458 <netconn_write_vectors_partly+0x16c>)
 8010430:	4806      	ldr	r0, [pc, #24]	; (801044c <netconn_write_vectors_partly+0x160>)
 8010432:	f010 fccb 	bl	8020dcc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8010436:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801043a:	4618      	mov	r0, r3
 801043c:	3748      	adds	r7, #72	; 0x48
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
 8010442:	bf00      	nop
 8010444:	0802290c 	.word	0x0802290c
 8010448:	08022be4 	.word	0x08022be4
 801044c:	08022964 	.word	0x08022964
 8010450:	08022c00 	.word	0x08022c00
 8010454:	08011ab9 	.word	0x08011ab9
 8010458:	08022c24 	.word	0x08022c24

0801045c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b08c      	sub	sp, #48	; 0x30
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	460b      	mov	r3, r1
 8010466:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d109      	bne.n	8010482 <netconn_close_shutdown+0x26>
 801046e:	4b0f      	ldr	r3, [pc, #60]	; (80104ac <netconn_close_shutdown+0x50>)
 8010470:	f240 4247 	movw	r2, #1095	; 0x447
 8010474:	490e      	ldr	r1, [pc, #56]	; (80104b0 <netconn_close_shutdown+0x54>)
 8010476:	480f      	ldr	r0, [pc, #60]	; (80104b4 <netconn_close_shutdown+0x58>)
 8010478:	f010 fca8 	bl	8020dcc <iprintf>
 801047c:	f06f 030f 	mvn.w	r3, #15
 8010480:	e010      	b.n	80104a4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8010486:	78fb      	ldrb	r3, [r7, #3]
 8010488:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801048a:	2329      	movs	r3, #41	; 0x29
 801048c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801048e:	f107 030c 	add.w	r3, r7, #12
 8010492:	4619      	mov	r1, r3
 8010494:	4808      	ldr	r0, [pc, #32]	; (80104b8 <netconn_close_shutdown+0x5c>)
 8010496:	f7ff fc09 	bl	800fcac <netconn_apimsg>
 801049a:	4603      	mov	r3, r0
 801049c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80104a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3730      	adds	r7, #48	; 0x30
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	0802290c 	.word	0x0802290c
 80104b0:	08022c48 	.word	0x08022c48
 80104b4:	08022964 	.word	0x08022964
 80104b8:	08011bd1 	.word	0x08011bd1

080104bc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80104c4:	2103      	movs	r1, #3
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f7ff ffc8 	bl	801045c <netconn_close_shutdown>
 80104cc:	4603      	mov	r3, r0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b084      	sub	sp, #16
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d101      	bne.n	80104e8 <netconn_err+0x12>
    return ERR_OK;
 80104e4:	2300      	movs	r3, #0
 80104e6:	e00d      	b.n	8010504 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80104e8:	f010 fa24 	bl	8020934 <sys_arch_protect>
 80104ec:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	7a1b      	ldrb	r3, [r3, #8]
 80104f2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2200      	movs	r2, #0
 80104f8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80104fa:	68f8      	ldr	r0, [r7, #12]
 80104fc:	f010 fa28 	bl	8020950 <sys_arch_unprotect>
  return err;
 8010500:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3710      	adds	r7, #16
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b08a      	sub	sp, #40	; 0x28
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d109      	bne.n	8010530 <netconn_gethostbyname+0x24>
 801051c:	4b24      	ldr	r3, [pc, #144]	; (80105b0 <netconn_gethostbyname+0xa4>)
 801051e:	f240 5204 	movw	r2, #1284	; 0x504
 8010522:	4924      	ldr	r1, [pc, #144]	; (80105b4 <netconn_gethostbyname+0xa8>)
 8010524:	4824      	ldr	r0, [pc, #144]	; (80105b8 <netconn_gethostbyname+0xac>)
 8010526:	f010 fc51 	bl	8020dcc <iprintf>
 801052a:	f06f 030f 	mvn.w	r3, #15
 801052e:	e03b      	b.n	80105a8 <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d109      	bne.n	801054a <netconn_gethostbyname+0x3e>
 8010536:	4b1e      	ldr	r3, [pc, #120]	; (80105b0 <netconn_gethostbyname+0xa4>)
 8010538:	f240 5205 	movw	r2, #1285	; 0x505
 801053c:	491f      	ldr	r1, [pc, #124]	; (80105bc <netconn_gethostbyname+0xb0>)
 801053e:	481e      	ldr	r0, [pc, #120]	; (80105b8 <netconn_gethostbyname+0xac>)
 8010540:	f010 fc44 	bl	8020dcc <iprintf>
 8010544:	f06f 030f 	mvn.w	r3, #15
 8010548:	e02e      	b.n	80105a8 <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 801054a:	f107 030f 	add.w	r3, r7, #15
 801054e:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 8010550:	f107 0310 	add.w	r3, r7, #16
 8010554:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	2100      	movs	r1, #0
 8010562:	4618      	mov	r0, r3
 8010564:	f010 f8fa 	bl	802075c <sys_sem_new>
 8010568:	4603      	mov	r3, r0
 801056a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801056c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d002      	beq.n	801057a <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 8010574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010578:	e016      	b.n	80105a8 <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 801057a:	69fa      	ldr	r2, [r7, #28]
 801057c:	f107 0314 	add.w	r3, r7, #20
 8010580:	4619      	mov	r1, r3
 8010582:	480f      	ldr	r0, [pc, #60]	; (80105c0 <netconn_gethostbyname+0xb4>)
 8010584:	f001 fe0a 	bl	801219c <tcpip_send_msg_wait_sem>
 8010588:	4603      	mov	r3, r0
 801058a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	4618      	mov	r0, r3
 8010592:	f010 f946 	bl	8020822 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 8010596:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801059a:	2b00      	cmp	r3, #0
 801059c:	d002      	beq.n	80105a4 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 801059e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80105a2:	e001      	b.n	80105a8 <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 80105a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3728      	adds	r7, #40	; 0x28
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	0802290c 	.word	0x0802290c
 80105b4:	08022c64 	.word	0x08022c64
 80105b8:	08022964 	.word	0x08022964
 80105bc:	08022c88 	.word	0x08022c88
 80105c0:	08011d2d 	.word	0x08011d2d

080105c4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	4603      	mov	r3, r0
 80105cc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80105ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105d2:	f113 0f0d 	cmn.w	r3, #13
 80105d6:	d009      	beq.n	80105ec <lwip_netconn_err_to_msg+0x28>
 80105d8:	f113 0f0d 	cmn.w	r3, #13
 80105dc:	dc0c      	bgt.n	80105f8 <lwip_netconn_err_to_msg+0x34>
 80105de:	f113 0f0f 	cmn.w	r3, #15
 80105e2:	d007      	beq.n	80105f4 <lwip_netconn_err_to_msg+0x30>
 80105e4:	f113 0f0e 	cmn.w	r3, #14
 80105e8:	d002      	beq.n	80105f0 <lwip_netconn_err_to_msg+0x2c>
 80105ea:	e005      	b.n	80105f8 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80105ec:	4b0a      	ldr	r3, [pc, #40]	; (8010618 <lwip_netconn_err_to_msg+0x54>)
 80105ee:	e00e      	b.n	801060e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80105f0:	4b0a      	ldr	r3, [pc, #40]	; (801061c <lwip_netconn_err_to_msg+0x58>)
 80105f2:	e00c      	b.n	801060e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80105f4:	4b0a      	ldr	r3, [pc, #40]	; (8010620 <lwip_netconn_err_to_msg+0x5c>)
 80105f6:	e00a      	b.n	801060e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80105f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d005      	beq.n	801060c <lwip_netconn_err_to_msg+0x48>
 8010600:	4b08      	ldr	r3, [pc, #32]	; (8010624 <lwip_netconn_err_to_msg+0x60>)
 8010602:	227d      	movs	r2, #125	; 0x7d
 8010604:	4908      	ldr	r1, [pc, #32]	; (8010628 <lwip_netconn_err_to_msg+0x64>)
 8010606:	4809      	ldr	r0, [pc, #36]	; (801062c <lwip_netconn_err_to_msg+0x68>)
 8010608:	f010 fbe0 	bl	8020dcc <iprintf>
      return NULL;
 801060c:	2300      	movs	r3, #0
  }
}
 801060e:	4618      	mov	r0, r3
 8010610:	3708      	adds	r7, #8
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	08026548 	.word	0x08026548
 801061c:	08026549 	.word	0x08026549
 8010620:	0802654a 	.word	0x0802654a
 8010624:	08022cac 	.word	0x08022cac
 8010628:	08022ce0 	.word	0x08022ce0
 801062c:	08022cf0 	.word	0x08022cf0

08010630 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d105      	bne.n	801064c <lwip_netconn_is_err_msg+0x1c>
 8010640:	4b12      	ldr	r3, [pc, #72]	; (801068c <lwip_netconn_is_err_msg+0x5c>)
 8010642:	2285      	movs	r2, #133	; 0x85
 8010644:	4912      	ldr	r1, [pc, #72]	; (8010690 <lwip_netconn_is_err_msg+0x60>)
 8010646:	4813      	ldr	r0, [pc, #76]	; (8010694 <lwip_netconn_is_err_msg+0x64>)
 8010648:	f010 fbc0 	bl	8020dcc <iprintf>

  if (msg == &netconn_aborted) {
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	4a12      	ldr	r2, [pc, #72]	; (8010698 <lwip_netconn_is_err_msg+0x68>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d104      	bne.n	801065e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	22f3      	movs	r2, #243	; 0xf3
 8010658:	701a      	strb	r2, [r3, #0]
    return 1;
 801065a:	2301      	movs	r3, #1
 801065c:	e012      	b.n	8010684 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	4a0e      	ldr	r2, [pc, #56]	; (801069c <lwip_netconn_is_err_msg+0x6c>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d104      	bne.n	8010670 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	22f2      	movs	r2, #242	; 0xf2
 801066a:	701a      	strb	r2, [r3, #0]
    return 1;
 801066c:	2301      	movs	r3, #1
 801066e:	e009      	b.n	8010684 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	4a0b      	ldr	r2, [pc, #44]	; (80106a0 <lwip_netconn_is_err_msg+0x70>)
 8010674:	4293      	cmp	r3, r2
 8010676:	d104      	bne.n	8010682 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	22f1      	movs	r2, #241	; 0xf1
 801067c:	701a      	strb	r2, [r3, #0]
    return 1;
 801067e:	2301      	movs	r3, #1
 8010680:	e000      	b.n	8010684 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8010682:	2300      	movs	r3, #0
}
 8010684:	4618      	mov	r0, r3
 8010686:	3708      	adds	r7, #8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}
 801068c:	08022cac 	.word	0x08022cac
 8010690:	08022d18 	.word	0x08022d18
 8010694:	08022cf0 	.word	0x08022cf0
 8010698:	08026548 	.word	0x08026548
 801069c:	08026549 	.word	0x08026549
 80106a0:	0802654a 	.word	0x0802654a

080106a4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b088      	sub	sp, #32
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	607a      	str	r2, [r7, #4]
 80106b0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d105      	bne.n	80106c4 <recv_udp+0x20>
 80106b8:	4b34      	ldr	r3, [pc, #208]	; (801078c <recv_udp+0xe8>)
 80106ba:	22e5      	movs	r2, #229	; 0xe5
 80106bc:	4934      	ldr	r1, [pc, #208]	; (8010790 <recv_udp+0xec>)
 80106be:	4835      	ldr	r0, [pc, #212]	; (8010794 <recv_udp+0xf0>)
 80106c0:	f010 fb84 	bl	8020dcc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d105      	bne.n	80106d6 <recv_udp+0x32>
 80106ca:	4b30      	ldr	r3, [pc, #192]	; (801078c <recv_udp+0xe8>)
 80106cc:	22e6      	movs	r2, #230	; 0xe6
 80106ce:	4932      	ldr	r1, [pc, #200]	; (8010798 <recv_udp+0xf4>)
 80106d0:	4830      	ldr	r0, [pc, #192]	; (8010794 <recv_udp+0xf0>)
 80106d2:	f010 fb7b 	bl	8020dcc <iprintf>
  conn = (struct netconn *)arg;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80106da:	69fb      	ldr	r3, [r7, #28]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d103      	bne.n	80106e8 <recv_udp+0x44>
    pbuf_free(p);
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f004 f949 	bl	8014978 <pbuf_free>
    return;
 80106e6:	e04d      	b.n	8010784 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	68ba      	ldr	r2, [r7, #8]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d005      	beq.n	80106fe <recv_udp+0x5a>
 80106f2:	4b26      	ldr	r3, [pc, #152]	; (801078c <recv_udp+0xe8>)
 80106f4:	22ee      	movs	r2, #238	; 0xee
 80106f6:	4929      	ldr	r1, [pc, #164]	; (801079c <recv_udp+0xf8>)
 80106f8:	4826      	ldr	r0, [pc, #152]	; (8010794 <recv_udp+0xf0>)
 80106fa:	f010 fb67 	bl	8020dcc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	3310      	adds	r3, #16
 8010702:	4618      	mov	r0, r3
 8010704:	f010 f80c 	bl	8020720 <sys_mbox_valid>
 8010708:	4603      	mov	r3, r0
 801070a:	2b00      	cmp	r3, #0
 801070c:	d103      	bne.n	8010716 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f004 f932 	bl	8014978 <pbuf_free>
    return;
 8010714:	e036      	b.n	8010784 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8010716:	2006      	movs	r0, #6
 8010718:	f003 fa2c 	bl	8013b74 <memp_malloc>
 801071c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d103      	bne.n	801072c <recv_udp+0x88>
    pbuf_free(p);
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f004 f927 	bl	8014978 <pbuf_free>
    return;
 801072a:	e02b      	b.n	8010784 <recv_udp+0xe0>
  } else {
    buf->p = p;
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010732:	69bb      	ldr	r3, [r7, #24]
 8010734:	687a      	ldr	r2, [r7, #4]
 8010736:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d002      	beq.n	8010744 <recv_udp+0xa0>
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	e000      	b.n	8010746 <recv_udp+0xa2>
 8010744:	2300      	movs	r3, #0
 8010746:	69ba      	ldr	r2, [r7, #24]
 8010748:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801074a:	69bb      	ldr	r3, [r7, #24]
 801074c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801074e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	891b      	ldrh	r3, [r3, #8]
 8010754:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8010756:	69fb      	ldr	r3, [r7, #28]
 8010758:	3310      	adds	r3, #16
 801075a:	69b9      	ldr	r1, [r7, #24]
 801075c:	4618      	mov	r0, r3
 801075e:	f00f ff7d 	bl	802065c <sys_mbox_trypost>
 8010762:	4603      	mov	r3, r0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d003      	beq.n	8010770 <recv_udp+0xcc>
    netbuf_delete(buf);
 8010768:	69b8      	ldr	r0, [r7, #24]
 801076a:	f001 fb25 	bl	8011db8 <netbuf_delete>
    return;
 801076e:	e009      	b.n	8010784 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010774:	2b00      	cmp	r3, #0
 8010776:	d005      	beq.n	8010784 <recv_udp+0xe0>
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801077c:	8afa      	ldrh	r2, [r7, #22]
 801077e:	2100      	movs	r1, #0
 8010780:	69f8      	ldr	r0, [r7, #28]
 8010782:	4798      	blx	r3
  }
}
 8010784:	3720      	adds	r7, #32
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	08022cac 	.word	0x08022cac
 8010790:	08022d24 	.word	0x08022d24
 8010794:	08022cf0 	.word	0x08022cf0
 8010798:	08022d48 	.word	0x08022d48
 801079c:	08022d68 	.word	0x08022d68

080107a0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b088      	sub	sp, #32
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	60b9      	str	r1, [r7, #8]
 80107aa:	607a      	str	r2, [r7, #4]
 80107ac:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d106      	bne.n	80107c2 <recv_tcp+0x22>
 80107b4:	4b36      	ldr	r3, [pc, #216]	; (8010890 <recv_tcp+0xf0>)
 80107b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80107ba:	4936      	ldr	r1, [pc, #216]	; (8010894 <recv_tcp+0xf4>)
 80107bc:	4836      	ldr	r0, [pc, #216]	; (8010898 <recv_tcp+0xf8>)
 80107be:	f010 fb05 	bl	8020dcc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d106      	bne.n	80107d6 <recv_tcp+0x36>
 80107c8:	4b31      	ldr	r3, [pc, #196]	; (8010890 <recv_tcp+0xf0>)
 80107ca:	f240 122d 	movw	r2, #301	; 0x12d
 80107ce:	4933      	ldr	r1, [pc, #204]	; (801089c <recv_tcp+0xfc>)
 80107d0:	4831      	ldr	r0, [pc, #196]	; (8010898 <recv_tcp+0xf8>)
 80107d2:	f010 fafb 	bl	8020dcc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80107d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d006      	beq.n	80107ec <recv_tcp+0x4c>
 80107de:	4b2c      	ldr	r3, [pc, #176]	; (8010890 <recv_tcp+0xf0>)
 80107e0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80107e4:	492e      	ldr	r1, [pc, #184]	; (80108a0 <recv_tcp+0x100>)
 80107e6:	482c      	ldr	r0, [pc, #176]	; (8010898 <recv_tcp+0xf8>)
 80107e8:	f010 faf0 	bl	8020dcc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d102      	bne.n	80107fc <recv_tcp+0x5c>
    return ERR_VAL;
 80107f6:	f06f 0305 	mvn.w	r3, #5
 80107fa:	e045      	b.n	8010888 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	68ba      	ldr	r2, [r7, #8]
 8010802:	429a      	cmp	r2, r3
 8010804:	d006      	beq.n	8010814 <recv_tcp+0x74>
 8010806:	4b22      	ldr	r3, [pc, #136]	; (8010890 <recv_tcp+0xf0>)
 8010808:	f240 1235 	movw	r2, #309	; 0x135
 801080c:	4925      	ldr	r1, [pc, #148]	; (80108a4 <recv_tcp+0x104>)
 801080e:	4822      	ldr	r0, [pc, #136]	; (8010898 <recv_tcp+0xf8>)
 8010810:	f010 fadc 	bl	8020dcc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	3310      	adds	r3, #16
 8010818:	4618      	mov	r0, r3
 801081a:	f00f ff81 	bl	8020720 <sys_mbox_valid>
 801081e:	4603      	mov	r3, r0
 8010820:	2b00      	cmp	r3, #0
 8010822:	d10d      	bne.n	8010840 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d008      	beq.n	801083c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	891b      	ldrh	r3, [r3, #8]
 801082e:	4619      	mov	r1, r3
 8010830:	68b8      	ldr	r0, [r7, #8]
 8010832:	f005 f883 	bl	801593c <tcp_recved>
      pbuf_free(p);
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f004 f89e 	bl	8014978 <pbuf_free>
    }
    return ERR_OK;
 801083c:	2300      	movs	r3, #0
 801083e:	e023      	b.n	8010888 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d005      	beq.n	8010852 <recv_tcp+0xb2>
    msg = p;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	891b      	ldrh	r3, [r3, #8]
 801084e:	83fb      	strh	r3, [r7, #30]
 8010850:	e003      	b.n	801085a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8010852:	4b15      	ldr	r3, [pc, #84]	; (80108a8 <recv_tcp+0x108>)
 8010854:	61bb      	str	r3, [r7, #24]
    len = 0;
 8010856:	2300      	movs	r3, #0
 8010858:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	3310      	adds	r3, #16
 801085e:	69b9      	ldr	r1, [r7, #24]
 8010860:	4618      	mov	r0, r3
 8010862:	f00f fefb 	bl	802065c <sys_mbox_trypost>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	d002      	beq.n	8010872 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 801086c:	f04f 33ff 	mov.w	r3, #4294967295
 8010870:	e00a      	b.n	8010888 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010876:	2b00      	cmp	r3, #0
 8010878:	d005      	beq.n	8010886 <recv_tcp+0xe6>
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801087e:	8bfa      	ldrh	r2, [r7, #30]
 8010880:	2100      	movs	r1, #0
 8010882:	6978      	ldr	r0, [r7, #20]
 8010884:	4798      	blx	r3
  }

  return ERR_OK;
 8010886:	2300      	movs	r3, #0
}
 8010888:	4618      	mov	r0, r3
 801088a:	3720      	adds	r7, #32
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}
 8010890:	08022cac 	.word	0x08022cac
 8010894:	08022d88 	.word	0x08022d88
 8010898:	08022cf0 	.word	0x08022cf0
 801089c:	08022dac 	.word	0x08022dac
 80108a0:	08022dcc 	.word	0x08022dcc
 80108a4:	08022de4 	.word	0x08022de4
 80108a8:	0802654a 	.word	0x0802654a

080108ac <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d106      	bne.n	80108ce <poll_tcp+0x22>
 80108c0:	4b29      	ldr	r3, [pc, #164]	; (8010968 <poll_tcp+0xbc>)
 80108c2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80108c6:	4929      	ldr	r1, [pc, #164]	; (801096c <poll_tcp+0xc0>)
 80108c8:	4829      	ldr	r0, [pc, #164]	; (8010970 <poll_tcp+0xc4>)
 80108ca:	f010 fa7f 	bl	8020dcc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	785b      	ldrb	r3, [r3, #1]
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d104      	bne.n	80108e0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80108d6:	2101      	movs	r1, #1
 80108d8:	68f8      	ldr	r0, [r7, #12]
 80108da:	f000 ff21 	bl	8011720 <lwip_netconn_do_writemore>
 80108de:	e016      	b.n	801090e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	785b      	ldrb	r3, [r3, #1]
 80108e4:	2b04      	cmp	r3, #4
 80108e6:	d112      	bne.n	801090e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	6a1b      	ldr	r3, [r3, #32]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d00a      	beq.n	8010906 <poll_tcp+0x5a>
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6a1b      	ldr	r3, [r3, #32]
 80108f4:	7a5b      	ldrb	r3, [r3, #9]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d005      	beq.n	8010906 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	6a1b      	ldr	r3, [r3, #32]
 80108fe:	7a5a      	ldrb	r2, [r3, #9]
 8010900:	3a01      	subs	r2, #1
 8010902:	b2d2      	uxtb	r2, r2
 8010904:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010906:	2101      	movs	r1, #1
 8010908:	68f8      	ldr	r0, [r7, #12]
 801090a:	f000 fb3b 	bl	8010f84 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	7f1b      	ldrb	r3, [r3, #28]
 8010912:	f003 0310 	and.w	r3, r3, #16
 8010916:	2b00      	cmp	r3, #0
 8010918:	d021      	beq.n	801095e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d01d      	beq.n	801095e <poll_tcp+0xb2>
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801092a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801092e:	d316      	bcc.n	801095e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010938:	2b04      	cmp	r3, #4
 801093a:	d810      	bhi.n	801095e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	7f1b      	ldrb	r3, [r3, #28]
 8010940:	f023 0310 	bic.w	r3, r3, #16
 8010944:	b2da      	uxtb	r2, r3
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801094e:	2b00      	cmp	r3, #0
 8010950:	d005      	beq.n	801095e <poll_tcp+0xb2>
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010956:	2200      	movs	r2, #0
 8010958:	2102      	movs	r1, #2
 801095a:	68f8      	ldr	r0, [r7, #12]
 801095c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801095e:	2300      	movs	r3, #0
}
 8010960:	4618      	mov	r0, r3
 8010962:	3710      	adds	r7, #16
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	08022cac 	.word	0x08022cac
 801096c:	08022e04 	.word	0x08022e04
 8010970:	08022cf0 	.word	0x08022cf0

08010974 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b086      	sub	sp, #24
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	4613      	mov	r3, r2
 8010980:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d106      	bne.n	801099a <sent_tcp+0x26>
 801098c:	4b20      	ldr	r3, [pc, #128]	; (8010a10 <sent_tcp+0x9c>)
 801098e:	f240 1293 	movw	r2, #403	; 0x193
 8010992:	4920      	ldr	r1, [pc, #128]	; (8010a14 <sent_tcp+0xa0>)
 8010994:	4820      	ldr	r0, [pc, #128]	; (8010a18 <sent_tcp+0xa4>)
 8010996:	f010 fa19 	bl	8020dcc <iprintf>

  if (conn) {
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d032      	beq.n	8010a06 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	785b      	ldrb	r3, [r3, #1]
 80109a4:	2b01      	cmp	r3, #1
 80109a6:	d104      	bne.n	80109b2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80109a8:	2101      	movs	r1, #1
 80109aa:	6978      	ldr	r0, [r7, #20]
 80109ac:	f000 feb8 	bl	8011720 <lwip_netconn_do_writemore>
 80109b0:	e007      	b.n	80109c2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	785b      	ldrb	r3, [r3, #1]
 80109b6:	2b04      	cmp	r3, #4
 80109b8:	d103      	bne.n	80109c2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80109ba:	2101      	movs	r1, #1
 80109bc:	6978      	ldr	r0, [r7, #20]
 80109be:	f000 fae1 	bl	8010f84 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d01d      	beq.n	8010a06 <sent_tcp+0x92>
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80109d2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80109d6:	d316      	bcc.n	8010a06 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80109e0:	2b04      	cmp	r3, #4
 80109e2:	d810      	bhi.n	8010a06 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	7f1b      	ldrb	r3, [r3, #28]
 80109e8:	f023 0310 	bic.w	r3, r3, #16
 80109ec:	b2da      	uxtb	r2, r3
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d005      	beq.n	8010a06 <sent_tcp+0x92>
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109fe:	88fa      	ldrh	r2, [r7, #6]
 8010a00:	2102      	movs	r1, #2
 8010a02:	6978      	ldr	r0, [r7, #20]
 8010a04:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010a06:	2300      	movs	r3, #0
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3718      	adds	r7, #24
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	08022cac 	.word	0x08022cac
 8010a14:	08022e04 	.word	0x08022e04
 8010a18:	08022cf0 	.word	0x08022cf0

08010a1c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b088      	sub	sp, #32
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	460b      	mov	r3, r1
 8010a26:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010a2c:	69fb      	ldr	r3, [r7, #28]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d106      	bne.n	8010a40 <err_tcp+0x24>
 8010a32:	4b5f      	ldr	r3, [pc, #380]	; (8010bb0 <err_tcp+0x194>)
 8010a34:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010a38:	495e      	ldr	r1, [pc, #376]	; (8010bb4 <err_tcp+0x198>)
 8010a3a:	485f      	ldr	r0, [pc, #380]	; (8010bb8 <err_tcp+0x19c>)
 8010a3c:	f010 f9c6 	bl	8020dcc <iprintf>

  SYS_ARCH_PROTECT(lev);
 8010a40:	f00f ff78 	bl	8020934 <sys_arch_protect>
 8010a44:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	78fa      	ldrb	r2, [r7, #3]
 8010a50:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	7f1b      	ldrb	r3, [r3, #28]
 8010a56:	f043 0301 	orr.w	r3, r3, #1
 8010a5a:	b2da      	uxtb	r2, r3
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8010a60:	69fb      	ldr	r3, [r7, #28]
 8010a62:	785b      	ldrb	r3, [r3, #1]
 8010a64:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8010a6c:	69b8      	ldr	r0, [r7, #24]
 8010a6e:	f00f ff6f 	bl	8020950 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d005      	beq.n	8010a86 <err_tcp+0x6a>
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a7e:	2200      	movs	r2, #0
 8010a80:	2104      	movs	r1, #4
 8010a82:	69f8      	ldr	r0, [r7, #28]
 8010a84:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d005      	beq.n	8010a9a <err_tcp+0x7e>
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a92:	2200      	movs	r2, #0
 8010a94:	2100      	movs	r1, #0
 8010a96:	69f8      	ldr	r0, [r7, #28]
 8010a98:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010a9a:	69fb      	ldr	r3, [r7, #28]
 8010a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d005      	beq.n	8010aae <err_tcp+0x92>
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	2102      	movs	r1, #2
 8010aaa:	69f8      	ldr	r0, [r7, #28]
 8010aac:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7ff fd86 	bl	80105c4 <lwip_netconn_err_to_msg>
 8010ab8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	3310      	adds	r3, #16
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f00f fe2e 	bl	8020720 <sys_mbox_valid>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d005      	beq.n	8010ad6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	3310      	adds	r3, #16
 8010ace:	6939      	ldr	r1, [r7, #16]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f00f fdc3 	bl	802065c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010ad6:	69fb      	ldr	r3, [r7, #28]
 8010ad8:	3314      	adds	r3, #20
 8010ada:	4618      	mov	r0, r3
 8010adc:	f00f fe20 	bl	8020720 <sys_mbox_valid>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d005      	beq.n	8010af2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	3314      	adds	r3, #20
 8010aea:	6939      	ldr	r1, [r7, #16]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f00f fdb5 	bl	802065c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8010af2:	7dfb      	ldrb	r3, [r7, #23]
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d005      	beq.n	8010b04 <err_tcp+0xe8>
 8010af8:	7dfb      	ldrb	r3, [r7, #23]
 8010afa:	2b04      	cmp	r3, #4
 8010afc:	d002      	beq.n	8010b04 <err_tcp+0xe8>
 8010afe:	7dfb      	ldrb	r3, [r7, #23]
 8010b00:	2b03      	cmp	r3, #3
 8010b02:	d143      	bne.n	8010b8c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	7f1b      	ldrb	r3, [r3, #28]
 8010b08:	f003 0304 	and.w	r3, r3, #4
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	bf14      	ite	ne
 8010b10:	2301      	movne	r3, #1
 8010b12:	2300      	moveq	r3, #0
 8010b14:	b2db      	uxtb	r3, r3
 8010b16:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	7f1b      	ldrb	r3, [r3, #28]
 8010b1c:	f023 0304 	bic.w	r3, r3, #4
 8010b20:	b2da      	uxtb	r2, r3
 8010b22:	69fb      	ldr	r3, [r7, #28]
 8010b24:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d13b      	bne.n	8010ba4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	6a1b      	ldr	r3, [r3, #32]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d106      	bne.n	8010b42 <err_tcp+0x126>
 8010b34:	4b1e      	ldr	r3, [pc, #120]	; (8010bb0 <err_tcp+0x194>)
 8010b36:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010b3a:	4920      	ldr	r1, [pc, #128]	; (8010bbc <err_tcp+0x1a0>)
 8010b3c:	481e      	ldr	r0, [pc, #120]	; (8010bb8 <err_tcp+0x19c>)
 8010b3e:	f010 f945 	bl	8020dcc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8010b42:	7dfb      	ldrb	r3, [r7, #23]
 8010b44:	2b04      	cmp	r3, #4
 8010b46:	d104      	bne.n	8010b52 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8010b48:	69fb      	ldr	r3, [r7, #28]
 8010b4a:	6a1b      	ldr	r3, [r3, #32]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	711a      	strb	r2, [r3, #4]
 8010b50:	e003      	b.n	8010b5a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	6a1b      	ldr	r3, [r3, #32]
 8010b56:	78fa      	ldrb	r2, [r7, #3]
 8010b58:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	6a1b      	ldr	r3, [r3, #32]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	330c      	adds	r3, #12
 8010b62:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8010b64:	68b8      	ldr	r0, [r7, #8]
 8010b66:	f00f fe69 	bl	802083c <sys_sem_valid>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d106      	bne.n	8010b7e <err_tcp+0x162>
 8010b70:	4b0f      	ldr	r3, [pc, #60]	; (8010bb0 <err_tcp+0x194>)
 8010b72:	f240 12ef 	movw	r2, #495	; 0x1ef
 8010b76:	4912      	ldr	r1, [pc, #72]	; (8010bc0 <err_tcp+0x1a4>)
 8010b78:	480f      	ldr	r0, [pc, #60]	; (8010bb8 <err_tcp+0x19c>)
 8010b7a:	f010 f927 	bl	8020dcc <iprintf>
      conn->current_msg = NULL;
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	2200      	movs	r2, #0
 8010b82:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8010b84:	68b8      	ldr	r0, [r7, #8]
 8010b86:	f00f fe3f 	bl	8020808 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8010b8a:	e00b      	b.n	8010ba4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	6a1b      	ldr	r3, [r3, #32]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d008      	beq.n	8010ba6 <err_tcp+0x18a>
 8010b94:	4b06      	ldr	r3, [pc, #24]	; (8010bb0 <err_tcp+0x194>)
 8010b96:	f240 12f7 	movw	r2, #503	; 0x1f7
 8010b9a:	490a      	ldr	r1, [pc, #40]	; (8010bc4 <err_tcp+0x1a8>)
 8010b9c:	4806      	ldr	r0, [pc, #24]	; (8010bb8 <err_tcp+0x19c>)
 8010b9e:	f010 f915 	bl	8020dcc <iprintf>
  }
}
 8010ba2:	e000      	b.n	8010ba6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8010ba4:	bf00      	nop
}
 8010ba6:	bf00      	nop
 8010ba8:	3720      	adds	r7, #32
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	08022cac 	.word	0x08022cac
 8010bb4:	08022e04 	.word	0x08022e04
 8010bb8:	08022cf0 	.word	0x08022cf0
 8010bbc:	08022e14 	.word	0x08022e14
 8010bc0:	08022e30 	.word	0x08022e30
 8010bc4:	08022e4c 	.word	0x08022e4c

08010bc8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b084      	sub	sp, #16
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8010bd6:	6879      	ldr	r1, [r7, #4]
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	f005 fe8d 	bl	80168f8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010bde:	490a      	ldr	r1, [pc, #40]	; (8010c08 <setup_tcp+0x40>)
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f005 fe9b 	bl	801691c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8010be6:	4909      	ldr	r1, [pc, #36]	; (8010c0c <setup_tcp+0x44>)
 8010be8:	68f8      	ldr	r0, [r7, #12]
 8010bea:	f005 feb9 	bl	8016960 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010bee:	2202      	movs	r2, #2
 8010bf0:	4907      	ldr	r1, [pc, #28]	; (8010c10 <setup_tcp+0x48>)
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f005 ff10 	bl	8016a18 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8010bf8:	4906      	ldr	r1, [pc, #24]	; (8010c14 <setup_tcp+0x4c>)
 8010bfa:	68f8      	ldr	r0, [r7, #12]
 8010bfc:	f005 fed2 	bl	80169a4 <tcp_err>
}
 8010c00:	bf00      	nop
 8010c02:	3710      	adds	r7, #16
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	080107a1 	.word	0x080107a1
 8010c0c:	08010975 	.word	0x08010975
 8010c10:	080108ad 	.word	0x080108ad
 8010c14:	08010a1d 	.word	0x08010a1d

08010c18 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8010c18:	b590      	push	{r4, r7, lr}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010c20:	2300      	movs	r3, #0
 8010c22:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d006      	beq.n	8010c3c <pcb_new+0x24>
 8010c2e:	4b2b      	ldr	r3, [pc, #172]	; (8010cdc <pcb_new+0xc4>)
 8010c30:	f240 2265 	movw	r2, #613	; 0x265
 8010c34:	492a      	ldr	r1, [pc, #168]	; (8010ce0 <pcb_new+0xc8>)
 8010c36:	482b      	ldr	r0, [pc, #172]	; (8010ce4 <pcb_new+0xcc>)
 8010c38:	f010 f8c8 	bl	8020dcc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c46:	2b10      	cmp	r3, #16
 8010c48:	d022      	beq.n	8010c90 <pcb_new+0x78>
 8010c4a:	2b20      	cmp	r3, #32
 8010c4c:	d133      	bne.n	8010cb6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681c      	ldr	r4, [r3, #0]
 8010c52:	7bfb      	ldrb	r3, [r7, #15]
 8010c54:	4618      	mov	r0, r3
 8010c56:	f00b f9aa 	bl	801bfae <udp_new_ip_type>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d02a      	beq.n	8010cbe <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	2b22      	cmp	r3, #34	; 0x22
 8010c70:	d104      	bne.n	8010c7c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	2201      	movs	r2, #1
 8010c7a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	6858      	ldr	r0, [r3, #4]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	461a      	mov	r2, r3
 8010c88:	4917      	ldr	r1, [pc, #92]	; (8010ce8 <pcb_new+0xd0>)
 8010c8a:	f00b f917 	bl	801bebc <udp_recv>
      }
      break;
 8010c8e:	e016      	b.n	8010cbe <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681c      	ldr	r4, [r3, #0]
 8010c94:	7bfb      	ldrb	r3, [r7, #15]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f005 fe20 	bl	80168dc <tcp_new_ip_type>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	685b      	ldr	r3, [r3, #4]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d00b      	beq.n	8010cc2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7ff ff8a 	bl	8010bc8 <setup_tcp>
      }
      break;
 8010cb4:	e005      	b.n	8010cc2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	22fa      	movs	r2, #250	; 0xfa
 8010cba:	711a      	strb	r2, [r3, #4]
      return;
 8010cbc:	e00a      	b.n	8010cd4 <pcb_new+0xbc>
      break;
 8010cbe:	bf00      	nop
 8010cc0:	e000      	b.n	8010cc4 <pcb_new+0xac>
      break;
 8010cc2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d102      	bne.n	8010cd4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	22ff      	movs	r2, #255	; 0xff
 8010cd2:	711a      	strb	r2, [r3, #4]
  }
}
 8010cd4:	3714      	adds	r7, #20
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd90      	pop	{r4, r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	08022cac 	.word	0x08022cac
 8010ce0:	08022e90 	.word	0x08022e90
 8010ce4:	08022cf0 	.word	0x08022cf0
 8010ce8:	080106a5 	.word	0x080106a5

08010cec <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d102      	bne.n	8010d0e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	f7ff ff85 	bl	8010c18 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8010d0e:	bf00      	nop
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
	...

08010d18 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b086      	sub	sp, #24
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	4603      	mov	r3, r0
 8010d20:	6039      	str	r1, [r7, #0]
 8010d22:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010d24:	2300      	movs	r3, #0
 8010d26:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8010d28:	2007      	movs	r0, #7
 8010d2a:	f002 ff23 	bl	8013b74 <memp_malloc>
 8010d2e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d101      	bne.n	8010d3a <netconn_alloc+0x22>
    return NULL;
 8010d36:	2300      	movs	r3, #0
 8010d38:	e052      	b.n	8010de0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	79fa      	ldrb	r2, [r7, #7]
 8010d44:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8010d4c:	79fb      	ldrb	r3, [r7, #7]
 8010d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d52:	2b10      	cmp	r3, #16
 8010d54:	d004      	beq.n	8010d60 <netconn_alloc+0x48>
 8010d56:	2b20      	cmp	r3, #32
 8010d58:	d105      	bne.n	8010d66 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8010d5a:	2306      	movs	r3, #6
 8010d5c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8010d5e:	e00a      	b.n	8010d76 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8010d60:	2306      	movs	r3, #6
 8010d62:	617b      	str	r3, [r7, #20]
      break;
 8010d64:	e007      	b.n	8010d76 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010d66:	4b20      	ldr	r3, [pc, #128]	; (8010de8 <netconn_alloc+0xd0>)
 8010d68:	f240 22e5 	movw	r2, #741	; 0x2e5
 8010d6c:	491f      	ldr	r1, [pc, #124]	; (8010dec <netconn_alloc+0xd4>)
 8010d6e:	4820      	ldr	r0, [pc, #128]	; (8010df0 <netconn_alloc+0xd8>)
 8010d70:	f010 f82c 	bl	8020dcc <iprintf>
      goto free_and_return;
 8010d74:	e02f      	b.n	8010dd6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	3310      	adds	r3, #16
 8010d7a:	6979      	ldr	r1, [r7, #20]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f00f fc41 	bl	8020604 <sys_mbox_new>
 8010d82:	4603      	mov	r3, r0
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d125      	bne.n	8010dd4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	330c      	adds	r3, #12
 8010d8c:	2100      	movs	r1, #0
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f00f fce4 	bl	802075c <sys_sem_new>
 8010d94:	4603      	mov	r3, r0
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d005      	beq.n	8010da6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	3310      	adds	r3, #16
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f00f fc4a 	bl	8020638 <sys_mbox_free>
    goto free_and_return;
 8010da4:	e017      	b.n	8010dd6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	3314      	adds	r3, #20
 8010daa:	4618      	mov	r0, r3
 8010dac:	f00f fcc9 	bl	8020742 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2200      	movs	r2, #0
 8010db4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	f04f 32ff 	mov.w	r2, #4294967295
 8010dbc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	683a      	ldr	r2, [r7, #0]
 8010dc2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	7cfa      	ldrb	r2, [r7, #19]
 8010dce:	771a      	strb	r2, [r3, #28]
  return conn;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	e005      	b.n	8010de0 <netconn_alloc+0xc8>
    goto free_and_return;
 8010dd4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8010dd6:	68f9      	ldr	r1, [r7, #12]
 8010dd8:	2007      	movs	r0, #7
 8010dda:	f002 ff1d 	bl	8013c18 <memp_free>
  return NULL;
 8010dde:	2300      	movs	r3, #0
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3718      	adds	r7, #24
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	08022cac 	.word	0x08022cac
 8010dec:	08022eb0 	.word	0x08022eb0
 8010df0:	08022cf0 	.word	0x08022cf0

08010df4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d006      	beq.n	8010e12 <netconn_free+0x1e>
 8010e04:	4b1b      	ldr	r3, [pc, #108]	; (8010e74 <netconn_free+0x80>)
 8010e06:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010e0a:	491b      	ldr	r1, [pc, #108]	; (8010e78 <netconn_free+0x84>)
 8010e0c:	481b      	ldr	r0, [pc, #108]	; (8010e7c <netconn_free+0x88>)
 8010e0e:	f00f ffdd 	bl	8020dcc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	3310      	adds	r3, #16
 8010e16:	4618      	mov	r0, r3
 8010e18:	f00f fc82 	bl	8020720 <sys_mbox_valid>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d006      	beq.n	8010e30 <netconn_free+0x3c>
 8010e22:	4b14      	ldr	r3, [pc, #80]	; (8010e74 <netconn_free+0x80>)
 8010e24:	f240 3223 	movw	r2, #803	; 0x323
 8010e28:	4915      	ldr	r1, [pc, #84]	; (8010e80 <netconn_free+0x8c>)
 8010e2a:	4814      	ldr	r0, [pc, #80]	; (8010e7c <netconn_free+0x88>)
 8010e2c:	f00f ffce 	bl	8020dcc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	3314      	adds	r3, #20
 8010e34:	4618      	mov	r0, r3
 8010e36:	f00f fc73 	bl	8020720 <sys_mbox_valid>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d006      	beq.n	8010e4e <netconn_free+0x5a>
 8010e40:	4b0c      	ldr	r3, [pc, #48]	; (8010e74 <netconn_free+0x80>)
 8010e42:	f240 3226 	movw	r2, #806	; 0x326
 8010e46:	490f      	ldr	r1, [pc, #60]	; (8010e84 <netconn_free+0x90>)
 8010e48:	480c      	ldr	r0, [pc, #48]	; (8010e7c <netconn_free+0x88>)
 8010e4a:	f00f ffbf 	bl	8020dcc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	330c      	adds	r3, #12
 8010e52:	4618      	mov	r0, r3
 8010e54:	f00f fce5 	bl	8020822 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	330c      	adds	r3, #12
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f00f fcfe 	bl	802085e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8010e62:	6879      	ldr	r1, [r7, #4]
 8010e64:	2007      	movs	r0, #7
 8010e66:	f002 fed7 	bl	8013c18 <memp_free>
}
 8010e6a:	bf00      	nop
 8010e6c:	3708      	adds	r7, #8
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	08022cac 	.word	0x08022cac
 8010e78:	08022ed8 	.word	0x08022ed8
 8010e7c:	08022cf0 	.word	0x08022cf0
 8010e80:	08022f08 	.word	0x08022f08
 8010e84:	08022f44 	.word	0x08022f44

08010e88 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b086      	sub	sp, #24
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	3310      	adds	r3, #16
 8010e94:	4618      	mov	r0, r3
 8010e96:	f00f fc43 	bl	8020720 <sys_mbox_valid>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d02f      	beq.n	8010f00 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010ea0:	e018      	b.n	8010ed4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010eaa:	2b10      	cmp	r3, #16
 8010eac:	d10e      	bne.n	8010ecc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	f107 020f 	add.w	r2, r7, #15
 8010eb4:	4611      	mov	r1, r2
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7ff fbba 	bl	8010630 <lwip_netconn_is_err_msg>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d108      	bne.n	8010ed4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f003 fd57 	bl	8014978 <pbuf_free>
 8010eca:	e003      	b.n	8010ed4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f000 ff72 	bl	8011db8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	3310      	adds	r3, #16
 8010ed8:	f107 0210 	add.w	r2, r7, #16
 8010edc:	4611      	mov	r1, r2
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f00f fc07 	bl	80206f2 <sys_arch_mbox_tryfetch>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eea:	d1da      	bne.n	8010ea2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	3310      	adds	r3, #16
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f00f fba1 	bl	8020638 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	3310      	adds	r3, #16
 8010efa:	4618      	mov	r0, r3
 8010efc:	f00f fc21 	bl	8020742 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	3314      	adds	r3, #20
 8010f04:	4618      	mov	r0, r3
 8010f06:	f00f fc0b 	bl	8020720 <sys_mbox_valid>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d034      	beq.n	8010f7a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010f10:	e01d      	b.n	8010f4e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	f107 020e 	add.w	r2, r7, #14
 8010f18:	4611      	mov	r1, r2
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7ff fb88 	bl	8010630 <lwip_netconn_is_err_msg>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d113      	bne.n	8010f4e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8010f2a:	6978      	ldr	r0, [r7, #20]
 8010f2c:	f7ff ffac 	bl	8010e88 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d007      	beq.n	8010f48 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f004 fc97 	bl	8015870 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	2200      	movs	r2, #0
 8010f46:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8010f48:	6978      	ldr	r0, [r7, #20]
 8010f4a:	f7ff ff53 	bl	8010df4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	3314      	adds	r3, #20
 8010f52:	f107 0210 	add.w	r2, r7, #16
 8010f56:	4611      	mov	r1, r2
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f00f fbca 	bl	80206f2 <sys_arch_mbox_tryfetch>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f64:	d1d5      	bne.n	8010f12 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	3314      	adds	r3, #20
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f00f fb64 	bl	8020638 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	3314      	adds	r3, #20
 8010f74:	4618      	mov	r0, r3
 8010f76:	f00f fbe4 	bl	8020742 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8010f7a:	bf00      	nop
 8010f7c:	3718      	adds	r7, #24
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
	...

08010f84 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b086      	sub	sp, #24
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	460b      	mov	r3, r1
 8010f8e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010f90:	2300      	movs	r3, #0
 8010f92:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d106      	bne.n	8010fa8 <lwip_netconn_do_close_internal+0x24>
 8010f9a:	4ba1      	ldr	r3, [pc, #644]	; (8011220 <lwip_netconn_do_close_internal+0x29c>)
 8010f9c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8010fa0:	49a0      	ldr	r1, [pc, #640]	; (8011224 <lwip_netconn_do_close_internal+0x2a0>)
 8010fa2:	48a1      	ldr	r0, [pc, #644]	; (8011228 <lwip_netconn_do_close_internal+0x2a4>)
 8010fa4:	f00f ff12 	bl	8020dcc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010fb0:	2b10      	cmp	r3, #16
 8010fb2:	d006      	beq.n	8010fc2 <lwip_netconn_do_close_internal+0x3e>
 8010fb4:	4b9a      	ldr	r3, [pc, #616]	; (8011220 <lwip_netconn_do_close_internal+0x29c>)
 8010fb6:	f240 32a3 	movw	r2, #931	; 0x3a3
 8010fba:	499c      	ldr	r1, [pc, #624]	; (801122c <lwip_netconn_do_close_internal+0x2a8>)
 8010fbc:	489a      	ldr	r0, [pc, #616]	; (8011228 <lwip_netconn_do_close_internal+0x2a4>)
 8010fbe:	f00f ff05 	bl	8020dcc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	785b      	ldrb	r3, [r3, #1]
 8010fc6:	2b04      	cmp	r3, #4
 8010fc8:	d006      	beq.n	8010fd8 <lwip_netconn_do_close_internal+0x54>
 8010fca:	4b95      	ldr	r3, [pc, #596]	; (8011220 <lwip_netconn_do_close_internal+0x29c>)
 8010fcc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8010fd0:	4997      	ldr	r1, [pc, #604]	; (8011230 <lwip_netconn_do_close_internal+0x2ac>)
 8010fd2:	4895      	ldr	r0, [pc, #596]	; (8011228 <lwip_netconn_do_close_internal+0x2a4>)
 8010fd4:	f00f fefa 	bl	8020dcc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d106      	bne.n	8010fee <lwip_netconn_do_close_internal+0x6a>
 8010fe0:	4b8f      	ldr	r3, [pc, #572]	; (8011220 <lwip_netconn_do_close_internal+0x29c>)
 8010fe2:	f240 32a5 	movw	r2, #933	; 0x3a5
 8010fe6:	4993      	ldr	r1, [pc, #588]	; (8011234 <lwip_netconn_do_close_internal+0x2b0>)
 8010fe8:	488f      	ldr	r0, [pc, #572]	; (8011228 <lwip_netconn_do_close_internal+0x2a4>)
 8010fea:	f00f feef 	bl	8020dcc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6a1b      	ldr	r3, [r3, #32]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <lwip_netconn_do_close_internal+0x80>
 8010ff6:	4b8a      	ldr	r3, [pc, #552]	; (8011220 <lwip_netconn_do_close_internal+0x29c>)
 8010ff8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010ffc:	498e      	ldr	r1, [pc, #568]	; (8011238 <lwip_netconn_do_close_internal+0x2b4>)
 8010ffe:	488a      	ldr	r0, [pc, #552]	; (8011228 <lwip_netconn_do_close_internal+0x2a4>)
 8011000:	f00f fee4 	bl	8020dcc <iprintf>

  tpcb = conn->pcb.tcp;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6a1b      	ldr	r3, [r3, #32]
 801100e:	7a1b      	ldrb	r3, [r3, #8]
 8011010:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8011012:	7bfb      	ldrb	r3, [r7, #15]
 8011014:	f003 0301 	and.w	r3, r3, #1
 8011018:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 801101a:	7bfb      	ldrb	r3, [r7, #15]
 801101c:	f003 0302 	and.w	r3, r3, #2
 8011020:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8011022:	7bfb      	ldrb	r3, [r7, #15]
 8011024:	2b03      	cmp	r3, #3
 8011026:	d102      	bne.n	801102e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011028:	2301      	movs	r3, #1
 801102a:	75bb      	strb	r3, [r7, #22]
 801102c:	e01f      	b.n	801106e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 801102e:	7bbb      	ldrb	r3, [r7, #14]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d00e      	beq.n	8011052 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011038:	2b05      	cmp	r3, #5
 801103a:	d007      	beq.n	801104c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011040:	2b06      	cmp	r3, #6
 8011042:	d003      	beq.n	801104c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011048:	2b08      	cmp	r3, #8
 801104a:	d102      	bne.n	8011052 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 801104c:	2301      	movs	r3, #1
 801104e:	75bb      	strb	r3, [r7, #22]
 8011050:	e00d      	b.n	801106e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8011052:	7b7b      	ldrb	r3, [r7, #13]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d008      	beq.n	801106a <lwip_netconn_do_close_internal+0xe6>
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	8b5b      	ldrh	r3, [r3, #26]
 801105c:	f003 0310 	and.w	r3, r3, #16
 8011060:	2b00      	cmp	r3, #0
 8011062:	d002      	beq.n	801106a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8011064:	2301      	movs	r3, #1
 8011066:	75bb      	strb	r3, [r7, #22]
 8011068:	e001      	b.n	801106e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801106a:	2300      	movs	r3, #0
 801106c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 801106e:	7dbb      	ldrb	r3, [r7, #22]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d003      	beq.n	801107c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8011074:	2100      	movs	r1, #0
 8011076:	6938      	ldr	r0, [r7, #16]
 8011078:	f005 fc3e 	bl	80168f8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	7d1b      	ldrb	r3, [r3, #20]
 8011080:	2b01      	cmp	r3, #1
 8011082:	d104      	bne.n	801108e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8011084:	2100      	movs	r1, #0
 8011086:	6938      	ldr	r0, [r7, #16]
 8011088:	f005 fcae 	bl	80169e8 <tcp_accept>
 801108c:	e01d      	b.n	80110ca <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801108e:	7bbb      	ldrb	r3, [r7, #14]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d007      	beq.n	80110a4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8011094:	2100      	movs	r1, #0
 8011096:	6938      	ldr	r0, [r7, #16]
 8011098:	f005 fc40 	bl	801691c <tcp_recv>
      tcp_accept(tpcb, NULL);
 801109c:	2100      	movs	r1, #0
 801109e:	6938      	ldr	r0, [r7, #16]
 80110a0:	f005 fca2 	bl	80169e8 <tcp_accept>
    }
    if (shut_tx) {
 80110a4:	7b7b      	ldrb	r3, [r7, #13]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d003      	beq.n	80110b2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80110aa:	2100      	movs	r1, #0
 80110ac:	6938      	ldr	r0, [r7, #16]
 80110ae:	f005 fc57 	bl	8016960 <tcp_sent>
    }
    if (shut_close) {
 80110b2:	7dbb      	ldrb	r3, [r7, #22]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d008      	beq.n	80110ca <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80110b8:	2200      	movs	r2, #0
 80110ba:	2100      	movs	r1, #0
 80110bc:	6938      	ldr	r0, [r7, #16]
 80110be:	f005 fcab 	bl	8016a18 <tcp_poll>
      tcp_err(tpcb, NULL);
 80110c2:	2100      	movs	r1, #0
 80110c4:	6938      	ldr	r0, [r7, #16]
 80110c6:	f005 fc6d 	bl	80169a4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80110ca:	7dbb      	ldrb	r3, [r7, #22]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d005      	beq.n	80110dc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80110d0:	6938      	ldr	r0, [r7, #16]
 80110d2:	f004 fa87 	bl	80155e4 <tcp_close>
 80110d6:	4603      	mov	r3, r0
 80110d8:	75fb      	strb	r3, [r7, #23]
 80110da:	e007      	b.n	80110ec <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80110dc:	7bbb      	ldrb	r3, [r7, #14]
 80110de:	7b7a      	ldrb	r2, [r7, #13]
 80110e0:	4619      	mov	r1, r3
 80110e2:	6938      	ldr	r0, [r7, #16]
 80110e4:	f004 faaa 	bl	801563c <tcp_shutdown>
 80110e8:	4603      	mov	r3, r0
 80110ea:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80110ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d102      	bne.n	80110fa <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80110f4:	2301      	movs	r3, #1
 80110f6:	757b      	strb	r3, [r7, #21]
 80110f8:	e016      	b.n	8011128 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80110fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80110fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011102:	d10f      	bne.n	8011124 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6a1b      	ldr	r3, [r3, #32]
 8011108:	7a5b      	ldrb	r3, [r3, #9]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d10c      	bne.n	8011128 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 801110e:	2301      	movs	r3, #1
 8011110:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8011112:	7dbb      	ldrb	r3, [r7, #22]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d007      	beq.n	8011128 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011118:	6938      	ldr	r0, [r7, #16]
 801111a:	f004 fba9 	bl	8015870 <tcp_abort>
          err = ERR_OK;
 801111e:	2300      	movs	r3, #0
 8011120:	75fb      	strb	r3, [r7, #23]
 8011122:	e001      	b.n	8011128 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8011124:	2301      	movs	r3, #1
 8011126:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011128:	7d7b      	ldrb	r3, [r7, #21]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d044      	beq.n	80111b8 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	6a1b      	ldr	r3, [r3, #32]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	330c      	adds	r3, #12
 8011136:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6a1b      	ldr	r3, [r3, #32]
 801113c:	7dfa      	ldrb	r2, [r7, #23]
 801113e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2200      	movs	r2, #0
 801114a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 801114c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d129      	bne.n	80111a8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8011154:	7dbb      	ldrb	r3, [r7, #22]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d00c      	beq.n	8011174 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2200      	movs	r2, #0
 801115e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011164:	2b00      	cmp	r3, #0
 8011166:	d005      	beq.n	8011174 <lwip_netconn_do_close_internal+0x1f0>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801116c:	2200      	movs	r2, #0
 801116e:	2104      	movs	r1, #4
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	4798      	blx	r3
      }
      if (shut_rx) {
 8011174:	7bbb      	ldrb	r3, [r7, #14]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d009      	beq.n	801118e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801117e:	2b00      	cmp	r3, #0
 8011180:	d005      	beq.n	801118e <lwip_netconn_do_close_internal+0x20a>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011186:	2200      	movs	r2, #0
 8011188:	2100      	movs	r1, #0
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	4798      	blx	r3
      }
      if (shut_tx) {
 801118e:	7b7b      	ldrb	r3, [r7, #13]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d009      	beq.n	80111a8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011198:	2b00      	cmp	r3, #0
 801119a:	d005      	beq.n	80111a8 <lwip_netconn_do_close_internal+0x224>
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a0:	2200      	movs	r2, #0
 80111a2:	2102      	movs	r1, #2
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80111a8:	78fb      	ldrb	r3, [r7, #3]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d002      	beq.n	80111b4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80111ae:	68b8      	ldr	r0, [r7, #8]
 80111b0:	f00f fb2a 	bl	8020808 <sys_sem_signal>
    }
    return ERR_OK;
 80111b4:	2300      	movs	r3, #0
 80111b6:	e02e      	b.n	8011216 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 80111b8:	7d7b      	ldrb	r3, [r7, #21]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d11e      	bne.n	80111fc <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	7d1b      	ldrb	r3, [r3, #20]
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d106      	bne.n	80111d4 <lwip_netconn_do_close_internal+0x250>
 80111c6:	4b16      	ldr	r3, [pc, #88]	; (8011220 <lwip_netconn_do_close_internal+0x29c>)
 80111c8:	f240 4241 	movw	r2, #1089	; 0x441
 80111cc:	491b      	ldr	r1, [pc, #108]	; (801123c <lwip_netconn_do_close_internal+0x2b8>)
 80111ce:	4816      	ldr	r0, [pc, #88]	; (8011228 <lwip_netconn_do_close_internal+0x2a4>)
 80111d0:	f00f fdfc 	bl	8020dcc <iprintf>
    if (shut_tx) {
 80111d4:	7b7b      	ldrb	r3, [r7, #13]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d003      	beq.n	80111e2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80111da:	4919      	ldr	r1, [pc, #100]	; (8011240 <lwip_netconn_do_close_internal+0x2bc>)
 80111dc:	6938      	ldr	r0, [r7, #16]
 80111de:	f005 fbbf 	bl	8016960 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80111e2:	2201      	movs	r2, #1
 80111e4:	4917      	ldr	r1, [pc, #92]	; (8011244 <lwip_netconn_do_close_internal+0x2c0>)
 80111e6:	6938      	ldr	r0, [r7, #16]
 80111e8:	f005 fc16 	bl	8016a18 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80111ec:	4916      	ldr	r1, [pc, #88]	; (8011248 <lwip_netconn_do_close_internal+0x2c4>)
 80111ee:	6938      	ldr	r0, [r7, #16]
 80111f0:	f005 fbd8 	bl	80169a4 <tcp_err>
    tcp_arg(tpcb, conn);
 80111f4:	6879      	ldr	r1, [r7, #4]
 80111f6:	6938      	ldr	r0, [r7, #16]
 80111f8:	f005 fb7e 	bl	80168f8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80111fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d106      	bne.n	8011212 <lwip_netconn_do_close_internal+0x28e>
 8011204:	4b06      	ldr	r3, [pc, #24]	; (8011220 <lwip_netconn_do_close_internal+0x29c>)
 8011206:	f240 424d 	movw	r2, #1101	; 0x44d
 801120a:	4910      	ldr	r1, [pc, #64]	; (801124c <lwip_netconn_do_close_internal+0x2c8>)
 801120c:	4806      	ldr	r0, [pc, #24]	; (8011228 <lwip_netconn_do_close_internal+0x2a4>)
 801120e:	f00f fddd 	bl	8020dcc <iprintf>
  return err;
 8011212:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011216:	4618      	mov	r0, r3
 8011218:	3718      	adds	r7, #24
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	08022cac 	.word	0x08022cac
 8011224:	08022f80 	.word	0x08022f80
 8011228:	08022cf0 	.word	0x08022cf0
 801122c:	08022f90 	.word	0x08022f90
 8011230:	08022fb0 	.word	0x08022fb0
 8011234:	08022fd4 	.word	0x08022fd4
 8011238:	08022e14 	.word	0x08022e14
 801123c:	08022fe8 	.word	0x08022fe8
 8011240:	08010975 	.word	0x08010975
 8011244:	080108ad 	.word	0x080108ad
 8011248:	08010a1d 	.word	0x08010a1d
 801124c:	0802300c 	.word	0x0802300c

08011250 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b084      	sub	sp, #16
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	785b      	ldrb	r3, [r3, #1]
 8011262:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8011264:	7afb      	ldrb	r3, [r7, #11]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d00d      	beq.n	8011286 <lwip_netconn_do_delconn+0x36>
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011274:	2b10      	cmp	r3, #16
 8011276:	d006      	beq.n	8011286 <lwip_netconn_do_delconn+0x36>
 8011278:	4b60      	ldr	r3, [pc, #384]	; (80113fc <lwip_netconn_do_delconn+0x1ac>)
 801127a:	f240 425e 	movw	r2, #1118	; 0x45e
 801127e:	4960      	ldr	r1, [pc, #384]	; (8011400 <lwip_netconn_do_delconn+0x1b0>)
 8011280:	4860      	ldr	r0, [pc, #384]	; (8011404 <lwip_netconn_do_delconn+0x1b4>)
 8011282:	f00f fda3 	bl	8020dcc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8011286:	7afb      	ldrb	r3, [r7, #11]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d005      	beq.n	8011298 <lwip_netconn_do_delconn+0x48>
 801128c:	7afb      	ldrb	r3, [r7, #11]
 801128e:	2b02      	cmp	r3, #2
 8011290:	d002      	beq.n	8011298 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8011292:	7afb      	ldrb	r3, [r7, #11]
 8011294:	2b03      	cmp	r3, #3
 8011296:	d109      	bne.n	80112ac <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8011298:	7afb      	ldrb	r3, [r7, #11]
 801129a:	2b03      	cmp	r3, #3
 801129c:	d10a      	bne.n	80112b4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	7f1b      	ldrb	r3, [r3, #28]
 80112a4:	f003 0304 	and.w	r3, r3, #4
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d103      	bne.n	80112b4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	22fb      	movs	r2, #251	; 0xfb
 80112b0:	711a      	strb	r2, [r3, #4]
 80112b2:	e097      	b.n	80113e4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80112b4:	7afb      	ldrb	r3, [r7, #11]
 80112b6:	2b03      	cmp	r3, #3
 80112b8:	d10d      	bne.n	80112d6 <lwip_netconn_do_delconn+0x86>
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	7f1b      	ldrb	r3, [r3, #28]
 80112c0:	f003 0304 	and.w	r3, r3, #4
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d106      	bne.n	80112d6 <lwip_netconn_do_delconn+0x86>
 80112c8:	4b4c      	ldr	r3, [pc, #304]	; (80113fc <lwip_netconn_do_delconn+0x1ac>)
 80112ca:	f240 427a 	movw	r2, #1146	; 0x47a
 80112ce:	494e      	ldr	r1, [pc, #312]	; (8011408 <lwip_netconn_do_delconn+0x1b8>)
 80112d0:	484c      	ldr	r0, [pc, #304]	; (8011404 <lwip_netconn_do_delconn+0x1b4>)
 80112d2:	f00f fd7b 	bl	8020dcc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2200      	movs	r2, #0
 80112da:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7ff fdd1 	bl	8010e88 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	685b      	ldr	r3, [r3, #4]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d05f      	beq.n	80113b0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80112fa:	2b10      	cmp	r3, #16
 80112fc:	d00d      	beq.n	801131a <lwip_netconn_do_delconn+0xca>
 80112fe:	2b20      	cmp	r3, #32
 8011300:	d151      	bne.n	80113a6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	2200      	movs	r2, #0
 801130a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	4618      	mov	r0, r3
 8011314:	f00a fdf2 	bl	801befc <udp_remove>
          break;
 8011318:	e046      	b.n	80113a8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	6a1b      	ldr	r3, [r3, #32]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d006      	beq.n	8011332 <lwip_netconn_do_delconn+0xe2>
 8011324:	4b35      	ldr	r3, [pc, #212]	; (80113fc <lwip_netconn_do_delconn+0x1ac>)
 8011326:	f240 4294 	movw	r2, #1172	; 0x494
 801132a:	4938      	ldr	r1, [pc, #224]	; (801140c <lwip_netconn_do_delconn+0x1bc>)
 801132c:	4835      	ldr	r0, [pc, #212]	; (8011404 <lwip_netconn_do_delconn+0x1b4>)
 801132e:	f00f fd4d 	bl	8020dcc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2204      	movs	r2, #4
 8011338:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2203      	movs	r2, #3
 801133e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	2100      	movs	r1, #0
 801134e:	4618      	mov	r0, r3
 8011350:	f7ff fe18 	bl	8010f84 <lwip_netconn_do_close_internal>
 8011354:	4603      	mov	r3, r0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d04b      	beq.n	80113f2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	785b      	ldrb	r3, [r3, #1]
 8011360:	2b04      	cmp	r3, #4
 8011362:	d006      	beq.n	8011372 <lwip_netconn_do_delconn+0x122>
 8011364:	4b25      	ldr	r3, [pc, #148]	; (80113fc <lwip_netconn_do_delconn+0x1ac>)
 8011366:	f240 429a 	movw	r2, #1178	; 0x49a
 801136a:	4929      	ldr	r1, [pc, #164]	; (8011410 <lwip_netconn_do_delconn+0x1c0>)
 801136c:	4825      	ldr	r0, [pc, #148]	; (8011404 <lwip_netconn_do_delconn+0x1b4>)
 801136e:	f00f fd2d 	bl	8020dcc <iprintf>
            UNLOCK_TCPIP_CORE();
 8011372:	4828      	ldr	r0, [pc, #160]	; (8011414 <lwip_netconn_do_delconn+0x1c4>)
 8011374:	f00f fab1 	bl	80208da <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	330c      	adds	r3, #12
 801137e:	2100      	movs	r1, #0
 8011380:	4618      	mov	r0, r3
 8011382:	f00f fa10 	bl	80207a6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8011386:	4823      	ldr	r0, [pc, #140]	; (8011414 <lwip_netconn_do_delconn+0x1c4>)
 8011388:	f00f fa98 	bl	80208bc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	785b      	ldrb	r3, [r3, #1]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d02d      	beq.n	80113f2 <lwip_netconn_do_delconn+0x1a2>
 8011396:	4b19      	ldr	r3, [pc, #100]	; (80113fc <lwip_netconn_do_delconn+0x1ac>)
 8011398:	f240 429e 	movw	r2, #1182	; 0x49e
 801139c:	491c      	ldr	r1, [pc, #112]	; (8011410 <lwip_netconn_do_delconn+0x1c0>)
 801139e:	4819      	ldr	r0, [pc, #100]	; (8011404 <lwip_netconn_do_delconn+0x1b4>)
 80113a0:	f00f fd14 	bl	8020dcc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80113a4:	e025      	b.n	80113f2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80113a6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	2200      	movs	r2, #0
 80113ae:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d007      	beq.n	80113ca <lwip_netconn_do_delconn+0x17a>
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113c0:	68fa      	ldr	r2, [r7, #12]
 80113c2:	6810      	ldr	r0, [r2, #0]
 80113c4:	2200      	movs	r2, #0
 80113c6:	2100      	movs	r1, #0
 80113c8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d007      	beq.n	80113e4 <lwip_netconn_do_delconn+0x194>
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113da:	68fa      	ldr	r2, [r7, #12]
 80113dc:	6810      	ldr	r0, [r2, #0]
 80113de:	2200      	movs	r2, #0
 80113e0:	2102      	movs	r1, #2
 80113e2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	330c      	adds	r3, #12
 80113ea:	4618      	mov	r0, r3
 80113ec:	f00f fa26 	bl	802083c <sys_sem_valid>
 80113f0:	e000      	b.n	80113f4 <lwip_netconn_do_delconn+0x1a4>
          return;
 80113f2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80113f4:	3710      	adds	r7, #16
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop
 80113fc:	08022cac 	.word	0x08022cac
 8011400:	0802301c 	.word	0x0802301c
 8011404:	08022cf0 	.word	0x08022cf0
 8011408:	08023030 	.word	0x08023030
 801140c:	08023050 	.word	0x08023050
 8011410:	0802306c 	.word	0x0802306c
 8011414:	200135cc 	.word	0x200135cc

08011418 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b088      	sub	sp, #32
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	4613      	mov	r3, r2
 8011424:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8011426:	2300      	movs	r3, #0
 8011428:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d102      	bne.n	801143a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8011434:	f06f 0305 	mvn.w	r3, #5
 8011438:	e070      	b.n	801151c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 801143a:	69bb      	ldr	r3, [r7, #24]
 801143c:	785b      	ldrb	r3, [r3, #1]
 801143e:	2b03      	cmp	r3, #3
 8011440:	d006      	beq.n	8011450 <lwip_netconn_do_connected+0x38>
 8011442:	4b38      	ldr	r3, [pc, #224]	; (8011524 <lwip_netconn_do_connected+0x10c>)
 8011444:	f240 5223 	movw	r2, #1315	; 0x523
 8011448:	4937      	ldr	r1, [pc, #220]	; (8011528 <lwip_netconn_do_connected+0x110>)
 801144a:	4838      	ldr	r0, [pc, #224]	; (801152c <lwip_netconn_do_connected+0x114>)
 801144c:	f00f fcbe 	bl	8020dcc <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8011450:	69bb      	ldr	r3, [r7, #24]
 8011452:	6a1b      	ldr	r3, [r3, #32]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d10c      	bne.n	8011472 <lwip_netconn_do_connected+0x5a>
 8011458:	69bb      	ldr	r3, [r7, #24]
 801145a:	7f1b      	ldrb	r3, [r3, #28]
 801145c:	f003 0304 	and.w	r3, r3, #4
 8011460:	2b00      	cmp	r3, #0
 8011462:	d106      	bne.n	8011472 <lwip_netconn_do_connected+0x5a>
 8011464:	4b2f      	ldr	r3, [pc, #188]	; (8011524 <lwip_netconn_do_connected+0x10c>)
 8011466:	f240 5224 	movw	r2, #1316	; 0x524
 801146a:	4931      	ldr	r1, [pc, #196]	; (8011530 <lwip_netconn_do_connected+0x118>)
 801146c:	482f      	ldr	r0, [pc, #188]	; (801152c <lwip_netconn_do_connected+0x114>)
 801146e:	f00f fcad 	bl	8020dcc <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8011472:	69bb      	ldr	r3, [r7, #24]
 8011474:	6a1b      	ldr	r3, [r3, #32]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d008      	beq.n	801148c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	6a1b      	ldr	r3, [r3, #32]
 801147e:	79fa      	ldrb	r2, [r7, #7]
 8011480:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	6a1b      	ldr	r3, [r3, #32]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	330c      	adds	r3, #12
 801148a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 801148c:	69bb      	ldr	r3, [r7, #24]
 801148e:	781b      	ldrb	r3, [r3, #0]
 8011490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011494:	2b10      	cmp	r3, #16
 8011496:	d106      	bne.n	80114a6 <lwip_netconn_do_connected+0x8e>
 8011498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d102      	bne.n	80114a6 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 80114a0:	69b8      	ldr	r0, [r7, #24]
 80114a2:	f7ff fb91 	bl	8010bc8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	7f1b      	ldrb	r3, [r3, #28]
 80114aa:	f003 0304 	and.w	r3, r3, #4
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	bf0c      	ite	eq
 80114b2:	2301      	moveq	r3, #1
 80114b4:	2300      	movne	r3, #0
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80114ba:	69bb      	ldr	r3, [r7, #24]
 80114bc:	7f1b      	ldrb	r3, [r3, #28]
 80114be:	f023 0304 	bic.w	r3, r3, #4
 80114c2:	b2da      	uxtb	r2, r3
 80114c4:	69bb      	ldr	r3, [r7, #24]
 80114c6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d002      	beq.n	80114d4 <lwip_netconn_do_connected+0xbc>
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d10c      	bne.n	80114ee <lwip_netconn_do_connected+0xd6>
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d102      	bne.n	80114e0 <lwip_netconn_do_connected+0xc8>
 80114da:	69fb      	ldr	r3, [r7, #28]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d006      	beq.n	80114ee <lwip_netconn_do_connected+0xd6>
 80114e0:	4b10      	ldr	r3, [pc, #64]	; (8011524 <lwip_netconn_do_connected+0x10c>)
 80114e2:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 80114e6:	4913      	ldr	r1, [pc, #76]	; (8011534 <lwip_netconn_do_connected+0x11c>)
 80114e8:	4810      	ldr	r0, [pc, #64]	; (801152c <lwip_netconn_do_connected+0x114>)
 80114ea:	f00f fc6f 	bl	8020dcc <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	2200      	movs	r2, #0
 80114f2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	2200      	movs	r2, #0
 80114f8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80114fa:	69bb      	ldr	r3, [r7, #24]
 80114fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d005      	beq.n	801150e <lwip_netconn_do_connected+0xf6>
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011506:	2200      	movs	r2, #0
 8011508:	2102      	movs	r1, #2
 801150a:	69b8      	ldr	r0, [r7, #24]
 801150c:	4798      	blx	r3

  if (was_blocking) {
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d002      	beq.n	801151a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8011514:	69f8      	ldr	r0, [r7, #28]
 8011516:	f00f f977 	bl	8020808 <sys_sem_signal>
  }
  return ERR_OK;
 801151a:	2300      	movs	r3, #0
}
 801151c:	4618      	mov	r0, r3
 801151e:	3720      	adds	r7, #32
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	08022cac 	.word	0x08022cac
 8011528:	08023074 	.word	0x08023074
 801152c:	08022cf0 	.word	0x08022cf0
 8011530:	08023094 	.word	0x08023094
 8011534:	080230d4 	.word	0x080230d4

08011538 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d102      	bne.n	8011554 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 801154e:	23f1      	movs	r3, #241	; 0xf1
 8011550:	75fb      	strb	r3, [r7, #23]
 8011552:	e09b      	b.n	801168c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801155e:	2b10      	cmp	r3, #16
 8011560:	d00f      	beq.n	8011582 <lwip_netconn_do_connect+0x4a>
 8011562:	2b20      	cmp	r3, #32
 8011564:	f040 8087 	bne.w	8011676 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	6858      	ldr	r0, [r3, #4]
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	6899      	ldr	r1, [r3, #8]
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	899b      	ldrh	r3, [r3, #12]
 8011576:	461a      	mov	r2, r3
 8011578:	f00a fc0a 	bl	801bd90 <udp_connect>
 801157c:	4603      	mov	r3, r0
 801157e:	75fb      	strb	r3, [r7, #23]
        break;
 8011580:	e084      	b.n	801168c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	785b      	ldrb	r3, [r3, #1]
 8011588:	2b03      	cmp	r3, #3
 801158a:	d102      	bne.n	8011592 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 801158c:	23f7      	movs	r3, #247	; 0xf7
 801158e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8011590:	e07b      	b.n	801168a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	785b      	ldrb	r3, [r3, #1]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d002      	beq.n	80115a2 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 801159c:	23f6      	movs	r3, #246	; 0xf6
 801159e:	75fb      	strb	r3, [r7, #23]
        break;
 80115a0:	e073      	b.n	801168a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7ff fb0e 	bl	8010bc8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	6858      	ldr	r0, [r3, #4]
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	6899      	ldr	r1, [r3, #8]
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	899a      	ldrh	r2, [r3, #12]
 80115ba:	4b38      	ldr	r3, [pc, #224]	; (801169c <lwip_netconn_do_connect+0x164>)
 80115bc:	f004 fa54 	bl	8015a68 <tcp_connect>
 80115c0:	4603      	mov	r3, r0
 80115c2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 80115c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d15e      	bne.n	801168a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	7f1b      	ldrb	r3, [r3, #28]
 80115d2:	f003 0302 	and.w	r3, r3, #2
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	bf14      	ite	ne
 80115da:	2301      	movne	r3, #1
 80115dc:	2300      	moveq	r3, #0
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2203      	movs	r2, #3
 80115e8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80115ea:	7bfb      	ldrb	r3, [r7, #15]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d009      	beq.n	8011604 <lwip_netconn_do_connect+0xcc>
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	7f1a      	ldrb	r2, [r3, #28]
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f042 0204 	orr.w	r2, r2, #4
 80115fe:	b2d2      	uxtb	r2, r2
 8011600:	771a      	strb	r2, [r3, #28]
 8011602:	e008      	b.n	8011616 <lwip_netconn_do_connect+0xde>
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	7f1a      	ldrb	r2, [r3, #28]
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	f022 0204 	bic.w	r2, r2, #4
 8011612:	b2d2      	uxtb	r2, r2
 8011614:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8011616:	7bfb      	ldrb	r3, [r7, #15]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d002      	beq.n	8011622 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 801161c:	23fb      	movs	r3, #251	; 0xfb
 801161e:	75fb      	strb	r3, [r7, #23]
        break;
 8011620:	e033      	b.n	801168a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	693a      	ldr	r2, [r7, #16]
 8011628:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	785b      	ldrb	r3, [r3, #1]
 8011630:	2b03      	cmp	r3, #3
 8011632:	d006      	beq.n	8011642 <lwip_netconn_do_connect+0x10a>
 8011634:	4b1a      	ldr	r3, [pc, #104]	; (80116a0 <lwip_netconn_do_connect+0x168>)
 8011636:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 801163a:	491a      	ldr	r1, [pc, #104]	; (80116a4 <lwip_netconn_do_connect+0x16c>)
 801163c:	481a      	ldr	r0, [pc, #104]	; (80116a8 <lwip_netconn_do_connect+0x170>)
 801163e:	f00f fbc5 	bl	8020dcc <iprintf>
              UNLOCK_TCPIP_CORE();
 8011642:	481a      	ldr	r0, [pc, #104]	; (80116ac <lwip_netconn_do_connect+0x174>)
 8011644:	f00f f949 	bl	80208da <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	330c      	adds	r3, #12
 801164e:	2100      	movs	r1, #0
 8011650:	4618      	mov	r0, r3
 8011652:	f00f f8a8 	bl	80207a6 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8011656:	4815      	ldr	r0, [pc, #84]	; (80116ac <lwip_netconn_do_connect+0x174>)
 8011658:	f00f f930 	bl	80208bc <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	785b      	ldrb	r3, [r3, #1]
 8011662:	2b03      	cmp	r3, #3
 8011664:	d116      	bne.n	8011694 <lwip_netconn_do_connect+0x15c>
 8011666:	4b0e      	ldr	r3, [pc, #56]	; (80116a0 <lwip_netconn_do_connect+0x168>)
 8011668:	f240 5274 	movw	r2, #1396	; 0x574
 801166c:	490d      	ldr	r1, [pc, #52]	; (80116a4 <lwip_netconn_do_connect+0x16c>)
 801166e:	480e      	ldr	r0, [pc, #56]	; (80116a8 <lwip_netconn_do_connect+0x170>)
 8011670:	f00f fbac 	bl	8020dcc <iprintf>
              return;
 8011674:	e00e      	b.n	8011694 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8011676:	4b0a      	ldr	r3, [pc, #40]	; (80116a0 <lwip_netconn_do_connect+0x168>)
 8011678:	f240 527d 	movw	r2, #1405	; 0x57d
 801167c:	490c      	ldr	r1, [pc, #48]	; (80116b0 <lwip_netconn_do_connect+0x178>)
 801167e:	480a      	ldr	r0, [pc, #40]	; (80116a8 <lwip_netconn_do_connect+0x170>)
 8011680:	f00f fba4 	bl	8020dcc <iprintf>
 8011684:	23fa      	movs	r3, #250	; 0xfa
 8011686:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8011688:	e000      	b.n	801168c <lwip_netconn_do_connect+0x154>
        break;
 801168a:	bf00      	nop
    }
  }
  msg->err = err;
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	7dfa      	ldrb	r2, [r7, #23]
 8011690:	711a      	strb	r2, [r3, #4]
 8011692:	e000      	b.n	8011696 <lwip_netconn_do_connect+0x15e>
              return;
 8011694:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8011696:	3718      	adds	r7, #24
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}
 801169c:	08011419 	.word	0x08011419
 80116a0:	08022cac 	.word	0x08022cac
 80116a4:	0802306c 	.word	0x0802306c
 80116a8:	08022cf0 	.word	0x08022cf0
 80116ac:	200135cc 	.word	0x200135cc
 80116b0:	080230f4 	.word	0x080230f4

080116b4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b086      	sub	sp, #24
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	2200      	movs	r2, #0
 80116c4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	685b      	ldr	r3, [r3, #4]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d022      	beq.n	8011716 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116da:	2b10      	cmp	r3, #16
 80116dc:	d11b      	bne.n	8011716 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80116de:	693b      	ldr	r3, [r7, #16]
 80116e0:	689b      	ldr	r3, [r3, #8]
 80116e2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116ea:	d202      	bcs.n	80116f2 <lwip_netconn_do_recv+0x3e>
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	e001      	b.n	80116f6 <lwip_netconn_do_recv+0x42>
 80116f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80116f6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	89fa      	ldrh	r2, [r7, #14]
 8011700:	4611      	mov	r1, r2
 8011702:	4618      	mov	r0, r3
 8011704:	f004 f91a 	bl	801593c <tcp_recved>
        remaining -= recved;
 8011708:	89fb      	ldrh	r3, [r7, #14]
 801170a:	697a      	ldr	r2, [r7, #20]
 801170c:	1ad3      	subs	r3, r2, r3
 801170e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d1e6      	bne.n	80116e4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011716:	bf00      	nop
 8011718:	3718      	adds	r7, #24
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
	...

08011720 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b088      	sub	sp, #32
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	460b      	mov	r3, r1
 801172a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801172c:	2300      	movs	r3, #0
 801172e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d106      	bne.n	8011744 <lwip_netconn_do_writemore+0x24>
 8011736:	4b96      	ldr	r3, [pc, #600]	; (8011990 <lwip_netconn_do_writemore+0x270>)
 8011738:	f240 6273 	movw	r2, #1651	; 0x673
 801173c:	4995      	ldr	r1, [pc, #596]	; (8011994 <lwip_netconn_do_writemore+0x274>)
 801173e:	4896      	ldr	r0, [pc, #600]	; (8011998 <lwip_netconn_do_writemore+0x278>)
 8011740:	f00f fb44 	bl	8020dcc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	785b      	ldrb	r3, [r3, #1]
 8011748:	2b01      	cmp	r3, #1
 801174a:	d006      	beq.n	801175a <lwip_netconn_do_writemore+0x3a>
 801174c:	4b90      	ldr	r3, [pc, #576]	; (8011990 <lwip_netconn_do_writemore+0x270>)
 801174e:	f240 6274 	movw	r2, #1652	; 0x674
 8011752:	4992      	ldr	r1, [pc, #584]	; (801199c <lwip_netconn_do_writemore+0x27c>)
 8011754:	4890      	ldr	r0, [pc, #576]	; (8011998 <lwip_netconn_do_writemore+0x278>)
 8011756:	f00f fb39 	bl	8020dcc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6a1b      	ldr	r3, [r3, #32]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d106      	bne.n	8011770 <lwip_netconn_do_writemore+0x50>
 8011762:	4b8b      	ldr	r3, [pc, #556]	; (8011990 <lwip_netconn_do_writemore+0x270>)
 8011764:	f240 6275 	movw	r2, #1653	; 0x675
 8011768:	498d      	ldr	r1, [pc, #564]	; (80119a0 <lwip_netconn_do_writemore+0x280>)
 801176a:	488b      	ldr	r0, [pc, #556]	; (8011998 <lwip_netconn_do_writemore+0x278>)
 801176c:	f00f fb2e 	bl	8020dcc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d106      	bne.n	8011786 <lwip_netconn_do_writemore+0x66>
 8011778:	4b85      	ldr	r3, [pc, #532]	; (8011990 <lwip_netconn_do_writemore+0x270>)
 801177a:	f240 6276 	movw	r2, #1654	; 0x676
 801177e:	4989      	ldr	r1, [pc, #548]	; (80119a4 <lwip_netconn_do_writemore+0x284>)
 8011780:	4885      	ldr	r0, [pc, #532]	; (8011998 <lwip_netconn_do_writemore+0x278>)
 8011782:	f00f fb23 	bl	8020dcc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6a1b      	ldr	r3, [r3, #32]
 801178a:	699a      	ldr	r2, [r3, #24]
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6a1b      	ldr	r3, [r3, #32]
 8011790:	695b      	ldr	r3, [r3, #20]
 8011792:	429a      	cmp	r2, r3
 8011794:	d306      	bcc.n	80117a4 <lwip_netconn_do_writemore+0x84>
 8011796:	4b7e      	ldr	r3, [pc, #504]	; (8011990 <lwip_netconn_do_writemore+0x270>)
 8011798:	f240 6277 	movw	r2, #1655	; 0x677
 801179c:	4982      	ldr	r1, [pc, #520]	; (80119a8 <lwip_netconn_do_writemore+0x288>)
 801179e:	487e      	ldr	r0, [pc, #504]	; (8011998 <lwip_netconn_do_writemore+0x278>)
 80117a0:	f00f fb14 	bl	8020dcc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6a1b      	ldr	r3, [r3, #32]
 80117a8:	899b      	ldrh	r3, [r3, #12]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d106      	bne.n	80117bc <lwip_netconn_do_writemore+0x9c>
 80117ae:	4b78      	ldr	r3, [pc, #480]	; (8011990 <lwip_netconn_do_writemore+0x270>)
 80117b0:	f240 6279 	movw	r2, #1657	; 0x679
 80117b4:	497d      	ldr	r1, [pc, #500]	; (80119ac <lwip_netconn_do_writemore+0x28c>)
 80117b6:	4878      	ldr	r0, [pc, #480]	; (8011998 <lwip_netconn_do_writemore+0x278>)
 80117b8:	f00f fb08 	bl	8020dcc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6a1b      	ldr	r3, [r3, #32]
 80117c0:	7f1b      	ldrb	r3, [r3, #28]
 80117c2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	7f1b      	ldrb	r3, [r3, #28]
 80117c8:	f003 0302 	and.w	r3, r3, #2
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d104      	bne.n	80117da <lwip_netconn_do_writemore+0xba>
 80117d0:	7ebb      	ldrb	r3, [r7, #26]
 80117d2:	f003 0304 	and.w	r3, r3, #4
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d001      	beq.n	80117de <lwip_netconn_do_writemore+0xbe>
 80117da:	2301      	movs	r3, #1
 80117dc:	e000      	b.n	80117e0 <lwip_netconn_do_writemore+0xc0>
 80117de:	2300      	movs	r3, #0
 80117e0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6a1b      	ldr	r3, [r3, #32]
 80117e6:	689b      	ldr	r3, [r3, #8]
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6a1b      	ldr	r3, [r3, #32]
 80117ee:	691b      	ldr	r3, [r3, #16]
 80117f0:	4413      	add	r3, r2
 80117f2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6a1b      	ldr	r3, [r3, #32]
 80117f8:	689b      	ldr	r3, [r3, #8]
 80117fa:	685a      	ldr	r2, [r3, #4]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6a1b      	ldr	r3, [r3, #32]
 8011800:	691b      	ldr	r3, [r3, #16]
 8011802:	1ad3      	subs	r3, r2, r3
 8011804:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801180c:	d307      	bcc.n	801181e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801180e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011812:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011814:	7ebb      	ldrb	r3, [r7, #26]
 8011816:	f043 0302 	orr.w	r3, r3, #2
 801181a:	76bb      	strb	r3, [r7, #26]
 801181c:	e001      	b.n	8011822 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801182a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801182c:	89fa      	ldrh	r2, [r7, #14]
 801182e:	8bbb      	ldrh	r3, [r7, #28]
 8011830:	429a      	cmp	r2, r3
 8011832:	d216      	bcs.n	8011862 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8011834:	89fb      	ldrh	r3, [r7, #14]
 8011836:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8011838:	7e3b      	ldrb	r3, [r7, #24]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d00d      	beq.n	801185a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801183e:	8bbb      	ldrh	r3, [r7, #28]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d10e      	bne.n	8011862 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6a1b      	ldr	r3, [r3, #32]
 8011848:	699b      	ldr	r3, [r3, #24]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d102      	bne.n	8011854 <lwip_netconn_do_writemore+0x134>
 801184e:	f06f 0306 	mvn.w	r3, #6
 8011852:	e000      	b.n	8011856 <lwip_netconn_do_writemore+0x136>
 8011854:	2300      	movs	r3, #0
 8011856:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8011858:	e07d      	b.n	8011956 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801185a:	7ebb      	ldrb	r3, [r7, #26]
 801185c:	f043 0302 	orr.w	r3, r3, #2
 8011860:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6a1b      	ldr	r3, [r3, #32]
 8011866:	691a      	ldr	r2, [r3, #16]
 8011868:	8bbb      	ldrh	r3, [r7, #28]
 801186a:	441a      	add	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6a1b      	ldr	r3, [r3, #32]
 8011870:	689b      	ldr	r3, [r3, #8]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	429a      	cmp	r2, r3
 8011876:	d906      	bls.n	8011886 <lwip_netconn_do_writemore+0x166>
 8011878:	4b45      	ldr	r3, [pc, #276]	; (8011990 <lwip_netconn_do_writemore+0x270>)
 801187a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801187e:	494c      	ldr	r1, [pc, #304]	; (80119b0 <lwip_netconn_do_writemore+0x290>)
 8011880:	4845      	ldr	r0, [pc, #276]	; (8011998 <lwip_netconn_do_writemore+0x278>)
 8011882:	f00f faa3 	bl	8020dcc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8011886:	8bbb      	ldrh	r3, [r7, #28]
 8011888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801188c:	4293      	cmp	r3, r2
 801188e:	d103      	bne.n	8011898 <lwip_netconn_do_writemore+0x178>
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011896:	d209      	bcs.n	80118ac <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 801189c:	8bba      	ldrh	r2, [r7, #28]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d10b      	bne.n	80118ba <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6a1b      	ldr	r3, [r3, #32]
 80118a6:	899b      	ldrh	r3, [r3, #12]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d906      	bls.n	80118ba <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80118ac:	2301      	movs	r3, #1
 80118ae:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80118b0:	7ebb      	ldrb	r3, [r7, #26]
 80118b2:	f043 0302 	orr.w	r3, r3, #2
 80118b6:	76bb      	strb	r3, [r7, #26]
 80118b8:	e001      	b.n	80118be <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80118ba:	2300      	movs	r3, #0
 80118bc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6858      	ldr	r0, [r3, #4]
 80118c2:	7ebb      	ldrb	r3, [r7, #26]
 80118c4:	8bba      	ldrh	r2, [r7, #28]
 80118c6:	6979      	ldr	r1, [r7, #20]
 80118c8:	f007 ff54 	bl	8019774 <tcp_write>
 80118cc:	4603      	mov	r3, r0
 80118ce:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80118d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d12c      	bne.n	8011932 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6a1b      	ldr	r3, [r3, #32]
 80118dc:	6999      	ldr	r1, [r3, #24]
 80118de:	8bba      	ldrh	r2, [r7, #28]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6a1b      	ldr	r3, [r3, #32]
 80118e4:	440a      	add	r2, r1
 80118e6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6a1b      	ldr	r3, [r3, #32]
 80118ec:	6919      	ldr	r1, [r3, #16]
 80118ee:	8bba      	ldrh	r2, [r7, #28]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6a1b      	ldr	r3, [r3, #32]
 80118f4:	440a      	add	r2, r1
 80118f6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6a1b      	ldr	r3, [r3, #32]
 80118fc:	691a      	ldr	r2, [r3, #16]
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6a1b      	ldr	r3, [r3, #32]
 8011902:	689b      	ldr	r3, [r3, #8]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	429a      	cmp	r2, r3
 8011908:	d113      	bne.n	8011932 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a1b      	ldr	r3, [r3, #32]
 801190e:	899a      	ldrh	r2, [r3, #12]
 8011910:	3a01      	subs	r2, #1
 8011912:	b292      	uxth	r2, r2
 8011914:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6a1b      	ldr	r3, [r3, #32]
 801191a:	899b      	ldrh	r3, [r3, #12]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d008      	beq.n	8011932 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6a1b      	ldr	r3, [r3, #32]
 8011924:	689a      	ldr	r2, [r3, #8]
 8011926:	3208      	adds	r2, #8
 8011928:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6a1b      	ldr	r3, [r3, #32]
 801192e:	2200      	movs	r2, #0
 8011930:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8011932:	7e7b      	ldrb	r3, [r7, #25]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d004      	beq.n	8011942 <lwip_netconn_do_writemore+0x222>
 8011938:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801193c:	2b00      	cmp	r3, #0
 801193e:	f43f af50 	beq.w	80117e2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8011942:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d004      	beq.n	8011954 <lwip_netconn_do_writemore+0x234>
 801194a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801194e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011952:	d146      	bne.n	80119e2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8011954:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8011956:	7e3b      	ldrb	r3, [r7, #24]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d02b      	beq.n	80119b4 <lwip_netconn_do_writemore+0x294>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6a1b      	ldr	r3, [r3, #32]
 8011960:	699a      	ldr	r2, [r3, #24]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6a1b      	ldr	r3, [r3, #32]
 8011966:	695b      	ldr	r3, [r3, #20]
 8011968:	429a      	cmp	r2, r3
 801196a:	d223      	bcs.n	80119b4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011970:	2b00      	cmp	r3, #0
 8011972:	d005      	beq.n	8011980 <lwip_netconn_do_writemore+0x260>
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011978:	2200      	movs	r2, #0
 801197a:	2103      	movs	r1, #3
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	7f1b      	ldrb	r3, [r3, #28]
 8011984:	f043 0310 	orr.w	r3, r3, #16
 8011988:	b2da      	uxtb	r2, r3
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	771a      	strb	r2, [r3, #28]
 801198e:	e028      	b.n	80119e2 <lwip_netconn_do_writemore+0x2c2>
 8011990:	08022cac 	.word	0x08022cac
 8011994:	08022e04 	.word	0x08022e04
 8011998:	08022cf0 	.word	0x08022cf0
 801199c:	0802310c 	.word	0x0802310c
 80119a0:	08022e14 	.word	0x08022e14
 80119a4:	0802312c 	.word	0x0802312c
 80119a8:	08023144 	.word	0x08023144
 80119ac:	08023184 	.word	0x08023184
 80119b0:	080231ac 	.word	0x080231ac
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80119bc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80119c0:	d305      	bcc.n	80119ce <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80119ca:	2b04      	cmp	r3, #4
 80119cc:	d909      	bls.n	80119e2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d005      	beq.n	80119e2 <lwip_netconn_do_writemore+0x2c2>
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119da:	2200      	movs	r2, #0
 80119dc:	2103      	movs	r1, #3
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80119e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d11d      	bne.n	8011a26 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6a1b      	ldr	r3, [r3, #32]
 80119ee:	699a      	ldr	r2, [r3, #24]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6a1b      	ldr	r3, [r3, #32]
 80119f4:	695b      	ldr	r3, [r3, #20]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d002      	beq.n	8011a00 <lwip_netconn_do_writemore+0x2e0>
 80119fa:	7e3b      	ldrb	r3, [r7, #24]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d001      	beq.n	8011a04 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8011a00:	2301      	movs	r3, #1
 8011a02:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f008 fc9d 	bl	801a348 <tcp_output>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8011a12:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011a16:	f113 0f04 	cmn.w	r3, #4
 8011a1a:	d12c      	bne.n	8011a76 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011a1c:	7b3b      	ldrb	r3, [r7, #12]
 8011a1e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011a20:	2301      	movs	r3, #1
 8011a22:	76fb      	strb	r3, [r7, #27]
 8011a24:	e027      	b.n	8011a76 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8011a26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a2e:	d120      	bne.n	8011a72 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	4618      	mov	r0, r3
 8011a36:	f008 fc87 	bl	801a348 <tcp_output>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8011a3e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011a42:	f113 0f04 	cmn.w	r3, #4
 8011a46:	d104      	bne.n	8011a52 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011a48:	7b7b      	ldrb	r3, [r7, #13]
 8011a4a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	76fb      	strb	r3, [r7, #27]
 8011a50:	e011      	b.n	8011a76 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8011a52:	7e3b      	ldrb	r3, [r7, #24]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00e      	beq.n	8011a76 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6a1b      	ldr	r3, [r3, #32]
 8011a5c:	699b      	ldr	r3, [r3, #24]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d102      	bne.n	8011a68 <lwip_netconn_do_writemore+0x348>
 8011a62:	f06f 0306 	mvn.w	r3, #6
 8011a66:	e000      	b.n	8011a6a <lwip_netconn_do_writemore+0x34a>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	76fb      	strb	r3, [r7, #27]
 8011a70:	e001      	b.n	8011a76 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8011a72:	2301      	movs	r3, #1
 8011a74:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8011a76:	7efb      	ldrb	r3, [r7, #27]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d015      	beq.n	8011aa8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6a1b      	ldr	r3, [r3, #32]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	330c      	adds	r3, #12
 8011a84:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6a1b      	ldr	r3, [r3, #32]
 8011a8a:	7ffa      	ldrb	r2, [r7, #31]
 8011a8c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2200      	movs	r2, #0
 8011a92:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2200      	movs	r2, #0
 8011a98:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011a9a:	78fb      	ldrb	r3, [r7, #3]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d006      	beq.n	8011aae <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8011aa0:	68b8      	ldr	r0, [r7, #8]
 8011aa2:	f00e feb1 	bl	8020808 <sys_sem_signal>
 8011aa6:	e002      	b.n	8011aae <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8011aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8011aac:	e000      	b.n	8011ab0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8011aae:	2300      	movs	r3, #0
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3720      	adds	r7, #32
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7fe fd04 	bl	80104d6 <netconn_err>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d166      	bne.n	8011ba8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ae4:	2b10      	cmp	r3, #16
 8011ae6:	d15d      	bne.n	8011ba4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	785b      	ldrb	r3, [r3, #1]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d002      	beq.n	8011af8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8011af2:	23fb      	movs	r3, #251	; 0xfb
 8011af4:	73fb      	strb	r3, [r7, #15]
 8011af6:	e057      	b.n	8011ba8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d04d      	beq.n	8011b9e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	2201      	movs	r2, #1
 8011b08:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	6a1b      	ldr	r3, [r3, #32]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d006      	beq.n	8011b22 <lwip_netconn_do_write+0x6a>
 8011b14:	4b28      	ldr	r3, [pc, #160]	; (8011bb8 <lwip_netconn_do_write+0x100>)
 8011b16:	f240 7223 	movw	r2, #1827	; 0x723
 8011b1a:	4928      	ldr	r1, [pc, #160]	; (8011bbc <lwip_netconn_do_write+0x104>)
 8011b1c:	4828      	ldr	r0, [pc, #160]	; (8011bc0 <lwip_netconn_do_write+0x108>)
 8011b1e:	f00f f955 	bl	8020dcc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	695b      	ldr	r3, [r3, #20]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d106      	bne.n	8011b38 <lwip_netconn_do_write+0x80>
 8011b2a:	4b23      	ldr	r3, [pc, #140]	; (8011bb8 <lwip_netconn_do_write+0x100>)
 8011b2c:	f240 7224 	movw	r2, #1828	; 0x724
 8011b30:	4924      	ldr	r1, [pc, #144]	; (8011bc4 <lwip_netconn_do_write+0x10c>)
 8011b32:	4823      	ldr	r0, [pc, #140]	; (8011bc0 <lwip_netconn_do_write+0x108>)
 8011b34:	f00f f94a 	bl	8020dcc <iprintf>
        msg->conn->current_msg = msg;
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	68ba      	ldr	r2, [r7, #8]
 8011b3e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2100      	movs	r1, #0
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7ff fdea 	bl	8011720 <lwip_netconn_do_writemore>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d02e      	beq.n	8011bb0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	785b      	ldrb	r3, [r3, #1]
 8011b58:	2b01      	cmp	r3, #1
 8011b5a:	d006      	beq.n	8011b6a <lwip_netconn_do_write+0xb2>
 8011b5c:	4b16      	ldr	r3, [pc, #88]	; (8011bb8 <lwip_netconn_do_write+0x100>)
 8011b5e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8011b62:	4919      	ldr	r1, [pc, #100]	; (8011bc8 <lwip_netconn_do_write+0x110>)
 8011b64:	4816      	ldr	r0, [pc, #88]	; (8011bc0 <lwip_netconn_do_write+0x108>)
 8011b66:	f00f f931 	bl	8020dcc <iprintf>
          UNLOCK_TCPIP_CORE();
 8011b6a:	4818      	ldr	r0, [pc, #96]	; (8011bcc <lwip_netconn_do_write+0x114>)
 8011b6c:	f00e feb5 	bl	80208da <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	330c      	adds	r3, #12
 8011b76:	2100      	movs	r1, #0
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f00e fe14 	bl	80207a6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8011b7e:	4813      	ldr	r0, [pc, #76]	; (8011bcc <lwip_netconn_do_write+0x114>)
 8011b80:	f00e fe9c 	bl	80208bc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	785b      	ldrb	r3, [r3, #1]
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	d110      	bne.n	8011bb0 <lwip_netconn_do_write+0xf8>
 8011b8e:	4b0a      	ldr	r3, [pc, #40]	; (8011bb8 <lwip_netconn_do_write+0x100>)
 8011b90:	f240 722c 	movw	r2, #1836	; 0x72c
 8011b94:	490c      	ldr	r1, [pc, #48]	; (8011bc8 <lwip_netconn_do_write+0x110>)
 8011b96:	480a      	ldr	r0, [pc, #40]	; (8011bc0 <lwip_netconn_do_write+0x108>)
 8011b98:	f00f f918 	bl	8020dcc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8011b9c:	e008      	b.n	8011bb0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8011b9e:	23f5      	movs	r3, #245	; 0xf5
 8011ba0:	73fb      	strb	r3, [r7, #15]
 8011ba2:	e001      	b.n	8011ba8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8011ba4:	23fa      	movs	r3, #250	; 0xfa
 8011ba6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	7bfa      	ldrb	r2, [r7, #15]
 8011bac:	711a      	strb	r2, [r3, #4]
 8011bae:	e000      	b.n	8011bb2 <lwip_netconn_do_write+0xfa>
        return;
 8011bb0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8011bb2:	3710      	adds	r7, #16
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	08022cac 	.word	0x08022cac
 8011bbc:	08023050 	.word	0x08023050
 8011bc0:	08022cf0 	.word	0x08022cf0
 8011bc4:	080231d8 	.word	0x080231d8
 8011bc8:	0802306c 	.word	0x0802306c
 8011bcc:	200135cc 	.word	0x200135cc

08011bd0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	785b      	ldrb	r3, [r3, #1]
 8011be2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d069      	beq.n	8011cc2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8011bf8:	2b10      	cmp	r3, #16
 8011bfa:	d162      	bne.n	8011cc2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011c00:	2b03      	cmp	r3, #3
 8011c02:	d002      	beq.n	8011c0a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011c04:	7afb      	ldrb	r3, [r7, #11]
 8011c06:	2b02      	cmp	r3, #2
 8011c08:	d05b      	beq.n	8011cc2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8011c0a:	7afb      	ldrb	r3, [r7, #11]
 8011c0c:	2b03      	cmp	r3, #3
 8011c0e:	d103      	bne.n	8011c18 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	22f5      	movs	r2, #245	; 0xf5
 8011c14:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011c16:	e059      	b.n	8011ccc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8011c18:	7afb      	ldrb	r3, [r7, #11]
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d103      	bne.n	8011c26 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	22fb      	movs	r2, #251	; 0xfb
 8011c22:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011c24:	e052      	b.n	8011ccc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	7a1b      	ldrb	r3, [r3, #8]
 8011c2a:	f003 0301 	and.w	r3, r3, #1
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d004      	beq.n	8011c3c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7ff f926 	bl	8010e88 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	6a1b      	ldr	r3, [r3, #32]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d006      	beq.n	8011c54 <lwip_netconn_do_close+0x84>
 8011c46:	4b23      	ldr	r3, [pc, #140]	; (8011cd4 <lwip_netconn_do_close+0x104>)
 8011c48:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8011c4c:	4922      	ldr	r1, [pc, #136]	; (8011cd8 <lwip_netconn_do_close+0x108>)
 8011c4e:	4823      	ldr	r0, [pc, #140]	; (8011cdc <lwip_netconn_do_close+0x10c>)
 8011c50:	f00f f8bc 	bl	8020dcc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	2204      	movs	r2, #4
 8011c5a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	68fa      	ldr	r2, [r7, #12]
 8011c62:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2100      	movs	r1, #0
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7ff f98a 	bl	8010f84 <lwip_netconn_do_close_internal>
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d029      	beq.n	8011cca <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	785b      	ldrb	r3, [r3, #1]
 8011c7c:	2b04      	cmp	r3, #4
 8011c7e:	d006      	beq.n	8011c8e <lwip_netconn_do_close+0xbe>
 8011c80:	4b14      	ldr	r3, [pc, #80]	; (8011cd4 <lwip_netconn_do_close+0x104>)
 8011c82:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8011c86:	4916      	ldr	r1, [pc, #88]	; (8011ce0 <lwip_netconn_do_close+0x110>)
 8011c88:	4814      	ldr	r0, [pc, #80]	; (8011cdc <lwip_netconn_do_close+0x10c>)
 8011c8a:	f00f f89f 	bl	8020dcc <iprintf>
        UNLOCK_TCPIP_CORE();
 8011c8e:	4815      	ldr	r0, [pc, #84]	; (8011ce4 <lwip_netconn_do_close+0x114>)
 8011c90:	f00e fe23 	bl	80208da <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	330c      	adds	r3, #12
 8011c9a:	2100      	movs	r1, #0
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f00e fd82 	bl	80207a6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8011ca2:	4810      	ldr	r0, [pc, #64]	; (8011ce4 <lwip_netconn_do_close+0x114>)
 8011ca4:	f00e fe0a 	bl	80208bc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	785b      	ldrb	r3, [r3, #1]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d00b      	beq.n	8011cca <lwip_netconn_do_close+0xfa>
 8011cb2:	4b08      	ldr	r3, [pc, #32]	; (8011cd4 <lwip_netconn_do_close+0x104>)
 8011cb4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8011cb8:	4909      	ldr	r1, [pc, #36]	; (8011ce0 <lwip_netconn_do_close+0x110>)
 8011cba:	4808      	ldr	r0, [pc, #32]	; (8011cdc <lwip_netconn_do_close+0x10c>)
 8011cbc:	f00f f886 	bl	8020dcc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8011cc0:	e003      	b.n	8011cca <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	22f5      	movs	r2, #245	; 0xf5
 8011cc6:	711a      	strb	r2, [r3, #4]
 8011cc8:	e000      	b.n	8011ccc <lwip_netconn_do_close+0xfc>
      return;
 8011cca:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011ccc:	3710      	adds	r7, #16
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}
 8011cd2:	bf00      	nop
 8011cd4:	08022cac 	.word	0x08022cac
 8011cd8:	08023050 	.word	0x08023050
 8011cdc:	08022cf0 	.word	0x08022cf0
 8011ce0:	0802306c 	.word	0x0802306c
 8011ce4:	200135cc 	.word	0x200135cc

08011ce8 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b086      	sub	sp, #24
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	60f8      	str	r0, [r7, #12]
 8011cf0:	60b9      	str	r1, [r7, #8]
 8011cf2:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d104      	bne.n	8011d08 <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	22fa      	movs	r2, #250	; 0xfa
 8011d04:	701a      	strb	r2, [r3, #0]
 8011d06:	e008      	b.n	8011d1a <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 8011d08:	697b      	ldr	r3, [r7, #20]
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	685b      	ldr	r3, [r3, #4]
 8011d14:	68ba      	ldr	r2, [r7, #8]
 8011d16:	6812      	ldr	r2, [r2, #0]
 8011d18:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	689b      	ldr	r3, [r3, #8]
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f00e fd72 	bl	8020808 <sys_sem_signal>
}
 8011d24:	bf00      	nop
 8011d26:	3718      	adds	r7, #24
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}

08011d2c <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 8011d2c:	b590      	push	{r4, r7, lr}
 8011d2e:	b087      	sub	sp, #28
 8011d30:	af02      	add	r7, sp, #8
 8011d32:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 8011d38:	2300      	movs	r3, #0
 8011d3a:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	6818      	ldr	r0, [r3, #0]
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	6859      	ldr	r1, [r3, #4]
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	68dc      	ldr	r4, [r3, #12]
 8011d48:	7afb      	ldrb	r3, [r7, #11]
 8011d4a:	9300      	str	r3, [sp, #0]
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	4a15      	ldr	r2, [pc, #84]	; (8011da4 <lwip_netconn_do_gethostbyname+0x78>)
 8011d50:	f001 fa42 	bl	80131d8 <dns_gethostbyname_addrtype>
 8011d54:	4603      	mov	r3, r0
 8011d56:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8011d60:	f113 0f05 	cmn.w	r3, #5
 8011d64:	d119      	bne.n	8011d9a <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 8011d66:	4810      	ldr	r0, [pc, #64]	; (8011da8 <lwip_netconn_do_gethostbyname+0x7c>)
 8011d68:	f00e fdb7 	bl	80208da <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	689b      	ldr	r3, [r3, #8]
 8011d70:	2100      	movs	r1, #0
 8011d72:	4618      	mov	r0, r3
 8011d74:	f00e fd17 	bl	80207a6 <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 8011d78:	480b      	ldr	r0, [pc, #44]	; (8011da8 <lwip_netconn_do_gethostbyname+0x7c>)
 8011d7a:	f00e fd9f 	bl	80208bc <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	f993 3000 	ldrsb.w	r3, [r3]
 8011d86:	f113 0f05 	cmn.w	r3, #5
 8011d8a:	d106      	bne.n	8011d9a <lwip_netconn_do_gethostbyname+0x6e>
 8011d8c:	4b07      	ldr	r3, [pc, #28]	; (8011dac <lwip_netconn_do_gethostbyname+0x80>)
 8011d8e:	f640 0271 	movw	r2, #2161	; 0x871
 8011d92:	4907      	ldr	r1, [pc, #28]	; (8011db0 <lwip_netconn_do_gethostbyname+0x84>)
 8011d94:	4807      	ldr	r0, [pc, #28]	; (8011db4 <lwip_netconn_do_gethostbyname+0x88>)
 8011d96:	f00f f819 	bl	8020dcc <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8011d9a:	bf00      	nop
 8011d9c:	3714      	adds	r7, #20
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd90      	pop	{r4, r7, pc}
 8011da2:	bf00      	nop
 8011da4:	08011ce9 	.word	0x08011ce9
 8011da8:	200135cc 	.word	0x200135cc
 8011dac:	08022cac 	.word	0x08022cac
 8011db0:	08023204 	.word	0x08023204
 8011db4:	08022cf0 	.word	0x08022cf0

08011db8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d013      	beq.n	8011dee <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d00b      	beq.n	8011de6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f002 fdd0 	bl	8014978 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	605a      	str	r2, [r3, #4]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	685a      	ldr	r2, [r3, #4]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8011de6:	6879      	ldr	r1, [r7, #4]
 8011de8:	2006      	movs	r0, #6
 8011dea:	f001 ff15 	bl	8013c18 <memp_free>
  }
}
 8011dee:	bf00      	nop
 8011df0:	3708      	adds	r7, #8
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
	...

08011df8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b084      	sub	sp, #16
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d108      	bne.n	8011e1c <netbuf_data+0x24>
 8011e0a:	4b1b      	ldr	r3, [pc, #108]	; (8011e78 <netbuf_data+0x80>)
 8011e0c:	22c6      	movs	r2, #198	; 0xc6
 8011e0e:	491b      	ldr	r1, [pc, #108]	; (8011e7c <netbuf_data+0x84>)
 8011e10:	481b      	ldr	r0, [pc, #108]	; (8011e80 <netbuf_data+0x88>)
 8011e12:	f00e ffdb 	bl	8020dcc <iprintf>
 8011e16:	f06f 030f 	mvn.w	r3, #15
 8011e1a:	e029      	b.n	8011e70 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d108      	bne.n	8011e34 <netbuf_data+0x3c>
 8011e22:	4b15      	ldr	r3, [pc, #84]	; (8011e78 <netbuf_data+0x80>)
 8011e24:	22c7      	movs	r2, #199	; 0xc7
 8011e26:	4917      	ldr	r1, [pc, #92]	; (8011e84 <netbuf_data+0x8c>)
 8011e28:	4815      	ldr	r0, [pc, #84]	; (8011e80 <netbuf_data+0x88>)
 8011e2a:	f00e ffcf 	bl	8020dcc <iprintf>
 8011e2e:	f06f 030f 	mvn.w	r3, #15
 8011e32:	e01d      	b.n	8011e70 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d108      	bne.n	8011e4c <netbuf_data+0x54>
 8011e3a:	4b0f      	ldr	r3, [pc, #60]	; (8011e78 <netbuf_data+0x80>)
 8011e3c:	22c8      	movs	r2, #200	; 0xc8
 8011e3e:	4912      	ldr	r1, [pc, #72]	; (8011e88 <netbuf_data+0x90>)
 8011e40:	480f      	ldr	r0, [pc, #60]	; (8011e80 <netbuf_data+0x88>)
 8011e42:	f00e ffc3 	bl	8020dcc <iprintf>
 8011e46:	f06f 030f 	mvn.w	r3, #15
 8011e4a:	e011      	b.n	8011e70 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d102      	bne.n	8011e5a <netbuf_data+0x62>
    return ERR_BUF;
 8011e54:	f06f 0301 	mvn.w	r3, #1
 8011e58:	e00a      	b.n	8011e70 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	685a      	ldr	r2, [r3, #4]
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	895a      	ldrh	r2, [r3, #10]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8011e6e:	2300      	movs	r3, #0
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3710      	adds	r7, #16
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}
 8011e78:	0802322c 	.word	0x0802322c
 8011e7c:	08023334 	.word	0x08023334
 8011e80:	0802327c 	.word	0x0802327c
 8011e84:	08023350 	.word	0x08023350
 8011e88:	08023370 	.word	0x08023370

08011e8c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b082      	sub	sp, #8
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d108      	bne.n	8011eac <netbuf_next+0x20>
 8011e9a:	4b11      	ldr	r3, [pc, #68]	; (8011ee0 <netbuf_next+0x54>)
 8011e9c:	22e0      	movs	r2, #224	; 0xe0
 8011e9e:	4911      	ldr	r1, [pc, #68]	; (8011ee4 <netbuf_next+0x58>)
 8011ea0:	4811      	ldr	r0, [pc, #68]	; (8011ee8 <netbuf_next+0x5c>)
 8011ea2:	f00e ff93 	bl	8020dcc <iprintf>
 8011ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8011eaa:	e014      	b.n	8011ed6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	685b      	ldr	r3, [r3, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d102      	bne.n	8011ebc <netbuf_next+0x30>
    return -1;
 8011eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8011eba:	e00c      	b.n	8011ed6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	681a      	ldr	r2, [r3, #0]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d101      	bne.n	8011ed4 <netbuf_next+0x48>
    return 1;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	e000      	b.n	8011ed6 <netbuf_next+0x4a>
  }
  return 0;
 8011ed4:	2300      	movs	r3, #0
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3708      	adds	r7, #8
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	0802322c 	.word	0x0802322c
 8011ee4:	0802338c 	.word	0x0802338c
 8011ee8:	0802327c 	.word	0x0802327c

08011eec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b084      	sub	sp, #16
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011ef6:	f009 fadf 	bl	801b4b8 <sys_timeouts_sleeptime>
 8011efa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f02:	d10b      	bne.n	8011f1c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011f04:	4813      	ldr	r0, [pc, #76]	; (8011f54 <tcpip_timeouts_mbox_fetch+0x68>)
 8011f06:	f00e fce8 	bl	80208da <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	6839      	ldr	r1, [r7, #0]
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f00e fbbe 	bl	8020690 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011f14:	480f      	ldr	r0, [pc, #60]	; (8011f54 <tcpip_timeouts_mbox_fetch+0x68>)
 8011f16:	f00e fcd1 	bl	80208bc <sys_mutex_lock>
    return;
 8011f1a:	e018      	b.n	8011f4e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d102      	bne.n	8011f28 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011f22:	f009 fa8f 	bl	801b444 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011f26:	e7e6      	b.n	8011ef6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011f28:	480a      	ldr	r0, [pc, #40]	; (8011f54 <tcpip_timeouts_mbox_fetch+0x68>)
 8011f2a:	f00e fcd6 	bl	80208da <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011f2e:	68fa      	ldr	r2, [r7, #12]
 8011f30:	6839      	ldr	r1, [r7, #0]
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f00e fbac 	bl	8020690 <sys_arch_mbox_fetch>
 8011f38:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8011f3a:	4806      	ldr	r0, [pc, #24]	; (8011f54 <tcpip_timeouts_mbox_fetch+0x68>)
 8011f3c:	f00e fcbe 	bl	80208bc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f46:	d102      	bne.n	8011f4e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011f48:	f009 fa7c 	bl	801b444 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011f4c:	e7d3      	b.n	8011ef6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011f4e:	3710      	adds	r7, #16
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	200135cc 	.word	0x200135cc

08011f58 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011f60:	4810      	ldr	r0, [pc, #64]	; (8011fa4 <tcpip_thread+0x4c>)
 8011f62:	f00e fcab 	bl	80208bc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011f66:	4b10      	ldr	r3, [pc, #64]	; (8011fa8 <tcpip_thread+0x50>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d005      	beq.n	8011f7a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011f6e:	4b0e      	ldr	r3, [pc, #56]	; (8011fa8 <tcpip_thread+0x50>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	4a0e      	ldr	r2, [pc, #56]	; (8011fac <tcpip_thread+0x54>)
 8011f74:	6812      	ldr	r2, [r2, #0]
 8011f76:	4610      	mov	r0, r2
 8011f78:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011f7a:	f107 030c 	add.w	r3, r7, #12
 8011f7e:	4619      	mov	r1, r3
 8011f80:	480b      	ldr	r0, [pc, #44]	; (8011fb0 <tcpip_thread+0x58>)
 8011f82:	f7ff ffb3 	bl	8011eec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d106      	bne.n	8011f9a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011f8c:	4b09      	ldr	r3, [pc, #36]	; (8011fb4 <tcpip_thread+0x5c>)
 8011f8e:	2291      	movs	r2, #145	; 0x91
 8011f90:	4909      	ldr	r1, [pc, #36]	; (8011fb8 <tcpip_thread+0x60>)
 8011f92:	480a      	ldr	r0, [pc, #40]	; (8011fbc <tcpip_thread+0x64>)
 8011f94:	f00e ff1a 	bl	8020dcc <iprintf>
      continue;
 8011f98:	e003      	b.n	8011fa2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f000 f80f 	bl	8011fc0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011fa2:	e7ea      	b.n	8011f7a <tcpip_thread+0x22>
 8011fa4:	200135cc 	.word	0x200135cc
 8011fa8:	20005208 	.word	0x20005208
 8011fac:	2000520c 	.word	0x2000520c
 8011fb0:	20005210 	.word	0x20005210
 8011fb4:	080233c4 	.word	0x080233c4
 8011fb8:	080233f4 	.word	0x080233f4
 8011fbc:	08023414 	.word	0x08023414

08011fc0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b082      	sub	sp, #8
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	2b02      	cmp	r3, #2
 8011fce:	d026      	beq.n	801201e <tcpip_thread_handle_msg+0x5e>
 8011fd0:	2b02      	cmp	r3, #2
 8011fd2:	dc2b      	bgt.n	801202c <tcpip_thread_handle_msg+0x6c>
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d002      	beq.n	8011fde <tcpip_thread_handle_msg+0x1e>
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d015      	beq.n	8012008 <tcpip_thread_handle_msg+0x48>
 8011fdc:	e026      	b.n	801202c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	68db      	ldr	r3, [r3, #12]
 8011fe2:	687a      	ldr	r2, [r7, #4]
 8011fe4:	6850      	ldr	r0, [r2, #4]
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	6892      	ldr	r2, [r2, #8]
 8011fea:	4611      	mov	r1, r2
 8011fec:	4798      	blx	r3
 8011fee:	4603      	mov	r3, r0
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d004      	beq.n	8011ffe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f002 fcbd 	bl	8014978 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011ffe:	6879      	ldr	r1, [r7, #4]
 8012000:	2009      	movs	r0, #9
 8012002:	f001 fe09 	bl	8013c18 <memp_free>
      break;
 8012006:	e018      	b.n	801203a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	685b      	ldr	r3, [r3, #4]
 801200c:	687a      	ldr	r2, [r7, #4]
 801200e:	6892      	ldr	r2, [r2, #8]
 8012010:	4610      	mov	r0, r2
 8012012:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012014:	6879      	ldr	r1, [r7, #4]
 8012016:	2008      	movs	r0, #8
 8012018:	f001 fdfe 	bl	8013c18 <memp_free>
      break;
 801201c:	e00d      	b.n	801203a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	685b      	ldr	r3, [r3, #4]
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	6892      	ldr	r2, [r2, #8]
 8012026:	4610      	mov	r0, r2
 8012028:	4798      	blx	r3
      break;
 801202a:	e006      	b.n	801203a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801202c:	4b05      	ldr	r3, [pc, #20]	; (8012044 <tcpip_thread_handle_msg+0x84>)
 801202e:	22cf      	movs	r2, #207	; 0xcf
 8012030:	4905      	ldr	r1, [pc, #20]	; (8012048 <tcpip_thread_handle_msg+0x88>)
 8012032:	4806      	ldr	r0, [pc, #24]	; (801204c <tcpip_thread_handle_msg+0x8c>)
 8012034:	f00e feca 	bl	8020dcc <iprintf>
      break;
 8012038:	bf00      	nop
  }
}
 801203a:	bf00      	nop
 801203c:	3708      	adds	r7, #8
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	080233c4 	.word	0x080233c4
 8012048:	080233f4 	.word	0x080233f4
 801204c:	08023414 	.word	0x08023414

08012050 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b086      	sub	sp, #24
 8012054:	af00      	add	r7, sp, #0
 8012056:	60f8      	str	r0, [r7, #12]
 8012058:	60b9      	str	r1, [r7, #8]
 801205a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801205c:	481a      	ldr	r0, [pc, #104]	; (80120c8 <tcpip_inpkt+0x78>)
 801205e:	f00e fb5f 	bl	8020720 <sys_mbox_valid>
 8012062:	4603      	mov	r3, r0
 8012064:	2b00      	cmp	r3, #0
 8012066:	d105      	bne.n	8012074 <tcpip_inpkt+0x24>
 8012068:	4b18      	ldr	r3, [pc, #96]	; (80120cc <tcpip_inpkt+0x7c>)
 801206a:	22fc      	movs	r2, #252	; 0xfc
 801206c:	4918      	ldr	r1, [pc, #96]	; (80120d0 <tcpip_inpkt+0x80>)
 801206e:	4819      	ldr	r0, [pc, #100]	; (80120d4 <tcpip_inpkt+0x84>)
 8012070:	f00e feac 	bl	8020dcc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012074:	2009      	movs	r0, #9
 8012076:	f001 fd7d 	bl	8013b74 <memp_malloc>
 801207a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d102      	bne.n	8012088 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012082:	f04f 33ff 	mov.w	r3, #4294967295
 8012086:	e01a      	b.n	80120be <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	2200      	movs	r2, #0
 801208c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	68fa      	ldr	r2, [r7, #12]
 8012092:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	68ba      	ldr	r2, [r7, #8]
 8012098:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	687a      	ldr	r2, [r7, #4]
 801209e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80120a0:	6979      	ldr	r1, [r7, #20]
 80120a2:	4809      	ldr	r0, [pc, #36]	; (80120c8 <tcpip_inpkt+0x78>)
 80120a4:	f00e fada 	bl	802065c <sys_mbox_trypost>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d006      	beq.n	80120bc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80120ae:	6979      	ldr	r1, [r7, #20]
 80120b0:	2009      	movs	r0, #9
 80120b2:	f001 fdb1 	bl	8013c18 <memp_free>
    return ERR_MEM;
 80120b6:	f04f 33ff 	mov.w	r3, #4294967295
 80120ba:	e000      	b.n	80120be <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80120bc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3718      	adds	r7, #24
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop
 80120c8:	20005210 	.word	0x20005210
 80120cc:	080233c4 	.word	0x080233c4
 80120d0:	0802343c 	.word	0x0802343c
 80120d4:	08023414 	.word	0x08023414

080120d8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80120e8:	f003 0318 	and.w	r3, r3, #24
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d006      	beq.n	80120fe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80120f0:	4a08      	ldr	r2, [pc, #32]	; (8012114 <tcpip_input+0x3c>)
 80120f2:	6839      	ldr	r1, [r7, #0]
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f7ff ffab 	bl	8012050 <tcpip_inpkt>
 80120fa:	4603      	mov	r3, r0
 80120fc:	e005      	b.n	801210a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80120fe:	4a06      	ldr	r2, [pc, #24]	; (8012118 <tcpip_input+0x40>)
 8012100:	6839      	ldr	r1, [r7, #0]
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f7ff ffa4 	bl	8012050 <tcpip_inpkt>
 8012108:	4603      	mov	r3, r0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3708      	adds	r7, #8
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
 8012112:	bf00      	nop
 8012114:	08020459 	.word	0x08020459
 8012118:	0801f0dd 	.word	0x0801f0dd

0801211c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b084      	sub	sp, #16
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
 8012124:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012126:	4819      	ldr	r0, [pc, #100]	; (801218c <tcpip_try_callback+0x70>)
 8012128:	f00e fafa 	bl	8020720 <sys_mbox_valid>
 801212c:	4603      	mov	r3, r0
 801212e:	2b00      	cmp	r3, #0
 8012130:	d106      	bne.n	8012140 <tcpip_try_callback+0x24>
 8012132:	4b17      	ldr	r3, [pc, #92]	; (8012190 <tcpip_try_callback+0x74>)
 8012134:	f240 125d 	movw	r2, #349	; 0x15d
 8012138:	4916      	ldr	r1, [pc, #88]	; (8012194 <tcpip_try_callback+0x78>)
 801213a:	4817      	ldr	r0, [pc, #92]	; (8012198 <tcpip_try_callback+0x7c>)
 801213c:	f00e fe46 	bl	8020dcc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012140:	2008      	movs	r0, #8
 8012142:	f001 fd17 	bl	8013b74 <memp_malloc>
 8012146:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d102      	bne.n	8012154 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801214e:	f04f 33ff 	mov.w	r3, #4294967295
 8012152:	e017      	b.n	8012184 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2201      	movs	r2, #1
 8012158:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	687a      	ldr	r2, [r7, #4]
 801215e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	683a      	ldr	r2, [r7, #0]
 8012164:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012166:	68f9      	ldr	r1, [r7, #12]
 8012168:	4808      	ldr	r0, [pc, #32]	; (801218c <tcpip_try_callback+0x70>)
 801216a:	f00e fa77 	bl	802065c <sys_mbox_trypost>
 801216e:	4603      	mov	r3, r0
 8012170:	2b00      	cmp	r3, #0
 8012172:	d006      	beq.n	8012182 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012174:	68f9      	ldr	r1, [r7, #12]
 8012176:	2008      	movs	r0, #8
 8012178:	f001 fd4e 	bl	8013c18 <memp_free>
    return ERR_MEM;
 801217c:	f04f 33ff 	mov.w	r3, #4294967295
 8012180:	e000      	b.n	8012184 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012182:	2300      	movs	r3, #0
}
 8012184:	4618      	mov	r0, r3
 8012186:	3710      	adds	r7, #16
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}
 801218c:	20005210 	.word	0x20005210
 8012190:	080233c4 	.word	0x080233c4
 8012194:	0802343c 	.word	0x0802343c
 8012198:	08023414 	.word	0x08023414

0801219c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80121a8:	4806      	ldr	r0, [pc, #24]	; (80121c4 <tcpip_send_msg_wait_sem+0x28>)
 80121aa:	f00e fb87 	bl	80208bc <sys_mutex_lock>
  fn(apimsg);
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	68b8      	ldr	r0, [r7, #8]
 80121b2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80121b4:	4803      	ldr	r0, [pc, #12]	; (80121c4 <tcpip_send_msg_wait_sem+0x28>)
 80121b6:	f00e fb90 	bl	80208da <sys_mutex_unlock>
  return ERR_OK;
 80121ba:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3710      	adds	r7, #16
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	200135cc 	.word	0x200135cc

080121c8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af02      	add	r7, sp, #8
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80121d2:	f001 f845 	bl	8013260 <lwip_init>

  tcpip_init_done = initfunc;
 80121d6:	4a17      	ldr	r2, [pc, #92]	; (8012234 <tcpip_init+0x6c>)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80121dc:	4a16      	ldr	r2, [pc, #88]	; (8012238 <tcpip_init+0x70>)
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80121e2:	2106      	movs	r1, #6
 80121e4:	4815      	ldr	r0, [pc, #84]	; (801223c <tcpip_init+0x74>)
 80121e6:	f00e fa0d 	bl	8020604 <sys_mbox_new>
 80121ea:	4603      	mov	r3, r0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d006      	beq.n	80121fe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80121f0:	4b13      	ldr	r3, [pc, #76]	; (8012240 <tcpip_init+0x78>)
 80121f2:	f240 2261 	movw	r2, #609	; 0x261
 80121f6:	4913      	ldr	r1, [pc, #76]	; (8012244 <tcpip_init+0x7c>)
 80121f8:	4813      	ldr	r0, [pc, #76]	; (8012248 <tcpip_init+0x80>)
 80121fa:	f00e fde7 	bl	8020dcc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80121fe:	4813      	ldr	r0, [pc, #76]	; (801224c <tcpip_init+0x84>)
 8012200:	f00e fb46 	bl	8020890 <sys_mutex_new>
 8012204:	4603      	mov	r3, r0
 8012206:	2b00      	cmp	r3, #0
 8012208:	d006      	beq.n	8012218 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801220a:	4b0d      	ldr	r3, [pc, #52]	; (8012240 <tcpip_init+0x78>)
 801220c:	f240 2265 	movw	r2, #613	; 0x265
 8012210:	490f      	ldr	r1, [pc, #60]	; (8012250 <tcpip_init+0x88>)
 8012212:	480d      	ldr	r0, [pc, #52]	; (8012248 <tcpip_init+0x80>)
 8012214:	f00e fdda 	bl	8020dcc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012218:	2318      	movs	r3, #24
 801221a:	9300      	str	r3, [sp, #0]
 801221c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012220:	2200      	movs	r2, #0
 8012222:	490c      	ldr	r1, [pc, #48]	; (8012254 <tcpip_init+0x8c>)
 8012224:	480c      	ldr	r0, [pc, #48]	; (8012258 <tcpip_init+0x90>)
 8012226:	f00e fb65 	bl	80208f4 <sys_thread_new>
}
 801222a:	bf00      	nop
 801222c:	3708      	adds	r7, #8
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	20005208 	.word	0x20005208
 8012238:	2000520c 	.word	0x2000520c
 801223c:	20005210 	.word	0x20005210
 8012240:	080233c4 	.word	0x080233c4
 8012244:	0802344c 	.word	0x0802344c
 8012248:	08023414 	.word	0x08023414
 801224c:	200135cc 	.word	0x200135cc
 8012250:	08023470 	.word	0x08023470
 8012254:	08011f59 	.word	0x08011f59
 8012258:	08023494 	.word	0x08023494

0801225c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801225c:	b480      	push	{r7}
 801225e:	b083      	sub	sp, #12
 8012260:	af00      	add	r7, sp, #0
 8012262:	4603      	mov	r3, r0
 8012264:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012266:	88fb      	ldrh	r3, [r7, #6]
 8012268:	021b      	lsls	r3, r3, #8
 801226a:	b21a      	sxth	r2, r3
 801226c:	88fb      	ldrh	r3, [r7, #6]
 801226e:	0a1b      	lsrs	r3, r3, #8
 8012270:	b29b      	uxth	r3, r3
 8012272:	b21b      	sxth	r3, r3
 8012274:	4313      	orrs	r3, r2
 8012276:	b21b      	sxth	r3, r3
 8012278:	b29b      	uxth	r3, r3
}
 801227a:	4618      	mov	r0, r3
 801227c:	370c      	adds	r7, #12
 801227e:	46bd      	mov	sp, r7
 8012280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012284:	4770      	bx	lr

08012286 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012286:	b480      	push	{r7}
 8012288:	b083      	sub	sp, #12
 801228a:	af00      	add	r7, sp, #0
 801228c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	061a      	lsls	r2, r3, #24
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	021b      	lsls	r3, r3, #8
 8012296:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801229a:	431a      	orrs	r2, r3
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	0a1b      	lsrs	r3, r3, #8
 80122a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80122a4:	431a      	orrs	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	0e1b      	lsrs	r3, r3, #24
 80122aa:	4313      	orrs	r3, r2
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	370c      	adds	r7, #12
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr

080122b8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 80122b8:	b480      	push	{r7}
 80122ba:	b087      	sub	sp, #28
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	1c5a      	adds	r2, r3, #1
 80122c8:	60fa      	str	r2, [r7, #12]
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	1c5a      	adds	r2, r3, #1
 80122d2:	60ba      	str	r2, [r7, #8]
 80122d4:	781b      	ldrb	r3, [r3, #0]
 80122d6:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 80122d8:	7dfa      	ldrb	r2, [r7, #23]
 80122da:	7dbb      	ldrb	r3, [r7, #22]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d016      	beq.n	801230e <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 80122e0:	7dfb      	ldrb	r3, [r7, #23]
 80122e2:	f043 0320 	orr.w	r3, r3, #32
 80122e6:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80122e8:	7d7b      	ldrb	r3, [r7, #21]
 80122ea:	2b60      	cmp	r3, #96	; 0x60
 80122ec:	d90c      	bls.n	8012308 <lwip_strnicmp+0x50>
 80122ee:	7d7b      	ldrb	r3, [r7, #21]
 80122f0:	2b7a      	cmp	r3, #122	; 0x7a
 80122f2:	d809      	bhi.n	8012308 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 80122f4:	7dbb      	ldrb	r3, [r7, #22]
 80122f6:	f043 0320 	orr.w	r3, r3, #32
 80122fa:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 80122fc:	7d7a      	ldrb	r2, [r7, #21]
 80122fe:	7d3b      	ldrb	r3, [r7, #20]
 8012300:	429a      	cmp	r2, r3
 8012302:	d003      	beq.n	801230c <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8012304:	2301      	movs	r3, #1
 8012306:	e00c      	b.n	8012322 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8012308:	2301      	movs	r3, #1
 801230a:	e00a      	b.n	8012322 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801230c:	bf00      	nop
      }
    }
    len--;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	3b01      	subs	r3, #1
 8012312:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d002      	beq.n	8012320 <lwip_strnicmp+0x68>
 801231a:	7dfb      	ldrb	r3, [r7, #23]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d1d1      	bne.n	80122c4 <lwip_strnicmp+0xc>
  return 0;
 8012320:	2300      	movs	r3, #0
}
 8012322:	4618      	mov	r0, r3
 8012324:	371c      	adds	r7, #28
 8012326:	46bd      	mov	sp, r7
 8012328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232c:	4770      	bx	lr

0801232e <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 801232e:	b480      	push	{r7}
 8012330:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8012332:	bf00      	nop
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr

0801233c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 801233c:	b480      	push	{r7}
 801233e:	b083      	sub	sp, #12
 8012340:	af00      	add	r7, sp, #0
 8012342:	4603      	mov	r3, r0
 8012344:	6039      	str	r1, [r7, #0]
 8012346:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8012348:	79fb      	ldrb	r3, [r7, #7]
 801234a:	2b01      	cmp	r3, #1
 801234c:	d80f      	bhi.n	801236e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d006      	beq.n	8012362 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8012354:	79fb      	ldrb	r3, [r7, #7]
 8012356:	4909      	ldr	r1, [pc, #36]	; (801237c <dns_setserver+0x40>)
 8012358:	683a      	ldr	r2, [r7, #0]
 801235a:	6812      	ldr	r2, [r2, #0]
 801235c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8012360:	e005      	b.n	801236e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8012362:	79fb      	ldrb	r3, [r7, #7]
 8012364:	4905      	ldr	r1, [pc, #20]	; (801237c <dns_setserver+0x40>)
 8012366:	4a06      	ldr	r2, [pc, #24]	; (8012380 <dns_setserver+0x44>)
 8012368:	6812      	ldr	r2, [r2, #0]
 801236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801236e:	bf00      	nop
 8012370:	370c      	adds	r7, #12
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr
 801237a:	bf00      	nop
 801237c:	20005698 	.word	0x20005698
 8012380:	08026684 	.word	0x08026684

08012384 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8012388:	f000 fc54 	bl	8012c34 <dns_check_entries>
}
 801238c:	bf00      	nop
 801238e:	bd80      	pop	{r7, pc}

08012390 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801239a:	2300      	movs	r3, #0
 801239c:	73fb      	strb	r3, [r7, #15]
 801239e:	e02e      	b.n	80123fe <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80123a0:	7bfa      	ldrb	r2, [r7, #15]
 80123a2:	491b      	ldr	r1, [pc, #108]	; (8012410 <dns_lookup+0x80>)
 80123a4:	4613      	mov	r3, r2
 80123a6:	011b      	lsls	r3, r3, #4
 80123a8:	4413      	add	r3, r2
 80123aa:	011b      	lsls	r3, r3, #4
 80123ac:	440b      	add	r3, r1
 80123ae:	330a      	adds	r3, #10
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	2b03      	cmp	r3, #3
 80123b4:	d120      	bne.n	80123f8 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 80123b6:	7bfa      	ldrb	r2, [r7, #15]
 80123b8:	4613      	mov	r3, r2
 80123ba:	011b      	lsls	r3, r3, #4
 80123bc:	4413      	add	r3, r2
 80123be:	011b      	lsls	r3, r3, #4
 80123c0:	3310      	adds	r3, #16
 80123c2:	4a13      	ldr	r2, [pc, #76]	; (8012410 <dns_lookup+0x80>)
 80123c4:	4413      	add	r3, r2
 80123c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80123ca:	4619      	mov	r1, r3
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7ff ff73 	bl	80122b8 <lwip_strnicmp>
 80123d2:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d10f      	bne.n	80123f8 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d00a      	beq.n	80123f4 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 80123de:	7bfa      	ldrb	r2, [r7, #15]
 80123e0:	490b      	ldr	r1, [pc, #44]	; (8012410 <dns_lookup+0x80>)
 80123e2:	4613      	mov	r3, r2
 80123e4:	011b      	lsls	r3, r3, #4
 80123e6:	4413      	add	r3, r2
 80123e8:	011b      	lsls	r3, r3, #4
 80123ea:	440b      	add	r3, r1
 80123ec:	3304      	adds	r3, #4
 80123ee:	681a      	ldr	r2, [r3, #0]
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 80123f4:	2300      	movs	r3, #0
 80123f6:	e007      	b.n	8012408 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80123f8:	7bfb      	ldrb	r3, [r7, #15]
 80123fa:	3301      	adds	r3, #1
 80123fc:	73fb      	strb	r3, [r7, #15]
 80123fe:	7bfb      	ldrb	r3, [r7, #15]
 8012400:	2b03      	cmp	r3, #3
 8012402:	d9cd      	bls.n	80123a0 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 8012404:	f06f 030f 	mvn.w	r3, #15
}
 8012408:	4618      	mov	r0, r3
 801240a:	3710      	adds	r7, #16
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	20005228 	.word	0x20005228

08012414 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b088      	sub	sp, #32
 8012418:	af00      	add	r7, sp, #0
 801241a:	60f8      	str	r0, [r7, #12]
 801241c:	60b9      	str	r1, [r7, #8]
 801241e:	4613      	mov	r3, r2
 8012420:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 8012422:	88fb      	ldrh	r3, [r7, #6]
 8012424:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 8012426:	8b7b      	ldrh	r3, [r7, #26]
 8012428:	4619      	mov	r1, r3
 801242a:	68b8      	ldr	r0, [r7, #8]
 801242c:	f002 fe86 	bl	801513c <pbuf_try_get_at>
 8012430:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	2b00      	cmp	r3, #0
 8012436:	db04      	blt.n	8012442 <dns_compare_name+0x2e>
 8012438:	8b7b      	ldrh	r3, [r7, #26]
 801243a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801243e:	4293      	cmp	r3, r2
 8012440:	d102      	bne.n	8012448 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 8012442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012446:	e06c      	b.n	8012522 <dns_compare_name+0x10e>
    }
    response_offset++;
 8012448:	8b7b      	ldrh	r3, [r7, #26]
 801244a:	3301      	adds	r3, #1
 801244c:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 801244e:	69fb      	ldr	r3, [r7, #28]
 8012450:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012454:	2bc0      	cmp	r3, #192	; 0xc0
 8012456:	d144      	bne.n	80124e2 <dns_compare_name+0xce>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 8012458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801245c:	e061      	b.n	8012522 <dns_compare_name+0x10e>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 801245e:	8b7b      	ldrh	r3, [r7, #26]
 8012460:	4619      	mov	r1, r3
 8012462:	68b8      	ldr	r0, [r7, #8]
 8012464:	f002 fe6a 	bl	801513c <pbuf_try_get_at>
 8012468:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	2b00      	cmp	r3, #0
 801246e:	da02      	bge.n	8012476 <dns_compare_name+0x62>
          return 0xFFFF;
 8012470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012474:	e055      	b.n	8012522 <dns_compare_name+0x10e>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	74fb      	strb	r3, [r7, #19]
 801247c:	7cfb      	ldrb	r3, [r7, #19]
 801247e:	3301      	adds	r3, #1
 8012480:	4a2a      	ldr	r2, [pc, #168]	; (801252c <dns_compare_name+0x118>)
 8012482:	4413      	add	r3, r2
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	f003 0303 	and.w	r3, r3, #3
 801248a:	2b01      	cmp	r3, #1
 801248c:	d103      	bne.n	8012496 <dns_compare_name+0x82>
 801248e:	7cfb      	ldrb	r3, [r7, #19]
 8012490:	f103 0220 	add.w	r2, r3, #32
 8012494:	e000      	b.n	8012498 <dns_compare_name+0x84>
 8012496:	7cfa      	ldrb	r2, [r7, #19]
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	74bb      	strb	r3, [r7, #18]
 801249c:	7cbb      	ldrb	r3, [r7, #18]
 801249e:	3301      	adds	r3, #1
 80124a0:	4922      	ldr	r1, [pc, #136]	; (801252c <dns_compare_name+0x118>)
 80124a2:	440b      	add	r3, r1
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	f003 0303 	and.w	r3, r3, #3
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d102      	bne.n	80124b4 <dns_compare_name+0xa0>
 80124ae:	7cbb      	ldrb	r3, [r7, #18]
 80124b0:	3320      	adds	r3, #32
 80124b2:	e000      	b.n	80124b6 <dns_compare_name+0xa2>
 80124b4:	7cbb      	ldrb	r3, [r7, #18]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d002      	beq.n	80124c0 <dns_compare_name+0xac>
          return 0xFFFF;
 80124ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80124be:	e030      	b.n	8012522 <dns_compare_name+0x10e>
        }
        if (response_offset == 0xFFFF) {
 80124c0:	8b7b      	ldrh	r3, [r7, #26]
 80124c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d102      	bne.n	80124d0 <dns_compare_name+0xbc>
          /* would overflow */
          return 0xFFFF;
 80124ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80124ce:	e028      	b.n	8012522 <dns_compare_name+0x10e>
        }
        response_offset++;
 80124d0:	8b7b      	ldrh	r3, [r7, #26]
 80124d2:	3301      	adds	r3, #1
 80124d4:	837b      	strh	r3, [r7, #26]
        ++query;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	3301      	adds	r3, #1
 80124da:	60fb      	str	r3, [r7, #12]
        --n;
 80124dc:	69fb      	ldr	r3, [r7, #28]
 80124de:	3b01      	subs	r3, #1
 80124e0:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 80124e2:	69fb      	ldr	r3, [r7, #28]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	dcba      	bgt.n	801245e <dns_compare_name+0x4a>
      }
      ++query;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	3301      	adds	r3, #1
 80124ec:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 80124ee:	8b7b      	ldrh	r3, [r7, #26]
 80124f0:	4619      	mov	r1, r3
 80124f2:	68b8      	ldr	r0, [r7, #8]
 80124f4:	f002 fe22 	bl	801513c <pbuf_try_get_at>
 80124f8:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 80124fa:	69fb      	ldr	r3, [r7, #28]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	da02      	bge.n	8012506 <dns_compare_name+0xf2>
      return 0xFFFF;
 8012500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012504:	e00d      	b.n	8012522 <dns_compare_name+0x10e>
    }
  } while (n != 0);
 8012506:	69fb      	ldr	r3, [r7, #28]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d18c      	bne.n	8012426 <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 801250c:	8b7b      	ldrh	r3, [r7, #26]
 801250e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012512:	4293      	cmp	r3, r2
 8012514:	d102      	bne.n	801251c <dns_compare_name+0x108>
    /* would overflow */
    return 0xFFFF;
 8012516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801251a:	e002      	b.n	8012522 <dns_compare_name+0x10e>
  }
  return (u16_t)(response_offset + 1);
 801251c:	8b7b      	ldrh	r3, [r7, #26]
 801251e:	3301      	adds	r3, #1
 8012520:	b29b      	uxth	r3, r3
}
 8012522:	4618      	mov	r0, r3
 8012524:	3720      	adds	r7, #32
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}
 801252a:	bf00      	nop
 801252c:	0802669a 	.word	0x0802669a

08012530 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	460b      	mov	r3, r1
 801253a:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 801253c:	887b      	ldrh	r3, [r7, #2]
 801253e:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 8012540:	89fb      	ldrh	r3, [r7, #14]
 8012542:	1c5a      	adds	r2, r3, #1
 8012544:	81fa      	strh	r2, [r7, #14]
 8012546:	4619      	mov	r1, r3
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f002 fdf7 	bl	801513c <pbuf_try_get_at>
 801254e:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	2b00      	cmp	r3, #0
 8012554:	db02      	blt.n	801255c <dns_skip_name+0x2c>
 8012556:	89fb      	ldrh	r3, [r7, #14]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d102      	bne.n	8012562 <dns_skip_name+0x32>
      return 0xFFFF;
 801255c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012560:	e02f      	b.n	80125c2 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012568:	2bc0      	cmp	r3, #192	; 0xc0
 801256a:	d01e      	beq.n	80125aa <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 801256c:	89fa      	ldrh	r2, [r7, #14]
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	4413      	add	r3, r2
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	8912      	ldrh	r2, [r2, #8]
 8012576:	4293      	cmp	r3, r2
 8012578:	db02      	blt.n	8012580 <dns_skip_name+0x50>
        return 0xFFFF;
 801257a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801257e:	e020      	b.n	80125c2 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	b29a      	uxth	r2, r3
 8012584:	89fb      	ldrh	r3, [r7, #14]
 8012586:	4413      	add	r3, r2
 8012588:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 801258a:	89fb      	ldrh	r3, [r7, #14]
 801258c:	4619      	mov	r1, r3
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f002 fdd4 	bl	801513c <pbuf_try_get_at>
 8012594:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 8012596:	68bb      	ldr	r3, [r7, #8]
 8012598:	2b00      	cmp	r3, #0
 801259a:	da02      	bge.n	80125a2 <dns_skip_name+0x72>
      return 0xFFFF;
 801259c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125a0:	e00f      	b.n	80125c2 <dns_skip_name+0x92>
    }
  } while (n != 0);
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d1cb      	bne.n	8012540 <dns_skip_name+0x10>
 80125a8:	e000      	b.n	80125ac <dns_skip_name+0x7c>
      break;
 80125aa:	bf00      	nop

  if (offset == 0xFFFF) {
 80125ac:	89fb      	ldrh	r3, [r7, #14]
 80125ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125b2:	4293      	cmp	r3, r2
 80125b4:	d102      	bne.n	80125bc <dns_skip_name+0x8c>
    return 0xFFFF;
 80125b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125ba:	e002      	b.n	80125c2 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 80125bc:	89fb      	ldrh	r3, [r7, #14]
 80125be:	3301      	adds	r3, #1
 80125c0:	b29b      	uxth	r3, r3
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	3710      	adds	r7, #16
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
	...

080125cc <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b090      	sub	sp, #64	; 0x40
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	4603      	mov	r3, r0
 80125d4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 80125d6:	79fa      	ldrb	r2, [r7, #7]
 80125d8:	4613      	mov	r3, r2
 80125da:	011b      	lsls	r3, r3, #4
 80125dc:	4413      	add	r3, r2
 80125de:	011b      	lsls	r3, r3, #4
 80125e0:	4a6c      	ldr	r2, [pc, #432]	; (8012794 <dns_send+0x1c8>)
 80125e2:	4413      	add	r3, r2
 80125e4:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80125e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e8:	7adb      	ldrb	r3, [r3, #11]
 80125ea:	2b01      	cmp	r3, #1
 80125ec:	d906      	bls.n	80125fc <dns_send+0x30>
 80125ee:	4b6a      	ldr	r3, [pc, #424]	; (8012798 <dns_send+0x1cc>)
 80125f0:	f240 22fa 	movw	r2, #762	; 0x2fa
 80125f4:	4969      	ldr	r1, [pc, #420]	; (801279c <dns_send+0x1d0>)
 80125f6:	486a      	ldr	r0, [pc, #424]	; (80127a0 <dns_send+0x1d4>)
 80125f8:	f00e fbe8 	bl	8020dcc <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80125fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125fe:	7adb      	ldrb	r3, [r3, #11]
 8012600:	461a      	mov	r2, r3
 8012602:	4b68      	ldr	r3, [pc, #416]	; (80127a4 <dns_send+0x1d8>)
 8012604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d109      	bne.n	8012620 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 801260c:	79fb      	ldrb	r3, [r7, #7]
 801260e:	2100      	movs	r1, #0
 8012610:	4618      	mov	r0, r3
 8012612:	f000 f959 	bl	80128c8 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8012616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012618:	2200      	movs	r2, #0
 801261a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 801261c:	2300      	movs	r3, #0
 801261e:	e0b4      	b.n	801278a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8012620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012622:	3310      	adds	r3, #16
 8012624:	4618      	mov	r0, r3
 8012626:	f7ed fdd3 	bl	80001d0 <strlen>
 801262a:	4603      	mov	r3, r0
 801262c:	b29b      	uxth	r3, r3
 801262e:	3312      	adds	r3, #18
 8012630:	b29b      	uxth	r3, r3
 8012632:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012636:	4619      	mov	r1, r3
 8012638:	2036      	movs	r0, #54	; 0x36
 801263a:	f001 feb9 	bl	80143b0 <pbuf_alloc>
 801263e:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8012640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012642:	2b00      	cmp	r3, #0
 8012644:	f000 8095 	beq.w	8012772 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8012648:	f107 0310 	add.w	r3, r7, #16
 801264c:	220c      	movs	r2, #12
 801264e:	2100      	movs	r1, #0
 8012650:	4618      	mov	r0, r3
 8012652:	f00e faf9 	bl	8020c48 <memset>
    hdr.id = lwip_htons(entry->txid);
 8012656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012658:	891b      	ldrh	r3, [r3, #8]
 801265a:	4618      	mov	r0, r3
 801265c:	f7ff fdfe 	bl	801225c <lwip_htons>
 8012660:	4603      	mov	r3, r0
 8012662:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8012664:	2301      	movs	r3, #1
 8012666:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8012668:	f44f 7380 	mov.w	r3, #256	; 0x100
 801266c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801266e:	f107 0310 	add.w	r3, r7, #16
 8012672:	220c      	movs	r2, #12
 8012674:	4619      	mov	r1, r3
 8012676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012678:	f002 fc32 	bl	8014ee0 <pbuf_take>
    hostname = entry->name;
 801267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267e:	3310      	adds	r3, #16
 8012680:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8012682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012684:	3b01      	subs	r3, #1
 8012686:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8012688:	230c      	movs	r3, #12
 801268a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 801268c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268e:	3301      	adds	r3, #1
 8012690:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8012692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012694:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8012696:	2300      	movs	r3, #0
 8012698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801269c:	e007      	b.n	80126ae <dns_send+0xe2>
        ++n;
 801269e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126a2:	3301      	adds	r3, #1
 80126a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80126a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126aa:	3301      	adds	r3, #1
 80126ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80126ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	2b2e      	cmp	r3, #46	; 0x2e
 80126b4:	d003      	beq.n	80126be <dns_send+0xf2>
 80126b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d1ef      	bne.n	801269e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 80126be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c2:	1ad3      	subs	r3, r2, r3
 80126c4:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 80126c6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80126c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126cc:	4413      	add	r3, r2
 80126ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80126d2:	4293      	cmp	r3, r2
 80126d4:	dc53      	bgt.n	801277e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 80126d6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80126da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126dc:	4619      	mov	r1, r3
 80126de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126e0:	f002 fd4e 	bl	8015180 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80126e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126e6:	3301      	adds	r3, #1
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80126ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126f0:	f002 fc88 	bl	8015004 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 80126f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126fc:	4413      	add	r3, r2
 80126fe:	b29b      	uxth	r3, r3
 8012700:	3301      	adds	r3, #1
 8012702:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8012704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d1bf      	bne.n	801268c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 801270c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801270e:	2200      	movs	r2, #0
 8012710:	4619      	mov	r1, r3
 8012712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012714:	f002 fd34 	bl	8015180 <pbuf_put_at>
    query_idx++;
 8012718:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801271a:	3301      	adds	r3, #1
 801271c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801271e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012722:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8012724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012728:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801272a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801272c:	f107 010c 	add.w	r1, r7, #12
 8012730:	2204      	movs	r2, #4
 8012732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012734:	f002 fc66 	bl	8015004 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8012738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801273a:	7bdb      	ldrb	r3, [r3, #15]
 801273c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8012740:	2335      	movs	r3, #53	; 0x35
 8012742:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8012744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012746:	7adb      	ldrb	r3, [r3, #11]
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	4a16      	ldr	r2, [pc, #88]	; (80127a4 <dns_send+0x1d8>)
 801274c:	4413      	add	r3, r2
 801274e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8012750:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012754:	4a14      	ldr	r2, [pc, #80]	; (80127a8 <dns_send+0x1dc>)
 8012756:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801275a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801275c:	69fa      	ldr	r2, [r7, #28]
 801275e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012760:	f009 f8d8 	bl	801b914 <udp_sendto>
 8012764:	4603      	mov	r3, r0
 8012766:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 801276a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801276c:	f002 f904 	bl	8014978 <pbuf_free>
 8012770:	e002      	b.n	8012778 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8012772:	23ff      	movs	r3, #255	; 0xff
 8012774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8012778:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801277c:	e005      	b.n	801278a <dns_send+0x1be>
        goto overflow_return;
 801277e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8012780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012782:	f002 f8f9 	bl	8014978 <pbuf_free>
  return ERR_VAL;
 8012786:	f06f 0305 	mvn.w	r3, #5
}
 801278a:	4618      	mov	r0, r3
 801278c:	3740      	adds	r7, #64	; 0x40
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop
 8012794:	20005228 	.word	0x20005228
 8012798:	080234a4 	.word	0x080234a4
 801279c:	080234d4 	.word	0x080234d4
 80127a0:	080234ec 	.word	0x080234ec
 80127a4:	20005698 	.word	0x20005698
 80127a8:	20005214 	.word	0x20005214

080127ac <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b084      	sub	sp, #16
 80127b0:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 80127b2:	202e      	movs	r0, #46	; 0x2e
 80127b4:	f009 fbfb 	bl	801bfae <udp_new_ip_type>
 80127b8:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d101      	bne.n	80127c4 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 80127c0:	2300      	movs	r3, #0
 80127c2:	e026      	b.n	8012812 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 80127c4:	f00e fbd4 	bl	8020f70 <rand>
 80127c8:	4603      	mov	r3, r0
 80127ca:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 80127cc:	88fb      	ldrh	r3, [r7, #6]
 80127ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80127d2:	d308      	bcc.n	80127e6 <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 80127d4:	88fb      	ldrh	r3, [r7, #6]
 80127d6:	461a      	mov	r2, r3
 80127d8:	4910      	ldr	r1, [pc, #64]	; (801281c <dns_alloc_random_port+0x70>)
 80127da:	68b8      	ldr	r0, [r7, #8]
 80127dc:	f009 fa50 	bl	801bc80 <udp_bind>
 80127e0:	4603      	mov	r3, r0
 80127e2:	73fb      	strb	r3, [r7, #15]
 80127e4:	e001      	b.n	80127ea <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 80127e6:	23f8      	movs	r3, #248	; 0xf8
 80127e8:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 80127ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127ee:	f113 0f08 	cmn.w	r3, #8
 80127f2:	d0e7      	beq.n	80127c4 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 80127f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d004      	beq.n	8012806 <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 80127fc:	68b8      	ldr	r0, [r7, #8]
 80127fe:	f009 fb7d 	bl	801befc <udp_remove>
    return NULL;
 8012802:	2300      	movs	r3, #0
 8012804:	e005      	b.n	8012812 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 8012806:	2200      	movs	r2, #0
 8012808:	4905      	ldr	r1, [pc, #20]	; (8012820 <dns_alloc_random_port+0x74>)
 801280a:	68b8      	ldr	r0, [r7, #8]
 801280c:	f009 fb56 	bl	801bebc <udp_recv>
  return pcb;
 8012810:	68bb      	ldr	r3, [r7, #8]
}
 8012812:	4618      	mov	r0, r3
 8012814:	3710      	adds	r7, #16
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	08026684 	.word	0x08026684
 8012820:	08012ccd 	.word	0x08012ccd

08012824 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 8012824:	b590      	push	{r4, r7, lr}
 8012826:	b083      	sub	sp, #12
 8012828:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801282a:	2300      	movs	r3, #0
 801282c:	71fb      	strb	r3, [r7, #7]
 801282e:	e008      	b.n	8012842 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 8012830:	79fb      	ldrb	r3, [r7, #7]
 8012832:	4a23      	ldr	r2, [pc, #140]	; (80128c0 <dns_alloc_pcb+0x9c>)
 8012834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d006      	beq.n	801284a <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801283c:	79fb      	ldrb	r3, [r7, #7]
 801283e:	3301      	adds	r3, #1
 8012840:	71fb      	strb	r3, [r7, #7]
 8012842:	79fb      	ldrb	r3, [r7, #7]
 8012844:	2b03      	cmp	r3, #3
 8012846:	d9f3      	bls.n	8012830 <dns_alloc_pcb+0xc>
 8012848:	e000      	b.n	801284c <dns_alloc_pcb+0x28>
      break;
 801284a:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 801284c:	79fb      	ldrb	r3, [r7, #7]
 801284e:	2b03      	cmp	r3, #3
 8012850:	d811      	bhi.n	8012876 <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 8012852:	79fc      	ldrb	r4, [r7, #7]
 8012854:	f7ff ffaa 	bl	80127ac <dns_alloc_random_port>
 8012858:	4603      	mov	r3, r0
 801285a:	4a19      	ldr	r2, [pc, #100]	; (80128c0 <dns_alloc_pcb+0x9c>)
 801285c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8012860:	79fb      	ldrb	r3, [r7, #7]
 8012862:	4a17      	ldr	r2, [pc, #92]	; (80128c0 <dns_alloc_pcb+0x9c>)
 8012864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d004      	beq.n	8012876 <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 801286c:	4a15      	ldr	r2, [pc, #84]	; (80128c4 <dns_alloc_pcb+0xa0>)
 801286e:	79fb      	ldrb	r3, [r7, #7]
 8012870:	7013      	strb	r3, [r2, #0]
      return i;
 8012872:	79fb      	ldrb	r3, [r7, #7]
 8012874:	e020      	b.n	80128b8 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8012876:	2300      	movs	r3, #0
 8012878:	71fb      	strb	r3, [r7, #7]
 801287a:	4b12      	ldr	r3, [pc, #72]	; (80128c4 <dns_alloc_pcb+0xa0>)
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	3301      	adds	r3, #1
 8012880:	71bb      	strb	r3, [r7, #6]
 8012882:	e015      	b.n	80128b0 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8012884:	79bb      	ldrb	r3, [r7, #6]
 8012886:	2b03      	cmp	r3, #3
 8012888:	d901      	bls.n	801288e <dns_alloc_pcb+0x6a>
      idx = 0;
 801288a:	2300      	movs	r3, #0
 801288c:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 801288e:	79bb      	ldrb	r3, [r7, #6]
 8012890:	4a0b      	ldr	r2, [pc, #44]	; (80128c0 <dns_alloc_pcb+0x9c>)
 8012892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d004      	beq.n	80128a4 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 801289a:	4a0a      	ldr	r2, [pc, #40]	; (80128c4 <dns_alloc_pcb+0xa0>)
 801289c:	79bb      	ldrb	r3, [r7, #6]
 801289e:	7013      	strb	r3, [r2, #0]
      return idx;
 80128a0:	79bb      	ldrb	r3, [r7, #6]
 80128a2:	e009      	b.n	80128b8 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80128a4:	79fb      	ldrb	r3, [r7, #7]
 80128a6:	3301      	adds	r3, #1
 80128a8:	71fb      	strb	r3, [r7, #7]
 80128aa:	79bb      	ldrb	r3, [r7, #6]
 80128ac:	3301      	adds	r3, #1
 80128ae:	71bb      	strb	r3, [r7, #6]
 80128b0:	79fb      	ldrb	r3, [r7, #7]
 80128b2:	2b03      	cmp	r3, #3
 80128b4:	d9e6      	bls.n	8012884 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 80128b6:	2304      	movs	r3, #4
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	370c      	adds	r7, #12
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd90      	pop	{r4, r7, pc}
 80128c0:	20005214 	.word	0x20005214
 80128c4:	20005224 	.word	0x20005224

080128c8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 80128c8:	b590      	push	{r4, r7, lr}
 80128ca:	b085      	sub	sp, #20
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	4603      	mov	r3, r0
 80128d0:	6039      	str	r1, [r7, #0]
 80128d2:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80128d4:	2300      	movs	r3, #0
 80128d6:	73fb      	strb	r3, [r7, #15]
 80128d8:	e03d      	b.n	8012956 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80128da:	7bfa      	ldrb	r2, [r7, #15]
 80128dc:	4957      	ldr	r1, [pc, #348]	; (8012a3c <dns_call_found+0x174>)
 80128de:	4613      	mov	r3, r2
 80128e0:	005b      	lsls	r3, r3, #1
 80128e2:	4413      	add	r3, r2
 80128e4:	009b      	lsls	r3, r3, #2
 80128e6:	440b      	add	r3, r1
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d030      	beq.n	8012950 <dns_call_found+0x88>
 80128ee:	7bfa      	ldrb	r2, [r7, #15]
 80128f0:	4952      	ldr	r1, [pc, #328]	; (8012a3c <dns_call_found+0x174>)
 80128f2:	4613      	mov	r3, r2
 80128f4:	005b      	lsls	r3, r3, #1
 80128f6:	4413      	add	r3, r2
 80128f8:	009b      	lsls	r3, r3, #2
 80128fa:	440b      	add	r3, r1
 80128fc:	3308      	adds	r3, #8
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	79fa      	ldrb	r2, [r7, #7]
 8012902:	429a      	cmp	r2, r3
 8012904:	d124      	bne.n	8012950 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8012906:	7bfa      	ldrb	r2, [r7, #15]
 8012908:	494c      	ldr	r1, [pc, #304]	; (8012a3c <dns_call_found+0x174>)
 801290a:	4613      	mov	r3, r2
 801290c:	005b      	lsls	r3, r3, #1
 801290e:	4413      	add	r3, r2
 8012910:	009b      	lsls	r3, r3, #2
 8012912:	440b      	add	r3, r1
 8012914:	681c      	ldr	r4, [r3, #0]
 8012916:	79fa      	ldrb	r2, [r7, #7]
 8012918:	4613      	mov	r3, r2
 801291a:	011b      	lsls	r3, r3, #4
 801291c:	4413      	add	r3, r2
 801291e:	011b      	lsls	r3, r3, #4
 8012920:	3310      	adds	r3, #16
 8012922:	4a47      	ldr	r2, [pc, #284]	; (8012a40 <dns_call_found+0x178>)
 8012924:	1898      	adds	r0, r3, r2
 8012926:	7bfa      	ldrb	r2, [r7, #15]
 8012928:	4944      	ldr	r1, [pc, #272]	; (8012a3c <dns_call_found+0x174>)
 801292a:	4613      	mov	r3, r2
 801292c:	005b      	lsls	r3, r3, #1
 801292e:	4413      	add	r3, r2
 8012930:	009b      	lsls	r3, r3, #2
 8012932:	440b      	add	r3, r1
 8012934:	3304      	adds	r3, #4
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	461a      	mov	r2, r3
 801293a:	6839      	ldr	r1, [r7, #0]
 801293c:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 801293e:	7bfa      	ldrb	r2, [r7, #15]
 8012940:	493e      	ldr	r1, [pc, #248]	; (8012a3c <dns_call_found+0x174>)
 8012942:	4613      	mov	r3, r2
 8012944:	005b      	lsls	r3, r3, #1
 8012946:	4413      	add	r3, r2
 8012948:	009b      	lsls	r3, r3, #2
 801294a:	440b      	add	r3, r1
 801294c:	2200      	movs	r2, #0
 801294e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012950:	7bfb      	ldrb	r3, [r7, #15]
 8012952:	3301      	adds	r3, #1
 8012954:	73fb      	strb	r3, [r7, #15]
 8012956:	7bfb      	ldrb	r3, [r7, #15]
 8012958:	2b03      	cmp	r3, #3
 801295a:	d9be      	bls.n	80128da <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801295c:	2300      	movs	r3, #0
 801295e:	73fb      	strb	r3, [r7, #15]
 8012960:	e031      	b.n	80129c6 <dns_call_found+0xfe>
    if (i == idx) {
 8012962:	7bfa      	ldrb	r2, [r7, #15]
 8012964:	79fb      	ldrb	r3, [r7, #7]
 8012966:	429a      	cmp	r2, r3
 8012968:	d029      	beq.n	80129be <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 801296a:	7bfa      	ldrb	r2, [r7, #15]
 801296c:	4934      	ldr	r1, [pc, #208]	; (8012a40 <dns_call_found+0x178>)
 801296e:	4613      	mov	r3, r2
 8012970:	011b      	lsls	r3, r3, #4
 8012972:	4413      	add	r3, r2
 8012974:	011b      	lsls	r3, r3, #4
 8012976:	440b      	add	r3, r1
 8012978:	330a      	adds	r3, #10
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	2b02      	cmp	r3, #2
 801297e:	d11f      	bne.n	80129c0 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8012980:	7bfa      	ldrb	r2, [r7, #15]
 8012982:	492f      	ldr	r1, [pc, #188]	; (8012a40 <dns_call_found+0x178>)
 8012984:	4613      	mov	r3, r2
 8012986:	011b      	lsls	r3, r3, #4
 8012988:	4413      	add	r3, r2
 801298a:	011b      	lsls	r3, r3, #4
 801298c:	440b      	add	r3, r1
 801298e:	330f      	adds	r3, #15
 8012990:	7819      	ldrb	r1, [r3, #0]
 8012992:	79fa      	ldrb	r2, [r7, #7]
 8012994:	482a      	ldr	r0, [pc, #168]	; (8012a40 <dns_call_found+0x178>)
 8012996:	4613      	mov	r3, r2
 8012998:	011b      	lsls	r3, r3, #4
 801299a:	4413      	add	r3, r2
 801299c:	011b      	lsls	r3, r3, #4
 801299e:	4403      	add	r3, r0
 80129a0:	330f      	adds	r3, #15
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	4299      	cmp	r1, r3
 80129a6:	d10b      	bne.n	80129c0 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80129a8:	79fa      	ldrb	r2, [r7, #7]
 80129aa:	4925      	ldr	r1, [pc, #148]	; (8012a40 <dns_call_found+0x178>)
 80129ac:	4613      	mov	r3, r2
 80129ae:	011b      	lsls	r3, r3, #4
 80129b0:	4413      	add	r3, r2
 80129b2:	011b      	lsls	r3, r3, #4
 80129b4:	440b      	add	r3, r1
 80129b6:	330f      	adds	r3, #15
 80129b8:	2204      	movs	r2, #4
 80129ba:	701a      	strb	r2, [r3, #0]
        break;
 80129bc:	e006      	b.n	80129cc <dns_call_found+0x104>
      continue; /* only check other requests */
 80129be:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80129c0:	7bfb      	ldrb	r3, [r7, #15]
 80129c2:	3301      	adds	r3, #1
 80129c4:	73fb      	strb	r3, [r7, #15]
 80129c6:	7bfb      	ldrb	r3, [r7, #15]
 80129c8:	2b03      	cmp	r3, #3
 80129ca:	d9ca      	bls.n	8012962 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80129cc:	79fa      	ldrb	r2, [r7, #7]
 80129ce:	491c      	ldr	r1, [pc, #112]	; (8012a40 <dns_call_found+0x178>)
 80129d0:	4613      	mov	r3, r2
 80129d2:	011b      	lsls	r3, r3, #4
 80129d4:	4413      	add	r3, r2
 80129d6:	011b      	lsls	r3, r3, #4
 80129d8:	440b      	add	r3, r1
 80129da:	330f      	adds	r3, #15
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	2b03      	cmp	r3, #3
 80129e0:	d827      	bhi.n	8012a32 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80129e2:	79fa      	ldrb	r2, [r7, #7]
 80129e4:	4916      	ldr	r1, [pc, #88]	; (8012a40 <dns_call_found+0x178>)
 80129e6:	4613      	mov	r3, r2
 80129e8:	011b      	lsls	r3, r3, #4
 80129ea:	4413      	add	r3, r2
 80129ec:	011b      	lsls	r3, r3, #4
 80129ee:	440b      	add	r3, r1
 80129f0:	330f      	adds	r3, #15
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	461a      	mov	r2, r3
 80129f6:	4b13      	ldr	r3, [pc, #76]	; (8012a44 <dns_call_found+0x17c>)
 80129f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129fc:	4618      	mov	r0, r3
 80129fe:	f009 fa7d 	bl	801befc <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8012a02:	79fa      	ldrb	r2, [r7, #7]
 8012a04:	490e      	ldr	r1, [pc, #56]	; (8012a40 <dns_call_found+0x178>)
 8012a06:	4613      	mov	r3, r2
 8012a08:	011b      	lsls	r3, r3, #4
 8012a0a:	4413      	add	r3, r2
 8012a0c:	011b      	lsls	r3, r3, #4
 8012a0e:	440b      	add	r3, r1
 8012a10:	330f      	adds	r3, #15
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	4619      	mov	r1, r3
 8012a16:	4b0b      	ldr	r3, [pc, #44]	; (8012a44 <dns_call_found+0x17c>)
 8012a18:	2200      	movs	r2, #0
 8012a1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8012a1e:	79fa      	ldrb	r2, [r7, #7]
 8012a20:	4907      	ldr	r1, [pc, #28]	; (8012a40 <dns_call_found+0x178>)
 8012a22:	4613      	mov	r3, r2
 8012a24:	011b      	lsls	r3, r3, #4
 8012a26:	4413      	add	r3, r2
 8012a28:	011b      	lsls	r3, r3, #4
 8012a2a:	440b      	add	r3, r1
 8012a2c:	330f      	adds	r3, #15
 8012a2e:	2204      	movs	r2, #4
 8012a30:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8012a32:	bf00      	nop
 8012a34:	3714      	adds	r7, #20
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd90      	pop	{r4, r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	20005668 	.word	0x20005668
 8012a40:	20005228 	.word	0x20005228
 8012a44:	20005214 	.word	0x20005214

08012a48 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b082      	sub	sp, #8
 8012a4c:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8012a4e:	f00e fa8f 	bl	8020f70 <rand>
 8012a52:	4603      	mov	r3, r0
 8012a54:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012a56:	2300      	movs	r3, #0
 8012a58:	71fb      	strb	r3, [r7, #7]
 8012a5a:	e01a      	b.n	8012a92 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012a5c:	79fa      	ldrb	r2, [r7, #7]
 8012a5e:	4911      	ldr	r1, [pc, #68]	; (8012aa4 <dns_create_txid+0x5c>)
 8012a60:	4613      	mov	r3, r2
 8012a62:	011b      	lsls	r3, r3, #4
 8012a64:	4413      	add	r3, r2
 8012a66:	011b      	lsls	r3, r3, #4
 8012a68:	440b      	add	r3, r1
 8012a6a:	330a      	adds	r3, #10
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	2b02      	cmp	r3, #2
 8012a70:	d10c      	bne.n	8012a8c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8012a72:	79fa      	ldrb	r2, [r7, #7]
 8012a74:	490b      	ldr	r1, [pc, #44]	; (8012aa4 <dns_create_txid+0x5c>)
 8012a76:	4613      	mov	r3, r2
 8012a78:	011b      	lsls	r3, r3, #4
 8012a7a:	4413      	add	r3, r2
 8012a7c:	011b      	lsls	r3, r3, #4
 8012a7e:	440b      	add	r3, r1
 8012a80:	3308      	adds	r3, #8
 8012a82:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012a84:	88ba      	ldrh	r2, [r7, #4]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d100      	bne.n	8012a8c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8012a8a:	e7e0      	b.n	8012a4e <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012a8c:	79fb      	ldrb	r3, [r7, #7]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	71fb      	strb	r3, [r7, #7]
 8012a92:	79fb      	ldrb	r3, [r7, #7]
 8012a94:	2b03      	cmp	r3, #3
 8012a96:	d9e1      	bls.n	8012a5c <dns_create_txid+0x14>
    }
  }

  return txid;
 8012a98:	88bb      	ldrh	r3, [r7, #4]
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3708      	adds	r7, #8
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
 8012aa2:	bf00      	nop
 8012aa4:	20005228 	.word	0x20005228

08012aa8 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b085      	sub	sp, #20
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d00d      	beq.n	8012ad6 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	7adb      	ldrb	r3, [r3, #11]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d109      	bne.n	8012ad6 <dns_backupserver_available+0x2e>
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	7adb      	ldrb	r3, [r3, #11]
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	4a06      	ldr	r2, [pc, #24]	; (8012ae4 <dns_backupserver_available+0x3c>)
 8012aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d001      	beq.n	8012ad6 <dns_backupserver_available+0x2e>
      ret = 1;
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ad8:	4618      	mov	r0, r3
 8012ada:	3714      	adds	r7, #20
 8012adc:	46bd      	mov	sp, r7
 8012ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae2:	4770      	bx	lr
 8012ae4:	20005698 	.word	0x20005698

08012ae8 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b084      	sub	sp, #16
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	4603      	mov	r3, r0
 8012af0:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8012af2:	79fa      	ldrb	r2, [r7, #7]
 8012af4:	4613      	mov	r3, r2
 8012af6:	011b      	lsls	r3, r3, #4
 8012af8:	4413      	add	r3, r2
 8012afa:	011b      	lsls	r3, r3, #4
 8012afc:	4a48      	ldr	r2, [pc, #288]	; (8012c20 <dns_check_entry+0x138>)
 8012afe:	4413      	add	r3, r2
 8012b00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8012b02:	79fb      	ldrb	r3, [r7, #7]
 8012b04:	2b03      	cmp	r3, #3
 8012b06:	d906      	bls.n	8012b16 <dns_check_entry+0x2e>
 8012b08:	4b46      	ldr	r3, [pc, #280]	; (8012c24 <dns_check_entry+0x13c>)
 8012b0a:	f240 421c 	movw	r2, #1052	; 0x41c
 8012b0e:	4946      	ldr	r1, [pc, #280]	; (8012c28 <dns_check_entry+0x140>)
 8012b10:	4846      	ldr	r0, [pc, #280]	; (8012c2c <dns_check_entry+0x144>)
 8012b12:	f00e f95b 	bl	8020dcc <iprintf>

  switch (entry->state) {
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	7a9b      	ldrb	r3, [r3, #10]
 8012b1a:	2b03      	cmp	r3, #3
 8012b1c:	d86f      	bhi.n	8012bfe <dns_check_entry+0x116>
 8012b1e:	a201      	add	r2, pc, #4	; (adr r2, 8012b24 <dns_check_entry+0x3c>)
 8012b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b24:	08012c0f 	.word	0x08012c0f
 8012b28:	08012b35 	.word	0x08012b35
 8012b2c:	08012b67 	.word	0x08012b67
 8012b30:	08012bdd 	.word	0x08012bdd
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8012b34:	f7ff ff88 	bl	8012a48 <dns_create_txid>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2202      	movs	r2, #2
 8012b44:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	2200      	movs	r2, #0
 8012b4a:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2201      	movs	r2, #1
 8012b50:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	2200      	movs	r2, #0
 8012b56:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8012b58:	79fb      	ldrb	r3, [r7, #7]
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7ff fd36 	bl	80125cc <dns_send>
 8012b60:	4603      	mov	r3, r0
 8012b62:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8012b64:	e058      	b.n	8012c18 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	7b1b      	ldrb	r3, [r3, #12]
 8012b6a:	3b01      	subs	r3, #1
 8012b6c:	b2da      	uxtb	r2, r3
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	731a      	strb	r2, [r3, #12]
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	7b1b      	ldrb	r3, [r3, #12]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d14b      	bne.n	8012c12 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	7b5b      	ldrb	r3, [r3, #13]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	b2da      	uxtb	r2, r3
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	735a      	strb	r2, [r3, #13]
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	7b5b      	ldrb	r3, [r3, #13]
 8012b8a:	2b04      	cmp	r3, #4
 8012b8c:	d11b      	bne.n	8012bc6 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8012b8e:	68f8      	ldr	r0, [r7, #12]
 8012b90:	f7ff ff8a 	bl	8012aa8 <dns_backupserver_available>
 8012b94:	4603      	mov	r3, r0
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d00c      	beq.n	8012bb4 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	7adb      	ldrb	r3, [r3, #11]
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	b2da      	uxtb	r2, r3
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	2201      	movs	r2, #1
 8012baa:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2200      	movs	r2, #0
 8012bb0:	735a      	strb	r2, [r3, #13]
 8012bb2:	e00c      	b.n	8012bce <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8012bb4:	79fb      	ldrb	r3, [r7, #7]
 8012bb6:	2100      	movs	r1, #0
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7ff fe85 	bl	80128c8 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	729a      	strb	r2, [r3, #10]
            break;
 8012bc4:	e028      	b.n	8012c18 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	7b5a      	ldrb	r2, [r3, #13]
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8012bce:	79fb      	ldrb	r3, [r7, #7]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7ff fcfb 	bl	80125cc <dns_send>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8012bda:	e01a      	b.n	8012c12 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d008      	beq.n	8012bf6 <dns_check_entry+0x10e>
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	1e5a      	subs	r2, r3, #1
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	601a      	str	r2, [r3, #0]
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d10f      	bne.n	8012c16 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	729a      	strb	r2, [r3, #10]
      }
      break;
 8012bfc:	e00b      	b.n	8012c16 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8012bfe:	4b09      	ldr	r3, [pc, #36]	; (8012c24 <dns_check_entry+0x13c>)
 8012c00:	f240 425b 	movw	r2, #1115	; 0x45b
 8012c04:	490a      	ldr	r1, [pc, #40]	; (8012c30 <dns_check_entry+0x148>)
 8012c06:	4809      	ldr	r0, [pc, #36]	; (8012c2c <dns_check_entry+0x144>)
 8012c08:	f00e f8e0 	bl	8020dcc <iprintf>
      break;
 8012c0c:	e004      	b.n	8012c18 <dns_check_entry+0x130>
      break;
 8012c0e:	bf00      	nop
 8012c10:	e002      	b.n	8012c18 <dns_check_entry+0x130>
      break;
 8012c12:	bf00      	nop
 8012c14:	e000      	b.n	8012c18 <dns_check_entry+0x130>
      break;
 8012c16:	bf00      	nop
  }
}
 8012c18:	bf00      	nop
 8012c1a:	3710      	adds	r7, #16
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}
 8012c20:	20005228 	.word	0x20005228
 8012c24:	080234a4 	.word	0x080234a4
 8012c28:	08023514 	.word	0x08023514
 8012c2c:	080234ec 	.word	0x080234ec
 8012c30:	08023530 	.word	0x08023530

08012c34 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b082      	sub	sp, #8
 8012c38:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	71fb      	strb	r3, [r7, #7]
 8012c3e:	e006      	b.n	8012c4e <dns_check_entries+0x1a>
    dns_check_entry(i);
 8012c40:	79fb      	ldrb	r3, [r7, #7]
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7ff ff50 	bl	8012ae8 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012c48:	79fb      	ldrb	r3, [r7, #7]
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	71fb      	strb	r3, [r7, #7]
 8012c4e:	79fb      	ldrb	r3, [r7, #7]
 8012c50:	2b03      	cmp	r3, #3
 8012c52:	d9f5      	bls.n	8012c40 <dns_check_entries+0xc>
  }
}
 8012c54:	bf00      	nop
 8012c56:	bf00      	nop
 8012c58:	3708      	adds	r7, #8
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}
	...

08012c60 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b084      	sub	sp, #16
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	4603      	mov	r3, r0
 8012c68:	6039      	str	r1, [r7, #0]
 8012c6a:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 8012c6c:	79fa      	ldrb	r2, [r7, #7]
 8012c6e:	4613      	mov	r3, r2
 8012c70:	011b      	lsls	r3, r3, #4
 8012c72:	4413      	add	r3, r2
 8012c74:	011b      	lsls	r3, r3, #4
 8012c76:	4a13      	ldr	r2, [pc, #76]	; (8012cc4 <dns_correct_response+0x64>)
 8012c78:	4413      	add	r3, r2
 8012c7a:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2203      	movs	r2, #3
 8012c80:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	683a      	ldr	r2, [r7, #0]
 8012c86:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	4a0e      	ldr	r2, [pc, #56]	; (8012cc8 <dns_correct_response+0x68>)
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	d902      	bls.n	8012c98 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	4a0c      	ldr	r2, [pc, #48]	; (8012cc8 <dns_correct_response+0x68>)
 8012c96:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	1d1a      	adds	r2, r3, #4
 8012c9c:	79fb      	ldrb	r3, [r7, #7]
 8012c9e:	4611      	mov	r1, r2
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7ff fe11 	bl	80128c8 <dns_call_found>

  if (entry->ttl == 0) {
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d106      	bne.n	8012cbc <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	7a9b      	ldrb	r3, [r3, #10]
 8012cb2:	2b03      	cmp	r3, #3
 8012cb4:	d102      	bne.n	8012cbc <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	729a      	strb	r2, [r3, #10]
    }
  }
}
 8012cbc:	bf00      	nop
 8012cbe:	3710      	adds	r7, #16
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	20005228 	.word	0x20005228
 8012cc8:	00093a80 	.word	0x00093a80

08012ccc <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012ccc:	b590      	push	{r4, r7, lr}
 8012cce:	b091      	sub	sp, #68	; 0x44
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	607a      	str	r2, [r7, #4]
 8012cd8:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	891b      	ldrh	r3, [r3, #8]
 8012cde:	2b0f      	cmp	r3, #15
 8012ce0:	f240 811e 	bls.w	8012f20 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8012ce4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012ce8:	2300      	movs	r3, #0
 8012cea:	220c      	movs	r2, #12
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f002 f849 	bl	8014d84 <pbuf_copy_partial>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	2b0c      	cmp	r3, #12
 8012cf6:	f040 8115 	bne.w	8012f24 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 8012cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7ff faad 	bl	801225c <lwip_htons>
 8012d02:	4603      	mov	r3, r0
 8012d04:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012d06:	2300      	movs	r3, #0
 8012d08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012d0c:	e102      	b.n	8012f14 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 8012d0e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012d12:	4613      	mov	r3, r2
 8012d14:	011b      	lsls	r3, r3, #4
 8012d16:	4413      	add	r3, r2
 8012d18:	011b      	lsls	r3, r3, #4
 8012d1a:	4a92      	ldr	r2, [pc, #584]	; (8012f64 <dns_recv+0x298>)
 8012d1c:	4413      	add	r3, r2
 8012d1e:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 8012d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d22:	7a9b      	ldrb	r3, [r3, #10]
 8012d24:	2b02      	cmp	r3, #2
 8012d26:	f040 80f0 	bne.w	8012f0a <dns_recv+0x23e>
          (entry->txid == txid)) {
 8012d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d2c:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 8012d2e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012d30:	429a      	cmp	r2, r3
 8012d32:	f040 80ea 	bne.w	8012f0a <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 8012d36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f7ff fa8f 	bl	801225c <lwip_htons>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 8012d42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7ff fa89 	bl	801225c <lwip_htons>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	877b      	strh	r3, [r7, #58]	; 0x3a

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8012d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d52:	b25b      	sxtb	r3, r3
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	f280 80e7 	bge.w	8012f28 <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 8012d5a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	f040 80e5 	bne.w	8012f2c <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	681a      	ldr	r2, [r3, #0]
 8012d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d68:	7adb      	ldrb	r3, [r3, #11]
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	4b7e      	ldr	r3, [pc, #504]	; (8012f68 <dns_recv+0x29c>)
 8012d6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	f040 80dc 	bne.w	8012f30 <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8012d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d7a:	3310      	adds	r3, #16
 8012d7c:	220c      	movs	r2, #12
 8012d7e:	6879      	ldr	r1, [r7, #4]
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7ff fb47 	bl	8012414 <dns_compare_name>
 8012d86:	4603      	mov	r3, r0
 8012d88:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 8012d8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d90:	4293      	cmp	r3, r2
 8012d92:	f000 80cf 	beq.w	8012f34 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8012d96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d98:	f107 0114 	add.w	r1, r7, #20
 8012d9c:	2204      	movs	r2, #4
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f001 fff0 	bl	8014d84 <pbuf_copy_partial>
 8012da4:	4603      	mov	r3, r0
 8012da6:	2b04      	cmp	r3, #4
 8012da8:	f040 80c6 	bne.w	8012f38 <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8012dac:	8afb      	ldrh	r3, [r7, #22]
 8012dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012db2:	f040 80c3 	bne.w	8012f3c <dns_recv+0x270>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 8012db6:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8012db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012dbc:	f040 80be 	bne.w	8012f3c <dns_recv+0x270>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8012dc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012dc2:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	f200 80ba 	bhi.w	8012f40 <dns_recv+0x274>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8012dcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012dce:	3304      	adds	r3, #4
 8012dd0:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8012dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012dd6:	f003 030f 	and.w	r3, r3, #15
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d078      	beq.n	8012ed0 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 8012dde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012de0:	f7ff fe62 	bl	8012aa8 <dns_backupserver_available>
 8012de4:	4603      	mov	r3, r0
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d07a      	beq.n	8012ee0 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 8012dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dec:	2203      	movs	r2, #3
 8012dee:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 8012df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012df2:	2201      	movs	r2, #1
 8012df4:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 8012df6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7ff fe74 	bl	8012ae8 <dns_check_entry>

            goto ignore_packet;
 8012e00:	e0a9      	b.n	8012f56 <dns_recv+0x28a>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 8012e02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e04:	4619      	mov	r1, r3
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f7ff fb92 	bl	8012530 <dns_skip_name>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 8012e10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e16:	4293      	cmp	r3, r2
 8012e18:	f000 8094 	beq.w	8012f44 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8012e1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e1e:	f107 0118 	add.w	r1, r7, #24
 8012e22:	220a      	movs	r2, #10
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f001 ffad 	bl	8014d84 <pbuf_copy_partial>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	2b0a      	cmp	r3, #10
 8012e2e:	f040 808b 	bne.w	8012f48 <dns_recv+0x27c>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8012e32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e34:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	f200 8087 	bhi.w	8012f4c <dns_recv+0x280>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8012e3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e40:	330a      	adds	r3, #10
 8012e42:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8012e44:	8b7b      	ldrh	r3, [r7, #26]
 8012e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e4a:	d12b      	bne.n	8012ea4 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8012e4c:	8b3b      	ldrh	r3, [r7, #24]
 8012e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e52:	d127      	bne.n	8012ea4 <dns_recv+0x1d8>
 8012e54:	8c3b      	ldrh	r3, [r7, #32]
 8012e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e5a:	d123      	bne.n	8012ea4 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8012e5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e5e:	f107 0110 	add.w	r1, r7, #16
 8012e62:	2204      	movs	r2, #4
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f001 ff8d 	bl	8014d84 <pbuf_copy_partial>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	2b04      	cmp	r3, #4
 8012e6e:	d16f      	bne.n	8012f50 <dns_recv+0x284>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8012e70:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012e74:	6939      	ldr	r1, [r7, #16]
 8012e76:	483b      	ldr	r0, [pc, #236]	; (8012f64 <dns_recv+0x298>)
 8012e78:	4613      	mov	r3, r2
 8012e7a:	011b      	lsls	r3, r3, #4
 8012e7c:	4413      	add	r3, r2
 8012e7e:	011b      	lsls	r3, r3, #4
 8012e80:	4403      	add	r3, r0
 8012e82:	3304      	adds	r3, #4
 8012e84:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f001 fd76 	bl	8014978 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8012e8c:	69fb      	ldr	r3, [r7, #28]
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f7ff f9f9 	bl	8012286 <lwip_htonl>
 8012e94:	4602      	mov	r2, r0
 8012e96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e9a:	4611      	mov	r1, r2
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7ff fedf 	bl	8012c60 <dns_correct_response>
 8012ea2:	e05c      	b.n	8012f5e <dns_recv+0x292>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8012ea4:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8012ea6:	8c3b      	ldrh	r3, [r7, #32]
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7ff f9d7 	bl	801225c <lwip_htons>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	4423      	add	r3, r4
 8012eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012eb6:	da4d      	bge.n	8012f54 <dns_recv+0x288>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8012eb8:	8c3b      	ldrh	r3, [r7, #32]
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7ff f9ce 	bl	801225c <lwip_htons>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ec6:	4413      	add	r3, r2
 8012ec8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 8012eca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ecc:	3b01      	subs	r3, #1
 8012ece:	877b      	strh	r3, [r7, #58]	; 0x3a
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8012ed0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d004      	beq.n	8012ee0 <dns_recv+0x214>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	891b      	ldrh	r3, [r3, #8]
 8012eda:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d390      	bcc.n	8012e02 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f001 fd49 	bl	8014978 <pbuf_free>
        dns_call_found(i, NULL);
 8012ee6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012eea:	2100      	movs	r1, #0
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7ff fceb 	bl	80128c8 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8012ef2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012ef6:	491b      	ldr	r1, [pc, #108]	; (8012f64 <dns_recv+0x298>)
 8012ef8:	4613      	mov	r3, r2
 8012efa:	011b      	lsls	r3, r3, #4
 8012efc:	4413      	add	r3, r2
 8012efe:	011b      	lsls	r3, r3, #4
 8012f00:	440b      	add	r3, r1
 8012f02:	330a      	adds	r3, #10
 8012f04:	2200      	movs	r2, #0
 8012f06:	701a      	strb	r2, [r3, #0]
        return;
 8012f08:	e029      	b.n	8012f5e <dns_recv+0x292>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012f0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012f0e:	3301      	adds	r3, #1
 8012f10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012f14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012f18:	2b03      	cmp	r3, #3
 8012f1a:	f67f aef8 	bls.w	8012d0e <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 8012f1e:	e001      	b.n	8012f24 <dns_recv+0x258>
    goto ignore_packet;
 8012f20:	bf00      	nop
 8012f22:	e018      	b.n	8012f56 <dns_recv+0x28a>
ignore_packet:
 8012f24:	bf00      	nop
 8012f26:	e016      	b.n	8012f56 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8012f28:	bf00      	nop
 8012f2a:	e014      	b.n	8012f56 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8012f2c:	bf00      	nop
 8012f2e:	e012      	b.n	8012f56 <dns_recv+0x28a>
            goto ignore_packet; /* ignore this packet */
 8012f30:	bf00      	nop
 8012f32:	e010      	b.n	8012f56 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8012f34:	bf00      	nop
 8012f36:	e00e      	b.n	8012f56 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8012f38:	bf00      	nop
 8012f3a:	e00c      	b.n	8012f56 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8012f3c:	bf00      	nop
 8012f3e:	e00a      	b.n	8012f56 <dns_recv+0x28a>
          goto ignore_packet;
 8012f40:	bf00      	nop
 8012f42:	e008      	b.n	8012f56 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8012f44:	bf00      	nop
 8012f46:	e006      	b.n	8012f56 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8012f48:	bf00      	nop
 8012f4a:	e004      	b.n	8012f56 <dns_recv+0x28a>
              goto ignore_packet;
 8012f4c:	bf00      	nop
 8012f4e:	e002      	b.n	8012f56 <dns_recv+0x28a>
                    goto ignore_packet; /* ignore this packet */
 8012f50:	bf00      	nop
 8012f52:	e000      	b.n	8012f56 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8012f54:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f001 fd0e 	bl	8014978 <pbuf_free>
  return;
 8012f5c:	bf00      	nop
}
 8012f5e:	3744      	adds	r7, #68	; 0x44
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd90      	pop	{r4, r7, pc}
 8012f64:	20005228 	.word	0x20005228
 8012f68:	20005698 	.word	0x20005698

08012f6c <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b08a      	sub	sp, #40	; 0x28
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	60f8      	str	r0, [r7, #12]
 8012f74:	60b9      	str	r1, [r7, #8]
 8012f76:	607a      	str	r2, [r7, #4]
 8012f78:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012f7e:	2300      	movs	r3, #0
 8012f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f84:	e056      	b.n	8013034 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012f86:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012f8a:	4990      	ldr	r1, [pc, #576]	; (80131cc <dns_enqueue+0x260>)
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	011b      	lsls	r3, r3, #4
 8012f90:	4413      	add	r3, r2
 8012f92:	011b      	lsls	r3, r3, #4
 8012f94:	440b      	add	r3, r1
 8012f96:	330a      	adds	r3, #10
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	2b02      	cmp	r3, #2
 8012f9c:	d145      	bne.n	801302a <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8012f9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	011b      	lsls	r3, r3, #4
 8012fa6:	4413      	add	r3, r2
 8012fa8:	011b      	lsls	r3, r3, #4
 8012faa:	3310      	adds	r3, #16
 8012fac:	4a87      	ldr	r2, [pc, #540]	; (80131cc <dns_enqueue+0x260>)
 8012fae:	4413      	add	r3, r2
 8012fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	68f8      	ldr	r0, [r7, #12]
 8012fb8:	f7ff f97e 	bl	80122b8 <lwip_strnicmp>
 8012fbc:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d133      	bne.n	801302a <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	76fb      	strb	r3, [r7, #27]
 8012fc6:	e02d      	b.n	8013024 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 8012fc8:	7efa      	ldrb	r2, [r7, #27]
 8012fca:	4981      	ldr	r1, [pc, #516]	; (80131d0 <dns_enqueue+0x264>)
 8012fcc:	4613      	mov	r3, r2
 8012fce:	005b      	lsls	r3, r3, #1
 8012fd0:	4413      	add	r3, r2
 8012fd2:	009b      	lsls	r3, r3, #2
 8012fd4:	440b      	add	r3, r1
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d120      	bne.n	801301e <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 8012fdc:	7efa      	ldrb	r2, [r7, #27]
 8012fde:	497c      	ldr	r1, [pc, #496]	; (80131d0 <dns_enqueue+0x264>)
 8012fe0:	4613      	mov	r3, r2
 8012fe2:	005b      	lsls	r3, r3, #1
 8012fe4:	4413      	add	r3, r2
 8012fe6:	009b      	lsls	r3, r3, #2
 8012fe8:	440b      	add	r3, r1
 8012fea:	687a      	ldr	r2, [r7, #4]
 8012fec:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 8012fee:	7efa      	ldrb	r2, [r7, #27]
 8012ff0:	4977      	ldr	r1, [pc, #476]	; (80131d0 <dns_enqueue+0x264>)
 8012ff2:	4613      	mov	r3, r2
 8012ff4:	005b      	lsls	r3, r3, #1
 8012ff6:	4413      	add	r3, r2
 8012ff8:	009b      	lsls	r3, r3, #2
 8012ffa:	440b      	add	r3, r1
 8012ffc:	3304      	adds	r3, #4
 8012ffe:	683a      	ldr	r2, [r7, #0]
 8013000:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 8013002:	7efa      	ldrb	r2, [r7, #27]
 8013004:	4972      	ldr	r1, [pc, #456]	; (80131d0 <dns_enqueue+0x264>)
 8013006:	4613      	mov	r3, r2
 8013008:	005b      	lsls	r3, r3, #1
 801300a:	4413      	add	r3, r2
 801300c:	009b      	lsls	r3, r3, #2
 801300e:	440b      	add	r3, r1
 8013010:	3308      	adds	r3, #8
 8013012:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013016:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 8013018:	f06f 0304 	mvn.w	r3, #4
 801301c:	e0d1      	b.n	80131c2 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801301e:	7efb      	ldrb	r3, [r7, #27]
 8013020:	3301      	adds	r3, #1
 8013022:	76fb      	strb	r3, [r7, #27]
 8013024:	7efb      	ldrb	r3, [r7, #27]
 8013026:	2b03      	cmp	r3, #3
 8013028:	d9ce      	bls.n	8012fc8 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801302a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801302e:	3301      	adds	r3, #1
 8013030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013038:	2b03      	cmp	r3, #3
 801303a:	d9a4      	bls.n	8012f86 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 801303c:	2300      	movs	r3, #0
 801303e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 8013042:	2304      	movs	r3, #4
 8013044:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013048:	2300      	movs	r3, #0
 801304a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801304e:	e027      	b.n	80130a0 <dns_enqueue+0x134>
    entry = &dns_table[i];
 8013050:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013054:	4613      	mov	r3, r2
 8013056:	011b      	lsls	r3, r3, #4
 8013058:	4413      	add	r3, r2
 801305a:	011b      	lsls	r3, r3, #4
 801305c:	4a5b      	ldr	r2, [pc, #364]	; (80131cc <dns_enqueue+0x260>)
 801305e:	4413      	add	r3, r2
 8013060:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 8013062:	6a3b      	ldr	r3, [r7, #32]
 8013064:	7a9b      	ldrb	r3, [r3, #10]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d01f      	beq.n	80130aa <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 801306a:	6a3b      	ldr	r3, [r7, #32]
 801306c:	7a9b      	ldrb	r3, [r3, #10]
 801306e:	2b03      	cmp	r3, #3
 8013070:	d111      	bne.n	8013096 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8013072:	4b58      	ldr	r3, [pc, #352]	; (80131d4 <dns_enqueue+0x268>)
 8013074:	781a      	ldrb	r2, [r3, #0]
 8013076:	6a3b      	ldr	r3, [r7, #32]
 8013078:	7b9b      	ldrb	r3, [r3, #14]
 801307a:	1ad3      	subs	r3, r2, r3
 801307c:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 801307e:	7eba      	ldrb	r2, [r7, #26]
 8013080:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013084:	429a      	cmp	r2, r3
 8013086:	d906      	bls.n	8013096 <dns_enqueue+0x12a>
        lseq = age;
 8013088:	7ebb      	ldrb	r3, [r7, #26]
 801308a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 801308e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013092:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801309a:	3301      	adds	r3, #1
 801309c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130a4:	2b03      	cmp	r3, #3
 80130a6:	d9d3      	bls.n	8013050 <dns_enqueue+0xe4>
 80130a8:	e000      	b.n	80130ac <dns_enqueue+0x140>
      break;
 80130aa:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 80130ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130b0:	2b04      	cmp	r3, #4
 80130b2:	d11f      	bne.n	80130f4 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 80130b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80130b8:	2b03      	cmp	r3, #3
 80130ba:	d80b      	bhi.n	80130d4 <dns_enqueue+0x168>
 80130bc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80130c0:	4942      	ldr	r1, [pc, #264]	; (80131cc <dns_enqueue+0x260>)
 80130c2:	4613      	mov	r3, r2
 80130c4:	011b      	lsls	r3, r3, #4
 80130c6:	4413      	add	r3, r2
 80130c8:	011b      	lsls	r3, r3, #4
 80130ca:	440b      	add	r3, r1
 80130cc:	330a      	adds	r3, #10
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	2b03      	cmp	r3, #3
 80130d2:	d002      	beq.n	80130da <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 80130d4:	f04f 33ff 	mov.w	r3, #4294967295
 80130d8:	e073      	b.n	80131c2 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 80130da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80130de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 80130e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80130e6:	4613      	mov	r3, r2
 80130e8:	011b      	lsls	r3, r3, #4
 80130ea:	4413      	add	r3, r2
 80130ec:	011b      	lsls	r3, r3, #4
 80130ee:	4a37      	ldr	r2, [pc, #220]	; (80131cc <dns_enqueue+0x260>)
 80130f0:	4413      	add	r3, r2
 80130f2:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 80130f4:	2300      	movs	r3, #0
 80130f6:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80130f8:	2300      	movs	r3, #0
 80130fa:	76fb      	strb	r3, [r7, #27]
 80130fc:	e015      	b.n	801312a <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 80130fe:	7efa      	ldrb	r2, [r7, #27]
 8013100:	4933      	ldr	r1, [pc, #204]	; (80131d0 <dns_enqueue+0x264>)
 8013102:	4613      	mov	r3, r2
 8013104:	005b      	lsls	r3, r3, #1
 8013106:	4413      	add	r3, r2
 8013108:	009b      	lsls	r3, r3, #2
 801310a:	440b      	add	r3, r1
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d108      	bne.n	8013124 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 8013112:	7efa      	ldrb	r2, [r7, #27]
 8013114:	4613      	mov	r3, r2
 8013116:	005b      	lsls	r3, r3, #1
 8013118:	4413      	add	r3, r2
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	4a2c      	ldr	r2, [pc, #176]	; (80131d0 <dns_enqueue+0x264>)
 801311e:	4413      	add	r3, r2
 8013120:	61fb      	str	r3, [r7, #28]
      break;
 8013122:	e005      	b.n	8013130 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013124:	7efb      	ldrb	r3, [r7, #27]
 8013126:	3301      	adds	r3, #1
 8013128:	76fb      	strb	r3, [r7, #27]
 801312a:	7efb      	ldrb	r3, [r7, #27]
 801312c:	2b03      	cmp	r3, #3
 801312e:	d9e6      	bls.n	80130fe <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 8013130:	69fb      	ldr	r3, [r7, #28]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d102      	bne.n	801313c <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 8013136:	f04f 33ff 	mov.w	r3, #4294967295
 801313a:	e042      	b.n	80131c2 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 801313c:	69fb      	ldr	r3, [r7, #28]
 801313e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013142:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 8013144:	6a3b      	ldr	r3, [r7, #32]
 8013146:	2201      	movs	r2, #1
 8013148:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 801314a:	4b22      	ldr	r3, [pc, #136]	; (80131d4 <dns_enqueue+0x268>)
 801314c:	781a      	ldrb	r2, [r3, #0]
 801314e:	6a3b      	ldr	r3, [r7, #32]
 8013150:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 8013152:	69fb      	ldr	r3, [r7, #28]
 8013154:	687a      	ldr	r2, [r7, #4]
 8013156:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 8013158:	69fb      	ldr	r3, [r7, #28]
 801315a:	683a      	ldr	r2, [r7, #0]
 801315c:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	2bff      	cmp	r3, #255	; 0xff
 8013162:	bf28      	it	cs
 8013164:	23ff      	movcs	r3, #255	; 0xff
 8013166:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 8013168:	6a3b      	ldr	r3, [r7, #32]
 801316a:	3310      	adds	r3, #16
 801316c:	697a      	ldr	r2, [r7, #20]
 801316e:	68f9      	ldr	r1, [r7, #12]
 8013170:	4618      	mov	r0, r3
 8013172:	f00d fd41 	bl	8020bf8 <memcpy>
  entry->name[namelen] = 0;
 8013176:	6a3a      	ldr	r2, [r7, #32]
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	4413      	add	r3, r2
 801317c:	3310      	adds	r3, #16
 801317e:	2200      	movs	r2, #0
 8013180:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 8013182:	f7ff fb4f 	bl	8012824 <dns_alloc_pcb>
 8013186:	4603      	mov	r3, r0
 8013188:	461a      	mov	r2, r3
 801318a:	6a3b      	ldr	r3, [r7, #32]
 801318c:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 801318e:	6a3b      	ldr	r3, [r7, #32]
 8013190:	7bdb      	ldrb	r3, [r3, #15]
 8013192:	2b03      	cmp	r3, #3
 8013194:	d908      	bls.n	80131a8 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 8013196:	6a3b      	ldr	r3, [r7, #32]
 8013198:	2200      	movs	r2, #0
 801319a:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	2200      	movs	r2, #0
 80131a0:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 80131a2:	f04f 33ff 	mov.w	r3, #4294967295
 80131a6:	e00c      	b.n	80131c2 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 80131a8:	4b0a      	ldr	r3, [pc, #40]	; (80131d4 <dns_enqueue+0x268>)
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	3301      	adds	r3, #1
 80131ae:	b2da      	uxtb	r2, r3
 80131b0:	4b08      	ldr	r3, [pc, #32]	; (80131d4 <dns_enqueue+0x268>)
 80131b2:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 80131b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7ff fc95 	bl	8012ae8 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 80131be:	f06f 0304 	mvn.w	r3, #4
}
 80131c2:	4618      	mov	r0, r3
 80131c4:	3728      	adds	r7, #40	; 0x28
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	bf00      	nop
 80131cc:	20005228 	.word	0x20005228
 80131d0:	20005668 	.word	0x20005668
 80131d4:	20005225 	.word	0x20005225

080131d8 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b086      	sub	sp, #24
 80131dc:	af00      	add	r7, sp, #0
 80131de:	60f8      	str	r0, [r7, #12]
 80131e0:	60b9      	str	r1, [r7, #8]
 80131e2:	607a      	str	r2, [r7, #4]
 80131e4:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d006      	beq.n	80131fa <dns_gethostbyname_addrtype+0x22>
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d003      	beq.n	80131fa <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d102      	bne.n	8013200 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 80131fa:	f06f 030f 	mvn.w	r3, #15
 80131fe:	e029      	b.n	8013254 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8013200:	68f8      	ldr	r0, [r7, #12]
 8013202:	f7ec ffe5 	bl	80001d0 <strlen>
 8013206:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	2bff      	cmp	r3, #255	; 0xff
 801320c:	d902      	bls.n	8013214 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 801320e:	f06f 030f 	mvn.w	r3, #15
 8013212:	e01f      	b.n	8013254 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8013214:	68b9      	ldr	r1, [r7, #8]
 8013216:	68f8      	ldr	r0, [r7, #12]
 8013218:	f00c f9bc 	bl	801f594 <ip4addr_aton>
 801321c:	4603      	mov	r3, r0
 801321e:	2b00      	cmp	r3, #0
 8013220:	d001      	beq.n	8013226 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8013222:	2300      	movs	r3, #0
 8013224:	e016      	b.n	8013254 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 8013226:	68b9      	ldr	r1, [r7, #8]
 8013228:	68f8      	ldr	r0, [r7, #12]
 801322a:	f7ff f8b1 	bl	8012390 <dns_lookup>
 801322e:	4603      	mov	r3, r0
 8013230:	2b00      	cmp	r3, #0
 8013232:	d101      	bne.n	8013238 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 8013234:	2300      	movs	r3, #0
 8013236:	e00d      	b.n	8013254 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 8013238:	4b08      	ldr	r3, [pc, #32]	; (801325c <dns_gethostbyname_addrtype+0x84>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d102      	bne.n	8013246 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 8013240:	f06f 0305 	mvn.w	r3, #5
 8013244:	e006      	b.n	8013254 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	687a      	ldr	r2, [r7, #4]
 801324a:	6979      	ldr	r1, [r7, #20]
 801324c:	68f8      	ldr	r0, [r7, #12]
 801324e:	f7ff fe8d 	bl	8012f6c <dns_enqueue>
 8013252:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8013254:	4618      	mov	r0, r3
 8013256:	3718      	adds	r7, #24
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}
 801325c:	20005698 	.word	0x20005698

08013260 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b082      	sub	sp, #8
 8013264:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013266:	2300      	movs	r3, #0
 8013268:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801326a:	f00d fb05 	bl	8020878 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801326e:	f000 f8d7 	bl	8013420 <mem_init>
  memp_init();
 8013272:	f000 fc33 	bl	8013adc <memp_init>
  pbuf_init();
  netif_init();
 8013276:	f000 fcf9 	bl	8013c6c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801327a:	f008 f955 	bl	801b528 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801327e:	f001 ffa1 	bl	80151c4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8013282:	f7ff f854 	bl	801232e <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013286:	f008 f895 	bl	801b3b4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801328a:	bf00      	nop
 801328c:	3708      	adds	r7, #8
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
	...

08013294 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013294:	b480      	push	{r7}
 8013296:	b083      	sub	sp, #12
 8013298:	af00      	add	r7, sp, #0
 801329a:	4603      	mov	r3, r0
 801329c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801329e:	4b05      	ldr	r3, [pc, #20]	; (80132b4 <ptr_to_mem+0x20>)
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	88fb      	ldrh	r3, [r7, #6]
 80132a4:	4413      	add	r3, r2
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	370c      	adds	r7, #12
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr
 80132b2:	bf00      	nop
 80132b4:	200056a0 	.word	0x200056a0

080132b8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80132b8:	b480      	push	{r7}
 80132ba:	b083      	sub	sp, #12
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80132c0:	4b05      	ldr	r3, [pc, #20]	; (80132d8 <mem_to_ptr+0x20>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	687a      	ldr	r2, [r7, #4]
 80132c6:	1ad3      	subs	r3, r2, r3
 80132c8:	b29b      	uxth	r3, r3
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	370c      	adds	r7, #12
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop
 80132d8:	200056a0 	.word	0x200056a0

080132dc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80132dc:	b590      	push	{r4, r7, lr}
 80132de:	b085      	sub	sp, #20
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80132e4:	4b45      	ldr	r3, [pc, #276]	; (80133fc <plug_holes+0x120>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d206      	bcs.n	80132fc <plug_holes+0x20>
 80132ee:	4b44      	ldr	r3, [pc, #272]	; (8013400 <plug_holes+0x124>)
 80132f0:	f240 12df 	movw	r2, #479	; 0x1df
 80132f4:	4943      	ldr	r1, [pc, #268]	; (8013404 <plug_holes+0x128>)
 80132f6:	4844      	ldr	r0, [pc, #272]	; (8013408 <plug_holes+0x12c>)
 80132f8:	f00d fd68 	bl	8020dcc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80132fc:	4b43      	ldr	r3, [pc, #268]	; (801340c <plug_holes+0x130>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	429a      	cmp	r2, r3
 8013304:	d306      	bcc.n	8013314 <plug_holes+0x38>
 8013306:	4b3e      	ldr	r3, [pc, #248]	; (8013400 <plug_holes+0x124>)
 8013308:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801330c:	4940      	ldr	r1, [pc, #256]	; (8013410 <plug_holes+0x134>)
 801330e:	483e      	ldr	r0, [pc, #248]	; (8013408 <plug_holes+0x12c>)
 8013310:	f00d fd5c 	bl	8020dcc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	791b      	ldrb	r3, [r3, #4]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d006      	beq.n	801332a <plug_holes+0x4e>
 801331c:	4b38      	ldr	r3, [pc, #224]	; (8013400 <plug_holes+0x124>)
 801331e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013322:	493c      	ldr	r1, [pc, #240]	; (8013414 <plug_holes+0x138>)
 8013324:	4838      	ldr	r0, [pc, #224]	; (8013408 <plug_holes+0x12c>)
 8013326:	f00d fd51 	bl	8020dcc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	881b      	ldrh	r3, [r3, #0]
 801332e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013332:	d906      	bls.n	8013342 <plug_holes+0x66>
 8013334:	4b32      	ldr	r3, [pc, #200]	; (8013400 <plug_holes+0x124>)
 8013336:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801333a:	4937      	ldr	r1, [pc, #220]	; (8013418 <plug_holes+0x13c>)
 801333c:	4832      	ldr	r0, [pc, #200]	; (8013408 <plug_holes+0x12c>)
 801333e:	f00d fd45 	bl	8020dcc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	881b      	ldrh	r3, [r3, #0]
 8013346:	4618      	mov	r0, r3
 8013348:	f7ff ffa4 	bl	8013294 <ptr_to_mem>
 801334c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	429a      	cmp	r2, r3
 8013354:	d024      	beq.n	80133a0 <plug_holes+0xc4>
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	791b      	ldrb	r3, [r3, #4]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d120      	bne.n	80133a0 <plug_holes+0xc4>
 801335e:	4b2b      	ldr	r3, [pc, #172]	; (801340c <plug_holes+0x130>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	68fa      	ldr	r2, [r7, #12]
 8013364:	429a      	cmp	r2, r3
 8013366:	d01b      	beq.n	80133a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013368:	4b2c      	ldr	r3, [pc, #176]	; (801341c <plug_holes+0x140>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	68fa      	ldr	r2, [r7, #12]
 801336e:	429a      	cmp	r2, r3
 8013370:	d102      	bne.n	8013378 <plug_holes+0x9c>
      lfree = mem;
 8013372:	4a2a      	ldr	r2, [pc, #168]	; (801341c <plug_holes+0x140>)
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	881a      	ldrh	r2, [r3, #0]
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	881b      	ldrh	r3, [r3, #0]
 8013384:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013388:	d00a      	beq.n	80133a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	881b      	ldrh	r3, [r3, #0]
 801338e:	4618      	mov	r0, r3
 8013390:	f7ff ff80 	bl	8013294 <ptr_to_mem>
 8013394:	4604      	mov	r4, r0
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f7ff ff8e 	bl	80132b8 <mem_to_ptr>
 801339c:	4603      	mov	r3, r0
 801339e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	885b      	ldrh	r3, [r3, #2]
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ff ff75 	bl	8013294 <ptr_to_mem>
 80133aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80133ac:	68ba      	ldr	r2, [r7, #8]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d01f      	beq.n	80133f4 <plug_holes+0x118>
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	791b      	ldrb	r3, [r3, #4]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d11b      	bne.n	80133f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80133bc:	4b17      	ldr	r3, [pc, #92]	; (801341c <plug_holes+0x140>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	687a      	ldr	r2, [r7, #4]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d102      	bne.n	80133cc <plug_holes+0xf0>
      lfree = pmem;
 80133c6:	4a15      	ldr	r2, [pc, #84]	; (801341c <plug_holes+0x140>)
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	881a      	ldrh	r2, [r3, #0]
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	881b      	ldrh	r3, [r3, #0]
 80133d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80133dc:	d00a      	beq.n	80133f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	881b      	ldrh	r3, [r3, #0]
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7ff ff56 	bl	8013294 <ptr_to_mem>
 80133e8:	4604      	mov	r4, r0
 80133ea:	68b8      	ldr	r0, [r7, #8]
 80133ec:	f7ff ff64 	bl	80132b8 <mem_to_ptr>
 80133f0:	4603      	mov	r3, r0
 80133f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80133f4:	bf00      	nop
 80133f6:	3714      	adds	r7, #20
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd90      	pop	{r4, r7, pc}
 80133fc:	200056a0 	.word	0x200056a0
 8013400:	08023550 	.word	0x08023550
 8013404:	08023580 	.word	0x08023580
 8013408:	08023598 	.word	0x08023598
 801340c:	200056a4 	.word	0x200056a4
 8013410:	080235c0 	.word	0x080235c0
 8013414:	080235dc 	.word	0x080235dc
 8013418:	080235f8 	.word	0x080235f8
 801341c:	200056ac 	.word	0x200056ac

08013420 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013426:	4b1f      	ldr	r3, [pc, #124]	; (80134a4 <mem_init+0x84>)
 8013428:	3303      	adds	r3, #3
 801342a:	f023 0303 	bic.w	r3, r3, #3
 801342e:	461a      	mov	r2, r3
 8013430:	4b1d      	ldr	r3, [pc, #116]	; (80134a8 <mem_init+0x88>)
 8013432:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013434:	4b1c      	ldr	r3, [pc, #112]	; (80134a8 <mem_init+0x88>)
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013440:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2200      	movs	r2, #0
 8013446:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	2200      	movs	r2, #0
 801344c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801344e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8013452:	f7ff ff1f 	bl	8013294 <ptr_to_mem>
 8013456:	4603      	mov	r3, r0
 8013458:	4a14      	ldr	r2, [pc, #80]	; (80134ac <mem_init+0x8c>)
 801345a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801345c:	4b13      	ldr	r3, [pc, #76]	; (80134ac <mem_init+0x8c>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	2201      	movs	r2, #1
 8013462:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013464:	4b11      	ldr	r3, [pc, #68]	; (80134ac <mem_init+0x8c>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801346c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801346e:	4b0f      	ldr	r3, [pc, #60]	; (80134ac <mem_init+0x8c>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013476:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013478:	4b0b      	ldr	r3, [pc, #44]	; (80134a8 <mem_init+0x88>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	4a0c      	ldr	r2, [pc, #48]	; (80134b0 <mem_init+0x90>)
 801347e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013480:	480c      	ldr	r0, [pc, #48]	; (80134b4 <mem_init+0x94>)
 8013482:	f00d fa05 	bl	8020890 <sys_mutex_new>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d006      	beq.n	801349a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801348c:	4b0a      	ldr	r3, [pc, #40]	; (80134b8 <mem_init+0x98>)
 801348e:	f240 221f 	movw	r2, #543	; 0x21f
 8013492:	490a      	ldr	r1, [pc, #40]	; (80134bc <mem_init+0x9c>)
 8013494:	480a      	ldr	r0, [pc, #40]	; (80134c0 <mem_init+0xa0>)
 8013496:	f00d fc99 	bl	8020dcc <iprintf>
  }
}
 801349a:	bf00      	nop
 801349c:	3708      	adds	r7, #8
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
 80134a2:	bf00      	nop
 80134a4:	200135e8 	.word	0x200135e8
 80134a8:	200056a0 	.word	0x200056a0
 80134ac:	200056a4 	.word	0x200056a4
 80134b0:	200056ac 	.word	0x200056ac
 80134b4:	200056a8 	.word	0x200056a8
 80134b8:	08023550 	.word	0x08023550
 80134bc:	08023624 	.word	0x08023624
 80134c0:	08023598 	.word	0x08023598

080134c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b086      	sub	sp, #24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f7ff fef3 	bl	80132b8 <mem_to_ptr>
 80134d2:	4603      	mov	r3, r0
 80134d4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	881b      	ldrh	r3, [r3, #0]
 80134da:	4618      	mov	r0, r3
 80134dc:	f7ff feda 	bl	8013294 <ptr_to_mem>
 80134e0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	885b      	ldrh	r3, [r3, #2]
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7ff fed4 	bl	8013294 <ptr_to_mem>
 80134ec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	881b      	ldrh	r3, [r3, #0]
 80134f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80134f6:	d818      	bhi.n	801352a <mem_link_valid+0x66>
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	885b      	ldrh	r3, [r3, #2]
 80134fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013500:	d813      	bhi.n	801352a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013506:	8afa      	ldrh	r2, [r7, #22]
 8013508:	429a      	cmp	r2, r3
 801350a:	d004      	beq.n	8013516 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	881b      	ldrh	r3, [r3, #0]
 8013510:	8afa      	ldrh	r2, [r7, #22]
 8013512:	429a      	cmp	r2, r3
 8013514:	d109      	bne.n	801352a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013516:	4b08      	ldr	r3, [pc, #32]	; (8013538 <mem_link_valid+0x74>)
 8013518:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801351a:	693a      	ldr	r2, [r7, #16]
 801351c:	429a      	cmp	r2, r3
 801351e:	d006      	beq.n	801352e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	885b      	ldrh	r3, [r3, #2]
 8013524:	8afa      	ldrh	r2, [r7, #22]
 8013526:	429a      	cmp	r2, r3
 8013528:	d001      	beq.n	801352e <mem_link_valid+0x6a>
    return 0;
 801352a:	2300      	movs	r3, #0
 801352c:	e000      	b.n	8013530 <mem_link_valid+0x6c>
  }
  return 1;
 801352e:	2301      	movs	r3, #1
}
 8013530:	4618      	mov	r0, r3
 8013532:	3718      	adds	r7, #24
 8013534:	46bd      	mov	sp, r7
 8013536:	bd80      	pop	{r7, pc}
 8013538:	200056a4 	.word	0x200056a4

0801353c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b088      	sub	sp, #32
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d070      	beq.n	801362c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f003 0303 	and.w	r3, r3, #3
 8013550:	2b00      	cmp	r3, #0
 8013552:	d00d      	beq.n	8013570 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013554:	4b37      	ldr	r3, [pc, #220]	; (8013634 <mem_free+0xf8>)
 8013556:	f240 2273 	movw	r2, #627	; 0x273
 801355a:	4937      	ldr	r1, [pc, #220]	; (8013638 <mem_free+0xfc>)
 801355c:	4837      	ldr	r0, [pc, #220]	; (801363c <mem_free+0x100>)
 801355e:	f00d fc35 	bl	8020dcc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013562:	f00d f9e7 	bl	8020934 <sys_arch_protect>
 8013566:	60f8      	str	r0, [r7, #12]
 8013568:	68f8      	ldr	r0, [r7, #12]
 801356a:	f00d f9f1 	bl	8020950 <sys_arch_unprotect>
    return;
 801356e:	e05e      	b.n	801362e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	3b08      	subs	r3, #8
 8013574:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013576:	4b32      	ldr	r3, [pc, #200]	; (8013640 <mem_free+0x104>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	69fa      	ldr	r2, [r7, #28]
 801357c:	429a      	cmp	r2, r3
 801357e:	d306      	bcc.n	801358e <mem_free+0x52>
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f103 020c 	add.w	r2, r3, #12
 8013586:	4b2f      	ldr	r3, [pc, #188]	; (8013644 <mem_free+0x108>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	429a      	cmp	r2, r3
 801358c:	d90d      	bls.n	80135aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801358e:	4b29      	ldr	r3, [pc, #164]	; (8013634 <mem_free+0xf8>)
 8013590:	f240 227f 	movw	r2, #639	; 0x27f
 8013594:	492c      	ldr	r1, [pc, #176]	; (8013648 <mem_free+0x10c>)
 8013596:	4829      	ldr	r0, [pc, #164]	; (801363c <mem_free+0x100>)
 8013598:	f00d fc18 	bl	8020dcc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801359c:	f00d f9ca 	bl	8020934 <sys_arch_protect>
 80135a0:	6138      	str	r0, [r7, #16]
 80135a2:	6938      	ldr	r0, [r7, #16]
 80135a4:	f00d f9d4 	bl	8020950 <sys_arch_unprotect>
    return;
 80135a8:	e041      	b.n	801362e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80135aa:	4828      	ldr	r0, [pc, #160]	; (801364c <mem_free+0x110>)
 80135ac:	f00d f986 	bl	80208bc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	791b      	ldrb	r3, [r3, #4]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d110      	bne.n	80135da <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80135b8:	4b1e      	ldr	r3, [pc, #120]	; (8013634 <mem_free+0xf8>)
 80135ba:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80135be:	4924      	ldr	r1, [pc, #144]	; (8013650 <mem_free+0x114>)
 80135c0:	481e      	ldr	r0, [pc, #120]	; (801363c <mem_free+0x100>)
 80135c2:	f00d fc03 	bl	8020dcc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80135c6:	4821      	ldr	r0, [pc, #132]	; (801364c <mem_free+0x110>)
 80135c8:	f00d f987 	bl	80208da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80135cc:	f00d f9b2 	bl	8020934 <sys_arch_protect>
 80135d0:	6178      	str	r0, [r7, #20]
 80135d2:	6978      	ldr	r0, [r7, #20]
 80135d4:	f00d f9bc 	bl	8020950 <sys_arch_unprotect>
    return;
 80135d8:	e029      	b.n	801362e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80135da:	69f8      	ldr	r0, [r7, #28]
 80135dc:	f7ff ff72 	bl	80134c4 <mem_link_valid>
 80135e0:	4603      	mov	r3, r0
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d110      	bne.n	8013608 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80135e6:	4b13      	ldr	r3, [pc, #76]	; (8013634 <mem_free+0xf8>)
 80135e8:	f240 2295 	movw	r2, #661	; 0x295
 80135ec:	4919      	ldr	r1, [pc, #100]	; (8013654 <mem_free+0x118>)
 80135ee:	4813      	ldr	r0, [pc, #76]	; (801363c <mem_free+0x100>)
 80135f0:	f00d fbec 	bl	8020dcc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80135f4:	4815      	ldr	r0, [pc, #84]	; (801364c <mem_free+0x110>)
 80135f6:	f00d f970 	bl	80208da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80135fa:	f00d f99b 	bl	8020934 <sys_arch_protect>
 80135fe:	61b8      	str	r0, [r7, #24]
 8013600:	69b8      	ldr	r0, [r7, #24]
 8013602:	f00d f9a5 	bl	8020950 <sys_arch_unprotect>
    return;
 8013606:	e012      	b.n	801362e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	2200      	movs	r2, #0
 801360c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801360e:	4b12      	ldr	r3, [pc, #72]	; (8013658 <mem_free+0x11c>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	69fa      	ldr	r2, [r7, #28]
 8013614:	429a      	cmp	r2, r3
 8013616:	d202      	bcs.n	801361e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013618:	4a0f      	ldr	r2, [pc, #60]	; (8013658 <mem_free+0x11c>)
 801361a:	69fb      	ldr	r3, [r7, #28]
 801361c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801361e:	69f8      	ldr	r0, [r7, #28]
 8013620:	f7ff fe5c 	bl	80132dc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013624:	4809      	ldr	r0, [pc, #36]	; (801364c <mem_free+0x110>)
 8013626:	f00d f958 	bl	80208da <sys_mutex_unlock>
 801362a:	e000      	b.n	801362e <mem_free+0xf2>
    return;
 801362c:	bf00      	nop
}
 801362e:	3720      	adds	r7, #32
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}
 8013634:	08023550 	.word	0x08023550
 8013638:	08023640 	.word	0x08023640
 801363c:	08023598 	.word	0x08023598
 8013640:	200056a0 	.word	0x200056a0
 8013644:	200056a4 	.word	0x200056a4
 8013648:	08023664 	.word	0x08023664
 801364c:	200056a8 	.word	0x200056a8
 8013650:	08023680 	.word	0x08023680
 8013654:	080236a8 	.word	0x080236a8
 8013658:	200056ac 	.word	0x200056ac

0801365c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b088      	sub	sp, #32
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	460b      	mov	r3, r1
 8013666:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013668:	887b      	ldrh	r3, [r7, #2]
 801366a:	3303      	adds	r3, #3
 801366c:	b29b      	uxth	r3, r3
 801366e:	f023 0303 	bic.w	r3, r3, #3
 8013672:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013674:	8bfb      	ldrh	r3, [r7, #30]
 8013676:	2b0b      	cmp	r3, #11
 8013678:	d801      	bhi.n	801367e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801367a:	230c      	movs	r3, #12
 801367c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801367e:	8bfb      	ldrh	r3, [r7, #30]
 8013680:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013684:	d803      	bhi.n	801368e <mem_trim+0x32>
 8013686:	8bfa      	ldrh	r2, [r7, #30]
 8013688:	887b      	ldrh	r3, [r7, #2]
 801368a:	429a      	cmp	r2, r3
 801368c:	d201      	bcs.n	8013692 <mem_trim+0x36>
    return NULL;
 801368e:	2300      	movs	r3, #0
 8013690:	e0d8      	b.n	8013844 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013692:	4b6e      	ldr	r3, [pc, #440]	; (801384c <mem_trim+0x1f0>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	687a      	ldr	r2, [r7, #4]
 8013698:	429a      	cmp	r2, r3
 801369a:	d304      	bcc.n	80136a6 <mem_trim+0x4a>
 801369c:	4b6c      	ldr	r3, [pc, #432]	; (8013850 <mem_trim+0x1f4>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	429a      	cmp	r2, r3
 80136a4:	d306      	bcc.n	80136b4 <mem_trim+0x58>
 80136a6:	4b6b      	ldr	r3, [pc, #428]	; (8013854 <mem_trim+0x1f8>)
 80136a8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80136ac:	496a      	ldr	r1, [pc, #424]	; (8013858 <mem_trim+0x1fc>)
 80136ae:	486b      	ldr	r0, [pc, #428]	; (801385c <mem_trim+0x200>)
 80136b0:	f00d fb8c 	bl	8020dcc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80136b4:	4b65      	ldr	r3, [pc, #404]	; (801384c <mem_trim+0x1f0>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	687a      	ldr	r2, [r7, #4]
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d304      	bcc.n	80136c8 <mem_trim+0x6c>
 80136be:	4b64      	ldr	r3, [pc, #400]	; (8013850 <mem_trim+0x1f4>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d307      	bcc.n	80136d8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80136c8:	f00d f934 	bl	8020934 <sys_arch_protect>
 80136cc:	60b8      	str	r0, [r7, #8]
 80136ce:	68b8      	ldr	r0, [r7, #8]
 80136d0:	f00d f93e 	bl	8020950 <sys_arch_unprotect>
    return rmem;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	e0b5      	b.n	8013844 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	3b08      	subs	r3, #8
 80136dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80136de:	69b8      	ldr	r0, [r7, #24]
 80136e0:	f7ff fdea 	bl	80132b8 <mem_to_ptr>
 80136e4:	4603      	mov	r3, r0
 80136e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80136e8:	69bb      	ldr	r3, [r7, #24]
 80136ea:	881a      	ldrh	r2, [r3, #0]
 80136ec:	8afb      	ldrh	r3, [r7, #22]
 80136ee:	1ad3      	subs	r3, r2, r3
 80136f0:	b29b      	uxth	r3, r3
 80136f2:	3b08      	subs	r3, #8
 80136f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80136f6:	8bfa      	ldrh	r2, [r7, #30]
 80136f8:	8abb      	ldrh	r3, [r7, #20]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d906      	bls.n	801370c <mem_trim+0xb0>
 80136fe:	4b55      	ldr	r3, [pc, #340]	; (8013854 <mem_trim+0x1f8>)
 8013700:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8013704:	4956      	ldr	r1, [pc, #344]	; (8013860 <mem_trim+0x204>)
 8013706:	4855      	ldr	r0, [pc, #340]	; (801385c <mem_trim+0x200>)
 8013708:	f00d fb60 	bl	8020dcc <iprintf>
  if (newsize > size) {
 801370c:	8bfa      	ldrh	r2, [r7, #30]
 801370e:	8abb      	ldrh	r3, [r7, #20]
 8013710:	429a      	cmp	r2, r3
 8013712:	d901      	bls.n	8013718 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8013714:	2300      	movs	r3, #0
 8013716:	e095      	b.n	8013844 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8013718:	8bfa      	ldrh	r2, [r7, #30]
 801371a:	8abb      	ldrh	r3, [r7, #20]
 801371c:	429a      	cmp	r2, r3
 801371e:	d101      	bne.n	8013724 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	e08f      	b.n	8013844 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013724:	484f      	ldr	r0, [pc, #316]	; (8013864 <mem_trim+0x208>)
 8013726:	f00d f8c9 	bl	80208bc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801372a:	69bb      	ldr	r3, [r7, #24]
 801372c:	881b      	ldrh	r3, [r3, #0]
 801372e:	4618      	mov	r0, r3
 8013730:	f7ff fdb0 	bl	8013294 <ptr_to_mem>
 8013734:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	791b      	ldrb	r3, [r3, #4]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d13f      	bne.n	80137be <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	881b      	ldrh	r3, [r3, #0]
 8013742:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013746:	d106      	bne.n	8013756 <mem_trim+0xfa>
 8013748:	4b42      	ldr	r3, [pc, #264]	; (8013854 <mem_trim+0x1f8>)
 801374a:	f240 22f5 	movw	r2, #757	; 0x2f5
 801374e:	4946      	ldr	r1, [pc, #280]	; (8013868 <mem_trim+0x20c>)
 8013750:	4842      	ldr	r0, [pc, #264]	; (801385c <mem_trim+0x200>)
 8013752:	f00d fb3b 	bl	8020dcc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	881b      	ldrh	r3, [r3, #0]
 801375a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801375c:	8afa      	ldrh	r2, [r7, #22]
 801375e:	8bfb      	ldrh	r3, [r7, #30]
 8013760:	4413      	add	r3, r2
 8013762:	b29b      	uxth	r3, r3
 8013764:	3308      	adds	r3, #8
 8013766:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013768:	4b40      	ldr	r3, [pc, #256]	; (801386c <mem_trim+0x210>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	693a      	ldr	r2, [r7, #16]
 801376e:	429a      	cmp	r2, r3
 8013770:	d106      	bne.n	8013780 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8013772:	89fb      	ldrh	r3, [r7, #14]
 8013774:	4618      	mov	r0, r3
 8013776:	f7ff fd8d 	bl	8013294 <ptr_to_mem>
 801377a:	4603      	mov	r3, r0
 801377c:	4a3b      	ldr	r2, [pc, #236]	; (801386c <mem_trim+0x210>)
 801377e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013780:	89fb      	ldrh	r3, [r7, #14]
 8013782:	4618      	mov	r0, r3
 8013784:	f7ff fd86 	bl	8013294 <ptr_to_mem>
 8013788:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	2200      	movs	r2, #0
 801378e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	89ba      	ldrh	r2, [r7, #12]
 8013794:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	8afa      	ldrh	r2, [r7, #22]
 801379a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801379c:	69bb      	ldr	r3, [r7, #24]
 801379e:	89fa      	ldrh	r2, [r7, #14]
 80137a0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80137a2:	693b      	ldr	r3, [r7, #16]
 80137a4:	881b      	ldrh	r3, [r3, #0]
 80137a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80137aa:	d047      	beq.n	801383c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	881b      	ldrh	r3, [r3, #0]
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7ff fd6f 	bl	8013294 <ptr_to_mem>
 80137b6:	4602      	mov	r2, r0
 80137b8:	89fb      	ldrh	r3, [r7, #14]
 80137ba:	8053      	strh	r3, [r2, #2]
 80137bc:	e03e      	b.n	801383c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80137be:	8bfb      	ldrh	r3, [r7, #30]
 80137c0:	f103 0214 	add.w	r2, r3, #20
 80137c4:	8abb      	ldrh	r3, [r7, #20]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d838      	bhi.n	801383c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80137ca:	8afa      	ldrh	r2, [r7, #22]
 80137cc:	8bfb      	ldrh	r3, [r7, #30]
 80137ce:	4413      	add	r3, r2
 80137d0:	b29b      	uxth	r3, r3
 80137d2:	3308      	adds	r3, #8
 80137d4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80137d6:	69bb      	ldr	r3, [r7, #24]
 80137d8:	881b      	ldrh	r3, [r3, #0]
 80137da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80137de:	d106      	bne.n	80137ee <mem_trim+0x192>
 80137e0:	4b1c      	ldr	r3, [pc, #112]	; (8013854 <mem_trim+0x1f8>)
 80137e2:	f240 3216 	movw	r2, #790	; 0x316
 80137e6:	4920      	ldr	r1, [pc, #128]	; (8013868 <mem_trim+0x20c>)
 80137e8:	481c      	ldr	r0, [pc, #112]	; (801385c <mem_trim+0x200>)
 80137ea:	f00d faef 	bl	8020dcc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80137ee:	89fb      	ldrh	r3, [r7, #14]
 80137f0:	4618      	mov	r0, r3
 80137f2:	f7ff fd4f 	bl	8013294 <ptr_to_mem>
 80137f6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80137f8:	4b1c      	ldr	r3, [pc, #112]	; (801386c <mem_trim+0x210>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	693a      	ldr	r2, [r7, #16]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d202      	bcs.n	8013808 <mem_trim+0x1ac>
      lfree = mem2;
 8013802:	4a1a      	ldr	r2, [pc, #104]	; (801386c <mem_trim+0x210>)
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	2200      	movs	r2, #0
 801380c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801380e:	69bb      	ldr	r3, [r7, #24]
 8013810:	881a      	ldrh	r2, [r3, #0]
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	8afa      	ldrh	r2, [r7, #22]
 801381a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	89fa      	ldrh	r2, [r7, #14]
 8013820:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	881b      	ldrh	r3, [r3, #0]
 8013826:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801382a:	d007      	beq.n	801383c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801382c:	693b      	ldr	r3, [r7, #16]
 801382e:	881b      	ldrh	r3, [r3, #0]
 8013830:	4618      	mov	r0, r3
 8013832:	f7ff fd2f 	bl	8013294 <ptr_to_mem>
 8013836:	4602      	mov	r2, r0
 8013838:	89fb      	ldrh	r3, [r7, #14]
 801383a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801383c:	4809      	ldr	r0, [pc, #36]	; (8013864 <mem_trim+0x208>)
 801383e:	f00d f84c 	bl	80208da <sys_mutex_unlock>
  return rmem;
 8013842:	687b      	ldr	r3, [r7, #4]
}
 8013844:	4618      	mov	r0, r3
 8013846:	3720      	adds	r7, #32
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}
 801384c:	200056a0 	.word	0x200056a0
 8013850:	200056a4 	.word	0x200056a4
 8013854:	08023550 	.word	0x08023550
 8013858:	080236dc 	.word	0x080236dc
 801385c:	08023598 	.word	0x08023598
 8013860:	080236f4 	.word	0x080236f4
 8013864:	200056a8 	.word	0x200056a8
 8013868:	08023714 	.word	0x08023714
 801386c:	200056ac 	.word	0x200056ac

08013870 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b088      	sub	sp, #32
 8013874:	af00      	add	r7, sp, #0
 8013876:	4603      	mov	r3, r0
 8013878:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801387a:	88fb      	ldrh	r3, [r7, #6]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d101      	bne.n	8013884 <mem_malloc+0x14>
    return NULL;
 8013880:	2300      	movs	r3, #0
 8013882:	e0e2      	b.n	8013a4a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013884:	88fb      	ldrh	r3, [r7, #6]
 8013886:	3303      	adds	r3, #3
 8013888:	b29b      	uxth	r3, r3
 801388a:	f023 0303 	bic.w	r3, r3, #3
 801388e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013890:	8bbb      	ldrh	r3, [r7, #28]
 8013892:	2b0b      	cmp	r3, #11
 8013894:	d801      	bhi.n	801389a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013896:	230c      	movs	r3, #12
 8013898:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801389a:	8bbb      	ldrh	r3, [r7, #28]
 801389c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80138a0:	d803      	bhi.n	80138aa <mem_malloc+0x3a>
 80138a2:	8bba      	ldrh	r2, [r7, #28]
 80138a4:	88fb      	ldrh	r3, [r7, #6]
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d201      	bcs.n	80138ae <mem_malloc+0x3e>
    return NULL;
 80138aa:	2300      	movs	r3, #0
 80138ac:	e0cd      	b.n	8013a4a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80138ae:	4869      	ldr	r0, [pc, #420]	; (8013a54 <mem_malloc+0x1e4>)
 80138b0:	f00d f804 	bl	80208bc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80138b4:	4b68      	ldr	r3, [pc, #416]	; (8013a58 <mem_malloc+0x1e8>)
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7ff fcfd 	bl	80132b8 <mem_to_ptr>
 80138be:	4603      	mov	r3, r0
 80138c0:	83fb      	strh	r3, [r7, #30]
 80138c2:	e0b7      	b.n	8013a34 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80138c4:	8bfb      	ldrh	r3, [r7, #30]
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7ff fce4 	bl	8013294 <ptr_to_mem>
 80138cc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	791b      	ldrb	r3, [r3, #4]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	f040 80a7 	bne.w	8013a26 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	881b      	ldrh	r3, [r3, #0]
 80138dc:	461a      	mov	r2, r3
 80138de:	8bfb      	ldrh	r3, [r7, #30]
 80138e0:	1ad3      	subs	r3, r2, r3
 80138e2:	f1a3 0208 	sub.w	r2, r3, #8
 80138e6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80138e8:	429a      	cmp	r2, r3
 80138ea:	f0c0 809c 	bcc.w	8013a26 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	881b      	ldrh	r3, [r3, #0]
 80138f2:	461a      	mov	r2, r3
 80138f4:	8bfb      	ldrh	r3, [r7, #30]
 80138f6:	1ad3      	subs	r3, r2, r3
 80138f8:	f1a3 0208 	sub.w	r2, r3, #8
 80138fc:	8bbb      	ldrh	r3, [r7, #28]
 80138fe:	3314      	adds	r3, #20
 8013900:	429a      	cmp	r2, r3
 8013902:	d333      	bcc.n	801396c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013904:	8bfa      	ldrh	r2, [r7, #30]
 8013906:	8bbb      	ldrh	r3, [r7, #28]
 8013908:	4413      	add	r3, r2
 801390a:	b29b      	uxth	r3, r3
 801390c:	3308      	adds	r3, #8
 801390e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013910:	8a7b      	ldrh	r3, [r7, #18]
 8013912:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013916:	d106      	bne.n	8013926 <mem_malloc+0xb6>
 8013918:	4b50      	ldr	r3, [pc, #320]	; (8013a5c <mem_malloc+0x1ec>)
 801391a:	f240 3287 	movw	r2, #903	; 0x387
 801391e:	4950      	ldr	r1, [pc, #320]	; (8013a60 <mem_malloc+0x1f0>)
 8013920:	4850      	ldr	r0, [pc, #320]	; (8013a64 <mem_malloc+0x1f4>)
 8013922:	f00d fa53 	bl	8020dcc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013926:	8a7b      	ldrh	r3, [r7, #18]
 8013928:	4618      	mov	r0, r3
 801392a:	f7ff fcb3 	bl	8013294 <ptr_to_mem>
 801392e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	2200      	movs	r2, #0
 8013934:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	881a      	ldrh	r2, [r3, #0]
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	8bfa      	ldrh	r2, [r7, #30]
 8013942:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	8a7a      	ldrh	r2, [r7, #18]
 8013948:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	2201      	movs	r2, #1
 801394e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	881b      	ldrh	r3, [r3, #0]
 8013954:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013958:	d00b      	beq.n	8013972 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	881b      	ldrh	r3, [r3, #0]
 801395e:	4618      	mov	r0, r3
 8013960:	f7ff fc98 	bl	8013294 <ptr_to_mem>
 8013964:	4602      	mov	r2, r0
 8013966:	8a7b      	ldrh	r3, [r7, #18]
 8013968:	8053      	strh	r3, [r2, #2]
 801396a:	e002      	b.n	8013972 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	2201      	movs	r2, #1
 8013970:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013972:	4b39      	ldr	r3, [pc, #228]	; (8013a58 <mem_malloc+0x1e8>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	697a      	ldr	r2, [r7, #20]
 8013978:	429a      	cmp	r2, r3
 801397a:	d127      	bne.n	80139cc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801397c:	4b36      	ldr	r3, [pc, #216]	; (8013a58 <mem_malloc+0x1e8>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013982:	e005      	b.n	8013990 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013984:	69bb      	ldr	r3, [r7, #24]
 8013986:	881b      	ldrh	r3, [r3, #0]
 8013988:	4618      	mov	r0, r3
 801398a:	f7ff fc83 	bl	8013294 <ptr_to_mem>
 801398e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013990:	69bb      	ldr	r3, [r7, #24]
 8013992:	791b      	ldrb	r3, [r3, #4]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d004      	beq.n	80139a2 <mem_malloc+0x132>
 8013998:	4b33      	ldr	r3, [pc, #204]	; (8013a68 <mem_malloc+0x1f8>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	69ba      	ldr	r2, [r7, #24]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d1f0      	bne.n	8013984 <mem_malloc+0x114>
          }
          lfree = cur;
 80139a2:	4a2d      	ldr	r2, [pc, #180]	; (8013a58 <mem_malloc+0x1e8>)
 80139a4:	69bb      	ldr	r3, [r7, #24]
 80139a6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80139a8:	4b2b      	ldr	r3, [pc, #172]	; (8013a58 <mem_malloc+0x1e8>)
 80139aa:	681a      	ldr	r2, [r3, #0]
 80139ac:	4b2e      	ldr	r3, [pc, #184]	; (8013a68 <mem_malloc+0x1f8>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d00b      	beq.n	80139cc <mem_malloc+0x15c>
 80139b4:	4b28      	ldr	r3, [pc, #160]	; (8013a58 <mem_malloc+0x1e8>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	791b      	ldrb	r3, [r3, #4]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d006      	beq.n	80139cc <mem_malloc+0x15c>
 80139be:	4b27      	ldr	r3, [pc, #156]	; (8013a5c <mem_malloc+0x1ec>)
 80139c0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80139c4:	4929      	ldr	r1, [pc, #164]	; (8013a6c <mem_malloc+0x1fc>)
 80139c6:	4827      	ldr	r0, [pc, #156]	; (8013a64 <mem_malloc+0x1f4>)
 80139c8:	f00d fa00 	bl	8020dcc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80139cc:	4821      	ldr	r0, [pc, #132]	; (8013a54 <mem_malloc+0x1e4>)
 80139ce:	f00c ff84 	bl	80208da <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80139d2:	8bba      	ldrh	r2, [r7, #28]
 80139d4:	697b      	ldr	r3, [r7, #20]
 80139d6:	4413      	add	r3, r2
 80139d8:	3308      	adds	r3, #8
 80139da:	4a23      	ldr	r2, [pc, #140]	; (8013a68 <mem_malloc+0x1f8>)
 80139dc:	6812      	ldr	r2, [r2, #0]
 80139de:	4293      	cmp	r3, r2
 80139e0:	d906      	bls.n	80139f0 <mem_malloc+0x180>
 80139e2:	4b1e      	ldr	r3, [pc, #120]	; (8013a5c <mem_malloc+0x1ec>)
 80139e4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80139e8:	4921      	ldr	r1, [pc, #132]	; (8013a70 <mem_malloc+0x200>)
 80139ea:	481e      	ldr	r0, [pc, #120]	; (8013a64 <mem_malloc+0x1f4>)
 80139ec:	f00d f9ee 	bl	8020dcc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	f003 0303 	and.w	r3, r3, #3
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d006      	beq.n	8013a08 <mem_malloc+0x198>
 80139fa:	4b18      	ldr	r3, [pc, #96]	; (8013a5c <mem_malloc+0x1ec>)
 80139fc:	f240 32bb 	movw	r2, #955	; 0x3bb
 8013a00:	491c      	ldr	r1, [pc, #112]	; (8013a74 <mem_malloc+0x204>)
 8013a02:	4818      	ldr	r0, [pc, #96]	; (8013a64 <mem_malloc+0x1f4>)
 8013a04:	f00d f9e2 	bl	8020dcc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	f003 0303 	and.w	r3, r3, #3
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d006      	beq.n	8013a20 <mem_malloc+0x1b0>
 8013a12:	4b12      	ldr	r3, [pc, #72]	; (8013a5c <mem_malloc+0x1ec>)
 8013a14:	f240 32bd 	movw	r2, #957	; 0x3bd
 8013a18:	4917      	ldr	r1, [pc, #92]	; (8013a78 <mem_malloc+0x208>)
 8013a1a:	4812      	ldr	r0, [pc, #72]	; (8013a64 <mem_malloc+0x1f4>)
 8013a1c:	f00d f9d6 	bl	8020dcc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013a20:	697b      	ldr	r3, [r7, #20]
 8013a22:	3308      	adds	r3, #8
 8013a24:	e011      	b.n	8013a4a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013a26:	8bfb      	ldrh	r3, [r7, #30]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7ff fc33 	bl	8013294 <ptr_to_mem>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	881b      	ldrh	r3, [r3, #0]
 8013a32:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013a34:	8bfa      	ldrh	r2, [r7, #30]
 8013a36:	8bbb      	ldrh	r3, [r7, #28]
 8013a38:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	f4ff af41 	bcc.w	80138c4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013a42:	4804      	ldr	r0, [pc, #16]	; (8013a54 <mem_malloc+0x1e4>)
 8013a44:	f00c ff49 	bl	80208da <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013a48:	2300      	movs	r3, #0
}
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	3720      	adds	r7, #32
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}
 8013a52:	bf00      	nop
 8013a54:	200056a8 	.word	0x200056a8
 8013a58:	200056ac 	.word	0x200056ac
 8013a5c:	08023550 	.word	0x08023550
 8013a60:	08023714 	.word	0x08023714
 8013a64:	08023598 	.word	0x08023598
 8013a68:	200056a4 	.word	0x200056a4
 8013a6c:	08023728 	.word	0x08023728
 8013a70:	08023744 	.word	0x08023744
 8013a74:	08023774 	.word	0x08023774
 8013a78:	080237a4 	.word	0x080237a4

08013a7c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b085      	sub	sp, #20
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	689b      	ldr	r3, [r3, #8]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	685b      	ldr	r3, [r3, #4]
 8013a90:	3303      	adds	r3, #3
 8013a92:	f023 0303 	bic.w	r3, r3, #3
 8013a96:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013a98:	2300      	movs	r3, #0
 8013a9a:	60fb      	str	r3, [r7, #12]
 8013a9c:	e011      	b.n	8013ac2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	689b      	ldr	r3, [r3, #8]
 8013aa2:	681a      	ldr	r2, [r3, #0]
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	689b      	ldr	r3, [r3, #8]
 8013aac:	68ba      	ldr	r2, [r7, #8]
 8013aae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	881b      	ldrh	r3, [r3, #0]
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	68bb      	ldr	r3, [r7, #8]
 8013ab8:	4413      	add	r3, r2
 8013aba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	3301      	adds	r3, #1
 8013ac0:	60fb      	str	r3, [r7, #12]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	885b      	ldrh	r3, [r3, #2]
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	4293      	cmp	r3, r2
 8013acc:	dbe7      	blt.n	8013a9e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013ace:	bf00      	nop
 8013ad0:	bf00      	nop
 8013ad2:	3714      	adds	r7, #20
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr

08013adc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	80fb      	strh	r3, [r7, #6]
 8013ae6:	e009      	b.n	8013afc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013ae8:	88fb      	ldrh	r3, [r7, #6]
 8013aea:	4a08      	ldr	r2, [pc, #32]	; (8013b0c <memp_init+0x30>)
 8013aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013af0:	4618      	mov	r0, r3
 8013af2:	f7ff ffc3 	bl	8013a7c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013af6:	88fb      	ldrh	r3, [r7, #6]
 8013af8:	3301      	adds	r3, #1
 8013afa:	80fb      	strh	r3, [r7, #6]
 8013afc:	88fb      	ldrh	r3, [r7, #6]
 8013afe:	2b0d      	cmp	r3, #13
 8013b00:	d9f2      	bls.n	8013ae8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013b02:	bf00      	nop
 8013b04:	bf00      	nop
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	080265f4 	.word	0x080265f4

08013b10 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b084      	sub	sp, #16
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013b18:	f00c ff0c 	bl	8020934 <sys_arch_protect>
 8013b1c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	689b      	ldr	r3, [r3, #8]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d015      	beq.n	8013b58 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	689b      	ldr	r3, [r3, #8]
 8013b30:	68ba      	ldr	r2, [r7, #8]
 8013b32:	6812      	ldr	r2, [r2, #0]
 8013b34:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	f003 0303 	and.w	r3, r3, #3
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d006      	beq.n	8013b4e <do_memp_malloc_pool+0x3e>
 8013b40:	4b09      	ldr	r3, [pc, #36]	; (8013b68 <do_memp_malloc_pool+0x58>)
 8013b42:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013b46:	4909      	ldr	r1, [pc, #36]	; (8013b6c <do_memp_malloc_pool+0x5c>)
 8013b48:	4809      	ldr	r0, [pc, #36]	; (8013b70 <do_memp_malloc_pool+0x60>)
 8013b4a:	f00d f93f 	bl	8020dcc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013b4e:	68f8      	ldr	r0, [r7, #12]
 8013b50:	f00c fefe 	bl	8020950 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	e003      	b.n	8013b60 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013b58:	68f8      	ldr	r0, [r7, #12]
 8013b5a:	f00c fef9 	bl	8020950 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013b5e:	2300      	movs	r3, #0
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3710      	adds	r7, #16
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}
 8013b68:	080237c8 	.word	0x080237c8
 8013b6c:	080237f8 	.word	0x080237f8
 8013b70:	0802381c 	.word	0x0802381c

08013b74 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b084      	sub	sp, #16
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013b7e:	79fb      	ldrb	r3, [r7, #7]
 8013b80:	2b0d      	cmp	r3, #13
 8013b82:	d908      	bls.n	8013b96 <memp_malloc+0x22>
 8013b84:	4b0a      	ldr	r3, [pc, #40]	; (8013bb0 <memp_malloc+0x3c>)
 8013b86:	f240 1257 	movw	r2, #343	; 0x157
 8013b8a:	490a      	ldr	r1, [pc, #40]	; (8013bb4 <memp_malloc+0x40>)
 8013b8c:	480a      	ldr	r0, [pc, #40]	; (8013bb8 <memp_malloc+0x44>)
 8013b8e:	f00d f91d 	bl	8020dcc <iprintf>
 8013b92:	2300      	movs	r3, #0
 8013b94:	e008      	b.n	8013ba8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013b96:	79fb      	ldrb	r3, [r7, #7]
 8013b98:	4a08      	ldr	r2, [pc, #32]	; (8013bbc <memp_malloc+0x48>)
 8013b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7ff ffb6 	bl	8013b10 <do_memp_malloc_pool>
 8013ba4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3710      	adds	r7, #16
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}
 8013bb0:	080237c8 	.word	0x080237c8
 8013bb4:	08023858 	.word	0x08023858
 8013bb8:	0802381c 	.word	0x0802381c
 8013bbc:	080265f4 	.word	0x080265f4

08013bc0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b084      	sub	sp, #16
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	f003 0303 	and.w	r3, r3, #3
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d006      	beq.n	8013be2 <do_memp_free_pool+0x22>
 8013bd4:	4b0d      	ldr	r3, [pc, #52]	; (8013c0c <do_memp_free_pool+0x4c>)
 8013bd6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8013bda:	490d      	ldr	r1, [pc, #52]	; (8013c10 <do_memp_free_pool+0x50>)
 8013bdc:	480d      	ldr	r0, [pc, #52]	; (8013c14 <do_memp_free_pool+0x54>)
 8013bde:	f00d f8f5 	bl	8020dcc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013be6:	f00c fea5 	bl	8020934 <sys_arch_protect>
 8013bea:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	689b      	ldr	r3, [r3, #8]
 8013bf0:	681a      	ldr	r2, [r3, #0]
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	689b      	ldr	r3, [r3, #8]
 8013bfa:	68fa      	ldr	r2, [r7, #12]
 8013bfc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013bfe:	68b8      	ldr	r0, [r7, #8]
 8013c00:	f00c fea6 	bl	8020950 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013c04:	bf00      	nop
 8013c06:	3710      	adds	r7, #16
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}
 8013c0c:	080237c8 	.word	0x080237c8
 8013c10:	08023878 	.word	0x08023878
 8013c14:	0802381c 	.word	0x0802381c

08013c18 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	4603      	mov	r3, r0
 8013c20:	6039      	str	r1, [r7, #0]
 8013c22:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013c24:	79fb      	ldrb	r3, [r7, #7]
 8013c26:	2b0d      	cmp	r3, #13
 8013c28:	d907      	bls.n	8013c3a <memp_free+0x22>
 8013c2a:	4b0c      	ldr	r3, [pc, #48]	; (8013c5c <memp_free+0x44>)
 8013c2c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013c30:	490b      	ldr	r1, [pc, #44]	; (8013c60 <memp_free+0x48>)
 8013c32:	480c      	ldr	r0, [pc, #48]	; (8013c64 <memp_free+0x4c>)
 8013c34:	f00d f8ca 	bl	8020dcc <iprintf>
 8013c38:	e00c      	b.n	8013c54 <memp_free+0x3c>

  if (mem == NULL) {
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d008      	beq.n	8013c52 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013c40:	79fb      	ldrb	r3, [r7, #7]
 8013c42:	4a09      	ldr	r2, [pc, #36]	; (8013c68 <memp_free+0x50>)
 8013c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c48:	6839      	ldr	r1, [r7, #0]
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7ff ffb8 	bl	8013bc0 <do_memp_free_pool>
 8013c50:	e000      	b.n	8013c54 <memp_free+0x3c>
    return;
 8013c52:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013c54:	3708      	adds	r7, #8
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	080237c8 	.word	0x080237c8
 8013c60:	08023898 	.word	0x08023898
 8013c64:	0802381c 	.word	0x0802381c
 8013c68:	080265f4 	.word	0x080265f4

08013c6c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013c6c:	b480      	push	{r7}
 8013c6e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013c70:	bf00      	nop
 8013c72:	46bd      	mov	sp, r7
 8013c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c78:	4770      	bx	lr
	...

08013c7c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b086      	sub	sp, #24
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
 8013c88:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d108      	bne.n	8013ca2 <netif_add+0x26>
 8013c90:	4b5b      	ldr	r3, [pc, #364]	; (8013e00 <netif_add+0x184>)
 8013c92:	f240 1227 	movw	r2, #295	; 0x127
 8013c96:	495b      	ldr	r1, [pc, #364]	; (8013e04 <netif_add+0x188>)
 8013c98:	485b      	ldr	r0, [pc, #364]	; (8013e08 <netif_add+0x18c>)
 8013c9a:	f00d f897 	bl	8020dcc <iprintf>
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	e0a9      	b.n	8013df6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d108      	bne.n	8013cba <netif_add+0x3e>
 8013ca8:	4b55      	ldr	r3, [pc, #340]	; (8013e00 <netif_add+0x184>)
 8013caa:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013cae:	4957      	ldr	r1, [pc, #348]	; (8013e0c <netif_add+0x190>)
 8013cb0:	4855      	ldr	r0, [pc, #340]	; (8013e08 <netif_add+0x18c>)
 8013cb2:	f00d f88b 	bl	8020dcc <iprintf>
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	e09d      	b.n	8013df6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d101      	bne.n	8013cc4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013cc0:	4b53      	ldr	r3, [pc, #332]	; (8013e10 <netif_add+0x194>)
 8013cc2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d101      	bne.n	8013cce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013cca:	4b51      	ldr	r3, [pc, #324]	; (8013e10 <netif_add+0x194>)
 8013ccc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d101      	bne.n	8013cd8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013cd4:	4b4e      	ldr	r3, [pc, #312]	; (8013e10 <netif_add+0x194>)
 8013cd6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	4a49      	ldr	r2, [pc, #292]	; (8013e14 <netif_add+0x198>)
 8013cee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	3324      	adds	r3, #36	; 0x24
 8013d02:	2204      	movs	r2, #4
 8013d04:	2100      	movs	r1, #0
 8013d06:	4618      	mov	r0, r3
 8013d08:	f00c ff9e 	bl	8020c48 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	2200      	movs	r2, #0
 8013d10:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	6a3a      	ldr	r2, [r7, #32]
 8013d16:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013d18:	4b3f      	ldr	r3, [pc, #252]	; (8013e18 <netif_add+0x19c>)
 8013d1a:	781a      	ldrb	r2, [r3, #0]
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d26:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	687a      	ldr	r2, [r7, #4]
 8013d2c:	68b9      	ldr	r1, [r7, #8]
 8013d2e:	68f8      	ldr	r0, [r7, #12]
 8013d30:	f000 f914 	bl	8013f5c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d36:	68f8      	ldr	r0, [r7, #12]
 8013d38:	4798      	blx	r3
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d001      	beq.n	8013d44 <netif_add+0xc8>
    return NULL;
 8013d40:	2300      	movs	r3, #0
 8013d42:	e058      	b.n	8013df6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d4a:	2bff      	cmp	r3, #255	; 0xff
 8013d4c:	d103      	bne.n	8013d56 <netif_add+0xda>
        netif->num = 0;
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	2200      	movs	r2, #0
 8013d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8013d56:	2300      	movs	r3, #0
 8013d58:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013d5a:	4b30      	ldr	r3, [pc, #192]	; (8013e1c <netif_add+0x1a0>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	617b      	str	r3, [r7, #20]
 8013d60:	e02b      	b.n	8013dba <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013d62:	697a      	ldr	r2, [r7, #20]
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	429a      	cmp	r2, r3
 8013d68:	d106      	bne.n	8013d78 <netif_add+0xfc>
 8013d6a:	4b25      	ldr	r3, [pc, #148]	; (8013e00 <netif_add+0x184>)
 8013d6c:	f240 128b 	movw	r2, #395	; 0x18b
 8013d70:	492b      	ldr	r1, [pc, #172]	; (8013e20 <netif_add+0x1a4>)
 8013d72:	4825      	ldr	r0, [pc, #148]	; (8013e08 <netif_add+0x18c>)
 8013d74:	f00d f82a 	bl	8020dcc <iprintf>
        num_netifs++;
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	3301      	adds	r3, #1
 8013d7c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	2bff      	cmp	r3, #255	; 0xff
 8013d82:	dd06      	ble.n	8013d92 <netif_add+0x116>
 8013d84:	4b1e      	ldr	r3, [pc, #120]	; (8013e00 <netif_add+0x184>)
 8013d86:	f240 128d 	movw	r2, #397	; 0x18d
 8013d8a:	4926      	ldr	r1, [pc, #152]	; (8013e24 <netif_add+0x1a8>)
 8013d8c:	481e      	ldr	r0, [pc, #120]	; (8013e08 <netif_add+0x18c>)
 8013d8e:	f00d f81d 	bl	8020dcc <iprintf>
        if (netif2->num == netif->num) {
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d108      	bne.n	8013db4 <netif_add+0x138>
          netif->num++;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013da8:	3301      	adds	r3, #1
 8013daa:	b2da      	uxtb	r2, r3
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8013db2:	e005      	b.n	8013dc0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	617b      	str	r3, [r7, #20]
 8013dba:	697b      	ldr	r3, [r7, #20]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d1d0      	bne.n	8013d62 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8013dc0:	697b      	ldr	r3, [r7, #20]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d1be      	bne.n	8013d44 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013dcc:	2bfe      	cmp	r3, #254	; 0xfe
 8013dce:	d103      	bne.n	8013dd8 <netif_add+0x15c>
    netif_num = 0;
 8013dd0:	4b11      	ldr	r3, [pc, #68]	; (8013e18 <netif_add+0x19c>)
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	701a      	strb	r2, [r3, #0]
 8013dd6:	e006      	b.n	8013de6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013dde:	3301      	adds	r3, #1
 8013de0:	b2da      	uxtb	r2, r3
 8013de2:	4b0d      	ldr	r3, [pc, #52]	; (8013e18 <netif_add+0x19c>)
 8013de4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013de6:	4b0d      	ldr	r3, [pc, #52]	; (8013e1c <netif_add+0x1a0>)
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013dee:	4a0b      	ldr	r2, [pc, #44]	; (8013e1c <netif_add+0x1a0>)
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013df4:	68fb      	ldr	r3, [r7, #12]
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3718      	adds	r7, #24
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}
 8013dfe:	bf00      	nop
 8013e00:	080238b4 	.word	0x080238b4
 8013e04:	08023948 	.word	0x08023948
 8013e08:	08023904 	.word	0x08023904
 8013e0c:	08023964 	.word	0x08023964
 8013e10:	08026684 	.word	0x08026684
 8013e14:	0801423f 	.word	0x0801423f
 8013e18:	200056e8 	.word	0x200056e8
 8013e1c:	20016da0 	.word	0x20016da0
 8013e20:	08023988 	.word	0x08023988
 8013e24:	0802399c 	.word	0x0802399c

08013e28 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
 8013e30:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013e32:	6839      	ldr	r1, [r7, #0]
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f002 ff95 	bl	8016d64 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013e3a:	6839      	ldr	r1, [r7, #0]
 8013e3c:	6878      	ldr	r0, [r7, #4]
 8013e3e:	f008 f8c3 	bl	801bfc8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013e42:	bf00      	nop
 8013e44:	3708      	adds	r7, #8
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
	...

08013e4c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b086      	sub	sp, #24
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	60f8      	str	r0, [r7, #12]
 8013e54:	60b9      	str	r1, [r7, #8]
 8013e56:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d106      	bne.n	8013e6c <netif_do_set_ipaddr+0x20>
 8013e5e:	4b1d      	ldr	r3, [pc, #116]	; (8013ed4 <netif_do_set_ipaddr+0x88>)
 8013e60:	f240 12cb 	movw	r2, #459	; 0x1cb
 8013e64:	491c      	ldr	r1, [pc, #112]	; (8013ed8 <netif_do_set_ipaddr+0x8c>)
 8013e66:	481d      	ldr	r0, [pc, #116]	; (8013edc <netif_do_set_ipaddr+0x90>)
 8013e68:	f00c ffb0 	bl	8020dcc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d106      	bne.n	8013e80 <netif_do_set_ipaddr+0x34>
 8013e72:	4b18      	ldr	r3, [pc, #96]	; (8013ed4 <netif_do_set_ipaddr+0x88>)
 8013e74:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013e78:	4917      	ldr	r1, [pc, #92]	; (8013ed8 <netif_do_set_ipaddr+0x8c>)
 8013e7a:	4818      	ldr	r0, [pc, #96]	; (8013edc <netif_do_set_ipaddr+0x90>)
 8013e7c:	f00c ffa6 	bl	8020dcc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	681a      	ldr	r2, [r3, #0]
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	3304      	adds	r3, #4
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	d01c      	beq.n	8013ec8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	3304      	adds	r3, #4
 8013e98:	681a      	ldr	r2, [r3, #0]
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013e9e:	f107 0314 	add.w	r3, r7, #20
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f7ff ffbf 	bl	8013e28 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d002      	beq.n	8013eb6 <netif_do_set_ipaddr+0x6a>
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	e000      	b.n	8013eb8 <netif_do_set_ipaddr+0x6c>
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	68fa      	ldr	r2, [r7, #12]
 8013eba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013ebc:	2101      	movs	r1, #1
 8013ebe:	68f8      	ldr	r0, [r7, #12]
 8013ec0:	f000 f8d2 	bl	8014068 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	e000      	b.n	8013eca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013ec8:	2300      	movs	r3, #0
}
 8013eca:	4618      	mov	r0, r3
 8013ecc:	3718      	adds	r7, #24
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
 8013ed2:	bf00      	nop
 8013ed4:	080238b4 	.word	0x080238b4
 8013ed8:	080239cc 	.word	0x080239cc
 8013edc:	08023904 	.word	0x08023904

08013ee0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013ee0:	b480      	push	{r7}
 8013ee2:	b085      	sub	sp, #20
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	60f8      	str	r0, [r7, #12]
 8013ee8:	60b9      	str	r1, [r7, #8]
 8013eea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	681a      	ldr	r2, [r3, #0]
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	3308      	adds	r3, #8
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d00a      	beq.n	8013f10 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d002      	beq.n	8013f06 <netif_do_set_netmask+0x26>
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	e000      	b.n	8013f08 <netif_do_set_netmask+0x28>
 8013f06:	2300      	movs	r3, #0
 8013f08:	68fa      	ldr	r2, [r7, #12]
 8013f0a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	e000      	b.n	8013f12 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013f10:	2300      	movs	r3, #0
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	3714      	adds	r7, #20
 8013f16:	46bd      	mov	sp, r7
 8013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1c:	4770      	bx	lr

08013f1e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013f1e:	b480      	push	{r7}
 8013f20:	b085      	sub	sp, #20
 8013f22:	af00      	add	r7, sp, #0
 8013f24:	60f8      	str	r0, [r7, #12]
 8013f26:	60b9      	str	r1, [r7, #8]
 8013f28:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	330c      	adds	r3, #12
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d00a      	beq.n	8013f4e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d002      	beq.n	8013f44 <netif_do_set_gw+0x26>
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	e000      	b.n	8013f46 <netif_do_set_gw+0x28>
 8013f44:	2300      	movs	r3, #0
 8013f46:	68fa      	ldr	r2, [r7, #12]
 8013f48:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	e000      	b.n	8013f50 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013f4e:	2300      	movs	r3, #0
}
 8013f50:	4618      	mov	r0, r3
 8013f52:	3714      	adds	r7, #20
 8013f54:	46bd      	mov	sp, r7
 8013f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5a:	4770      	bx	lr

08013f5c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b088      	sub	sp, #32
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
 8013f68:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d101      	bne.n	8013f7c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013f78:	4b1c      	ldr	r3, [pc, #112]	; (8013fec <netif_set_addr+0x90>)
 8013f7a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d101      	bne.n	8013f86 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013f82:	4b1a      	ldr	r3, [pc, #104]	; (8013fec <netif_set_addr+0x90>)
 8013f84:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d101      	bne.n	8013f90 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013f8c:	4b17      	ldr	r3, [pc, #92]	; (8013fec <netif_set_addr+0x90>)
 8013f8e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d003      	beq.n	8013f9e <netif_set_addr+0x42>
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d101      	bne.n	8013fa2 <netif_set_addr+0x46>
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	e000      	b.n	8013fa4 <netif_set_addr+0x48>
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d006      	beq.n	8013fba <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013fac:	f107 0310 	add.w	r3, r7, #16
 8013fb0:	461a      	mov	r2, r3
 8013fb2:	68b9      	ldr	r1, [r7, #8]
 8013fb4:	68f8      	ldr	r0, [r7, #12]
 8013fb6:	f7ff ff49 	bl	8013e4c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013fba:	69fa      	ldr	r2, [r7, #28]
 8013fbc:	6879      	ldr	r1, [r7, #4]
 8013fbe:	68f8      	ldr	r0, [r7, #12]
 8013fc0:	f7ff ff8e 	bl	8013ee0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013fc4:	69ba      	ldr	r2, [r7, #24]
 8013fc6:	6839      	ldr	r1, [r7, #0]
 8013fc8:	68f8      	ldr	r0, [r7, #12]
 8013fca:	f7ff ffa8 	bl	8013f1e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d106      	bne.n	8013fe2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013fd4:	f107 0310 	add.w	r3, r7, #16
 8013fd8:	461a      	mov	r2, r3
 8013fda:	68b9      	ldr	r1, [r7, #8]
 8013fdc:	68f8      	ldr	r0, [r7, #12]
 8013fde:	f7ff ff35 	bl	8013e4c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013fe2:	bf00      	nop
 8013fe4:	3720      	adds	r7, #32
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
 8013fea:	bf00      	nop
 8013fec:	08026684 	.word	0x08026684

08013ff0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013ff0:	b480      	push	{r7}
 8013ff2:	b083      	sub	sp, #12
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013ff8:	4a04      	ldr	r2, [pc, #16]	; (801400c <netif_set_default+0x1c>)
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013ffe:	bf00      	nop
 8014000:	370c      	adds	r7, #12
 8014002:	46bd      	mov	sp, r7
 8014004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014008:	4770      	bx	lr
 801400a:	bf00      	nop
 801400c:	20016da4 	.word	0x20016da4

08014010 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d107      	bne.n	801402e <netif_set_up+0x1e>
 801401e:	4b0f      	ldr	r3, [pc, #60]	; (801405c <netif_set_up+0x4c>)
 8014020:	f44f 7254 	mov.w	r2, #848	; 0x350
 8014024:	490e      	ldr	r1, [pc, #56]	; (8014060 <netif_set_up+0x50>)
 8014026:	480f      	ldr	r0, [pc, #60]	; (8014064 <netif_set_up+0x54>)
 8014028:	f00c fed0 	bl	8020dcc <iprintf>
 801402c:	e013      	b.n	8014056 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014034:	f003 0301 	and.w	r3, r3, #1
 8014038:	2b00      	cmp	r3, #0
 801403a:	d10c      	bne.n	8014056 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014042:	f043 0301 	orr.w	r3, r3, #1
 8014046:	b2da      	uxtb	r2, r3
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801404e:	2103      	movs	r1, #3
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f000 f809 	bl	8014068 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8014056:	3708      	adds	r7, #8
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}
 801405c:	080238b4 	.word	0x080238b4
 8014060:	08023a3c 	.word	0x08023a3c
 8014064:	08023904 	.word	0x08023904

08014068 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b082      	sub	sp, #8
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
 8014070:	460b      	mov	r3, r1
 8014072:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d106      	bne.n	8014088 <netif_issue_reports+0x20>
 801407a:	4b18      	ldr	r3, [pc, #96]	; (80140dc <netif_issue_reports+0x74>)
 801407c:	f240 326d 	movw	r2, #877	; 0x36d
 8014080:	4917      	ldr	r1, [pc, #92]	; (80140e0 <netif_issue_reports+0x78>)
 8014082:	4818      	ldr	r0, [pc, #96]	; (80140e4 <netif_issue_reports+0x7c>)
 8014084:	f00c fea2 	bl	8020dcc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801408e:	f003 0304 	and.w	r3, r3, #4
 8014092:	2b00      	cmp	r3, #0
 8014094:	d01e      	beq.n	80140d4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801409c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d017      	beq.n	80140d4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80140a4:	78fb      	ldrb	r3, [r7, #3]
 80140a6:	f003 0301 	and.w	r3, r3, #1
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d013      	beq.n	80140d6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	3304      	adds	r3, #4
 80140b2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d00e      	beq.n	80140d6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80140be:	f003 0308 	and.w	r3, r3, #8
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d007      	beq.n	80140d6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	3304      	adds	r3, #4
 80140ca:	4619      	mov	r1, r3
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f00a fdcb 	bl	801ec68 <etharp_request>
 80140d2:	e000      	b.n	80140d6 <netif_issue_reports+0x6e>
    return;
 80140d4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80140d6:	3708      	adds	r7, #8
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	080238b4 	.word	0x080238b4
 80140e0:	08023a58 	.word	0x08023a58
 80140e4:	08023904 	.word	0x08023904

080140e8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b082      	sub	sp, #8
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d107      	bne.n	8014106 <netif_set_down+0x1e>
 80140f6:	4b12      	ldr	r3, [pc, #72]	; (8014140 <netif_set_down+0x58>)
 80140f8:	f240 329b 	movw	r2, #923	; 0x39b
 80140fc:	4911      	ldr	r1, [pc, #68]	; (8014144 <netif_set_down+0x5c>)
 80140fe:	4812      	ldr	r0, [pc, #72]	; (8014148 <netif_set_down+0x60>)
 8014100:	f00c fe64 	bl	8020dcc <iprintf>
 8014104:	e019      	b.n	801413a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801410c:	f003 0301 	and.w	r3, r3, #1
 8014110:	2b00      	cmp	r3, #0
 8014112:	d012      	beq.n	801413a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801411a:	f023 0301 	bic.w	r3, r3, #1
 801411e:	b2da      	uxtb	r2, r3
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801412c:	f003 0308 	and.w	r3, r3, #8
 8014130:	2b00      	cmp	r3, #0
 8014132:	d002      	beq.n	801413a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f00a f951 	bl	801e3dc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801413a:	3708      	adds	r7, #8
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}
 8014140:	080238b4 	.word	0x080238b4
 8014144:	08023a7c 	.word	0x08023a7c
 8014148:	08023904 	.word	0x08023904

0801414c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d107      	bne.n	801416a <netif_set_link_up+0x1e>
 801415a:	4b15      	ldr	r3, [pc, #84]	; (80141b0 <netif_set_link_up+0x64>)
 801415c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8014160:	4914      	ldr	r1, [pc, #80]	; (80141b4 <netif_set_link_up+0x68>)
 8014162:	4815      	ldr	r0, [pc, #84]	; (80141b8 <netif_set_link_up+0x6c>)
 8014164:	f00c fe32 	bl	8020dcc <iprintf>
 8014168:	e01e      	b.n	80141a8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014170:	f003 0304 	and.w	r3, r3, #4
 8014174:	2b00      	cmp	r3, #0
 8014176:	d117      	bne.n	80141a8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801417e:	f043 0304 	orr.w	r3, r3, #4
 8014182:	b2da      	uxtb	r2, r3
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f008 fb66 	bl	801c85c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014190:	2103      	movs	r1, #3
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f7ff ff68 	bl	8014068 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	69db      	ldr	r3, [r3, #28]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d003      	beq.n	80141a8 <netif_set_link_up+0x5c>
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	69db      	ldr	r3, [r3, #28]
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80141a8:	3708      	adds	r7, #8
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
 80141ae:	bf00      	nop
 80141b0:	080238b4 	.word	0x080238b4
 80141b4:	08023a9c 	.word	0x08023a9c
 80141b8:	08023904 	.word	0x08023904

080141bc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d107      	bne.n	80141da <netif_set_link_down+0x1e>
 80141ca:	4b11      	ldr	r3, [pc, #68]	; (8014210 <netif_set_link_down+0x54>)
 80141cc:	f240 4206 	movw	r2, #1030	; 0x406
 80141d0:	4910      	ldr	r1, [pc, #64]	; (8014214 <netif_set_link_down+0x58>)
 80141d2:	4811      	ldr	r0, [pc, #68]	; (8014218 <netif_set_link_down+0x5c>)
 80141d4:	f00c fdfa 	bl	8020dcc <iprintf>
 80141d8:	e017      	b.n	801420a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141e0:	f003 0304 	and.w	r3, r3, #4
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d010      	beq.n	801420a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141ee:	f023 0304 	bic.w	r3, r3, #4
 80141f2:	b2da      	uxtb	r2, r3
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	69db      	ldr	r3, [r3, #28]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d003      	beq.n	801420a <netif_set_link_down+0x4e>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	69db      	ldr	r3, [r3, #28]
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801420a:	3708      	adds	r7, #8
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}
 8014210:	080238b4 	.word	0x080238b4
 8014214:	08023ac0 	.word	0x08023ac0
 8014218:	08023904 	.word	0x08023904

0801421c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801421c:	b480      	push	{r7}
 801421e:	b083      	sub	sp, #12
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
 8014224:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d002      	beq.n	8014232 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	683a      	ldr	r2, [r7, #0]
 8014230:	61da      	str	r2, [r3, #28]
  }
}
 8014232:	bf00      	nop
 8014234:	370c      	adds	r7, #12
 8014236:	46bd      	mov	sp, r7
 8014238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423c:	4770      	bx	lr

0801423e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801423e:	b480      	push	{r7}
 8014240:	b085      	sub	sp, #20
 8014242:	af00      	add	r7, sp, #0
 8014244:	60f8      	str	r0, [r7, #12]
 8014246:	60b9      	str	r1, [r7, #8]
 8014248:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801424a:	f06f 030b 	mvn.w	r3, #11
}
 801424e:	4618      	mov	r0, r3
 8014250:	3714      	adds	r7, #20
 8014252:	46bd      	mov	sp, r7
 8014254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014258:	4770      	bx	lr
	...

0801425c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801425c:	b480      	push	{r7}
 801425e:	b085      	sub	sp, #20
 8014260:	af00      	add	r7, sp, #0
 8014262:	4603      	mov	r3, r0
 8014264:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014266:	79fb      	ldrb	r3, [r7, #7]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d013      	beq.n	8014294 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801426c:	4b0d      	ldr	r3, [pc, #52]	; (80142a4 <netif_get_by_index+0x48>)
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	60fb      	str	r3, [r7, #12]
 8014272:	e00c      	b.n	801428e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801427a:	3301      	adds	r3, #1
 801427c:	b2db      	uxtb	r3, r3
 801427e:	79fa      	ldrb	r2, [r7, #7]
 8014280:	429a      	cmp	r2, r3
 8014282:	d101      	bne.n	8014288 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	e006      	b.n	8014296 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	60fb      	str	r3, [r7, #12]
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d1ef      	bne.n	8014274 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014294:	2300      	movs	r3, #0
}
 8014296:	4618      	mov	r0, r3
 8014298:	3714      	adds	r7, #20
 801429a:	46bd      	mov	sp, r7
 801429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a0:	4770      	bx	lr
 80142a2:	bf00      	nop
 80142a4:	20016da0 	.word	0x20016da0

080142a8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80142ae:	f00c fb41 	bl	8020934 <sys_arch_protect>
 80142b2:	6038      	str	r0, [r7, #0]
 80142b4:	4b0d      	ldr	r3, [pc, #52]	; (80142ec <pbuf_free_ooseq+0x44>)
 80142b6:	2200      	movs	r2, #0
 80142b8:	701a      	strb	r2, [r3, #0]
 80142ba:	6838      	ldr	r0, [r7, #0]
 80142bc:	f00c fb48 	bl	8020950 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80142c0:	4b0b      	ldr	r3, [pc, #44]	; (80142f0 <pbuf_free_ooseq+0x48>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	607b      	str	r3, [r7, #4]
 80142c6:	e00a      	b.n	80142de <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d003      	beq.n	80142d8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80142d0:	6878      	ldr	r0, [r7, #4]
 80142d2:	f002 fd85 	bl	8016de0 <tcp_free_ooseq>
      return;
 80142d6:	e005      	b.n	80142e4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	68db      	ldr	r3, [r3, #12]
 80142dc:	607b      	str	r3, [r7, #4]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d1f1      	bne.n	80142c8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80142e4:	3708      	adds	r7, #8
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	20016da8 	.word	0x20016da8
 80142f0:	20016db0 	.word	0x20016db0

080142f4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80142fc:	f7ff ffd4 	bl	80142a8 <pbuf_free_ooseq>
}
 8014300:	bf00      	nop
 8014302:	3708      	adds	r7, #8
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801430e:	f00c fb11 	bl	8020934 <sys_arch_protect>
 8014312:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014314:	4b0f      	ldr	r3, [pc, #60]	; (8014354 <pbuf_pool_is_empty+0x4c>)
 8014316:	781b      	ldrb	r3, [r3, #0]
 8014318:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801431a:	4b0e      	ldr	r3, [pc, #56]	; (8014354 <pbuf_pool_is_empty+0x4c>)
 801431c:	2201      	movs	r2, #1
 801431e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f00c fb15 	bl	8020950 <sys_arch_unprotect>

  if (!queued) {
 8014326:	78fb      	ldrb	r3, [r7, #3]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d10f      	bne.n	801434c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801432c:	2100      	movs	r1, #0
 801432e:	480a      	ldr	r0, [pc, #40]	; (8014358 <pbuf_pool_is_empty+0x50>)
 8014330:	f7fd fef4 	bl	801211c <tcpip_try_callback>
 8014334:	4603      	mov	r3, r0
 8014336:	2b00      	cmp	r3, #0
 8014338:	d008      	beq.n	801434c <pbuf_pool_is_empty+0x44>
 801433a:	f00c fafb 	bl	8020934 <sys_arch_protect>
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	4b04      	ldr	r3, [pc, #16]	; (8014354 <pbuf_pool_is_empty+0x4c>)
 8014342:	2200      	movs	r2, #0
 8014344:	701a      	strb	r2, [r3, #0]
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f00c fb02 	bl	8020950 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801434c:	bf00      	nop
 801434e:	3708      	adds	r7, #8
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}
 8014354:	20016da8 	.word	0x20016da8
 8014358:	080142f5 	.word	0x080142f5

0801435c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801435c:	b480      	push	{r7}
 801435e:	b085      	sub	sp, #20
 8014360:	af00      	add	r7, sp, #0
 8014362:	60f8      	str	r0, [r7, #12]
 8014364:	60b9      	str	r1, [r7, #8]
 8014366:	4611      	mov	r1, r2
 8014368:	461a      	mov	r2, r3
 801436a:	460b      	mov	r3, r1
 801436c:	80fb      	strh	r3, [r7, #6]
 801436e:	4613      	mov	r3, r2
 8014370:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	2200      	movs	r2, #0
 8014376:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	68ba      	ldr	r2, [r7, #8]
 801437c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	88fa      	ldrh	r2, [r7, #6]
 8014382:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	88ba      	ldrh	r2, [r7, #4]
 8014388:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801438a:	8b3b      	ldrh	r3, [r7, #24]
 801438c:	b2da      	uxtb	r2, r3
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	7f3a      	ldrb	r2, [r7, #28]
 8014396:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	2201      	movs	r2, #1
 801439c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	2200      	movs	r2, #0
 80143a2:	73da      	strb	r2, [r3, #15]
}
 80143a4:	bf00      	nop
 80143a6:	3714      	adds	r7, #20
 80143a8:	46bd      	mov	sp, r7
 80143aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ae:	4770      	bx	lr

080143b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b08c      	sub	sp, #48	; 0x30
 80143b4:	af02      	add	r7, sp, #8
 80143b6:	4603      	mov	r3, r0
 80143b8:	71fb      	strb	r3, [r7, #7]
 80143ba:	460b      	mov	r3, r1
 80143bc:	80bb      	strh	r3, [r7, #4]
 80143be:	4613      	mov	r3, r2
 80143c0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80143c2:	79fb      	ldrb	r3, [r7, #7]
 80143c4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80143c6:	887b      	ldrh	r3, [r7, #2]
 80143c8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80143cc:	d07f      	beq.n	80144ce <pbuf_alloc+0x11e>
 80143ce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80143d2:	f300 80c8 	bgt.w	8014566 <pbuf_alloc+0x1b6>
 80143d6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80143da:	d010      	beq.n	80143fe <pbuf_alloc+0x4e>
 80143dc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80143e0:	f300 80c1 	bgt.w	8014566 <pbuf_alloc+0x1b6>
 80143e4:	2b01      	cmp	r3, #1
 80143e6:	d002      	beq.n	80143ee <pbuf_alloc+0x3e>
 80143e8:	2b41      	cmp	r3, #65	; 0x41
 80143ea:	f040 80bc 	bne.w	8014566 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80143ee:	887a      	ldrh	r2, [r7, #2]
 80143f0:	88bb      	ldrh	r3, [r7, #4]
 80143f2:	4619      	mov	r1, r3
 80143f4:	2000      	movs	r0, #0
 80143f6:	f000 f8d1 	bl	801459c <pbuf_alloc_reference>
 80143fa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80143fc:	e0bd      	b.n	801457a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80143fe:	2300      	movs	r3, #0
 8014400:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8014402:	2300      	movs	r3, #0
 8014404:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014406:	88bb      	ldrh	r3, [r7, #4]
 8014408:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801440a:	200d      	movs	r0, #13
 801440c:	f7ff fbb2 	bl	8013b74 <memp_malloc>
 8014410:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d109      	bne.n	801442c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8014418:	f7ff ff76 	bl	8014308 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441e:	2b00      	cmp	r3, #0
 8014420:	d002      	beq.n	8014428 <pbuf_alloc+0x78>
            pbuf_free(p);
 8014422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014424:	f000 faa8 	bl	8014978 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014428:	2300      	movs	r3, #0
 801442a:	e0a7      	b.n	801457c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801442c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801442e:	3303      	adds	r3, #3
 8014430:	b29b      	uxth	r3, r3
 8014432:	f023 0303 	bic.w	r3, r3, #3
 8014436:	b29b      	uxth	r3, r3
 8014438:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801443c:	b29b      	uxth	r3, r3
 801443e:	8b7a      	ldrh	r2, [r7, #26]
 8014440:	4293      	cmp	r3, r2
 8014442:	bf28      	it	cs
 8014444:	4613      	movcs	r3, r2
 8014446:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801444a:	3310      	adds	r3, #16
 801444c:	693a      	ldr	r2, [r7, #16]
 801444e:	4413      	add	r3, r2
 8014450:	3303      	adds	r3, #3
 8014452:	f023 0303 	bic.w	r3, r3, #3
 8014456:	4618      	mov	r0, r3
 8014458:	89f9      	ldrh	r1, [r7, #14]
 801445a:	8b7a      	ldrh	r2, [r7, #26]
 801445c:	2300      	movs	r3, #0
 801445e:	9301      	str	r3, [sp, #4]
 8014460:	887b      	ldrh	r3, [r7, #2]
 8014462:	9300      	str	r3, [sp, #0]
 8014464:	460b      	mov	r3, r1
 8014466:	4601      	mov	r1, r0
 8014468:	6938      	ldr	r0, [r7, #16]
 801446a:	f7ff ff77 	bl	801435c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	f003 0303 	and.w	r3, r3, #3
 8014476:	2b00      	cmp	r3, #0
 8014478:	d006      	beq.n	8014488 <pbuf_alloc+0xd8>
 801447a:	4b42      	ldr	r3, [pc, #264]	; (8014584 <pbuf_alloc+0x1d4>)
 801447c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014480:	4941      	ldr	r1, [pc, #260]	; (8014588 <pbuf_alloc+0x1d8>)
 8014482:	4842      	ldr	r0, [pc, #264]	; (801458c <pbuf_alloc+0x1dc>)
 8014484:	f00c fca2 	bl	8020dcc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014488:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801448a:	3303      	adds	r3, #3
 801448c:	f023 0303 	bic.w	r3, r3, #3
 8014490:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8014494:	d106      	bne.n	80144a4 <pbuf_alloc+0xf4>
 8014496:	4b3b      	ldr	r3, [pc, #236]	; (8014584 <pbuf_alloc+0x1d4>)
 8014498:	f44f 7281 	mov.w	r2, #258	; 0x102
 801449c:	493c      	ldr	r1, [pc, #240]	; (8014590 <pbuf_alloc+0x1e0>)
 801449e:	483b      	ldr	r0, [pc, #236]	; (801458c <pbuf_alloc+0x1dc>)
 80144a0:	f00c fc94 	bl	8020dcc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80144a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d102      	bne.n	80144b0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80144aa:	693b      	ldr	r3, [r7, #16]
 80144ac:	627b      	str	r3, [r7, #36]	; 0x24
 80144ae:	e002      	b.n	80144b6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	693a      	ldr	r2, [r7, #16]
 80144b4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80144ba:	8b7a      	ldrh	r2, [r7, #26]
 80144bc:	89fb      	ldrh	r3, [r7, #14]
 80144be:	1ad3      	subs	r3, r2, r3
 80144c0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80144c2:	2300      	movs	r3, #0
 80144c4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80144c6:	8b7b      	ldrh	r3, [r7, #26]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d19e      	bne.n	801440a <pbuf_alloc+0x5a>
      break;
 80144cc:	e055      	b.n	801457a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80144ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144d0:	3303      	adds	r3, #3
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	f023 0303 	bic.w	r3, r3, #3
 80144d8:	b29a      	uxth	r2, r3
 80144da:	88bb      	ldrh	r3, [r7, #4]
 80144dc:	3303      	adds	r3, #3
 80144de:	b29b      	uxth	r3, r3
 80144e0:	f023 0303 	bic.w	r3, r3, #3
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	4413      	add	r3, r2
 80144e8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80144ea:	8b3b      	ldrh	r3, [r7, #24]
 80144ec:	3310      	adds	r3, #16
 80144ee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80144f0:	8b3a      	ldrh	r2, [r7, #24]
 80144f2:	88bb      	ldrh	r3, [r7, #4]
 80144f4:	3303      	adds	r3, #3
 80144f6:	f023 0303 	bic.w	r3, r3, #3
 80144fa:	429a      	cmp	r2, r3
 80144fc:	d306      	bcc.n	801450c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80144fe:	8afa      	ldrh	r2, [r7, #22]
 8014500:	88bb      	ldrh	r3, [r7, #4]
 8014502:	3303      	adds	r3, #3
 8014504:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014508:	429a      	cmp	r2, r3
 801450a:	d201      	bcs.n	8014510 <pbuf_alloc+0x160>
        return NULL;
 801450c:	2300      	movs	r3, #0
 801450e:	e035      	b.n	801457c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014510:	8afb      	ldrh	r3, [r7, #22]
 8014512:	4618      	mov	r0, r3
 8014514:	f7ff f9ac 	bl	8013870 <mem_malloc>
 8014518:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801451c:	2b00      	cmp	r3, #0
 801451e:	d101      	bne.n	8014524 <pbuf_alloc+0x174>
        return NULL;
 8014520:	2300      	movs	r3, #0
 8014522:	e02b      	b.n	801457c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014524:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014526:	3310      	adds	r3, #16
 8014528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801452a:	4413      	add	r3, r2
 801452c:	3303      	adds	r3, #3
 801452e:	f023 0303 	bic.w	r3, r3, #3
 8014532:	4618      	mov	r0, r3
 8014534:	88b9      	ldrh	r1, [r7, #4]
 8014536:	88ba      	ldrh	r2, [r7, #4]
 8014538:	2300      	movs	r3, #0
 801453a:	9301      	str	r3, [sp, #4]
 801453c:	887b      	ldrh	r3, [r7, #2]
 801453e:	9300      	str	r3, [sp, #0]
 8014540:	460b      	mov	r3, r1
 8014542:	4601      	mov	r1, r0
 8014544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014546:	f7ff ff09 	bl	801435c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	f003 0303 	and.w	r3, r3, #3
 8014552:	2b00      	cmp	r3, #0
 8014554:	d010      	beq.n	8014578 <pbuf_alloc+0x1c8>
 8014556:	4b0b      	ldr	r3, [pc, #44]	; (8014584 <pbuf_alloc+0x1d4>)
 8014558:	f44f 7291 	mov.w	r2, #290	; 0x122
 801455c:	490d      	ldr	r1, [pc, #52]	; (8014594 <pbuf_alloc+0x1e4>)
 801455e:	480b      	ldr	r0, [pc, #44]	; (801458c <pbuf_alloc+0x1dc>)
 8014560:	f00c fc34 	bl	8020dcc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014564:	e008      	b.n	8014578 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014566:	4b07      	ldr	r3, [pc, #28]	; (8014584 <pbuf_alloc+0x1d4>)
 8014568:	f240 1227 	movw	r2, #295	; 0x127
 801456c:	490a      	ldr	r1, [pc, #40]	; (8014598 <pbuf_alloc+0x1e8>)
 801456e:	4807      	ldr	r0, [pc, #28]	; (801458c <pbuf_alloc+0x1dc>)
 8014570:	f00c fc2c 	bl	8020dcc <iprintf>
      return NULL;
 8014574:	2300      	movs	r3, #0
 8014576:	e001      	b.n	801457c <pbuf_alloc+0x1cc>
      break;
 8014578:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801457c:	4618      	mov	r0, r3
 801457e:	3728      	adds	r7, #40	; 0x28
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}
 8014584:	08023ae4 	.word	0x08023ae4
 8014588:	08023b14 	.word	0x08023b14
 801458c:	08023b44 	.word	0x08023b44
 8014590:	08023b6c 	.word	0x08023b6c
 8014594:	08023ba0 	.word	0x08023ba0
 8014598:	08023bcc 	.word	0x08023bcc

0801459c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b086      	sub	sp, #24
 80145a0:	af02      	add	r7, sp, #8
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	460b      	mov	r3, r1
 80145a6:	807b      	strh	r3, [r7, #2]
 80145a8:	4613      	mov	r3, r2
 80145aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80145ac:	883b      	ldrh	r3, [r7, #0]
 80145ae:	2b41      	cmp	r3, #65	; 0x41
 80145b0:	d009      	beq.n	80145c6 <pbuf_alloc_reference+0x2a>
 80145b2:	883b      	ldrh	r3, [r7, #0]
 80145b4:	2b01      	cmp	r3, #1
 80145b6:	d006      	beq.n	80145c6 <pbuf_alloc_reference+0x2a>
 80145b8:	4b0f      	ldr	r3, [pc, #60]	; (80145f8 <pbuf_alloc_reference+0x5c>)
 80145ba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80145be:	490f      	ldr	r1, [pc, #60]	; (80145fc <pbuf_alloc_reference+0x60>)
 80145c0:	480f      	ldr	r0, [pc, #60]	; (8014600 <pbuf_alloc_reference+0x64>)
 80145c2:	f00c fc03 	bl	8020dcc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80145c6:	200c      	movs	r0, #12
 80145c8:	f7ff fad4 	bl	8013b74 <memp_malloc>
 80145cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d101      	bne.n	80145d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80145d4:	2300      	movs	r3, #0
 80145d6:	e00b      	b.n	80145f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80145d8:	8879      	ldrh	r1, [r7, #2]
 80145da:	887a      	ldrh	r2, [r7, #2]
 80145dc:	2300      	movs	r3, #0
 80145de:	9301      	str	r3, [sp, #4]
 80145e0:	883b      	ldrh	r3, [r7, #0]
 80145e2:	9300      	str	r3, [sp, #0]
 80145e4:	460b      	mov	r3, r1
 80145e6:	6879      	ldr	r1, [r7, #4]
 80145e8:	68f8      	ldr	r0, [r7, #12]
 80145ea:	f7ff feb7 	bl	801435c <pbuf_init_alloced_pbuf>
  return p;
 80145ee:	68fb      	ldr	r3, [r7, #12]
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3710      	adds	r7, #16
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}
 80145f8:	08023ae4 	.word	0x08023ae4
 80145fc:	08023be8 	.word	0x08023be8
 8014600:	08023b44 	.word	0x08023b44

08014604 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b088      	sub	sp, #32
 8014608:	af02      	add	r7, sp, #8
 801460a:	607b      	str	r3, [r7, #4]
 801460c:	4603      	mov	r3, r0
 801460e:	73fb      	strb	r3, [r7, #15]
 8014610:	460b      	mov	r3, r1
 8014612:	81bb      	strh	r3, [r7, #12]
 8014614:	4613      	mov	r3, r2
 8014616:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014618:	7bfb      	ldrb	r3, [r7, #15]
 801461a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801461c:	8a7b      	ldrh	r3, [r7, #18]
 801461e:	3303      	adds	r3, #3
 8014620:	f023 0203 	bic.w	r2, r3, #3
 8014624:	89bb      	ldrh	r3, [r7, #12]
 8014626:	441a      	add	r2, r3
 8014628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801462a:	429a      	cmp	r2, r3
 801462c:	d901      	bls.n	8014632 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801462e:	2300      	movs	r3, #0
 8014630:	e018      	b.n	8014664 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014632:	6a3b      	ldr	r3, [r7, #32]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d007      	beq.n	8014648 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014638:	8a7b      	ldrh	r3, [r7, #18]
 801463a:	3303      	adds	r3, #3
 801463c:	f023 0303 	bic.w	r3, r3, #3
 8014640:	6a3a      	ldr	r2, [r7, #32]
 8014642:	4413      	add	r3, r2
 8014644:	617b      	str	r3, [r7, #20]
 8014646:	e001      	b.n	801464c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014648:	2300      	movs	r3, #0
 801464a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	89b9      	ldrh	r1, [r7, #12]
 8014650:	89ba      	ldrh	r2, [r7, #12]
 8014652:	2302      	movs	r3, #2
 8014654:	9301      	str	r3, [sp, #4]
 8014656:	897b      	ldrh	r3, [r7, #10]
 8014658:	9300      	str	r3, [sp, #0]
 801465a:	460b      	mov	r3, r1
 801465c:	6979      	ldr	r1, [r7, #20]
 801465e:	f7ff fe7d 	bl	801435c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014662:	687b      	ldr	r3, [r7, #4]
}
 8014664:	4618      	mov	r0, r3
 8014666:	3718      	adds	r7, #24
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b084      	sub	sp, #16
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
 8014674:	460b      	mov	r3, r1
 8014676:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d106      	bne.n	801468c <pbuf_realloc+0x20>
 801467e:	4b3a      	ldr	r3, [pc, #232]	; (8014768 <pbuf_realloc+0xfc>)
 8014680:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8014684:	4939      	ldr	r1, [pc, #228]	; (801476c <pbuf_realloc+0x100>)
 8014686:	483a      	ldr	r0, [pc, #232]	; (8014770 <pbuf_realloc+0x104>)
 8014688:	f00c fba0 	bl	8020dcc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	891b      	ldrh	r3, [r3, #8]
 8014690:	887a      	ldrh	r2, [r7, #2]
 8014692:	429a      	cmp	r2, r3
 8014694:	d263      	bcs.n	801475e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	891a      	ldrh	r2, [r3, #8]
 801469a:	887b      	ldrh	r3, [r7, #2]
 801469c:	1ad3      	subs	r3, r2, r3
 801469e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80146a0:	887b      	ldrh	r3, [r7, #2]
 80146a2:	817b      	strh	r3, [r7, #10]
  q = p;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80146a8:	e018      	b.n	80146dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	895b      	ldrh	r3, [r3, #10]
 80146ae:	897a      	ldrh	r2, [r7, #10]
 80146b0:	1ad3      	subs	r3, r2, r3
 80146b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	891a      	ldrh	r2, [r3, #8]
 80146b8:	893b      	ldrh	r3, [r7, #8]
 80146ba:	1ad3      	subs	r3, r2, r3
 80146bc:	b29a      	uxth	r2, r3
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d106      	bne.n	80146dc <pbuf_realloc+0x70>
 80146ce:	4b26      	ldr	r3, [pc, #152]	; (8014768 <pbuf_realloc+0xfc>)
 80146d0:	f240 12af 	movw	r2, #431	; 0x1af
 80146d4:	4927      	ldr	r1, [pc, #156]	; (8014774 <pbuf_realloc+0x108>)
 80146d6:	4826      	ldr	r0, [pc, #152]	; (8014770 <pbuf_realloc+0x104>)
 80146d8:	f00c fb78 	bl	8020dcc <iprintf>
  while (rem_len > q->len) {
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	895b      	ldrh	r3, [r3, #10]
 80146e0:	897a      	ldrh	r2, [r7, #10]
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d8e1      	bhi.n	80146aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	7b1b      	ldrb	r3, [r3, #12]
 80146ea:	f003 030f 	and.w	r3, r3, #15
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d121      	bne.n	8014736 <pbuf_realloc+0xca>
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	895b      	ldrh	r3, [r3, #10]
 80146f6:	897a      	ldrh	r2, [r7, #10]
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d01c      	beq.n	8014736 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	7b5b      	ldrb	r3, [r3, #13]
 8014700:	f003 0302 	and.w	r3, r3, #2
 8014704:	2b00      	cmp	r3, #0
 8014706:	d116      	bne.n	8014736 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	685a      	ldr	r2, [r3, #4]
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	1ad3      	subs	r3, r2, r3
 8014710:	b29a      	uxth	r2, r3
 8014712:	897b      	ldrh	r3, [r7, #10]
 8014714:	4413      	add	r3, r2
 8014716:	b29b      	uxth	r3, r3
 8014718:	4619      	mov	r1, r3
 801471a:	68f8      	ldr	r0, [r7, #12]
 801471c:	f7fe ff9e 	bl	801365c <mem_trim>
 8014720:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d106      	bne.n	8014736 <pbuf_realloc+0xca>
 8014728:	4b0f      	ldr	r3, [pc, #60]	; (8014768 <pbuf_realloc+0xfc>)
 801472a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801472e:	4912      	ldr	r1, [pc, #72]	; (8014778 <pbuf_realloc+0x10c>)
 8014730:	480f      	ldr	r0, [pc, #60]	; (8014770 <pbuf_realloc+0x104>)
 8014732:	f00c fb4b 	bl	8020dcc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	897a      	ldrh	r2, [r7, #10]
 801473a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	895a      	ldrh	r2, [r3, #10]
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d004      	beq.n	8014756 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	4618      	mov	r0, r3
 8014752:	f000 f911 	bl	8014978 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	2200      	movs	r2, #0
 801475a:	601a      	str	r2, [r3, #0]
 801475c:	e000      	b.n	8014760 <pbuf_realloc+0xf4>
    return;
 801475e:	bf00      	nop

}
 8014760:	3710      	adds	r7, #16
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	08023ae4 	.word	0x08023ae4
 801476c:	08023bfc 	.word	0x08023bfc
 8014770:	08023b44 	.word	0x08023b44
 8014774:	08023c14 	.word	0x08023c14
 8014778:	08023c2c 	.word	0x08023c2c

0801477c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b086      	sub	sp, #24
 8014780:	af00      	add	r7, sp, #0
 8014782:	60f8      	str	r0, [r7, #12]
 8014784:	60b9      	str	r1, [r7, #8]
 8014786:	4613      	mov	r3, r2
 8014788:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d106      	bne.n	801479e <pbuf_add_header_impl+0x22>
 8014790:	4b2b      	ldr	r3, [pc, #172]	; (8014840 <pbuf_add_header_impl+0xc4>)
 8014792:	f240 12df 	movw	r2, #479	; 0x1df
 8014796:	492b      	ldr	r1, [pc, #172]	; (8014844 <pbuf_add_header_impl+0xc8>)
 8014798:	482b      	ldr	r0, [pc, #172]	; (8014848 <pbuf_add_header_impl+0xcc>)
 801479a:	f00c fb17 	bl	8020dcc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d003      	beq.n	80147ac <pbuf_add_header_impl+0x30>
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80147aa:	d301      	bcc.n	80147b0 <pbuf_add_header_impl+0x34>
    return 1;
 80147ac:	2301      	movs	r3, #1
 80147ae:	e043      	b.n	8014838 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d101      	bne.n	80147ba <pbuf_add_header_impl+0x3e>
    return 0;
 80147b6:	2300      	movs	r3, #0
 80147b8:	e03e      	b.n	8014838 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	891a      	ldrh	r2, [r3, #8]
 80147c2:	8a7b      	ldrh	r3, [r7, #18]
 80147c4:	4413      	add	r3, r2
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	8a7a      	ldrh	r2, [r7, #18]
 80147ca:	429a      	cmp	r2, r3
 80147cc:	d901      	bls.n	80147d2 <pbuf_add_header_impl+0x56>
    return 1;
 80147ce:	2301      	movs	r3, #1
 80147d0:	e032      	b.n	8014838 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	7b1b      	ldrb	r3, [r3, #12]
 80147d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80147d8:	8a3b      	ldrh	r3, [r7, #16]
 80147da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d00c      	beq.n	80147fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	685a      	ldr	r2, [r3, #4]
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	425b      	negs	r3, r3
 80147ea:	4413      	add	r3, r2
 80147ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	3310      	adds	r3, #16
 80147f2:	697a      	ldr	r2, [r7, #20]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d20d      	bcs.n	8014814 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80147f8:	2301      	movs	r3, #1
 80147fa:	e01d      	b.n	8014838 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80147fc:	79fb      	ldrb	r3, [r7, #7]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d006      	beq.n	8014810 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	685a      	ldr	r2, [r3, #4]
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	425b      	negs	r3, r3
 801480a:	4413      	add	r3, r2
 801480c:	617b      	str	r3, [r7, #20]
 801480e:	e001      	b.n	8014814 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014810:	2301      	movs	r3, #1
 8014812:	e011      	b.n	8014838 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	697a      	ldr	r2, [r7, #20]
 8014818:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	895a      	ldrh	r2, [r3, #10]
 801481e:	8a7b      	ldrh	r3, [r7, #18]
 8014820:	4413      	add	r3, r2
 8014822:	b29a      	uxth	r2, r3
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	891a      	ldrh	r2, [r3, #8]
 801482c:	8a7b      	ldrh	r3, [r7, #18]
 801482e:	4413      	add	r3, r2
 8014830:	b29a      	uxth	r2, r3
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	811a      	strh	r2, [r3, #8]


  return 0;
 8014836:	2300      	movs	r3, #0
}
 8014838:	4618      	mov	r0, r3
 801483a:	3718      	adds	r7, #24
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}
 8014840:	08023ae4 	.word	0x08023ae4
 8014844:	08023c48 	.word	0x08023c48
 8014848:	08023b44 	.word	0x08023b44

0801484c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b082      	sub	sp, #8
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014856:	2200      	movs	r2, #0
 8014858:	6839      	ldr	r1, [r7, #0]
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f7ff ff8e 	bl	801477c <pbuf_add_header_impl>
 8014860:	4603      	mov	r3, r0
}
 8014862:	4618      	mov	r0, r3
 8014864:	3708      	adds	r7, #8
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
	...

0801486c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b084      	sub	sp, #16
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d106      	bne.n	801488a <pbuf_remove_header+0x1e>
 801487c:	4b20      	ldr	r3, [pc, #128]	; (8014900 <pbuf_remove_header+0x94>)
 801487e:	f240 224b 	movw	r2, #587	; 0x24b
 8014882:	4920      	ldr	r1, [pc, #128]	; (8014904 <pbuf_remove_header+0x98>)
 8014884:	4820      	ldr	r0, [pc, #128]	; (8014908 <pbuf_remove_header+0x9c>)
 8014886:	f00c faa1 	bl	8020dcc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d003      	beq.n	8014898 <pbuf_remove_header+0x2c>
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014896:	d301      	bcc.n	801489c <pbuf_remove_header+0x30>
    return 1;
 8014898:	2301      	movs	r3, #1
 801489a:	e02c      	b.n	80148f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d101      	bne.n	80148a6 <pbuf_remove_header+0x3a>
    return 0;
 80148a2:	2300      	movs	r3, #0
 80148a4:	e027      	b.n	80148f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	895b      	ldrh	r3, [r3, #10]
 80148ae:	89fa      	ldrh	r2, [r7, #14]
 80148b0:	429a      	cmp	r2, r3
 80148b2:	d908      	bls.n	80148c6 <pbuf_remove_header+0x5a>
 80148b4:	4b12      	ldr	r3, [pc, #72]	; (8014900 <pbuf_remove_header+0x94>)
 80148b6:	f240 2255 	movw	r2, #597	; 0x255
 80148ba:	4914      	ldr	r1, [pc, #80]	; (801490c <pbuf_remove_header+0xa0>)
 80148bc:	4812      	ldr	r0, [pc, #72]	; (8014908 <pbuf_remove_header+0x9c>)
 80148be:	f00c fa85 	bl	8020dcc <iprintf>
 80148c2:	2301      	movs	r3, #1
 80148c4:	e017      	b.n	80148f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	685b      	ldr	r3, [r3, #4]
 80148ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	685a      	ldr	r2, [r3, #4]
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	441a      	add	r2, r3
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	895a      	ldrh	r2, [r3, #10]
 80148dc:	89fb      	ldrh	r3, [r7, #14]
 80148de:	1ad3      	subs	r3, r2, r3
 80148e0:	b29a      	uxth	r2, r3
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	891a      	ldrh	r2, [r3, #8]
 80148ea:	89fb      	ldrh	r3, [r7, #14]
 80148ec:	1ad3      	subs	r3, r2, r3
 80148ee:	b29a      	uxth	r2, r3
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80148f4:	2300      	movs	r3, #0
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3710      	adds	r7, #16
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}
 80148fe:	bf00      	nop
 8014900:	08023ae4 	.word	0x08023ae4
 8014904:	08023c48 	.word	0x08023c48
 8014908:	08023b44 	.word	0x08023b44
 801490c:	08023c54 	.word	0x08023c54

08014910 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b082      	sub	sp, #8
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
 8014918:	460b      	mov	r3, r1
 801491a:	807b      	strh	r3, [r7, #2]
 801491c:	4613      	mov	r3, r2
 801491e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014920:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014924:	2b00      	cmp	r3, #0
 8014926:	da08      	bge.n	801493a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014928:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801492c:	425b      	negs	r3, r3
 801492e:	4619      	mov	r1, r3
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f7ff ff9b 	bl	801486c <pbuf_remove_header>
 8014936:	4603      	mov	r3, r0
 8014938:	e007      	b.n	801494a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801493a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801493e:	787a      	ldrb	r2, [r7, #1]
 8014940:	4619      	mov	r1, r3
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f7ff ff1a 	bl	801477c <pbuf_add_header_impl>
 8014948:	4603      	mov	r3, r0
  }
}
 801494a:	4618      	mov	r0, r3
 801494c:	3708      	adds	r7, #8
 801494e:	46bd      	mov	sp, r7
 8014950:	bd80      	pop	{r7, pc}

08014952 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014952:	b580      	push	{r7, lr}
 8014954:	b082      	sub	sp, #8
 8014956:	af00      	add	r7, sp, #0
 8014958:	6078      	str	r0, [r7, #4]
 801495a:	460b      	mov	r3, r1
 801495c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801495e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014962:	2201      	movs	r2, #1
 8014964:	4619      	mov	r1, r3
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f7ff ffd2 	bl	8014910 <pbuf_header_impl>
 801496c:	4603      	mov	r3, r0
}
 801496e:	4618      	mov	r0, r3
 8014970:	3708      	adds	r7, #8
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}
	...

08014978 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b088      	sub	sp, #32
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d10b      	bne.n	801499e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d106      	bne.n	801499a <pbuf_free+0x22>
 801498c:	4b3b      	ldr	r3, [pc, #236]	; (8014a7c <pbuf_free+0x104>)
 801498e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8014992:	493b      	ldr	r1, [pc, #236]	; (8014a80 <pbuf_free+0x108>)
 8014994:	483b      	ldr	r0, [pc, #236]	; (8014a84 <pbuf_free+0x10c>)
 8014996:	f00c fa19 	bl	8020dcc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801499a:	2300      	movs	r3, #0
 801499c:	e069      	b.n	8014a72 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801499e:	2300      	movs	r3, #0
 80149a0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80149a2:	e062      	b.n	8014a6a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80149a4:	f00b ffc6 	bl	8020934 <sys_arch_protect>
 80149a8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	7b9b      	ldrb	r3, [r3, #14]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d106      	bne.n	80149c0 <pbuf_free+0x48>
 80149b2:	4b32      	ldr	r3, [pc, #200]	; (8014a7c <pbuf_free+0x104>)
 80149b4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80149b8:	4933      	ldr	r1, [pc, #204]	; (8014a88 <pbuf_free+0x110>)
 80149ba:	4832      	ldr	r0, [pc, #200]	; (8014a84 <pbuf_free+0x10c>)
 80149bc:	f00c fa06 	bl	8020dcc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	7b9b      	ldrb	r3, [r3, #14]
 80149c4:	3b01      	subs	r3, #1
 80149c6:	b2da      	uxtb	r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	739a      	strb	r2, [r3, #14]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	7b9b      	ldrb	r3, [r3, #14]
 80149d0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80149d2:	69b8      	ldr	r0, [r7, #24]
 80149d4:	f00b ffbc 	bl	8020950 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80149d8:	7dfb      	ldrb	r3, [r7, #23]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d143      	bne.n	8014a66 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	7b1b      	ldrb	r3, [r3, #12]
 80149e8:	f003 030f 	and.w	r3, r3, #15
 80149ec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	7b5b      	ldrb	r3, [r3, #13]
 80149f2:	f003 0302 	and.w	r3, r3, #2
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d011      	beq.n	8014a1e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	691b      	ldr	r3, [r3, #16]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d106      	bne.n	8014a14 <pbuf_free+0x9c>
 8014a06:	4b1d      	ldr	r3, [pc, #116]	; (8014a7c <pbuf_free+0x104>)
 8014a08:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014a0c:	491f      	ldr	r1, [pc, #124]	; (8014a8c <pbuf_free+0x114>)
 8014a0e:	481d      	ldr	r0, [pc, #116]	; (8014a84 <pbuf_free+0x10c>)
 8014a10:	f00c f9dc 	bl	8020dcc <iprintf>
        pc->custom_free_function(p);
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	691b      	ldr	r3, [r3, #16]
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	4798      	blx	r3
 8014a1c:	e01d      	b.n	8014a5a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014a1e:	7bfb      	ldrb	r3, [r7, #15]
 8014a20:	2b02      	cmp	r3, #2
 8014a22:	d104      	bne.n	8014a2e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014a24:	6879      	ldr	r1, [r7, #4]
 8014a26:	200d      	movs	r0, #13
 8014a28:	f7ff f8f6 	bl	8013c18 <memp_free>
 8014a2c:	e015      	b.n	8014a5a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014a2e:	7bfb      	ldrb	r3, [r7, #15]
 8014a30:	2b01      	cmp	r3, #1
 8014a32:	d104      	bne.n	8014a3e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014a34:	6879      	ldr	r1, [r7, #4]
 8014a36:	200c      	movs	r0, #12
 8014a38:	f7ff f8ee 	bl	8013c18 <memp_free>
 8014a3c:	e00d      	b.n	8014a5a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014a3e:	7bfb      	ldrb	r3, [r7, #15]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d103      	bne.n	8014a4c <pbuf_free+0xd4>
          mem_free(p);
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7fe fd79 	bl	801353c <mem_free>
 8014a4a:	e006      	b.n	8014a5a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014a4c:	4b0b      	ldr	r3, [pc, #44]	; (8014a7c <pbuf_free+0x104>)
 8014a4e:	f240 320f 	movw	r2, #783	; 0x30f
 8014a52:	490f      	ldr	r1, [pc, #60]	; (8014a90 <pbuf_free+0x118>)
 8014a54:	480b      	ldr	r0, [pc, #44]	; (8014a84 <pbuf_free+0x10c>)
 8014a56:	f00c f9b9 	bl	8020dcc <iprintf>
        }
      }
      count++;
 8014a5a:	7ffb      	ldrb	r3, [r7, #31]
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014a60:	693b      	ldr	r3, [r7, #16]
 8014a62:	607b      	str	r3, [r7, #4]
 8014a64:	e001      	b.n	8014a6a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014a66:	2300      	movs	r3, #0
 8014a68:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d199      	bne.n	80149a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3720      	adds	r7, #32
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
 8014a7a:	bf00      	nop
 8014a7c:	08023ae4 	.word	0x08023ae4
 8014a80:	08023c48 	.word	0x08023c48
 8014a84:	08023b44 	.word	0x08023b44
 8014a88:	08023c74 	.word	0x08023c74
 8014a8c:	08023c8c 	.word	0x08023c8c
 8014a90:	08023cb0 	.word	0x08023cb0

08014a94 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014a94:	b480      	push	{r7}
 8014a96:	b085      	sub	sp, #20
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014aa0:	e005      	b.n	8014aae <pbuf_clen+0x1a>
    ++len;
 8014aa2:	89fb      	ldrh	r3, [r7, #14]
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d1f6      	bne.n	8014aa2 <pbuf_clen+0xe>
  }
  return len;
 8014ab4:	89fb      	ldrh	r3, [r7, #14]
}
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	3714      	adds	r7, #20
 8014aba:	46bd      	mov	sp, r7
 8014abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac0:	4770      	bx	lr
	...

08014ac4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d016      	beq.n	8014b00 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014ad2:	f00b ff2f 	bl	8020934 <sys_arch_protect>
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	7b9b      	ldrb	r3, [r3, #14]
 8014adc:	3301      	adds	r3, #1
 8014ade:	b2da      	uxtb	r2, r3
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	739a      	strb	r2, [r3, #14]
 8014ae4:	68f8      	ldr	r0, [r7, #12]
 8014ae6:	f00b ff33 	bl	8020950 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	7b9b      	ldrb	r3, [r3, #14]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d106      	bne.n	8014b00 <pbuf_ref+0x3c>
 8014af2:	4b05      	ldr	r3, [pc, #20]	; (8014b08 <pbuf_ref+0x44>)
 8014af4:	f240 3242 	movw	r2, #834	; 0x342
 8014af8:	4904      	ldr	r1, [pc, #16]	; (8014b0c <pbuf_ref+0x48>)
 8014afa:	4805      	ldr	r0, [pc, #20]	; (8014b10 <pbuf_ref+0x4c>)
 8014afc:	f00c f966 	bl	8020dcc <iprintf>
  }
}
 8014b00:	bf00      	nop
 8014b02:	3710      	adds	r7, #16
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}
 8014b08:	08023ae4 	.word	0x08023ae4
 8014b0c:	08023cc4 	.word	0x08023cc4
 8014b10:	08023b44 	.word	0x08023b44

08014b14 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b084      	sub	sp, #16
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d002      	beq.n	8014b2a <pbuf_cat+0x16>
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d107      	bne.n	8014b3a <pbuf_cat+0x26>
 8014b2a:	4b20      	ldr	r3, [pc, #128]	; (8014bac <pbuf_cat+0x98>)
 8014b2c:	f240 3259 	movw	r2, #857	; 0x359
 8014b30:	491f      	ldr	r1, [pc, #124]	; (8014bb0 <pbuf_cat+0x9c>)
 8014b32:	4820      	ldr	r0, [pc, #128]	; (8014bb4 <pbuf_cat+0xa0>)
 8014b34:	f00c f94a 	bl	8020dcc <iprintf>
 8014b38:	e034      	b.n	8014ba4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	60fb      	str	r3, [r7, #12]
 8014b3e:	e00a      	b.n	8014b56 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	891a      	ldrh	r2, [r3, #8]
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	891b      	ldrh	r3, [r3, #8]
 8014b48:	4413      	add	r3, r2
 8014b4a:	b29a      	uxth	r2, r3
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	60fb      	str	r3, [r7, #12]
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d1f0      	bne.n	8014b40 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	891a      	ldrh	r2, [r3, #8]
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	895b      	ldrh	r3, [r3, #10]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d006      	beq.n	8014b78 <pbuf_cat+0x64>
 8014b6a:	4b10      	ldr	r3, [pc, #64]	; (8014bac <pbuf_cat+0x98>)
 8014b6c:	f240 3262 	movw	r2, #866	; 0x362
 8014b70:	4911      	ldr	r1, [pc, #68]	; (8014bb8 <pbuf_cat+0xa4>)
 8014b72:	4810      	ldr	r0, [pc, #64]	; (8014bb4 <pbuf_cat+0xa0>)
 8014b74:	f00c f92a 	bl	8020dcc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d006      	beq.n	8014b8e <pbuf_cat+0x7a>
 8014b80:	4b0a      	ldr	r3, [pc, #40]	; (8014bac <pbuf_cat+0x98>)
 8014b82:	f240 3263 	movw	r2, #867	; 0x363
 8014b86:	490d      	ldr	r1, [pc, #52]	; (8014bbc <pbuf_cat+0xa8>)
 8014b88:	480a      	ldr	r0, [pc, #40]	; (8014bb4 <pbuf_cat+0xa0>)
 8014b8a:	f00c f91f 	bl	8020dcc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	891a      	ldrh	r2, [r3, #8]
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	891b      	ldrh	r3, [r3, #8]
 8014b96:	4413      	add	r3, r2
 8014b98:	b29a      	uxth	r2, r3
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	683a      	ldr	r2, [r7, #0]
 8014ba2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014ba4:	3710      	adds	r7, #16
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
 8014baa:	bf00      	nop
 8014bac:	08023ae4 	.word	0x08023ae4
 8014bb0:	08023cd8 	.word	0x08023cd8
 8014bb4:	08023b44 	.word	0x08023b44
 8014bb8:	08023d10 	.word	0x08023d10
 8014bbc:	08023d40 	.word	0x08023d40

08014bc0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b082      	sub	sp, #8
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014bca:	6839      	ldr	r1, [r7, #0]
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f7ff ffa1 	bl	8014b14 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014bd2:	6838      	ldr	r0, [r7, #0]
 8014bd4:	f7ff ff76 	bl	8014ac4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014bd8:	bf00      	nop
 8014bda:	3708      	adds	r7, #8
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b086      	sub	sp, #24
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014bea:	2300      	movs	r3, #0
 8014bec:	617b      	str	r3, [r7, #20]
 8014bee:	2300      	movs	r3, #0
 8014bf0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d008      	beq.n	8014c0a <pbuf_copy+0x2a>
 8014bf8:	683b      	ldr	r3, [r7, #0]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d005      	beq.n	8014c0a <pbuf_copy+0x2a>
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	891a      	ldrh	r2, [r3, #8]
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	891b      	ldrh	r3, [r3, #8]
 8014c06:	429a      	cmp	r2, r3
 8014c08:	d209      	bcs.n	8014c1e <pbuf_copy+0x3e>
 8014c0a:	4b57      	ldr	r3, [pc, #348]	; (8014d68 <pbuf_copy+0x188>)
 8014c0c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014c10:	4956      	ldr	r1, [pc, #344]	; (8014d6c <pbuf_copy+0x18c>)
 8014c12:	4857      	ldr	r0, [pc, #348]	; (8014d70 <pbuf_copy+0x190>)
 8014c14:	f00c f8da 	bl	8020dcc <iprintf>
 8014c18:	f06f 030f 	mvn.w	r3, #15
 8014c1c:	e09f      	b.n	8014d5e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	895b      	ldrh	r3, [r3, #10]
 8014c22:	461a      	mov	r2, r3
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	1ad2      	subs	r2, r2, r3
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	895b      	ldrh	r3, [r3, #10]
 8014c2c:	4619      	mov	r1, r3
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	1acb      	subs	r3, r1, r3
 8014c32:	429a      	cmp	r2, r3
 8014c34:	d306      	bcc.n	8014c44 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	895b      	ldrh	r3, [r3, #10]
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	1ad3      	subs	r3, r2, r3
 8014c40:	60fb      	str	r3, [r7, #12]
 8014c42:	e005      	b.n	8014c50 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	895b      	ldrh	r3, [r3, #10]
 8014c48:	461a      	mov	r2, r3
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	1ad3      	subs	r3, r2, r3
 8014c4e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	685a      	ldr	r2, [r3, #4]
 8014c54:	697b      	ldr	r3, [r7, #20]
 8014c56:	18d0      	adds	r0, r2, r3
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	685a      	ldr	r2, [r3, #4]
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	4413      	add	r3, r2
 8014c60:	68fa      	ldr	r2, [r7, #12]
 8014c62:	4619      	mov	r1, r3
 8014c64:	f00b ffc8 	bl	8020bf8 <memcpy>
    offset_to += len;
 8014c68:	697a      	ldr	r2, [r7, #20]
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	4413      	add	r3, r2
 8014c6e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014c70:	693a      	ldr	r2, [r7, #16]
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	4413      	add	r3, r2
 8014c76:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	895b      	ldrh	r3, [r3, #10]
 8014c7c:	461a      	mov	r2, r3
 8014c7e:	697b      	ldr	r3, [r7, #20]
 8014c80:	4293      	cmp	r3, r2
 8014c82:	d906      	bls.n	8014c92 <pbuf_copy+0xb2>
 8014c84:	4b38      	ldr	r3, [pc, #224]	; (8014d68 <pbuf_copy+0x188>)
 8014c86:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014c8a:	493a      	ldr	r1, [pc, #232]	; (8014d74 <pbuf_copy+0x194>)
 8014c8c:	4838      	ldr	r0, [pc, #224]	; (8014d70 <pbuf_copy+0x190>)
 8014c8e:	f00c f89d 	bl	8020dcc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	895b      	ldrh	r3, [r3, #10]
 8014c96:	461a      	mov	r2, r3
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	4293      	cmp	r3, r2
 8014c9c:	d906      	bls.n	8014cac <pbuf_copy+0xcc>
 8014c9e:	4b32      	ldr	r3, [pc, #200]	; (8014d68 <pbuf_copy+0x188>)
 8014ca0:	f240 32da 	movw	r2, #986	; 0x3da
 8014ca4:	4934      	ldr	r1, [pc, #208]	; (8014d78 <pbuf_copy+0x198>)
 8014ca6:	4832      	ldr	r0, [pc, #200]	; (8014d70 <pbuf_copy+0x190>)
 8014ca8:	f00c f890 	bl	8020dcc <iprintf>
    if (offset_from >= p_from->len) {
 8014cac:	683b      	ldr	r3, [r7, #0]
 8014cae:	895b      	ldrh	r3, [r3, #10]
 8014cb0:	461a      	mov	r2, r3
 8014cb2:	693b      	ldr	r3, [r7, #16]
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	d304      	bcc.n	8014cc2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014cb8:	2300      	movs	r3, #0
 8014cba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014cbc:	683b      	ldr	r3, [r7, #0]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	895b      	ldrh	r3, [r3, #10]
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	d114      	bne.n	8014cf8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d10c      	bne.n	8014cf8 <pbuf_copy+0x118>
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d009      	beq.n	8014cf8 <pbuf_copy+0x118>
 8014ce4:	4b20      	ldr	r3, [pc, #128]	; (8014d68 <pbuf_copy+0x188>)
 8014ce6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014cea:	4924      	ldr	r1, [pc, #144]	; (8014d7c <pbuf_copy+0x19c>)
 8014cec:	4820      	ldr	r0, [pc, #128]	; (8014d70 <pbuf_copy+0x190>)
 8014cee:	f00c f86d 	bl	8020dcc <iprintf>
 8014cf2:	f06f 030f 	mvn.w	r3, #15
 8014cf6:	e032      	b.n	8014d5e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d013      	beq.n	8014d26 <pbuf_copy+0x146>
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	895a      	ldrh	r2, [r3, #10]
 8014d02:	683b      	ldr	r3, [r7, #0]
 8014d04:	891b      	ldrh	r3, [r3, #8]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d10d      	bne.n	8014d26 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014d0a:	683b      	ldr	r3, [r7, #0]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d009      	beq.n	8014d26 <pbuf_copy+0x146>
 8014d12:	4b15      	ldr	r3, [pc, #84]	; (8014d68 <pbuf_copy+0x188>)
 8014d14:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014d18:	4919      	ldr	r1, [pc, #100]	; (8014d80 <pbuf_copy+0x1a0>)
 8014d1a:	4815      	ldr	r0, [pc, #84]	; (8014d70 <pbuf_copy+0x190>)
 8014d1c:	f00c f856 	bl	8020dcc <iprintf>
 8014d20:	f06f 0305 	mvn.w	r3, #5
 8014d24:	e01b      	b.n	8014d5e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d013      	beq.n	8014d54 <pbuf_copy+0x174>
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	895a      	ldrh	r2, [r3, #10]
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	891b      	ldrh	r3, [r3, #8]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d10d      	bne.n	8014d54 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d009      	beq.n	8014d54 <pbuf_copy+0x174>
 8014d40:	4b09      	ldr	r3, [pc, #36]	; (8014d68 <pbuf_copy+0x188>)
 8014d42:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8014d46:	490e      	ldr	r1, [pc, #56]	; (8014d80 <pbuf_copy+0x1a0>)
 8014d48:	4809      	ldr	r0, [pc, #36]	; (8014d70 <pbuf_copy+0x190>)
 8014d4a:	f00c f83f 	bl	8020dcc <iprintf>
 8014d4e:	f06f 0305 	mvn.w	r3, #5
 8014d52:	e004      	b.n	8014d5e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	f47f af61 	bne.w	8014c1e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014d5c:	2300      	movs	r3, #0
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3718      	adds	r7, #24
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	08023ae4 	.word	0x08023ae4
 8014d6c:	08023d8c 	.word	0x08023d8c
 8014d70:	08023b44 	.word	0x08023b44
 8014d74:	08023dbc 	.word	0x08023dbc
 8014d78:	08023dd4 	.word	0x08023dd4
 8014d7c:	08023df0 	.word	0x08023df0
 8014d80:	08023e00 	.word	0x08023e00

08014d84 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b088      	sub	sp, #32
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	60f8      	str	r0, [r7, #12]
 8014d8c:	60b9      	str	r1, [r7, #8]
 8014d8e:	4611      	mov	r1, r2
 8014d90:	461a      	mov	r2, r3
 8014d92:	460b      	mov	r3, r1
 8014d94:	80fb      	strh	r3, [r7, #6]
 8014d96:	4613      	mov	r3, r2
 8014d98:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014d9e:	2300      	movs	r3, #0
 8014da0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d108      	bne.n	8014dba <pbuf_copy_partial+0x36>
 8014da8:	4b2b      	ldr	r3, [pc, #172]	; (8014e58 <pbuf_copy_partial+0xd4>)
 8014daa:	f240 420a 	movw	r2, #1034	; 0x40a
 8014dae:	492b      	ldr	r1, [pc, #172]	; (8014e5c <pbuf_copy_partial+0xd8>)
 8014db0:	482b      	ldr	r0, [pc, #172]	; (8014e60 <pbuf_copy_partial+0xdc>)
 8014db2:	f00c f80b 	bl	8020dcc <iprintf>
 8014db6:	2300      	movs	r3, #0
 8014db8:	e04a      	b.n	8014e50 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014dba:	68bb      	ldr	r3, [r7, #8]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d108      	bne.n	8014dd2 <pbuf_copy_partial+0x4e>
 8014dc0:	4b25      	ldr	r3, [pc, #148]	; (8014e58 <pbuf_copy_partial+0xd4>)
 8014dc2:	f240 420b 	movw	r2, #1035	; 0x40b
 8014dc6:	4927      	ldr	r1, [pc, #156]	; (8014e64 <pbuf_copy_partial+0xe0>)
 8014dc8:	4825      	ldr	r0, [pc, #148]	; (8014e60 <pbuf_copy_partial+0xdc>)
 8014dca:	f00b ffff 	bl	8020dcc <iprintf>
 8014dce:	2300      	movs	r3, #0
 8014dd0:	e03e      	b.n	8014e50 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	61fb      	str	r3, [r7, #28]
 8014dd6:	e034      	b.n	8014e42 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014dd8:	88bb      	ldrh	r3, [r7, #4]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00a      	beq.n	8014df4 <pbuf_copy_partial+0x70>
 8014dde:	69fb      	ldr	r3, [r7, #28]
 8014de0:	895b      	ldrh	r3, [r3, #10]
 8014de2:	88ba      	ldrh	r2, [r7, #4]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d305      	bcc.n	8014df4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014de8:	69fb      	ldr	r3, [r7, #28]
 8014dea:	895b      	ldrh	r3, [r3, #10]
 8014dec:	88ba      	ldrh	r2, [r7, #4]
 8014dee:	1ad3      	subs	r3, r2, r3
 8014df0:	80bb      	strh	r3, [r7, #4]
 8014df2:	e023      	b.n	8014e3c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	895a      	ldrh	r2, [r3, #10]
 8014df8:	88bb      	ldrh	r3, [r7, #4]
 8014dfa:	1ad3      	subs	r3, r2, r3
 8014dfc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014dfe:	8b3a      	ldrh	r2, [r7, #24]
 8014e00:	88fb      	ldrh	r3, [r7, #6]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d901      	bls.n	8014e0a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8014e06:	88fb      	ldrh	r3, [r7, #6]
 8014e08:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014e0a:	8b7b      	ldrh	r3, [r7, #26]
 8014e0c:	68ba      	ldr	r2, [r7, #8]
 8014e0e:	18d0      	adds	r0, r2, r3
 8014e10:	69fb      	ldr	r3, [r7, #28]
 8014e12:	685a      	ldr	r2, [r3, #4]
 8014e14:	88bb      	ldrh	r3, [r7, #4]
 8014e16:	4413      	add	r3, r2
 8014e18:	8b3a      	ldrh	r2, [r7, #24]
 8014e1a:	4619      	mov	r1, r3
 8014e1c:	f00b feec 	bl	8020bf8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014e20:	8afa      	ldrh	r2, [r7, #22]
 8014e22:	8b3b      	ldrh	r3, [r7, #24]
 8014e24:	4413      	add	r3, r2
 8014e26:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014e28:	8b7a      	ldrh	r2, [r7, #26]
 8014e2a:	8b3b      	ldrh	r3, [r7, #24]
 8014e2c:	4413      	add	r3, r2
 8014e2e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014e30:	88fa      	ldrh	r2, [r7, #6]
 8014e32:	8b3b      	ldrh	r3, [r7, #24]
 8014e34:	1ad3      	subs	r3, r2, r3
 8014e36:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014e3c:	69fb      	ldr	r3, [r7, #28]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	61fb      	str	r3, [r7, #28]
 8014e42:	88fb      	ldrh	r3, [r7, #6]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d002      	beq.n	8014e4e <pbuf_copy_partial+0xca>
 8014e48:	69fb      	ldr	r3, [r7, #28]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d1c4      	bne.n	8014dd8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014e4e:	8afb      	ldrh	r3, [r7, #22]
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3720      	adds	r7, #32
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	08023ae4 	.word	0x08023ae4
 8014e5c:	08023e2c 	.word	0x08023e2c
 8014e60:	08023b44 	.word	0x08023b44
 8014e64:	08023e4c 	.word	0x08023e4c

08014e68 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8014e68:	b480      	push	{r7}
 8014e6a:	b087      	sub	sp, #28
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	60f8      	str	r0, [r7, #12]
 8014e70:	460b      	mov	r3, r1
 8014e72:	607a      	str	r2, [r7, #4]
 8014e74:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8014e76:	897b      	ldrh	r3, [r7, #10]
 8014e78:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8014e7e:	e007      	b.n	8014e90 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8014e80:	693b      	ldr	r3, [r7, #16]
 8014e82:	895b      	ldrh	r3, [r3, #10]
 8014e84:	8afa      	ldrh	r2, [r7, #22]
 8014e86:	1ad3      	subs	r3, r2, r3
 8014e88:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8014e8a:	693b      	ldr	r3, [r7, #16]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d004      	beq.n	8014ea0 <pbuf_skip_const+0x38>
 8014e96:	693b      	ldr	r3, [r7, #16]
 8014e98:	895b      	ldrh	r3, [r3, #10]
 8014e9a:	8afa      	ldrh	r2, [r7, #22]
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d2ef      	bcs.n	8014e80 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d002      	beq.n	8014eac <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	8afa      	ldrh	r2, [r7, #22]
 8014eaa:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8014eac:	693b      	ldr	r3, [r7, #16]
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	371c      	adds	r7, #28
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb8:	4770      	bx	lr

08014eba <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8014eba:	b580      	push	{r7, lr}
 8014ebc:	b086      	sub	sp, #24
 8014ebe:	af00      	add	r7, sp, #0
 8014ec0:	60f8      	str	r0, [r7, #12]
 8014ec2:	460b      	mov	r3, r1
 8014ec4:	607a      	str	r2, [r7, #4]
 8014ec6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8014ec8:	897b      	ldrh	r3, [r7, #10]
 8014eca:	687a      	ldr	r2, [r7, #4]
 8014ecc:	4619      	mov	r1, r3
 8014ece:	68f8      	ldr	r0, [r7, #12]
 8014ed0:	f7ff ffca 	bl	8014e68 <pbuf_skip_const>
 8014ed4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8014ed6:	697b      	ldr	r3, [r7, #20]
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3718      	adds	r7, #24
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}

08014ee0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b088      	sub	sp, #32
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	60b9      	str	r1, [r7, #8]
 8014eea:	4613      	mov	r3, r2
 8014eec:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8014eee:	88fb      	ldrh	r3, [r7, #6]
 8014ef0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d109      	bne.n	8014f10 <pbuf_take+0x30>
 8014efc:	4b3a      	ldr	r3, [pc, #232]	; (8014fe8 <pbuf_take+0x108>)
 8014efe:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8014f02:	493a      	ldr	r1, [pc, #232]	; (8014fec <pbuf_take+0x10c>)
 8014f04:	483a      	ldr	r0, [pc, #232]	; (8014ff0 <pbuf_take+0x110>)
 8014f06:	f00b ff61 	bl	8020dcc <iprintf>
 8014f0a:	f06f 030f 	mvn.w	r3, #15
 8014f0e:	e067      	b.n	8014fe0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d109      	bne.n	8014f2a <pbuf_take+0x4a>
 8014f16:	4b34      	ldr	r3, [pc, #208]	; (8014fe8 <pbuf_take+0x108>)
 8014f18:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8014f1c:	4935      	ldr	r1, [pc, #212]	; (8014ff4 <pbuf_take+0x114>)
 8014f1e:	4834      	ldr	r0, [pc, #208]	; (8014ff0 <pbuf_take+0x110>)
 8014f20:	f00b ff54 	bl	8020dcc <iprintf>
 8014f24:	f06f 030f 	mvn.w	r3, #15
 8014f28:	e05a      	b.n	8014fe0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	891b      	ldrh	r3, [r3, #8]
 8014f2e:	88fa      	ldrh	r2, [r7, #6]
 8014f30:	429a      	cmp	r2, r3
 8014f32:	d909      	bls.n	8014f48 <pbuf_take+0x68>
 8014f34:	4b2c      	ldr	r3, [pc, #176]	; (8014fe8 <pbuf_take+0x108>)
 8014f36:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8014f3a:	492f      	ldr	r1, [pc, #188]	; (8014ff8 <pbuf_take+0x118>)
 8014f3c:	482c      	ldr	r0, [pc, #176]	; (8014ff0 <pbuf_take+0x110>)
 8014f3e:	f00b ff45 	bl	8020dcc <iprintf>
 8014f42:	f04f 33ff 	mov.w	r3, #4294967295
 8014f46:	e04b      	b.n	8014fe0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d007      	beq.n	8014f5e <pbuf_take+0x7e>
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d004      	beq.n	8014f5e <pbuf_take+0x7e>
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	891b      	ldrh	r3, [r3, #8]
 8014f58:	88fa      	ldrh	r2, [r7, #6]
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	d902      	bls.n	8014f64 <pbuf_take+0x84>
    return ERR_ARG;
 8014f5e:	f06f 030f 	mvn.w	r3, #15
 8014f62:	e03d      	b.n	8014fe0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	61fb      	str	r3, [r7, #28]
 8014f68:	e028      	b.n	8014fbc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8014f6a:	69fb      	ldr	r3, [r7, #28]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d106      	bne.n	8014f7e <pbuf_take+0x9e>
 8014f70:	4b1d      	ldr	r3, [pc, #116]	; (8014fe8 <pbuf_take+0x108>)
 8014f72:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8014f76:	4921      	ldr	r1, [pc, #132]	; (8014ffc <pbuf_take+0x11c>)
 8014f78:	481d      	ldr	r0, [pc, #116]	; (8014ff0 <pbuf_take+0x110>)
 8014f7a:	f00b ff27 	bl	8020dcc <iprintf>
    buf_copy_len = total_copy_len;
 8014f7e:	697b      	ldr	r3, [r7, #20]
 8014f80:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	895b      	ldrh	r3, [r3, #10]
 8014f86:	461a      	mov	r2, r3
 8014f88:	69bb      	ldr	r3, [r7, #24]
 8014f8a:	4293      	cmp	r3, r2
 8014f8c:	d902      	bls.n	8014f94 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	895b      	ldrh	r3, [r3, #10]
 8014f92:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	6858      	ldr	r0, [r3, #4]
 8014f98:	68ba      	ldr	r2, [r7, #8]
 8014f9a:	693b      	ldr	r3, [r7, #16]
 8014f9c:	4413      	add	r3, r2
 8014f9e:	69ba      	ldr	r2, [r7, #24]
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	f00b fe29 	bl	8020bf8 <memcpy>
    total_copy_len -= buf_copy_len;
 8014fa6:	697a      	ldr	r2, [r7, #20]
 8014fa8:	69bb      	ldr	r3, [r7, #24]
 8014faa:	1ad3      	subs	r3, r2, r3
 8014fac:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8014fae:	693a      	ldr	r2, [r7, #16]
 8014fb0:	69bb      	ldr	r3, [r7, #24]
 8014fb2:	4413      	add	r3, r2
 8014fb4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8014fb6:	69fb      	ldr	r3, [r7, #28]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	61fb      	str	r3, [r7, #28]
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d1d3      	bne.n	8014f6a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d103      	bne.n	8014fd0 <pbuf_take+0xf0>
 8014fc8:	88fb      	ldrh	r3, [r7, #6]
 8014fca:	693a      	ldr	r2, [r7, #16]
 8014fcc:	429a      	cmp	r2, r3
 8014fce:	d006      	beq.n	8014fde <pbuf_take+0xfe>
 8014fd0:	4b05      	ldr	r3, [pc, #20]	; (8014fe8 <pbuf_take+0x108>)
 8014fd2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8014fd6:	490a      	ldr	r1, [pc, #40]	; (8015000 <pbuf_take+0x120>)
 8014fd8:	4805      	ldr	r0, [pc, #20]	; (8014ff0 <pbuf_take+0x110>)
 8014fda:	f00b fef7 	bl	8020dcc <iprintf>
  return ERR_OK;
 8014fde:	2300      	movs	r3, #0
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3720      	adds	r7, #32
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}
 8014fe8:	08023ae4 	.word	0x08023ae4
 8014fec:	08023ebc 	.word	0x08023ebc
 8014ff0:	08023b44 	.word	0x08023b44
 8014ff4:	08023ed4 	.word	0x08023ed4
 8014ff8:	08023ef0 	.word	0x08023ef0
 8014ffc:	08023f10 	.word	0x08023f10
 8015000:	08023f28 	.word	0x08023f28

08015004 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b088      	sub	sp, #32
 8015008:	af00      	add	r7, sp, #0
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	60b9      	str	r1, [r7, #8]
 801500e:	4611      	mov	r1, r2
 8015010:	461a      	mov	r2, r3
 8015012:	460b      	mov	r3, r1
 8015014:	80fb      	strh	r3, [r7, #6]
 8015016:	4613      	mov	r3, r2
 8015018:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 801501a:	f107 0210 	add.w	r2, r7, #16
 801501e:	88bb      	ldrh	r3, [r7, #4]
 8015020:	4619      	mov	r1, r3
 8015022:	68f8      	ldr	r0, [r7, #12]
 8015024:	f7ff ff49 	bl	8014eba <pbuf_skip>
 8015028:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801502a:	69fb      	ldr	r3, [r7, #28]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d047      	beq.n	80150c0 <pbuf_take_at+0xbc>
 8015030:	69fb      	ldr	r3, [r7, #28]
 8015032:	891b      	ldrh	r3, [r3, #8]
 8015034:	461a      	mov	r2, r3
 8015036:	8a3b      	ldrh	r3, [r7, #16]
 8015038:	4619      	mov	r1, r3
 801503a:	88fb      	ldrh	r3, [r7, #6]
 801503c:	440b      	add	r3, r1
 801503e:	429a      	cmp	r2, r3
 8015040:	db3e      	blt.n	80150c0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8015042:	88fb      	ldrh	r3, [r7, #6]
 8015044:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 801504a:	69fb      	ldr	r3, [r7, #28]
 801504c:	895a      	ldrh	r2, [r3, #10]
 801504e:	8a3b      	ldrh	r3, [r7, #16]
 8015050:	429a      	cmp	r2, r3
 8015052:	d806      	bhi.n	8015062 <pbuf_take_at+0x5e>
 8015054:	4b1d      	ldr	r3, [pc, #116]	; (80150cc <pbuf_take_at+0xc8>)
 8015056:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801505a:	491d      	ldr	r1, [pc, #116]	; (80150d0 <pbuf_take_at+0xcc>)
 801505c:	481d      	ldr	r0, [pc, #116]	; (80150d4 <pbuf_take_at+0xd0>)
 801505e:	f00b feb5 	bl	8020dcc <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8015062:	69fb      	ldr	r3, [r7, #28]
 8015064:	895b      	ldrh	r3, [r3, #10]
 8015066:	461a      	mov	r2, r3
 8015068:	8a3b      	ldrh	r3, [r7, #16]
 801506a:	1ad2      	subs	r2, r2, r3
 801506c:	88fb      	ldrh	r3, [r7, #6]
 801506e:	429a      	cmp	r2, r3
 8015070:	da05      	bge.n	801507e <pbuf_take_at+0x7a>
 8015072:	69fb      	ldr	r3, [r7, #28]
 8015074:	895a      	ldrh	r2, [r3, #10]
 8015076:	8a3b      	ldrh	r3, [r7, #16]
 8015078:	1ad3      	subs	r3, r2, r3
 801507a:	b29b      	uxth	r3, r3
 801507c:	e000      	b.n	8015080 <pbuf_take_at+0x7c>
 801507e:	88fb      	ldrh	r3, [r7, #6]
 8015080:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8015082:	69fb      	ldr	r3, [r7, #28]
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	8a3a      	ldrh	r2, [r7, #16]
 8015088:	4413      	add	r3, r2
 801508a:	8a7a      	ldrh	r2, [r7, #18]
 801508c:	68b9      	ldr	r1, [r7, #8]
 801508e:	4618      	mov	r0, r3
 8015090:	f00b fdb2 	bl	8020bf8 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8015094:	8b7a      	ldrh	r2, [r7, #26]
 8015096:	8a7b      	ldrh	r3, [r7, #18]
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 801509c:	8a7b      	ldrh	r3, [r7, #18]
 801509e:	697a      	ldr	r2, [r7, #20]
 80150a0:	4413      	add	r3, r2
 80150a2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 80150a4:	8b7b      	ldrh	r3, [r7, #26]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d008      	beq.n	80150bc <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80150aa:	69fb      	ldr	r3, [r7, #28]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	8b7a      	ldrh	r2, [r7, #26]
 80150b0:	6979      	ldr	r1, [r7, #20]
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7ff ff14 	bl	8014ee0 <pbuf_take>
 80150b8:	4603      	mov	r3, r0
 80150ba:	e003      	b.n	80150c4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 80150bc:	2300      	movs	r3, #0
 80150be:	e001      	b.n	80150c4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 80150c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3720      	adds	r7, #32
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	08023ae4 	.word	0x08023ae4
 80150d0:	08023f40 	.word	0x08023f40
 80150d4:	08023b44 	.word	0x08023b44

080150d8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b084      	sub	sp, #16
 80150dc:	af00      	add	r7, sp, #0
 80150de:	4603      	mov	r3, r0
 80150e0:	603a      	str	r2, [r7, #0]
 80150e2:	71fb      	strb	r3, [r7, #7]
 80150e4:	460b      	mov	r3, r1
 80150e6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	8919      	ldrh	r1, [r3, #8]
 80150ec:	88ba      	ldrh	r2, [r7, #4]
 80150ee:	79fb      	ldrb	r3, [r7, #7]
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7ff f95d 	bl	80143b0 <pbuf_alloc>
 80150f6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d101      	bne.n	8015102 <pbuf_clone+0x2a>
    return NULL;
 80150fe:	2300      	movs	r3, #0
 8015100:	e011      	b.n	8015126 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8015102:	6839      	ldr	r1, [r7, #0]
 8015104:	68f8      	ldr	r0, [r7, #12]
 8015106:	f7ff fd6b 	bl	8014be0 <pbuf_copy>
 801510a:	4603      	mov	r3, r0
 801510c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801510e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d006      	beq.n	8015124 <pbuf_clone+0x4c>
 8015116:	4b06      	ldr	r3, [pc, #24]	; (8015130 <pbuf_clone+0x58>)
 8015118:	f240 5224 	movw	r2, #1316	; 0x524
 801511c:	4905      	ldr	r1, [pc, #20]	; (8015134 <pbuf_clone+0x5c>)
 801511e:	4806      	ldr	r0, [pc, #24]	; (8015138 <pbuf_clone+0x60>)
 8015120:	f00b fe54 	bl	8020dcc <iprintf>
  return q;
 8015124:	68fb      	ldr	r3, [r7, #12]
}
 8015126:	4618      	mov	r0, r3
 8015128:	3710      	adds	r7, #16
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}
 801512e:	bf00      	nop
 8015130:	08023ae4 	.word	0x08023ae4
 8015134:	08023f58 	.word	0x08023f58
 8015138:	08023b44 	.word	0x08023b44

0801513c <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b084      	sub	sp, #16
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	460b      	mov	r3, r1
 8015146:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8015148:	f107 020a 	add.w	r2, r7, #10
 801514c:	887b      	ldrh	r3, [r7, #2]
 801514e:	4619      	mov	r1, r3
 8015150:	6878      	ldr	r0, [r7, #4]
 8015152:	f7ff fe89 	bl	8014e68 <pbuf_skip_const>
 8015156:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d00a      	beq.n	8015174 <pbuf_try_get_at+0x38>
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	895a      	ldrh	r2, [r3, #10]
 8015162:	897b      	ldrh	r3, [r7, #10]
 8015164:	429a      	cmp	r2, r3
 8015166:	d905      	bls.n	8015174 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	685b      	ldr	r3, [r3, #4]
 801516c:	897a      	ldrh	r2, [r7, #10]
 801516e:	4413      	add	r3, r2
 8015170:	781b      	ldrb	r3, [r3, #0]
 8015172:	e001      	b.n	8015178 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8015174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015178:	4618      	mov	r0, r3
 801517a:	3710      	adds	r7, #16
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}

08015180 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b084      	sub	sp, #16
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	460b      	mov	r3, r1
 801518a:	807b      	strh	r3, [r7, #2]
 801518c:	4613      	mov	r3, r2
 801518e:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8015190:	f107 020a 	add.w	r2, r7, #10
 8015194:	887b      	ldrh	r3, [r7, #2]
 8015196:	4619      	mov	r1, r3
 8015198:	6878      	ldr	r0, [r7, #4]
 801519a:	f7ff fe8e 	bl	8014eba <pbuf_skip>
 801519e:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d00a      	beq.n	80151bc <pbuf_put_at+0x3c>
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	895a      	ldrh	r2, [r3, #10]
 80151aa:	897b      	ldrh	r3, [r7, #10]
 80151ac:	429a      	cmp	r2, r3
 80151ae:	d905      	bls.n	80151bc <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	685b      	ldr	r3, [r3, #4]
 80151b4:	897a      	ldrh	r2, [r7, #10]
 80151b6:	4413      	add	r3, r2
 80151b8:	787a      	ldrb	r2, [r7, #1]
 80151ba:	701a      	strb	r2, [r3, #0]
  }
}
 80151bc:	bf00      	nop
 80151be:	3710      	adds	r7, #16
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}

080151c4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80151c8:	f00b fed2 	bl	8020f70 <rand>
 80151cc:	4603      	mov	r3, r0
 80151ce:	b29b      	uxth	r3, r3
 80151d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80151d4:	b29b      	uxth	r3, r3
 80151d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80151da:	b29a      	uxth	r2, r3
 80151dc:	4b01      	ldr	r3, [pc, #4]	; (80151e4 <tcp_init+0x20>)
 80151de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80151e0:	bf00      	nop
 80151e2:	bd80      	pop	{r7, pc}
 80151e4:	200004f4 	.word	0x200004f4

080151e8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b082      	sub	sp, #8
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	7d1b      	ldrb	r3, [r3, #20]
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	d105      	bne.n	8015204 <tcp_free+0x1c>
 80151f8:	4b06      	ldr	r3, [pc, #24]	; (8015214 <tcp_free+0x2c>)
 80151fa:	22d4      	movs	r2, #212	; 0xd4
 80151fc:	4906      	ldr	r1, [pc, #24]	; (8015218 <tcp_free+0x30>)
 80151fe:	4807      	ldr	r0, [pc, #28]	; (801521c <tcp_free+0x34>)
 8015200:	f00b fde4 	bl	8020dcc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015204:	6879      	ldr	r1, [r7, #4]
 8015206:	2001      	movs	r0, #1
 8015208:	f7fe fd06 	bl	8013c18 <memp_free>
}
 801520c:	bf00      	nop
 801520e:	3708      	adds	r7, #8
 8015210:	46bd      	mov	sp, r7
 8015212:	bd80      	pop	{r7, pc}
 8015214:	08023fe4 	.word	0x08023fe4
 8015218:	08024014 	.word	0x08024014
 801521c:	08024028 	.word	0x08024028

08015220 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b082      	sub	sp, #8
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	7d1b      	ldrb	r3, [r3, #20]
 801522c:	2b01      	cmp	r3, #1
 801522e:	d105      	bne.n	801523c <tcp_free_listen+0x1c>
 8015230:	4b06      	ldr	r3, [pc, #24]	; (801524c <tcp_free_listen+0x2c>)
 8015232:	22df      	movs	r2, #223	; 0xdf
 8015234:	4906      	ldr	r1, [pc, #24]	; (8015250 <tcp_free_listen+0x30>)
 8015236:	4807      	ldr	r0, [pc, #28]	; (8015254 <tcp_free_listen+0x34>)
 8015238:	f00b fdc8 	bl	8020dcc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801523c:	6879      	ldr	r1, [r7, #4]
 801523e:	2002      	movs	r0, #2
 8015240:	f7fe fcea 	bl	8013c18 <memp_free>
}
 8015244:	bf00      	nop
 8015246:	3708      	adds	r7, #8
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}
 801524c:	08023fe4 	.word	0x08023fe4
 8015250:	08024050 	.word	0x08024050
 8015254:	08024028 	.word	0x08024028

08015258 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801525c:	f001 f85c 	bl	8016318 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015260:	4b07      	ldr	r3, [pc, #28]	; (8015280 <tcp_tmr+0x28>)
 8015262:	781b      	ldrb	r3, [r3, #0]
 8015264:	3301      	adds	r3, #1
 8015266:	b2da      	uxtb	r2, r3
 8015268:	4b05      	ldr	r3, [pc, #20]	; (8015280 <tcp_tmr+0x28>)
 801526a:	701a      	strb	r2, [r3, #0]
 801526c:	4b04      	ldr	r3, [pc, #16]	; (8015280 <tcp_tmr+0x28>)
 801526e:	781b      	ldrb	r3, [r3, #0]
 8015270:	f003 0301 	and.w	r3, r3, #1
 8015274:	2b00      	cmp	r3, #0
 8015276:	d001      	beq.n	801527c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015278:	f000 fd0e 	bl	8015c98 <tcp_slowtmr>
  }
}
 801527c:	bf00      	nop
 801527e:	bd80      	pop	{r7, pc}
 8015280:	200056e9 	.word	0x200056e9

08015284 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b084      	sub	sp, #16
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d105      	bne.n	80152a0 <tcp_remove_listener+0x1c>
 8015294:	4b0d      	ldr	r3, [pc, #52]	; (80152cc <tcp_remove_listener+0x48>)
 8015296:	22ff      	movs	r2, #255	; 0xff
 8015298:	490d      	ldr	r1, [pc, #52]	; (80152d0 <tcp_remove_listener+0x4c>)
 801529a:	480e      	ldr	r0, [pc, #56]	; (80152d4 <tcp_remove_listener+0x50>)
 801529c:	f00b fd96 	bl	8020dcc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	60fb      	str	r3, [r7, #12]
 80152a4:	e00a      	b.n	80152bc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80152aa:	683a      	ldr	r2, [r7, #0]
 80152ac:	429a      	cmp	r2, r3
 80152ae:	d102      	bne.n	80152b6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	2200      	movs	r2, #0
 80152b4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	68db      	ldr	r3, [r3, #12]
 80152ba:	60fb      	str	r3, [r7, #12]
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d1f1      	bne.n	80152a6 <tcp_remove_listener+0x22>
    }
  }
}
 80152c2:	bf00      	nop
 80152c4:	bf00      	nop
 80152c6:	3710      	adds	r7, #16
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}
 80152cc:	08023fe4 	.word	0x08023fe4
 80152d0:	0802406c 	.word	0x0802406c
 80152d4:	08024028 	.word	0x08024028

080152d8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b084      	sub	sp, #16
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d106      	bne.n	80152f4 <tcp_listen_closed+0x1c>
 80152e6:	4b14      	ldr	r3, [pc, #80]	; (8015338 <tcp_listen_closed+0x60>)
 80152e8:	f240 1211 	movw	r2, #273	; 0x111
 80152ec:	4913      	ldr	r1, [pc, #76]	; (801533c <tcp_listen_closed+0x64>)
 80152ee:	4814      	ldr	r0, [pc, #80]	; (8015340 <tcp_listen_closed+0x68>)
 80152f0:	f00b fd6c 	bl	8020dcc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	7d1b      	ldrb	r3, [r3, #20]
 80152f8:	2b01      	cmp	r3, #1
 80152fa:	d006      	beq.n	801530a <tcp_listen_closed+0x32>
 80152fc:	4b0e      	ldr	r3, [pc, #56]	; (8015338 <tcp_listen_closed+0x60>)
 80152fe:	f44f 7289 	mov.w	r2, #274	; 0x112
 8015302:	4910      	ldr	r1, [pc, #64]	; (8015344 <tcp_listen_closed+0x6c>)
 8015304:	480e      	ldr	r0, [pc, #56]	; (8015340 <tcp_listen_closed+0x68>)
 8015306:	f00b fd61 	bl	8020dcc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801530a:	2301      	movs	r3, #1
 801530c:	60fb      	str	r3, [r7, #12]
 801530e:	e00b      	b.n	8015328 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8015310:	4a0d      	ldr	r2, [pc, #52]	; (8015348 <tcp_listen_closed+0x70>)
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	6879      	ldr	r1, [r7, #4]
 801531c:	4618      	mov	r0, r3
 801531e:	f7ff ffb1 	bl	8015284 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	3301      	adds	r3, #1
 8015326:	60fb      	str	r3, [r7, #12]
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	2b03      	cmp	r3, #3
 801532c:	d9f0      	bls.n	8015310 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801532e:	bf00      	nop
 8015330:	bf00      	nop
 8015332:	3710      	adds	r7, #16
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}
 8015338:	08023fe4 	.word	0x08023fe4
 801533c:	08024094 	.word	0x08024094
 8015340:	08024028 	.word	0x08024028
 8015344:	080240a0 	.word	0x080240a0
 8015348:	08026644 	.word	0x08026644

0801534c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801534c:	b5b0      	push	{r4, r5, r7, lr}
 801534e:	b088      	sub	sp, #32
 8015350:	af04      	add	r7, sp, #16
 8015352:	6078      	str	r0, [r7, #4]
 8015354:	460b      	mov	r3, r1
 8015356:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d106      	bne.n	801536c <tcp_close_shutdown+0x20>
 801535e:	4b63      	ldr	r3, [pc, #396]	; (80154ec <tcp_close_shutdown+0x1a0>)
 8015360:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8015364:	4962      	ldr	r1, [pc, #392]	; (80154f0 <tcp_close_shutdown+0x1a4>)
 8015366:	4863      	ldr	r0, [pc, #396]	; (80154f4 <tcp_close_shutdown+0x1a8>)
 8015368:	f00b fd30 	bl	8020dcc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801536c:	78fb      	ldrb	r3, [r7, #3]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d066      	beq.n	8015440 <tcp_close_shutdown+0xf4>
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	7d1b      	ldrb	r3, [r3, #20]
 8015376:	2b04      	cmp	r3, #4
 8015378:	d003      	beq.n	8015382 <tcp_close_shutdown+0x36>
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	7d1b      	ldrb	r3, [r3, #20]
 801537e:	2b07      	cmp	r3, #7
 8015380:	d15e      	bne.n	8015440 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015386:	2b00      	cmp	r3, #0
 8015388:	d104      	bne.n	8015394 <tcp_close_shutdown+0x48>
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801538e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015392:	d055      	beq.n	8015440 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	8b5b      	ldrh	r3, [r3, #26]
 8015398:	f003 0310 	and.w	r3, r3, #16
 801539c:	2b00      	cmp	r3, #0
 801539e:	d106      	bne.n	80153ae <tcp_close_shutdown+0x62>
 80153a0:	4b52      	ldr	r3, [pc, #328]	; (80154ec <tcp_close_shutdown+0x1a0>)
 80153a2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80153a6:	4954      	ldr	r1, [pc, #336]	; (80154f8 <tcp_close_shutdown+0x1ac>)
 80153a8:	4852      	ldr	r0, [pc, #328]	; (80154f4 <tcp_close_shutdown+0x1a8>)
 80153aa:	f00b fd0f 	bl	8020dcc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80153b6:	687d      	ldr	r5, [r7, #4]
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	3304      	adds	r3, #4
 80153bc:	687a      	ldr	r2, [r7, #4]
 80153be:	8ad2      	ldrh	r2, [r2, #22]
 80153c0:	6879      	ldr	r1, [r7, #4]
 80153c2:	8b09      	ldrh	r1, [r1, #24]
 80153c4:	9102      	str	r1, [sp, #8]
 80153c6:	9201      	str	r2, [sp, #4]
 80153c8:	9300      	str	r3, [sp, #0]
 80153ca:	462b      	mov	r3, r5
 80153cc:	4622      	mov	r2, r4
 80153ce:	4601      	mov	r1, r0
 80153d0:	6878      	ldr	r0, [r7, #4]
 80153d2:	f005 fd6d 	bl	801aeb0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	f001 fb4e 	bl	8016a78 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80153dc:	4b47      	ldr	r3, [pc, #284]	; (80154fc <tcp_close_shutdown+0x1b0>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	687a      	ldr	r2, [r7, #4]
 80153e2:	429a      	cmp	r2, r3
 80153e4:	d105      	bne.n	80153f2 <tcp_close_shutdown+0xa6>
 80153e6:	4b45      	ldr	r3, [pc, #276]	; (80154fc <tcp_close_shutdown+0x1b0>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	4a43      	ldr	r2, [pc, #268]	; (80154fc <tcp_close_shutdown+0x1b0>)
 80153ee:	6013      	str	r3, [r2, #0]
 80153f0:	e013      	b.n	801541a <tcp_close_shutdown+0xce>
 80153f2:	4b42      	ldr	r3, [pc, #264]	; (80154fc <tcp_close_shutdown+0x1b0>)
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	60fb      	str	r3, [r7, #12]
 80153f8:	e00c      	b.n	8015414 <tcp_close_shutdown+0xc8>
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	68db      	ldr	r3, [r3, #12]
 80153fe:	687a      	ldr	r2, [r7, #4]
 8015400:	429a      	cmp	r2, r3
 8015402:	d104      	bne.n	801540e <tcp_close_shutdown+0xc2>
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	68da      	ldr	r2, [r3, #12]
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	60da      	str	r2, [r3, #12]
 801540c:	e005      	b.n	801541a <tcp_close_shutdown+0xce>
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	68db      	ldr	r3, [r3, #12]
 8015412:	60fb      	str	r3, [r7, #12]
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d1ef      	bne.n	80153fa <tcp_close_shutdown+0xae>
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2200      	movs	r2, #0
 801541e:	60da      	str	r2, [r3, #12]
 8015420:	4b37      	ldr	r3, [pc, #220]	; (8015500 <tcp_close_shutdown+0x1b4>)
 8015422:	2201      	movs	r2, #1
 8015424:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8015426:	4b37      	ldr	r3, [pc, #220]	; (8015504 <tcp_close_shutdown+0x1b8>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	687a      	ldr	r2, [r7, #4]
 801542c:	429a      	cmp	r2, r3
 801542e:	d102      	bne.n	8015436 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015430:	f003 ffe2 	bl	80193f8 <tcp_trigger_input_pcb_close>
 8015434:	e002      	b.n	801543c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8015436:	6878      	ldr	r0, [r7, #4]
 8015438:	f7ff fed6 	bl	80151e8 <tcp_free>
      }
      return ERR_OK;
 801543c:	2300      	movs	r3, #0
 801543e:	e050      	b.n	80154e2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	7d1b      	ldrb	r3, [r3, #20]
 8015444:	2b02      	cmp	r3, #2
 8015446:	d03b      	beq.n	80154c0 <tcp_close_shutdown+0x174>
 8015448:	2b02      	cmp	r3, #2
 801544a:	dc44      	bgt.n	80154d6 <tcp_close_shutdown+0x18a>
 801544c:	2b00      	cmp	r3, #0
 801544e:	d002      	beq.n	8015456 <tcp_close_shutdown+0x10a>
 8015450:	2b01      	cmp	r3, #1
 8015452:	d02a      	beq.n	80154aa <tcp_close_shutdown+0x15e>
 8015454:	e03f      	b.n	80154d6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	8adb      	ldrh	r3, [r3, #22]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d021      	beq.n	80154a2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801545e:	4b2a      	ldr	r3, [pc, #168]	; (8015508 <tcp_close_shutdown+0x1bc>)
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	687a      	ldr	r2, [r7, #4]
 8015464:	429a      	cmp	r2, r3
 8015466:	d105      	bne.n	8015474 <tcp_close_shutdown+0x128>
 8015468:	4b27      	ldr	r3, [pc, #156]	; (8015508 <tcp_close_shutdown+0x1bc>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	68db      	ldr	r3, [r3, #12]
 801546e:	4a26      	ldr	r2, [pc, #152]	; (8015508 <tcp_close_shutdown+0x1bc>)
 8015470:	6013      	str	r3, [r2, #0]
 8015472:	e013      	b.n	801549c <tcp_close_shutdown+0x150>
 8015474:	4b24      	ldr	r3, [pc, #144]	; (8015508 <tcp_close_shutdown+0x1bc>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	60bb      	str	r3, [r7, #8]
 801547a:	e00c      	b.n	8015496 <tcp_close_shutdown+0x14a>
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	68db      	ldr	r3, [r3, #12]
 8015480:	687a      	ldr	r2, [r7, #4]
 8015482:	429a      	cmp	r2, r3
 8015484:	d104      	bne.n	8015490 <tcp_close_shutdown+0x144>
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	68da      	ldr	r2, [r3, #12]
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	60da      	str	r2, [r3, #12]
 801548e:	e005      	b.n	801549c <tcp_close_shutdown+0x150>
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	68db      	ldr	r3, [r3, #12]
 8015494:	60bb      	str	r3, [r7, #8]
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d1ef      	bne.n	801547c <tcp_close_shutdown+0x130>
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2200      	movs	r2, #0
 80154a0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f7ff fea0 	bl	80151e8 <tcp_free>
      break;
 80154a8:	e01a      	b.n	80154e0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f7ff ff14 	bl	80152d8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80154b0:	6879      	ldr	r1, [r7, #4]
 80154b2:	4816      	ldr	r0, [pc, #88]	; (801550c <tcp_close_shutdown+0x1c0>)
 80154b4:	f001 fb30 	bl	8016b18 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	f7ff feb1 	bl	8015220 <tcp_free_listen>
      break;
 80154be:	e00f      	b.n	80154e0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80154c0:	6879      	ldr	r1, [r7, #4]
 80154c2:	480e      	ldr	r0, [pc, #56]	; (80154fc <tcp_close_shutdown+0x1b0>)
 80154c4:	f001 fb28 	bl	8016b18 <tcp_pcb_remove>
 80154c8:	4b0d      	ldr	r3, [pc, #52]	; (8015500 <tcp_close_shutdown+0x1b4>)
 80154ca:	2201      	movs	r2, #1
 80154cc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	f7ff fe8a 	bl	80151e8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80154d4:	e004      	b.n	80154e0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80154d6:	6878      	ldr	r0, [r7, #4]
 80154d8:	f000 f81a 	bl	8015510 <tcp_close_shutdown_fin>
 80154dc:	4603      	mov	r3, r0
 80154de:	e000      	b.n	80154e2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80154e0:	2300      	movs	r3, #0
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3710      	adds	r7, #16
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bdb0      	pop	{r4, r5, r7, pc}
 80154ea:	bf00      	nop
 80154ec:	08023fe4 	.word	0x08023fe4
 80154f0:	080240b8 	.word	0x080240b8
 80154f4:	08024028 	.word	0x08024028
 80154f8:	080240d8 	.word	0x080240d8
 80154fc:	20016db0 	.word	0x20016db0
 8015500:	20016dac 	.word	0x20016dac
 8015504:	20016dc4 	.word	0x20016dc4
 8015508:	20016dbc 	.word	0x20016dbc
 801550c:	20016db8 	.word	0x20016db8

08015510 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d106      	bne.n	801552c <tcp_close_shutdown_fin+0x1c>
 801551e:	4b2e      	ldr	r3, [pc, #184]	; (80155d8 <tcp_close_shutdown_fin+0xc8>)
 8015520:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8015524:	492d      	ldr	r1, [pc, #180]	; (80155dc <tcp_close_shutdown_fin+0xcc>)
 8015526:	482e      	ldr	r0, [pc, #184]	; (80155e0 <tcp_close_shutdown_fin+0xd0>)
 8015528:	f00b fc50 	bl	8020dcc <iprintf>

  switch (pcb->state) {
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	7d1b      	ldrb	r3, [r3, #20]
 8015530:	2b07      	cmp	r3, #7
 8015532:	d020      	beq.n	8015576 <tcp_close_shutdown_fin+0x66>
 8015534:	2b07      	cmp	r3, #7
 8015536:	dc2b      	bgt.n	8015590 <tcp_close_shutdown_fin+0x80>
 8015538:	2b03      	cmp	r3, #3
 801553a:	d002      	beq.n	8015542 <tcp_close_shutdown_fin+0x32>
 801553c:	2b04      	cmp	r3, #4
 801553e:	d00d      	beq.n	801555c <tcp_close_shutdown_fin+0x4c>
 8015540:	e026      	b.n	8015590 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f004 fdc2 	bl	801a0cc <tcp_send_fin>
 8015548:	4603      	mov	r3, r0
 801554a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801554c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d11f      	bne.n	8015594 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2205      	movs	r2, #5
 8015558:	751a      	strb	r2, [r3, #20]
      }
      break;
 801555a:	e01b      	b.n	8015594 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801555c:	6878      	ldr	r0, [r7, #4]
 801555e:	f004 fdb5 	bl	801a0cc <tcp_send_fin>
 8015562:	4603      	mov	r3, r0
 8015564:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d114      	bne.n	8015598 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	2205      	movs	r2, #5
 8015572:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015574:	e010      	b.n	8015598 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8015576:	6878      	ldr	r0, [r7, #4]
 8015578:	f004 fda8 	bl	801a0cc <tcp_send_fin>
 801557c:	4603      	mov	r3, r0
 801557e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d109      	bne.n	801559c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	2209      	movs	r2, #9
 801558c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801558e:	e005      	b.n	801559c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015590:	2300      	movs	r3, #0
 8015592:	e01c      	b.n	80155ce <tcp_close_shutdown_fin+0xbe>
      break;
 8015594:	bf00      	nop
 8015596:	e002      	b.n	801559e <tcp_close_shutdown_fin+0x8e>
      break;
 8015598:	bf00      	nop
 801559a:	e000      	b.n	801559e <tcp_close_shutdown_fin+0x8e>
      break;
 801559c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801559e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d103      	bne.n	80155ae <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80155a6:	6878      	ldr	r0, [r7, #4]
 80155a8:	f004 fece 	bl	801a348 <tcp_output>
 80155ac:	e00d      	b.n	80155ca <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80155ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155b6:	d108      	bne.n	80155ca <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	8b5b      	ldrh	r3, [r3, #26]
 80155bc:	f043 0308 	orr.w	r3, r3, #8
 80155c0:	b29a      	uxth	r2, r3
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80155c6:	2300      	movs	r3, #0
 80155c8:	e001      	b.n	80155ce <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80155ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	3710      	adds	r7, #16
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop
 80155d8:	08023fe4 	.word	0x08023fe4
 80155dc:	08024094 	.word	0x08024094
 80155e0:	08024028 	.word	0x08024028

080155e4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b082      	sub	sp, #8
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d109      	bne.n	8015606 <tcp_close+0x22>
 80155f2:	4b0f      	ldr	r3, [pc, #60]	; (8015630 <tcp_close+0x4c>)
 80155f4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80155f8:	490e      	ldr	r1, [pc, #56]	; (8015634 <tcp_close+0x50>)
 80155fa:	480f      	ldr	r0, [pc, #60]	; (8015638 <tcp_close+0x54>)
 80155fc:	f00b fbe6 	bl	8020dcc <iprintf>
 8015600:	f06f 030f 	mvn.w	r3, #15
 8015604:	e00f      	b.n	8015626 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	7d1b      	ldrb	r3, [r3, #20]
 801560a:	2b01      	cmp	r3, #1
 801560c:	d006      	beq.n	801561c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	8b5b      	ldrh	r3, [r3, #26]
 8015612:	f043 0310 	orr.w	r3, r3, #16
 8015616:	b29a      	uxth	r2, r3
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801561c:	2101      	movs	r1, #1
 801561e:	6878      	ldr	r0, [r7, #4]
 8015620:	f7ff fe94 	bl	801534c <tcp_close_shutdown>
 8015624:	4603      	mov	r3, r0
}
 8015626:	4618      	mov	r0, r3
 8015628:	3708      	adds	r7, #8
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	08023fe4 	.word	0x08023fe4
 8015634:	080240f4 	.word	0x080240f4
 8015638:	08024028 	.word	0x08024028

0801563c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b084      	sub	sp, #16
 8015640:	af00      	add	r7, sp, #0
 8015642:	60f8      	str	r0, [r7, #12]
 8015644:	60b9      	str	r1, [r7, #8]
 8015646:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d109      	bne.n	8015662 <tcp_shutdown+0x26>
 801564e:	4b26      	ldr	r3, [pc, #152]	; (80156e8 <tcp_shutdown+0xac>)
 8015650:	f240 2207 	movw	r2, #519	; 0x207
 8015654:	4925      	ldr	r1, [pc, #148]	; (80156ec <tcp_shutdown+0xb0>)
 8015656:	4826      	ldr	r0, [pc, #152]	; (80156f0 <tcp_shutdown+0xb4>)
 8015658:	f00b fbb8 	bl	8020dcc <iprintf>
 801565c:	f06f 030f 	mvn.w	r3, #15
 8015660:	e03d      	b.n	80156de <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	7d1b      	ldrb	r3, [r3, #20]
 8015666:	2b01      	cmp	r3, #1
 8015668:	d102      	bne.n	8015670 <tcp_shutdown+0x34>
    return ERR_CONN;
 801566a:	f06f 030a 	mvn.w	r3, #10
 801566e:	e036      	b.n	80156de <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d01b      	beq.n	80156ae <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	8b5b      	ldrh	r3, [r3, #26]
 801567a:	f043 0310 	orr.w	r3, r3, #16
 801567e:	b29a      	uxth	r2, r3
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d005      	beq.n	8015696 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801568a:	2101      	movs	r1, #1
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	f7ff fe5d 	bl	801534c <tcp_close_shutdown>
 8015692:	4603      	mov	r3, r0
 8015694:	e023      	b.n	80156de <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801569a:	2b00      	cmp	r3, #0
 801569c:	d007      	beq.n	80156ae <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7ff f968 	bl	8014978 <pbuf_free>
      pcb->refused_data = NULL;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	2200      	movs	r2, #0
 80156ac:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d013      	beq.n	80156dc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	7d1b      	ldrb	r3, [r3, #20]
 80156b8:	2b04      	cmp	r3, #4
 80156ba:	dc02      	bgt.n	80156c2 <tcp_shutdown+0x86>
 80156bc:	2b03      	cmp	r3, #3
 80156be:	da02      	bge.n	80156c6 <tcp_shutdown+0x8a>
 80156c0:	e009      	b.n	80156d6 <tcp_shutdown+0x9a>
 80156c2:	2b07      	cmp	r3, #7
 80156c4:	d107      	bne.n	80156d6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	b2db      	uxtb	r3, r3
 80156ca:	4619      	mov	r1, r3
 80156cc:	68f8      	ldr	r0, [r7, #12]
 80156ce:	f7ff fe3d 	bl	801534c <tcp_close_shutdown>
 80156d2:	4603      	mov	r3, r0
 80156d4:	e003      	b.n	80156de <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80156d6:	f06f 030a 	mvn.w	r3, #10
 80156da:	e000      	b.n	80156de <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80156dc:	2300      	movs	r3, #0
}
 80156de:	4618      	mov	r0, r3
 80156e0:	3710      	adds	r7, #16
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}
 80156e6:	bf00      	nop
 80156e8:	08023fe4 	.word	0x08023fe4
 80156ec:	0802410c 	.word	0x0802410c
 80156f0:	08024028 	.word	0x08024028

080156f4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b08e      	sub	sp, #56	; 0x38
 80156f8:	af04      	add	r7, sp, #16
 80156fa:	6078      	str	r0, [r7, #4]
 80156fc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d107      	bne.n	8015714 <tcp_abandon+0x20>
 8015704:	4b52      	ldr	r3, [pc, #328]	; (8015850 <tcp_abandon+0x15c>)
 8015706:	f240 223d 	movw	r2, #573	; 0x23d
 801570a:	4952      	ldr	r1, [pc, #328]	; (8015854 <tcp_abandon+0x160>)
 801570c:	4852      	ldr	r0, [pc, #328]	; (8015858 <tcp_abandon+0x164>)
 801570e:	f00b fb5d 	bl	8020dcc <iprintf>
 8015712:	e099      	b.n	8015848 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	7d1b      	ldrb	r3, [r3, #20]
 8015718:	2b01      	cmp	r3, #1
 801571a:	d106      	bne.n	801572a <tcp_abandon+0x36>
 801571c:	4b4c      	ldr	r3, [pc, #304]	; (8015850 <tcp_abandon+0x15c>)
 801571e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015722:	494e      	ldr	r1, [pc, #312]	; (801585c <tcp_abandon+0x168>)
 8015724:	484c      	ldr	r0, [pc, #304]	; (8015858 <tcp_abandon+0x164>)
 8015726:	f00b fb51 	bl	8020dcc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	7d1b      	ldrb	r3, [r3, #20]
 801572e:	2b0a      	cmp	r3, #10
 8015730:	d107      	bne.n	8015742 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015732:	6879      	ldr	r1, [r7, #4]
 8015734:	484a      	ldr	r0, [pc, #296]	; (8015860 <tcp_abandon+0x16c>)
 8015736:	f001 f9ef 	bl	8016b18 <tcp_pcb_remove>
    tcp_free(pcb);
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f7ff fd54 	bl	80151e8 <tcp_free>
 8015740:	e082      	b.n	8015848 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8015742:	2300      	movs	r3, #0
 8015744:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8015746:	2300      	movs	r3, #0
 8015748:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801574e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015754:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801575c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	691b      	ldr	r3, [r3, #16]
 8015762:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	7d1b      	ldrb	r3, [r3, #20]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d126      	bne.n	80157ba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	8adb      	ldrh	r3, [r3, #22]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d02e      	beq.n	80157d2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015774:	4b3b      	ldr	r3, [pc, #236]	; (8015864 <tcp_abandon+0x170>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	687a      	ldr	r2, [r7, #4]
 801577a:	429a      	cmp	r2, r3
 801577c:	d105      	bne.n	801578a <tcp_abandon+0x96>
 801577e:	4b39      	ldr	r3, [pc, #228]	; (8015864 <tcp_abandon+0x170>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	68db      	ldr	r3, [r3, #12]
 8015784:	4a37      	ldr	r2, [pc, #220]	; (8015864 <tcp_abandon+0x170>)
 8015786:	6013      	str	r3, [r2, #0]
 8015788:	e013      	b.n	80157b2 <tcp_abandon+0xbe>
 801578a:	4b36      	ldr	r3, [pc, #216]	; (8015864 <tcp_abandon+0x170>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	61fb      	str	r3, [r7, #28]
 8015790:	e00c      	b.n	80157ac <tcp_abandon+0xb8>
 8015792:	69fb      	ldr	r3, [r7, #28]
 8015794:	68db      	ldr	r3, [r3, #12]
 8015796:	687a      	ldr	r2, [r7, #4]
 8015798:	429a      	cmp	r2, r3
 801579a:	d104      	bne.n	80157a6 <tcp_abandon+0xb2>
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	68da      	ldr	r2, [r3, #12]
 80157a0:	69fb      	ldr	r3, [r7, #28]
 80157a2:	60da      	str	r2, [r3, #12]
 80157a4:	e005      	b.n	80157b2 <tcp_abandon+0xbe>
 80157a6:	69fb      	ldr	r3, [r7, #28]
 80157a8:	68db      	ldr	r3, [r3, #12]
 80157aa:	61fb      	str	r3, [r7, #28]
 80157ac:	69fb      	ldr	r3, [r7, #28]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d1ef      	bne.n	8015792 <tcp_abandon+0x9e>
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2200      	movs	r2, #0
 80157b6:	60da      	str	r2, [r3, #12]
 80157b8:	e00b      	b.n	80157d2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	8adb      	ldrh	r3, [r3, #22]
 80157c2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80157c4:	6879      	ldr	r1, [r7, #4]
 80157c6:	4828      	ldr	r0, [pc, #160]	; (8015868 <tcp_abandon+0x174>)
 80157c8:	f001 f9a6 	bl	8016b18 <tcp_pcb_remove>
 80157cc:	4b27      	ldr	r3, [pc, #156]	; (801586c <tcp_abandon+0x178>)
 80157ce:	2201      	movs	r2, #1
 80157d0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d004      	beq.n	80157e4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157de:	4618      	mov	r0, r3
 80157e0:	f000 fe7a 	bl	80164d8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d004      	beq.n	80157f6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157f0:	4618      	mov	r0, r3
 80157f2:	f000 fe71 	bl	80164d8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d004      	beq.n	8015808 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015802:	4618      	mov	r0, r3
 8015804:	f000 fe68 	bl	80164d8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8015808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801580a:	2b00      	cmp	r3, #0
 801580c:	d00e      	beq.n	801582c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801580e:	6879      	ldr	r1, [r7, #4]
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	3304      	adds	r3, #4
 8015814:	687a      	ldr	r2, [r7, #4]
 8015816:	8b12      	ldrh	r2, [r2, #24]
 8015818:	9202      	str	r2, [sp, #8]
 801581a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801581c:	9201      	str	r2, [sp, #4]
 801581e:	9300      	str	r3, [sp, #0]
 8015820:	460b      	mov	r3, r1
 8015822:	697a      	ldr	r2, [r7, #20]
 8015824:	69b9      	ldr	r1, [r7, #24]
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f005 fb42 	bl	801aeb0 <tcp_rst>
    }
    last_state = pcb->state;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	7d1b      	ldrb	r3, [r3, #20]
 8015830:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015832:	6878      	ldr	r0, [r7, #4]
 8015834:	f7ff fcd8 	bl	80151e8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d004      	beq.n	8015848 <tcp_abandon+0x154>
 801583e:	693b      	ldr	r3, [r7, #16]
 8015840:	f06f 010c 	mvn.w	r1, #12
 8015844:	68f8      	ldr	r0, [r7, #12]
 8015846:	4798      	blx	r3
  }
}
 8015848:	3728      	adds	r7, #40	; 0x28
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}
 801584e:	bf00      	nop
 8015850:	08023fe4 	.word	0x08023fe4
 8015854:	08024128 	.word	0x08024128
 8015858:	08024028 	.word	0x08024028
 801585c:	08024144 	.word	0x08024144
 8015860:	20016dc0 	.word	0x20016dc0
 8015864:	20016dbc 	.word	0x20016dbc
 8015868:	20016db0 	.word	0x20016db0
 801586c:	20016dac 	.word	0x20016dac

08015870 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b082      	sub	sp, #8
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015878:	2101      	movs	r1, #1
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f7ff ff3a 	bl	80156f4 <tcp_abandon>
}
 8015880:	bf00      	nop
 8015882:	3708      	adds	r7, #8
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}

08015888 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b084      	sub	sp, #16
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d106      	bne.n	80158a4 <tcp_update_rcv_ann_wnd+0x1c>
 8015896:	4b25      	ldr	r3, [pc, #148]	; (801592c <tcp_update_rcv_ann_wnd+0xa4>)
 8015898:	f240 32a6 	movw	r2, #934	; 0x3a6
 801589c:	4924      	ldr	r1, [pc, #144]	; (8015930 <tcp_update_rcv_ann_wnd+0xa8>)
 801589e:	4825      	ldr	r0, [pc, #148]	; (8015934 <tcp_update_rcv_ann_wnd+0xac>)
 80158a0:	f00b fa94 	bl	8020dcc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80158ac:	4413      	add	r3, r2
 80158ae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158b4:	687a      	ldr	r2, [r7, #4]
 80158b6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80158b8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80158bc:	bf28      	it	cs
 80158be:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80158c2:	b292      	uxth	r2, r2
 80158c4:	4413      	add	r3, r2
 80158c6:	68fa      	ldr	r2, [r7, #12]
 80158c8:	1ad3      	subs	r3, r2, r3
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	db08      	blt.n	80158e0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158da:	68fa      	ldr	r2, [r7, #12]
 80158dc:	1ad3      	subs	r3, r2, r3
 80158de:	e020      	b.n	8015922 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158e8:	1ad3      	subs	r3, r2, r3
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	dd03      	ble.n	80158f6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	2200      	movs	r2, #0
 80158f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80158f4:	e014      	b.n	8015920 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158fe:	1ad3      	subs	r3, r2, r3
 8015900:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015908:	d306      	bcc.n	8015918 <tcp_update_rcv_ann_wnd+0x90>
 801590a:	4b08      	ldr	r3, [pc, #32]	; (801592c <tcp_update_rcv_ann_wnd+0xa4>)
 801590c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8015910:	4909      	ldr	r1, [pc, #36]	; (8015938 <tcp_update_rcv_ann_wnd+0xb0>)
 8015912:	4808      	ldr	r0, [pc, #32]	; (8015934 <tcp_update_rcv_ann_wnd+0xac>)
 8015914:	f00b fa5a 	bl	8020dcc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	b29a      	uxth	r2, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8015920:	2300      	movs	r3, #0
  }
}
 8015922:	4618      	mov	r0, r3
 8015924:	3710      	adds	r7, #16
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
 801592a:	bf00      	nop
 801592c:	08023fe4 	.word	0x08023fe4
 8015930:	08024240 	.word	0x08024240
 8015934:	08024028 	.word	0x08024028
 8015938:	08024264 	.word	0x08024264

0801593c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b084      	sub	sp, #16
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
 8015944:	460b      	mov	r3, r1
 8015946:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d107      	bne.n	801595e <tcp_recved+0x22>
 801594e:	4b1f      	ldr	r3, [pc, #124]	; (80159cc <tcp_recved+0x90>)
 8015950:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015954:	491e      	ldr	r1, [pc, #120]	; (80159d0 <tcp_recved+0x94>)
 8015956:	481f      	ldr	r0, [pc, #124]	; (80159d4 <tcp_recved+0x98>)
 8015958:	f00b fa38 	bl	8020dcc <iprintf>
 801595c:	e032      	b.n	80159c4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	7d1b      	ldrb	r3, [r3, #20]
 8015962:	2b01      	cmp	r3, #1
 8015964:	d106      	bne.n	8015974 <tcp_recved+0x38>
 8015966:	4b19      	ldr	r3, [pc, #100]	; (80159cc <tcp_recved+0x90>)
 8015968:	f240 32d2 	movw	r2, #978	; 0x3d2
 801596c:	491a      	ldr	r1, [pc, #104]	; (80159d8 <tcp_recved+0x9c>)
 801596e:	4819      	ldr	r0, [pc, #100]	; (80159d4 <tcp_recved+0x98>)
 8015970:	f00b fa2c 	bl	8020dcc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015978:	887b      	ldrh	r3, [r7, #2]
 801597a:	4413      	add	r3, r2
 801597c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801597e:	89fb      	ldrh	r3, [r7, #14]
 8015980:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015984:	d804      	bhi.n	8015990 <tcp_recved+0x54>
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801598a:	89fa      	ldrh	r2, [r7, #14]
 801598c:	429a      	cmp	r2, r3
 801598e:	d204      	bcs.n	801599a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015996:	851a      	strh	r2, [r3, #40]	; 0x28
 8015998:	e002      	b.n	80159a0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	89fa      	ldrh	r2, [r7, #14]
 801599e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80159a0:	6878      	ldr	r0, [r7, #4]
 80159a2:	f7ff ff71 	bl	8015888 <tcp_update_rcv_ann_wnd>
 80159a6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80159ae:	d309      	bcc.n	80159c4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	8b5b      	ldrh	r3, [r3, #26]
 80159b4:	f043 0302 	orr.w	r3, r3, #2
 80159b8:	b29a      	uxth	r2, r3
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f004 fcc2 	bl	801a348 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80159c4:	3710      	adds	r7, #16
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}
 80159ca:	bf00      	nop
 80159cc:	08023fe4 	.word	0x08023fe4
 80159d0:	08024280 	.word	0x08024280
 80159d4:	08024028 	.word	0x08024028
 80159d8:	08024298 	.word	0x08024298

080159dc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80159dc:	b480      	push	{r7}
 80159de:	b083      	sub	sp, #12
 80159e0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80159e2:	2300      	movs	r3, #0
 80159e4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80159e6:	4b1e      	ldr	r3, [pc, #120]	; (8015a60 <tcp_new_port+0x84>)
 80159e8:	881b      	ldrh	r3, [r3, #0]
 80159ea:	3301      	adds	r3, #1
 80159ec:	b29a      	uxth	r2, r3
 80159ee:	4b1c      	ldr	r3, [pc, #112]	; (8015a60 <tcp_new_port+0x84>)
 80159f0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80159f2:	4b1b      	ldr	r3, [pc, #108]	; (8015a60 <tcp_new_port+0x84>)
 80159f4:	881b      	ldrh	r3, [r3, #0]
 80159f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80159fa:	4293      	cmp	r3, r2
 80159fc:	d103      	bne.n	8015a06 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80159fe:	4b18      	ldr	r3, [pc, #96]	; (8015a60 <tcp_new_port+0x84>)
 8015a00:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015a04:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015a06:	2300      	movs	r3, #0
 8015a08:	71fb      	strb	r3, [r7, #7]
 8015a0a:	e01e      	b.n	8015a4a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015a0c:	79fb      	ldrb	r3, [r7, #7]
 8015a0e:	4a15      	ldr	r2, [pc, #84]	; (8015a64 <tcp_new_port+0x88>)
 8015a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	603b      	str	r3, [r7, #0]
 8015a18:	e011      	b.n	8015a3e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	8ada      	ldrh	r2, [r3, #22]
 8015a1e:	4b10      	ldr	r3, [pc, #64]	; (8015a60 <tcp_new_port+0x84>)
 8015a20:	881b      	ldrh	r3, [r3, #0]
 8015a22:	429a      	cmp	r2, r3
 8015a24:	d108      	bne.n	8015a38 <tcp_new_port+0x5c>
        n++;
 8015a26:	88bb      	ldrh	r3, [r7, #4]
 8015a28:	3301      	adds	r3, #1
 8015a2a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015a2c:	88bb      	ldrh	r3, [r7, #4]
 8015a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015a32:	d3d8      	bcc.n	80159e6 <tcp_new_port+0xa>
          return 0;
 8015a34:	2300      	movs	r3, #0
 8015a36:	e00d      	b.n	8015a54 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015a38:	683b      	ldr	r3, [r7, #0]
 8015a3a:	68db      	ldr	r3, [r3, #12]
 8015a3c:	603b      	str	r3, [r7, #0]
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d1ea      	bne.n	8015a1a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015a44:	79fb      	ldrb	r3, [r7, #7]
 8015a46:	3301      	adds	r3, #1
 8015a48:	71fb      	strb	r3, [r7, #7]
 8015a4a:	79fb      	ldrb	r3, [r7, #7]
 8015a4c:	2b03      	cmp	r3, #3
 8015a4e:	d9dd      	bls.n	8015a0c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015a50:	4b03      	ldr	r3, [pc, #12]	; (8015a60 <tcp_new_port+0x84>)
 8015a52:	881b      	ldrh	r3, [r3, #0]
}
 8015a54:	4618      	mov	r0, r3
 8015a56:	370c      	adds	r7, #12
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5e:	4770      	bx	lr
 8015a60:	200004f4 	.word	0x200004f4
 8015a64:	08026644 	.word	0x08026644

08015a68 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b08a      	sub	sp, #40	; 0x28
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	60f8      	str	r0, [r7, #12]
 8015a70:	60b9      	str	r1, [r7, #8]
 8015a72:	603b      	str	r3, [r7, #0]
 8015a74:	4613      	mov	r3, r2
 8015a76:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d109      	bne.n	8015a96 <tcp_connect+0x2e>
 8015a82:	4b7d      	ldr	r3, [pc, #500]	; (8015c78 <tcp_connect+0x210>)
 8015a84:	f240 4235 	movw	r2, #1077	; 0x435
 8015a88:	497c      	ldr	r1, [pc, #496]	; (8015c7c <tcp_connect+0x214>)
 8015a8a:	487d      	ldr	r0, [pc, #500]	; (8015c80 <tcp_connect+0x218>)
 8015a8c:	f00b f99e 	bl	8020dcc <iprintf>
 8015a90:	f06f 030f 	mvn.w	r3, #15
 8015a94:	e0ec      	b.n	8015c70 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d109      	bne.n	8015ab0 <tcp_connect+0x48>
 8015a9c:	4b76      	ldr	r3, [pc, #472]	; (8015c78 <tcp_connect+0x210>)
 8015a9e:	f240 4236 	movw	r2, #1078	; 0x436
 8015aa2:	4978      	ldr	r1, [pc, #480]	; (8015c84 <tcp_connect+0x21c>)
 8015aa4:	4876      	ldr	r0, [pc, #472]	; (8015c80 <tcp_connect+0x218>)
 8015aa6:	f00b f991 	bl	8020dcc <iprintf>
 8015aaa:	f06f 030f 	mvn.w	r3, #15
 8015aae:	e0df      	b.n	8015c70 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	7d1b      	ldrb	r3, [r3, #20]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d009      	beq.n	8015acc <tcp_connect+0x64>
 8015ab8:	4b6f      	ldr	r3, [pc, #444]	; (8015c78 <tcp_connect+0x210>)
 8015aba:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8015abe:	4972      	ldr	r1, [pc, #456]	; (8015c88 <tcp_connect+0x220>)
 8015ac0:	486f      	ldr	r0, [pc, #444]	; (8015c80 <tcp_connect+0x218>)
 8015ac2:	f00b f983 	bl	8020dcc <iprintf>
 8015ac6:	f06f 0309 	mvn.w	r3, #9
 8015aca:	e0d1      	b.n	8015c70 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d002      	beq.n	8015ad8 <tcp_connect+0x70>
 8015ad2:	68bb      	ldr	r3, [r7, #8]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	e000      	b.n	8015ada <tcp_connect+0x72>
 8015ad8:	2300      	movs	r3, #0
 8015ada:	68fa      	ldr	r2, [r7, #12]
 8015adc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	88fa      	ldrh	r2, [r7, #6]
 8015ae2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	7a1b      	ldrb	r3, [r3, #8]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d006      	beq.n	8015afa <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	7a1b      	ldrb	r3, [r3, #8]
 8015af0:	4618      	mov	r0, r3
 8015af2:	f7fe fbb3 	bl	801425c <netif_get_by_index>
 8015af6:	6278      	str	r0, [r7, #36]	; 0x24
 8015af8:	e005      	b.n	8015b06 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	3304      	adds	r3, #4
 8015afe:	4618      	mov	r0, r3
 8015b00:	f009 fa52 	bl	801efa8 <ip4_route>
 8015b04:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8015b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d102      	bne.n	8015b12 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8015b0c:	f06f 0303 	mvn.w	r3, #3
 8015b10:	e0ae      	b.n	8015c70 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d003      	beq.n	8015b20 <tcp_connect+0xb8>
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d111      	bne.n	8015b44 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8015b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d002      	beq.n	8015b2c <tcp_connect+0xc4>
 8015b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b28:	3304      	adds	r3, #4
 8015b2a:	e000      	b.n	8015b2e <tcp_connect+0xc6>
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8015b30:	69fb      	ldr	r3, [r7, #28]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d102      	bne.n	8015b3c <tcp_connect+0xd4>
      return ERR_RTE;
 8015b36:	f06f 0303 	mvn.w	r3, #3
 8015b3a:	e099      	b.n	8015c70 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	681a      	ldr	r2, [r3, #0]
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	8adb      	ldrh	r3, [r3, #22]
 8015b48:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	8adb      	ldrh	r3, [r3, #22]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d10c      	bne.n	8015b6c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8015b52:	f7ff ff43 	bl	80159dc <tcp_new_port>
 8015b56:	4603      	mov	r3, r0
 8015b58:	461a      	mov	r2, r3
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	8adb      	ldrh	r3, [r3, #22]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d102      	bne.n	8015b6c <tcp_connect+0x104>
      return ERR_BUF;
 8015b66:	f06f 0301 	mvn.w	r3, #1
 8015b6a:	e081      	b.n	8015c70 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8015b6c:	68f8      	ldr	r0, [r7, #12]
 8015b6e:	f001 f867 	bl	8016c40 <tcp_next_iss>
 8015b72:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	2200      	movs	r2, #0
 8015b78:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	697a      	ldr	r2, [r7, #20]
 8015b7e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	1e5a      	subs	r2, r3, #1
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8015b88:	697b      	ldr	r3, [r7, #20]
 8015b8a:	1e5a      	subs	r2, r3, #1
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	1e5a      	subs	r2, r3, #1
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015bc0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	3304      	adds	r3, #4
 8015bca:	461a      	mov	r2, r3
 8015bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015bce:	f001 f85d 	bl	8016c8c <tcp_eff_send_mss_netif>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	461a      	mov	r2, r3
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	2201      	movs	r2, #1
 8015bde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	683a      	ldr	r2, [r7, #0]
 8015be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8015bea:	2102      	movs	r1, #2
 8015bec:	68f8      	ldr	r0, [r7, #12]
 8015bee:	f004 fabd 	bl	801a16c <tcp_enqueue_flags>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8015bf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d136      	bne.n	8015c6c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	2202      	movs	r2, #2
 8015c02:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8015c04:	8b7b      	ldrh	r3, [r7, #26]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d021      	beq.n	8015c4e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8015c0a:	4b20      	ldr	r3, [pc, #128]	; (8015c8c <tcp_connect+0x224>)
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	68fa      	ldr	r2, [r7, #12]
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d105      	bne.n	8015c20 <tcp_connect+0x1b8>
 8015c14:	4b1d      	ldr	r3, [pc, #116]	; (8015c8c <tcp_connect+0x224>)
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	68db      	ldr	r3, [r3, #12]
 8015c1a:	4a1c      	ldr	r2, [pc, #112]	; (8015c8c <tcp_connect+0x224>)
 8015c1c:	6013      	str	r3, [r2, #0]
 8015c1e:	e013      	b.n	8015c48 <tcp_connect+0x1e0>
 8015c20:	4b1a      	ldr	r3, [pc, #104]	; (8015c8c <tcp_connect+0x224>)
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	623b      	str	r3, [r7, #32]
 8015c26:	e00c      	b.n	8015c42 <tcp_connect+0x1da>
 8015c28:	6a3b      	ldr	r3, [r7, #32]
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	68fa      	ldr	r2, [r7, #12]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d104      	bne.n	8015c3c <tcp_connect+0x1d4>
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	68da      	ldr	r2, [r3, #12]
 8015c36:	6a3b      	ldr	r3, [r7, #32]
 8015c38:	60da      	str	r2, [r3, #12]
 8015c3a:	e005      	b.n	8015c48 <tcp_connect+0x1e0>
 8015c3c:	6a3b      	ldr	r3, [r7, #32]
 8015c3e:	68db      	ldr	r3, [r3, #12]
 8015c40:	623b      	str	r3, [r7, #32]
 8015c42:	6a3b      	ldr	r3, [r7, #32]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d1ef      	bne.n	8015c28 <tcp_connect+0x1c0>
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8015c4e:	4b10      	ldr	r3, [pc, #64]	; (8015c90 <tcp_connect+0x228>)
 8015c50:	681a      	ldr	r2, [r3, #0]
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	60da      	str	r2, [r3, #12]
 8015c56:	4a0e      	ldr	r2, [pc, #56]	; (8015c90 <tcp_connect+0x228>)
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	6013      	str	r3, [r2, #0]
 8015c5c:	f005 faea 	bl	801b234 <tcp_timer_needed>
 8015c60:	4b0c      	ldr	r3, [pc, #48]	; (8015c94 <tcp_connect+0x22c>)
 8015c62:	2201      	movs	r2, #1
 8015c64:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8015c66:	68f8      	ldr	r0, [r7, #12]
 8015c68:	f004 fb6e 	bl	801a348 <tcp_output>
  }
  return ret;
 8015c6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	3728      	adds	r7, #40	; 0x28
 8015c74:	46bd      	mov	sp, r7
 8015c76:	bd80      	pop	{r7, pc}
 8015c78:	08023fe4 	.word	0x08023fe4
 8015c7c:	080242c0 	.word	0x080242c0
 8015c80:	08024028 	.word	0x08024028
 8015c84:	080242dc 	.word	0x080242dc
 8015c88:	080242f8 	.word	0x080242f8
 8015c8c:	20016dbc 	.word	0x20016dbc
 8015c90:	20016db0 	.word	0x20016db0
 8015c94:	20016dac 	.word	0x20016dac

08015c98 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015c98:	b5b0      	push	{r4, r5, r7, lr}
 8015c9a:	b090      	sub	sp, #64	; 0x40
 8015c9c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8015ca4:	4b94      	ldr	r3, [pc, #592]	; (8015ef8 <tcp_slowtmr+0x260>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	3301      	adds	r3, #1
 8015caa:	4a93      	ldr	r2, [pc, #588]	; (8015ef8 <tcp_slowtmr+0x260>)
 8015cac:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015cae:	4b93      	ldr	r3, [pc, #588]	; (8015efc <tcp_slowtmr+0x264>)
 8015cb0:	781b      	ldrb	r3, [r3, #0]
 8015cb2:	3301      	adds	r3, #1
 8015cb4:	b2da      	uxtb	r2, r3
 8015cb6:	4b91      	ldr	r3, [pc, #580]	; (8015efc <tcp_slowtmr+0x264>)
 8015cb8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8015cba:	2300      	movs	r3, #0
 8015cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8015cbe:	4b90      	ldr	r3, [pc, #576]	; (8015f00 <tcp_slowtmr+0x268>)
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8015cc4:	e29f      	b.n	8016206 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc8:	7d1b      	ldrb	r3, [r3, #20]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d106      	bne.n	8015cdc <tcp_slowtmr+0x44>
 8015cce:	4b8d      	ldr	r3, [pc, #564]	; (8015f04 <tcp_slowtmr+0x26c>)
 8015cd0:	f240 42be 	movw	r2, #1214	; 0x4be
 8015cd4:	498c      	ldr	r1, [pc, #560]	; (8015f08 <tcp_slowtmr+0x270>)
 8015cd6:	488d      	ldr	r0, [pc, #564]	; (8015f0c <tcp_slowtmr+0x274>)
 8015cd8:	f00b f878 	bl	8020dcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cde:	7d1b      	ldrb	r3, [r3, #20]
 8015ce0:	2b01      	cmp	r3, #1
 8015ce2:	d106      	bne.n	8015cf2 <tcp_slowtmr+0x5a>
 8015ce4:	4b87      	ldr	r3, [pc, #540]	; (8015f04 <tcp_slowtmr+0x26c>)
 8015ce6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8015cea:	4989      	ldr	r1, [pc, #548]	; (8015f10 <tcp_slowtmr+0x278>)
 8015cec:	4887      	ldr	r0, [pc, #540]	; (8015f0c <tcp_slowtmr+0x274>)
 8015cee:	f00b f86d 	bl	8020dcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf4:	7d1b      	ldrb	r3, [r3, #20]
 8015cf6:	2b0a      	cmp	r3, #10
 8015cf8:	d106      	bne.n	8015d08 <tcp_slowtmr+0x70>
 8015cfa:	4b82      	ldr	r3, [pc, #520]	; (8015f04 <tcp_slowtmr+0x26c>)
 8015cfc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8015d00:	4984      	ldr	r1, [pc, #528]	; (8015f14 <tcp_slowtmr+0x27c>)
 8015d02:	4882      	ldr	r0, [pc, #520]	; (8015f0c <tcp_slowtmr+0x274>)
 8015d04:	f00b f862 	bl	8020dcc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d0a:	7f9a      	ldrb	r2, [r3, #30]
 8015d0c:	4b7b      	ldr	r3, [pc, #492]	; (8015efc <tcp_slowtmr+0x264>)
 8015d0e:	781b      	ldrb	r3, [r3, #0]
 8015d10:	429a      	cmp	r2, r3
 8015d12:	d105      	bne.n	8015d20 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8015d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d1a:	68db      	ldr	r3, [r3, #12]
 8015d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8015d1e:	e272      	b.n	8016206 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8015d20:	4b76      	ldr	r3, [pc, #472]	; (8015efc <tcp_slowtmr+0x264>)
 8015d22:	781a      	ldrb	r2, [r3, #0]
 8015d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d26:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8015d2e:	2300      	movs	r3, #0
 8015d30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d36:	7d1b      	ldrb	r3, [r3, #20]
 8015d38:	2b02      	cmp	r3, #2
 8015d3a:	d10a      	bne.n	8015d52 <tcp_slowtmr+0xba>
 8015d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d42:	2b05      	cmp	r3, #5
 8015d44:	d905      	bls.n	8015d52 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8015d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d50:	e11e      	b.n	8015f90 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d58:	2b0b      	cmp	r3, #11
 8015d5a:	d905      	bls.n	8015d68 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8015d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d60:	3301      	adds	r3, #1
 8015d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d66:	e113      	b.n	8015f90 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8015d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d075      	beq.n	8015e5e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d006      	beq.n	8015d88 <tcp_slowtmr+0xf0>
 8015d7a:	4b62      	ldr	r3, [pc, #392]	; (8015f04 <tcp_slowtmr+0x26c>)
 8015d7c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8015d80:	4965      	ldr	r1, [pc, #404]	; (8015f18 <tcp_slowtmr+0x280>)
 8015d82:	4862      	ldr	r0, [pc, #392]	; (8015f0c <tcp_slowtmr+0x274>)
 8015d84:	f00b f822 	bl	8020dcc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d106      	bne.n	8015d9e <tcp_slowtmr+0x106>
 8015d90:	4b5c      	ldr	r3, [pc, #368]	; (8015f04 <tcp_slowtmr+0x26c>)
 8015d92:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8015d96:	4961      	ldr	r1, [pc, #388]	; (8015f1c <tcp_slowtmr+0x284>)
 8015d98:	485c      	ldr	r0, [pc, #368]	; (8015f0c <tcp_slowtmr+0x274>)
 8015d9a:	f00b f817 	bl	8020dcc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015da0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015da4:	2b0b      	cmp	r3, #11
 8015da6:	d905      	bls.n	8015db4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8015da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015dac:	3301      	adds	r3, #1
 8015dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015db2:	e0ed      	b.n	8015f90 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015dba:	3b01      	subs	r3, #1
 8015dbc:	4a58      	ldr	r2, [pc, #352]	; (8015f20 <tcp_slowtmr+0x288>)
 8015dbe:	5cd3      	ldrb	r3, [r2, r3]
 8015dc0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015dc8:	7c7a      	ldrb	r2, [r7, #17]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d907      	bls.n	8015dde <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8015dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dd0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015dd4:	3301      	adds	r3, #1
 8015dd6:	b2da      	uxtb	r2, r3
 8015dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dda:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8015dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015de0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015de4:	7c7a      	ldrb	r2, [r7, #17]
 8015de6:	429a      	cmp	r2, r3
 8015de8:	f200 80d2 	bhi.w	8015f90 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8015dec:	2301      	movs	r3, #1
 8015dee:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8015df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d108      	bne.n	8015e0c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015dfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015dfc:	f005 f94c 	bl	801b098 <tcp_zero_window_probe>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d014      	beq.n	8015e30 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8015e06:	2300      	movs	r3, #0
 8015e08:	623b      	str	r3, [r7, #32]
 8015e0a:	e011      	b.n	8015e30 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015e12:	4619      	mov	r1, r3
 8015e14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015e16:	f004 f811 	bl	8019e3c <tcp_split_unsent_seg>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d107      	bne.n	8015e30 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8015e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015e22:	f004 fa91 	bl	801a348 <tcp_output>
 8015e26:	4603      	mov	r3, r0
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d101      	bne.n	8015e30 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8015e30:	6a3b      	ldr	r3, [r7, #32]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	f000 80ac 	beq.w	8015f90 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8015e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015e46:	2b06      	cmp	r3, #6
 8015e48:	f200 80a2 	bhi.w	8015f90 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015e52:	3301      	adds	r3, #1
 8015e54:	b2da      	uxtb	r2, r3
 8015e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e58:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8015e5c:	e098      	b.n	8015f90 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	db0f      	blt.n	8015e88 <tcp_slowtmr+0x1f0>
 8015e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015e6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015e72:	4293      	cmp	r3, r2
 8015e74:	d008      	beq.n	8015e88 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8015e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015e7c:	b29b      	uxth	r3, r3
 8015e7e:	3301      	adds	r3, #1
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	b21a      	sxth	r2, r3
 8015e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e86:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8015e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e8a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8015e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e90:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015e94:	429a      	cmp	r2, r3
 8015e96:	db7b      	blt.n	8015f90 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015e98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015e9a:	f004 fd47 	bl	801a92c <tcp_rexmit_rto_prepare>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d007      	beq.n	8015eb4 <tcp_slowtmr+0x21c>
 8015ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d171      	bne.n	8015f90 <tcp_slowtmr+0x2f8>
 8015eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d06d      	beq.n	8015f90 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8015eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb6:	7d1b      	ldrb	r3, [r3, #20]
 8015eb8:	2b02      	cmp	r3, #2
 8015eba:	d03a      	beq.n	8015f32 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ec2:	2b0c      	cmp	r3, #12
 8015ec4:	bf28      	it	cs
 8015ec6:	230c      	movcs	r3, #12
 8015ec8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ecc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015ed0:	10db      	asrs	r3, r3, #3
 8015ed2:	b21b      	sxth	r3, r3
 8015ed4:	461a      	mov	r2, r3
 8015ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015edc:	4413      	add	r3, r2
 8015ede:	7efa      	ldrb	r2, [r7, #27]
 8015ee0:	4910      	ldr	r1, [pc, #64]	; (8015f24 <tcp_slowtmr+0x28c>)
 8015ee2:	5c8a      	ldrb	r2, [r1, r2]
 8015ee4:	4093      	lsls	r3, r2
 8015ee6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015ee8:	697b      	ldr	r3, [r7, #20]
 8015eea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015eee:	4293      	cmp	r3, r2
 8015ef0:	dc1a      	bgt.n	8015f28 <tcp_slowtmr+0x290>
 8015ef2:	697b      	ldr	r3, [r7, #20]
 8015ef4:	b21a      	sxth	r2, r3
 8015ef6:	e019      	b.n	8015f2c <tcp_slowtmr+0x294>
 8015ef8:	20016db4 	.word	0x20016db4
 8015efc:	200056ea 	.word	0x200056ea
 8015f00:	20016db0 	.word	0x20016db0
 8015f04:	08023fe4 	.word	0x08023fe4
 8015f08:	08024328 	.word	0x08024328
 8015f0c:	08024028 	.word	0x08024028
 8015f10:	08024354 	.word	0x08024354
 8015f14:	08024380 	.word	0x08024380
 8015f18:	080243b0 	.word	0x080243b0
 8015f1c:	080243e4 	.word	0x080243e4
 8015f20:	0802663c 	.word	0x0802663c
 8015f24:	0802662c 	.word	0x0802662c
 8015f28:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8015f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f34:	2200      	movs	r2, #0
 8015f36:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015f44:	4293      	cmp	r3, r2
 8015f46:	bf28      	it	cs
 8015f48:	4613      	movcs	r3, r2
 8015f4a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015f4c:	8a7b      	ldrh	r3, [r7, #18]
 8015f4e:	085b      	lsrs	r3, r3, #1
 8015f50:	b29a      	uxth	r2, r3
 8015f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f62:	005b      	lsls	r3, r3, #1
 8015f64:	b29b      	uxth	r3, r3
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d206      	bcs.n	8015f78 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f6e:	005b      	lsls	r3, r3, #1
 8015f70:	b29a      	uxth	r2, r3
 8015f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8015f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f7a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8015f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f84:	2200      	movs	r2, #0
 8015f86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8015f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f8c:	f004 fd3e 	bl	801aa0c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8015f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f92:	7d1b      	ldrb	r3, [r3, #20]
 8015f94:	2b06      	cmp	r3, #6
 8015f96:	d111      	bne.n	8015fbc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8015f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f9a:	8b5b      	ldrh	r3, [r3, #26]
 8015f9c:	f003 0310 	and.w	r3, r3, #16
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d00b      	beq.n	8015fbc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015fa4:	4b9d      	ldr	r3, [pc, #628]	; (801621c <tcp_slowtmr+0x584>)
 8015fa6:	681a      	ldr	r2, [r3, #0]
 8015fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015faa:	6a1b      	ldr	r3, [r3, #32]
 8015fac:	1ad3      	subs	r3, r2, r3
 8015fae:	2b28      	cmp	r3, #40	; 0x28
 8015fb0:	d904      	bls.n	8015fbc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8015fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fb6:	3301      	adds	r3, #1
 8015fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fbe:	7a5b      	ldrb	r3, [r3, #9]
 8015fc0:	f003 0308 	and.w	r3, r3, #8
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d04c      	beq.n	8016062 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8015fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015fcc:	2b04      	cmp	r3, #4
 8015fce:	d003      	beq.n	8015fd8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8015fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015fd4:	2b07      	cmp	r3, #7
 8015fd6:	d144      	bne.n	8016062 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015fd8:	4b90      	ldr	r3, [pc, #576]	; (801621c <tcp_slowtmr+0x584>)
 8015fda:	681a      	ldr	r2, [r3, #0]
 8015fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fde:	6a1b      	ldr	r3, [r3, #32]
 8015fe0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015fe8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8015fec:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8015ff0:	498b      	ldr	r1, [pc, #556]	; (8016220 <tcp_slowtmr+0x588>)
 8015ff2:	fba1 1303 	umull	r1, r3, r1, r3
 8015ff6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d90a      	bls.n	8016012 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8015ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016000:	3301      	adds	r3, #1
 8016002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8016006:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801600a:	3301      	adds	r3, #1
 801600c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016010:	e027      	b.n	8016062 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016012:	4b82      	ldr	r3, [pc, #520]	; (801621c <tcp_slowtmr+0x584>)
 8016014:	681a      	ldr	r2, [r3, #0]
 8016016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016018:	6a1b      	ldr	r3, [r3, #32]
 801601a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801601e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016024:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016028:	4618      	mov	r0, r3
 801602a:	4b7e      	ldr	r3, [pc, #504]	; (8016224 <tcp_slowtmr+0x58c>)
 801602c:	fb03 f300 	mul.w	r3, r3, r0
 8016030:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016032:	497b      	ldr	r1, [pc, #492]	; (8016220 <tcp_slowtmr+0x588>)
 8016034:	fba1 1303 	umull	r1, r3, r1, r3
 8016038:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801603a:	429a      	cmp	r2, r3
 801603c:	d911      	bls.n	8016062 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801603e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016040:	f004 ffea 	bl	801b018 <tcp_keepalive>
 8016044:	4603      	mov	r3, r0
 8016046:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801604a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801604e:	2b00      	cmp	r3, #0
 8016050:	d107      	bne.n	8016062 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8016052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016054:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016058:	3301      	adds	r3, #1
 801605a:	b2da      	uxtb	r2, r3
 801605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801605e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8016062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016066:	2b00      	cmp	r3, #0
 8016068:	d011      	beq.n	801608e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801606a:	4b6c      	ldr	r3, [pc, #432]	; (801621c <tcp_slowtmr+0x584>)
 801606c:	681a      	ldr	r2, [r3, #0]
 801606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016070:	6a1b      	ldr	r3, [r3, #32]
 8016072:	1ad2      	subs	r2, r2, r3
 8016074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016076:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801607a:	4619      	mov	r1, r3
 801607c:	460b      	mov	r3, r1
 801607e:	005b      	lsls	r3, r3, #1
 8016080:	440b      	add	r3, r1
 8016082:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016084:	429a      	cmp	r2, r3
 8016086:	d302      	bcc.n	801608e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8016088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801608a:	f000 fea9 	bl	8016de0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016090:	7d1b      	ldrb	r3, [r3, #20]
 8016092:	2b03      	cmp	r3, #3
 8016094:	d10b      	bne.n	80160ae <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016096:	4b61      	ldr	r3, [pc, #388]	; (801621c <tcp_slowtmr+0x584>)
 8016098:	681a      	ldr	r2, [r3, #0]
 801609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801609c:	6a1b      	ldr	r3, [r3, #32]
 801609e:	1ad3      	subs	r3, r2, r3
 80160a0:	2b28      	cmp	r3, #40	; 0x28
 80160a2:	d904      	bls.n	80160ae <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80160a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160a8:	3301      	adds	r3, #1
 80160aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80160ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b0:	7d1b      	ldrb	r3, [r3, #20]
 80160b2:	2b09      	cmp	r3, #9
 80160b4:	d10b      	bne.n	80160ce <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80160b6:	4b59      	ldr	r3, [pc, #356]	; (801621c <tcp_slowtmr+0x584>)
 80160b8:	681a      	ldr	r2, [r3, #0]
 80160ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160bc:	6a1b      	ldr	r3, [r3, #32]
 80160be:	1ad3      	subs	r3, r2, r3
 80160c0:	2bf0      	cmp	r3, #240	; 0xf0
 80160c2:	d904      	bls.n	80160ce <tcp_slowtmr+0x436>
        ++pcb_remove;
 80160c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160c8:	3301      	adds	r3, #1
 80160ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80160ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d060      	beq.n	8016198 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80160d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80160dc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80160de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80160e0:	f000 fcca 	bl	8016a78 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80160e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d010      	beq.n	801610c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80160ea:	4b4f      	ldr	r3, [pc, #316]	; (8016228 <tcp_slowtmr+0x590>)
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160f0:	429a      	cmp	r2, r3
 80160f2:	d106      	bne.n	8016102 <tcp_slowtmr+0x46a>
 80160f4:	4b4d      	ldr	r3, [pc, #308]	; (801622c <tcp_slowtmr+0x594>)
 80160f6:	f240 526d 	movw	r2, #1389	; 0x56d
 80160fa:	494d      	ldr	r1, [pc, #308]	; (8016230 <tcp_slowtmr+0x598>)
 80160fc:	484d      	ldr	r0, [pc, #308]	; (8016234 <tcp_slowtmr+0x59c>)
 80160fe:	f00a fe65 	bl	8020dcc <iprintf>
        prev->next = pcb->next;
 8016102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016104:	68da      	ldr	r2, [r3, #12]
 8016106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016108:	60da      	str	r2, [r3, #12]
 801610a:	e00f      	b.n	801612c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801610c:	4b46      	ldr	r3, [pc, #280]	; (8016228 <tcp_slowtmr+0x590>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016112:	429a      	cmp	r2, r3
 8016114:	d006      	beq.n	8016124 <tcp_slowtmr+0x48c>
 8016116:	4b45      	ldr	r3, [pc, #276]	; (801622c <tcp_slowtmr+0x594>)
 8016118:	f240 5271 	movw	r2, #1393	; 0x571
 801611c:	4946      	ldr	r1, [pc, #280]	; (8016238 <tcp_slowtmr+0x5a0>)
 801611e:	4845      	ldr	r0, [pc, #276]	; (8016234 <tcp_slowtmr+0x59c>)
 8016120:	f00a fe54 	bl	8020dcc <iprintf>
        tcp_active_pcbs = pcb->next;
 8016124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016126:	68db      	ldr	r3, [r3, #12]
 8016128:	4a3f      	ldr	r2, [pc, #252]	; (8016228 <tcp_slowtmr+0x590>)
 801612a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801612c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016130:	2b00      	cmp	r3, #0
 8016132:	d013      	beq.n	801615c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016136:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801613a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801613c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016140:	3304      	adds	r3, #4
 8016142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016144:	8ad2      	ldrh	r2, [r2, #22]
 8016146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016148:	8b09      	ldrh	r1, [r1, #24]
 801614a:	9102      	str	r1, [sp, #8]
 801614c:	9201      	str	r2, [sp, #4]
 801614e:	9300      	str	r3, [sp, #0]
 8016150:	462b      	mov	r3, r5
 8016152:	4622      	mov	r2, r4
 8016154:	4601      	mov	r1, r0
 8016156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016158:	f004 feaa 	bl	801aeb0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801615e:	691b      	ldr	r3, [r3, #16]
 8016160:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016164:	7d1b      	ldrb	r3, [r3, #20]
 8016166:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801616a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801616e:	68db      	ldr	r3, [r3, #12]
 8016170:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016172:	6838      	ldr	r0, [r7, #0]
 8016174:	f7ff f838 	bl	80151e8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8016178:	4b30      	ldr	r3, [pc, #192]	; (801623c <tcp_slowtmr+0x5a4>)
 801617a:	2200      	movs	r2, #0
 801617c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d004      	beq.n	801618e <tcp_slowtmr+0x4f6>
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	f06f 010c 	mvn.w	r1, #12
 801618a:	68b8      	ldr	r0, [r7, #8]
 801618c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801618e:	4b2b      	ldr	r3, [pc, #172]	; (801623c <tcp_slowtmr+0x5a4>)
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d037      	beq.n	8016206 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8016196:	e590      	b.n	8015cba <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8016198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801619a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801619e:	68db      	ldr	r3, [r3, #12]
 80161a0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80161a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a4:	7f1b      	ldrb	r3, [r3, #28]
 80161a6:	3301      	adds	r3, #1
 80161a8:	b2da      	uxtb	r2, r3
 80161aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80161ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b0:	7f1a      	ldrb	r2, [r3, #28]
 80161b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b4:	7f5b      	ldrb	r3, [r3, #29]
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d325      	bcc.n	8016206 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80161ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161bc:	2200      	movs	r2, #0
 80161be:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80161c0:	4b1e      	ldr	r3, [pc, #120]	; (801623c <tcp_slowtmr+0x5a4>)
 80161c2:	2200      	movs	r2, #0
 80161c4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80161c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d00b      	beq.n	80161e8 <tcp_slowtmr+0x550>
 80161d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80161d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80161d8:	6912      	ldr	r2, [r2, #16]
 80161da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80161dc:	4610      	mov	r0, r2
 80161de:	4798      	blx	r3
 80161e0:	4603      	mov	r3, r0
 80161e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80161e6:	e002      	b.n	80161ee <tcp_slowtmr+0x556>
 80161e8:	2300      	movs	r3, #0
 80161ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80161ee:	4b13      	ldr	r3, [pc, #76]	; (801623c <tcp_slowtmr+0x5a4>)
 80161f0:	781b      	ldrb	r3, [r3, #0]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d000      	beq.n	80161f8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80161f6:	e560      	b.n	8015cba <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80161f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d102      	bne.n	8016206 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8016200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016202:	f004 f8a1 	bl	801a348 <tcp_output>
  while (pcb != NULL) {
 8016206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016208:	2b00      	cmp	r3, #0
 801620a:	f47f ad5c 	bne.w	8015cc6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801620e:	2300      	movs	r3, #0
 8016210:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8016212:	4b0b      	ldr	r3, [pc, #44]	; (8016240 <tcp_slowtmr+0x5a8>)
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016218:	e067      	b.n	80162ea <tcp_slowtmr+0x652>
 801621a:	bf00      	nop
 801621c:	20016db4 	.word	0x20016db4
 8016220:	10624dd3 	.word	0x10624dd3
 8016224:	000124f8 	.word	0x000124f8
 8016228:	20016db0 	.word	0x20016db0
 801622c:	08023fe4 	.word	0x08023fe4
 8016230:	0802441c 	.word	0x0802441c
 8016234:	08024028 	.word	0x08024028
 8016238:	08024448 	.word	0x08024448
 801623c:	20016dac 	.word	0x20016dac
 8016240:	20016dc0 	.word	0x20016dc0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016246:	7d1b      	ldrb	r3, [r3, #20]
 8016248:	2b0a      	cmp	r3, #10
 801624a:	d006      	beq.n	801625a <tcp_slowtmr+0x5c2>
 801624c:	4b2b      	ldr	r3, [pc, #172]	; (80162fc <tcp_slowtmr+0x664>)
 801624e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8016252:	492b      	ldr	r1, [pc, #172]	; (8016300 <tcp_slowtmr+0x668>)
 8016254:	482b      	ldr	r0, [pc, #172]	; (8016304 <tcp_slowtmr+0x66c>)
 8016256:	f00a fdb9 	bl	8020dcc <iprintf>
    pcb_remove = 0;
 801625a:	2300      	movs	r3, #0
 801625c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016260:	4b29      	ldr	r3, [pc, #164]	; (8016308 <tcp_slowtmr+0x670>)
 8016262:	681a      	ldr	r2, [r3, #0]
 8016264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016266:	6a1b      	ldr	r3, [r3, #32]
 8016268:	1ad3      	subs	r3, r2, r3
 801626a:	2bf0      	cmp	r3, #240	; 0xf0
 801626c:	d904      	bls.n	8016278 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801626e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016272:	3301      	adds	r3, #1
 8016274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801627c:	2b00      	cmp	r3, #0
 801627e:	d02f      	beq.n	80162e0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016280:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016282:	f000 fbf9 	bl	8016a78 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8016286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016288:	2b00      	cmp	r3, #0
 801628a:	d010      	beq.n	80162ae <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801628c:	4b1f      	ldr	r3, [pc, #124]	; (801630c <tcp_slowtmr+0x674>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016292:	429a      	cmp	r2, r3
 8016294:	d106      	bne.n	80162a4 <tcp_slowtmr+0x60c>
 8016296:	4b19      	ldr	r3, [pc, #100]	; (80162fc <tcp_slowtmr+0x664>)
 8016298:	f240 52af 	movw	r2, #1455	; 0x5af
 801629c:	491c      	ldr	r1, [pc, #112]	; (8016310 <tcp_slowtmr+0x678>)
 801629e:	4819      	ldr	r0, [pc, #100]	; (8016304 <tcp_slowtmr+0x66c>)
 80162a0:	f00a fd94 	bl	8020dcc <iprintf>
        prev->next = pcb->next;
 80162a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a6:	68da      	ldr	r2, [r3, #12]
 80162a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162aa:	60da      	str	r2, [r3, #12]
 80162ac:	e00f      	b.n	80162ce <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80162ae:	4b17      	ldr	r3, [pc, #92]	; (801630c <tcp_slowtmr+0x674>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d006      	beq.n	80162c6 <tcp_slowtmr+0x62e>
 80162b8:	4b10      	ldr	r3, [pc, #64]	; (80162fc <tcp_slowtmr+0x664>)
 80162ba:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80162be:	4915      	ldr	r1, [pc, #84]	; (8016314 <tcp_slowtmr+0x67c>)
 80162c0:	4810      	ldr	r0, [pc, #64]	; (8016304 <tcp_slowtmr+0x66c>)
 80162c2:	f00a fd83 	bl	8020dcc <iprintf>
        tcp_tw_pcbs = pcb->next;
 80162c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c8:	68db      	ldr	r3, [r3, #12]
 80162ca:	4a10      	ldr	r2, [pc, #64]	; (801630c <tcp_slowtmr+0x674>)
 80162cc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80162ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162d0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80162d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80162d8:	69f8      	ldr	r0, [r7, #28]
 80162da:	f7fe ff85 	bl	80151e8 <tcp_free>
 80162de:	e004      	b.n	80162ea <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80162e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80162e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e6:	68db      	ldr	r3, [r3, #12]
 80162e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80162ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d1a9      	bne.n	8016244 <tcp_slowtmr+0x5ac>
    }
  }
}
 80162f0:	bf00      	nop
 80162f2:	bf00      	nop
 80162f4:	3730      	adds	r7, #48	; 0x30
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bdb0      	pop	{r4, r5, r7, pc}
 80162fa:	bf00      	nop
 80162fc:	08023fe4 	.word	0x08023fe4
 8016300:	08024474 	.word	0x08024474
 8016304:	08024028 	.word	0x08024028
 8016308:	20016db4 	.word	0x20016db4
 801630c:	20016dc0 	.word	0x20016dc0
 8016310:	080244a4 	.word	0x080244a4
 8016314:	080244cc 	.word	0x080244cc

08016318 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b082      	sub	sp, #8
 801631c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801631e:	4b2d      	ldr	r3, [pc, #180]	; (80163d4 <tcp_fasttmr+0xbc>)
 8016320:	781b      	ldrb	r3, [r3, #0]
 8016322:	3301      	adds	r3, #1
 8016324:	b2da      	uxtb	r2, r3
 8016326:	4b2b      	ldr	r3, [pc, #172]	; (80163d4 <tcp_fasttmr+0xbc>)
 8016328:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801632a:	4b2b      	ldr	r3, [pc, #172]	; (80163d8 <tcp_fasttmr+0xc0>)
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016330:	e048      	b.n	80163c4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	7f9a      	ldrb	r2, [r3, #30]
 8016336:	4b27      	ldr	r3, [pc, #156]	; (80163d4 <tcp_fasttmr+0xbc>)
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	429a      	cmp	r2, r3
 801633c:	d03f      	beq.n	80163be <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801633e:	4b25      	ldr	r3, [pc, #148]	; (80163d4 <tcp_fasttmr+0xbc>)
 8016340:	781a      	ldrb	r2, [r3, #0]
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	8b5b      	ldrh	r3, [r3, #26]
 801634a:	f003 0301 	and.w	r3, r3, #1
 801634e:	2b00      	cmp	r3, #0
 8016350:	d010      	beq.n	8016374 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	8b5b      	ldrh	r3, [r3, #26]
 8016356:	f043 0302 	orr.w	r3, r3, #2
 801635a:	b29a      	uxth	r2, r3
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f003 fff1 	bl	801a348 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	8b5b      	ldrh	r3, [r3, #26]
 801636a:	f023 0303 	bic.w	r3, r3, #3
 801636e:	b29a      	uxth	r2, r3
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	8b5b      	ldrh	r3, [r3, #26]
 8016378:	f003 0308 	and.w	r3, r3, #8
 801637c:	2b00      	cmp	r3, #0
 801637e:	d009      	beq.n	8016394 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	8b5b      	ldrh	r3, [r3, #26]
 8016384:	f023 0308 	bic.w	r3, r3, #8
 8016388:	b29a      	uxth	r2, r3
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801638e:	6878      	ldr	r0, [r7, #4]
 8016390:	f7ff f8be 	bl	8015510 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	68db      	ldr	r3, [r3, #12]
 8016398:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d00a      	beq.n	80163b8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80163a2:	4b0e      	ldr	r3, [pc, #56]	; (80163dc <tcp_fasttmr+0xc4>)
 80163a4:	2200      	movs	r2, #0
 80163a6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f000 f819 	bl	80163e0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80163ae:	4b0b      	ldr	r3, [pc, #44]	; (80163dc <tcp_fasttmr+0xc4>)
 80163b0:	781b      	ldrb	r3, [r3, #0]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d000      	beq.n	80163b8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80163b6:	e7b8      	b.n	801632a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80163b8:	683b      	ldr	r3, [r7, #0]
 80163ba:	607b      	str	r3, [r7, #4]
 80163bc:	e002      	b.n	80163c4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	68db      	ldr	r3, [r3, #12]
 80163c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d1b3      	bne.n	8016332 <tcp_fasttmr+0x1a>
    }
  }
}
 80163ca:	bf00      	nop
 80163cc:	bf00      	nop
 80163ce:	3708      	adds	r7, #8
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}
 80163d4:	200056ea 	.word	0x200056ea
 80163d8:	20016db0 	.word	0x20016db0
 80163dc:	20016dac 	.word	0x20016dac

080163e0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80163e0:	b590      	push	{r4, r7, lr}
 80163e2:	b085      	sub	sp, #20
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d109      	bne.n	8016402 <tcp_process_refused_data+0x22>
 80163ee:	4b37      	ldr	r3, [pc, #220]	; (80164cc <tcp_process_refused_data+0xec>)
 80163f0:	f240 6209 	movw	r2, #1545	; 0x609
 80163f4:	4936      	ldr	r1, [pc, #216]	; (80164d0 <tcp_process_refused_data+0xf0>)
 80163f6:	4837      	ldr	r0, [pc, #220]	; (80164d4 <tcp_process_refused_data+0xf4>)
 80163f8:	f00a fce8 	bl	8020dcc <iprintf>
 80163fc:	f06f 030f 	mvn.w	r3, #15
 8016400:	e060      	b.n	80164c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016406:	7b5b      	ldrb	r3, [r3, #13]
 8016408:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801640e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	2200      	movs	r2, #0
 8016414:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801641c:	2b00      	cmp	r3, #0
 801641e:	d00b      	beq.n	8016438 <tcp_process_refused_data+0x58>
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6918      	ldr	r0, [r3, #16]
 801642a:	2300      	movs	r3, #0
 801642c:	68ba      	ldr	r2, [r7, #8]
 801642e:	6879      	ldr	r1, [r7, #4]
 8016430:	47a0      	blx	r4
 8016432:	4603      	mov	r3, r0
 8016434:	73fb      	strb	r3, [r7, #15]
 8016436:	e007      	b.n	8016448 <tcp_process_refused_data+0x68>
 8016438:	2300      	movs	r3, #0
 801643a:	68ba      	ldr	r2, [r7, #8]
 801643c:	6879      	ldr	r1, [r7, #4]
 801643e:	2000      	movs	r0, #0
 8016440:	f000 f8a4 	bl	801658c <tcp_recv_null>
 8016444:	4603      	mov	r3, r0
 8016446:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d12a      	bne.n	80164a6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016450:	7bbb      	ldrb	r3, [r7, #14]
 8016452:	f003 0320 	and.w	r3, r3, #32
 8016456:	2b00      	cmp	r3, #0
 8016458:	d033      	beq.n	80164c2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801645e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016462:	d005      	beq.n	8016470 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016468:	3301      	adds	r3, #1
 801646a:	b29a      	uxth	r2, r3
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016476:	2b00      	cmp	r3, #0
 8016478:	d00b      	beq.n	8016492 <tcp_process_refused_data+0xb2>
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	6918      	ldr	r0, [r3, #16]
 8016484:	2300      	movs	r3, #0
 8016486:	2200      	movs	r2, #0
 8016488:	6879      	ldr	r1, [r7, #4]
 801648a:	47a0      	blx	r4
 801648c:	4603      	mov	r3, r0
 801648e:	73fb      	strb	r3, [r7, #15]
 8016490:	e001      	b.n	8016496 <tcp_process_refused_data+0xb6>
 8016492:	2300      	movs	r3, #0
 8016494:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801649a:	f113 0f0d 	cmn.w	r3, #13
 801649e:	d110      	bne.n	80164c2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80164a0:	f06f 030c 	mvn.w	r3, #12
 80164a4:	e00e      	b.n	80164c4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80164a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80164aa:	f113 0f0d 	cmn.w	r3, #13
 80164ae:	d102      	bne.n	80164b6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80164b0:	f06f 030c 	mvn.w	r3, #12
 80164b4:	e006      	b.n	80164c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	68ba      	ldr	r2, [r7, #8]
 80164ba:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80164bc:	f06f 0304 	mvn.w	r3, #4
 80164c0:	e000      	b.n	80164c4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80164c2:	2300      	movs	r3, #0
}
 80164c4:	4618      	mov	r0, r3
 80164c6:	3714      	adds	r7, #20
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd90      	pop	{r4, r7, pc}
 80164cc:	08023fe4 	.word	0x08023fe4
 80164d0:	080244f4 	.word	0x080244f4
 80164d4:	08024028 	.word	0x08024028

080164d8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b084      	sub	sp, #16
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80164e0:	e007      	b.n	80164f2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80164e8:	6878      	ldr	r0, [r7, #4]
 80164ea:	f000 f80a 	bl	8016502 <tcp_seg_free>
    seg = next;
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d1f4      	bne.n	80164e2 <tcp_segs_free+0xa>
  }
}
 80164f8:	bf00      	nop
 80164fa:	bf00      	nop
 80164fc:	3710      	adds	r7, #16
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}

08016502 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016502:	b580      	push	{r7, lr}
 8016504:	b082      	sub	sp, #8
 8016506:	af00      	add	r7, sp, #0
 8016508:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d00c      	beq.n	801652a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	685b      	ldr	r3, [r3, #4]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d004      	beq.n	8016522 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	4618      	mov	r0, r3
 801651e:	f7fe fa2b 	bl	8014978 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016522:	6879      	ldr	r1, [r7, #4]
 8016524:	2003      	movs	r0, #3
 8016526:	f7fd fb77 	bl	8013c18 <memp_free>
  }
}
 801652a:	bf00      	nop
 801652c:	3708      	adds	r7, #8
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
	...

08016534 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b084      	sub	sp, #16
 8016538:	af00      	add	r7, sp, #0
 801653a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d106      	bne.n	8016550 <tcp_seg_copy+0x1c>
 8016542:	4b0f      	ldr	r3, [pc, #60]	; (8016580 <tcp_seg_copy+0x4c>)
 8016544:	f240 6282 	movw	r2, #1666	; 0x682
 8016548:	490e      	ldr	r1, [pc, #56]	; (8016584 <tcp_seg_copy+0x50>)
 801654a:	480f      	ldr	r0, [pc, #60]	; (8016588 <tcp_seg_copy+0x54>)
 801654c:	f00a fc3e 	bl	8020dcc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016550:	2003      	movs	r0, #3
 8016552:	f7fd fb0f 	bl	8013b74 <memp_malloc>
 8016556:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d101      	bne.n	8016562 <tcp_seg_copy+0x2e>
    return NULL;
 801655e:	2300      	movs	r3, #0
 8016560:	e00a      	b.n	8016578 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016562:	2210      	movs	r2, #16
 8016564:	6879      	ldr	r1, [r7, #4]
 8016566:	68f8      	ldr	r0, [r7, #12]
 8016568:	f00a fb46 	bl	8020bf8 <memcpy>
  pbuf_ref(cseg->p);
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	685b      	ldr	r3, [r3, #4]
 8016570:	4618      	mov	r0, r3
 8016572:	f7fe faa7 	bl	8014ac4 <pbuf_ref>
  return cseg;
 8016576:	68fb      	ldr	r3, [r7, #12]
}
 8016578:	4618      	mov	r0, r3
 801657a:	3710      	adds	r7, #16
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}
 8016580:	08023fe4 	.word	0x08023fe4
 8016584:	08024538 	.word	0x08024538
 8016588:	08024028 	.word	0x08024028

0801658c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b084      	sub	sp, #16
 8016590:	af00      	add	r7, sp, #0
 8016592:	60f8      	str	r0, [r7, #12]
 8016594:	60b9      	str	r1, [r7, #8]
 8016596:	607a      	str	r2, [r7, #4]
 8016598:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801659a:	68bb      	ldr	r3, [r7, #8]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d109      	bne.n	80165b4 <tcp_recv_null+0x28>
 80165a0:	4b12      	ldr	r3, [pc, #72]	; (80165ec <tcp_recv_null+0x60>)
 80165a2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80165a6:	4912      	ldr	r1, [pc, #72]	; (80165f0 <tcp_recv_null+0x64>)
 80165a8:	4812      	ldr	r0, [pc, #72]	; (80165f4 <tcp_recv_null+0x68>)
 80165aa:	f00a fc0f 	bl	8020dcc <iprintf>
 80165ae:	f06f 030f 	mvn.w	r3, #15
 80165b2:	e016      	b.n	80165e2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d009      	beq.n	80165ce <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	891b      	ldrh	r3, [r3, #8]
 80165be:	4619      	mov	r1, r3
 80165c0:	68b8      	ldr	r0, [r7, #8]
 80165c2:	f7ff f9bb 	bl	801593c <tcp_recved>
    pbuf_free(p);
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f7fe f9d6 	bl	8014978 <pbuf_free>
 80165cc:	e008      	b.n	80165e0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80165ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d104      	bne.n	80165e0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80165d6:	68b8      	ldr	r0, [r7, #8]
 80165d8:	f7ff f804 	bl	80155e4 <tcp_close>
 80165dc:	4603      	mov	r3, r0
 80165de:	e000      	b.n	80165e2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80165e0:	2300      	movs	r3, #0
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3710      	adds	r7, #16
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	08023fe4 	.word	0x08023fe4
 80165f0:	08024554 	.word	0x08024554
 80165f4:	08024028 	.word	0x08024028

080165f8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b086      	sub	sp, #24
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	4603      	mov	r3, r0
 8016600:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016606:	2b00      	cmp	r3, #0
 8016608:	db01      	blt.n	801660e <tcp_kill_prio+0x16>
 801660a:	79fb      	ldrb	r3, [r7, #7]
 801660c:	e000      	b.n	8016610 <tcp_kill_prio+0x18>
 801660e:	237f      	movs	r3, #127	; 0x7f
 8016610:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016612:	7afb      	ldrb	r3, [r7, #11]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d034      	beq.n	8016682 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016618:	7afb      	ldrb	r3, [r7, #11]
 801661a:	3b01      	subs	r3, #1
 801661c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801661e:	2300      	movs	r3, #0
 8016620:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016622:	2300      	movs	r3, #0
 8016624:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016626:	4b19      	ldr	r3, [pc, #100]	; (801668c <tcp_kill_prio+0x94>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	617b      	str	r3, [r7, #20]
 801662c:	e01f      	b.n	801666e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801662e:	697b      	ldr	r3, [r7, #20]
 8016630:	7d5b      	ldrb	r3, [r3, #21]
 8016632:	7afa      	ldrb	r2, [r7, #11]
 8016634:	429a      	cmp	r2, r3
 8016636:	d80c      	bhi.n	8016652 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016638:	697b      	ldr	r3, [r7, #20]
 801663a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801663c:	7afa      	ldrb	r2, [r7, #11]
 801663e:	429a      	cmp	r2, r3
 8016640:	d112      	bne.n	8016668 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016642:	4b13      	ldr	r3, [pc, #76]	; (8016690 <tcp_kill_prio+0x98>)
 8016644:	681a      	ldr	r2, [r3, #0]
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	6a1b      	ldr	r3, [r3, #32]
 801664a:	1ad3      	subs	r3, r2, r3
 801664c:	68fa      	ldr	r2, [r7, #12]
 801664e:	429a      	cmp	r2, r3
 8016650:	d80a      	bhi.n	8016668 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8016652:	4b0f      	ldr	r3, [pc, #60]	; (8016690 <tcp_kill_prio+0x98>)
 8016654:	681a      	ldr	r2, [r3, #0]
 8016656:	697b      	ldr	r3, [r7, #20]
 8016658:	6a1b      	ldr	r3, [r3, #32]
 801665a:	1ad3      	subs	r3, r2, r3
 801665c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801665e:	697b      	ldr	r3, [r7, #20]
 8016660:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8016662:	697b      	ldr	r3, [r7, #20]
 8016664:	7d5b      	ldrb	r3, [r3, #21]
 8016666:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016668:	697b      	ldr	r3, [r7, #20]
 801666a:	68db      	ldr	r3, [r3, #12]
 801666c:	617b      	str	r3, [r7, #20]
 801666e:	697b      	ldr	r3, [r7, #20]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d1dc      	bne.n	801662e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016674:	693b      	ldr	r3, [r7, #16]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d004      	beq.n	8016684 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801667a:	6938      	ldr	r0, [r7, #16]
 801667c:	f7ff f8f8 	bl	8015870 <tcp_abort>
 8016680:	e000      	b.n	8016684 <tcp_kill_prio+0x8c>
    return;
 8016682:	bf00      	nop
  }
}
 8016684:	3718      	adds	r7, #24
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}
 801668a:	bf00      	nop
 801668c:	20016db0 	.word	0x20016db0
 8016690:	20016db4 	.word	0x20016db4

08016694 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b086      	sub	sp, #24
 8016698:	af00      	add	r7, sp, #0
 801669a:	4603      	mov	r3, r0
 801669c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801669e:	79fb      	ldrb	r3, [r7, #7]
 80166a0:	2b08      	cmp	r3, #8
 80166a2:	d009      	beq.n	80166b8 <tcp_kill_state+0x24>
 80166a4:	79fb      	ldrb	r3, [r7, #7]
 80166a6:	2b09      	cmp	r3, #9
 80166a8:	d006      	beq.n	80166b8 <tcp_kill_state+0x24>
 80166aa:	4b1a      	ldr	r3, [pc, #104]	; (8016714 <tcp_kill_state+0x80>)
 80166ac:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80166b0:	4919      	ldr	r1, [pc, #100]	; (8016718 <tcp_kill_state+0x84>)
 80166b2:	481a      	ldr	r0, [pc, #104]	; (801671c <tcp_kill_state+0x88>)
 80166b4:	f00a fb8a 	bl	8020dcc <iprintf>

  inactivity = 0;
 80166b8:	2300      	movs	r3, #0
 80166ba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80166bc:	2300      	movs	r3, #0
 80166be:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80166c0:	4b17      	ldr	r3, [pc, #92]	; (8016720 <tcp_kill_state+0x8c>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	617b      	str	r3, [r7, #20]
 80166c6:	e017      	b.n	80166f8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	7d1b      	ldrb	r3, [r3, #20]
 80166cc:	79fa      	ldrb	r2, [r7, #7]
 80166ce:	429a      	cmp	r2, r3
 80166d0:	d10f      	bne.n	80166f2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80166d2:	4b14      	ldr	r3, [pc, #80]	; (8016724 <tcp_kill_state+0x90>)
 80166d4:	681a      	ldr	r2, [r3, #0]
 80166d6:	697b      	ldr	r3, [r7, #20]
 80166d8:	6a1b      	ldr	r3, [r3, #32]
 80166da:	1ad3      	subs	r3, r2, r3
 80166dc:	68fa      	ldr	r2, [r7, #12]
 80166de:	429a      	cmp	r2, r3
 80166e0:	d807      	bhi.n	80166f2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80166e2:	4b10      	ldr	r3, [pc, #64]	; (8016724 <tcp_kill_state+0x90>)
 80166e4:	681a      	ldr	r2, [r3, #0]
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	6a1b      	ldr	r3, [r3, #32]
 80166ea:	1ad3      	subs	r3, r2, r3
 80166ec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80166ee:	697b      	ldr	r3, [r7, #20]
 80166f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80166f2:	697b      	ldr	r3, [r7, #20]
 80166f4:	68db      	ldr	r3, [r3, #12]
 80166f6:	617b      	str	r3, [r7, #20]
 80166f8:	697b      	ldr	r3, [r7, #20]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d1e4      	bne.n	80166c8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80166fe:	693b      	ldr	r3, [r7, #16]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d003      	beq.n	801670c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016704:	2100      	movs	r1, #0
 8016706:	6938      	ldr	r0, [r7, #16]
 8016708:	f7fe fff4 	bl	80156f4 <tcp_abandon>
  }
}
 801670c:	bf00      	nop
 801670e:	3718      	adds	r7, #24
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}
 8016714:	08023fe4 	.word	0x08023fe4
 8016718:	08024570 	.word	0x08024570
 801671c:	08024028 	.word	0x08024028
 8016720:	20016db0 	.word	0x20016db0
 8016724:	20016db4 	.word	0x20016db4

08016728 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b084      	sub	sp, #16
 801672c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801672e:	2300      	movs	r3, #0
 8016730:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016732:	2300      	movs	r3, #0
 8016734:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016736:	4b12      	ldr	r3, [pc, #72]	; (8016780 <tcp_kill_timewait+0x58>)
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	60fb      	str	r3, [r7, #12]
 801673c:	e012      	b.n	8016764 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801673e:	4b11      	ldr	r3, [pc, #68]	; (8016784 <tcp_kill_timewait+0x5c>)
 8016740:	681a      	ldr	r2, [r3, #0]
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	6a1b      	ldr	r3, [r3, #32]
 8016746:	1ad3      	subs	r3, r2, r3
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	429a      	cmp	r2, r3
 801674c:	d807      	bhi.n	801675e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801674e:	4b0d      	ldr	r3, [pc, #52]	; (8016784 <tcp_kill_timewait+0x5c>)
 8016750:	681a      	ldr	r2, [r3, #0]
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	6a1b      	ldr	r3, [r3, #32]
 8016756:	1ad3      	subs	r3, r2, r3
 8016758:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	68db      	ldr	r3, [r3, #12]
 8016762:	60fb      	str	r3, [r7, #12]
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d1e9      	bne.n	801673e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801676a:	68bb      	ldr	r3, [r7, #8]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d002      	beq.n	8016776 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016770:	68b8      	ldr	r0, [r7, #8]
 8016772:	f7ff f87d 	bl	8015870 <tcp_abort>
  }
}
 8016776:	bf00      	nop
 8016778:	3710      	adds	r7, #16
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
 801677e:	bf00      	nop
 8016780:	20016dc0 	.word	0x20016dc0
 8016784:	20016db4 	.word	0x20016db4

08016788 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b082      	sub	sp, #8
 801678c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801678e:	4b10      	ldr	r3, [pc, #64]	; (80167d0 <tcp_handle_closepend+0x48>)
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016794:	e014      	b.n	80167c0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	68db      	ldr	r3, [r3, #12]
 801679a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	8b5b      	ldrh	r3, [r3, #26]
 80167a0:	f003 0308 	and.w	r3, r3, #8
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d009      	beq.n	80167bc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	8b5b      	ldrh	r3, [r3, #26]
 80167ac:	f023 0308 	bic.w	r3, r3, #8
 80167b0:	b29a      	uxth	r2, r3
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f7fe feaa 	bl	8015510 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80167bc:	683b      	ldr	r3, [r7, #0]
 80167be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d1e7      	bne.n	8016796 <tcp_handle_closepend+0xe>
  }
}
 80167c6:	bf00      	nop
 80167c8:	bf00      	nop
 80167ca:	3708      	adds	r7, #8
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}
 80167d0:	20016db0 	.word	0x20016db0

080167d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
 80167da:	4603      	mov	r3, r0
 80167dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167de:	2001      	movs	r0, #1
 80167e0:	f7fd f9c8 	bl	8013b74 <memp_malloc>
 80167e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d126      	bne.n	801683a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80167ec:	f7ff ffcc 	bl	8016788 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80167f0:	f7ff ff9a 	bl	8016728 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167f4:	2001      	movs	r0, #1
 80167f6:	f7fd f9bd 	bl	8013b74 <memp_malloc>
 80167fa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d11b      	bne.n	801683a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016802:	2009      	movs	r0, #9
 8016804:	f7ff ff46 	bl	8016694 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016808:	2001      	movs	r0, #1
 801680a:	f7fd f9b3 	bl	8013b74 <memp_malloc>
 801680e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d111      	bne.n	801683a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016816:	2008      	movs	r0, #8
 8016818:	f7ff ff3c 	bl	8016694 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801681c:	2001      	movs	r0, #1
 801681e:	f7fd f9a9 	bl	8013b74 <memp_malloc>
 8016822:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d107      	bne.n	801683a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801682a:	79fb      	ldrb	r3, [r7, #7]
 801682c:	4618      	mov	r0, r3
 801682e:	f7ff fee3 	bl	80165f8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016832:	2001      	movs	r0, #1
 8016834:	f7fd f99e 	bl	8013b74 <memp_malloc>
 8016838:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d03f      	beq.n	80168c0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016840:	229c      	movs	r2, #156	; 0x9c
 8016842:	2100      	movs	r1, #0
 8016844:	68f8      	ldr	r0, [r7, #12]
 8016846:	f00a f9ff 	bl	8020c48 <memset>
    pcb->prio = prio;
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	79fa      	ldrb	r2, [r7, #7]
 801684e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016856:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016860:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	22ff      	movs	r2, #255	; 0xff
 801686e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016876:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	2206      	movs	r2, #6
 801687c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	2206      	movs	r2, #6
 8016884:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801688c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	2201      	movs	r2, #1
 8016892:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8016896:	4b0d      	ldr	r3, [pc, #52]	; (80168cc <tcp_alloc+0xf8>)
 8016898:	681a      	ldr	r2, [r3, #0]
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801689e:	4b0c      	ldr	r3, [pc, #48]	; (80168d0 <tcp_alloc+0xfc>)
 80168a0:	781a      	ldrb	r2, [r3, #0]
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80168ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	4a08      	ldr	r2, [pc, #32]	; (80168d4 <tcp_alloc+0x100>)
 80168b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	4a07      	ldr	r2, [pc, #28]	; (80168d8 <tcp_alloc+0x104>)
 80168bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80168c0:	68fb      	ldr	r3, [r7, #12]
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3710      	adds	r7, #16
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	20016db4 	.word	0x20016db4
 80168d0:	200056ea 	.word	0x200056ea
 80168d4:	0801658d 	.word	0x0801658d
 80168d8:	006ddd00 	.word	0x006ddd00

080168dc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b084      	sub	sp, #16
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	4603      	mov	r3, r0
 80168e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80168e6:	2040      	movs	r0, #64	; 0x40
 80168e8:	f7ff ff74 	bl	80167d4 <tcp_alloc>
 80168ec:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80168ee:	68fb      	ldr	r3, [r7, #12]
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	3710      	adds	r7, #16
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}

080168f8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80168f8:	b480      	push	{r7}
 80168fa:	b083      	sub	sp, #12
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
 8016900:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d002      	beq.n	801690e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	683a      	ldr	r2, [r7, #0]
 801690c:	611a      	str	r2, [r3, #16]
  }
}
 801690e:	bf00      	nop
 8016910:	370c      	adds	r7, #12
 8016912:	46bd      	mov	sp, r7
 8016914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016918:	4770      	bx	lr
	...

0801691c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
 8016924:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d00e      	beq.n	801694a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	7d1b      	ldrb	r3, [r3, #20]
 8016930:	2b01      	cmp	r3, #1
 8016932:	d106      	bne.n	8016942 <tcp_recv+0x26>
 8016934:	4b07      	ldr	r3, [pc, #28]	; (8016954 <tcp_recv+0x38>)
 8016936:	f240 72df 	movw	r2, #2015	; 0x7df
 801693a:	4907      	ldr	r1, [pc, #28]	; (8016958 <tcp_recv+0x3c>)
 801693c:	4807      	ldr	r0, [pc, #28]	; (801695c <tcp_recv+0x40>)
 801693e:	f00a fa45 	bl	8020dcc <iprintf>
    pcb->recv = recv;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	683a      	ldr	r2, [r7, #0]
 8016946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801694a:	bf00      	nop
 801694c:	3708      	adds	r7, #8
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	08023fe4 	.word	0x08023fe4
 8016958:	08024580 	.word	0x08024580
 801695c:	08024028 	.word	0x08024028

08016960 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b082      	sub	sp, #8
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
 8016968:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d00e      	beq.n	801698e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	7d1b      	ldrb	r3, [r3, #20]
 8016974:	2b01      	cmp	r3, #1
 8016976:	d106      	bne.n	8016986 <tcp_sent+0x26>
 8016978:	4b07      	ldr	r3, [pc, #28]	; (8016998 <tcp_sent+0x38>)
 801697a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801697e:	4907      	ldr	r1, [pc, #28]	; (801699c <tcp_sent+0x3c>)
 8016980:	4807      	ldr	r0, [pc, #28]	; (80169a0 <tcp_sent+0x40>)
 8016982:	f00a fa23 	bl	8020dcc <iprintf>
    pcb->sent = sent;
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	683a      	ldr	r2, [r7, #0]
 801698a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801698e:	bf00      	nop
 8016990:	3708      	adds	r7, #8
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}
 8016996:	bf00      	nop
 8016998:	08023fe4 	.word	0x08023fe4
 801699c:	080245a8 	.word	0x080245a8
 80169a0:	08024028 	.word	0x08024028

080169a4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b082      	sub	sp, #8
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
 80169ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d00e      	beq.n	80169d2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	7d1b      	ldrb	r3, [r3, #20]
 80169b8:	2b01      	cmp	r3, #1
 80169ba:	d106      	bne.n	80169ca <tcp_err+0x26>
 80169bc:	4b07      	ldr	r3, [pc, #28]	; (80169dc <tcp_err+0x38>)
 80169be:	f640 020d 	movw	r2, #2061	; 0x80d
 80169c2:	4907      	ldr	r1, [pc, #28]	; (80169e0 <tcp_err+0x3c>)
 80169c4:	4807      	ldr	r0, [pc, #28]	; (80169e4 <tcp_err+0x40>)
 80169c6:	f00a fa01 	bl	8020dcc <iprintf>
    pcb->errf = err;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	683a      	ldr	r2, [r7, #0]
 80169ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80169d2:	bf00      	nop
 80169d4:	3708      	adds	r7, #8
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
 80169da:	bf00      	nop
 80169dc:	08023fe4 	.word	0x08023fe4
 80169e0:	080245d0 	.word	0x080245d0
 80169e4:	08024028 	.word	0x08024028

080169e8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80169e8:	b480      	push	{r7}
 80169ea:	b085      	sub	sp, #20
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d008      	beq.n	8016a0a <tcp_accept+0x22>
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	7d1b      	ldrb	r3, [r3, #20]
 80169fc:	2b01      	cmp	r3, #1
 80169fe:	d104      	bne.n	8016a0a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	683a      	ldr	r2, [r7, #0]
 8016a08:	619a      	str	r2, [r3, #24]
  }
}
 8016a0a:	bf00      	nop
 8016a0c:	3714      	adds	r7, #20
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a14:	4770      	bx	lr
	...

08016a18 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b084      	sub	sp, #16
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	60f8      	str	r0, [r7, #12]
 8016a20:	60b9      	str	r1, [r7, #8]
 8016a22:	4613      	mov	r3, r2
 8016a24:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d107      	bne.n	8016a3c <tcp_poll+0x24>
 8016a2c:	4b0e      	ldr	r3, [pc, #56]	; (8016a68 <tcp_poll+0x50>)
 8016a2e:	f640 023d 	movw	r2, #2109	; 0x83d
 8016a32:	490e      	ldr	r1, [pc, #56]	; (8016a6c <tcp_poll+0x54>)
 8016a34:	480e      	ldr	r0, [pc, #56]	; (8016a70 <tcp_poll+0x58>)
 8016a36:	f00a f9c9 	bl	8020dcc <iprintf>
 8016a3a:	e011      	b.n	8016a60 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	7d1b      	ldrb	r3, [r3, #20]
 8016a40:	2b01      	cmp	r3, #1
 8016a42:	d106      	bne.n	8016a52 <tcp_poll+0x3a>
 8016a44:	4b08      	ldr	r3, [pc, #32]	; (8016a68 <tcp_poll+0x50>)
 8016a46:	f640 023e 	movw	r2, #2110	; 0x83e
 8016a4a:	490a      	ldr	r1, [pc, #40]	; (8016a74 <tcp_poll+0x5c>)
 8016a4c:	4808      	ldr	r0, [pc, #32]	; (8016a70 <tcp_poll+0x58>)
 8016a4e:	f00a f9bd 	bl	8020dcc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	68ba      	ldr	r2, [r7, #8]
 8016a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	79fa      	ldrb	r2, [r7, #7]
 8016a5e:	775a      	strb	r2, [r3, #29]
}
 8016a60:	3710      	adds	r7, #16
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	bf00      	nop
 8016a68:	08023fe4 	.word	0x08023fe4
 8016a6c:	080245f8 	.word	0x080245f8
 8016a70:	08024028 	.word	0x08024028
 8016a74:	08024610 	.word	0x08024610

08016a78 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b082      	sub	sp, #8
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d107      	bne.n	8016a96 <tcp_pcb_purge+0x1e>
 8016a86:	4b21      	ldr	r3, [pc, #132]	; (8016b0c <tcp_pcb_purge+0x94>)
 8016a88:	f640 0251 	movw	r2, #2129	; 0x851
 8016a8c:	4920      	ldr	r1, [pc, #128]	; (8016b10 <tcp_pcb_purge+0x98>)
 8016a8e:	4821      	ldr	r0, [pc, #132]	; (8016b14 <tcp_pcb_purge+0x9c>)
 8016a90:	f00a f99c 	bl	8020dcc <iprintf>
 8016a94:	e037      	b.n	8016b06 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	7d1b      	ldrb	r3, [r3, #20]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d033      	beq.n	8016b06 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016aa2:	2b0a      	cmp	r3, #10
 8016aa4:	d02f      	beq.n	8016b06 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8016aaa:	2b01      	cmp	r3, #1
 8016aac:	d02b      	beq.n	8016b06 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d007      	beq.n	8016ac6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7fd ff5c 	bl	8014978 <pbuf_free>
      pcb->refused_data = NULL;
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d002      	beq.n	8016ad4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f000 f986 	bl	8016de0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ada:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f7ff fcf9 	bl	80164d8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016aea:	4618      	mov	r0, r3
 8016aec:	f7ff fcf4 	bl	80164d8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2200      	movs	r2, #0
 8016af4:	66da      	str	r2, [r3, #108]	; 0x6c
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	2200      	movs	r2, #0
 8016b02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016b06:	3708      	adds	r7, #8
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}
 8016b0c:	08023fe4 	.word	0x08023fe4
 8016b10:	08024630 	.word	0x08024630
 8016b14:	08024028 	.word	0x08024028

08016b18 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b084      	sub	sp, #16
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016b22:	683b      	ldr	r3, [r7, #0]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d106      	bne.n	8016b36 <tcp_pcb_remove+0x1e>
 8016b28:	4b3e      	ldr	r3, [pc, #248]	; (8016c24 <tcp_pcb_remove+0x10c>)
 8016b2a:	f640 0283 	movw	r2, #2179	; 0x883
 8016b2e:	493e      	ldr	r1, [pc, #248]	; (8016c28 <tcp_pcb_remove+0x110>)
 8016b30:	483e      	ldr	r0, [pc, #248]	; (8016c2c <tcp_pcb_remove+0x114>)
 8016b32:	f00a f94b 	bl	8020dcc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d106      	bne.n	8016b4a <tcp_pcb_remove+0x32>
 8016b3c:	4b39      	ldr	r3, [pc, #228]	; (8016c24 <tcp_pcb_remove+0x10c>)
 8016b3e:	f640 0284 	movw	r2, #2180	; 0x884
 8016b42:	493b      	ldr	r1, [pc, #236]	; (8016c30 <tcp_pcb_remove+0x118>)
 8016b44:	4839      	ldr	r0, [pc, #228]	; (8016c2c <tcp_pcb_remove+0x114>)
 8016b46:	f00a f941 	bl	8020dcc <iprintf>

  TCP_RMV(pcblist, pcb);
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	683a      	ldr	r2, [r7, #0]
 8016b50:	429a      	cmp	r2, r3
 8016b52:	d105      	bne.n	8016b60 <tcp_pcb_remove+0x48>
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	68da      	ldr	r2, [r3, #12]
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	601a      	str	r2, [r3, #0]
 8016b5e:	e013      	b.n	8016b88 <tcp_pcb_remove+0x70>
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	60fb      	str	r3, [r7, #12]
 8016b66:	e00c      	b.n	8016b82 <tcp_pcb_remove+0x6a>
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	68db      	ldr	r3, [r3, #12]
 8016b6c:	683a      	ldr	r2, [r7, #0]
 8016b6e:	429a      	cmp	r2, r3
 8016b70:	d104      	bne.n	8016b7c <tcp_pcb_remove+0x64>
 8016b72:	683b      	ldr	r3, [r7, #0]
 8016b74:	68da      	ldr	r2, [r3, #12]
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	60da      	str	r2, [r3, #12]
 8016b7a:	e005      	b.n	8016b88 <tcp_pcb_remove+0x70>
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	68db      	ldr	r3, [r3, #12]
 8016b80:	60fb      	str	r3, [r7, #12]
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d1ef      	bne.n	8016b68 <tcp_pcb_remove+0x50>
 8016b88:	683b      	ldr	r3, [r7, #0]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016b8e:	6838      	ldr	r0, [r7, #0]
 8016b90:	f7ff ff72 	bl	8016a78 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016b94:	683b      	ldr	r3, [r7, #0]
 8016b96:	7d1b      	ldrb	r3, [r3, #20]
 8016b98:	2b0a      	cmp	r3, #10
 8016b9a:	d013      	beq.n	8016bc4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016b9c:	683b      	ldr	r3, [r7, #0]
 8016b9e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016ba0:	2b01      	cmp	r3, #1
 8016ba2:	d00f      	beq.n	8016bc4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016ba4:	683b      	ldr	r3, [r7, #0]
 8016ba6:	8b5b      	ldrh	r3, [r3, #26]
 8016ba8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d009      	beq.n	8016bc4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016bb0:	683b      	ldr	r3, [r7, #0]
 8016bb2:	8b5b      	ldrh	r3, [r3, #26]
 8016bb4:	f043 0302 	orr.w	r3, r3, #2
 8016bb8:	b29a      	uxth	r2, r3
 8016bba:	683b      	ldr	r3, [r7, #0]
 8016bbc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016bbe:	6838      	ldr	r0, [r7, #0]
 8016bc0:	f003 fbc2 	bl	801a348 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	7d1b      	ldrb	r3, [r3, #20]
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	d020      	beq.n	8016c0e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016bcc:	683b      	ldr	r3, [r7, #0]
 8016bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d006      	beq.n	8016be2 <tcp_pcb_remove+0xca>
 8016bd4:	4b13      	ldr	r3, [pc, #76]	; (8016c24 <tcp_pcb_remove+0x10c>)
 8016bd6:	f640 0293 	movw	r2, #2195	; 0x893
 8016bda:	4916      	ldr	r1, [pc, #88]	; (8016c34 <tcp_pcb_remove+0x11c>)
 8016bdc:	4813      	ldr	r0, [pc, #76]	; (8016c2c <tcp_pcb_remove+0x114>)
 8016bde:	f00a f8f5 	bl	8020dcc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d006      	beq.n	8016bf8 <tcp_pcb_remove+0xe0>
 8016bea:	4b0e      	ldr	r3, [pc, #56]	; (8016c24 <tcp_pcb_remove+0x10c>)
 8016bec:	f640 0294 	movw	r2, #2196	; 0x894
 8016bf0:	4911      	ldr	r1, [pc, #68]	; (8016c38 <tcp_pcb_remove+0x120>)
 8016bf2:	480e      	ldr	r0, [pc, #56]	; (8016c2c <tcp_pcb_remove+0x114>)
 8016bf4:	f00a f8ea 	bl	8020dcc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016bf8:	683b      	ldr	r3, [r7, #0]
 8016bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d006      	beq.n	8016c0e <tcp_pcb_remove+0xf6>
 8016c00:	4b08      	ldr	r3, [pc, #32]	; (8016c24 <tcp_pcb_remove+0x10c>)
 8016c02:	f640 0296 	movw	r2, #2198	; 0x896
 8016c06:	490d      	ldr	r1, [pc, #52]	; (8016c3c <tcp_pcb_remove+0x124>)
 8016c08:	4808      	ldr	r0, [pc, #32]	; (8016c2c <tcp_pcb_remove+0x114>)
 8016c0a:	f00a f8df 	bl	8020dcc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	2200      	movs	r2, #0
 8016c12:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	2200      	movs	r2, #0
 8016c18:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016c1a:	bf00      	nop
 8016c1c:	3710      	adds	r7, #16
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}
 8016c22:	bf00      	nop
 8016c24:	08023fe4 	.word	0x08023fe4
 8016c28:	0802464c 	.word	0x0802464c
 8016c2c:	08024028 	.word	0x08024028
 8016c30:	08024668 	.word	0x08024668
 8016c34:	08024688 	.word	0x08024688
 8016c38:	080246a0 	.word	0x080246a0
 8016c3c:	080246bc 	.word	0x080246bc

08016c40 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b082      	sub	sp, #8
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d106      	bne.n	8016c5c <tcp_next_iss+0x1c>
 8016c4e:	4b0a      	ldr	r3, [pc, #40]	; (8016c78 <tcp_next_iss+0x38>)
 8016c50:	f640 02af 	movw	r2, #2223	; 0x8af
 8016c54:	4909      	ldr	r1, [pc, #36]	; (8016c7c <tcp_next_iss+0x3c>)
 8016c56:	480a      	ldr	r0, [pc, #40]	; (8016c80 <tcp_next_iss+0x40>)
 8016c58:	f00a f8b8 	bl	8020dcc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016c5c:	4b09      	ldr	r3, [pc, #36]	; (8016c84 <tcp_next_iss+0x44>)
 8016c5e:	681a      	ldr	r2, [r3, #0]
 8016c60:	4b09      	ldr	r3, [pc, #36]	; (8016c88 <tcp_next_iss+0x48>)
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	4413      	add	r3, r2
 8016c66:	4a07      	ldr	r2, [pc, #28]	; (8016c84 <tcp_next_iss+0x44>)
 8016c68:	6013      	str	r3, [r2, #0]
  return iss;
 8016c6a:	4b06      	ldr	r3, [pc, #24]	; (8016c84 <tcp_next_iss+0x44>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3708      	adds	r7, #8
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
 8016c76:	bf00      	nop
 8016c78:	08023fe4 	.word	0x08023fe4
 8016c7c:	080246d4 	.word	0x080246d4
 8016c80:	08024028 	.word	0x08024028
 8016c84:	200004f8 	.word	0x200004f8
 8016c88:	20016db4 	.word	0x20016db4

08016c8c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b086      	sub	sp, #24
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	4603      	mov	r3, r0
 8016c94:	60b9      	str	r1, [r7, #8]
 8016c96:	607a      	str	r2, [r7, #4]
 8016c98:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d106      	bne.n	8016cae <tcp_eff_send_mss_netif+0x22>
 8016ca0:	4b14      	ldr	r3, [pc, #80]	; (8016cf4 <tcp_eff_send_mss_netif+0x68>)
 8016ca2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8016ca6:	4914      	ldr	r1, [pc, #80]	; (8016cf8 <tcp_eff_send_mss_netif+0x6c>)
 8016ca8:	4814      	ldr	r0, [pc, #80]	; (8016cfc <tcp_eff_send_mss_netif+0x70>)
 8016caa:	f00a f88f 	bl	8020dcc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d101      	bne.n	8016cb8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016cb4:	89fb      	ldrh	r3, [r7, #14]
 8016cb6:	e019      	b.n	8016cec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016cb8:	68bb      	ldr	r3, [r7, #8]
 8016cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cbc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016cbe:	8afb      	ldrh	r3, [r7, #22]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d012      	beq.n	8016cea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016cc4:	2328      	movs	r3, #40	; 0x28
 8016cc6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016cc8:	8afa      	ldrh	r2, [r7, #22]
 8016cca:	8abb      	ldrh	r3, [r7, #20]
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	d904      	bls.n	8016cda <tcp_eff_send_mss_netif+0x4e>
 8016cd0:	8afa      	ldrh	r2, [r7, #22]
 8016cd2:	8abb      	ldrh	r3, [r7, #20]
 8016cd4:	1ad3      	subs	r3, r2, r3
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	e000      	b.n	8016cdc <tcp_eff_send_mss_netif+0x50>
 8016cda:	2300      	movs	r3, #0
 8016cdc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016cde:	8a7a      	ldrh	r2, [r7, #18]
 8016ce0:	89fb      	ldrh	r3, [r7, #14]
 8016ce2:	4293      	cmp	r3, r2
 8016ce4:	bf28      	it	cs
 8016ce6:	4613      	movcs	r3, r2
 8016ce8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016cea:	89fb      	ldrh	r3, [r7, #14]
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3718      	adds	r7, #24
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}
 8016cf4:	08023fe4 	.word	0x08023fe4
 8016cf8:	080246f0 	.word	0x080246f0
 8016cfc:	08024028 	.word	0x08024028

08016d00 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b084      	sub	sp, #16
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
 8016d08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d119      	bne.n	8016d48 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016d14:	4b10      	ldr	r3, [pc, #64]	; (8016d58 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016d16:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8016d1a:	4910      	ldr	r1, [pc, #64]	; (8016d5c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016d1c:	4810      	ldr	r0, [pc, #64]	; (8016d60 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016d1e:	f00a f855 	bl	8020dcc <iprintf>

  while (pcb != NULL) {
 8016d22:	e011      	b.n	8016d48 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	681a      	ldr	r2, [r3, #0]
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d108      	bne.n	8016d42 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	68db      	ldr	r3, [r3, #12]
 8016d34:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016d36:	68f8      	ldr	r0, [r7, #12]
 8016d38:	f7fe fd9a 	bl	8015870 <tcp_abort>
      pcb = next;
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	60fb      	str	r3, [r7, #12]
 8016d40:	e002      	b.n	8016d48 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	68db      	ldr	r3, [r3, #12]
 8016d46:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d1ea      	bne.n	8016d24 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016d4e:	bf00      	nop
 8016d50:	bf00      	nop
 8016d52:	3710      	adds	r7, #16
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	08023fe4 	.word	0x08023fe4
 8016d5c:	08024718 	.word	0x08024718
 8016d60:	08024028 	.word	0x08024028

08016d64 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b084      	sub	sp, #16
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
 8016d6c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d02a      	beq.n	8016dca <tcp_netif_ip_addr_changed+0x66>
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d026      	beq.n	8016dca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016d7c:	4b15      	ldr	r3, [pc, #84]	; (8016dd4 <tcp_netif_ip_addr_changed+0x70>)
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	4619      	mov	r1, r3
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	f7ff ffbc 	bl	8016d00 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016d88:	4b13      	ldr	r3, [pc, #76]	; (8016dd8 <tcp_netif_ip_addr_changed+0x74>)
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	4619      	mov	r1, r3
 8016d8e:	6878      	ldr	r0, [r7, #4]
 8016d90:	f7ff ffb6 	bl	8016d00 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d017      	beq.n	8016dca <tcp_netif_ip_addr_changed+0x66>
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d013      	beq.n	8016dca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016da2:	4b0e      	ldr	r3, [pc, #56]	; (8016ddc <tcp_netif_ip_addr_changed+0x78>)
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	60fb      	str	r3, [r7, #12]
 8016da8:	e00c      	b.n	8016dc4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	681a      	ldr	r2, [r3, #0]
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	429a      	cmp	r2, r3
 8016db4:	d103      	bne.n	8016dbe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016db6:	683b      	ldr	r3, [r7, #0]
 8016db8:	681a      	ldr	r2, [r3, #0]
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	68db      	ldr	r3, [r3, #12]
 8016dc2:	60fb      	str	r3, [r7, #12]
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d1ef      	bne.n	8016daa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016dca:	bf00      	nop
 8016dcc:	3710      	adds	r7, #16
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bd80      	pop	{r7, pc}
 8016dd2:	bf00      	nop
 8016dd4:	20016db0 	.word	0x20016db0
 8016dd8:	20016dbc 	.word	0x20016dbc
 8016ddc:	20016db8 	.word	0x20016db8

08016de0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b082      	sub	sp, #8
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d007      	beq.n	8016e00 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016df4:	4618      	mov	r0, r3
 8016df6:	f7ff fb6f 	bl	80164d8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016e00:	bf00      	nop
 8016e02:	3708      	adds	r7, #8
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd80      	pop	{r7, pc}

08016e08 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016e08:	b590      	push	{r4, r7, lr}
 8016e0a:	b08d      	sub	sp, #52	; 0x34
 8016e0c:	af04      	add	r7, sp, #16
 8016e0e:	6078      	str	r0, [r7, #4]
 8016e10:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d105      	bne.n	8016e24 <tcp_input+0x1c>
 8016e18:	4b9b      	ldr	r3, [pc, #620]	; (8017088 <tcp_input+0x280>)
 8016e1a:	2283      	movs	r2, #131	; 0x83
 8016e1c:	499b      	ldr	r1, [pc, #620]	; (801708c <tcp_input+0x284>)
 8016e1e:	489c      	ldr	r0, [pc, #624]	; (8017090 <tcp_input+0x288>)
 8016e20:	f009 ffd4 	bl	8020dcc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	685b      	ldr	r3, [r3, #4]
 8016e28:	4a9a      	ldr	r2, [pc, #616]	; (8017094 <tcp_input+0x28c>)
 8016e2a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	895b      	ldrh	r3, [r3, #10]
 8016e30:	2b13      	cmp	r3, #19
 8016e32:	f240 83c4 	bls.w	80175be <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016e36:	4b98      	ldr	r3, [pc, #608]	; (8017098 <tcp_input+0x290>)
 8016e38:	695b      	ldr	r3, [r3, #20]
 8016e3a:	4a97      	ldr	r2, [pc, #604]	; (8017098 <tcp_input+0x290>)
 8016e3c:	6812      	ldr	r2, [r2, #0]
 8016e3e:	4611      	mov	r1, r2
 8016e40:	4618      	mov	r0, r3
 8016e42:	f008 fb65 	bl	801f510 <ip4_addr_isbroadcast_u32>
 8016e46:	4603      	mov	r3, r0
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	f040 83ba 	bne.w	80175c2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016e4e:	4b92      	ldr	r3, [pc, #584]	; (8017098 <tcp_input+0x290>)
 8016e50:	695b      	ldr	r3, [r3, #20]
 8016e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016e56:	2be0      	cmp	r3, #224	; 0xe0
 8016e58:	f000 83b3 	beq.w	80175c2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016e5c:	4b8d      	ldr	r3, [pc, #564]	; (8017094 <tcp_input+0x28c>)
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	899b      	ldrh	r3, [r3, #12]
 8016e62:	b29b      	uxth	r3, r3
 8016e64:	4618      	mov	r0, r3
 8016e66:	f7fb f9f9 	bl	801225c <lwip_htons>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	0b1b      	lsrs	r3, r3, #12
 8016e6e:	b29b      	uxth	r3, r3
 8016e70:	b2db      	uxtb	r3, r3
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016e76:	7cbb      	ldrb	r3, [r7, #18]
 8016e78:	2b13      	cmp	r3, #19
 8016e7a:	f240 83a4 	bls.w	80175c6 <tcp_input+0x7be>
 8016e7e:	7cbb      	ldrb	r3, [r7, #18]
 8016e80:	b29a      	uxth	r2, r3
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	891b      	ldrh	r3, [r3, #8]
 8016e86:	429a      	cmp	r2, r3
 8016e88:	f200 839d 	bhi.w	80175c6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016e8c:	7cbb      	ldrb	r3, [r7, #18]
 8016e8e:	b29b      	uxth	r3, r3
 8016e90:	3b14      	subs	r3, #20
 8016e92:	b29a      	uxth	r2, r3
 8016e94:	4b81      	ldr	r3, [pc, #516]	; (801709c <tcp_input+0x294>)
 8016e96:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016e98:	4b81      	ldr	r3, [pc, #516]	; (80170a0 <tcp_input+0x298>)
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	895a      	ldrh	r2, [r3, #10]
 8016ea2:	7cbb      	ldrb	r3, [r7, #18]
 8016ea4:	b29b      	uxth	r3, r3
 8016ea6:	429a      	cmp	r2, r3
 8016ea8:	d309      	bcc.n	8016ebe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016eaa:	4b7c      	ldr	r3, [pc, #496]	; (801709c <tcp_input+0x294>)
 8016eac:	881a      	ldrh	r2, [r3, #0]
 8016eae:	4b7d      	ldr	r3, [pc, #500]	; (80170a4 <tcp_input+0x29c>)
 8016eb0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016eb2:	7cbb      	ldrb	r3, [r7, #18]
 8016eb4:	4619      	mov	r1, r3
 8016eb6:	6878      	ldr	r0, [r7, #4]
 8016eb8:	f7fd fcd8 	bl	801486c <pbuf_remove_header>
 8016ebc:	e04e      	b.n	8016f5c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d105      	bne.n	8016ed2 <tcp_input+0xca>
 8016ec6:	4b70      	ldr	r3, [pc, #448]	; (8017088 <tcp_input+0x280>)
 8016ec8:	22c2      	movs	r2, #194	; 0xc2
 8016eca:	4977      	ldr	r1, [pc, #476]	; (80170a8 <tcp_input+0x2a0>)
 8016ecc:	4870      	ldr	r0, [pc, #448]	; (8017090 <tcp_input+0x288>)
 8016ece:	f009 ff7d 	bl	8020dcc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016ed2:	2114      	movs	r1, #20
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f7fd fcc9 	bl	801486c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	895a      	ldrh	r2, [r3, #10]
 8016ede:	4b71      	ldr	r3, [pc, #452]	; (80170a4 <tcp_input+0x29c>)
 8016ee0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016ee2:	4b6e      	ldr	r3, [pc, #440]	; (801709c <tcp_input+0x294>)
 8016ee4:	881a      	ldrh	r2, [r3, #0]
 8016ee6:	4b6f      	ldr	r3, [pc, #444]	; (80170a4 <tcp_input+0x29c>)
 8016ee8:	881b      	ldrh	r3, [r3, #0]
 8016eea:	1ad3      	subs	r3, r2, r3
 8016eec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016eee:	4b6d      	ldr	r3, [pc, #436]	; (80170a4 <tcp_input+0x29c>)
 8016ef0:	881b      	ldrh	r3, [r3, #0]
 8016ef2:	4619      	mov	r1, r3
 8016ef4:	6878      	ldr	r0, [r7, #4]
 8016ef6:	f7fd fcb9 	bl	801486c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	895b      	ldrh	r3, [r3, #10]
 8016f00:	8a3a      	ldrh	r2, [r7, #16]
 8016f02:	429a      	cmp	r2, r3
 8016f04:	f200 8361 	bhi.w	80175ca <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	685b      	ldr	r3, [r3, #4]
 8016f0e:	4a64      	ldr	r2, [pc, #400]	; (80170a0 <tcp_input+0x298>)
 8016f10:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	8a3a      	ldrh	r2, [r7, #16]
 8016f18:	4611      	mov	r1, r2
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f7fd fca6 	bl	801486c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	891a      	ldrh	r2, [r3, #8]
 8016f24:	8a3b      	ldrh	r3, [r7, #16]
 8016f26:	1ad3      	subs	r3, r2, r3
 8016f28:	b29a      	uxth	r2, r3
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	895b      	ldrh	r3, [r3, #10]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d005      	beq.n	8016f42 <tcp_input+0x13a>
 8016f36:	4b54      	ldr	r3, [pc, #336]	; (8017088 <tcp_input+0x280>)
 8016f38:	22df      	movs	r2, #223	; 0xdf
 8016f3a:	495c      	ldr	r1, [pc, #368]	; (80170ac <tcp_input+0x2a4>)
 8016f3c:	4854      	ldr	r0, [pc, #336]	; (8017090 <tcp_input+0x288>)
 8016f3e:	f009 ff45 	bl	8020dcc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	891a      	ldrh	r2, [r3, #8]
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	891b      	ldrh	r3, [r3, #8]
 8016f4c:	429a      	cmp	r2, r3
 8016f4e:	d005      	beq.n	8016f5c <tcp_input+0x154>
 8016f50:	4b4d      	ldr	r3, [pc, #308]	; (8017088 <tcp_input+0x280>)
 8016f52:	22e0      	movs	r2, #224	; 0xe0
 8016f54:	4956      	ldr	r1, [pc, #344]	; (80170b0 <tcp_input+0x2a8>)
 8016f56:	484e      	ldr	r0, [pc, #312]	; (8017090 <tcp_input+0x288>)
 8016f58:	f009 ff38 	bl	8020dcc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016f5c:	4b4d      	ldr	r3, [pc, #308]	; (8017094 <tcp_input+0x28c>)
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	881b      	ldrh	r3, [r3, #0]
 8016f62:	b29b      	uxth	r3, r3
 8016f64:	4a4b      	ldr	r2, [pc, #300]	; (8017094 <tcp_input+0x28c>)
 8016f66:	6814      	ldr	r4, [r2, #0]
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f7fb f977 	bl	801225c <lwip_htons>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016f72:	4b48      	ldr	r3, [pc, #288]	; (8017094 <tcp_input+0x28c>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	885b      	ldrh	r3, [r3, #2]
 8016f78:	b29b      	uxth	r3, r3
 8016f7a:	4a46      	ldr	r2, [pc, #280]	; (8017094 <tcp_input+0x28c>)
 8016f7c:	6814      	ldr	r4, [r2, #0]
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7fb f96c 	bl	801225c <lwip_htons>
 8016f84:	4603      	mov	r3, r0
 8016f86:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016f88:	4b42      	ldr	r3, [pc, #264]	; (8017094 <tcp_input+0x28c>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	685b      	ldr	r3, [r3, #4]
 8016f8e:	4a41      	ldr	r2, [pc, #260]	; (8017094 <tcp_input+0x28c>)
 8016f90:	6814      	ldr	r4, [r2, #0]
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7fb f977 	bl	8012286 <lwip_htonl>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	6063      	str	r3, [r4, #4]
 8016f9c:	6863      	ldr	r3, [r4, #4]
 8016f9e:	4a45      	ldr	r2, [pc, #276]	; (80170b4 <tcp_input+0x2ac>)
 8016fa0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016fa2:	4b3c      	ldr	r3, [pc, #240]	; (8017094 <tcp_input+0x28c>)
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	689b      	ldr	r3, [r3, #8]
 8016fa8:	4a3a      	ldr	r2, [pc, #232]	; (8017094 <tcp_input+0x28c>)
 8016faa:	6814      	ldr	r4, [r2, #0]
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7fb f96a 	bl	8012286 <lwip_htonl>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	60a3      	str	r3, [r4, #8]
 8016fb6:	68a3      	ldr	r3, [r4, #8]
 8016fb8:	4a3f      	ldr	r2, [pc, #252]	; (80170b8 <tcp_input+0x2b0>)
 8016fba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016fbc:	4b35      	ldr	r3, [pc, #212]	; (8017094 <tcp_input+0x28c>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	89db      	ldrh	r3, [r3, #14]
 8016fc2:	b29b      	uxth	r3, r3
 8016fc4:	4a33      	ldr	r2, [pc, #204]	; (8017094 <tcp_input+0x28c>)
 8016fc6:	6814      	ldr	r4, [r2, #0]
 8016fc8:	4618      	mov	r0, r3
 8016fca:	f7fb f947 	bl	801225c <lwip_htons>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016fd2:	4b30      	ldr	r3, [pc, #192]	; (8017094 <tcp_input+0x28c>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	899b      	ldrh	r3, [r3, #12]
 8016fd8:	b29b      	uxth	r3, r3
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f7fb f93e 	bl	801225c <lwip_htons>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	b2db      	uxtb	r3, r3
 8016fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016fe8:	b2da      	uxtb	r2, r3
 8016fea:	4b34      	ldr	r3, [pc, #208]	; (80170bc <tcp_input+0x2b4>)
 8016fec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	891a      	ldrh	r2, [r3, #8]
 8016ff2:	4b33      	ldr	r3, [pc, #204]	; (80170c0 <tcp_input+0x2b8>)
 8016ff4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016ff6:	4b31      	ldr	r3, [pc, #196]	; (80170bc <tcp_input+0x2b4>)
 8016ff8:	781b      	ldrb	r3, [r3, #0]
 8016ffa:	f003 0303 	and.w	r3, r3, #3
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d00c      	beq.n	801701c <tcp_input+0x214>
    tcplen++;
 8017002:	4b2f      	ldr	r3, [pc, #188]	; (80170c0 <tcp_input+0x2b8>)
 8017004:	881b      	ldrh	r3, [r3, #0]
 8017006:	3301      	adds	r3, #1
 8017008:	b29a      	uxth	r2, r3
 801700a:	4b2d      	ldr	r3, [pc, #180]	; (80170c0 <tcp_input+0x2b8>)
 801700c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	891a      	ldrh	r2, [r3, #8]
 8017012:	4b2b      	ldr	r3, [pc, #172]	; (80170c0 <tcp_input+0x2b8>)
 8017014:	881b      	ldrh	r3, [r3, #0]
 8017016:	429a      	cmp	r2, r3
 8017018:	f200 82d9 	bhi.w	80175ce <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801701c:	2300      	movs	r3, #0
 801701e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017020:	4b28      	ldr	r3, [pc, #160]	; (80170c4 <tcp_input+0x2bc>)
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	61fb      	str	r3, [r7, #28]
 8017026:	e09d      	b.n	8017164 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017028:	69fb      	ldr	r3, [r7, #28]
 801702a:	7d1b      	ldrb	r3, [r3, #20]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d105      	bne.n	801703c <tcp_input+0x234>
 8017030:	4b15      	ldr	r3, [pc, #84]	; (8017088 <tcp_input+0x280>)
 8017032:	22fb      	movs	r2, #251	; 0xfb
 8017034:	4924      	ldr	r1, [pc, #144]	; (80170c8 <tcp_input+0x2c0>)
 8017036:	4816      	ldr	r0, [pc, #88]	; (8017090 <tcp_input+0x288>)
 8017038:	f009 fec8 	bl	8020dcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801703c:	69fb      	ldr	r3, [r7, #28]
 801703e:	7d1b      	ldrb	r3, [r3, #20]
 8017040:	2b0a      	cmp	r3, #10
 8017042:	d105      	bne.n	8017050 <tcp_input+0x248>
 8017044:	4b10      	ldr	r3, [pc, #64]	; (8017088 <tcp_input+0x280>)
 8017046:	22fc      	movs	r2, #252	; 0xfc
 8017048:	4920      	ldr	r1, [pc, #128]	; (80170cc <tcp_input+0x2c4>)
 801704a:	4811      	ldr	r0, [pc, #68]	; (8017090 <tcp_input+0x288>)
 801704c:	f009 febe 	bl	8020dcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017050:	69fb      	ldr	r3, [r7, #28]
 8017052:	7d1b      	ldrb	r3, [r3, #20]
 8017054:	2b01      	cmp	r3, #1
 8017056:	d105      	bne.n	8017064 <tcp_input+0x25c>
 8017058:	4b0b      	ldr	r3, [pc, #44]	; (8017088 <tcp_input+0x280>)
 801705a:	22fd      	movs	r2, #253	; 0xfd
 801705c:	491c      	ldr	r1, [pc, #112]	; (80170d0 <tcp_input+0x2c8>)
 801705e:	480c      	ldr	r0, [pc, #48]	; (8017090 <tcp_input+0x288>)
 8017060:	f009 feb4 	bl	8020dcc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017064:	69fb      	ldr	r3, [r7, #28]
 8017066:	7a1b      	ldrb	r3, [r3, #8]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d033      	beq.n	80170d4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801706c:	69fb      	ldr	r3, [r7, #28]
 801706e:	7a1a      	ldrb	r2, [r3, #8]
 8017070:	4b09      	ldr	r3, [pc, #36]	; (8017098 <tcp_input+0x290>)
 8017072:	685b      	ldr	r3, [r3, #4]
 8017074:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017078:	3301      	adds	r3, #1
 801707a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801707c:	429a      	cmp	r2, r3
 801707e:	d029      	beq.n	80170d4 <tcp_input+0x2cc>
      prev = pcb;
 8017080:	69fb      	ldr	r3, [r7, #28]
 8017082:	61bb      	str	r3, [r7, #24]
      continue;
 8017084:	e06b      	b.n	801715e <tcp_input+0x356>
 8017086:	bf00      	nop
 8017088:	0802474c 	.word	0x0802474c
 801708c:	08024780 	.word	0x08024780
 8017090:	08024798 	.word	0x08024798
 8017094:	200056fc 	.word	0x200056fc
 8017098:	200135d0 	.word	0x200135d0
 801709c:	20005700 	.word	0x20005700
 80170a0:	20005704 	.word	0x20005704
 80170a4:	20005702 	.word	0x20005702
 80170a8:	080247c0 	.word	0x080247c0
 80170ac:	080247d0 	.word	0x080247d0
 80170b0:	080247dc 	.word	0x080247dc
 80170b4:	2000570c 	.word	0x2000570c
 80170b8:	20005710 	.word	0x20005710
 80170bc:	20005718 	.word	0x20005718
 80170c0:	20005716 	.word	0x20005716
 80170c4:	20016db0 	.word	0x20016db0
 80170c8:	080247fc 	.word	0x080247fc
 80170cc:	08024824 	.word	0x08024824
 80170d0:	08024850 	.word	0x08024850
    }

    if (pcb->remote_port == tcphdr->src &&
 80170d4:	69fb      	ldr	r3, [r7, #28]
 80170d6:	8b1a      	ldrh	r2, [r3, #24]
 80170d8:	4b94      	ldr	r3, [pc, #592]	; (801732c <tcp_input+0x524>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	881b      	ldrh	r3, [r3, #0]
 80170de:	b29b      	uxth	r3, r3
 80170e0:	429a      	cmp	r2, r3
 80170e2:	d13a      	bne.n	801715a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80170e4:	69fb      	ldr	r3, [r7, #28]
 80170e6:	8ada      	ldrh	r2, [r3, #22]
 80170e8:	4b90      	ldr	r3, [pc, #576]	; (801732c <tcp_input+0x524>)
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	885b      	ldrh	r3, [r3, #2]
 80170ee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80170f0:	429a      	cmp	r2, r3
 80170f2:	d132      	bne.n	801715a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80170f4:	69fb      	ldr	r3, [r7, #28]
 80170f6:	685a      	ldr	r2, [r3, #4]
 80170f8:	4b8d      	ldr	r3, [pc, #564]	; (8017330 <tcp_input+0x528>)
 80170fa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d12c      	bne.n	801715a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017100:	69fb      	ldr	r3, [r7, #28]
 8017102:	681a      	ldr	r2, [r3, #0]
 8017104:	4b8a      	ldr	r3, [pc, #552]	; (8017330 <tcp_input+0x528>)
 8017106:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017108:	429a      	cmp	r2, r3
 801710a:	d126      	bne.n	801715a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801710c:	69fb      	ldr	r3, [r7, #28]
 801710e:	68db      	ldr	r3, [r3, #12]
 8017110:	69fa      	ldr	r2, [r7, #28]
 8017112:	429a      	cmp	r2, r3
 8017114:	d106      	bne.n	8017124 <tcp_input+0x31c>
 8017116:	4b87      	ldr	r3, [pc, #540]	; (8017334 <tcp_input+0x52c>)
 8017118:	f240 120d 	movw	r2, #269	; 0x10d
 801711c:	4986      	ldr	r1, [pc, #536]	; (8017338 <tcp_input+0x530>)
 801711e:	4887      	ldr	r0, [pc, #540]	; (801733c <tcp_input+0x534>)
 8017120:	f009 fe54 	bl	8020dcc <iprintf>
      if (prev != NULL) {
 8017124:	69bb      	ldr	r3, [r7, #24]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d00a      	beq.n	8017140 <tcp_input+0x338>
        prev->next = pcb->next;
 801712a:	69fb      	ldr	r3, [r7, #28]
 801712c:	68da      	ldr	r2, [r3, #12]
 801712e:	69bb      	ldr	r3, [r7, #24]
 8017130:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017132:	4b83      	ldr	r3, [pc, #524]	; (8017340 <tcp_input+0x538>)
 8017134:	681a      	ldr	r2, [r3, #0]
 8017136:	69fb      	ldr	r3, [r7, #28]
 8017138:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801713a:	4a81      	ldr	r2, [pc, #516]	; (8017340 <tcp_input+0x538>)
 801713c:	69fb      	ldr	r3, [r7, #28]
 801713e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017140:	69fb      	ldr	r3, [r7, #28]
 8017142:	68db      	ldr	r3, [r3, #12]
 8017144:	69fa      	ldr	r2, [r7, #28]
 8017146:	429a      	cmp	r2, r3
 8017148:	d111      	bne.n	801716e <tcp_input+0x366>
 801714a:	4b7a      	ldr	r3, [pc, #488]	; (8017334 <tcp_input+0x52c>)
 801714c:	f240 1215 	movw	r2, #277	; 0x115
 8017150:	497c      	ldr	r1, [pc, #496]	; (8017344 <tcp_input+0x53c>)
 8017152:	487a      	ldr	r0, [pc, #488]	; (801733c <tcp_input+0x534>)
 8017154:	f009 fe3a 	bl	8020dcc <iprintf>
      break;
 8017158:	e009      	b.n	801716e <tcp_input+0x366>
    }
    prev = pcb;
 801715a:	69fb      	ldr	r3, [r7, #28]
 801715c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801715e:	69fb      	ldr	r3, [r7, #28]
 8017160:	68db      	ldr	r3, [r3, #12]
 8017162:	61fb      	str	r3, [r7, #28]
 8017164:	69fb      	ldr	r3, [r7, #28]
 8017166:	2b00      	cmp	r3, #0
 8017168:	f47f af5e 	bne.w	8017028 <tcp_input+0x220>
 801716c:	e000      	b.n	8017170 <tcp_input+0x368>
      break;
 801716e:	bf00      	nop
  }

  if (pcb == NULL) {
 8017170:	69fb      	ldr	r3, [r7, #28]
 8017172:	2b00      	cmp	r3, #0
 8017174:	f040 8095 	bne.w	80172a2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017178:	4b73      	ldr	r3, [pc, #460]	; (8017348 <tcp_input+0x540>)
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	61fb      	str	r3, [r7, #28]
 801717e:	e03f      	b.n	8017200 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017180:	69fb      	ldr	r3, [r7, #28]
 8017182:	7d1b      	ldrb	r3, [r3, #20]
 8017184:	2b0a      	cmp	r3, #10
 8017186:	d006      	beq.n	8017196 <tcp_input+0x38e>
 8017188:	4b6a      	ldr	r3, [pc, #424]	; (8017334 <tcp_input+0x52c>)
 801718a:	f240 121f 	movw	r2, #287	; 0x11f
 801718e:	496f      	ldr	r1, [pc, #444]	; (801734c <tcp_input+0x544>)
 8017190:	486a      	ldr	r0, [pc, #424]	; (801733c <tcp_input+0x534>)
 8017192:	f009 fe1b 	bl	8020dcc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017196:	69fb      	ldr	r3, [r7, #28]
 8017198:	7a1b      	ldrb	r3, [r3, #8]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d009      	beq.n	80171b2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801719e:	69fb      	ldr	r3, [r7, #28]
 80171a0:	7a1a      	ldrb	r2, [r3, #8]
 80171a2:	4b63      	ldr	r3, [pc, #396]	; (8017330 <tcp_input+0x528>)
 80171a4:	685b      	ldr	r3, [r3, #4]
 80171a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80171aa:	3301      	adds	r3, #1
 80171ac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d122      	bne.n	80171f8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80171b2:	69fb      	ldr	r3, [r7, #28]
 80171b4:	8b1a      	ldrh	r2, [r3, #24]
 80171b6:	4b5d      	ldr	r3, [pc, #372]	; (801732c <tcp_input+0x524>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	881b      	ldrh	r3, [r3, #0]
 80171bc:	b29b      	uxth	r3, r3
 80171be:	429a      	cmp	r2, r3
 80171c0:	d11b      	bne.n	80171fa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80171c2:	69fb      	ldr	r3, [r7, #28]
 80171c4:	8ada      	ldrh	r2, [r3, #22]
 80171c6:	4b59      	ldr	r3, [pc, #356]	; (801732c <tcp_input+0x524>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	885b      	ldrh	r3, [r3, #2]
 80171cc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80171ce:	429a      	cmp	r2, r3
 80171d0:	d113      	bne.n	80171fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80171d2:	69fb      	ldr	r3, [r7, #28]
 80171d4:	685a      	ldr	r2, [r3, #4]
 80171d6:	4b56      	ldr	r3, [pc, #344]	; (8017330 <tcp_input+0x528>)
 80171d8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80171da:	429a      	cmp	r2, r3
 80171dc:	d10d      	bne.n	80171fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80171de:	69fb      	ldr	r3, [r7, #28]
 80171e0:	681a      	ldr	r2, [r3, #0]
 80171e2:	4b53      	ldr	r3, [pc, #332]	; (8017330 <tcp_input+0x528>)
 80171e4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80171e6:	429a      	cmp	r2, r3
 80171e8:	d107      	bne.n	80171fa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80171ea:	69f8      	ldr	r0, [r7, #28]
 80171ec:	f000 fb54 	bl	8017898 <tcp_timewait_input>
        }
        pbuf_free(p);
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	f7fd fbc1 	bl	8014978 <pbuf_free>
        return;
 80171f6:	e1f0      	b.n	80175da <tcp_input+0x7d2>
        continue;
 80171f8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80171fa:	69fb      	ldr	r3, [r7, #28]
 80171fc:	68db      	ldr	r3, [r3, #12]
 80171fe:	61fb      	str	r3, [r7, #28]
 8017200:	69fb      	ldr	r3, [r7, #28]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d1bc      	bne.n	8017180 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017206:	2300      	movs	r3, #0
 8017208:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801720a:	4b51      	ldr	r3, [pc, #324]	; (8017350 <tcp_input+0x548>)
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	617b      	str	r3, [r7, #20]
 8017210:	e02a      	b.n	8017268 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017212:	697b      	ldr	r3, [r7, #20]
 8017214:	7a1b      	ldrb	r3, [r3, #8]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d00c      	beq.n	8017234 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801721a:	697b      	ldr	r3, [r7, #20]
 801721c:	7a1a      	ldrb	r2, [r3, #8]
 801721e:	4b44      	ldr	r3, [pc, #272]	; (8017330 <tcp_input+0x528>)
 8017220:	685b      	ldr	r3, [r3, #4]
 8017222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017226:	3301      	adds	r3, #1
 8017228:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801722a:	429a      	cmp	r2, r3
 801722c:	d002      	beq.n	8017234 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801722e:	697b      	ldr	r3, [r7, #20]
 8017230:	61bb      	str	r3, [r7, #24]
        continue;
 8017232:	e016      	b.n	8017262 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017234:	697b      	ldr	r3, [r7, #20]
 8017236:	8ada      	ldrh	r2, [r3, #22]
 8017238:	4b3c      	ldr	r3, [pc, #240]	; (801732c <tcp_input+0x524>)
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	885b      	ldrh	r3, [r3, #2]
 801723e:	b29b      	uxth	r3, r3
 8017240:	429a      	cmp	r2, r3
 8017242:	d10c      	bne.n	801725e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017244:	697b      	ldr	r3, [r7, #20]
 8017246:	681a      	ldr	r2, [r3, #0]
 8017248:	4b39      	ldr	r3, [pc, #228]	; (8017330 <tcp_input+0x528>)
 801724a:	695b      	ldr	r3, [r3, #20]
 801724c:	429a      	cmp	r2, r3
 801724e:	d00f      	beq.n	8017270 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017250:	697b      	ldr	r3, [r7, #20]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d00d      	beq.n	8017272 <tcp_input+0x46a>
 8017256:	697b      	ldr	r3, [r7, #20]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d009      	beq.n	8017272 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801725e:	697b      	ldr	r3, [r7, #20]
 8017260:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	68db      	ldr	r3, [r3, #12]
 8017266:	617b      	str	r3, [r7, #20]
 8017268:	697b      	ldr	r3, [r7, #20]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d1d1      	bne.n	8017212 <tcp_input+0x40a>
 801726e:	e000      	b.n	8017272 <tcp_input+0x46a>
            break;
 8017270:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8017272:	697b      	ldr	r3, [r7, #20]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d014      	beq.n	80172a2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017278:	69bb      	ldr	r3, [r7, #24]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d00a      	beq.n	8017294 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	68da      	ldr	r2, [r3, #12]
 8017282:	69bb      	ldr	r3, [r7, #24]
 8017284:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017286:	4b32      	ldr	r3, [pc, #200]	; (8017350 <tcp_input+0x548>)
 8017288:	681a      	ldr	r2, [r3, #0]
 801728a:	697b      	ldr	r3, [r7, #20]
 801728c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801728e:	4a30      	ldr	r2, [pc, #192]	; (8017350 <tcp_input+0x548>)
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017294:	6978      	ldr	r0, [r7, #20]
 8017296:	f000 fa01 	bl	801769c <tcp_listen_input>
      }
      pbuf_free(p);
 801729a:	6878      	ldr	r0, [r7, #4]
 801729c:	f7fd fb6c 	bl	8014978 <pbuf_free>
      return;
 80172a0:	e19b      	b.n	80175da <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80172a2:	69fb      	ldr	r3, [r7, #28]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	f000 8160 	beq.w	801756a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80172aa:	4b2a      	ldr	r3, [pc, #168]	; (8017354 <tcp_input+0x54c>)
 80172ac:	2200      	movs	r2, #0
 80172ae:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	891a      	ldrh	r2, [r3, #8]
 80172b4:	4b27      	ldr	r3, [pc, #156]	; (8017354 <tcp_input+0x54c>)
 80172b6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80172b8:	4a26      	ldr	r2, [pc, #152]	; (8017354 <tcp_input+0x54c>)
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80172be:	4b1b      	ldr	r3, [pc, #108]	; (801732c <tcp_input+0x524>)
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	4a24      	ldr	r2, [pc, #144]	; (8017354 <tcp_input+0x54c>)
 80172c4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80172c6:	4b24      	ldr	r3, [pc, #144]	; (8017358 <tcp_input+0x550>)
 80172c8:	2200      	movs	r2, #0
 80172ca:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80172cc:	4b23      	ldr	r3, [pc, #140]	; (801735c <tcp_input+0x554>)
 80172ce:	2200      	movs	r2, #0
 80172d0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80172d2:	4b23      	ldr	r3, [pc, #140]	; (8017360 <tcp_input+0x558>)
 80172d4:	2200      	movs	r2, #0
 80172d6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80172d8:	4b22      	ldr	r3, [pc, #136]	; (8017364 <tcp_input+0x55c>)
 80172da:	781b      	ldrb	r3, [r3, #0]
 80172dc:	f003 0308 	and.w	r3, r3, #8
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d006      	beq.n	80172f2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	7b5b      	ldrb	r3, [r3, #13]
 80172e8:	f043 0301 	orr.w	r3, r3, #1
 80172ec:	b2da      	uxtb	r2, r3
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80172f2:	69fb      	ldr	r3, [r7, #28]
 80172f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d038      	beq.n	801736c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80172fa:	69f8      	ldr	r0, [r7, #28]
 80172fc:	f7ff f870 	bl	80163e0 <tcp_process_refused_data>
 8017300:	4603      	mov	r3, r0
 8017302:	f113 0f0d 	cmn.w	r3, #13
 8017306:	d007      	beq.n	8017318 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017308:	69fb      	ldr	r3, [r7, #28]
 801730a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801730c:	2b00      	cmp	r3, #0
 801730e:	d02d      	beq.n	801736c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017310:	4b15      	ldr	r3, [pc, #84]	; (8017368 <tcp_input+0x560>)
 8017312:	881b      	ldrh	r3, [r3, #0]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d029      	beq.n	801736c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8017318:	69fb      	ldr	r3, [r7, #28]
 801731a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801731c:	2b00      	cmp	r3, #0
 801731e:	f040 8104 	bne.w	801752a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017322:	69f8      	ldr	r0, [r7, #28]
 8017324:	f003 fe16 	bl	801af54 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017328:	e0ff      	b.n	801752a <tcp_input+0x722>
 801732a:	bf00      	nop
 801732c:	200056fc 	.word	0x200056fc
 8017330:	200135d0 	.word	0x200135d0
 8017334:	0802474c 	.word	0x0802474c
 8017338:	08024878 	.word	0x08024878
 801733c:	08024798 	.word	0x08024798
 8017340:	20016db0 	.word	0x20016db0
 8017344:	080248a4 	.word	0x080248a4
 8017348:	20016dc0 	.word	0x20016dc0
 801734c:	080248d0 	.word	0x080248d0
 8017350:	20016db8 	.word	0x20016db8
 8017354:	200056ec 	.word	0x200056ec
 8017358:	2000571c 	.word	0x2000571c
 801735c:	20005719 	.word	0x20005719
 8017360:	20005714 	.word	0x20005714
 8017364:	20005718 	.word	0x20005718
 8017368:	20005716 	.word	0x20005716
      }
    }
    tcp_input_pcb = pcb;
 801736c:	4a9c      	ldr	r2, [pc, #624]	; (80175e0 <tcp_input+0x7d8>)
 801736e:	69fb      	ldr	r3, [r7, #28]
 8017370:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017372:	69f8      	ldr	r0, [r7, #28]
 8017374:	f000 fb0a 	bl	801798c <tcp_process>
 8017378:	4603      	mov	r3, r0
 801737a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801737c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017380:	f113 0f0d 	cmn.w	r3, #13
 8017384:	f000 80d3 	beq.w	801752e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8017388:	4b96      	ldr	r3, [pc, #600]	; (80175e4 <tcp_input+0x7dc>)
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	f003 0308 	and.w	r3, r3, #8
 8017390:	2b00      	cmp	r3, #0
 8017392:	d015      	beq.n	80173c0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017394:	69fb      	ldr	r3, [r7, #28]
 8017396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801739a:	2b00      	cmp	r3, #0
 801739c:	d008      	beq.n	80173b0 <tcp_input+0x5a8>
 801739e:	69fb      	ldr	r3, [r7, #28]
 80173a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80173a4:	69fa      	ldr	r2, [r7, #28]
 80173a6:	6912      	ldr	r2, [r2, #16]
 80173a8:	f06f 010d 	mvn.w	r1, #13
 80173ac:	4610      	mov	r0, r2
 80173ae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80173b0:	69f9      	ldr	r1, [r7, #28]
 80173b2:	488d      	ldr	r0, [pc, #564]	; (80175e8 <tcp_input+0x7e0>)
 80173b4:	f7ff fbb0 	bl	8016b18 <tcp_pcb_remove>
        tcp_free(pcb);
 80173b8:	69f8      	ldr	r0, [r7, #28]
 80173ba:	f7fd ff15 	bl	80151e8 <tcp_free>
 80173be:	e0c1      	b.n	8017544 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80173c0:	2300      	movs	r3, #0
 80173c2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80173c4:	4b89      	ldr	r3, [pc, #548]	; (80175ec <tcp_input+0x7e4>)
 80173c6:	881b      	ldrh	r3, [r3, #0]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d01d      	beq.n	8017408 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80173cc:	4b87      	ldr	r3, [pc, #540]	; (80175ec <tcp_input+0x7e4>)
 80173ce:	881b      	ldrh	r3, [r3, #0]
 80173d0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80173d2:	69fb      	ldr	r3, [r7, #28]
 80173d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d00a      	beq.n	80173f2 <tcp_input+0x5ea>
 80173dc:	69fb      	ldr	r3, [r7, #28]
 80173de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80173e2:	69fa      	ldr	r2, [r7, #28]
 80173e4:	6910      	ldr	r0, [r2, #16]
 80173e6:	89fa      	ldrh	r2, [r7, #14]
 80173e8:	69f9      	ldr	r1, [r7, #28]
 80173ea:	4798      	blx	r3
 80173ec:	4603      	mov	r3, r0
 80173ee:	74fb      	strb	r3, [r7, #19]
 80173f0:	e001      	b.n	80173f6 <tcp_input+0x5ee>
 80173f2:	2300      	movs	r3, #0
 80173f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80173f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80173fa:	f113 0f0d 	cmn.w	r3, #13
 80173fe:	f000 8098 	beq.w	8017532 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017402:	4b7a      	ldr	r3, [pc, #488]	; (80175ec <tcp_input+0x7e4>)
 8017404:	2200      	movs	r2, #0
 8017406:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017408:	69f8      	ldr	r0, [r7, #28]
 801740a:	f000 f907 	bl	801761c <tcp_input_delayed_close>
 801740e:	4603      	mov	r3, r0
 8017410:	2b00      	cmp	r3, #0
 8017412:	f040 8090 	bne.w	8017536 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017416:	4b76      	ldr	r3, [pc, #472]	; (80175f0 <tcp_input+0x7e8>)
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d041      	beq.n	80174a2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801741e:	69fb      	ldr	r3, [r7, #28]
 8017420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017422:	2b00      	cmp	r3, #0
 8017424:	d006      	beq.n	8017434 <tcp_input+0x62c>
 8017426:	4b73      	ldr	r3, [pc, #460]	; (80175f4 <tcp_input+0x7ec>)
 8017428:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801742c:	4972      	ldr	r1, [pc, #456]	; (80175f8 <tcp_input+0x7f0>)
 801742e:	4873      	ldr	r0, [pc, #460]	; (80175fc <tcp_input+0x7f4>)
 8017430:	f009 fccc 	bl	8020dcc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017434:	69fb      	ldr	r3, [r7, #28]
 8017436:	8b5b      	ldrh	r3, [r3, #26]
 8017438:	f003 0310 	and.w	r3, r3, #16
 801743c:	2b00      	cmp	r3, #0
 801743e:	d008      	beq.n	8017452 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017440:	4b6b      	ldr	r3, [pc, #428]	; (80175f0 <tcp_input+0x7e8>)
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	4618      	mov	r0, r3
 8017446:	f7fd fa97 	bl	8014978 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801744a:	69f8      	ldr	r0, [r7, #28]
 801744c:	f7fe fa10 	bl	8015870 <tcp_abort>
            goto aborted;
 8017450:	e078      	b.n	8017544 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017452:	69fb      	ldr	r3, [r7, #28]
 8017454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017458:	2b00      	cmp	r3, #0
 801745a:	d00c      	beq.n	8017476 <tcp_input+0x66e>
 801745c:	69fb      	ldr	r3, [r7, #28]
 801745e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017462:	69fb      	ldr	r3, [r7, #28]
 8017464:	6918      	ldr	r0, [r3, #16]
 8017466:	4b62      	ldr	r3, [pc, #392]	; (80175f0 <tcp_input+0x7e8>)
 8017468:	681a      	ldr	r2, [r3, #0]
 801746a:	2300      	movs	r3, #0
 801746c:	69f9      	ldr	r1, [r7, #28]
 801746e:	47a0      	blx	r4
 8017470:	4603      	mov	r3, r0
 8017472:	74fb      	strb	r3, [r7, #19]
 8017474:	e008      	b.n	8017488 <tcp_input+0x680>
 8017476:	4b5e      	ldr	r3, [pc, #376]	; (80175f0 <tcp_input+0x7e8>)
 8017478:	681a      	ldr	r2, [r3, #0]
 801747a:	2300      	movs	r3, #0
 801747c:	69f9      	ldr	r1, [r7, #28]
 801747e:	2000      	movs	r0, #0
 8017480:	f7ff f884 	bl	801658c <tcp_recv_null>
 8017484:	4603      	mov	r3, r0
 8017486:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017488:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801748c:	f113 0f0d 	cmn.w	r3, #13
 8017490:	d053      	beq.n	801753a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017492:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d003      	beq.n	80174a2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801749a:	4b55      	ldr	r3, [pc, #340]	; (80175f0 <tcp_input+0x7e8>)
 801749c:	681a      	ldr	r2, [r3, #0]
 801749e:	69fb      	ldr	r3, [r7, #28]
 80174a0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80174a2:	4b50      	ldr	r3, [pc, #320]	; (80175e4 <tcp_input+0x7dc>)
 80174a4:	781b      	ldrb	r3, [r3, #0]
 80174a6:	f003 0320 	and.w	r3, r3, #32
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d030      	beq.n	8017510 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80174ae:	69fb      	ldr	r3, [r7, #28]
 80174b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d009      	beq.n	80174ca <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80174b6:	69fb      	ldr	r3, [r7, #28]
 80174b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80174ba:	7b5a      	ldrb	r2, [r3, #13]
 80174bc:	69fb      	ldr	r3, [r7, #28]
 80174be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80174c0:	f042 0220 	orr.w	r2, r2, #32
 80174c4:	b2d2      	uxtb	r2, r2
 80174c6:	735a      	strb	r2, [r3, #13]
 80174c8:	e022      	b.n	8017510 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80174ca:	69fb      	ldr	r3, [r7, #28]
 80174cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174ce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80174d2:	d005      	beq.n	80174e0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80174d4:	69fb      	ldr	r3, [r7, #28]
 80174d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174d8:	3301      	adds	r3, #1
 80174da:	b29a      	uxth	r2, r3
 80174dc:	69fb      	ldr	r3, [r7, #28]
 80174de:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80174e0:	69fb      	ldr	r3, [r7, #28]
 80174e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d00b      	beq.n	8017502 <tcp_input+0x6fa>
 80174ea:	69fb      	ldr	r3, [r7, #28]
 80174ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80174f0:	69fb      	ldr	r3, [r7, #28]
 80174f2:	6918      	ldr	r0, [r3, #16]
 80174f4:	2300      	movs	r3, #0
 80174f6:	2200      	movs	r2, #0
 80174f8:	69f9      	ldr	r1, [r7, #28]
 80174fa:	47a0      	blx	r4
 80174fc:	4603      	mov	r3, r0
 80174fe:	74fb      	strb	r3, [r7, #19]
 8017500:	e001      	b.n	8017506 <tcp_input+0x6fe>
 8017502:	2300      	movs	r3, #0
 8017504:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017506:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801750a:	f113 0f0d 	cmn.w	r3, #13
 801750e:	d016      	beq.n	801753e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017510:	4b33      	ldr	r3, [pc, #204]	; (80175e0 <tcp_input+0x7d8>)
 8017512:	2200      	movs	r2, #0
 8017514:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8017516:	69f8      	ldr	r0, [r7, #28]
 8017518:	f000 f880 	bl	801761c <tcp_input_delayed_close>
 801751c:	4603      	mov	r3, r0
 801751e:	2b00      	cmp	r3, #0
 8017520:	d10f      	bne.n	8017542 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017522:	69f8      	ldr	r0, [r7, #28]
 8017524:	f002 ff10 	bl	801a348 <tcp_output>
 8017528:	e00c      	b.n	8017544 <tcp_input+0x73c>
        goto aborted;
 801752a:	bf00      	nop
 801752c:	e00a      	b.n	8017544 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801752e:	bf00      	nop
 8017530:	e008      	b.n	8017544 <tcp_input+0x73c>
              goto aborted;
 8017532:	bf00      	nop
 8017534:	e006      	b.n	8017544 <tcp_input+0x73c>
          goto aborted;
 8017536:	bf00      	nop
 8017538:	e004      	b.n	8017544 <tcp_input+0x73c>
            goto aborted;
 801753a:	bf00      	nop
 801753c:	e002      	b.n	8017544 <tcp_input+0x73c>
              goto aborted;
 801753e:	bf00      	nop
 8017540:	e000      	b.n	8017544 <tcp_input+0x73c>
          goto aborted;
 8017542:	bf00      	nop
    tcp_input_pcb = NULL;
 8017544:	4b26      	ldr	r3, [pc, #152]	; (80175e0 <tcp_input+0x7d8>)
 8017546:	2200      	movs	r2, #0
 8017548:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801754a:	4b29      	ldr	r3, [pc, #164]	; (80175f0 <tcp_input+0x7e8>)
 801754c:	2200      	movs	r2, #0
 801754e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017550:	4b2b      	ldr	r3, [pc, #172]	; (8017600 <tcp_input+0x7f8>)
 8017552:	685b      	ldr	r3, [r3, #4]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d03f      	beq.n	80175d8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8017558:	4b29      	ldr	r3, [pc, #164]	; (8017600 <tcp_input+0x7f8>)
 801755a:	685b      	ldr	r3, [r3, #4]
 801755c:	4618      	mov	r0, r3
 801755e:	f7fd fa0b 	bl	8014978 <pbuf_free>
      inseg.p = NULL;
 8017562:	4b27      	ldr	r3, [pc, #156]	; (8017600 <tcp_input+0x7f8>)
 8017564:	2200      	movs	r2, #0
 8017566:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017568:	e036      	b.n	80175d8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801756a:	4b26      	ldr	r3, [pc, #152]	; (8017604 <tcp_input+0x7fc>)
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	899b      	ldrh	r3, [r3, #12]
 8017570:	b29b      	uxth	r3, r3
 8017572:	4618      	mov	r0, r3
 8017574:	f7fa fe72 	bl	801225c <lwip_htons>
 8017578:	4603      	mov	r3, r0
 801757a:	b2db      	uxtb	r3, r3
 801757c:	f003 0304 	and.w	r3, r3, #4
 8017580:	2b00      	cmp	r3, #0
 8017582:	d118      	bne.n	80175b6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017584:	4b20      	ldr	r3, [pc, #128]	; (8017608 <tcp_input+0x800>)
 8017586:	6819      	ldr	r1, [r3, #0]
 8017588:	4b20      	ldr	r3, [pc, #128]	; (801760c <tcp_input+0x804>)
 801758a:	881b      	ldrh	r3, [r3, #0]
 801758c:	461a      	mov	r2, r3
 801758e:	4b20      	ldr	r3, [pc, #128]	; (8017610 <tcp_input+0x808>)
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017594:	4b1b      	ldr	r3, [pc, #108]	; (8017604 <tcp_input+0x7fc>)
 8017596:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017598:	885b      	ldrh	r3, [r3, #2]
 801759a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801759c:	4a19      	ldr	r2, [pc, #100]	; (8017604 <tcp_input+0x7fc>)
 801759e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80175a0:	8812      	ldrh	r2, [r2, #0]
 80175a2:	b292      	uxth	r2, r2
 80175a4:	9202      	str	r2, [sp, #8]
 80175a6:	9301      	str	r3, [sp, #4]
 80175a8:	4b1a      	ldr	r3, [pc, #104]	; (8017614 <tcp_input+0x80c>)
 80175aa:	9300      	str	r3, [sp, #0]
 80175ac:	4b1a      	ldr	r3, [pc, #104]	; (8017618 <tcp_input+0x810>)
 80175ae:	4602      	mov	r2, r0
 80175b0:	2000      	movs	r0, #0
 80175b2:	f003 fc7d 	bl	801aeb0 <tcp_rst>
    pbuf_free(p);
 80175b6:	6878      	ldr	r0, [r7, #4]
 80175b8:	f7fd f9de 	bl	8014978 <pbuf_free>
  return;
 80175bc:	e00c      	b.n	80175d8 <tcp_input+0x7d0>
    goto dropped;
 80175be:	bf00      	nop
 80175c0:	e006      	b.n	80175d0 <tcp_input+0x7c8>
    goto dropped;
 80175c2:	bf00      	nop
 80175c4:	e004      	b.n	80175d0 <tcp_input+0x7c8>
    goto dropped;
 80175c6:	bf00      	nop
 80175c8:	e002      	b.n	80175d0 <tcp_input+0x7c8>
      goto dropped;
 80175ca:	bf00      	nop
 80175cc:	e000      	b.n	80175d0 <tcp_input+0x7c8>
      goto dropped;
 80175ce:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80175d0:	6878      	ldr	r0, [r7, #4]
 80175d2:	f7fd f9d1 	bl	8014978 <pbuf_free>
 80175d6:	e000      	b.n	80175da <tcp_input+0x7d2>
  return;
 80175d8:	bf00      	nop
}
 80175da:	3724      	adds	r7, #36	; 0x24
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd90      	pop	{r4, r7, pc}
 80175e0:	20016dc4 	.word	0x20016dc4
 80175e4:	20005719 	.word	0x20005719
 80175e8:	20016db0 	.word	0x20016db0
 80175ec:	20005714 	.word	0x20005714
 80175f0:	2000571c 	.word	0x2000571c
 80175f4:	0802474c 	.word	0x0802474c
 80175f8:	08024900 	.word	0x08024900
 80175fc:	08024798 	.word	0x08024798
 8017600:	200056ec 	.word	0x200056ec
 8017604:	200056fc 	.word	0x200056fc
 8017608:	20005710 	.word	0x20005710
 801760c:	20005716 	.word	0x20005716
 8017610:	2000570c 	.word	0x2000570c
 8017614:	200135e0 	.word	0x200135e0
 8017618:	200135e4 	.word	0x200135e4

0801761c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b082      	sub	sp, #8
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d106      	bne.n	8017638 <tcp_input_delayed_close+0x1c>
 801762a:	4b17      	ldr	r3, [pc, #92]	; (8017688 <tcp_input_delayed_close+0x6c>)
 801762c:	f240 225a 	movw	r2, #602	; 0x25a
 8017630:	4916      	ldr	r1, [pc, #88]	; (801768c <tcp_input_delayed_close+0x70>)
 8017632:	4817      	ldr	r0, [pc, #92]	; (8017690 <tcp_input_delayed_close+0x74>)
 8017634:	f009 fbca 	bl	8020dcc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017638:	4b16      	ldr	r3, [pc, #88]	; (8017694 <tcp_input_delayed_close+0x78>)
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	f003 0310 	and.w	r3, r3, #16
 8017640:	2b00      	cmp	r3, #0
 8017642:	d01c      	beq.n	801767e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	8b5b      	ldrh	r3, [r3, #26]
 8017648:	f003 0310 	and.w	r3, r3, #16
 801764c:	2b00      	cmp	r3, #0
 801764e:	d10d      	bne.n	801766c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017656:	2b00      	cmp	r3, #0
 8017658:	d008      	beq.n	801766c <tcp_input_delayed_close+0x50>
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017660:	687a      	ldr	r2, [r7, #4]
 8017662:	6912      	ldr	r2, [r2, #16]
 8017664:	f06f 010e 	mvn.w	r1, #14
 8017668:	4610      	mov	r0, r2
 801766a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801766c:	6879      	ldr	r1, [r7, #4]
 801766e:	480a      	ldr	r0, [pc, #40]	; (8017698 <tcp_input_delayed_close+0x7c>)
 8017670:	f7ff fa52 	bl	8016b18 <tcp_pcb_remove>
    tcp_free(pcb);
 8017674:	6878      	ldr	r0, [r7, #4]
 8017676:	f7fd fdb7 	bl	80151e8 <tcp_free>
    return 1;
 801767a:	2301      	movs	r3, #1
 801767c:	e000      	b.n	8017680 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801767e:	2300      	movs	r3, #0
}
 8017680:	4618      	mov	r0, r3
 8017682:	3708      	adds	r7, #8
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}
 8017688:	0802474c 	.word	0x0802474c
 801768c:	0802491c 	.word	0x0802491c
 8017690:	08024798 	.word	0x08024798
 8017694:	20005719 	.word	0x20005719
 8017698:	20016db0 	.word	0x20016db0

0801769c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801769c:	b590      	push	{r4, r7, lr}
 801769e:	b08b      	sub	sp, #44	; 0x2c
 80176a0:	af04      	add	r7, sp, #16
 80176a2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80176a4:	4b6f      	ldr	r3, [pc, #444]	; (8017864 <tcp_listen_input+0x1c8>)
 80176a6:	781b      	ldrb	r3, [r3, #0]
 80176a8:	f003 0304 	and.w	r3, r3, #4
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	f040 80d2 	bne.w	8017856 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d106      	bne.n	80176c6 <tcp_listen_input+0x2a>
 80176b8:	4b6b      	ldr	r3, [pc, #428]	; (8017868 <tcp_listen_input+0x1cc>)
 80176ba:	f240 2281 	movw	r2, #641	; 0x281
 80176be:	496b      	ldr	r1, [pc, #428]	; (801786c <tcp_listen_input+0x1d0>)
 80176c0:	486b      	ldr	r0, [pc, #428]	; (8017870 <tcp_listen_input+0x1d4>)
 80176c2:	f009 fb83 	bl	8020dcc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80176c6:	4b67      	ldr	r3, [pc, #412]	; (8017864 <tcp_listen_input+0x1c8>)
 80176c8:	781b      	ldrb	r3, [r3, #0]
 80176ca:	f003 0310 	and.w	r3, r3, #16
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d019      	beq.n	8017706 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176d2:	4b68      	ldr	r3, [pc, #416]	; (8017874 <tcp_listen_input+0x1d8>)
 80176d4:	6819      	ldr	r1, [r3, #0]
 80176d6:	4b68      	ldr	r3, [pc, #416]	; (8017878 <tcp_listen_input+0x1dc>)
 80176d8:	881b      	ldrh	r3, [r3, #0]
 80176da:	461a      	mov	r2, r3
 80176dc:	4b67      	ldr	r3, [pc, #412]	; (801787c <tcp_listen_input+0x1e0>)
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176e2:	4b67      	ldr	r3, [pc, #412]	; (8017880 <tcp_listen_input+0x1e4>)
 80176e4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176e6:	885b      	ldrh	r3, [r3, #2]
 80176e8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176ea:	4a65      	ldr	r2, [pc, #404]	; (8017880 <tcp_listen_input+0x1e4>)
 80176ec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176ee:	8812      	ldrh	r2, [r2, #0]
 80176f0:	b292      	uxth	r2, r2
 80176f2:	9202      	str	r2, [sp, #8]
 80176f4:	9301      	str	r3, [sp, #4]
 80176f6:	4b63      	ldr	r3, [pc, #396]	; (8017884 <tcp_listen_input+0x1e8>)
 80176f8:	9300      	str	r3, [sp, #0]
 80176fa:	4b63      	ldr	r3, [pc, #396]	; (8017888 <tcp_listen_input+0x1ec>)
 80176fc:	4602      	mov	r2, r0
 80176fe:	6878      	ldr	r0, [r7, #4]
 8017700:	f003 fbd6 	bl	801aeb0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017704:	e0a9      	b.n	801785a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8017706:	4b57      	ldr	r3, [pc, #348]	; (8017864 <tcp_listen_input+0x1c8>)
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	f003 0302 	and.w	r3, r3, #2
 801770e:	2b00      	cmp	r3, #0
 8017710:	f000 80a3 	beq.w	801785a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	7d5b      	ldrb	r3, [r3, #21]
 8017718:	4618      	mov	r0, r3
 801771a:	f7ff f85b 	bl	80167d4 <tcp_alloc>
 801771e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017720:	697b      	ldr	r3, [r7, #20]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d111      	bne.n	801774a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	699b      	ldr	r3, [r3, #24]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d00a      	beq.n	8017744 <tcp_listen_input+0xa8>
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	699b      	ldr	r3, [r3, #24]
 8017732:	687a      	ldr	r2, [r7, #4]
 8017734:	6910      	ldr	r0, [r2, #16]
 8017736:	f04f 32ff 	mov.w	r2, #4294967295
 801773a:	2100      	movs	r1, #0
 801773c:	4798      	blx	r3
 801773e:	4603      	mov	r3, r0
 8017740:	73bb      	strb	r3, [r7, #14]
      return;
 8017742:	e08b      	b.n	801785c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017744:	23f0      	movs	r3, #240	; 0xf0
 8017746:	73bb      	strb	r3, [r7, #14]
      return;
 8017748:	e088      	b.n	801785c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801774a:	4b50      	ldr	r3, [pc, #320]	; (801788c <tcp_listen_input+0x1f0>)
 801774c:	695a      	ldr	r2, [r3, #20]
 801774e:	697b      	ldr	r3, [r7, #20]
 8017750:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8017752:	4b4e      	ldr	r3, [pc, #312]	; (801788c <tcp_listen_input+0x1f0>)
 8017754:	691a      	ldr	r2, [r3, #16]
 8017756:	697b      	ldr	r3, [r7, #20]
 8017758:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	8ada      	ldrh	r2, [r3, #22]
 801775e:	697b      	ldr	r3, [r7, #20]
 8017760:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8017762:	4b47      	ldr	r3, [pc, #284]	; (8017880 <tcp_listen_input+0x1e4>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	881b      	ldrh	r3, [r3, #0]
 8017768:	b29a      	uxth	r2, r3
 801776a:	697b      	ldr	r3, [r7, #20]
 801776c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801776e:	697b      	ldr	r3, [r7, #20]
 8017770:	2203      	movs	r2, #3
 8017772:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017774:	4b41      	ldr	r3, [pc, #260]	; (801787c <tcp_listen_input+0x1e0>)
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	1c5a      	adds	r2, r3, #1
 801777a:	697b      	ldr	r3, [r7, #20]
 801777c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801777e:	697b      	ldr	r3, [r7, #20]
 8017780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017782:	697b      	ldr	r3, [r7, #20]
 8017784:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8017786:	6978      	ldr	r0, [r7, #20]
 8017788:	f7ff fa5a 	bl	8016c40 <tcp_next_iss>
 801778c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801778e:	697b      	ldr	r3, [r7, #20]
 8017790:	693a      	ldr	r2, [r7, #16]
 8017792:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8017794:	697b      	ldr	r3, [r7, #20]
 8017796:	693a      	ldr	r2, [r7, #16]
 8017798:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801779a:	697b      	ldr	r3, [r7, #20]
 801779c:	693a      	ldr	r2, [r7, #16]
 801779e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	693a      	ldr	r2, [r7, #16]
 80177a4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80177a6:	4b35      	ldr	r3, [pc, #212]	; (801787c <tcp_listen_input+0x1e0>)
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	1e5a      	subs	r2, r3, #1
 80177ac:	697b      	ldr	r3, [r7, #20]
 80177ae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	691a      	ldr	r2, [r3, #16]
 80177b4:	697b      	ldr	r3, [r7, #20]
 80177b6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	687a      	ldr	r2, [r7, #4]
 80177bc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	7a5b      	ldrb	r3, [r3, #9]
 80177c2:	f003 030c 	and.w	r3, r3, #12
 80177c6:	b2da      	uxtb	r2, r3
 80177c8:	697b      	ldr	r3, [r7, #20]
 80177ca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	7a1a      	ldrb	r2, [r3, #8]
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80177d4:	4b2e      	ldr	r3, [pc, #184]	; (8017890 <tcp_listen_input+0x1f4>)
 80177d6:	681a      	ldr	r2, [r3, #0]
 80177d8:	697b      	ldr	r3, [r7, #20]
 80177da:	60da      	str	r2, [r3, #12]
 80177dc:	4a2c      	ldr	r2, [pc, #176]	; (8017890 <tcp_listen_input+0x1f4>)
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	6013      	str	r3, [r2, #0]
 80177e2:	f003 fd27 	bl	801b234 <tcp_timer_needed>
 80177e6:	4b2b      	ldr	r3, [pc, #172]	; (8017894 <tcp_listen_input+0x1f8>)
 80177e8:	2201      	movs	r2, #1
 80177ea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80177ec:	6978      	ldr	r0, [r7, #20]
 80177ee:	f001 fd8d 	bl	801930c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80177f2:	4b23      	ldr	r3, [pc, #140]	; (8017880 <tcp_listen_input+0x1e4>)
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	89db      	ldrh	r3, [r3, #14]
 80177f8:	b29a      	uxth	r2, r3
 80177fa:	697b      	ldr	r3, [r7, #20]
 80177fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017800:	697b      	ldr	r3, [r7, #20]
 8017802:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017806:	697b      	ldr	r3, [r7, #20]
 8017808:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017810:	697b      	ldr	r3, [r7, #20]
 8017812:	3304      	adds	r3, #4
 8017814:	4618      	mov	r0, r3
 8017816:	f007 fbc7 	bl	801efa8 <ip4_route>
 801781a:	4601      	mov	r1, r0
 801781c:	697b      	ldr	r3, [r7, #20]
 801781e:	3304      	adds	r3, #4
 8017820:	461a      	mov	r2, r3
 8017822:	4620      	mov	r0, r4
 8017824:	f7ff fa32 	bl	8016c8c <tcp_eff_send_mss_netif>
 8017828:	4603      	mov	r3, r0
 801782a:	461a      	mov	r2, r3
 801782c:	697b      	ldr	r3, [r7, #20]
 801782e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017830:	2112      	movs	r1, #18
 8017832:	6978      	ldr	r0, [r7, #20]
 8017834:	f002 fc9a 	bl	801a16c <tcp_enqueue_flags>
 8017838:	4603      	mov	r3, r0
 801783a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801783c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d004      	beq.n	801784e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017844:	2100      	movs	r1, #0
 8017846:	6978      	ldr	r0, [r7, #20]
 8017848:	f7fd ff54 	bl	80156f4 <tcp_abandon>
      return;
 801784c:	e006      	b.n	801785c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801784e:	6978      	ldr	r0, [r7, #20]
 8017850:	f002 fd7a 	bl	801a348 <tcp_output>
  return;
 8017854:	e001      	b.n	801785a <tcp_listen_input+0x1be>
    return;
 8017856:	bf00      	nop
 8017858:	e000      	b.n	801785c <tcp_listen_input+0x1c0>
  return;
 801785a:	bf00      	nop
}
 801785c:	371c      	adds	r7, #28
 801785e:	46bd      	mov	sp, r7
 8017860:	bd90      	pop	{r4, r7, pc}
 8017862:	bf00      	nop
 8017864:	20005718 	.word	0x20005718
 8017868:	0802474c 	.word	0x0802474c
 801786c:	08024944 	.word	0x08024944
 8017870:	08024798 	.word	0x08024798
 8017874:	20005710 	.word	0x20005710
 8017878:	20005716 	.word	0x20005716
 801787c:	2000570c 	.word	0x2000570c
 8017880:	200056fc 	.word	0x200056fc
 8017884:	200135e0 	.word	0x200135e0
 8017888:	200135e4 	.word	0x200135e4
 801788c:	200135d0 	.word	0x200135d0
 8017890:	20016db0 	.word	0x20016db0
 8017894:	20016dac 	.word	0x20016dac

08017898 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b086      	sub	sp, #24
 801789c:	af04      	add	r7, sp, #16
 801789e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80178a0:	4b2f      	ldr	r3, [pc, #188]	; (8017960 <tcp_timewait_input+0xc8>)
 80178a2:	781b      	ldrb	r3, [r3, #0]
 80178a4:	f003 0304 	and.w	r3, r3, #4
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d153      	bne.n	8017954 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d106      	bne.n	80178c0 <tcp_timewait_input+0x28>
 80178b2:	4b2c      	ldr	r3, [pc, #176]	; (8017964 <tcp_timewait_input+0xcc>)
 80178b4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80178b8:	492b      	ldr	r1, [pc, #172]	; (8017968 <tcp_timewait_input+0xd0>)
 80178ba:	482c      	ldr	r0, [pc, #176]	; (801796c <tcp_timewait_input+0xd4>)
 80178bc:	f009 fa86 	bl	8020dcc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80178c0:	4b27      	ldr	r3, [pc, #156]	; (8017960 <tcp_timewait_input+0xc8>)
 80178c2:	781b      	ldrb	r3, [r3, #0]
 80178c4:	f003 0302 	and.w	r3, r3, #2
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d02a      	beq.n	8017922 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80178cc:	4b28      	ldr	r3, [pc, #160]	; (8017970 <tcp_timewait_input+0xd8>)
 80178ce:	681a      	ldr	r2, [r3, #0]
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178d4:	1ad3      	subs	r3, r2, r3
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	db2d      	blt.n	8017936 <tcp_timewait_input+0x9e>
 80178da:	4b25      	ldr	r3, [pc, #148]	; (8017970 <tcp_timewait_input+0xd8>)
 80178dc:	681a      	ldr	r2, [r3, #0]
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178e2:	6879      	ldr	r1, [r7, #4]
 80178e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80178e6:	440b      	add	r3, r1
 80178e8:	1ad3      	subs	r3, r2, r3
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	dc23      	bgt.n	8017936 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80178ee:	4b21      	ldr	r3, [pc, #132]	; (8017974 <tcp_timewait_input+0xdc>)
 80178f0:	6819      	ldr	r1, [r3, #0]
 80178f2:	4b21      	ldr	r3, [pc, #132]	; (8017978 <tcp_timewait_input+0xe0>)
 80178f4:	881b      	ldrh	r3, [r3, #0]
 80178f6:	461a      	mov	r2, r3
 80178f8:	4b1d      	ldr	r3, [pc, #116]	; (8017970 <tcp_timewait_input+0xd8>)
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80178fe:	4b1f      	ldr	r3, [pc, #124]	; (801797c <tcp_timewait_input+0xe4>)
 8017900:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017902:	885b      	ldrh	r3, [r3, #2]
 8017904:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017906:	4a1d      	ldr	r2, [pc, #116]	; (801797c <tcp_timewait_input+0xe4>)
 8017908:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801790a:	8812      	ldrh	r2, [r2, #0]
 801790c:	b292      	uxth	r2, r2
 801790e:	9202      	str	r2, [sp, #8]
 8017910:	9301      	str	r3, [sp, #4]
 8017912:	4b1b      	ldr	r3, [pc, #108]	; (8017980 <tcp_timewait_input+0xe8>)
 8017914:	9300      	str	r3, [sp, #0]
 8017916:	4b1b      	ldr	r3, [pc, #108]	; (8017984 <tcp_timewait_input+0xec>)
 8017918:	4602      	mov	r2, r0
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	f003 fac8 	bl	801aeb0 <tcp_rst>
      return;
 8017920:	e01b      	b.n	801795a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017922:	4b0f      	ldr	r3, [pc, #60]	; (8017960 <tcp_timewait_input+0xc8>)
 8017924:	781b      	ldrb	r3, [r3, #0]
 8017926:	f003 0301 	and.w	r3, r3, #1
 801792a:	2b00      	cmp	r3, #0
 801792c:	d003      	beq.n	8017936 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801792e:	4b16      	ldr	r3, [pc, #88]	; (8017988 <tcp_timewait_input+0xf0>)
 8017930:	681a      	ldr	r2, [r3, #0]
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8017936:	4b10      	ldr	r3, [pc, #64]	; (8017978 <tcp_timewait_input+0xe0>)
 8017938:	881b      	ldrh	r3, [r3, #0]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d00c      	beq.n	8017958 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	8b5b      	ldrh	r3, [r3, #26]
 8017942:	f043 0302 	orr.w	r3, r3, #2
 8017946:	b29a      	uxth	r2, r3
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801794c:	6878      	ldr	r0, [r7, #4]
 801794e:	f002 fcfb 	bl	801a348 <tcp_output>
  }
  return;
 8017952:	e001      	b.n	8017958 <tcp_timewait_input+0xc0>
    return;
 8017954:	bf00      	nop
 8017956:	e000      	b.n	801795a <tcp_timewait_input+0xc2>
  return;
 8017958:	bf00      	nop
}
 801795a:	3708      	adds	r7, #8
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}
 8017960:	20005718 	.word	0x20005718
 8017964:	0802474c 	.word	0x0802474c
 8017968:	08024964 	.word	0x08024964
 801796c:	08024798 	.word	0x08024798
 8017970:	2000570c 	.word	0x2000570c
 8017974:	20005710 	.word	0x20005710
 8017978:	20005716 	.word	0x20005716
 801797c:	200056fc 	.word	0x200056fc
 8017980:	200135e0 	.word	0x200135e0
 8017984:	200135e4 	.word	0x200135e4
 8017988:	20016db4 	.word	0x20016db4

0801798c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801798c:	b590      	push	{r4, r7, lr}
 801798e:	b08d      	sub	sp, #52	; 0x34
 8017990:	af04      	add	r7, sp, #16
 8017992:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017994:	2300      	movs	r3, #0
 8017996:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8017998:	2300      	movs	r3, #0
 801799a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d106      	bne.n	80179b0 <tcp_process+0x24>
 80179a2:	4ba5      	ldr	r3, [pc, #660]	; (8017c38 <tcp_process+0x2ac>)
 80179a4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80179a8:	49a4      	ldr	r1, [pc, #656]	; (8017c3c <tcp_process+0x2b0>)
 80179aa:	48a5      	ldr	r0, [pc, #660]	; (8017c40 <tcp_process+0x2b4>)
 80179ac:	f009 fa0e 	bl	8020dcc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80179b0:	4ba4      	ldr	r3, [pc, #656]	; (8017c44 <tcp_process+0x2b8>)
 80179b2:	781b      	ldrb	r3, [r3, #0]
 80179b4:	f003 0304 	and.w	r3, r3, #4
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d04e      	beq.n	8017a5a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	7d1b      	ldrb	r3, [r3, #20]
 80179c0:	2b02      	cmp	r3, #2
 80179c2:	d108      	bne.n	80179d6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80179c8:	4b9f      	ldr	r3, [pc, #636]	; (8017c48 <tcp_process+0x2bc>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	429a      	cmp	r2, r3
 80179ce:	d123      	bne.n	8017a18 <tcp_process+0x8c>
        acceptable = 1;
 80179d0:	2301      	movs	r3, #1
 80179d2:	76fb      	strb	r3, [r7, #27]
 80179d4:	e020      	b.n	8017a18 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179da:	4b9c      	ldr	r3, [pc, #624]	; (8017c4c <tcp_process+0x2c0>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	429a      	cmp	r2, r3
 80179e0:	d102      	bne.n	80179e8 <tcp_process+0x5c>
        acceptable = 1;
 80179e2:	2301      	movs	r3, #1
 80179e4:	76fb      	strb	r3, [r7, #27]
 80179e6:	e017      	b.n	8017a18 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80179e8:	4b98      	ldr	r3, [pc, #608]	; (8017c4c <tcp_process+0x2c0>)
 80179ea:	681a      	ldr	r2, [r3, #0]
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179f0:	1ad3      	subs	r3, r2, r3
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	db10      	blt.n	8017a18 <tcp_process+0x8c>
 80179f6:	4b95      	ldr	r3, [pc, #596]	; (8017c4c <tcp_process+0x2c0>)
 80179f8:	681a      	ldr	r2, [r3, #0]
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179fe:	6879      	ldr	r1, [r7, #4]
 8017a00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017a02:	440b      	add	r3, r1
 8017a04:	1ad3      	subs	r3, r2, r3
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	dc06      	bgt.n	8017a18 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	8b5b      	ldrh	r3, [r3, #26]
 8017a0e:	f043 0302 	orr.w	r3, r3, #2
 8017a12:	b29a      	uxth	r2, r3
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017a18:	7efb      	ldrb	r3, [r7, #27]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d01b      	beq.n	8017a56 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	7d1b      	ldrb	r3, [r3, #20]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d106      	bne.n	8017a34 <tcp_process+0xa8>
 8017a26:	4b84      	ldr	r3, [pc, #528]	; (8017c38 <tcp_process+0x2ac>)
 8017a28:	f44f 724e 	mov.w	r2, #824	; 0x338
 8017a2c:	4988      	ldr	r1, [pc, #544]	; (8017c50 <tcp_process+0x2c4>)
 8017a2e:	4884      	ldr	r0, [pc, #528]	; (8017c40 <tcp_process+0x2b4>)
 8017a30:	f009 f9cc 	bl	8020dcc <iprintf>
      recv_flags |= TF_RESET;
 8017a34:	4b87      	ldr	r3, [pc, #540]	; (8017c54 <tcp_process+0x2c8>)
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	f043 0308 	orr.w	r3, r3, #8
 8017a3c:	b2da      	uxtb	r2, r3
 8017a3e:	4b85      	ldr	r3, [pc, #532]	; (8017c54 <tcp_process+0x2c8>)
 8017a40:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	8b5b      	ldrh	r3, [r3, #26]
 8017a46:	f023 0301 	bic.w	r3, r3, #1
 8017a4a:	b29a      	uxth	r2, r3
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017a50:	f06f 030d 	mvn.w	r3, #13
 8017a54:	e37a      	b.n	801814c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017a56:	2300      	movs	r3, #0
 8017a58:	e378      	b.n	801814c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017a5a:	4b7a      	ldr	r3, [pc, #488]	; (8017c44 <tcp_process+0x2b8>)
 8017a5c:	781b      	ldrb	r3, [r3, #0]
 8017a5e:	f003 0302 	and.w	r3, r3, #2
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d010      	beq.n	8017a88 <tcp_process+0xfc>
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	7d1b      	ldrb	r3, [r3, #20]
 8017a6a:	2b02      	cmp	r3, #2
 8017a6c:	d00c      	beq.n	8017a88 <tcp_process+0xfc>
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	7d1b      	ldrb	r3, [r3, #20]
 8017a72:	2b03      	cmp	r3, #3
 8017a74:	d008      	beq.n	8017a88 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	8b5b      	ldrh	r3, [r3, #26]
 8017a7a:	f043 0302 	orr.w	r3, r3, #2
 8017a7e:	b29a      	uxth	r2, r3
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017a84:	2300      	movs	r3, #0
 8017a86:	e361      	b.n	801814c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	8b5b      	ldrh	r3, [r3, #26]
 8017a8c:	f003 0310 	and.w	r3, r3, #16
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d103      	bne.n	8017a9c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017a94:	4b70      	ldr	r3, [pc, #448]	; (8017c58 <tcp_process+0x2cc>)
 8017a96:	681a      	ldr	r2, [r3, #0]
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8017aac:	6878      	ldr	r0, [r7, #4]
 8017aae:	f001 fc2d 	bl	801930c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	7d1b      	ldrb	r3, [r3, #20]
 8017ab6:	3b02      	subs	r3, #2
 8017ab8:	2b07      	cmp	r3, #7
 8017aba:	f200 8337 	bhi.w	801812c <tcp_process+0x7a0>
 8017abe:	a201      	add	r2, pc, #4	; (adr r2, 8017ac4 <tcp_process+0x138>)
 8017ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ac4:	08017ae5 	.word	0x08017ae5
 8017ac8:	08017d15 	.word	0x08017d15
 8017acc:	08017e8d 	.word	0x08017e8d
 8017ad0:	08017eb7 	.word	0x08017eb7
 8017ad4:	08017fdb 	.word	0x08017fdb
 8017ad8:	08017e8d 	.word	0x08017e8d
 8017adc:	08018067 	.word	0x08018067
 8017ae0:	080180f7 	.word	0x080180f7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017ae4:	4b57      	ldr	r3, [pc, #348]	; (8017c44 <tcp_process+0x2b8>)
 8017ae6:	781b      	ldrb	r3, [r3, #0]
 8017ae8:	f003 0310 	and.w	r3, r3, #16
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	f000 80e4 	beq.w	8017cba <tcp_process+0x32e>
 8017af2:	4b54      	ldr	r3, [pc, #336]	; (8017c44 <tcp_process+0x2b8>)
 8017af4:	781b      	ldrb	r3, [r3, #0]
 8017af6:	f003 0302 	and.w	r3, r3, #2
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	f000 80dd 	beq.w	8017cba <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b04:	1c5a      	adds	r2, r3, #1
 8017b06:	4b50      	ldr	r3, [pc, #320]	; (8017c48 <tcp_process+0x2bc>)
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	429a      	cmp	r2, r3
 8017b0c:	f040 80d5 	bne.w	8017cba <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017b10:	4b4e      	ldr	r3, [pc, #312]	; (8017c4c <tcp_process+0x2c0>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	1c5a      	adds	r2, r3, #1
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8017b22:	4b49      	ldr	r3, [pc, #292]	; (8017c48 <tcp_process+0x2bc>)
 8017b24:	681a      	ldr	r2, [r3, #0]
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017b2a:	4b4c      	ldr	r3, [pc, #304]	; (8017c5c <tcp_process+0x2d0>)
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	89db      	ldrh	r3, [r3, #14]
 8017b30:	b29a      	uxth	r2, r3
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017b44:	4b41      	ldr	r3, [pc, #260]	; (8017c4c <tcp_process+0x2c0>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	1e5a      	subs	r2, r3, #1
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	2204      	movs	r2, #4
 8017b52:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	3304      	adds	r3, #4
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f007 fa23 	bl	801efa8 <ip4_route>
 8017b62:	4601      	mov	r1, r0
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	3304      	adds	r3, #4
 8017b68:	461a      	mov	r2, r3
 8017b6a:	4620      	mov	r0, r4
 8017b6c:	f7ff f88e 	bl	8016c8c <tcp_eff_send_mss_netif>
 8017b70:	4603      	mov	r3, r0
 8017b72:	461a      	mov	r2, r3
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b7c:	009a      	lsls	r2, r3, #2
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b82:	005b      	lsls	r3, r3, #1
 8017b84:	f241 111c 	movw	r1, #4380	; 0x111c
 8017b88:	428b      	cmp	r3, r1
 8017b8a:	bf38      	it	cc
 8017b8c:	460b      	movcc	r3, r1
 8017b8e:	429a      	cmp	r2, r3
 8017b90:	d204      	bcs.n	8017b9c <tcp_process+0x210>
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b96:	009b      	lsls	r3, r3, #2
 8017b98:	b29b      	uxth	r3, r3
 8017b9a:	e00d      	b.n	8017bb8 <tcp_process+0x22c>
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ba0:	005b      	lsls	r3, r3, #1
 8017ba2:	f241 121c 	movw	r2, #4380	; 0x111c
 8017ba6:	4293      	cmp	r3, r2
 8017ba8:	d904      	bls.n	8017bb4 <tcp_process+0x228>
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017bae:	005b      	lsls	r3, r3, #1
 8017bb0:	b29b      	uxth	r3, r3
 8017bb2:	e001      	b.n	8017bb8 <tcp_process+0x22c>
 8017bb4:	f241 131c 	movw	r3, #4380	; 0x111c
 8017bb8:	687a      	ldr	r2, [r7, #4]
 8017bba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d106      	bne.n	8017bd6 <tcp_process+0x24a>
 8017bc8:	4b1b      	ldr	r3, [pc, #108]	; (8017c38 <tcp_process+0x2ac>)
 8017bca:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8017bce:	4924      	ldr	r1, [pc, #144]	; (8017c60 <tcp_process+0x2d4>)
 8017bd0:	481b      	ldr	r0, [pc, #108]	; (8017c40 <tcp_process+0x2b4>)
 8017bd2:	f009 f8fb 	bl	8020dcc <iprintf>
        --pcb->snd_queuelen;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017bdc:	3b01      	subs	r3, #1
 8017bde:	b29a      	uxth	r2, r3
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017bea:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017bec:	69fb      	ldr	r3, [r7, #28]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d111      	bne.n	8017c16 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017bf6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017bf8:	69fb      	ldr	r3, [r7, #28]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d106      	bne.n	8017c0c <tcp_process+0x280>
 8017bfe:	4b0e      	ldr	r3, [pc, #56]	; (8017c38 <tcp_process+0x2ac>)
 8017c00:	f44f 725d 	mov.w	r2, #884	; 0x374
 8017c04:	4917      	ldr	r1, [pc, #92]	; (8017c64 <tcp_process+0x2d8>)
 8017c06:	480e      	ldr	r0, [pc, #56]	; (8017c40 <tcp_process+0x2b4>)
 8017c08:	f009 f8e0 	bl	8020dcc <iprintf>
          pcb->unsent = rseg->next;
 8017c0c:	69fb      	ldr	r3, [r7, #28]
 8017c0e:	681a      	ldr	r2, [r3, #0]
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	66da      	str	r2, [r3, #108]	; 0x6c
 8017c14:	e003      	b.n	8017c1e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8017c16:	69fb      	ldr	r3, [r7, #28]
 8017c18:	681a      	ldr	r2, [r3, #0]
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8017c1e:	69f8      	ldr	r0, [r7, #28]
 8017c20:	f7fe fc6f 	bl	8016502 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d11d      	bne.n	8017c68 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c32:	861a      	strh	r2, [r3, #48]	; 0x30
 8017c34:	e01f      	b.n	8017c76 <tcp_process+0x2ea>
 8017c36:	bf00      	nop
 8017c38:	0802474c 	.word	0x0802474c
 8017c3c:	08024984 	.word	0x08024984
 8017c40:	08024798 	.word	0x08024798
 8017c44:	20005718 	.word	0x20005718
 8017c48:	20005710 	.word	0x20005710
 8017c4c:	2000570c 	.word	0x2000570c
 8017c50:	080249a0 	.word	0x080249a0
 8017c54:	20005719 	.word	0x20005719
 8017c58:	20016db4 	.word	0x20016db4
 8017c5c:	200056fc 	.word	0x200056fc
 8017c60:	080249c0 	.word	0x080249c0
 8017c64:	080249d8 	.word	0x080249d8
        } else {
          pcb->rtime = 0;
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	2200      	movs	r2, #0
 8017c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d00a      	beq.n	8017c96 <tcp_process+0x30a>
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c86:	687a      	ldr	r2, [r7, #4]
 8017c88:	6910      	ldr	r0, [r2, #16]
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	6879      	ldr	r1, [r7, #4]
 8017c8e:	4798      	blx	r3
 8017c90:	4603      	mov	r3, r0
 8017c92:	76bb      	strb	r3, [r7, #26]
 8017c94:	e001      	b.n	8017c9a <tcp_process+0x30e>
 8017c96:	2300      	movs	r3, #0
 8017c98:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8017c9a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017c9e:	f113 0f0d 	cmn.w	r3, #13
 8017ca2:	d102      	bne.n	8017caa <tcp_process+0x31e>
          return ERR_ABRT;
 8017ca4:	f06f 030c 	mvn.w	r3, #12
 8017ca8:	e250      	b.n	801814c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	8b5b      	ldrh	r3, [r3, #26]
 8017cae:	f043 0302 	orr.w	r3, r3, #2
 8017cb2:	b29a      	uxth	r2, r3
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017cb8:	e23a      	b.n	8018130 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017cba:	4b9d      	ldr	r3, [pc, #628]	; (8017f30 <tcp_process+0x5a4>)
 8017cbc:	781b      	ldrb	r3, [r3, #0]
 8017cbe:	f003 0310 	and.w	r3, r3, #16
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	f000 8234 	beq.w	8018130 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017cc8:	4b9a      	ldr	r3, [pc, #616]	; (8017f34 <tcp_process+0x5a8>)
 8017cca:	6819      	ldr	r1, [r3, #0]
 8017ccc:	4b9a      	ldr	r3, [pc, #616]	; (8017f38 <tcp_process+0x5ac>)
 8017cce:	881b      	ldrh	r3, [r3, #0]
 8017cd0:	461a      	mov	r2, r3
 8017cd2:	4b9a      	ldr	r3, [pc, #616]	; (8017f3c <tcp_process+0x5b0>)
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017cd8:	4b99      	ldr	r3, [pc, #612]	; (8017f40 <tcp_process+0x5b4>)
 8017cda:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017cdc:	885b      	ldrh	r3, [r3, #2]
 8017cde:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017ce0:	4a97      	ldr	r2, [pc, #604]	; (8017f40 <tcp_process+0x5b4>)
 8017ce2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017ce4:	8812      	ldrh	r2, [r2, #0]
 8017ce6:	b292      	uxth	r2, r2
 8017ce8:	9202      	str	r2, [sp, #8]
 8017cea:	9301      	str	r3, [sp, #4]
 8017cec:	4b95      	ldr	r3, [pc, #596]	; (8017f44 <tcp_process+0x5b8>)
 8017cee:	9300      	str	r3, [sp, #0]
 8017cf0:	4b95      	ldr	r3, [pc, #596]	; (8017f48 <tcp_process+0x5bc>)
 8017cf2:	4602      	mov	r2, r0
 8017cf4:	6878      	ldr	r0, [r7, #4]
 8017cf6:	f003 f8db 	bl	801aeb0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017d00:	2b05      	cmp	r3, #5
 8017d02:	f200 8215 	bhi.w	8018130 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017d0c:	6878      	ldr	r0, [r7, #4]
 8017d0e:	f002 fea5 	bl	801aa5c <tcp_rexmit_rto>
      break;
 8017d12:	e20d      	b.n	8018130 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017d14:	4b86      	ldr	r3, [pc, #536]	; (8017f30 <tcp_process+0x5a4>)
 8017d16:	781b      	ldrb	r3, [r3, #0]
 8017d18:	f003 0310 	and.w	r3, r3, #16
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	f000 80a1 	beq.w	8017e64 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017d22:	4b84      	ldr	r3, [pc, #528]	; (8017f34 <tcp_process+0x5a8>)
 8017d24:	681a      	ldr	r2, [r3, #0]
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d2a:	1ad3      	subs	r3, r2, r3
 8017d2c:	3b01      	subs	r3, #1
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	db7e      	blt.n	8017e30 <tcp_process+0x4a4>
 8017d32:	4b80      	ldr	r3, [pc, #512]	; (8017f34 <tcp_process+0x5a8>)
 8017d34:	681a      	ldr	r2, [r3, #0]
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d3a:	1ad3      	subs	r3, r2, r3
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	dc77      	bgt.n	8017e30 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	2204      	movs	r2, #4
 8017d44:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d102      	bne.n	8017d54 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017d4e:	23fa      	movs	r3, #250	; 0xfa
 8017d50:	76bb      	strb	r3, [r7, #26]
 8017d52:	e01d      	b.n	8017d90 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d58:	699b      	ldr	r3, [r3, #24]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d106      	bne.n	8017d6c <tcp_process+0x3e0>
 8017d5e:	4b7b      	ldr	r3, [pc, #492]	; (8017f4c <tcp_process+0x5c0>)
 8017d60:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8017d64:	497a      	ldr	r1, [pc, #488]	; (8017f50 <tcp_process+0x5c4>)
 8017d66:	487b      	ldr	r0, [pc, #492]	; (8017f54 <tcp_process+0x5c8>)
 8017d68:	f009 f830 	bl	8020dcc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d70:	699b      	ldr	r3, [r3, #24]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d00a      	beq.n	8017d8c <tcp_process+0x400>
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d7a:	699b      	ldr	r3, [r3, #24]
 8017d7c:	687a      	ldr	r2, [r7, #4]
 8017d7e:	6910      	ldr	r0, [r2, #16]
 8017d80:	2200      	movs	r2, #0
 8017d82:	6879      	ldr	r1, [r7, #4]
 8017d84:	4798      	blx	r3
 8017d86:	4603      	mov	r3, r0
 8017d88:	76bb      	strb	r3, [r7, #26]
 8017d8a:	e001      	b.n	8017d90 <tcp_process+0x404>
 8017d8c:	23f0      	movs	r3, #240	; 0xf0
 8017d8e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017d90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d00a      	beq.n	8017dae <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017d98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017d9c:	f113 0f0d 	cmn.w	r3, #13
 8017da0:	d002      	beq.n	8017da8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017da2:	6878      	ldr	r0, [r7, #4]
 8017da4:	f7fd fd64 	bl	8015870 <tcp_abort>
            }
            return ERR_ABRT;
 8017da8:	f06f 030c 	mvn.w	r3, #12
 8017dac:	e1ce      	b.n	801814c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017dae:	6878      	ldr	r0, [r7, #4]
 8017db0:	f000 fae0 	bl	8018374 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017db4:	4b68      	ldr	r3, [pc, #416]	; (8017f58 <tcp_process+0x5cc>)
 8017db6:	881b      	ldrh	r3, [r3, #0]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d005      	beq.n	8017dc8 <tcp_process+0x43c>
            recv_acked--;
 8017dbc:	4b66      	ldr	r3, [pc, #408]	; (8017f58 <tcp_process+0x5cc>)
 8017dbe:	881b      	ldrh	r3, [r3, #0]
 8017dc0:	3b01      	subs	r3, #1
 8017dc2:	b29a      	uxth	r2, r3
 8017dc4:	4b64      	ldr	r3, [pc, #400]	; (8017f58 <tcp_process+0x5cc>)
 8017dc6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017dcc:	009a      	lsls	r2, r3, #2
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017dd2:	005b      	lsls	r3, r3, #1
 8017dd4:	f241 111c 	movw	r1, #4380	; 0x111c
 8017dd8:	428b      	cmp	r3, r1
 8017dda:	bf38      	it	cc
 8017ddc:	460b      	movcc	r3, r1
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d204      	bcs.n	8017dec <tcp_process+0x460>
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017de6:	009b      	lsls	r3, r3, #2
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	e00d      	b.n	8017e08 <tcp_process+0x47c>
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017df0:	005b      	lsls	r3, r3, #1
 8017df2:	f241 121c 	movw	r2, #4380	; 0x111c
 8017df6:	4293      	cmp	r3, r2
 8017df8:	d904      	bls.n	8017e04 <tcp_process+0x478>
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017dfe:	005b      	lsls	r3, r3, #1
 8017e00:	b29b      	uxth	r3, r3
 8017e02:	e001      	b.n	8017e08 <tcp_process+0x47c>
 8017e04:	f241 131c 	movw	r3, #4380	; 0x111c
 8017e08:	687a      	ldr	r2, [r7, #4]
 8017e0a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017e0e:	4b53      	ldr	r3, [pc, #332]	; (8017f5c <tcp_process+0x5d0>)
 8017e10:	781b      	ldrb	r3, [r3, #0]
 8017e12:	f003 0320 	and.w	r3, r3, #32
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d037      	beq.n	8017e8a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	8b5b      	ldrh	r3, [r3, #26]
 8017e1e:	f043 0302 	orr.w	r3, r3, #2
 8017e22:	b29a      	uxth	r2, r3
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	2207      	movs	r2, #7
 8017e2c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017e2e:	e02c      	b.n	8017e8a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e30:	4b40      	ldr	r3, [pc, #256]	; (8017f34 <tcp_process+0x5a8>)
 8017e32:	6819      	ldr	r1, [r3, #0]
 8017e34:	4b40      	ldr	r3, [pc, #256]	; (8017f38 <tcp_process+0x5ac>)
 8017e36:	881b      	ldrh	r3, [r3, #0]
 8017e38:	461a      	mov	r2, r3
 8017e3a:	4b40      	ldr	r3, [pc, #256]	; (8017f3c <tcp_process+0x5b0>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017e40:	4b3f      	ldr	r3, [pc, #252]	; (8017f40 <tcp_process+0x5b4>)
 8017e42:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e44:	885b      	ldrh	r3, [r3, #2]
 8017e46:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017e48:	4a3d      	ldr	r2, [pc, #244]	; (8017f40 <tcp_process+0x5b4>)
 8017e4a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e4c:	8812      	ldrh	r2, [r2, #0]
 8017e4e:	b292      	uxth	r2, r2
 8017e50:	9202      	str	r2, [sp, #8]
 8017e52:	9301      	str	r3, [sp, #4]
 8017e54:	4b3b      	ldr	r3, [pc, #236]	; (8017f44 <tcp_process+0x5b8>)
 8017e56:	9300      	str	r3, [sp, #0]
 8017e58:	4b3b      	ldr	r3, [pc, #236]	; (8017f48 <tcp_process+0x5bc>)
 8017e5a:	4602      	mov	r2, r0
 8017e5c:	6878      	ldr	r0, [r7, #4]
 8017e5e:	f003 f827 	bl	801aeb0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017e62:	e167      	b.n	8018134 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017e64:	4b32      	ldr	r3, [pc, #200]	; (8017f30 <tcp_process+0x5a4>)
 8017e66:	781b      	ldrb	r3, [r3, #0]
 8017e68:	f003 0302 	and.w	r3, r3, #2
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	f000 8161 	beq.w	8018134 <tcp_process+0x7a8>
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e76:	1e5a      	subs	r2, r3, #1
 8017e78:	4b30      	ldr	r3, [pc, #192]	; (8017f3c <tcp_process+0x5b0>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	429a      	cmp	r2, r3
 8017e7e:	f040 8159 	bne.w	8018134 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017e82:	6878      	ldr	r0, [r7, #4]
 8017e84:	f002 fe0c 	bl	801aaa0 <tcp_rexmit>
      break;
 8017e88:	e154      	b.n	8018134 <tcp_process+0x7a8>
 8017e8a:	e153      	b.n	8018134 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f000 fa71 	bl	8018374 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017e92:	4b32      	ldr	r3, [pc, #200]	; (8017f5c <tcp_process+0x5d0>)
 8017e94:	781b      	ldrb	r3, [r3, #0]
 8017e96:	f003 0320 	and.w	r3, r3, #32
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	f000 814c 	beq.w	8018138 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	8b5b      	ldrh	r3, [r3, #26]
 8017ea4:	f043 0302 	orr.w	r3, r3, #2
 8017ea8:	b29a      	uxth	r2, r3
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	2207      	movs	r2, #7
 8017eb2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017eb4:	e140      	b.n	8018138 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017eb6:	6878      	ldr	r0, [r7, #4]
 8017eb8:	f000 fa5c 	bl	8018374 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017ebc:	4b27      	ldr	r3, [pc, #156]	; (8017f5c <tcp_process+0x5d0>)
 8017ebe:	781b      	ldrb	r3, [r3, #0]
 8017ec0:	f003 0320 	and.w	r3, r3, #32
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d071      	beq.n	8017fac <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017ec8:	4b19      	ldr	r3, [pc, #100]	; (8017f30 <tcp_process+0x5a4>)
 8017eca:	781b      	ldrb	r3, [r3, #0]
 8017ecc:	f003 0310 	and.w	r3, r3, #16
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d060      	beq.n	8017f96 <tcp_process+0x60a>
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017ed8:	4b16      	ldr	r3, [pc, #88]	; (8017f34 <tcp_process+0x5a8>)
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d15a      	bne.n	8017f96 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d156      	bne.n	8017f96 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	8b5b      	ldrh	r3, [r3, #26]
 8017eec:	f043 0302 	orr.w	r3, r3, #2
 8017ef0:	b29a      	uxth	r2, r3
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017ef6:	6878      	ldr	r0, [r7, #4]
 8017ef8:	f7fe fdbe 	bl	8016a78 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017efc:	4b18      	ldr	r3, [pc, #96]	; (8017f60 <tcp_process+0x5d4>)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	687a      	ldr	r2, [r7, #4]
 8017f02:	429a      	cmp	r2, r3
 8017f04:	d105      	bne.n	8017f12 <tcp_process+0x586>
 8017f06:	4b16      	ldr	r3, [pc, #88]	; (8017f60 <tcp_process+0x5d4>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	68db      	ldr	r3, [r3, #12]
 8017f0c:	4a14      	ldr	r2, [pc, #80]	; (8017f60 <tcp_process+0x5d4>)
 8017f0e:	6013      	str	r3, [r2, #0]
 8017f10:	e02e      	b.n	8017f70 <tcp_process+0x5e4>
 8017f12:	4b13      	ldr	r3, [pc, #76]	; (8017f60 <tcp_process+0x5d4>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	617b      	str	r3, [r7, #20]
 8017f18:	e027      	b.n	8017f6a <tcp_process+0x5de>
 8017f1a:	697b      	ldr	r3, [r7, #20]
 8017f1c:	68db      	ldr	r3, [r3, #12]
 8017f1e:	687a      	ldr	r2, [r7, #4]
 8017f20:	429a      	cmp	r2, r3
 8017f22:	d11f      	bne.n	8017f64 <tcp_process+0x5d8>
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	68da      	ldr	r2, [r3, #12]
 8017f28:	697b      	ldr	r3, [r7, #20]
 8017f2a:	60da      	str	r2, [r3, #12]
 8017f2c:	e020      	b.n	8017f70 <tcp_process+0x5e4>
 8017f2e:	bf00      	nop
 8017f30:	20005718 	.word	0x20005718
 8017f34:	20005710 	.word	0x20005710
 8017f38:	20005716 	.word	0x20005716
 8017f3c:	2000570c 	.word	0x2000570c
 8017f40:	200056fc 	.word	0x200056fc
 8017f44:	200135e0 	.word	0x200135e0
 8017f48:	200135e4 	.word	0x200135e4
 8017f4c:	0802474c 	.word	0x0802474c
 8017f50:	080249ec 	.word	0x080249ec
 8017f54:	08024798 	.word	0x08024798
 8017f58:	20005714 	.word	0x20005714
 8017f5c:	20005719 	.word	0x20005719
 8017f60:	20016db0 	.word	0x20016db0
 8017f64:	697b      	ldr	r3, [r7, #20]
 8017f66:	68db      	ldr	r3, [r3, #12]
 8017f68:	617b      	str	r3, [r7, #20]
 8017f6a:	697b      	ldr	r3, [r7, #20]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d1d4      	bne.n	8017f1a <tcp_process+0x58e>
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	2200      	movs	r2, #0
 8017f74:	60da      	str	r2, [r3, #12]
 8017f76:	4b77      	ldr	r3, [pc, #476]	; (8018154 <tcp_process+0x7c8>)
 8017f78:	2201      	movs	r2, #1
 8017f7a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	220a      	movs	r2, #10
 8017f80:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017f82:	4b75      	ldr	r3, [pc, #468]	; (8018158 <tcp_process+0x7cc>)
 8017f84:	681a      	ldr	r2, [r3, #0]
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	60da      	str	r2, [r3, #12]
 8017f8a:	4a73      	ldr	r2, [pc, #460]	; (8018158 <tcp_process+0x7cc>)
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	6013      	str	r3, [r2, #0]
 8017f90:	f003 f950 	bl	801b234 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017f94:	e0d2      	b.n	801813c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	8b5b      	ldrh	r3, [r3, #26]
 8017f9a:	f043 0302 	orr.w	r3, r3, #2
 8017f9e:	b29a      	uxth	r2, r3
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	2208      	movs	r2, #8
 8017fa8:	751a      	strb	r2, [r3, #20]
      break;
 8017faa:	e0c7      	b.n	801813c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017fac:	4b6b      	ldr	r3, [pc, #428]	; (801815c <tcp_process+0x7d0>)
 8017fae:	781b      	ldrb	r3, [r3, #0]
 8017fb0:	f003 0310 	and.w	r3, r3, #16
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	f000 80c1 	beq.w	801813c <tcp_process+0x7b0>
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017fbe:	4b68      	ldr	r3, [pc, #416]	; (8018160 <tcp_process+0x7d4>)
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	429a      	cmp	r2, r3
 8017fc4:	f040 80ba 	bne.w	801813c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	f040 80b5 	bne.w	801813c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	2206      	movs	r2, #6
 8017fd6:	751a      	strb	r2, [r3, #20]
      break;
 8017fd8:	e0b0      	b.n	801813c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017fda:	6878      	ldr	r0, [r7, #4]
 8017fdc:	f000 f9ca 	bl	8018374 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017fe0:	4b60      	ldr	r3, [pc, #384]	; (8018164 <tcp_process+0x7d8>)
 8017fe2:	781b      	ldrb	r3, [r3, #0]
 8017fe4:	f003 0320 	and.w	r3, r3, #32
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	f000 80a9 	beq.w	8018140 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	8b5b      	ldrh	r3, [r3, #26]
 8017ff2:	f043 0302 	orr.w	r3, r3, #2
 8017ff6:	b29a      	uxth	r2, r3
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017ffc:	6878      	ldr	r0, [r7, #4]
 8017ffe:	f7fe fd3b 	bl	8016a78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018002:	4b59      	ldr	r3, [pc, #356]	; (8018168 <tcp_process+0x7dc>)
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	687a      	ldr	r2, [r7, #4]
 8018008:	429a      	cmp	r2, r3
 801800a:	d105      	bne.n	8018018 <tcp_process+0x68c>
 801800c:	4b56      	ldr	r3, [pc, #344]	; (8018168 <tcp_process+0x7dc>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	68db      	ldr	r3, [r3, #12]
 8018012:	4a55      	ldr	r2, [pc, #340]	; (8018168 <tcp_process+0x7dc>)
 8018014:	6013      	str	r3, [r2, #0]
 8018016:	e013      	b.n	8018040 <tcp_process+0x6b4>
 8018018:	4b53      	ldr	r3, [pc, #332]	; (8018168 <tcp_process+0x7dc>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	613b      	str	r3, [r7, #16]
 801801e:	e00c      	b.n	801803a <tcp_process+0x6ae>
 8018020:	693b      	ldr	r3, [r7, #16]
 8018022:	68db      	ldr	r3, [r3, #12]
 8018024:	687a      	ldr	r2, [r7, #4]
 8018026:	429a      	cmp	r2, r3
 8018028:	d104      	bne.n	8018034 <tcp_process+0x6a8>
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	68da      	ldr	r2, [r3, #12]
 801802e:	693b      	ldr	r3, [r7, #16]
 8018030:	60da      	str	r2, [r3, #12]
 8018032:	e005      	b.n	8018040 <tcp_process+0x6b4>
 8018034:	693b      	ldr	r3, [r7, #16]
 8018036:	68db      	ldr	r3, [r3, #12]
 8018038:	613b      	str	r3, [r7, #16]
 801803a:	693b      	ldr	r3, [r7, #16]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d1ef      	bne.n	8018020 <tcp_process+0x694>
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	2200      	movs	r2, #0
 8018044:	60da      	str	r2, [r3, #12]
 8018046:	4b43      	ldr	r3, [pc, #268]	; (8018154 <tcp_process+0x7c8>)
 8018048:	2201      	movs	r2, #1
 801804a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	220a      	movs	r2, #10
 8018050:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018052:	4b41      	ldr	r3, [pc, #260]	; (8018158 <tcp_process+0x7cc>)
 8018054:	681a      	ldr	r2, [r3, #0]
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	60da      	str	r2, [r3, #12]
 801805a:	4a3f      	ldr	r2, [pc, #252]	; (8018158 <tcp_process+0x7cc>)
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	6013      	str	r3, [r2, #0]
 8018060:	f003 f8e8 	bl	801b234 <tcp_timer_needed>
      }
      break;
 8018064:	e06c      	b.n	8018140 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018066:	6878      	ldr	r0, [r7, #4]
 8018068:	f000 f984 	bl	8018374 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801806c:	4b3b      	ldr	r3, [pc, #236]	; (801815c <tcp_process+0x7d0>)
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	f003 0310 	and.w	r3, r3, #16
 8018074:	2b00      	cmp	r3, #0
 8018076:	d065      	beq.n	8018144 <tcp_process+0x7b8>
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801807c:	4b38      	ldr	r3, [pc, #224]	; (8018160 <tcp_process+0x7d4>)
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	429a      	cmp	r2, r3
 8018082:	d15f      	bne.n	8018144 <tcp_process+0x7b8>
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018088:	2b00      	cmp	r3, #0
 801808a:	d15b      	bne.n	8018144 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f7fe fcf3 	bl	8016a78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018092:	4b35      	ldr	r3, [pc, #212]	; (8018168 <tcp_process+0x7dc>)
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	687a      	ldr	r2, [r7, #4]
 8018098:	429a      	cmp	r2, r3
 801809a:	d105      	bne.n	80180a8 <tcp_process+0x71c>
 801809c:	4b32      	ldr	r3, [pc, #200]	; (8018168 <tcp_process+0x7dc>)
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	68db      	ldr	r3, [r3, #12]
 80180a2:	4a31      	ldr	r2, [pc, #196]	; (8018168 <tcp_process+0x7dc>)
 80180a4:	6013      	str	r3, [r2, #0]
 80180a6:	e013      	b.n	80180d0 <tcp_process+0x744>
 80180a8:	4b2f      	ldr	r3, [pc, #188]	; (8018168 <tcp_process+0x7dc>)
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	60fb      	str	r3, [r7, #12]
 80180ae:	e00c      	b.n	80180ca <tcp_process+0x73e>
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	68db      	ldr	r3, [r3, #12]
 80180b4:	687a      	ldr	r2, [r7, #4]
 80180b6:	429a      	cmp	r2, r3
 80180b8:	d104      	bne.n	80180c4 <tcp_process+0x738>
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	68da      	ldr	r2, [r3, #12]
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	60da      	str	r2, [r3, #12]
 80180c2:	e005      	b.n	80180d0 <tcp_process+0x744>
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	68db      	ldr	r3, [r3, #12]
 80180c8:	60fb      	str	r3, [r7, #12]
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d1ef      	bne.n	80180b0 <tcp_process+0x724>
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	2200      	movs	r2, #0
 80180d4:	60da      	str	r2, [r3, #12]
 80180d6:	4b1f      	ldr	r3, [pc, #124]	; (8018154 <tcp_process+0x7c8>)
 80180d8:	2201      	movs	r2, #1
 80180da:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	220a      	movs	r2, #10
 80180e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80180e2:	4b1d      	ldr	r3, [pc, #116]	; (8018158 <tcp_process+0x7cc>)
 80180e4:	681a      	ldr	r2, [r3, #0]
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	60da      	str	r2, [r3, #12]
 80180ea:	4a1b      	ldr	r2, [pc, #108]	; (8018158 <tcp_process+0x7cc>)
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	6013      	str	r3, [r2, #0]
 80180f0:	f003 f8a0 	bl	801b234 <tcp_timer_needed>
      }
      break;
 80180f4:	e026      	b.n	8018144 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80180f6:	6878      	ldr	r0, [r7, #4]
 80180f8:	f000 f93c 	bl	8018374 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80180fc:	4b17      	ldr	r3, [pc, #92]	; (801815c <tcp_process+0x7d0>)
 80180fe:	781b      	ldrb	r3, [r3, #0]
 8018100:	f003 0310 	and.w	r3, r3, #16
 8018104:	2b00      	cmp	r3, #0
 8018106:	d01f      	beq.n	8018148 <tcp_process+0x7bc>
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801810c:	4b14      	ldr	r3, [pc, #80]	; (8018160 <tcp_process+0x7d4>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	429a      	cmp	r2, r3
 8018112:	d119      	bne.n	8018148 <tcp_process+0x7bc>
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018118:	2b00      	cmp	r3, #0
 801811a:	d115      	bne.n	8018148 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801811c:	4b11      	ldr	r3, [pc, #68]	; (8018164 <tcp_process+0x7d8>)
 801811e:	781b      	ldrb	r3, [r3, #0]
 8018120:	f043 0310 	orr.w	r3, r3, #16
 8018124:	b2da      	uxtb	r2, r3
 8018126:	4b0f      	ldr	r3, [pc, #60]	; (8018164 <tcp_process+0x7d8>)
 8018128:	701a      	strb	r2, [r3, #0]
      }
      break;
 801812a:	e00d      	b.n	8018148 <tcp_process+0x7bc>
    default:
      break;
 801812c:	bf00      	nop
 801812e:	e00c      	b.n	801814a <tcp_process+0x7be>
      break;
 8018130:	bf00      	nop
 8018132:	e00a      	b.n	801814a <tcp_process+0x7be>
      break;
 8018134:	bf00      	nop
 8018136:	e008      	b.n	801814a <tcp_process+0x7be>
      break;
 8018138:	bf00      	nop
 801813a:	e006      	b.n	801814a <tcp_process+0x7be>
      break;
 801813c:	bf00      	nop
 801813e:	e004      	b.n	801814a <tcp_process+0x7be>
      break;
 8018140:	bf00      	nop
 8018142:	e002      	b.n	801814a <tcp_process+0x7be>
      break;
 8018144:	bf00      	nop
 8018146:	e000      	b.n	801814a <tcp_process+0x7be>
      break;
 8018148:	bf00      	nop
  }
  return ERR_OK;
 801814a:	2300      	movs	r3, #0
}
 801814c:	4618      	mov	r0, r3
 801814e:	3724      	adds	r7, #36	; 0x24
 8018150:	46bd      	mov	sp, r7
 8018152:	bd90      	pop	{r4, r7, pc}
 8018154:	20016dac 	.word	0x20016dac
 8018158:	20016dc0 	.word	0x20016dc0
 801815c:	20005718 	.word	0x20005718
 8018160:	20005710 	.word	0x20005710
 8018164:	20005719 	.word	0x20005719
 8018168:	20016db0 	.word	0x20016db0

0801816c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801816c:	b590      	push	{r4, r7, lr}
 801816e:	b085      	sub	sp, #20
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
 8018174:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d106      	bne.n	801818a <tcp_oos_insert_segment+0x1e>
 801817c:	4b3b      	ldr	r3, [pc, #236]	; (801826c <tcp_oos_insert_segment+0x100>)
 801817e:	f240 421f 	movw	r2, #1055	; 0x41f
 8018182:	493b      	ldr	r1, [pc, #236]	; (8018270 <tcp_oos_insert_segment+0x104>)
 8018184:	483b      	ldr	r0, [pc, #236]	; (8018274 <tcp_oos_insert_segment+0x108>)
 8018186:	f008 fe21 	bl	8020dcc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	68db      	ldr	r3, [r3, #12]
 801818e:	899b      	ldrh	r3, [r3, #12]
 8018190:	b29b      	uxth	r3, r3
 8018192:	4618      	mov	r0, r3
 8018194:	f7fa f862 	bl	801225c <lwip_htons>
 8018198:	4603      	mov	r3, r0
 801819a:	b2db      	uxtb	r3, r3
 801819c:	f003 0301 	and.w	r3, r3, #1
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d028      	beq.n	80181f6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80181a4:	6838      	ldr	r0, [r7, #0]
 80181a6:	f7fe f997 	bl	80164d8 <tcp_segs_free>
    next = NULL;
 80181aa:	2300      	movs	r3, #0
 80181ac:	603b      	str	r3, [r7, #0]
 80181ae:	e056      	b.n	801825e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80181b0:	683b      	ldr	r3, [r7, #0]
 80181b2:	68db      	ldr	r3, [r3, #12]
 80181b4:	899b      	ldrh	r3, [r3, #12]
 80181b6:	b29b      	uxth	r3, r3
 80181b8:	4618      	mov	r0, r3
 80181ba:	f7fa f84f 	bl	801225c <lwip_htons>
 80181be:	4603      	mov	r3, r0
 80181c0:	b2db      	uxtb	r3, r3
 80181c2:	f003 0301 	and.w	r3, r3, #1
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d00d      	beq.n	80181e6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	68db      	ldr	r3, [r3, #12]
 80181ce:	899b      	ldrh	r3, [r3, #12]
 80181d0:	b29c      	uxth	r4, r3
 80181d2:	2001      	movs	r0, #1
 80181d4:	f7fa f842 	bl	801225c <lwip_htons>
 80181d8:	4603      	mov	r3, r0
 80181da:	461a      	mov	r2, r3
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	68db      	ldr	r3, [r3, #12]
 80181e0:	4322      	orrs	r2, r4
 80181e2:	b292      	uxth	r2, r2
 80181e4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80181e6:	683b      	ldr	r3, [r7, #0]
 80181e8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80181ea:	683b      	ldr	r3, [r7, #0]
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80181f0:	68f8      	ldr	r0, [r7, #12]
 80181f2:	f7fe f986 	bl	8016502 <tcp_seg_free>
    while (next &&
 80181f6:	683b      	ldr	r3, [r7, #0]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d00e      	beq.n	801821a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	891b      	ldrh	r3, [r3, #8]
 8018200:	461a      	mov	r2, r3
 8018202:	4b1d      	ldr	r3, [pc, #116]	; (8018278 <tcp_oos_insert_segment+0x10c>)
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	441a      	add	r2, r3
 8018208:	683b      	ldr	r3, [r7, #0]
 801820a:	68db      	ldr	r3, [r3, #12]
 801820c:	685b      	ldr	r3, [r3, #4]
 801820e:	6839      	ldr	r1, [r7, #0]
 8018210:	8909      	ldrh	r1, [r1, #8]
 8018212:	440b      	add	r3, r1
 8018214:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018216:	2b00      	cmp	r3, #0
 8018218:	daca      	bge.n	80181b0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801821a:	683b      	ldr	r3, [r7, #0]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d01e      	beq.n	801825e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	891b      	ldrh	r3, [r3, #8]
 8018224:	461a      	mov	r2, r3
 8018226:	4b14      	ldr	r3, [pc, #80]	; (8018278 <tcp_oos_insert_segment+0x10c>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	441a      	add	r2, r3
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	68db      	ldr	r3, [r3, #12]
 8018230:	685b      	ldr	r3, [r3, #4]
 8018232:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018234:	2b00      	cmp	r3, #0
 8018236:	dd12      	ble.n	801825e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018238:	683b      	ldr	r3, [r7, #0]
 801823a:	68db      	ldr	r3, [r3, #12]
 801823c:	685b      	ldr	r3, [r3, #4]
 801823e:	b29a      	uxth	r2, r3
 8018240:	4b0d      	ldr	r3, [pc, #52]	; (8018278 <tcp_oos_insert_segment+0x10c>)
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	b29b      	uxth	r3, r3
 8018246:	1ad3      	subs	r3, r2, r3
 8018248:	b29a      	uxth	r2, r3
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	685a      	ldr	r2, [r3, #4]
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	891b      	ldrh	r3, [r3, #8]
 8018256:	4619      	mov	r1, r3
 8018258:	4610      	mov	r0, r2
 801825a:	f7fc fa07 	bl	801466c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	683a      	ldr	r2, [r7, #0]
 8018262:	601a      	str	r2, [r3, #0]
}
 8018264:	bf00      	nop
 8018266:	3714      	adds	r7, #20
 8018268:	46bd      	mov	sp, r7
 801826a:	bd90      	pop	{r4, r7, pc}
 801826c:	0802474c 	.word	0x0802474c
 8018270:	08024a0c 	.word	0x08024a0c
 8018274:	08024798 	.word	0x08024798
 8018278:	2000570c 	.word	0x2000570c

0801827c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801827c:	b5b0      	push	{r4, r5, r7, lr}
 801827e:	b086      	sub	sp, #24
 8018280:	af00      	add	r7, sp, #0
 8018282:	60f8      	str	r0, [r7, #12]
 8018284:	60b9      	str	r1, [r7, #8]
 8018286:	607a      	str	r2, [r7, #4]
 8018288:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801828a:	e03e      	b.n	801830a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801828c:	68bb      	ldr	r3, [r7, #8]
 801828e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018290:	68bb      	ldr	r3, [r7, #8]
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8018296:	697b      	ldr	r3, [r7, #20]
 8018298:	685b      	ldr	r3, [r3, #4]
 801829a:	4618      	mov	r0, r3
 801829c:	f7fc fbfa 	bl	8014a94 <pbuf_clen>
 80182a0:	4603      	mov	r3, r0
 80182a2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80182aa:	8a7a      	ldrh	r2, [r7, #18]
 80182ac:	429a      	cmp	r2, r3
 80182ae:	d906      	bls.n	80182be <tcp_free_acked_segments+0x42>
 80182b0:	4b2a      	ldr	r3, [pc, #168]	; (801835c <tcp_free_acked_segments+0xe0>)
 80182b2:	f240 4257 	movw	r2, #1111	; 0x457
 80182b6:	492a      	ldr	r1, [pc, #168]	; (8018360 <tcp_free_acked_segments+0xe4>)
 80182b8:	482a      	ldr	r0, [pc, #168]	; (8018364 <tcp_free_acked_segments+0xe8>)
 80182ba:	f008 fd87 	bl	8020dcc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80182c4:	8a7b      	ldrh	r3, [r7, #18]
 80182c6:	1ad3      	subs	r3, r2, r3
 80182c8:	b29a      	uxth	r2, r3
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80182d0:	697b      	ldr	r3, [r7, #20]
 80182d2:	891a      	ldrh	r2, [r3, #8]
 80182d4:	4b24      	ldr	r3, [pc, #144]	; (8018368 <tcp_free_acked_segments+0xec>)
 80182d6:	881b      	ldrh	r3, [r3, #0]
 80182d8:	4413      	add	r3, r2
 80182da:	b29a      	uxth	r2, r3
 80182dc:	4b22      	ldr	r3, [pc, #136]	; (8018368 <tcp_free_acked_segments+0xec>)
 80182de:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80182e0:	6978      	ldr	r0, [r7, #20]
 80182e2:	f7fe f90e 	bl	8016502 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d00c      	beq.n	801830a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80182f0:	68bb      	ldr	r3, [r7, #8]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d109      	bne.n	801830a <tcp_free_acked_segments+0x8e>
 80182f6:	683b      	ldr	r3, [r7, #0]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d106      	bne.n	801830a <tcp_free_acked_segments+0x8e>
 80182fc:	4b17      	ldr	r3, [pc, #92]	; (801835c <tcp_free_acked_segments+0xe0>)
 80182fe:	f240 4261 	movw	r2, #1121	; 0x461
 8018302:	491a      	ldr	r1, [pc, #104]	; (801836c <tcp_free_acked_segments+0xf0>)
 8018304:	4817      	ldr	r0, [pc, #92]	; (8018364 <tcp_free_acked_segments+0xe8>)
 8018306:	f008 fd61 	bl	8020dcc <iprintf>
  while (seg_list != NULL &&
 801830a:	68bb      	ldr	r3, [r7, #8]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d020      	beq.n	8018352 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018310:	68bb      	ldr	r3, [r7, #8]
 8018312:	68db      	ldr	r3, [r3, #12]
 8018314:	685b      	ldr	r3, [r3, #4]
 8018316:	4618      	mov	r0, r3
 8018318:	f7f9 ffb5 	bl	8012286 <lwip_htonl>
 801831c:	4604      	mov	r4, r0
 801831e:	68bb      	ldr	r3, [r7, #8]
 8018320:	891b      	ldrh	r3, [r3, #8]
 8018322:	461d      	mov	r5, r3
 8018324:	68bb      	ldr	r3, [r7, #8]
 8018326:	68db      	ldr	r3, [r3, #12]
 8018328:	899b      	ldrh	r3, [r3, #12]
 801832a:	b29b      	uxth	r3, r3
 801832c:	4618      	mov	r0, r3
 801832e:	f7f9 ff95 	bl	801225c <lwip_htons>
 8018332:	4603      	mov	r3, r0
 8018334:	b2db      	uxtb	r3, r3
 8018336:	f003 0303 	and.w	r3, r3, #3
 801833a:	2b00      	cmp	r3, #0
 801833c:	d001      	beq.n	8018342 <tcp_free_acked_segments+0xc6>
 801833e:	2301      	movs	r3, #1
 8018340:	e000      	b.n	8018344 <tcp_free_acked_segments+0xc8>
 8018342:	2300      	movs	r3, #0
 8018344:	442b      	add	r3, r5
 8018346:	18e2      	adds	r2, r4, r3
 8018348:	4b09      	ldr	r3, [pc, #36]	; (8018370 <tcp_free_acked_segments+0xf4>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801834e:	2b00      	cmp	r3, #0
 8018350:	dd9c      	ble.n	801828c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018352:	68bb      	ldr	r3, [r7, #8]
}
 8018354:	4618      	mov	r0, r3
 8018356:	3718      	adds	r7, #24
 8018358:	46bd      	mov	sp, r7
 801835a:	bdb0      	pop	{r4, r5, r7, pc}
 801835c:	0802474c 	.word	0x0802474c
 8018360:	08024a34 	.word	0x08024a34
 8018364:	08024798 	.word	0x08024798
 8018368:	20005714 	.word	0x20005714
 801836c:	08024a5c 	.word	0x08024a5c
 8018370:	20005710 	.word	0x20005710

08018374 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018374:	b5b0      	push	{r4, r5, r7, lr}
 8018376:	b094      	sub	sp, #80	; 0x50
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801837c:	2300      	movs	r3, #0
 801837e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d106      	bne.n	8018394 <tcp_receive+0x20>
 8018386:	4ba6      	ldr	r3, [pc, #664]	; (8018620 <tcp_receive+0x2ac>)
 8018388:	f240 427b 	movw	r2, #1147	; 0x47b
 801838c:	49a5      	ldr	r1, [pc, #660]	; (8018624 <tcp_receive+0x2b0>)
 801838e:	48a6      	ldr	r0, [pc, #664]	; (8018628 <tcp_receive+0x2b4>)
 8018390:	f008 fd1c 	bl	8020dcc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	7d1b      	ldrb	r3, [r3, #20]
 8018398:	2b03      	cmp	r3, #3
 801839a:	d806      	bhi.n	80183aa <tcp_receive+0x36>
 801839c:	4ba0      	ldr	r3, [pc, #640]	; (8018620 <tcp_receive+0x2ac>)
 801839e:	f240 427c 	movw	r2, #1148	; 0x47c
 80183a2:	49a2      	ldr	r1, [pc, #648]	; (801862c <tcp_receive+0x2b8>)
 80183a4:	48a0      	ldr	r0, [pc, #640]	; (8018628 <tcp_receive+0x2b4>)
 80183a6:	f008 fd11 	bl	8020dcc <iprintf>

  if (flags & TCP_ACK) {
 80183aa:	4ba1      	ldr	r3, [pc, #644]	; (8018630 <tcp_receive+0x2bc>)
 80183ac:	781b      	ldrb	r3, [r3, #0]
 80183ae:	f003 0310 	and.w	r3, r3, #16
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	f000 8263 	beq.w	801887e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80183be:	461a      	mov	r2, r3
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80183c4:	4413      	add	r3, r2
 80183c6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80183cc:	4b99      	ldr	r3, [pc, #612]	; (8018634 <tcp_receive+0x2c0>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	1ad3      	subs	r3, r2, r3
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	db1b      	blt.n	801840e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80183da:	4b96      	ldr	r3, [pc, #600]	; (8018634 <tcp_receive+0x2c0>)
 80183dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80183de:	429a      	cmp	r2, r3
 80183e0:	d106      	bne.n	80183f0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80183e6:	4b94      	ldr	r3, [pc, #592]	; (8018638 <tcp_receive+0x2c4>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	1ad3      	subs	r3, r2, r3
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	db0e      	blt.n	801840e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80183f4:	4b90      	ldr	r3, [pc, #576]	; (8018638 <tcp_receive+0x2c4>)
 80183f6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d125      	bne.n	8018448 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80183fc:	4b8f      	ldr	r3, [pc, #572]	; (801863c <tcp_receive+0x2c8>)
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	89db      	ldrh	r3, [r3, #14]
 8018402:	b29a      	uxth	r2, r3
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801840a:	429a      	cmp	r2, r3
 801840c:	d91c      	bls.n	8018448 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801840e:	4b8b      	ldr	r3, [pc, #556]	; (801863c <tcp_receive+0x2c8>)
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	89db      	ldrh	r3, [r3, #14]
 8018414:	b29a      	uxth	r2, r3
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018428:	429a      	cmp	r2, r3
 801842a:	d205      	bcs.n	8018438 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8018438:	4b7e      	ldr	r3, [pc, #504]	; (8018634 <tcp_receive+0x2c0>)
 801843a:	681a      	ldr	r2, [r3, #0]
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8018440:	4b7d      	ldr	r3, [pc, #500]	; (8018638 <tcp_receive+0x2c4>)
 8018442:	681a      	ldr	r2, [r3, #0]
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018448:	4b7b      	ldr	r3, [pc, #492]	; (8018638 <tcp_receive+0x2c4>)
 801844a:	681a      	ldr	r2, [r3, #0]
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018450:	1ad3      	subs	r3, r2, r3
 8018452:	2b00      	cmp	r3, #0
 8018454:	dc58      	bgt.n	8018508 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018456:	4b7a      	ldr	r3, [pc, #488]	; (8018640 <tcp_receive+0x2cc>)
 8018458:	881b      	ldrh	r3, [r3, #0]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d14b      	bne.n	80184f6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018462:	687a      	ldr	r2, [r7, #4]
 8018464:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8018468:	4413      	add	r3, r2
 801846a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801846c:	429a      	cmp	r2, r3
 801846e:	d142      	bne.n	80184f6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018476:	2b00      	cmp	r3, #0
 8018478:	db3d      	blt.n	80184f6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801847e:	4b6e      	ldr	r3, [pc, #440]	; (8018638 <tcp_receive+0x2c4>)
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	429a      	cmp	r2, r3
 8018484:	d137      	bne.n	80184f6 <tcp_receive+0x182>
              found_dupack = 1;
 8018486:	2301      	movs	r3, #1
 8018488:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018490:	2bff      	cmp	r3, #255	; 0xff
 8018492:	d007      	beq.n	80184a4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801849a:	3301      	adds	r3, #1
 801849c:	b2da      	uxtb	r2, r3
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80184aa:	2b03      	cmp	r3, #3
 80184ac:	d91b      	bls.n	80184e6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184b8:	4413      	add	r3, r2
 80184ba:	b29a      	uxth	r2, r3
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d30a      	bcc.n	80184dc <tcp_receive+0x168>
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184d0:	4413      	add	r3, r2
 80184d2:	b29a      	uxth	r2, r3
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80184da:	e004      	b.n	80184e6 <tcp_receive+0x172>
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80184e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80184ec:	2b02      	cmp	r3, #2
 80184ee:	d902      	bls.n	80184f6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80184f0:	6878      	ldr	r0, [r7, #4]
 80184f2:	f002 fb41 	bl	801ab78 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80184f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	f040 8160 	bne.w	80187be <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	2200      	movs	r2, #0
 8018502:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018506:	e15a      	b.n	80187be <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018508:	4b4b      	ldr	r3, [pc, #300]	; (8018638 <tcp_receive+0x2c4>)
 801850a:	681a      	ldr	r2, [r3, #0]
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018510:	1ad3      	subs	r3, r2, r3
 8018512:	3b01      	subs	r3, #1
 8018514:	2b00      	cmp	r3, #0
 8018516:	f2c0 814d 	blt.w	80187b4 <tcp_receive+0x440>
 801851a:	4b47      	ldr	r3, [pc, #284]	; (8018638 <tcp_receive+0x2c4>)
 801851c:	681a      	ldr	r2, [r3, #0]
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018522:	1ad3      	subs	r3, r2, r3
 8018524:	2b00      	cmp	r3, #0
 8018526:	f300 8145 	bgt.w	80187b4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	8b5b      	ldrh	r3, [r3, #26]
 801852e:	f003 0304 	and.w	r3, r3, #4
 8018532:	2b00      	cmp	r3, #0
 8018534:	d010      	beq.n	8018558 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	8b5b      	ldrh	r3, [r3, #26]
 801853a:	f023 0304 	bic.w	r3, r3, #4
 801853e:	b29a      	uxth	r2, r3
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	2200      	movs	r2, #0
 8018554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	2200      	movs	r2, #0
 801855c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018566:	10db      	asrs	r3, r3, #3
 8018568:	b21b      	sxth	r3, r3
 801856a:	b29a      	uxth	r2, r3
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018572:	b29b      	uxth	r3, r3
 8018574:	4413      	add	r3, r2
 8018576:	b29b      	uxth	r3, r3
 8018578:	b21a      	sxth	r2, r3
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018580:	4b2d      	ldr	r3, [pc, #180]	; (8018638 <tcp_receive+0x2c4>)
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	b29a      	uxth	r2, r3
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801858a:	b29b      	uxth	r3, r3
 801858c:	1ad3      	subs	r3, r2, r3
 801858e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	2200      	movs	r2, #0
 8018594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8018598:	4b27      	ldr	r3, [pc, #156]	; (8018638 <tcp_receive+0x2c4>)
 801859a:	681a      	ldr	r2, [r3, #0]
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	7d1b      	ldrb	r3, [r3, #20]
 80185a4:	2b03      	cmp	r3, #3
 80185a6:	f240 8096 	bls.w	80186d6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80185b6:	429a      	cmp	r2, r3
 80185b8:	d244      	bcs.n	8018644 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	8b5b      	ldrh	r3, [r3, #26]
 80185be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d001      	beq.n	80185ca <tcp_receive+0x256>
 80185c6:	2301      	movs	r3, #1
 80185c8:	e000      	b.n	80185cc <tcp_receive+0x258>
 80185ca:	2302      	movs	r3, #2
 80185cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80185d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80185d4:	b29a      	uxth	r2, r3
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80185da:	fb12 f303 	smulbb	r3, r2, r3
 80185de:	b29b      	uxth	r3, r3
 80185e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80185e2:	4293      	cmp	r3, r2
 80185e4:	bf28      	it	cs
 80185e6:	4613      	movcs	r3, r2
 80185e8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80185f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80185f2:	4413      	add	r3, r2
 80185f4:	b29a      	uxth	r2, r3
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80185fc:	429a      	cmp	r2, r3
 80185fe:	d309      	bcc.n	8018614 <tcp_receive+0x2a0>
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018606:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018608:	4413      	add	r3, r2
 801860a:	b29a      	uxth	r2, r3
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018612:	e060      	b.n	80186d6 <tcp_receive+0x362>
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801861a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801861e:	e05a      	b.n	80186d6 <tcp_receive+0x362>
 8018620:	0802474c 	.word	0x0802474c
 8018624:	08024a7c 	.word	0x08024a7c
 8018628:	08024798 	.word	0x08024798
 801862c:	08024a98 	.word	0x08024a98
 8018630:	20005718 	.word	0x20005718
 8018634:	2000570c 	.word	0x2000570c
 8018638:	20005710 	.word	0x20005710
 801863c:	200056fc 	.word	0x200056fc
 8018640:	20005716 	.word	0x20005716
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801864a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801864c:	4413      	add	r3, r2
 801864e:	b29a      	uxth	r2, r3
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8018656:	429a      	cmp	r2, r3
 8018658:	d309      	bcc.n	801866e <tcp_receive+0x2fa>
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018660:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018662:	4413      	add	r3, r2
 8018664:	b29a      	uxth	r2, r3
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801866c:	e004      	b.n	8018678 <tcp_receive+0x304>
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018684:	429a      	cmp	r2, r3
 8018686:	d326      	bcc.n	80186d6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018694:	1ad3      	subs	r3, r2, r3
 8018696:	b29a      	uxth	r2, r3
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186a8:	4413      	add	r3, r2
 80186aa:	b29a      	uxth	r2, r3
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80186b2:	429a      	cmp	r2, r3
 80186b4:	d30a      	bcc.n	80186cc <tcp_receive+0x358>
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186c0:	4413      	add	r3, r2
 80186c2:	b29a      	uxth	r2, r3
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80186ca:	e004      	b.n	80186d6 <tcp_receive+0x362>
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80186d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186de:	4a98      	ldr	r2, [pc, #608]	; (8018940 <tcp_receive+0x5cc>)
 80186e0:	6878      	ldr	r0, [r7, #4]
 80186e2:	f7ff fdcb 	bl	801827c <tcp_free_acked_segments>
 80186e6:	4602      	mov	r2, r0
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186f4:	4a93      	ldr	r2, [pc, #588]	; (8018944 <tcp_receive+0x5d0>)
 80186f6:	6878      	ldr	r0, [r7, #4]
 80186f8:	f7ff fdc0 	bl	801827c <tcp_free_acked_segments>
 80186fc:	4602      	mov	r2, r0
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018706:	2b00      	cmp	r3, #0
 8018708:	d104      	bne.n	8018714 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018710:	861a      	strh	r2, [r3, #48]	; 0x30
 8018712:	e002      	b.n	801871a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	2200      	movs	r2, #0
 8018718:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	2200      	movs	r2, #0
 801871e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018724:	2b00      	cmp	r3, #0
 8018726:	d103      	bne.n	8018730 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	2200      	movs	r2, #0
 801872c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018736:	4b84      	ldr	r3, [pc, #528]	; (8018948 <tcp_receive+0x5d4>)
 8018738:	881b      	ldrh	r3, [r3, #0]
 801873a:	4413      	add	r3, r2
 801873c:	b29a      	uxth	r2, r3
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	8b5b      	ldrh	r3, [r3, #26]
 8018748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801874c:	2b00      	cmp	r3, #0
 801874e:	d035      	beq.n	80187bc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018754:	2b00      	cmp	r3, #0
 8018756:	d118      	bne.n	801878a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801875c:	2b00      	cmp	r3, #0
 801875e:	d00c      	beq.n	801877a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018768:	68db      	ldr	r3, [r3, #12]
 801876a:	685b      	ldr	r3, [r3, #4]
 801876c:	4618      	mov	r0, r3
 801876e:	f7f9 fd8a 	bl	8012286 <lwip_htonl>
 8018772:	4603      	mov	r3, r0
 8018774:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018776:	2b00      	cmp	r3, #0
 8018778:	dc20      	bgt.n	80187bc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	8b5b      	ldrh	r3, [r3, #26]
 801877e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018782:	b29a      	uxth	r2, r3
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018788:	e018      	b.n	80187bc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018792:	68db      	ldr	r3, [r3, #12]
 8018794:	685b      	ldr	r3, [r3, #4]
 8018796:	4618      	mov	r0, r3
 8018798:	f7f9 fd75 	bl	8012286 <lwip_htonl>
 801879c:	4603      	mov	r3, r0
 801879e:	1ae3      	subs	r3, r4, r3
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	dc0b      	bgt.n	80187bc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	8b5b      	ldrh	r3, [r3, #26]
 80187a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80187ac:	b29a      	uxth	r2, r3
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80187b2:	e003      	b.n	80187bc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80187b4:	6878      	ldr	r0, [r7, #4]
 80187b6:	f002 fbcd 	bl	801af54 <tcp_send_empty_ack>
 80187ba:	e000      	b.n	80187be <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80187bc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d05b      	beq.n	801887e <tcp_receive+0x50a>
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80187ca:	4b60      	ldr	r3, [pc, #384]	; (801894c <tcp_receive+0x5d8>)
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	1ad3      	subs	r3, r2, r3
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	da54      	bge.n	801887e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80187d4:	4b5e      	ldr	r3, [pc, #376]	; (8018950 <tcp_receive+0x5dc>)
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	b29a      	uxth	r2, r3
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187de:	b29b      	uxth	r3, r3
 80187e0:	1ad3      	subs	r3, r2, r3
 80187e2:	b29b      	uxth	r3, r3
 80187e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80187e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80187f2:	10db      	asrs	r3, r3, #3
 80187f4:	b21b      	sxth	r3, r3
 80187f6:	b29b      	uxth	r3, r3
 80187f8:	1ad3      	subs	r3, r2, r3
 80187fa:	b29b      	uxth	r3, r3
 80187fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018806:	b29a      	uxth	r2, r3
 8018808:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801880c:	4413      	add	r3, r2
 801880e:	b29b      	uxth	r3, r3
 8018810:	b21a      	sxth	r2, r3
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8018816:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801881a:	2b00      	cmp	r3, #0
 801881c:	da05      	bge.n	801882a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801881e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018822:	425b      	negs	r3, r3
 8018824:	b29b      	uxth	r3, r3
 8018826:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801882a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018834:	109b      	asrs	r3, r3, #2
 8018836:	b21b      	sxth	r3, r3
 8018838:	b29b      	uxth	r3, r3
 801883a:	1ad3      	subs	r3, r2, r3
 801883c:	b29b      	uxth	r3, r3
 801883e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018848:	b29a      	uxth	r2, r3
 801884a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801884e:	4413      	add	r3, r2
 8018850:	b29b      	uxth	r3, r3
 8018852:	b21a      	sxth	r2, r3
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801885e:	10db      	asrs	r3, r3, #3
 8018860:	b21b      	sxth	r3, r3
 8018862:	b29a      	uxth	r2, r3
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801886a:	b29b      	uxth	r3, r3
 801886c:	4413      	add	r3, r2
 801886e:	b29b      	uxth	r3, r3
 8018870:	b21a      	sxth	r2, r3
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	2200      	movs	r2, #0
 801887c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801887e:	4b35      	ldr	r3, [pc, #212]	; (8018954 <tcp_receive+0x5e0>)
 8018880:	881b      	ldrh	r3, [r3, #0]
 8018882:	2b00      	cmp	r3, #0
 8018884:	f000 84e1 	beq.w	801924a <tcp_receive+0xed6>
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	7d1b      	ldrb	r3, [r3, #20]
 801888c:	2b06      	cmp	r3, #6
 801888e:	f200 84dc 	bhi.w	801924a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018896:	4b30      	ldr	r3, [pc, #192]	; (8018958 <tcp_receive+0x5e4>)
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	1ad3      	subs	r3, r2, r3
 801889c:	3b01      	subs	r3, #1
 801889e:	2b00      	cmp	r3, #0
 80188a0:	f2c0 808e 	blt.w	80189c0 <tcp_receive+0x64c>
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80188a8:	4b2a      	ldr	r3, [pc, #168]	; (8018954 <tcp_receive+0x5e0>)
 80188aa:	881b      	ldrh	r3, [r3, #0]
 80188ac:	4619      	mov	r1, r3
 80188ae:	4b2a      	ldr	r3, [pc, #168]	; (8018958 <tcp_receive+0x5e4>)
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	440b      	add	r3, r1
 80188b4:	1ad3      	subs	r3, r2, r3
 80188b6:	3301      	adds	r3, #1
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	f300 8081 	bgt.w	80189c0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80188be:	4b27      	ldr	r3, [pc, #156]	; (801895c <tcp_receive+0x5e8>)
 80188c0:	685b      	ldr	r3, [r3, #4]
 80188c2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80188c8:	4b23      	ldr	r3, [pc, #140]	; (8018958 <tcp_receive+0x5e4>)
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	1ad3      	subs	r3, r2, r3
 80188ce:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80188d0:	4b22      	ldr	r3, [pc, #136]	; (801895c <tcp_receive+0x5e8>)
 80188d2:	685b      	ldr	r3, [r3, #4]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d106      	bne.n	80188e6 <tcp_receive+0x572>
 80188d8:	4b21      	ldr	r3, [pc, #132]	; (8018960 <tcp_receive+0x5ec>)
 80188da:	f240 5294 	movw	r2, #1428	; 0x594
 80188de:	4921      	ldr	r1, [pc, #132]	; (8018964 <tcp_receive+0x5f0>)
 80188e0:	4821      	ldr	r0, [pc, #132]	; (8018968 <tcp_receive+0x5f4>)
 80188e2:	f008 fa73 	bl	8020dcc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80188e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80188ec:	4293      	cmp	r3, r2
 80188ee:	d906      	bls.n	80188fe <tcp_receive+0x58a>
 80188f0:	4b1b      	ldr	r3, [pc, #108]	; (8018960 <tcp_receive+0x5ec>)
 80188f2:	f240 5295 	movw	r2, #1429	; 0x595
 80188f6:	491d      	ldr	r1, [pc, #116]	; (801896c <tcp_receive+0x5f8>)
 80188f8:	481b      	ldr	r0, [pc, #108]	; (8018968 <tcp_receive+0x5f4>)
 80188fa:	f008 fa67 	bl	8020dcc <iprintf>
      off = (u16_t)off32;
 80188fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018900:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018904:	4b15      	ldr	r3, [pc, #84]	; (801895c <tcp_receive+0x5e8>)
 8018906:	685b      	ldr	r3, [r3, #4]
 8018908:	891b      	ldrh	r3, [r3, #8]
 801890a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801890e:	429a      	cmp	r2, r3
 8018910:	d906      	bls.n	8018920 <tcp_receive+0x5ac>
 8018912:	4b13      	ldr	r3, [pc, #76]	; (8018960 <tcp_receive+0x5ec>)
 8018914:	f240 5297 	movw	r2, #1431	; 0x597
 8018918:	4915      	ldr	r1, [pc, #84]	; (8018970 <tcp_receive+0x5fc>)
 801891a:	4813      	ldr	r0, [pc, #76]	; (8018968 <tcp_receive+0x5f4>)
 801891c:	f008 fa56 	bl	8020dcc <iprintf>
      inseg.len -= off;
 8018920:	4b0e      	ldr	r3, [pc, #56]	; (801895c <tcp_receive+0x5e8>)
 8018922:	891a      	ldrh	r2, [r3, #8]
 8018924:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018928:	1ad3      	subs	r3, r2, r3
 801892a:	b29a      	uxth	r2, r3
 801892c:	4b0b      	ldr	r3, [pc, #44]	; (801895c <tcp_receive+0x5e8>)
 801892e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018930:	4b0a      	ldr	r3, [pc, #40]	; (801895c <tcp_receive+0x5e8>)
 8018932:	685b      	ldr	r3, [r3, #4]
 8018934:	891a      	ldrh	r2, [r3, #8]
 8018936:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801893a:	1ad3      	subs	r3, r2, r3
 801893c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801893e:	e029      	b.n	8018994 <tcp_receive+0x620>
 8018940:	08024ab4 	.word	0x08024ab4
 8018944:	08024abc 	.word	0x08024abc
 8018948:	20005714 	.word	0x20005714
 801894c:	20005710 	.word	0x20005710
 8018950:	20016db4 	.word	0x20016db4
 8018954:	20005716 	.word	0x20005716
 8018958:	2000570c 	.word	0x2000570c
 801895c:	200056ec 	.word	0x200056ec
 8018960:	0802474c 	.word	0x0802474c
 8018964:	08024ac4 	.word	0x08024ac4
 8018968:	08024798 	.word	0x08024798
 801896c:	08024ad4 	.word	0x08024ad4
 8018970:	08024ae4 	.word	0x08024ae4
        off -= p->len;
 8018974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018976:	895b      	ldrh	r3, [r3, #10]
 8018978:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801897c:	1ad3      	subs	r3, r2, r3
 801897e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018984:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018986:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8018988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801898a:	2200      	movs	r2, #0
 801898c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801898e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8018994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018996:	895b      	ldrh	r3, [r3, #10]
 8018998:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801899c:	429a      	cmp	r2, r3
 801899e:	d8e9      	bhi.n	8018974 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80189a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80189a4:	4619      	mov	r1, r3
 80189a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80189a8:	f7fb ff60 	bl	801486c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189b0:	4a91      	ldr	r2, [pc, #580]	; (8018bf8 <tcp_receive+0x884>)
 80189b2:	6013      	str	r3, [r2, #0]
 80189b4:	4b91      	ldr	r3, [pc, #580]	; (8018bfc <tcp_receive+0x888>)
 80189b6:	68db      	ldr	r3, [r3, #12]
 80189b8:	4a8f      	ldr	r2, [pc, #572]	; (8018bf8 <tcp_receive+0x884>)
 80189ba:	6812      	ldr	r2, [r2, #0]
 80189bc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80189be:	e00d      	b.n	80189dc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80189c0:	4b8d      	ldr	r3, [pc, #564]	; (8018bf8 <tcp_receive+0x884>)
 80189c2:	681a      	ldr	r2, [r3, #0]
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c8:	1ad3      	subs	r3, r2, r3
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	da06      	bge.n	80189dc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	8b5b      	ldrh	r3, [r3, #26]
 80189d2:	f043 0302 	orr.w	r3, r3, #2
 80189d6:	b29a      	uxth	r2, r3
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80189dc:	4b86      	ldr	r3, [pc, #536]	; (8018bf8 <tcp_receive+0x884>)
 80189de:	681a      	ldr	r2, [r3, #0]
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189e4:	1ad3      	subs	r3, r2, r3
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	f2c0 842a 	blt.w	8019240 <tcp_receive+0xecc>
 80189ec:	4b82      	ldr	r3, [pc, #520]	; (8018bf8 <tcp_receive+0x884>)
 80189ee:	681a      	ldr	r2, [r3, #0]
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189f4:	6879      	ldr	r1, [r7, #4]
 80189f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80189f8:	440b      	add	r3, r1
 80189fa:	1ad3      	subs	r3, r2, r3
 80189fc:	3301      	adds	r3, #1
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	f300 841e 	bgt.w	8019240 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018a08:	4b7b      	ldr	r3, [pc, #492]	; (8018bf8 <tcp_receive+0x884>)
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	429a      	cmp	r2, r3
 8018a0e:	f040 829a 	bne.w	8018f46 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018a12:	4b7a      	ldr	r3, [pc, #488]	; (8018bfc <tcp_receive+0x888>)
 8018a14:	891c      	ldrh	r4, [r3, #8]
 8018a16:	4b79      	ldr	r3, [pc, #484]	; (8018bfc <tcp_receive+0x888>)
 8018a18:	68db      	ldr	r3, [r3, #12]
 8018a1a:	899b      	ldrh	r3, [r3, #12]
 8018a1c:	b29b      	uxth	r3, r3
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f7f9 fc1c 	bl	801225c <lwip_htons>
 8018a24:	4603      	mov	r3, r0
 8018a26:	b2db      	uxtb	r3, r3
 8018a28:	f003 0303 	and.w	r3, r3, #3
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d001      	beq.n	8018a34 <tcp_receive+0x6c0>
 8018a30:	2301      	movs	r3, #1
 8018a32:	e000      	b.n	8018a36 <tcp_receive+0x6c2>
 8018a34:	2300      	movs	r3, #0
 8018a36:	4423      	add	r3, r4
 8018a38:	b29a      	uxth	r2, r3
 8018a3a:	4b71      	ldr	r3, [pc, #452]	; (8018c00 <tcp_receive+0x88c>)
 8018a3c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018a42:	4b6f      	ldr	r3, [pc, #444]	; (8018c00 <tcp_receive+0x88c>)
 8018a44:	881b      	ldrh	r3, [r3, #0]
 8018a46:	429a      	cmp	r2, r3
 8018a48:	d275      	bcs.n	8018b36 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018a4a:	4b6c      	ldr	r3, [pc, #432]	; (8018bfc <tcp_receive+0x888>)
 8018a4c:	68db      	ldr	r3, [r3, #12]
 8018a4e:	899b      	ldrh	r3, [r3, #12]
 8018a50:	b29b      	uxth	r3, r3
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7f9 fc02 	bl	801225c <lwip_htons>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	b2db      	uxtb	r3, r3
 8018a5c:	f003 0301 	and.w	r3, r3, #1
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d01f      	beq.n	8018aa4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018a64:	4b65      	ldr	r3, [pc, #404]	; (8018bfc <tcp_receive+0x888>)
 8018a66:	68db      	ldr	r3, [r3, #12]
 8018a68:	899b      	ldrh	r3, [r3, #12]
 8018a6a:	b29b      	uxth	r3, r3
 8018a6c:	b21b      	sxth	r3, r3
 8018a6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018a72:	b21c      	sxth	r4, r3
 8018a74:	4b61      	ldr	r3, [pc, #388]	; (8018bfc <tcp_receive+0x888>)
 8018a76:	68db      	ldr	r3, [r3, #12]
 8018a78:	899b      	ldrh	r3, [r3, #12]
 8018a7a:	b29b      	uxth	r3, r3
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	f7f9 fbed 	bl	801225c <lwip_htons>
 8018a82:	4603      	mov	r3, r0
 8018a84:	b2db      	uxtb	r3, r3
 8018a86:	b29b      	uxth	r3, r3
 8018a88:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018a8c:	b29b      	uxth	r3, r3
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f7f9 fbe4 	bl	801225c <lwip_htons>
 8018a94:	4603      	mov	r3, r0
 8018a96:	b21b      	sxth	r3, r3
 8018a98:	4323      	orrs	r3, r4
 8018a9a:	b21a      	sxth	r2, r3
 8018a9c:	4b57      	ldr	r3, [pc, #348]	; (8018bfc <tcp_receive+0x888>)
 8018a9e:	68db      	ldr	r3, [r3, #12]
 8018aa0:	b292      	uxth	r2, r2
 8018aa2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018aa8:	4b54      	ldr	r3, [pc, #336]	; (8018bfc <tcp_receive+0x888>)
 8018aaa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018aac:	4b53      	ldr	r3, [pc, #332]	; (8018bfc <tcp_receive+0x888>)
 8018aae:	68db      	ldr	r3, [r3, #12]
 8018ab0:	899b      	ldrh	r3, [r3, #12]
 8018ab2:	b29b      	uxth	r3, r3
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f7f9 fbd1 	bl	801225c <lwip_htons>
 8018aba:	4603      	mov	r3, r0
 8018abc:	b2db      	uxtb	r3, r3
 8018abe:	f003 0302 	and.w	r3, r3, #2
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d005      	beq.n	8018ad2 <tcp_receive+0x75e>
            inseg.len -= 1;
 8018ac6:	4b4d      	ldr	r3, [pc, #308]	; (8018bfc <tcp_receive+0x888>)
 8018ac8:	891b      	ldrh	r3, [r3, #8]
 8018aca:	3b01      	subs	r3, #1
 8018acc:	b29a      	uxth	r2, r3
 8018ace:	4b4b      	ldr	r3, [pc, #300]	; (8018bfc <tcp_receive+0x888>)
 8018ad0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018ad2:	4b4a      	ldr	r3, [pc, #296]	; (8018bfc <tcp_receive+0x888>)
 8018ad4:	685b      	ldr	r3, [r3, #4]
 8018ad6:	4a49      	ldr	r2, [pc, #292]	; (8018bfc <tcp_receive+0x888>)
 8018ad8:	8912      	ldrh	r2, [r2, #8]
 8018ada:	4611      	mov	r1, r2
 8018adc:	4618      	mov	r0, r3
 8018ade:	f7fb fdc5 	bl	801466c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018ae2:	4b46      	ldr	r3, [pc, #280]	; (8018bfc <tcp_receive+0x888>)
 8018ae4:	891c      	ldrh	r4, [r3, #8]
 8018ae6:	4b45      	ldr	r3, [pc, #276]	; (8018bfc <tcp_receive+0x888>)
 8018ae8:	68db      	ldr	r3, [r3, #12]
 8018aea:	899b      	ldrh	r3, [r3, #12]
 8018aec:	b29b      	uxth	r3, r3
 8018aee:	4618      	mov	r0, r3
 8018af0:	f7f9 fbb4 	bl	801225c <lwip_htons>
 8018af4:	4603      	mov	r3, r0
 8018af6:	b2db      	uxtb	r3, r3
 8018af8:	f003 0303 	and.w	r3, r3, #3
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d001      	beq.n	8018b04 <tcp_receive+0x790>
 8018b00:	2301      	movs	r3, #1
 8018b02:	e000      	b.n	8018b06 <tcp_receive+0x792>
 8018b04:	2300      	movs	r3, #0
 8018b06:	4423      	add	r3, r4
 8018b08:	b29a      	uxth	r2, r3
 8018b0a:	4b3d      	ldr	r3, [pc, #244]	; (8018c00 <tcp_receive+0x88c>)
 8018b0c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018b0e:	4b3c      	ldr	r3, [pc, #240]	; (8018c00 <tcp_receive+0x88c>)
 8018b10:	881b      	ldrh	r3, [r3, #0]
 8018b12:	461a      	mov	r2, r3
 8018b14:	4b38      	ldr	r3, [pc, #224]	; (8018bf8 <tcp_receive+0x884>)
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	441a      	add	r2, r3
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b1e:	6879      	ldr	r1, [r7, #4]
 8018b20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018b22:	440b      	add	r3, r1
 8018b24:	429a      	cmp	r2, r3
 8018b26:	d006      	beq.n	8018b36 <tcp_receive+0x7c2>
 8018b28:	4b36      	ldr	r3, [pc, #216]	; (8018c04 <tcp_receive+0x890>)
 8018b2a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8018b2e:	4936      	ldr	r1, [pc, #216]	; (8018c08 <tcp_receive+0x894>)
 8018b30:	4836      	ldr	r0, [pc, #216]	; (8018c0c <tcp_receive+0x898>)
 8018b32:	f008 f94b 	bl	8020dcc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	f000 80e7 	beq.w	8018d0e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018b40:	4b2e      	ldr	r3, [pc, #184]	; (8018bfc <tcp_receive+0x888>)
 8018b42:	68db      	ldr	r3, [r3, #12]
 8018b44:	899b      	ldrh	r3, [r3, #12]
 8018b46:	b29b      	uxth	r3, r3
 8018b48:	4618      	mov	r0, r3
 8018b4a:	f7f9 fb87 	bl	801225c <lwip_htons>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	b2db      	uxtb	r3, r3
 8018b52:	f003 0301 	and.w	r3, r3, #1
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d010      	beq.n	8018b7c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018b5a:	e00a      	b.n	8018b72 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b60:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b66:	681a      	ldr	r2, [r3, #0]
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8018b6c:	68f8      	ldr	r0, [r7, #12]
 8018b6e:	f7fd fcc8 	bl	8016502 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d1f0      	bne.n	8018b5c <tcp_receive+0x7e8>
 8018b7a:	e0c8      	b.n	8018d0e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b80:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018b82:	e052      	b.n	8018c2a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b86:	68db      	ldr	r3, [r3, #12]
 8018b88:	899b      	ldrh	r3, [r3, #12]
 8018b8a:	b29b      	uxth	r3, r3
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	f7f9 fb65 	bl	801225c <lwip_htons>
 8018b92:	4603      	mov	r3, r0
 8018b94:	b2db      	uxtb	r3, r3
 8018b96:	f003 0301 	and.w	r3, r3, #1
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d03d      	beq.n	8018c1a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018b9e:	4b17      	ldr	r3, [pc, #92]	; (8018bfc <tcp_receive+0x888>)
 8018ba0:	68db      	ldr	r3, [r3, #12]
 8018ba2:	899b      	ldrh	r3, [r3, #12]
 8018ba4:	b29b      	uxth	r3, r3
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f7f9 fb58 	bl	801225c <lwip_htons>
 8018bac:	4603      	mov	r3, r0
 8018bae:	b2db      	uxtb	r3, r3
 8018bb0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d130      	bne.n	8018c1a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018bb8:	4b10      	ldr	r3, [pc, #64]	; (8018bfc <tcp_receive+0x888>)
 8018bba:	68db      	ldr	r3, [r3, #12]
 8018bbc:	899b      	ldrh	r3, [r3, #12]
 8018bbe:	b29c      	uxth	r4, r3
 8018bc0:	2001      	movs	r0, #1
 8018bc2:	f7f9 fb4b 	bl	801225c <lwip_htons>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	461a      	mov	r2, r3
 8018bca:	4b0c      	ldr	r3, [pc, #48]	; (8018bfc <tcp_receive+0x888>)
 8018bcc:	68db      	ldr	r3, [r3, #12]
 8018bce:	4322      	orrs	r2, r4
 8018bd0:	b292      	uxth	r2, r2
 8018bd2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018bd4:	4b09      	ldr	r3, [pc, #36]	; (8018bfc <tcp_receive+0x888>)
 8018bd6:	891c      	ldrh	r4, [r3, #8]
 8018bd8:	4b08      	ldr	r3, [pc, #32]	; (8018bfc <tcp_receive+0x888>)
 8018bda:	68db      	ldr	r3, [r3, #12]
 8018bdc:	899b      	ldrh	r3, [r3, #12]
 8018bde:	b29b      	uxth	r3, r3
 8018be0:	4618      	mov	r0, r3
 8018be2:	f7f9 fb3b 	bl	801225c <lwip_htons>
 8018be6:	4603      	mov	r3, r0
 8018be8:	b2db      	uxtb	r3, r3
 8018bea:	f003 0303 	and.w	r3, r3, #3
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d00e      	beq.n	8018c10 <tcp_receive+0x89c>
 8018bf2:	2301      	movs	r3, #1
 8018bf4:	e00d      	b.n	8018c12 <tcp_receive+0x89e>
 8018bf6:	bf00      	nop
 8018bf8:	2000570c 	.word	0x2000570c
 8018bfc:	200056ec 	.word	0x200056ec
 8018c00:	20005716 	.word	0x20005716
 8018c04:	0802474c 	.word	0x0802474c
 8018c08:	08024af4 	.word	0x08024af4
 8018c0c:	08024798 	.word	0x08024798
 8018c10:	2300      	movs	r3, #0
 8018c12:	4423      	add	r3, r4
 8018c14:	b29a      	uxth	r2, r3
 8018c16:	4b98      	ldr	r3, [pc, #608]	; (8018e78 <tcp_receive+0xb04>)
 8018c18:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c1c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8018c24:	6938      	ldr	r0, [r7, #16]
 8018c26:	f7fd fc6c 	bl	8016502 <tcp_seg_free>
            while (next &&
 8018c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d00e      	beq.n	8018c4e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018c30:	4b91      	ldr	r3, [pc, #580]	; (8018e78 <tcp_receive+0xb04>)
 8018c32:	881b      	ldrh	r3, [r3, #0]
 8018c34:	461a      	mov	r2, r3
 8018c36:	4b91      	ldr	r3, [pc, #580]	; (8018e7c <tcp_receive+0xb08>)
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	441a      	add	r2, r3
 8018c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c3e:	68db      	ldr	r3, [r3, #12]
 8018c40:	685b      	ldr	r3, [r3, #4]
 8018c42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018c44:	8909      	ldrh	r1, [r1, #8]
 8018c46:	440b      	add	r3, r1
 8018c48:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	da9a      	bge.n	8018b84 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d059      	beq.n	8018d08 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018c54:	4b88      	ldr	r3, [pc, #544]	; (8018e78 <tcp_receive+0xb04>)
 8018c56:	881b      	ldrh	r3, [r3, #0]
 8018c58:	461a      	mov	r2, r3
 8018c5a:	4b88      	ldr	r3, [pc, #544]	; (8018e7c <tcp_receive+0xb08>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	441a      	add	r2, r3
 8018c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c62:	68db      	ldr	r3, [r3, #12]
 8018c64:	685b      	ldr	r3, [r3, #4]
 8018c66:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	dd4d      	ble.n	8018d08 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c6e:	68db      	ldr	r3, [r3, #12]
 8018c70:	685b      	ldr	r3, [r3, #4]
 8018c72:	b29a      	uxth	r2, r3
 8018c74:	4b81      	ldr	r3, [pc, #516]	; (8018e7c <tcp_receive+0xb08>)
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	b29b      	uxth	r3, r3
 8018c7a:	1ad3      	subs	r3, r2, r3
 8018c7c:	b29a      	uxth	r2, r3
 8018c7e:	4b80      	ldr	r3, [pc, #512]	; (8018e80 <tcp_receive+0xb0c>)
 8018c80:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018c82:	4b7f      	ldr	r3, [pc, #508]	; (8018e80 <tcp_receive+0xb0c>)
 8018c84:	68db      	ldr	r3, [r3, #12]
 8018c86:	899b      	ldrh	r3, [r3, #12]
 8018c88:	b29b      	uxth	r3, r3
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	f7f9 fae6 	bl	801225c <lwip_htons>
 8018c90:	4603      	mov	r3, r0
 8018c92:	b2db      	uxtb	r3, r3
 8018c94:	f003 0302 	and.w	r3, r3, #2
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d005      	beq.n	8018ca8 <tcp_receive+0x934>
                inseg.len -= 1;
 8018c9c:	4b78      	ldr	r3, [pc, #480]	; (8018e80 <tcp_receive+0xb0c>)
 8018c9e:	891b      	ldrh	r3, [r3, #8]
 8018ca0:	3b01      	subs	r3, #1
 8018ca2:	b29a      	uxth	r2, r3
 8018ca4:	4b76      	ldr	r3, [pc, #472]	; (8018e80 <tcp_receive+0xb0c>)
 8018ca6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018ca8:	4b75      	ldr	r3, [pc, #468]	; (8018e80 <tcp_receive+0xb0c>)
 8018caa:	685b      	ldr	r3, [r3, #4]
 8018cac:	4a74      	ldr	r2, [pc, #464]	; (8018e80 <tcp_receive+0xb0c>)
 8018cae:	8912      	ldrh	r2, [r2, #8]
 8018cb0:	4611      	mov	r1, r2
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	f7fb fcda 	bl	801466c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018cb8:	4b71      	ldr	r3, [pc, #452]	; (8018e80 <tcp_receive+0xb0c>)
 8018cba:	891c      	ldrh	r4, [r3, #8]
 8018cbc:	4b70      	ldr	r3, [pc, #448]	; (8018e80 <tcp_receive+0xb0c>)
 8018cbe:	68db      	ldr	r3, [r3, #12]
 8018cc0:	899b      	ldrh	r3, [r3, #12]
 8018cc2:	b29b      	uxth	r3, r3
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f7f9 fac9 	bl	801225c <lwip_htons>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	b2db      	uxtb	r3, r3
 8018cce:	f003 0303 	and.w	r3, r3, #3
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d001      	beq.n	8018cda <tcp_receive+0x966>
 8018cd6:	2301      	movs	r3, #1
 8018cd8:	e000      	b.n	8018cdc <tcp_receive+0x968>
 8018cda:	2300      	movs	r3, #0
 8018cdc:	4423      	add	r3, r4
 8018cde:	b29a      	uxth	r2, r3
 8018ce0:	4b65      	ldr	r3, [pc, #404]	; (8018e78 <tcp_receive+0xb04>)
 8018ce2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018ce4:	4b64      	ldr	r3, [pc, #400]	; (8018e78 <tcp_receive+0xb04>)
 8018ce6:	881b      	ldrh	r3, [r3, #0]
 8018ce8:	461a      	mov	r2, r3
 8018cea:	4b64      	ldr	r3, [pc, #400]	; (8018e7c <tcp_receive+0xb08>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	441a      	add	r2, r3
 8018cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018cf2:	68db      	ldr	r3, [r3, #12]
 8018cf4:	685b      	ldr	r3, [r3, #4]
 8018cf6:	429a      	cmp	r2, r3
 8018cf8:	d006      	beq.n	8018d08 <tcp_receive+0x994>
 8018cfa:	4b62      	ldr	r3, [pc, #392]	; (8018e84 <tcp_receive+0xb10>)
 8018cfc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8018d00:	4961      	ldr	r1, [pc, #388]	; (8018e88 <tcp_receive+0xb14>)
 8018d02:	4862      	ldr	r0, [pc, #392]	; (8018e8c <tcp_receive+0xb18>)
 8018d04:	f008 f862 	bl	8020dcc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018d0c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018d0e:	4b5a      	ldr	r3, [pc, #360]	; (8018e78 <tcp_receive+0xb04>)
 8018d10:	881b      	ldrh	r3, [r3, #0]
 8018d12:	461a      	mov	r2, r3
 8018d14:	4b59      	ldr	r3, [pc, #356]	; (8018e7c <tcp_receive+0xb08>)
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	441a      	add	r2, r3
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018d22:	4b55      	ldr	r3, [pc, #340]	; (8018e78 <tcp_receive+0xb04>)
 8018d24:	881b      	ldrh	r3, [r3, #0]
 8018d26:	429a      	cmp	r2, r3
 8018d28:	d206      	bcs.n	8018d38 <tcp_receive+0x9c4>
 8018d2a:	4b56      	ldr	r3, [pc, #344]	; (8018e84 <tcp_receive+0xb10>)
 8018d2c:	f240 6207 	movw	r2, #1543	; 0x607
 8018d30:	4957      	ldr	r1, [pc, #348]	; (8018e90 <tcp_receive+0xb1c>)
 8018d32:	4856      	ldr	r0, [pc, #344]	; (8018e8c <tcp_receive+0xb18>)
 8018d34:	f008 f84a 	bl	8020dcc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018d3c:	4b4e      	ldr	r3, [pc, #312]	; (8018e78 <tcp_receive+0xb04>)
 8018d3e:	881b      	ldrh	r3, [r3, #0]
 8018d40:	1ad3      	subs	r3, r2, r3
 8018d42:	b29a      	uxth	r2, r3
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	f7fc fd9d 	bl	8015888 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018d4e:	4b4c      	ldr	r3, [pc, #304]	; (8018e80 <tcp_receive+0xb0c>)
 8018d50:	685b      	ldr	r3, [r3, #4]
 8018d52:	891b      	ldrh	r3, [r3, #8]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d006      	beq.n	8018d66 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018d58:	4b49      	ldr	r3, [pc, #292]	; (8018e80 <tcp_receive+0xb0c>)
 8018d5a:	685b      	ldr	r3, [r3, #4]
 8018d5c:	4a4d      	ldr	r2, [pc, #308]	; (8018e94 <tcp_receive+0xb20>)
 8018d5e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018d60:	4b47      	ldr	r3, [pc, #284]	; (8018e80 <tcp_receive+0xb0c>)
 8018d62:	2200      	movs	r2, #0
 8018d64:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018d66:	4b46      	ldr	r3, [pc, #280]	; (8018e80 <tcp_receive+0xb0c>)
 8018d68:	68db      	ldr	r3, [r3, #12]
 8018d6a:	899b      	ldrh	r3, [r3, #12]
 8018d6c:	b29b      	uxth	r3, r3
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f7f9 fa74 	bl	801225c <lwip_htons>
 8018d74:	4603      	mov	r3, r0
 8018d76:	b2db      	uxtb	r3, r3
 8018d78:	f003 0301 	and.w	r3, r3, #1
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	f000 80b8 	beq.w	8018ef2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018d82:	4b45      	ldr	r3, [pc, #276]	; (8018e98 <tcp_receive+0xb24>)
 8018d84:	781b      	ldrb	r3, [r3, #0]
 8018d86:	f043 0320 	orr.w	r3, r3, #32
 8018d8a:	b2da      	uxtb	r2, r3
 8018d8c:	4b42      	ldr	r3, [pc, #264]	; (8018e98 <tcp_receive+0xb24>)
 8018d8e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018d90:	e0af      	b.n	8018ef2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018d96:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018d9c:	68db      	ldr	r3, [r3, #12]
 8018d9e:	685b      	ldr	r3, [r3, #4]
 8018da0:	4a36      	ldr	r2, [pc, #216]	; (8018e7c <tcp_receive+0xb08>)
 8018da2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018da4:	68bb      	ldr	r3, [r7, #8]
 8018da6:	891b      	ldrh	r3, [r3, #8]
 8018da8:	461c      	mov	r4, r3
 8018daa:	68bb      	ldr	r3, [r7, #8]
 8018dac:	68db      	ldr	r3, [r3, #12]
 8018dae:	899b      	ldrh	r3, [r3, #12]
 8018db0:	b29b      	uxth	r3, r3
 8018db2:	4618      	mov	r0, r3
 8018db4:	f7f9 fa52 	bl	801225c <lwip_htons>
 8018db8:	4603      	mov	r3, r0
 8018dba:	b2db      	uxtb	r3, r3
 8018dbc:	f003 0303 	and.w	r3, r3, #3
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d001      	beq.n	8018dc8 <tcp_receive+0xa54>
 8018dc4:	2301      	movs	r3, #1
 8018dc6:	e000      	b.n	8018dca <tcp_receive+0xa56>
 8018dc8:	2300      	movs	r3, #0
 8018dca:	191a      	adds	r2, r3, r4
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dd0:	441a      	add	r2, r3
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018dda:	461c      	mov	r4, r3
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	891b      	ldrh	r3, [r3, #8]
 8018de0:	461d      	mov	r5, r3
 8018de2:	68bb      	ldr	r3, [r7, #8]
 8018de4:	68db      	ldr	r3, [r3, #12]
 8018de6:	899b      	ldrh	r3, [r3, #12]
 8018de8:	b29b      	uxth	r3, r3
 8018dea:	4618      	mov	r0, r3
 8018dec:	f7f9 fa36 	bl	801225c <lwip_htons>
 8018df0:	4603      	mov	r3, r0
 8018df2:	b2db      	uxtb	r3, r3
 8018df4:	f003 0303 	and.w	r3, r3, #3
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d001      	beq.n	8018e00 <tcp_receive+0xa8c>
 8018dfc:	2301      	movs	r3, #1
 8018dfe:	e000      	b.n	8018e02 <tcp_receive+0xa8e>
 8018e00:	2300      	movs	r3, #0
 8018e02:	442b      	add	r3, r5
 8018e04:	429c      	cmp	r4, r3
 8018e06:	d206      	bcs.n	8018e16 <tcp_receive+0xaa2>
 8018e08:	4b1e      	ldr	r3, [pc, #120]	; (8018e84 <tcp_receive+0xb10>)
 8018e0a:	f240 622b 	movw	r2, #1579	; 0x62b
 8018e0e:	4923      	ldr	r1, [pc, #140]	; (8018e9c <tcp_receive+0xb28>)
 8018e10:	481e      	ldr	r0, [pc, #120]	; (8018e8c <tcp_receive+0xb18>)
 8018e12:	f007 ffdb 	bl	8020dcc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018e16:	68bb      	ldr	r3, [r7, #8]
 8018e18:	891b      	ldrh	r3, [r3, #8]
 8018e1a:	461c      	mov	r4, r3
 8018e1c:	68bb      	ldr	r3, [r7, #8]
 8018e1e:	68db      	ldr	r3, [r3, #12]
 8018e20:	899b      	ldrh	r3, [r3, #12]
 8018e22:	b29b      	uxth	r3, r3
 8018e24:	4618      	mov	r0, r3
 8018e26:	f7f9 fa19 	bl	801225c <lwip_htons>
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	b2db      	uxtb	r3, r3
 8018e2e:	f003 0303 	and.w	r3, r3, #3
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d001      	beq.n	8018e3a <tcp_receive+0xac6>
 8018e36:	2301      	movs	r3, #1
 8018e38:	e000      	b.n	8018e3c <tcp_receive+0xac8>
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	1919      	adds	r1, r3, r4
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018e42:	b28b      	uxth	r3, r1
 8018e44:	1ad3      	subs	r3, r2, r3
 8018e46:	b29a      	uxth	r2, r3
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018e4c:	6878      	ldr	r0, [r7, #4]
 8018e4e:	f7fc fd1b 	bl	8015888 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018e52:	68bb      	ldr	r3, [r7, #8]
 8018e54:	685b      	ldr	r3, [r3, #4]
 8018e56:	891b      	ldrh	r3, [r3, #8]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d028      	beq.n	8018eae <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018e5c:	4b0d      	ldr	r3, [pc, #52]	; (8018e94 <tcp_receive+0xb20>)
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d01d      	beq.n	8018ea0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018e64:	4b0b      	ldr	r3, [pc, #44]	; (8018e94 <tcp_receive+0xb20>)
 8018e66:	681a      	ldr	r2, [r3, #0]
 8018e68:	68bb      	ldr	r3, [r7, #8]
 8018e6a:	685b      	ldr	r3, [r3, #4]
 8018e6c:	4619      	mov	r1, r3
 8018e6e:	4610      	mov	r0, r2
 8018e70:	f7fb fe50 	bl	8014b14 <pbuf_cat>
 8018e74:	e018      	b.n	8018ea8 <tcp_receive+0xb34>
 8018e76:	bf00      	nop
 8018e78:	20005716 	.word	0x20005716
 8018e7c:	2000570c 	.word	0x2000570c
 8018e80:	200056ec 	.word	0x200056ec
 8018e84:	0802474c 	.word	0x0802474c
 8018e88:	08024b2c 	.word	0x08024b2c
 8018e8c:	08024798 	.word	0x08024798
 8018e90:	08024b68 	.word	0x08024b68
 8018e94:	2000571c 	.word	0x2000571c
 8018e98:	20005719 	.word	0x20005719
 8018e9c:	08024b88 	.word	0x08024b88
            } else {
              recv_data = cseg->p;
 8018ea0:	68bb      	ldr	r3, [r7, #8]
 8018ea2:	685b      	ldr	r3, [r3, #4]
 8018ea4:	4a70      	ldr	r2, [pc, #448]	; (8019068 <tcp_receive+0xcf4>)
 8018ea6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018ea8:	68bb      	ldr	r3, [r7, #8]
 8018eaa:	2200      	movs	r2, #0
 8018eac:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018eae:	68bb      	ldr	r3, [r7, #8]
 8018eb0:	68db      	ldr	r3, [r3, #12]
 8018eb2:	899b      	ldrh	r3, [r3, #12]
 8018eb4:	b29b      	uxth	r3, r3
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	f7f9 f9d0 	bl	801225c <lwip_htons>
 8018ebc:	4603      	mov	r3, r0
 8018ebe:	b2db      	uxtb	r3, r3
 8018ec0:	f003 0301 	and.w	r3, r3, #1
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d00d      	beq.n	8018ee4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018ec8:	4b68      	ldr	r3, [pc, #416]	; (801906c <tcp_receive+0xcf8>)
 8018eca:	781b      	ldrb	r3, [r3, #0]
 8018ecc:	f043 0320 	orr.w	r3, r3, #32
 8018ed0:	b2da      	uxtb	r2, r3
 8018ed2:	4b66      	ldr	r3, [pc, #408]	; (801906c <tcp_receive+0xcf8>)
 8018ed4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	7d1b      	ldrb	r3, [r3, #20]
 8018eda:	2b04      	cmp	r3, #4
 8018edc:	d102      	bne.n	8018ee4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	2207      	movs	r2, #7
 8018ee2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018ee4:	68bb      	ldr	r3, [r7, #8]
 8018ee6:	681a      	ldr	r2, [r3, #0]
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8018eec:	68b8      	ldr	r0, [r7, #8]
 8018eee:	f7fd fb08 	bl	8016502 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d008      	beq.n	8018f0c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018efe:	68db      	ldr	r3, [r3, #12]
 8018f00:	685a      	ldr	r2, [r3, #4]
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8018f06:	429a      	cmp	r2, r3
 8018f08:	f43f af43 	beq.w	8018d92 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	8b5b      	ldrh	r3, [r3, #26]
 8018f10:	f003 0301 	and.w	r3, r3, #1
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d00e      	beq.n	8018f36 <tcp_receive+0xbc2>
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	8b5b      	ldrh	r3, [r3, #26]
 8018f1c:	f023 0301 	bic.w	r3, r3, #1
 8018f20:	b29a      	uxth	r2, r3
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	835a      	strh	r2, [r3, #26]
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	8b5b      	ldrh	r3, [r3, #26]
 8018f2a:	f043 0302 	orr.w	r3, r3, #2
 8018f2e:	b29a      	uxth	r2, r3
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018f34:	e188      	b.n	8019248 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	8b5b      	ldrh	r3, [r3, #26]
 8018f3a:	f043 0301 	orr.w	r3, r3, #1
 8018f3e:	b29a      	uxth	r2, r3
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018f44:	e180      	b.n	8019248 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d106      	bne.n	8018f5c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018f4e:	4848      	ldr	r0, [pc, #288]	; (8019070 <tcp_receive+0xcfc>)
 8018f50:	f7fd faf0 	bl	8016534 <tcp_seg_copy>
 8018f54:	4602      	mov	r2, r0
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	675a      	str	r2, [r3, #116]	; 0x74
 8018f5a:	e16d      	b.n	8019238 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8018f66:	e157      	b.n	8019218 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8018f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f6a:	68db      	ldr	r3, [r3, #12]
 8018f6c:	685a      	ldr	r2, [r3, #4]
 8018f6e:	4b41      	ldr	r3, [pc, #260]	; (8019074 <tcp_receive+0xd00>)
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d11d      	bne.n	8018fb2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8018f76:	4b3e      	ldr	r3, [pc, #248]	; (8019070 <tcp_receive+0xcfc>)
 8018f78:	891a      	ldrh	r2, [r3, #8]
 8018f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f7c:	891b      	ldrh	r3, [r3, #8]
 8018f7e:	429a      	cmp	r2, r3
 8018f80:	f240 814f 	bls.w	8019222 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018f84:	483a      	ldr	r0, [pc, #232]	; (8019070 <tcp_receive+0xcfc>)
 8018f86:	f7fd fad5 	bl	8016534 <tcp_seg_copy>
 8018f8a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018f8c:	697b      	ldr	r3, [r7, #20]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	f000 8149 	beq.w	8019226 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8018f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d003      	beq.n	8018fa2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8018f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f9c:	697a      	ldr	r2, [r7, #20]
 8018f9e:	601a      	str	r2, [r3, #0]
 8018fa0:	e002      	b.n	8018fa8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	697a      	ldr	r2, [r7, #20]
 8018fa6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018fa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018faa:	6978      	ldr	r0, [r7, #20]
 8018fac:	f7ff f8de 	bl	801816c <tcp_oos_insert_segment>
                }
                break;
 8018fb0:	e139      	b.n	8019226 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d117      	bne.n	8018fe8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018fb8:	4b2e      	ldr	r3, [pc, #184]	; (8019074 <tcp_receive+0xd00>)
 8018fba:	681a      	ldr	r2, [r3, #0]
 8018fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fbe:	68db      	ldr	r3, [r3, #12]
 8018fc0:	685b      	ldr	r3, [r3, #4]
 8018fc2:	1ad3      	subs	r3, r2, r3
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	da57      	bge.n	8019078 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018fc8:	4829      	ldr	r0, [pc, #164]	; (8019070 <tcp_receive+0xcfc>)
 8018fca:	f7fd fab3 	bl	8016534 <tcp_seg_copy>
 8018fce:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018fd0:	69bb      	ldr	r3, [r7, #24]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	f000 8129 	beq.w	801922a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	69ba      	ldr	r2, [r7, #24]
 8018fdc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018fde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018fe0:	69b8      	ldr	r0, [r7, #24]
 8018fe2:	f7ff f8c3 	bl	801816c <tcp_oos_insert_segment>
                  }
                  break;
 8018fe6:	e120      	b.n	801922a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018fe8:	4b22      	ldr	r3, [pc, #136]	; (8019074 <tcp_receive+0xd00>)
 8018fea:	681a      	ldr	r2, [r3, #0]
 8018fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fee:	68db      	ldr	r3, [r3, #12]
 8018ff0:	685b      	ldr	r3, [r3, #4]
 8018ff2:	1ad3      	subs	r3, r2, r3
 8018ff4:	3b01      	subs	r3, #1
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	db3e      	blt.n	8019078 <tcp_receive+0xd04>
 8018ffa:	4b1e      	ldr	r3, [pc, #120]	; (8019074 <tcp_receive+0xd00>)
 8018ffc:	681a      	ldr	r2, [r3, #0]
 8018ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019000:	68db      	ldr	r3, [r3, #12]
 8019002:	685b      	ldr	r3, [r3, #4]
 8019004:	1ad3      	subs	r3, r2, r3
 8019006:	3301      	adds	r3, #1
 8019008:	2b00      	cmp	r3, #0
 801900a:	dc35      	bgt.n	8019078 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801900c:	4818      	ldr	r0, [pc, #96]	; (8019070 <tcp_receive+0xcfc>)
 801900e:	f7fd fa91 	bl	8016534 <tcp_seg_copy>
 8019012:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019014:	69fb      	ldr	r3, [r7, #28]
 8019016:	2b00      	cmp	r3, #0
 8019018:	f000 8109 	beq.w	801922e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801901e:	68db      	ldr	r3, [r3, #12]
 8019020:	685b      	ldr	r3, [r3, #4]
 8019022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019024:	8912      	ldrh	r2, [r2, #8]
 8019026:	441a      	add	r2, r3
 8019028:	4b12      	ldr	r3, [pc, #72]	; (8019074 <tcp_receive+0xd00>)
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	1ad3      	subs	r3, r2, r3
 801902e:	2b00      	cmp	r3, #0
 8019030:	dd12      	ble.n	8019058 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019032:	4b10      	ldr	r3, [pc, #64]	; (8019074 <tcp_receive+0xd00>)
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	b29a      	uxth	r2, r3
 8019038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801903a:	68db      	ldr	r3, [r3, #12]
 801903c:	685b      	ldr	r3, [r3, #4]
 801903e:	b29b      	uxth	r3, r3
 8019040:	1ad3      	subs	r3, r2, r3
 8019042:	b29a      	uxth	r2, r3
 8019044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019046:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801904a:	685a      	ldr	r2, [r3, #4]
 801904c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801904e:	891b      	ldrh	r3, [r3, #8]
 8019050:	4619      	mov	r1, r3
 8019052:	4610      	mov	r0, r2
 8019054:	f7fb fb0a 	bl	801466c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801905a:	69fa      	ldr	r2, [r7, #28]
 801905c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801905e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019060:	69f8      	ldr	r0, [r7, #28]
 8019062:	f7ff f883 	bl	801816c <tcp_oos_insert_segment>
                  }
                  break;
 8019066:	e0e2      	b.n	801922e <tcp_receive+0xeba>
 8019068:	2000571c 	.word	0x2000571c
 801906c:	20005719 	.word	0x20005719
 8019070:	200056ec 	.word	0x200056ec
 8019074:	2000570c 	.word	0x2000570c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801907a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	f040 80c6 	bne.w	8019212 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019086:	4b80      	ldr	r3, [pc, #512]	; (8019288 <tcp_receive+0xf14>)
 8019088:	681a      	ldr	r2, [r3, #0]
 801908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801908c:	68db      	ldr	r3, [r3, #12]
 801908e:	685b      	ldr	r3, [r3, #4]
 8019090:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019092:	2b00      	cmp	r3, #0
 8019094:	f340 80bd 	ble.w	8019212 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801909a:	68db      	ldr	r3, [r3, #12]
 801909c:	899b      	ldrh	r3, [r3, #12]
 801909e:	b29b      	uxth	r3, r3
 80190a0:	4618      	mov	r0, r3
 80190a2:	f7f9 f8db 	bl	801225c <lwip_htons>
 80190a6:	4603      	mov	r3, r0
 80190a8:	b2db      	uxtb	r3, r3
 80190aa:	f003 0301 	and.w	r3, r3, #1
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	f040 80bf 	bne.w	8019232 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80190b4:	4875      	ldr	r0, [pc, #468]	; (801928c <tcp_receive+0xf18>)
 80190b6:	f7fd fa3d 	bl	8016534 <tcp_seg_copy>
 80190ba:	4602      	mov	r2, r0
 80190bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190be:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80190c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f000 80b6 	beq.w	8019236 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80190ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190cc:	68db      	ldr	r3, [r3, #12]
 80190ce:	685b      	ldr	r3, [r3, #4]
 80190d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80190d2:	8912      	ldrh	r2, [r2, #8]
 80190d4:	441a      	add	r2, r3
 80190d6:	4b6c      	ldr	r3, [pc, #432]	; (8019288 <tcp_receive+0xf14>)
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	1ad3      	subs	r3, r2, r3
 80190dc:	2b00      	cmp	r3, #0
 80190de:	dd12      	ble.n	8019106 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80190e0:	4b69      	ldr	r3, [pc, #420]	; (8019288 <tcp_receive+0xf14>)
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	b29a      	uxth	r2, r3
 80190e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190e8:	68db      	ldr	r3, [r3, #12]
 80190ea:	685b      	ldr	r3, [r3, #4]
 80190ec:	b29b      	uxth	r3, r3
 80190ee:	1ad3      	subs	r3, r2, r3
 80190f0:	b29a      	uxth	r2, r3
 80190f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80190f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190f8:	685a      	ldr	r2, [r3, #4]
 80190fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190fc:	891b      	ldrh	r3, [r3, #8]
 80190fe:	4619      	mov	r1, r3
 8019100:	4610      	mov	r0, r2
 8019102:	f7fb fab3 	bl	801466c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019106:	4b62      	ldr	r3, [pc, #392]	; (8019290 <tcp_receive+0xf1c>)
 8019108:	881b      	ldrh	r3, [r3, #0]
 801910a:	461a      	mov	r2, r3
 801910c:	4b5e      	ldr	r3, [pc, #376]	; (8019288 <tcp_receive+0xf14>)
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	441a      	add	r2, r3
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019116:	6879      	ldr	r1, [r7, #4]
 8019118:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801911a:	440b      	add	r3, r1
 801911c:	1ad3      	subs	r3, r2, r3
 801911e:	2b00      	cmp	r3, #0
 8019120:	f340 8089 	ble.w	8019236 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	68db      	ldr	r3, [r3, #12]
 801912a:	899b      	ldrh	r3, [r3, #12]
 801912c:	b29b      	uxth	r3, r3
 801912e:	4618      	mov	r0, r3
 8019130:	f7f9 f894 	bl	801225c <lwip_htons>
 8019134:	4603      	mov	r3, r0
 8019136:	b2db      	uxtb	r3, r3
 8019138:	f003 0301 	and.w	r3, r3, #1
 801913c:	2b00      	cmp	r3, #0
 801913e:	d022      	beq.n	8019186 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	68db      	ldr	r3, [r3, #12]
 8019146:	899b      	ldrh	r3, [r3, #12]
 8019148:	b29b      	uxth	r3, r3
 801914a:	b21b      	sxth	r3, r3
 801914c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019150:	b21c      	sxth	r4, r3
 8019152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	68db      	ldr	r3, [r3, #12]
 8019158:	899b      	ldrh	r3, [r3, #12]
 801915a:	b29b      	uxth	r3, r3
 801915c:	4618      	mov	r0, r3
 801915e:	f7f9 f87d 	bl	801225c <lwip_htons>
 8019162:	4603      	mov	r3, r0
 8019164:	b2db      	uxtb	r3, r3
 8019166:	b29b      	uxth	r3, r3
 8019168:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801916c:	b29b      	uxth	r3, r3
 801916e:	4618      	mov	r0, r3
 8019170:	f7f9 f874 	bl	801225c <lwip_htons>
 8019174:	4603      	mov	r3, r0
 8019176:	b21b      	sxth	r3, r3
 8019178:	4323      	orrs	r3, r4
 801917a:	b21a      	sxth	r2, r3
 801917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	68db      	ldr	r3, [r3, #12]
 8019182:	b292      	uxth	r2, r2
 8019184:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801918a:	b29a      	uxth	r2, r3
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019190:	4413      	add	r3, r2
 8019192:	b299      	uxth	r1, r3
 8019194:	4b3c      	ldr	r3, [pc, #240]	; (8019288 <tcp_receive+0xf14>)
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	b29a      	uxth	r2, r3
 801919a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	1a8a      	subs	r2, r1, r2
 80191a0:	b292      	uxth	r2, r2
 80191a2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80191a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	685a      	ldr	r2, [r3, #4]
 80191aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	891b      	ldrh	r3, [r3, #8]
 80191b0:	4619      	mov	r1, r3
 80191b2:	4610      	mov	r0, r2
 80191b4:	f7fb fa5a 	bl	801466c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80191b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	891c      	ldrh	r4, [r3, #8]
 80191be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	68db      	ldr	r3, [r3, #12]
 80191c4:	899b      	ldrh	r3, [r3, #12]
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	4618      	mov	r0, r3
 80191ca:	f7f9 f847 	bl	801225c <lwip_htons>
 80191ce:	4603      	mov	r3, r0
 80191d0:	b2db      	uxtb	r3, r3
 80191d2:	f003 0303 	and.w	r3, r3, #3
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d001      	beq.n	80191de <tcp_receive+0xe6a>
 80191da:	2301      	movs	r3, #1
 80191dc:	e000      	b.n	80191e0 <tcp_receive+0xe6c>
 80191de:	2300      	movs	r3, #0
 80191e0:	4423      	add	r3, r4
 80191e2:	b29a      	uxth	r2, r3
 80191e4:	4b2a      	ldr	r3, [pc, #168]	; (8019290 <tcp_receive+0xf1c>)
 80191e6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80191e8:	4b29      	ldr	r3, [pc, #164]	; (8019290 <tcp_receive+0xf1c>)
 80191ea:	881b      	ldrh	r3, [r3, #0]
 80191ec:	461a      	mov	r2, r3
 80191ee:	4b26      	ldr	r3, [pc, #152]	; (8019288 <tcp_receive+0xf14>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	441a      	add	r2, r3
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191f8:	6879      	ldr	r1, [r7, #4]
 80191fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80191fc:	440b      	add	r3, r1
 80191fe:	429a      	cmp	r2, r3
 8019200:	d019      	beq.n	8019236 <tcp_receive+0xec2>
 8019202:	4b24      	ldr	r3, [pc, #144]	; (8019294 <tcp_receive+0xf20>)
 8019204:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8019208:	4923      	ldr	r1, [pc, #140]	; (8019298 <tcp_receive+0xf24>)
 801920a:	4824      	ldr	r0, [pc, #144]	; (801929c <tcp_receive+0xf28>)
 801920c:	f007 fdde 	bl	8020dcc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019210:	e011      	b.n	8019236 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	63bb      	str	r3, [r7, #56]	; 0x38
 8019218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801921a:	2b00      	cmp	r3, #0
 801921c:	f47f aea4 	bne.w	8018f68 <tcp_receive+0xbf4>
 8019220:	e00a      	b.n	8019238 <tcp_receive+0xec4>
                break;
 8019222:	bf00      	nop
 8019224:	e008      	b.n	8019238 <tcp_receive+0xec4>
                break;
 8019226:	bf00      	nop
 8019228:	e006      	b.n	8019238 <tcp_receive+0xec4>
                  break;
 801922a:	bf00      	nop
 801922c:	e004      	b.n	8019238 <tcp_receive+0xec4>
                  break;
 801922e:	bf00      	nop
 8019230:	e002      	b.n	8019238 <tcp_receive+0xec4>
                  break;
 8019232:	bf00      	nop
 8019234:	e000      	b.n	8019238 <tcp_receive+0xec4>
                break;
 8019236:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019238:	6878      	ldr	r0, [r7, #4]
 801923a:	f001 fe8b 	bl	801af54 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801923e:	e003      	b.n	8019248 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019240:	6878      	ldr	r0, [r7, #4]
 8019242:	f001 fe87 	bl	801af54 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019246:	e01a      	b.n	801927e <tcp_receive+0xf0a>
 8019248:	e019      	b.n	801927e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801924a:	4b0f      	ldr	r3, [pc, #60]	; (8019288 <tcp_receive+0xf14>)
 801924c:	681a      	ldr	r2, [r3, #0]
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019252:	1ad3      	subs	r3, r2, r3
 8019254:	2b00      	cmp	r3, #0
 8019256:	db0a      	blt.n	801926e <tcp_receive+0xefa>
 8019258:	4b0b      	ldr	r3, [pc, #44]	; (8019288 <tcp_receive+0xf14>)
 801925a:	681a      	ldr	r2, [r3, #0]
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019260:	6879      	ldr	r1, [r7, #4]
 8019262:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019264:	440b      	add	r3, r1
 8019266:	1ad3      	subs	r3, r2, r3
 8019268:	3301      	adds	r3, #1
 801926a:	2b00      	cmp	r3, #0
 801926c:	dd07      	ble.n	801927e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	8b5b      	ldrh	r3, [r3, #26]
 8019272:	f043 0302 	orr.w	r3, r3, #2
 8019276:	b29a      	uxth	r2, r3
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801927c:	e7ff      	b.n	801927e <tcp_receive+0xf0a>
 801927e:	bf00      	nop
 8019280:	3750      	adds	r7, #80	; 0x50
 8019282:	46bd      	mov	sp, r7
 8019284:	bdb0      	pop	{r4, r5, r7, pc}
 8019286:	bf00      	nop
 8019288:	2000570c 	.word	0x2000570c
 801928c:	200056ec 	.word	0x200056ec
 8019290:	20005716 	.word	0x20005716
 8019294:	0802474c 	.word	0x0802474c
 8019298:	08024af4 	.word	0x08024af4
 801929c:	08024798 	.word	0x08024798

080192a0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80192a0:	b480      	push	{r7}
 80192a2:	b083      	sub	sp, #12
 80192a4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80192a6:	4b15      	ldr	r3, [pc, #84]	; (80192fc <tcp_get_next_optbyte+0x5c>)
 80192a8:	881b      	ldrh	r3, [r3, #0]
 80192aa:	1c5a      	adds	r2, r3, #1
 80192ac:	b291      	uxth	r1, r2
 80192ae:	4a13      	ldr	r2, [pc, #76]	; (80192fc <tcp_get_next_optbyte+0x5c>)
 80192b0:	8011      	strh	r1, [r2, #0]
 80192b2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80192b4:	4b12      	ldr	r3, [pc, #72]	; (8019300 <tcp_get_next_optbyte+0x60>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d004      	beq.n	80192c6 <tcp_get_next_optbyte+0x26>
 80192bc:	4b11      	ldr	r3, [pc, #68]	; (8019304 <tcp_get_next_optbyte+0x64>)
 80192be:	881b      	ldrh	r3, [r3, #0]
 80192c0:	88fa      	ldrh	r2, [r7, #6]
 80192c2:	429a      	cmp	r2, r3
 80192c4:	d208      	bcs.n	80192d8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80192c6:	4b10      	ldr	r3, [pc, #64]	; (8019308 <tcp_get_next_optbyte+0x68>)
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	3314      	adds	r3, #20
 80192cc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80192ce:	88fb      	ldrh	r3, [r7, #6]
 80192d0:	683a      	ldr	r2, [r7, #0]
 80192d2:	4413      	add	r3, r2
 80192d4:	781b      	ldrb	r3, [r3, #0]
 80192d6:	e00b      	b.n	80192f0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80192d8:	88fb      	ldrh	r3, [r7, #6]
 80192da:	b2da      	uxtb	r2, r3
 80192dc:	4b09      	ldr	r3, [pc, #36]	; (8019304 <tcp_get_next_optbyte+0x64>)
 80192de:	881b      	ldrh	r3, [r3, #0]
 80192e0:	b2db      	uxtb	r3, r3
 80192e2:	1ad3      	subs	r3, r2, r3
 80192e4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80192e6:	4b06      	ldr	r3, [pc, #24]	; (8019300 <tcp_get_next_optbyte+0x60>)
 80192e8:	681a      	ldr	r2, [r3, #0]
 80192ea:	797b      	ldrb	r3, [r7, #5]
 80192ec:	4413      	add	r3, r2
 80192ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80192f0:	4618      	mov	r0, r3
 80192f2:	370c      	adds	r7, #12
 80192f4:	46bd      	mov	sp, r7
 80192f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fa:	4770      	bx	lr
 80192fc:	20005708 	.word	0x20005708
 8019300:	20005704 	.word	0x20005704
 8019304:	20005702 	.word	0x20005702
 8019308:	200056fc 	.word	0x200056fc

0801930c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b084      	sub	sp, #16
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d106      	bne.n	8019328 <tcp_parseopt+0x1c>
 801931a:	4b32      	ldr	r3, [pc, #200]	; (80193e4 <tcp_parseopt+0xd8>)
 801931c:	f240 727d 	movw	r2, #1917	; 0x77d
 8019320:	4931      	ldr	r1, [pc, #196]	; (80193e8 <tcp_parseopt+0xdc>)
 8019322:	4832      	ldr	r0, [pc, #200]	; (80193ec <tcp_parseopt+0xe0>)
 8019324:	f007 fd52 	bl	8020dcc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019328:	4b31      	ldr	r3, [pc, #196]	; (80193f0 <tcp_parseopt+0xe4>)
 801932a:	881b      	ldrh	r3, [r3, #0]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d055      	beq.n	80193dc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019330:	4b30      	ldr	r3, [pc, #192]	; (80193f4 <tcp_parseopt+0xe8>)
 8019332:	2200      	movs	r2, #0
 8019334:	801a      	strh	r2, [r3, #0]
 8019336:	e045      	b.n	80193c4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8019338:	f7ff ffb2 	bl	80192a0 <tcp_get_next_optbyte>
 801933c:	4603      	mov	r3, r0
 801933e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019340:	7bfb      	ldrb	r3, [r7, #15]
 8019342:	2b02      	cmp	r3, #2
 8019344:	d006      	beq.n	8019354 <tcp_parseopt+0x48>
 8019346:	2b02      	cmp	r3, #2
 8019348:	dc2b      	bgt.n	80193a2 <tcp_parseopt+0x96>
 801934a:	2b00      	cmp	r3, #0
 801934c:	d041      	beq.n	80193d2 <tcp_parseopt+0xc6>
 801934e:	2b01      	cmp	r3, #1
 8019350:	d127      	bne.n	80193a2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8019352:	e037      	b.n	80193c4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019354:	f7ff ffa4 	bl	80192a0 <tcp_get_next_optbyte>
 8019358:	4603      	mov	r3, r0
 801935a:	2b04      	cmp	r3, #4
 801935c:	d13b      	bne.n	80193d6 <tcp_parseopt+0xca>
 801935e:	4b25      	ldr	r3, [pc, #148]	; (80193f4 <tcp_parseopt+0xe8>)
 8019360:	881b      	ldrh	r3, [r3, #0]
 8019362:	3301      	adds	r3, #1
 8019364:	4a22      	ldr	r2, [pc, #136]	; (80193f0 <tcp_parseopt+0xe4>)
 8019366:	8812      	ldrh	r2, [r2, #0]
 8019368:	4293      	cmp	r3, r2
 801936a:	da34      	bge.n	80193d6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801936c:	f7ff ff98 	bl	80192a0 <tcp_get_next_optbyte>
 8019370:	4603      	mov	r3, r0
 8019372:	b29b      	uxth	r3, r3
 8019374:	021b      	lsls	r3, r3, #8
 8019376:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019378:	f7ff ff92 	bl	80192a0 <tcp_get_next_optbyte>
 801937c:	4603      	mov	r3, r0
 801937e:	b29a      	uxth	r2, r3
 8019380:	89bb      	ldrh	r3, [r7, #12]
 8019382:	4313      	orrs	r3, r2
 8019384:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019386:	89bb      	ldrh	r3, [r7, #12]
 8019388:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801938c:	d804      	bhi.n	8019398 <tcp_parseopt+0x8c>
 801938e:	89bb      	ldrh	r3, [r7, #12]
 8019390:	2b00      	cmp	r3, #0
 8019392:	d001      	beq.n	8019398 <tcp_parseopt+0x8c>
 8019394:	89ba      	ldrh	r2, [r7, #12]
 8019396:	e001      	b.n	801939c <tcp_parseopt+0x90>
 8019398:	f44f 7206 	mov.w	r2, #536	; 0x218
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80193a0:	e010      	b.n	80193c4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80193a2:	f7ff ff7d 	bl	80192a0 <tcp_get_next_optbyte>
 80193a6:	4603      	mov	r3, r0
 80193a8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80193aa:	7afb      	ldrb	r3, [r7, #11]
 80193ac:	2b01      	cmp	r3, #1
 80193ae:	d914      	bls.n	80193da <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80193b0:	7afb      	ldrb	r3, [r7, #11]
 80193b2:	b29a      	uxth	r2, r3
 80193b4:	4b0f      	ldr	r3, [pc, #60]	; (80193f4 <tcp_parseopt+0xe8>)
 80193b6:	881b      	ldrh	r3, [r3, #0]
 80193b8:	4413      	add	r3, r2
 80193ba:	b29b      	uxth	r3, r3
 80193bc:	3b02      	subs	r3, #2
 80193be:	b29a      	uxth	r2, r3
 80193c0:	4b0c      	ldr	r3, [pc, #48]	; (80193f4 <tcp_parseopt+0xe8>)
 80193c2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80193c4:	4b0b      	ldr	r3, [pc, #44]	; (80193f4 <tcp_parseopt+0xe8>)
 80193c6:	881a      	ldrh	r2, [r3, #0]
 80193c8:	4b09      	ldr	r3, [pc, #36]	; (80193f0 <tcp_parseopt+0xe4>)
 80193ca:	881b      	ldrh	r3, [r3, #0]
 80193cc:	429a      	cmp	r2, r3
 80193ce:	d3b3      	bcc.n	8019338 <tcp_parseopt+0x2c>
 80193d0:	e004      	b.n	80193dc <tcp_parseopt+0xd0>
          return;
 80193d2:	bf00      	nop
 80193d4:	e002      	b.n	80193dc <tcp_parseopt+0xd0>
            return;
 80193d6:	bf00      	nop
 80193d8:	e000      	b.n	80193dc <tcp_parseopt+0xd0>
            return;
 80193da:	bf00      	nop
      }
    }
  }
}
 80193dc:	3710      	adds	r7, #16
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd80      	pop	{r7, pc}
 80193e2:	bf00      	nop
 80193e4:	0802474c 	.word	0x0802474c
 80193e8:	08024bb0 	.word	0x08024bb0
 80193ec:	08024798 	.word	0x08024798
 80193f0:	20005700 	.word	0x20005700
 80193f4:	20005708 	.word	0x20005708

080193f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80193f8:	b480      	push	{r7}
 80193fa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80193fc:	4b05      	ldr	r3, [pc, #20]	; (8019414 <tcp_trigger_input_pcb_close+0x1c>)
 80193fe:	781b      	ldrb	r3, [r3, #0]
 8019400:	f043 0310 	orr.w	r3, r3, #16
 8019404:	b2da      	uxtb	r2, r3
 8019406:	4b03      	ldr	r3, [pc, #12]	; (8019414 <tcp_trigger_input_pcb_close+0x1c>)
 8019408:	701a      	strb	r2, [r3, #0]
}
 801940a:	bf00      	nop
 801940c:	46bd      	mov	sp, r7
 801940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019412:	4770      	bx	lr
 8019414:	20005719 	.word	0x20005719

08019418 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b084      	sub	sp, #16
 801941c:	af00      	add	r7, sp, #0
 801941e:	60f8      	str	r0, [r7, #12]
 8019420:	60b9      	str	r1, [r7, #8]
 8019422:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	2b00      	cmp	r3, #0
 8019428:	d00a      	beq.n	8019440 <tcp_route+0x28>
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	7a1b      	ldrb	r3, [r3, #8]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d006      	beq.n	8019440 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	7a1b      	ldrb	r3, [r3, #8]
 8019436:	4618      	mov	r0, r3
 8019438:	f7fa ff10 	bl	801425c <netif_get_by_index>
 801943c:	4603      	mov	r3, r0
 801943e:	e003      	b.n	8019448 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019440:	6878      	ldr	r0, [r7, #4]
 8019442:	f005 fdb1 	bl	801efa8 <ip4_route>
 8019446:	4603      	mov	r3, r0
  }
}
 8019448:	4618      	mov	r0, r3
 801944a:	3710      	adds	r7, #16
 801944c:	46bd      	mov	sp, r7
 801944e:	bd80      	pop	{r7, pc}

08019450 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019450:	b590      	push	{r4, r7, lr}
 8019452:	b087      	sub	sp, #28
 8019454:	af00      	add	r7, sp, #0
 8019456:	60f8      	str	r0, [r7, #12]
 8019458:	60b9      	str	r1, [r7, #8]
 801945a:	603b      	str	r3, [r7, #0]
 801945c:	4613      	mov	r3, r2
 801945e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d105      	bne.n	8019472 <tcp_create_segment+0x22>
 8019466:	4b44      	ldr	r3, [pc, #272]	; (8019578 <tcp_create_segment+0x128>)
 8019468:	22a3      	movs	r2, #163	; 0xa3
 801946a:	4944      	ldr	r1, [pc, #272]	; (801957c <tcp_create_segment+0x12c>)
 801946c:	4844      	ldr	r0, [pc, #272]	; (8019580 <tcp_create_segment+0x130>)
 801946e:	f007 fcad 	bl	8020dcc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019472:	68bb      	ldr	r3, [r7, #8]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d105      	bne.n	8019484 <tcp_create_segment+0x34>
 8019478:	4b3f      	ldr	r3, [pc, #252]	; (8019578 <tcp_create_segment+0x128>)
 801947a:	22a4      	movs	r2, #164	; 0xa4
 801947c:	4941      	ldr	r1, [pc, #260]	; (8019584 <tcp_create_segment+0x134>)
 801947e:	4840      	ldr	r0, [pc, #256]	; (8019580 <tcp_create_segment+0x130>)
 8019480:	f007 fca4 	bl	8020dcc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019484:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019488:	009b      	lsls	r3, r3, #2
 801948a:	b2db      	uxtb	r3, r3
 801948c:	f003 0304 	and.w	r3, r3, #4
 8019490:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019492:	2003      	movs	r0, #3
 8019494:	f7fa fb6e 	bl	8013b74 <memp_malloc>
 8019498:	6138      	str	r0, [r7, #16]
 801949a:	693b      	ldr	r3, [r7, #16]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d104      	bne.n	80194aa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80194a0:	68b8      	ldr	r0, [r7, #8]
 80194a2:	f7fb fa69 	bl	8014978 <pbuf_free>
    return NULL;
 80194a6:	2300      	movs	r3, #0
 80194a8:	e061      	b.n	801956e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80194aa:	693b      	ldr	r3, [r7, #16]
 80194ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80194b0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80194b2:	693b      	ldr	r3, [r7, #16]
 80194b4:	2200      	movs	r2, #0
 80194b6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80194b8:	693b      	ldr	r3, [r7, #16]
 80194ba:	68ba      	ldr	r2, [r7, #8]
 80194bc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80194be:	68bb      	ldr	r3, [r7, #8]
 80194c0:	891a      	ldrh	r2, [r3, #8]
 80194c2:	7dfb      	ldrb	r3, [r7, #23]
 80194c4:	b29b      	uxth	r3, r3
 80194c6:	429a      	cmp	r2, r3
 80194c8:	d205      	bcs.n	80194d6 <tcp_create_segment+0x86>
 80194ca:	4b2b      	ldr	r3, [pc, #172]	; (8019578 <tcp_create_segment+0x128>)
 80194cc:	22b0      	movs	r2, #176	; 0xb0
 80194ce:	492e      	ldr	r1, [pc, #184]	; (8019588 <tcp_create_segment+0x138>)
 80194d0:	482b      	ldr	r0, [pc, #172]	; (8019580 <tcp_create_segment+0x130>)
 80194d2:	f007 fc7b 	bl	8020dcc <iprintf>
  seg->len = p->tot_len - optlen;
 80194d6:	68bb      	ldr	r3, [r7, #8]
 80194d8:	891a      	ldrh	r2, [r3, #8]
 80194da:	7dfb      	ldrb	r3, [r7, #23]
 80194dc:	b29b      	uxth	r3, r3
 80194de:	1ad3      	subs	r3, r2, r3
 80194e0:	b29a      	uxth	r2, r3
 80194e2:	693b      	ldr	r3, [r7, #16]
 80194e4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80194e6:	2114      	movs	r1, #20
 80194e8:	68b8      	ldr	r0, [r7, #8]
 80194ea:	f7fb f9af 	bl	801484c <pbuf_add_header>
 80194ee:	4603      	mov	r3, r0
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d004      	beq.n	80194fe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80194f4:	6938      	ldr	r0, [r7, #16]
 80194f6:	f7fd f804 	bl	8016502 <tcp_seg_free>
    return NULL;
 80194fa:	2300      	movs	r3, #0
 80194fc:	e037      	b.n	801956e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80194fe:	693b      	ldr	r3, [r7, #16]
 8019500:	685b      	ldr	r3, [r3, #4]
 8019502:	685a      	ldr	r2, [r3, #4]
 8019504:	693b      	ldr	r3, [r7, #16]
 8019506:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	8ada      	ldrh	r2, [r3, #22]
 801950c:	693b      	ldr	r3, [r7, #16]
 801950e:	68dc      	ldr	r4, [r3, #12]
 8019510:	4610      	mov	r0, r2
 8019512:	f7f8 fea3 	bl	801225c <lwip_htons>
 8019516:	4603      	mov	r3, r0
 8019518:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	8b1a      	ldrh	r2, [r3, #24]
 801951e:	693b      	ldr	r3, [r7, #16]
 8019520:	68dc      	ldr	r4, [r3, #12]
 8019522:	4610      	mov	r0, r2
 8019524:	f7f8 fe9a 	bl	801225c <lwip_htons>
 8019528:	4603      	mov	r3, r0
 801952a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801952c:	693b      	ldr	r3, [r7, #16]
 801952e:	68dc      	ldr	r4, [r3, #12]
 8019530:	6838      	ldr	r0, [r7, #0]
 8019532:	f7f8 fea8 	bl	8012286 <lwip_htonl>
 8019536:	4603      	mov	r3, r0
 8019538:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801953a:	7dfb      	ldrb	r3, [r7, #23]
 801953c:	089b      	lsrs	r3, r3, #2
 801953e:	b2db      	uxtb	r3, r3
 8019540:	b29b      	uxth	r3, r3
 8019542:	3305      	adds	r3, #5
 8019544:	b29b      	uxth	r3, r3
 8019546:	031b      	lsls	r3, r3, #12
 8019548:	b29a      	uxth	r2, r3
 801954a:	79fb      	ldrb	r3, [r7, #7]
 801954c:	b29b      	uxth	r3, r3
 801954e:	4313      	orrs	r3, r2
 8019550:	b29a      	uxth	r2, r3
 8019552:	693b      	ldr	r3, [r7, #16]
 8019554:	68dc      	ldr	r4, [r3, #12]
 8019556:	4610      	mov	r0, r2
 8019558:	f7f8 fe80 	bl	801225c <lwip_htons>
 801955c:	4603      	mov	r3, r0
 801955e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019560:	693b      	ldr	r3, [r7, #16]
 8019562:	68db      	ldr	r3, [r3, #12]
 8019564:	2200      	movs	r2, #0
 8019566:	749a      	strb	r2, [r3, #18]
 8019568:	2200      	movs	r2, #0
 801956a:	74da      	strb	r2, [r3, #19]
  return seg;
 801956c:	693b      	ldr	r3, [r7, #16]
}
 801956e:	4618      	mov	r0, r3
 8019570:	371c      	adds	r7, #28
 8019572:	46bd      	mov	sp, r7
 8019574:	bd90      	pop	{r4, r7, pc}
 8019576:	bf00      	nop
 8019578:	08024bcc 	.word	0x08024bcc
 801957c:	08024c00 	.word	0x08024c00
 8019580:	08024c20 	.word	0x08024c20
 8019584:	08024c48 	.word	0x08024c48
 8019588:	08024c6c 	.word	0x08024c6c

0801958c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801958c:	b580      	push	{r7, lr}
 801958e:	b086      	sub	sp, #24
 8019590:	af00      	add	r7, sp, #0
 8019592:	607b      	str	r3, [r7, #4]
 8019594:	4603      	mov	r3, r0
 8019596:	73fb      	strb	r3, [r7, #15]
 8019598:	460b      	mov	r3, r1
 801959a:	81bb      	strh	r3, [r7, #12]
 801959c:	4613      	mov	r3, r2
 801959e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80195a0:	89bb      	ldrh	r3, [r7, #12]
 80195a2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d105      	bne.n	80195b6 <tcp_pbuf_prealloc+0x2a>
 80195aa:	4b30      	ldr	r3, [pc, #192]	; (801966c <tcp_pbuf_prealloc+0xe0>)
 80195ac:	22e8      	movs	r2, #232	; 0xe8
 80195ae:	4930      	ldr	r1, [pc, #192]	; (8019670 <tcp_pbuf_prealloc+0xe4>)
 80195b0:	4830      	ldr	r0, [pc, #192]	; (8019674 <tcp_pbuf_prealloc+0xe8>)
 80195b2:	f007 fc0b 	bl	8020dcc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80195b6:	6a3b      	ldr	r3, [r7, #32]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d105      	bne.n	80195c8 <tcp_pbuf_prealloc+0x3c>
 80195bc:	4b2b      	ldr	r3, [pc, #172]	; (801966c <tcp_pbuf_prealloc+0xe0>)
 80195be:	22e9      	movs	r2, #233	; 0xe9
 80195c0:	492d      	ldr	r1, [pc, #180]	; (8019678 <tcp_pbuf_prealloc+0xec>)
 80195c2:	482c      	ldr	r0, [pc, #176]	; (8019674 <tcp_pbuf_prealloc+0xe8>)
 80195c4:	f007 fc02 	bl	8020dcc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80195c8:	89ba      	ldrh	r2, [r7, #12]
 80195ca:	897b      	ldrh	r3, [r7, #10]
 80195cc:	429a      	cmp	r2, r3
 80195ce:	d221      	bcs.n	8019614 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80195d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80195d4:	f003 0302 	and.w	r3, r3, #2
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d111      	bne.n	8019600 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80195dc:	6a3b      	ldr	r3, [r7, #32]
 80195de:	8b5b      	ldrh	r3, [r3, #26]
 80195e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d115      	bne.n	8019614 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80195e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d007      	beq.n	8019600 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80195f0:	6a3b      	ldr	r3, [r7, #32]
 80195f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d103      	bne.n	8019600 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80195f8:	6a3b      	ldr	r3, [r7, #32]
 80195fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d009      	beq.n	8019614 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019600:	89bb      	ldrh	r3, [r7, #12]
 8019602:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8019606:	f023 0203 	bic.w	r2, r3, #3
 801960a:	897b      	ldrh	r3, [r7, #10]
 801960c:	4293      	cmp	r3, r2
 801960e:	bf28      	it	cs
 8019610:	4613      	movcs	r3, r2
 8019612:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019614:	8af9      	ldrh	r1, [r7, #22]
 8019616:	7bfb      	ldrb	r3, [r7, #15]
 8019618:	f44f 7220 	mov.w	r2, #640	; 0x280
 801961c:	4618      	mov	r0, r3
 801961e:	f7fa fec7 	bl	80143b0 <pbuf_alloc>
 8019622:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019624:	693b      	ldr	r3, [r7, #16]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d101      	bne.n	801962e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801962a:	2300      	movs	r3, #0
 801962c:	e019      	b.n	8019662 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801962e:	693b      	ldr	r3, [r7, #16]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d006      	beq.n	8019644 <tcp_pbuf_prealloc+0xb8>
 8019636:	4b0d      	ldr	r3, [pc, #52]	; (801966c <tcp_pbuf_prealloc+0xe0>)
 8019638:	f240 120b 	movw	r2, #267	; 0x10b
 801963c:	490f      	ldr	r1, [pc, #60]	; (801967c <tcp_pbuf_prealloc+0xf0>)
 801963e:	480d      	ldr	r0, [pc, #52]	; (8019674 <tcp_pbuf_prealloc+0xe8>)
 8019640:	f007 fbc4 	bl	8020dcc <iprintf>
  *oversize = p->len - length;
 8019644:	693b      	ldr	r3, [r7, #16]
 8019646:	895a      	ldrh	r2, [r3, #10]
 8019648:	89bb      	ldrh	r3, [r7, #12]
 801964a:	1ad3      	subs	r3, r2, r3
 801964c:	b29a      	uxth	r2, r3
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8019652:	693b      	ldr	r3, [r7, #16]
 8019654:	89ba      	ldrh	r2, [r7, #12]
 8019656:	811a      	strh	r2, [r3, #8]
 8019658:	693b      	ldr	r3, [r7, #16]
 801965a:	891a      	ldrh	r2, [r3, #8]
 801965c:	693b      	ldr	r3, [r7, #16]
 801965e:	815a      	strh	r2, [r3, #10]
  return p;
 8019660:	693b      	ldr	r3, [r7, #16]
}
 8019662:	4618      	mov	r0, r3
 8019664:	3718      	adds	r7, #24
 8019666:	46bd      	mov	sp, r7
 8019668:	bd80      	pop	{r7, pc}
 801966a:	bf00      	nop
 801966c:	08024bcc 	.word	0x08024bcc
 8019670:	08024c84 	.word	0x08024c84
 8019674:	08024c20 	.word	0x08024c20
 8019678:	08024ca8 	.word	0x08024ca8
 801967c:	08024cc8 	.word	0x08024cc8

08019680 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b082      	sub	sp, #8
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
 8019688:	460b      	mov	r3, r1
 801968a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d106      	bne.n	80196a0 <tcp_write_checks+0x20>
 8019692:	4b33      	ldr	r3, [pc, #204]	; (8019760 <tcp_write_checks+0xe0>)
 8019694:	f240 1233 	movw	r2, #307	; 0x133
 8019698:	4932      	ldr	r1, [pc, #200]	; (8019764 <tcp_write_checks+0xe4>)
 801969a:	4833      	ldr	r0, [pc, #204]	; (8019768 <tcp_write_checks+0xe8>)
 801969c:	f007 fb96 	bl	8020dcc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	7d1b      	ldrb	r3, [r3, #20]
 80196a4:	2b04      	cmp	r3, #4
 80196a6:	d00e      	beq.n	80196c6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80196ac:	2b07      	cmp	r3, #7
 80196ae:	d00a      	beq.n	80196c6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80196b4:	2b02      	cmp	r3, #2
 80196b6:	d006      	beq.n	80196c6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80196bc:	2b03      	cmp	r3, #3
 80196be:	d002      	beq.n	80196c6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80196c0:	f06f 030a 	mvn.w	r3, #10
 80196c4:	e048      	b.n	8019758 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80196c6:	887b      	ldrh	r3, [r7, #2]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d101      	bne.n	80196d0 <tcp_write_checks+0x50>
    return ERR_OK;
 80196cc:	2300      	movs	r3, #0
 80196ce:	e043      	b.n	8019758 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80196d6:	887a      	ldrh	r2, [r7, #2]
 80196d8:	429a      	cmp	r2, r3
 80196da:	d909      	bls.n	80196f0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	8b5b      	ldrh	r3, [r3, #26]
 80196e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80196e4:	b29a      	uxth	r2, r3
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80196ea:	f04f 33ff 	mov.w	r3, #4294967295
 80196ee:	e033      	b.n	8019758 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80196f6:	2b08      	cmp	r3, #8
 80196f8:	d909      	bls.n	801970e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	8b5b      	ldrh	r3, [r3, #26]
 80196fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019702:	b29a      	uxth	r2, r3
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019708:	f04f 33ff 	mov.w	r3, #4294967295
 801970c:	e024      	b.n	8019758 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019714:	2b00      	cmp	r3, #0
 8019716:	d00f      	beq.n	8019738 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801971c:	2b00      	cmp	r3, #0
 801971e:	d11a      	bne.n	8019756 <tcp_write_checks+0xd6>
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019724:	2b00      	cmp	r3, #0
 8019726:	d116      	bne.n	8019756 <tcp_write_checks+0xd6>
 8019728:	4b0d      	ldr	r3, [pc, #52]	; (8019760 <tcp_write_checks+0xe0>)
 801972a:	f240 1255 	movw	r2, #341	; 0x155
 801972e:	490f      	ldr	r1, [pc, #60]	; (801976c <tcp_write_checks+0xec>)
 8019730:	480d      	ldr	r0, [pc, #52]	; (8019768 <tcp_write_checks+0xe8>)
 8019732:	f007 fb4b 	bl	8020dcc <iprintf>
 8019736:	e00e      	b.n	8019756 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801973c:	2b00      	cmp	r3, #0
 801973e:	d103      	bne.n	8019748 <tcp_write_checks+0xc8>
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019744:	2b00      	cmp	r3, #0
 8019746:	d006      	beq.n	8019756 <tcp_write_checks+0xd6>
 8019748:	4b05      	ldr	r3, [pc, #20]	; (8019760 <tcp_write_checks+0xe0>)
 801974a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801974e:	4908      	ldr	r1, [pc, #32]	; (8019770 <tcp_write_checks+0xf0>)
 8019750:	4805      	ldr	r0, [pc, #20]	; (8019768 <tcp_write_checks+0xe8>)
 8019752:	f007 fb3b 	bl	8020dcc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019756:	2300      	movs	r3, #0
}
 8019758:	4618      	mov	r0, r3
 801975a:	3708      	adds	r7, #8
 801975c:	46bd      	mov	sp, r7
 801975e:	bd80      	pop	{r7, pc}
 8019760:	08024bcc 	.word	0x08024bcc
 8019764:	08024cdc 	.word	0x08024cdc
 8019768:	08024c20 	.word	0x08024c20
 801976c:	08024cfc 	.word	0x08024cfc
 8019770:	08024d38 	.word	0x08024d38

08019774 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8019774:	b590      	push	{r4, r7, lr}
 8019776:	b09b      	sub	sp, #108	; 0x6c
 8019778:	af04      	add	r7, sp, #16
 801977a:	60f8      	str	r0, [r7, #12]
 801977c:	60b9      	str	r1, [r7, #8]
 801977e:	4611      	mov	r1, r2
 8019780:	461a      	mov	r2, r3
 8019782:	460b      	mov	r3, r1
 8019784:	80fb      	strh	r3, [r7, #6]
 8019786:	4613      	mov	r3, r2
 8019788:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801978a:	2300      	movs	r3, #0
 801978c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801978e:	2300      	movs	r3, #0
 8019790:	653b      	str	r3, [r7, #80]	; 0x50
 8019792:	2300      	movs	r3, #0
 8019794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019796:	2300      	movs	r3, #0
 8019798:	64bb      	str	r3, [r7, #72]	; 0x48
 801979a:	2300      	movs	r3, #0
 801979c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801979e:	2300      	movs	r3, #0
 80197a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80197a4:	2300      	movs	r3, #0
 80197a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80197aa:	2300      	movs	r3, #0
 80197ac:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80197ae:	2300      	movs	r3, #0
 80197b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80197b2:	2300      	movs	r3, #0
 80197b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d109      	bne.n	80197d0 <tcp_write+0x5c>
 80197bc:	4ba4      	ldr	r3, [pc, #656]	; (8019a50 <tcp_write+0x2dc>)
 80197be:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80197c2:	49a4      	ldr	r1, [pc, #656]	; (8019a54 <tcp_write+0x2e0>)
 80197c4:	48a4      	ldr	r0, [pc, #656]	; (8019a58 <tcp_write+0x2e4>)
 80197c6:	f007 fb01 	bl	8020dcc <iprintf>
 80197ca:	f06f 030f 	mvn.w	r3, #15
 80197ce:	e32a      	b.n	8019e26 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80197d6:	085b      	lsrs	r3, r3, #1
 80197d8:	b29a      	uxth	r2, r3
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80197de:	4293      	cmp	r3, r2
 80197e0:	bf28      	it	cs
 80197e2:	4613      	movcs	r3, r2
 80197e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80197e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d102      	bne.n	80197f2 <tcp_write+0x7e>
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80197f0:	e000      	b.n	80197f4 <tcp_write+0x80>
 80197f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80197f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80197f6:	68bb      	ldr	r3, [r7, #8]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d109      	bne.n	8019810 <tcp_write+0x9c>
 80197fc:	4b94      	ldr	r3, [pc, #592]	; (8019a50 <tcp_write+0x2dc>)
 80197fe:	f240 12ad 	movw	r2, #429	; 0x1ad
 8019802:	4996      	ldr	r1, [pc, #600]	; (8019a5c <tcp_write+0x2e8>)
 8019804:	4894      	ldr	r0, [pc, #592]	; (8019a58 <tcp_write+0x2e4>)
 8019806:	f007 fae1 	bl	8020dcc <iprintf>
 801980a:	f06f 030f 	mvn.w	r3, #15
 801980e:	e30a      	b.n	8019e26 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019810:	88fb      	ldrh	r3, [r7, #6]
 8019812:	4619      	mov	r1, r3
 8019814:	68f8      	ldr	r0, [r7, #12]
 8019816:	f7ff ff33 	bl	8019680 <tcp_write_checks>
 801981a:	4603      	mov	r3, r0
 801981c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8019820:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019824:	2b00      	cmp	r3, #0
 8019826:	d002      	beq.n	801982e <tcp_write+0xba>
    return err;
 8019828:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801982c:	e2fb      	b.n	8019e26 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019834:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019838:	2300      	movs	r3, #0
 801983a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019842:	2b00      	cmp	r3, #0
 8019844:	f000 80f6 	beq.w	8019a34 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801984c:	653b      	str	r3, [r7, #80]	; 0x50
 801984e:	e002      	b.n	8019856 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8019850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	2b00      	cmp	r3, #0
 801985c:	d1f8      	bne.n	8019850 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801985e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019860:	7a9b      	ldrb	r3, [r3, #10]
 8019862:	009b      	lsls	r3, r3, #2
 8019864:	b29b      	uxth	r3, r3
 8019866:	f003 0304 	and.w	r3, r3, #4
 801986a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801986c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801986e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019870:	891b      	ldrh	r3, [r3, #8]
 8019872:	4619      	mov	r1, r3
 8019874:	8c3b      	ldrh	r3, [r7, #32]
 8019876:	440b      	add	r3, r1
 8019878:	429a      	cmp	r2, r3
 801987a:	da06      	bge.n	801988a <tcp_write+0x116>
 801987c:	4b74      	ldr	r3, [pc, #464]	; (8019a50 <tcp_write+0x2dc>)
 801987e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019882:	4977      	ldr	r1, [pc, #476]	; (8019a60 <tcp_write+0x2ec>)
 8019884:	4874      	ldr	r0, [pc, #464]	; (8019a58 <tcp_write+0x2e4>)
 8019886:	f007 faa1 	bl	8020dcc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801988a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801988c:	891a      	ldrh	r2, [r3, #8]
 801988e:	8c3b      	ldrh	r3, [r7, #32]
 8019890:	4413      	add	r3, r2
 8019892:	b29b      	uxth	r3, r3
 8019894:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019896:	1ad3      	subs	r3, r2, r3
 8019898:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80198a0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80198a2:	8a7b      	ldrh	r3, [r7, #18]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d026      	beq.n	80198f6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80198a8:	8a7b      	ldrh	r3, [r7, #18]
 80198aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80198ac:	429a      	cmp	r2, r3
 80198ae:	d206      	bcs.n	80198be <tcp_write+0x14a>
 80198b0:	4b67      	ldr	r3, [pc, #412]	; (8019a50 <tcp_write+0x2dc>)
 80198b2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80198b6:	496b      	ldr	r1, [pc, #428]	; (8019a64 <tcp_write+0x2f0>)
 80198b8:	4867      	ldr	r0, [pc, #412]	; (8019a58 <tcp_write+0x2e4>)
 80198ba:	f007 fa87 	bl	8020dcc <iprintf>
      seg = last_unsent;
 80198be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80198c0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80198c2:	8a7b      	ldrh	r3, [r7, #18]
 80198c4:	88fa      	ldrh	r2, [r7, #6]
 80198c6:	4293      	cmp	r3, r2
 80198c8:	bf28      	it	cs
 80198ca:	4613      	movcs	r3, r2
 80198cc:	b29b      	uxth	r3, r3
 80198ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80198d0:	4293      	cmp	r3, r2
 80198d2:	bf28      	it	cs
 80198d4:	4613      	movcs	r3, r2
 80198d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80198d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80198dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80198de:	4413      	add	r3, r2
 80198e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80198e4:	8a7a      	ldrh	r2, [r7, #18]
 80198e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80198e8:	1ad3      	subs	r3, r2, r3
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80198ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80198f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80198f2:	1ad3      	subs	r3, r2, r3
 80198f4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80198f6:	8a7b      	ldrh	r3, [r7, #18]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d00b      	beq.n	8019914 <tcp_write+0x1a0>
 80198fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019900:	88fb      	ldrh	r3, [r7, #6]
 8019902:	429a      	cmp	r2, r3
 8019904:	d006      	beq.n	8019914 <tcp_write+0x1a0>
 8019906:	4b52      	ldr	r3, [pc, #328]	; (8019a50 <tcp_write+0x2dc>)
 8019908:	f44f 7200 	mov.w	r2, #512	; 0x200
 801990c:	4956      	ldr	r1, [pc, #344]	; (8019a68 <tcp_write+0x2f4>)
 801990e:	4852      	ldr	r0, [pc, #328]	; (8019a58 <tcp_write+0x2e4>)
 8019910:	f007 fa5c 	bl	8020dcc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019914:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019918:	88fb      	ldrh	r3, [r7, #6]
 801991a:	429a      	cmp	r2, r3
 801991c:	f080 8167 	bcs.w	8019bee <tcp_write+0x47a>
 8019920:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019922:	2b00      	cmp	r3, #0
 8019924:	f000 8163 	beq.w	8019bee <tcp_write+0x47a>
 8019928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801992a:	891b      	ldrh	r3, [r3, #8]
 801992c:	2b00      	cmp	r3, #0
 801992e:	f000 815e 	beq.w	8019bee <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019932:	88fa      	ldrh	r2, [r7, #6]
 8019934:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019938:	1ad2      	subs	r2, r2, r3
 801993a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801993c:	4293      	cmp	r3, r2
 801993e:	bfa8      	it	ge
 8019940:	4613      	movge	r3, r2
 8019942:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8019944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019946:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019948:	797b      	ldrb	r3, [r7, #5]
 801994a:	f003 0301 	and.w	r3, r3, #1
 801994e:	2b00      	cmp	r3, #0
 8019950:	d027      	beq.n	80199a2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019952:	f107 0012 	add.w	r0, r7, #18
 8019956:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019958:	8bf9      	ldrh	r1, [r7, #30]
 801995a:	2301      	movs	r3, #1
 801995c:	9302      	str	r3, [sp, #8]
 801995e:	797b      	ldrb	r3, [r7, #5]
 8019960:	9301      	str	r3, [sp, #4]
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	9300      	str	r3, [sp, #0]
 8019966:	4603      	mov	r3, r0
 8019968:	2000      	movs	r0, #0
 801996a:	f7ff fe0f 	bl	801958c <tcp_pbuf_prealloc>
 801996e:	6578      	str	r0, [r7, #84]	; 0x54
 8019970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019972:	2b00      	cmp	r3, #0
 8019974:	f000 8225 	beq.w	8019dc2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801997a:	6858      	ldr	r0, [r3, #4]
 801997c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019980:	68ba      	ldr	r2, [r7, #8]
 8019982:	4413      	add	r3, r2
 8019984:	8bfa      	ldrh	r2, [r7, #30]
 8019986:	4619      	mov	r1, r3
 8019988:	f007 f936 	bl	8020bf8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801998c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801998e:	f7fb f881 	bl	8014a94 <pbuf_clen>
 8019992:	4603      	mov	r3, r0
 8019994:	461a      	mov	r2, r3
 8019996:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801999a:	4413      	add	r3, r2
 801999c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80199a0:	e041      	b.n	8019a26 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80199a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80199a4:	685b      	ldr	r3, [r3, #4]
 80199a6:	637b      	str	r3, [r7, #52]	; 0x34
 80199a8:	e002      	b.n	80199b0 <tcp_write+0x23c>
 80199aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	637b      	str	r3, [r7, #52]	; 0x34
 80199b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d1f8      	bne.n	80199aa <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80199b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199ba:	7b1b      	ldrb	r3, [r3, #12]
 80199bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d115      	bne.n	80199f0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80199c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199c6:	685b      	ldr	r3, [r3, #4]
 80199c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80199ca:	8952      	ldrh	r2, [r2, #10]
 80199cc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80199ce:	68ba      	ldr	r2, [r7, #8]
 80199d0:	429a      	cmp	r2, r3
 80199d2:	d10d      	bne.n	80199f0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80199d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d006      	beq.n	80199ea <tcp_write+0x276>
 80199dc:	4b1c      	ldr	r3, [pc, #112]	; (8019a50 <tcp_write+0x2dc>)
 80199de:	f240 2231 	movw	r2, #561	; 0x231
 80199e2:	4922      	ldr	r1, [pc, #136]	; (8019a6c <tcp_write+0x2f8>)
 80199e4:	481c      	ldr	r0, [pc, #112]	; (8019a58 <tcp_write+0x2e4>)
 80199e6:	f007 f9f1 	bl	8020dcc <iprintf>
          extendlen = seglen;
 80199ea:	8bfb      	ldrh	r3, [r7, #30]
 80199ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80199ee:	e01a      	b.n	8019a26 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80199f0:	8bfb      	ldrh	r3, [r7, #30]
 80199f2:	2201      	movs	r2, #1
 80199f4:	4619      	mov	r1, r3
 80199f6:	2000      	movs	r0, #0
 80199f8:	f7fa fcda 	bl	80143b0 <pbuf_alloc>
 80199fc:	6578      	str	r0, [r7, #84]	; 0x54
 80199fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	f000 81e0 	beq.w	8019dc6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019a06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019a0a:	68ba      	ldr	r2, [r7, #8]
 8019a0c:	441a      	add	r2, r3
 8019a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a10:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019a12:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019a14:	f7fb f83e 	bl	8014a94 <pbuf_clen>
 8019a18:	4603      	mov	r3, r0
 8019a1a:	461a      	mov	r2, r3
 8019a1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019a20:	4413      	add	r3, r2
 8019a22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019a26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019a2a:	8bfb      	ldrh	r3, [r7, #30]
 8019a2c:	4413      	add	r3, r2
 8019a2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019a32:	e0dc      	b.n	8019bee <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	f000 80d7 	beq.w	8019bee <tcp_write+0x47a>
 8019a40:	4b03      	ldr	r3, [pc, #12]	; (8019a50 <tcp_write+0x2dc>)
 8019a42:	f240 224a 	movw	r2, #586	; 0x24a
 8019a46:	490a      	ldr	r1, [pc, #40]	; (8019a70 <tcp_write+0x2fc>)
 8019a48:	4803      	ldr	r0, [pc, #12]	; (8019a58 <tcp_write+0x2e4>)
 8019a4a:	f007 f9bf 	bl	8020dcc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019a4e:	e0ce      	b.n	8019bee <tcp_write+0x47a>
 8019a50:	08024bcc 	.word	0x08024bcc
 8019a54:	08024d6c 	.word	0x08024d6c
 8019a58:	08024c20 	.word	0x08024c20
 8019a5c:	08024d84 	.word	0x08024d84
 8019a60:	08024db8 	.word	0x08024db8
 8019a64:	08024dd0 	.word	0x08024dd0
 8019a68:	08024df0 	.word	0x08024df0
 8019a6c:	08024e10 	.word	0x08024e10
 8019a70:	08024e3c 	.word	0x08024e3c
    struct pbuf *p;
    u16_t left = len - pos;
 8019a74:	88fa      	ldrh	r2, [r7, #6]
 8019a76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019a7a:	1ad3      	subs	r3, r2, r3
 8019a7c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8019a7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019a82:	b29b      	uxth	r3, r3
 8019a84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019a86:	1ad3      	subs	r3, r2, r3
 8019a88:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019a8a:	8b7a      	ldrh	r2, [r7, #26]
 8019a8c:	8bbb      	ldrh	r3, [r7, #28]
 8019a8e:	4293      	cmp	r3, r2
 8019a90:	bf28      	it	cs
 8019a92:	4613      	movcs	r3, r2
 8019a94:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019a96:	797b      	ldrb	r3, [r7, #5]
 8019a98:	f003 0301 	and.w	r3, r3, #1
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d036      	beq.n	8019b0e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019aa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019aa4:	b29a      	uxth	r2, r3
 8019aa6:	8b3b      	ldrh	r3, [r7, #24]
 8019aa8:	4413      	add	r3, r2
 8019aaa:	b299      	uxth	r1, r3
 8019aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	bf0c      	ite	eq
 8019ab2:	2301      	moveq	r3, #1
 8019ab4:	2300      	movne	r3, #0
 8019ab6:	b2db      	uxtb	r3, r3
 8019ab8:	f107 0012 	add.w	r0, r7, #18
 8019abc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019abe:	9302      	str	r3, [sp, #8]
 8019ac0:	797b      	ldrb	r3, [r7, #5]
 8019ac2:	9301      	str	r3, [sp, #4]
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	9300      	str	r3, [sp, #0]
 8019ac8:	4603      	mov	r3, r0
 8019aca:	2036      	movs	r0, #54	; 0x36
 8019acc:	f7ff fd5e 	bl	801958c <tcp_pbuf_prealloc>
 8019ad0:	6338      	str	r0, [r7, #48]	; 0x30
 8019ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	f000 8178 	beq.w	8019dca <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019adc:	895b      	ldrh	r3, [r3, #10]
 8019ade:	8b3a      	ldrh	r2, [r7, #24]
 8019ae0:	429a      	cmp	r2, r3
 8019ae2:	d906      	bls.n	8019af2 <tcp_write+0x37e>
 8019ae4:	4b8c      	ldr	r3, [pc, #560]	; (8019d18 <tcp_write+0x5a4>)
 8019ae6:	f240 2266 	movw	r2, #614	; 0x266
 8019aea:	498c      	ldr	r1, [pc, #560]	; (8019d1c <tcp_write+0x5a8>)
 8019aec:	488c      	ldr	r0, [pc, #560]	; (8019d20 <tcp_write+0x5ac>)
 8019aee:	f007 f96d 	bl	8020dcc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019af4:	685a      	ldr	r2, [r3, #4]
 8019af6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019afa:	18d0      	adds	r0, r2, r3
 8019afc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b00:	68ba      	ldr	r2, [r7, #8]
 8019b02:	4413      	add	r3, r2
 8019b04:	8b3a      	ldrh	r2, [r7, #24]
 8019b06:	4619      	mov	r1, r3
 8019b08:	f007 f876 	bl	8020bf8 <memcpy>
 8019b0c:	e02f      	b.n	8019b6e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019b0e:	8a7b      	ldrh	r3, [r7, #18]
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d006      	beq.n	8019b22 <tcp_write+0x3ae>
 8019b14:	4b80      	ldr	r3, [pc, #512]	; (8019d18 <tcp_write+0x5a4>)
 8019b16:	f240 2271 	movw	r2, #625	; 0x271
 8019b1a:	4982      	ldr	r1, [pc, #520]	; (8019d24 <tcp_write+0x5b0>)
 8019b1c:	4880      	ldr	r0, [pc, #512]	; (8019d20 <tcp_write+0x5ac>)
 8019b1e:	f007 f955 	bl	8020dcc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019b22:	8b3b      	ldrh	r3, [r7, #24]
 8019b24:	2201      	movs	r2, #1
 8019b26:	4619      	mov	r1, r3
 8019b28:	2036      	movs	r0, #54	; 0x36
 8019b2a:	f7fa fc41 	bl	80143b0 <pbuf_alloc>
 8019b2e:	6178      	str	r0, [r7, #20]
 8019b30:	697b      	ldr	r3, [r7, #20]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	f000 814b 	beq.w	8019dce <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019b38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b3c:	68ba      	ldr	r2, [r7, #8]
 8019b3e:	441a      	add	r2, r3
 8019b40:	697b      	ldr	r3, [r7, #20]
 8019b42:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019b44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019b48:	b29b      	uxth	r3, r3
 8019b4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019b4e:	4619      	mov	r1, r3
 8019b50:	2036      	movs	r0, #54	; 0x36
 8019b52:	f7fa fc2d 	bl	80143b0 <pbuf_alloc>
 8019b56:	6338      	str	r0, [r7, #48]	; 0x30
 8019b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d103      	bne.n	8019b66 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019b5e:	6978      	ldr	r0, [r7, #20]
 8019b60:	f7fa ff0a 	bl	8014978 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019b64:	e136      	b.n	8019dd4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019b66:	6979      	ldr	r1, [r7, #20]
 8019b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b6a:	f7fa ffd3 	bl	8014b14 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b70:	f7fa ff90 	bl	8014a94 <pbuf_clen>
 8019b74:	4603      	mov	r3, r0
 8019b76:	461a      	mov	r2, r3
 8019b78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019b7c:	4413      	add	r3, r2
 8019b7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019b82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019b86:	2b09      	cmp	r3, #9
 8019b88:	d903      	bls.n	8019b92 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b8c:	f7fa fef4 	bl	8014978 <pbuf_free>
      goto memerr;
 8019b90:	e120      	b.n	8019dd4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019b96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b9a:	441a      	add	r2, r3
 8019b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ba0:	9300      	str	r3, [sp, #0]
 8019ba2:	4613      	mov	r3, r2
 8019ba4:	2200      	movs	r2, #0
 8019ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019ba8:	68f8      	ldr	r0, [r7, #12]
 8019baa:	f7ff fc51 	bl	8019450 <tcp_create_segment>
 8019bae:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	f000 810d 	beq.w	8019dd2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d102      	bne.n	8019bc4 <tcp_write+0x450>
      queue = seg;
 8019bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8019bc2:	e00c      	b.n	8019bde <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d106      	bne.n	8019bd8 <tcp_write+0x464>
 8019bca:	4b53      	ldr	r3, [pc, #332]	; (8019d18 <tcp_write+0x5a4>)
 8019bcc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019bd0:	4955      	ldr	r1, [pc, #340]	; (8019d28 <tcp_write+0x5b4>)
 8019bd2:	4853      	ldr	r0, [pc, #332]	; (8019d20 <tcp_write+0x5ac>)
 8019bd4:	f007 f8fa 	bl	8020dcc <iprintf>
      prev_seg->next = seg;
 8019bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019bda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019bdc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019be0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019be2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019be6:	8b3b      	ldrh	r3, [r7, #24]
 8019be8:	4413      	add	r3, r2
 8019bea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8019bee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019bf2:	88fb      	ldrh	r3, [r7, #6]
 8019bf4:	429a      	cmp	r2, r3
 8019bf6:	f4ff af3d 	bcc.w	8019a74 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019bfa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d02c      	beq.n	8019c5a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c02:	685b      	ldr	r3, [r3, #4]
 8019c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019c06:	e01e      	b.n	8019c46 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c0a:	891a      	ldrh	r2, [r3, #8]
 8019c0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019c0e:	4413      	add	r3, r2
 8019c10:	b29a      	uxth	r2, r3
 8019c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c14:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d110      	bne.n	8019c40 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c20:	685b      	ldr	r3, [r3, #4]
 8019c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019c24:	8952      	ldrh	r2, [r2, #10]
 8019c26:	4413      	add	r3, r2
 8019c28:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019c2a:	68b9      	ldr	r1, [r7, #8]
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	f006 ffe3 	bl	8020bf8 <memcpy>
        p->len += oversize_used;
 8019c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c34:	895a      	ldrh	r2, [r3, #10]
 8019c36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019c38:	4413      	add	r3, r2
 8019c3a:	b29a      	uxth	r2, r3
 8019c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c3e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d1dd      	bne.n	8019c08 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8019c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c4e:	891a      	ldrh	r2, [r3, #8]
 8019c50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019c52:	4413      	add	r3, r2
 8019c54:	b29a      	uxth	r2, r3
 8019c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c58:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019c5a:	8a7a      	ldrh	r2, [r7, #18]
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d018      	beq.n	8019c9a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d106      	bne.n	8019c7c <tcp_write+0x508>
 8019c6e:	4b2a      	ldr	r3, [pc, #168]	; (8019d18 <tcp_write+0x5a4>)
 8019c70:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8019c74:	492d      	ldr	r1, [pc, #180]	; (8019d2c <tcp_write+0x5b8>)
 8019c76:	482a      	ldr	r0, [pc, #168]	; (8019d20 <tcp_write+0x5ac>)
 8019c78:	f007 f8a8 	bl	8020dcc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c7e:	685b      	ldr	r3, [r3, #4]
 8019c80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019c82:	4618      	mov	r0, r3
 8019c84:	f7fa ff46 	bl	8014b14 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c8a:	891a      	ldrh	r2, [r3, #8]
 8019c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c8e:	891b      	ldrh	r3, [r3, #8]
 8019c90:	4413      	add	r3, r2
 8019c92:	b29a      	uxth	r2, r3
 8019c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c96:	811a      	strh	r2, [r3, #8]
 8019c98:	e037      	b.n	8019d0a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8019c9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d034      	beq.n	8019d0a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d003      	beq.n	8019cae <tcp_write+0x53a>
 8019ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ca8:	685b      	ldr	r3, [r3, #4]
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d106      	bne.n	8019cbc <tcp_write+0x548>
 8019cae:	4b1a      	ldr	r3, [pc, #104]	; (8019d18 <tcp_write+0x5a4>)
 8019cb0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8019cb4:	491e      	ldr	r1, [pc, #120]	; (8019d30 <tcp_write+0x5bc>)
 8019cb6:	481a      	ldr	r0, [pc, #104]	; (8019d20 <tcp_write+0x5ac>)
 8019cb8:	f007 f888 	bl	8020dcc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019cbe:	685b      	ldr	r3, [r3, #4]
 8019cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8019cc2:	e009      	b.n	8019cd8 <tcp_write+0x564>
      p->tot_len += extendlen;
 8019cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cc6:	891a      	ldrh	r2, [r3, #8]
 8019cc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019cca:	4413      	add	r3, r2
 8019ccc:	b29a      	uxth	r2, r3
 8019cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cd0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8019cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d1f1      	bne.n	8019cc4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ce2:	891a      	ldrh	r2, [r3, #8]
 8019ce4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019ce6:	4413      	add	r3, r2
 8019ce8:	b29a      	uxth	r2, r3
 8019cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cec:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cf0:	895a      	ldrh	r2, [r3, #10]
 8019cf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019cf4:	4413      	add	r3, r2
 8019cf6:	b29a      	uxth	r2, r3
 8019cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cfa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019cfe:	891a      	ldrh	r2, [r3, #8]
 8019d00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019d02:	4413      	add	r3, r2
 8019d04:	b29a      	uxth	r2, r3
 8019d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019d08:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d111      	bne.n	8019d34 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019d14:	66da      	str	r2, [r3, #108]	; 0x6c
 8019d16:	e010      	b.n	8019d3a <tcp_write+0x5c6>
 8019d18:	08024bcc 	.word	0x08024bcc
 8019d1c:	08024e6c 	.word	0x08024e6c
 8019d20:	08024c20 	.word	0x08024c20
 8019d24:	08024eac 	.word	0x08024eac
 8019d28:	08024ebc 	.word	0x08024ebc
 8019d2c:	08024ed0 	.word	0x08024ed0
 8019d30:	08024f08 	.word	0x08024f08
  } else {
    last_unsent->next = queue;
 8019d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019d38:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019d3e:	88fb      	ldrh	r3, [r7, #6]
 8019d40:	441a      	add	r2, r3
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019d4c:	88fb      	ldrh	r3, [r7, #6]
 8019d4e:	1ad3      	subs	r3, r2, r3
 8019d50:	b29a      	uxth	r2, r3
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019d5e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d00e      	beq.n	8019d8a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d10a      	bne.n	8019d8a <tcp_write+0x616>
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d106      	bne.n	8019d8a <tcp_write+0x616>
 8019d7c:	4b2c      	ldr	r3, [pc, #176]	; (8019e30 <tcp_write+0x6bc>)
 8019d7e:	f240 3212 	movw	r2, #786	; 0x312
 8019d82:	492c      	ldr	r1, [pc, #176]	; (8019e34 <tcp_write+0x6c0>)
 8019d84:	482c      	ldr	r0, [pc, #176]	; (8019e38 <tcp_write+0x6c4>)
 8019d86:	f007 f821 	bl	8020dcc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8019d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d016      	beq.n	8019dbe <tcp_write+0x64a>
 8019d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d92:	68db      	ldr	r3, [r3, #12]
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d012      	beq.n	8019dbe <tcp_write+0x64a>
 8019d98:	797b      	ldrb	r3, [r7, #5]
 8019d9a:	f003 0302 	and.w	r3, r3, #2
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d10d      	bne.n	8019dbe <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019da4:	68db      	ldr	r3, [r3, #12]
 8019da6:	899b      	ldrh	r3, [r3, #12]
 8019da8:	b29c      	uxth	r4, r3
 8019daa:	2008      	movs	r0, #8
 8019dac:	f7f8 fa56 	bl	801225c <lwip_htons>
 8019db0:	4603      	mov	r3, r0
 8019db2:	461a      	mov	r2, r3
 8019db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019db6:	68db      	ldr	r3, [r3, #12]
 8019db8:	4322      	orrs	r2, r4
 8019dba:	b292      	uxth	r2, r2
 8019dbc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	e031      	b.n	8019e26 <tcp_write+0x6b2>
          goto memerr;
 8019dc2:	bf00      	nop
 8019dc4:	e006      	b.n	8019dd4 <tcp_write+0x660>
            goto memerr;
 8019dc6:	bf00      	nop
 8019dc8:	e004      	b.n	8019dd4 <tcp_write+0x660>
        goto memerr;
 8019dca:	bf00      	nop
 8019dcc:	e002      	b.n	8019dd4 <tcp_write+0x660>
        goto memerr;
 8019dce:	bf00      	nop
 8019dd0:	e000      	b.n	8019dd4 <tcp_write+0x660>
      goto memerr;
 8019dd2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	8b5b      	ldrh	r3, [r3, #26]
 8019dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ddc:	b29a      	uxth	r2, r3
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8019de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d002      	beq.n	8019dee <tcp_write+0x67a>
    pbuf_free(concat_p);
 8019de8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019dea:	f7fa fdc5 	bl	8014978 <pbuf_free>
  }
  if (queue != NULL) {
 8019dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d002      	beq.n	8019dfa <tcp_write+0x686>
    tcp_segs_free(queue);
 8019df4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019df6:	f7fc fb6f 	bl	80164d8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d00e      	beq.n	8019e22 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d10a      	bne.n	8019e22 <tcp_write+0x6ae>
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d106      	bne.n	8019e22 <tcp_write+0x6ae>
 8019e14:	4b06      	ldr	r3, [pc, #24]	; (8019e30 <tcp_write+0x6bc>)
 8019e16:	f240 3227 	movw	r2, #807	; 0x327
 8019e1a:	4906      	ldr	r1, [pc, #24]	; (8019e34 <tcp_write+0x6c0>)
 8019e1c:	4806      	ldr	r0, [pc, #24]	; (8019e38 <tcp_write+0x6c4>)
 8019e1e:	f006 ffd5 	bl	8020dcc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019e26:	4618      	mov	r0, r3
 8019e28:	375c      	adds	r7, #92	; 0x5c
 8019e2a:	46bd      	mov	sp, r7
 8019e2c:	bd90      	pop	{r4, r7, pc}
 8019e2e:	bf00      	nop
 8019e30:	08024bcc 	.word	0x08024bcc
 8019e34:	08024f40 	.word	0x08024f40
 8019e38:	08024c20 	.word	0x08024c20

08019e3c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019e3c:	b590      	push	{r4, r7, lr}
 8019e3e:	b08b      	sub	sp, #44	; 0x2c
 8019e40:	af02      	add	r7, sp, #8
 8019e42:	6078      	str	r0, [r7, #4]
 8019e44:	460b      	mov	r3, r1
 8019e46:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019e48:	2300      	movs	r3, #0
 8019e4a:	61fb      	str	r3, [r7, #28]
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019e50:	2300      	movs	r3, #0
 8019e52:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d106      	bne.n	8019e68 <tcp_split_unsent_seg+0x2c>
 8019e5a:	4b95      	ldr	r3, [pc, #596]	; (801a0b0 <tcp_split_unsent_seg+0x274>)
 8019e5c:	f240 324b 	movw	r2, #843	; 0x34b
 8019e60:	4994      	ldr	r1, [pc, #592]	; (801a0b4 <tcp_split_unsent_seg+0x278>)
 8019e62:	4895      	ldr	r0, [pc, #596]	; (801a0b8 <tcp_split_unsent_seg+0x27c>)
 8019e64:	f006 ffb2 	bl	8020dcc <iprintf>

  useg = pcb->unsent;
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e6c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019e6e:	697b      	ldr	r3, [r7, #20]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d102      	bne.n	8019e7a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019e74:	f04f 33ff 	mov.w	r3, #4294967295
 8019e78:	e116      	b.n	801a0a8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8019e7a:	887b      	ldrh	r3, [r7, #2]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d109      	bne.n	8019e94 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019e80:	4b8b      	ldr	r3, [pc, #556]	; (801a0b0 <tcp_split_unsent_seg+0x274>)
 8019e82:	f240 3253 	movw	r2, #851	; 0x353
 8019e86:	498d      	ldr	r1, [pc, #564]	; (801a0bc <tcp_split_unsent_seg+0x280>)
 8019e88:	488b      	ldr	r0, [pc, #556]	; (801a0b8 <tcp_split_unsent_seg+0x27c>)
 8019e8a:	f006 ff9f 	bl	8020dcc <iprintf>
    return ERR_VAL;
 8019e8e:	f06f 0305 	mvn.w	r3, #5
 8019e92:	e109      	b.n	801a0a8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8019e94:	697b      	ldr	r3, [r7, #20]
 8019e96:	891b      	ldrh	r3, [r3, #8]
 8019e98:	887a      	ldrh	r2, [r7, #2]
 8019e9a:	429a      	cmp	r2, r3
 8019e9c:	d301      	bcc.n	8019ea2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	e102      	b.n	801a0a8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ea6:	887a      	ldrh	r2, [r7, #2]
 8019ea8:	429a      	cmp	r2, r3
 8019eaa:	d906      	bls.n	8019eba <tcp_split_unsent_seg+0x7e>
 8019eac:	4b80      	ldr	r3, [pc, #512]	; (801a0b0 <tcp_split_unsent_seg+0x274>)
 8019eae:	f240 325b 	movw	r2, #859	; 0x35b
 8019eb2:	4983      	ldr	r1, [pc, #524]	; (801a0c0 <tcp_split_unsent_seg+0x284>)
 8019eb4:	4880      	ldr	r0, [pc, #512]	; (801a0b8 <tcp_split_unsent_seg+0x27c>)
 8019eb6:	f006 ff89 	bl	8020dcc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8019eba:	697b      	ldr	r3, [r7, #20]
 8019ebc:	891b      	ldrh	r3, [r3, #8]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d106      	bne.n	8019ed0 <tcp_split_unsent_seg+0x94>
 8019ec2:	4b7b      	ldr	r3, [pc, #492]	; (801a0b0 <tcp_split_unsent_seg+0x274>)
 8019ec4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8019ec8:	497e      	ldr	r1, [pc, #504]	; (801a0c4 <tcp_split_unsent_seg+0x288>)
 8019eca:	487b      	ldr	r0, [pc, #492]	; (801a0b8 <tcp_split_unsent_seg+0x27c>)
 8019ecc:	f006 ff7e 	bl	8020dcc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019ed0:	697b      	ldr	r3, [r7, #20]
 8019ed2:	7a9b      	ldrb	r3, [r3, #10]
 8019ed4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019ed6:	7bfb      	ldrb	r3, [r7, #15]
 8019ed8:	009b      	lsls	r3, r3, #2
 8019eda:	b2db      	uxtb	r3, r3
 8019edc:	f003 0304 	and.w	r3, r3, #4
 8019ee0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019ee2:	697b      	ldr	r3, [r7, #20]
 8019ee4:	891a      	ldrh	r2, [r3, #8]
 8019ee6:	887b      	ldrh	r3, [r7, #2]
 8019ee8:	1ad3      	subs	r3, r2, r3
 8019eea:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019eec:	7bbb      	ldrb	r3, [r7, #14]
 8019eee:	b29a      	uxth	r2, r3
 8019ef0:	89bb      	ldrh	r3, [r7, #12]
 8019ef2:	4413      	add	r3, r2
 8019ef4:	b29b      	uxth	r3, r3
 8019ef6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019efa:	4619      	mov	r1, r3
 8019efc:	2036      	movs	r0, #54	; 0x36
 8019efe:	f7fa fa57 	bl	80143b0 <pbuf_alloc>
 8019f02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019f04:	693b      	ldr	r3, [r7, #16]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	f000 80b7 	beq.w	801a07a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019f0c:	697b      	ldr	r3, [r7, #20]
 8019f0e:	685b      	ldr	r3, [r3, #4]
 8019f10:	891a      	ldrh	r2, [r3, #8]
 8019f12:	697b      	ldr	r3, [r7, #20]
 8019f14:	891b      	ldrh	r3, [r3, #8]
 8019f16:	1ad3      	subs	r3, r2, r3
 8019f18:	b29a      	uxth	r2, r3
 8019f1a:	887b      	ldrh	r3, [r7, #2]
 8019f1c:	4413      	add	r3, r2
 8019f1e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019f20:	697b      	ldr	r3, [r7, #20]
 8019f22:	6858      	ldr	r0, [r3, #4]
 8019f24:	693b      	ldr	r3, [r7, #16]
 8019f26:	685a      	ldr	r2, [r3, #4]
 8019f28:	7bbb      	ldrb	r3, [r7, #14]
 8019f2a:	18d1      	adds	r1, r2, r3
 8019f2c:	897b      	ldrh	r3, [r7, #10]
 8019f2e:	89ba      	ldrh	r2, [r7, #12]
 8019f30:	f7fa ff28 	bl	8014d84 <pbuf_copy_partial>
 8019f34:	4603      	mov	r3, r0
 8019f36:	461a      	mov	r2, r3
 8019f38:	89bb      	ldrh	r3, [r7, #12]
 8019f3a:	4293      	cmp	r3, r2
 8019f3c:	f040 809f 	bne.w	801a07e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019f40:	697b      	ldr	r3, [r7, #20]
 8019f42:	68db      	ldr	r3, [r3, #12]
 8019f44:	899b      	ldrh	r3, [r3, #12]
 8019f46:	b29b      	uxth	r3, r3
 8019f48:	4618      	mov	r0, r3
 8019f4a:	f7f8 f987 	bl	801225c <lwip_htons>
 8019f4e:	4603      	mov	r3, r0
 8019f50:	b2db      	uxtb	r3, r3
 8019f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019f56:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019f58:	2300      	movs	r3, #0
 8019f5a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019f5c:	7efb      	ldrb	r3, [r7, #27]
 8019f5e:	f003 0308 	and.w	r3, r3, #8
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d007      	beq.n	8019f76 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8019f66:	7efb      	ldrb	r3, [r7, #27]
 8019f68:	f023 0308 	bic.w	r3, r3, #8
 8019f6c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8019f6e:	7ebb      	ldrb	r3, [r7, #26]
 8019f70:	f043 0308 	orr.w	r3, r3, #8
 8019f74:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8019f76:	7efb      	ldrb	r3, [r7, #27]
 8019f78:	f003 0301 	and.w	r3, r3, #1
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d007      	beq.n	8019f90 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019f80:	7efb      	ldrb	r3, [r7, #27]
 8019f82:	f023 0301 	bic.w	r3, r3, #1
 8019f86:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8019f88:	7ebb      	ldrb	r3, [r7, #26]
 8019f8a:	f043 0301 	orr.w	r3, r3, #1
 8019f8e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019f90:	697b      	ldr	r3, [r7, #20]
 8019f92:	68db      	ldr	r3, [r3, #12]
 8019f94:	685b      	ldr	r3, [r3, #4]
 8019f96:	4618      	mov	r0, r3
 8019f98:	f7f8 f975 	bl	8012286 <lwip_htonl>
 8019f9c:	4602      	mov	r2, r0
 8019f9e:	887b      	ldrh	r3, [r7, #2]
 8019fa0:	18d1      	adds	r1, r2, r3
 8019fa2:	7eba      	ldrb	r2, [r7, #26]
 8019fa4:	7bfb      	ldrb	r3, [r7, #15]
 8019fa6:	9300      	str	r3, [sp, #0]
 8019fa8:	460b      	mov	r3, r1
 8019faa:	6939      	ldr	r1, [r7, #16]
 8019fac:	6878      	ldr	r0, [r7, #4]
 8019fae:	f7ff fa4f 	bl	8019450 <tcp_create_segment>
 8019fb2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019fb4:	69fb      	ldr	r3, [r7, #28]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d063      	beq.n	801a082 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8019fba:	697b      	ldr	r3, [r7, #20]
 8019fbc:	685b      	ldr	r3, [r3, #4]
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	f7fa fd68 	bl	8014a94 <pbuf_clen>
 8019fc4:	4603      	mov	r3, r0
 8019fc6:	461a      	mov	r2, r3
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019fce:	1a9b      	subs	r3, r3, r2
 8019fd0:	b29a      	uxth	r2, r3
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019fd8:	697b      	ldr	r3, [r7, #20]
 8019fda:	6858      	ldr	r0, [r3, #4]
 8019fdc:	697b      	ldr	r3, [r7, #20]
 8019fde:	685b      	ldr	r3, [r3, #4]
 8019fe0:	891a      	ldrh	r2, [r3, #8]
 8019fe2:	89bb      	ldrh	r3, [r7, #12]
 8019fe4:	1ad3      	subs	r3, r2, r3
 8019fe6:	b29b      	uxth	r3, r3
 8019fe8:	4619      	mov	r1, r3
 8019fea:	f7fa fb3f 	bl	801466c <pbuf_realloc>
  useg->len -= remainder;
 8019fee:	697b      	ldr	r3, [r7, #20]
 8019ff0:	891a      	ldrh	r2, [r3, #8]
 8019ff2:	89bb      	ldrh	r3, [r7, #12]
 8019ff4:	1ad3      	subs	r3, r2, r3
 8019ff6:	b29a      	uxth	r2, r3
 8019ff8:	697b      	ldr	r3, [r7, #20]
 8019ffa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019ffc:	697b      	ldr	r3, [r7, #20]
 8019ffe:	68db      	ldr	r3, [r3, #12]
 801a000:	899b      	ldrh	r3, [r3, #12]
 801a002:	b29c      	uxth	r4, r3
 801a004:	7efb      	ldrb	r3, [r7, #27]
 801a006:	b29b      	uxth	r3, r3
 801a008:	4618      	mov	r0, r3
 801a00a:	f7f8 f927 	bl	801225c <lwip_htons>
 801a00e:	4603      	mov	r3, r0
 801a010:	461a      	mov	r2, r3
 801a012:	697b      	ldr	r3, [r7, #20]
 801a014:	68db      	ldr	r3, [r3, #12]
 801a016:	4322      	orrs	r2, r4
 801a018:	b292      	uxth	r2, r2
 801a01a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a01c:	697b      	ldr	r3, [r7, #20]
 801a01e:	685b      	ldr	r3, [r3, #4]
 801a020:	4618      	mov	r0, r3
 801a022:	f7fa fd37 	bl	8014a94 <pbuf_clen>
 801a026:	4603      	mov	r3, r0
 801a028:	461a      	mov	r2, r3
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a030:	4413      	add	r3, r2
 801a032:	b29a      	uxth	r2, r3
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a03a:	69fb      	ldr	r3, [r7, #28]
 801a03c:	685b      	ldr	r3, [r3, #4]
 801a03e:	4618      	mov	r0, r3
 801a040:	f7fa fd28 	bl	8014a94 <pbuf_clen>
 801a044:	4603      	mov	r3, r0
 801a046:	461a      	mov	r2, r3
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a04e:	4413      	add	r3, r2
 801a050:	b29a      	uxth	r2, r3
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a058:	697b      	ldr	r3, [r7, #20]
 801a05a:	681a      	ldr	r2, [r3, #0]
 801a05c:	69fb      	ldr	r3, [r7, #28]
 801a05e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a060:	697b      	ldr	r3, [r7, #20]
 801a062:	69fa      	ldr	r2, [r7, #28]
 801a064:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a066:	69fb      	ldr	r3, [r7, #28]
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d103      	bne.n	801a076 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	2200      	movs	r2, #0
 801a072:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a076:	2300      	movs	r3, #0
 801a078:	e016      	b.n	801a0a8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801a07a:	bf00      	nop
 801a07c:	e002      	b.n	801a084 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a07e:	bf00      	nop
 801a080:	e000      	b.n	801a084 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a082:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a084:	69fb      	ldr	r3, [r7, #28]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d006      	beq.n	801a098 <tcp_split_unsent_seg+0x25c>
 801a08a:	4b09      	ldr	r3, [pc, #36]	; (801a0b0 <tcp_split_unsent_seg+0x274>)
 801a08c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801a090:	490d      	ldr	r1, [pc, #52]	; (801a0c8 <tcp_split_unsent_seg+0x28c>)
 801a092:	4809      	ldr	r0, [pc, #36]	; (801a0b8 <tcp_split_unsent_seg+0x27c>)
 801a094:	f006 fe9a 	bl	8020dcc <iprintf>
  if (p != NULL) {
 801a098:	693b      	ldr	r3, [r7, #16]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d002      	beq.n	801a0a4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801a09e:	6938      	ldr	r0, [r7, #16]
 801a0a0:	f7fa fc6a 	bl	8014978 <pbuf_free>
  }

  return ERR_MEM;
 801a0a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	3724      	adds	r7, #36	; 0x24
 801a0ac:	46bd      	mov	sp, r7
 801a0ae:	bd90      	pop	{r4, r7, pc}
 801a0b0:	08024bcc 	.word	0x08024bcc
 801a0b4:	08024f60 	.word	0x08024f60
 801a0b8:	08024c20 	.word	0x08024c20
 801a0bc:	08024f84 	.word	0x08024f84
 801a0c0:	08024fa8 	.word	0x08024fa8
 801a0c4:	08024fb8 	.word	0x08024fb8
 801a0c8:	08024fc8 	.word	0x08024fc8

0801a0cc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a0cc:	b590      	push	{r4, r7, lr}
 801a0ce:	b085      	sub	sp, #20
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d106      	bne.n	801a0e8 <tcp_send_fin+0x1c>
 801a0da:	4b21      	ldr	r3, [pc, #132]	; (801a160 <tcp_send_fin+0x94>)
 801a0dc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801a0e0:	4920      	ldr	r1, [pc, #128]	; (801a164 <tcp_send_fin+0x98>)
 801a0e2:	4821      	ldr	r0, [pc, #132]	; (801a168 <tcp_send_fin+0x9c>)
 801a0e4:	f006 fe72 	bl	8020dcc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d02e      	beq.n	801a14e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0f4:	60fb      	str	r3, [r7, #12]
 801a0f6:	e002      	b.n	801a0fe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d1f8      	bne.n	801a0f8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	68db      	ldr	r3, [r3, #12]
 801a10a:	899b      	ldrh	r3, [r3, #12]
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	4618      	mov	r0, r3
 801a110:	f7f8 f8a4 	bl	801225c <lwip_htons>
 801a114:	4603      	mov	r3, r0
 801a116:	b2db      	uxtb	r3, r3
 801a118:	f003 0307 	and.w	r3, r3, #7
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d116      	bne.n	801a14e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	68db      	ldr	r3, [r3, #12]
 801a124:	899b      	ldrh	r3, [r3, #12]
 801a126:	b29c      	uxth	r4, r3
 801a128:	2001      	movs	r0, #1
 801a12a:	f7f8 f897 	bl	801225c <lwip_htons>
 801a12e:	4603      	mov	r3, r0
 801a130:	461a      	mov	r2, r3
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	68db      	ldr	r3, [r3, #12]
 801a136:	4322      	orrs	r2, r4
 801a138:	b292      	uxth	r2, r2
 801a13a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	8b5b      	ldrh	r3, [r3, #26]
 801a140:	f043 0320 	orr.w	r3, r3, #32
 801a144:	b29a      	uxth	r2, r3
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a14a:	2300      	movs	r3, #0
 801a14c:	e004      	b.n	801a158 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a14e:	2101      	movs	r1, #1
 801a150:	6878      	ldr	r0, [r7, #4]
 801a152:	f000 f80b 	bl	801a16c <tcp_enqueue_flags>
 801a156:	4603      	mov	r3, r0
}
 801a158:	4618      	mov	r0, r3
 801a15a:	3714      	adds	r7, #20
 801a15c:	46bd      	mov	sp, r7
 801a15e:	bd90      	pop	{r4, r7, pc}
 801a160:	08024bcc 	.word	0x08024bcc
 801a164:	08024fd4 	.word	0x08024fd4
 801a168:	08024c20 	.word	0x08024c20

0801a16c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b08a      	sub	sp, #40	; 0x28
 801a170:	af02      	add	r7, sp, #8
 801a172:	6078      	str	r0, [r7, #4]
 801a174:	460b      	mov	r3, r1
 801a176:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a178:	2300      	movs	r3, #0
 801a17a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a17c:	2300      	movs	r3, #0
 801a17e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a180:	78fb      	ldrb	r3, [r7, #3]
 801a182:	f003 0303 	and.w	r3, r3, #3
 801a186:	2b00      	cmp	r3, #0
 801a188:	d106      	bne.n	801a198 <tcp_enqueue_flags+0x2c>
 801a18a:	4b67      	ldr	r3, [pc, #412]	; (801a328 <tcp_enqueue_flags+0x1bc>)
 801a18c:	f240 4211 	movw	r2, #1041	; 0x411
 801a190:	4966      	ldr	r1, [pc, #408]	; (801a32c <tcp_enqueue_flags+0x1c0>)
 801a192:	4867      	ldr	r0, [pc, #412]	; (801a330 <tcp_enqueue_flags+0x1c4>)
 801a194:	f006 fe1a 	bl	8020dcc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d106      	bne.n	801a1ac <tcp_enqueue_flags+0x40>
 801a19e:	4b62      	ldr	r3, [pc, #392]	; (801a328 <tcp_enqueue_flags+0x1bc>)
 801a1a0:	f240 4213 	movw	r2, #1043	; 0x413
 801a1a4:	4963      	ldr	r1, [pc, #396]	; (801a334 <tcp_enqueue_flags+0x1c8>)
 801a1a6:	4862      	ldr	r0, [pc, #392]	; (801a330 <tcp_enqueue_flags+0x1c4>)
 801a1a8:	f006 fe10 	bl	8020dcc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a1ac:	78fb      	ldrb	r3, [r7, #3]
 801a1ae:	f003 0302 	and.w	r3, r3, #2
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d001      	beq.n	801a1ba <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a1b6:	2301      	movs	r3, #1
 801a1b8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a1ba:	7ffb      	ldrb	r3, [r7, #31]
 801a1bc:	009b      	lsls	r3, r3, #2
 801a1be:	b2db      	uxtb	r3, r3
 801a1c0:	f003 0304 	and.w	r3, r3, #4
 801a1c4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a1c6:	7dfb      	ldrb	r3, [r7, #23]
 801a1c8:	b29b      	uxth	r3, r3
 801a1ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a1ce:	4619      	mov	r1, r3
 801a1d0:	2036      	movs	r0, #54	; 0x36
 801a1d2:	f7fa f8ed 	bl	80143b0 <pbuf_alloc>
 801a1d6:	6138      	str	r0, [r7, #16]
 801a1d8:	693b      	ldr	r3, [r7, #16]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d109      	bne.n	801a1f2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	8b5b      	ldrh	r3, [r3, #26]
 801a1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1e6:	b29a      	uxth	r2, r3
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a1ec:	f04f 33ff 	mov.w	r3, #4294967295
 801a1f0:	e095      	b.n	801a31e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a1f2:	693b      	ldr	r3, [r7, #16]
 801a1f4:	895a      	ldrh	r2, [r3, #10]
 801a1f6:	7dfb      	ldrb	r3, [r7, #23]
 801a1f8:	b29b      	uxth	r3, r3
 801a1fa:	429a      	cmp	r2, r3
 801a1fc:	d206      	bcs.n	801a20c <tcp_enqueue_flags+0xa0>
 801a1fe:	4b4a      	ldr	r3, [pc, #296]	; (801a328 <tcp_enqueue_flags+0x1bc>)
 801a200:	f240 4239 	movw	r2, #1081	; 0x439
 801a204:	494c      	ldr	r1, [pc, #304]	; (801a338 <tcp_enqueue_flags+0x1cc>)
 801a206:	484a      	ldr	r0, [pc, #296]	; (801a330 <tcp_enqueue_flags+0x1c4>)
 801a208:	f006 fde0 	bl	8020dcc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801a210:	78fa      	ldrb	r2, [r7, #3]
 801a212:	7ffb      	ldrb	r3, [r7, #31]
 801a214:	9300      	str	r3, [sp, #0]
 801a216:	460b      	mov	r3, r1
 801a218:	6939      	ldr	r1, [r7, #16]
 801a21a:	6878      	ldr	r0, [r7, #4]
 801a21c:	f7ff f918 	bl	8019450 <tcp_create_segment>
 801a220:	60f8      	str	r0, [r7, #12]
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d109      	bne.n	801a23c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	8b5b      	ldrh	r3, [r3, #26]
 801a22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a230:	b29a      	uxth	r2, r3
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a236:	f04f 33ff 	mov.w	r3, #4294967295
 801a23a:	e070      	b.n	801a31e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	68db      	ldr	r3, [r3, #12]
 801a240:	f003 0303 	and.w	r3, r3, #3
 801a244:	2b00      	cmp	r3, #0
 801a246:	d006      	beq.n	801a256 <tcp_enqueue_flags+0xea>
 801a248:	4b37      	ldr	r3, [pc, #220]	; (801a328 <tcp_enqueue_flags+0x1bc>)
 801a24a:	f240 4242 	movw	r2, #1090	; 0x442
 801a24e:	493b      	ldr	r1, [pc, #236]	; (801a33c <tcp_enqueue_flags+0x1d0>)
 801a250:	4837      	ldr	r0, [pc, #220]	; (801a330 <tcp_enqueue_flags+0x1c4>)
 801a252:	f006 fdbb 	bl	8020dcc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	891b      	ldrh	r3, [r3, #8]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d006      	beq.n	801a26c <tcp_enqueue_flags+0x100>
 801a25e:	4b32      	ldr	r3, [pc, #200]	; (801a328 <tcp_enqueue_flags+0x1bc>)
 801a260:	f240 4243 	movw	r2, #1091	; 0x443
 801a264:	4936      	ldr	r1, [pc, #216]	; (801a340 <tcp_enqueue_flags+0x1d4>)
 801a266:	4832      	ldr	r0, [pc, #200]	; (801a330 <tcp_enqueue_flags+0x1c4>)
 801a268:	f006 fdb0 	bl	8020dcc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a270:	2b00      	cmp	r3, #0
 801a272:	d103      	bne.n	801a27c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	68fa      	ldr	r2, [r7, #12]
 801a278:	66da      	str	r2, [r3, #108]	; 0x6c
 801a27a:	e00d      	b.n	801a298 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a280:	61bb      	str	r3, [r7, #24]
 801a282:	e002      	b.n	801a28a <tcp_enqueue_flags+0x11e>
 801a284:	69bb      	ldr	r3, [r7, #24]
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	61bb      	str	r3, [r7, #24]
 801a28a:	69bb      	ldr	r3, [r7, #24]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d1f8      	bne.n	801a284 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801a292:	69bb      	ldr	r3, [r7, #24]
 801a294:	68fa      	ldr	r2, [r7, #12]
 801a296:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	2200      	movs	r2, #0
 801a29c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a2a0:	78fb      	ldrb	r3, [r7, #3]
 801a2a2:	f003 0302 	and.w	r3, r3, #2
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d104      	bne.n	801a2b4 <tcp_enqueue_flags+0x148>
 801a2aa:	78fb      	ldrb	r3, [r7, #3]
 801a2ac:	f003 0301 	and.w	r3, r3, #1
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d004      	beq.n	801a2be <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a2b8:	1c5a      	adds	r2, r3, #1
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a2be:	78fb      	ldrb	r3, [r7, #3]
 801a2c0:	f003 0301 	and.w	r3, r3, #1
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d006      	beq.n	801a2d6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	8b5b      	ldrh	r3, [r3, #26]
 801a2cc:	f043 0320 	orr.w	r3, r3, #32
 801a2d0:	b29a      	uxth	r2, r3
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a2d6:	68fb      	ldr	r3, [r7, #12]
 801a2d8:	685b      	ldr	r3, [r3, #4]
 801a2da:	4618      	mov	r0, r3
 801a2dc:	f7fa fbda 	bl	8014a94 <pbuf_clen>
 801a2e0:	4603      	mov	r3, r0
 801a2e2:	461a      	mov	r2, r3
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a2ea:	4413      	add	r3, r2
 801a2ec:	b29a      	uxth	r2, r3
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d00e      	beq.n	801a31c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a302:	2b00      	cmp	r3, #0
 801a304:	d10a      	bne.n	801a31c <tcp_enqueue_flags+0x1b0>
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d106      	bne.n	801a31c <tcp_enqueue_flags+0x1b0>
 801a30e:	4b06      	ldr	r3, [pc, #24]	; (801a328 <tcp_enqueue_flags+0x1bc>)
 801a310:	f240 4265 	movw	r2, #1125	; 0x465
 801a314:	490b      	ldr	r1, [pc, #44]	; (801a344 <tcp_enqueue_flags+0x1d8>)
 801a316:	4806      	ldr	r0, [pc, #24]	; (801a330 <tcp_enqueue_flags+0x1c4>)
 801a318:	f006 fd58 	bl	8020dcc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a31c:	2300      	movs	r3, #0
}
 801a31e:	4618      	mov	r0, r3
 801a320:	3720      	adds	r7, #32
 801a322:	46bd      	mov	sp, r7
 801a324:	bd80      	pop	{r7, pc}
 801a326:	bf00      	nop
 801a328:	08024bcc 	.word	0x08024bcc
 801a32c:	08024ff0 	.word	0x08024ff0
 801a330:	08024c20 	.word	0x08024c20
 801a334:	08025048 	.word	0x08025048
 801a338:	08025068 	.word	0x08025068
 801a33c:	080250a4 	.word	0x080250a4
 801a340:	080250bc 	.word	0x080250bc
 801a344:	080250e8 	.word	0x080250e8

0801a348 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a348:	b5b0      	push	{r4, r5, r7, lr}
 801a34a:	b08a      	sub	sp, #40	; 0x28
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d106      	bne.n	801a364 <tcp_output+0x1c>
 801a356:	4b9e      	ldr	r3, [pc, #632]	; (801a5d0 <tcp_output+0x288>)
 801a358:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801a35c:	499d      	ldr	r1, [pc, #628]	; (801a5d4 <tcp_output+0x28c>)
 801a35e:	489e      	ldr	r0, [pc, #632]	; (801a5d8 <tcp_output+0x290>)
 801a360:	f006 fd34 	bl	8020dcc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	7d1b      	ldrb	r3, [r3, #20]
 801a368:	2b01      	cmp	r3, #1
 801a36a:	d106      	bne.n	801a37a <tcp_output+0x32>
 801a36c:	4b98      	ldr	r3, [pc, #608]	; (801a5d0 <tcp_output+0x288>)
 801a36e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801a372:	499a      	ldr	r1, [pc, #616]	; (801a5dc <tcp_output+0x294>)
 801a374:	4898      	ldr	r0, [pc, #608]	; (801a5d8 <tcp_output+0x290>)
 801a376:	f006 fd29 	bl	8020dcc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a37a:	4b99      	ldr	r3, [pc, #612]	; (801a5e0 <tcp_output+0x298>)
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	687a      	ldr	r2, [r7, #4]
 801a380:	429a      	cmp	r2, r3
 801a382:	d101      	bne.n	801a388 <tcp_output+0x40>
    return ERR_OK;
 801a384:	2300      	movs	r3, #0
 801a386:	e1ce      	b.n	801a726 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a394:	4293      	cmp	r3, r2
 801a396:	bf28      	it	cs
 801a398:	4613      	movcs	r3, r2
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a3a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d10b      	bne.n	801a3c2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	8b5b      	ldrh	r3, [r3, #26]
 801a3ae:	f003 0302 	and.w	r3, r3, #2
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	f000 81aa 	beq.w	801a70c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801a3b8:	6878      	ldr	r0, [r7, #4]
 801a3ba:	f000 fdcb 	bl	801af54 <tcp_send_empty_ack>
 801a3be:	4603      	mov	r3, r0
 801a3c0:	e1b1      	b.n	801a726 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a3c2:	6879      	ldr	r1, [r7, #4]
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	3304      	adds	r3, #4
 801a3c8:	461a      	mov	r2, r3
 801a3ca:	6878      	ldr	r0, [r7, #4]
 801a3cc:	f7ff f824 	bl	8019418 <tcp_route>
 801a3d0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a3d2:	697b      	ldr	r3, [r7, #20]
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d102      	bne.n	801a3de <tcp_output+0x96>
    return ERR_RTE;
 801a3d8:	f06f 0303 	mvn.w	r3, #3
 801a3dc:	e1a3      	b.n	801a726 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d003      	beq.n	801a3ec <tcp_output+0xa4>
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d111      	bne.n	801a410 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a3ec:	697b      	ldr	r3, [r7, #20]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d002      	beq.n	801a3f8 <tcp_output+0xb0>
 801a3f2:	697b      	ldr	r3, [r7, #20]
 801a3f4:	3304      	adds	r3, #4
 801a3f6:	e000      	b.n	801a3fa <tcp_output+0xb2>
 801a3f8:	2300      	movs	r3, #0
 801a3fa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a3fc:	693b      	ldr	r3, [r7, #16]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d102      	bne.n	801a408 <tcp_output+0xc0>
      return ERR_RTE;
 801a402:	f06f 0303 	mvn.w	r3, #3
 801a406:	e18e      	b.n	801a726 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a408:	693b      	ldr	r3, [r7, #16]
 801a40a:	681a      	ldr	r2, [r3, #0]
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a412:	68db      	ldr	r3, [r3, #12]
 801a414:	685b      	ldr	r3, [r3, #4]
 801a416:	4618      	mov	r0, r3
 801a418:	f7f7 ff35 	bl	8012286 <lwip_htonl>
 801a41c:	4602      	mov	r2, r0
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a422:	1ad3      	subs	r3, r2, r3
 801a424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a426:	8912      	ldrh	r2, [r2, #8]
 801a428:	4413      	add	r3, r2
 801a42a:	69ba      	ldr	r2, [r7, #24]
 801a42c:	429a      	cmp	r2, r3
 801a42e:	d227      	bcs.n	801a480 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a436:	461a      	mov	r2, r3
 801a438:	69bb      	ldr	r3, [r7, #24]
 801a43a:	4293      	cmp	r3, r2
 801a43c:	d114      	bne.n	801a468 <tcp_output+0x120>
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a442:	2b00      	cmp	r3, #0
 801a444:	d110      	bne.n	801a468 <tcp_output+0x120>
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d10b      	bne.n	801a468 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	2200      	movs	r2, #0
 801a454:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	2201      	movs	r2, #1
 801a45c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	2200      	movs	r2, #0
 801a464:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	8b5b      	ldrh	r3, [r3, #26]
 801a46c:	f003 0302 	and.w	r3, r3, #2
 801a470:	2b00      	cmp	r3, #0
 801a472:	f000 814d 	beq.w	801a710 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801a476:	6878      	ldr	r0, [r7, #4]
 801a478:	f000 fd6c 	bl	801af54 <tcp_send_empty_ack>
 801a47c:	4603      	mov	r3, r0
 801a47e:	e152      	b.n	801a726 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	2200      	movs	r2, #0
 801a484:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a48c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a48e:	6a3b      	ldr	r3, [r7, #32]
 801a490:	2b00      	cmp	r3, #0
 801a492:	f000 811c 	beq.w	801a6ce <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801a496:	e002      	b.n	801a49e <tcp_output+0x156>
 801a498:	6a3b      	ldr	r3, [r7, #32]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	623b      	str	r3, [r7, #32]
 801a49e:	6a3b      	ldr	r3, [r7, #32]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d1f8      	bne.n	801a498 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a4a6:	e112      	b.n	801a6ce <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4aa:	68db      	ldr	r3, [r3, #12]
 801a4ac:	899b      	ldrh	r3, [r3, #12]
 801a4ae:	b29b      	uxth	r3, r3
 801a4b0:	4618      	mov	r0, r3
 801a4b2:	f7f7 fed3 	bl	801225c <lwip_htons>
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	b2db      	uxtb	r3, r3
 801a4ba:	f003 0304 	and.w	r3, r3, #4
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d006      	beq.n	801a4d0 <tcp_output+0x188>
 801a4c2:	4b43      	ldr	r3, [pc, #268]	; (801a5d0 <tcp_output+0x288>)
 801a4c4:	f240 5236 	movw	r2, #1334	; 0x536
 801a4c8:	4946      	ldr	r1, [pc, #280]	; (801a5e4 <tcp_output+0x29c>)
 801a4ca:	4843      	ldr	r0, [pc, #268]	; (801a5d8 <tcp_output+0x290>)
 801a4cc:	f006 fc7e 	bl	8020dcc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d01f      	beq.n	801a518 <tcp_output+0x1d0>
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	8b5b      	ldrh	r3, [r3, #26]
 801a4dc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d119      	bne.n	801a518 <tcp_output+0x1d0>
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d00b      	beq.n	801a504 <tcp_output+0x1bc>
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d110      	bne.n	801a518 <tcp_output+0x1d0>
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a4fa:	891a      	ldrh	r2, [r3, #8]
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a500:	429a      	cmp	r2, r3
 801a502:	d209      	bcs.n	801a518 <tcp_output+0x1d0>
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d004      	beq.n	801a518 <tcp_output+0x1d0>
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a514:	2b08      	cmp	r3, #8
 801a516:	d901      	bls.n	801a51c <tcp_output+0x1d4>
 801a518:	2301      	movs	r3, #1
 801a51a:	e000      	b.n	801a51e <tcp_output+0x1d6>
 801a51c:	2300      	movs	r3, #0
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d106      	bne.n	801a530 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	8b5b      	ldrh	r3, [r3, #26]
 801a526:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	f000 80e4 	beq.w	801a6f8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	7d1b      	ldrb	r3, [r3, #20]
 801a534:	2b02      	cmp	r3, #2
 801a536:	d00d      	beq.n	801a554 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a53a:	68db      	ldr	r3, [r3, #12]
 801a53c:	899b      	ldrh	r3, [r3, #12]
 801a53e:	b29c      	uxth	r4, r3
 801a540:	2010      	movs	r0, #16
 801a542:	f7f7 fe8b 	bl	801225c <lwip_htons>
 801a546:	4603      	mov	r3, r0
 801a548:	461a      	mov	r2, r3
 801a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a54c:	68db      	ldr	r3, [r3, #12]
 801a54e:	4322      	orrs	r2, r4
 801a550:	b292      	uxth	r2, r2
 801a552:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801a554:	697a      	ldr	r2, [r7, #20]
 801a556:	6879      	ldr	r1, [r7, #4]
 801a558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a55a:	f000 f909 	bl	801a770 <tcp_output_segment>
 801a55e:	4603      	mov	r3, r0
 801a560:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801a562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d009      	beq.n	801a57e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	8b5b      	ldrh	r3, [r3, #26]
 801a56e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a572:	b29a      	uxth	r2, r3
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	835a      	strh	r2, [r3, #26]
      return err;
 801a578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a57c:	e0d3      	b.n	801a726 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a580:	681a      	ldr	r2, [r3, #0]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	7d1b      	ldrb	r3, [r3, #20]
 801a58a:	2b02      	cmp	r3, #2
 801a58c:	d006      	beq.n	801a59c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	8b5b      	ldrh	r3, [r3, #26]
 801a592:	f023 0303 	bic.w	r3, r3, #3
 801a596:	b29a      	uxth	r2, r3
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a59e:	68db      	ldr	r3, [r3, #12]
 801a5a0:	685b      	ldr	r3, [r3, #4]
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	f7f7 fe6f 	bl	8012286 <lwip_htonl>
 801a5a8:	4604      	mov	r4, r0
 801a5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ac:	891b      	ldrh	r3, [r3, #8]
 801a5ae:	461d      	mov	r5, r3
 801a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5b2:	68db      	ldr	r3, [r3, #12]
 801a5b4:	899b      	ldrh	r3, [r3, #12]
 801a5b6:	b29b      	uxth	r3, r3
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	f7f7 fe4f 	bl	801225c <lwip_htons>
 801a5be:	4603      	mov	r3, r0
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	f003 0303 	and.w	r3, r3, #3
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d00e      	beq.n	801a5e8 <tcp_output+0x2a0>
 801a5ca:	2301      	movs	r3, #1
 801a5cc:	e00d      	b.n	801a5ea <tcp_output+0x2a2>
 801a5ce:	bf00      	nop
 801a5d0:	08024bcc 	.word	0x08024bcc
 801a5d4:	08025110 	.word	0x08025110
 801a5d8:	08024c20 	.word	0x08024c20
 801a5dc:	08025128 	.word	0x08025128
 801a5e0:	20016dc4 	.word	0x20016dc4
 801a5e4:	08025150 	.word	0x08025150
 801a5e8:	2300      	movs	r3, #0
 801a5ea:	442b      	add	r3, r5
 801a5ec:	4423      	add	r3, r4
 801a5ee:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a5f4:	68bb      	ldr	r3, [r7, #8]
 801a5f6:	1ad3      	subs	r3, r2, r3
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	da02      	bge.n	801a602 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	68ba      	ldr	r2, [r7, #8]
 801a600:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a604:	891b      	ldrh	r3, [r3, #8]
 801a606:	461c      	mov	r4, r3
 801a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a60a:	68db      	ldr	r3, [r3, #12]
 801a60c:	899b      	ldrh	r3, [r3, #12]
 801a60e:	b29b      	uxth	r3, r3
 801a610:	4618      	mov	r0, r3
 801a612:	f7f7 fe23 	bl	801225c <lwip_htons>
 801a616:	4603      	mov	r3, r0
 801a618:	b2db      	uxtb	r3, r3
 801a61a:	f003 0303 	and.w	r3, r3, #3
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d001      	beq.n	801a626 <tcp_output+0x2de>
 801a622:	2301      	movs	r3, #1
 801a624:	e000      	b.n	801a628 <tcp_output+0x2e0>
 801a626:	2300      	movs	r3, #0
 801a628:	4423      	add	r3, r4
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d049      	beq.n	801a6c2 <tcp_output+0x37a>
      seg->next = NULL;
 801a62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a630:	2200      	movs	r2, #0
 801a632:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a638:	2b00      	cmp	r3, #0
 801a63a:	d105      	bne.n	801a648 <tcp_output+0x300>
        pcb->unacked = seg;
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a640:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a644:	623b      	str	r3, [r7, #32]
 801a646:	e03f      	b.n	801a6c8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a64a:	68db      	ldr	r3, [r3, #12]
 801a64c:	685b      	ldr	r3, [r3, #4]
 801a64e:	4618      	mov	r0, r3
 801a650:	f7f7 fe19 	bl	8012286 <lwip_htonl>
 801a654:	4604      	mov	r4, r0
 801a656:	6a3b      	ldr	r3, [r7, #32]
 801a658:	68db      	ldr	r3, [r3, #12]
 801a65a:	685b      	ldr	r3, [r3, #4]
 801a65c:	4618      	mov	r0, r3
 801a65e:	f7f7 fe12 	bl	8012286 <lwip_htonl>
 801a662:	4603      	mov	r3, r0
 801a664:	1ae3      	subs	r3, r4, r3
 801a666:	2b00      	cmp	r3, #0
 801a668:	da24      	bge.n	801a6b4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	3370      	adds	r3, #112	; 0x70
 801a66e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a670:	e002      	b.n	801a678 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a672:	69fb      	ldr	r3, [r7, #28]
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a678:	69fb      	ldr	r3, [r7, #28]
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d011      	beq.n	801a6a4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a680:	69fb      	ldr	r3, [r7, #28]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	68db      	ldr	r3, [r3, #12]
 801a686:	685b      	ldr	r3, [r3, #4]
 801a688:	4618      	mov	r0, r3
 801a68a:	f7f7 fdfc 	bl	8012286 <lwip_htonl>
 801a68e:	4604      	mov	r4, r0
 801a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a692:	68db      	ldr	r3, [r3, #12]
 801a694:	685b      	ldr	r3, [r3, #4]
 801a696:	4618      	mov	r0, r3
 801a698:	f7f7 fdf5 	bl	8012286 <lwip_htonl>
 801a69c:	4603      	mov	r3, r0
 801a69e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	dbe6      	blt.n	801a672 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801a6a4:	69fb      	ldr	r3, [r7, #28]
 801a6a6:	681a      	ldr	r2, [r3, #0]
 801a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6aa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a6ac:	69fb      	ldr	r3, [r7, #28]
 801a6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a6b0:	601a      	str	r2, [r3, #0]
 801a6b2:	e009      	b.n	801a6c8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a6b4:	6a3b      	ldr	r3, [r7, #32]
 801a6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a6b8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a6ba:	6a3b      	ldr	r3, [r7, #32]
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	623b      	str	r3, [r7, #32]
 801a6c0:	e002      	b.n	801a6c8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a6c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a6c4:	f7fb ff1d 	bl	8016502 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6cc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d012      	beq.n	801a6fa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6d6:	68db      	ldr	r3, [r3, #12]
 801a6d8:	685b      	ldr	r3, [r3, #4]
 801a6da:	4618      	mov	r0, r3
 801a6dc:	f7f7 fdd3 	bl	8012286 <lwip_htonl>
 801a6e0:	4602      	mov	r2, r0
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6e6:	1ad3      	subs	r3, r2, r3
 801a6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a6ea:	8912      	ldrh	r2, [r2, #8]
 801a6ec:	4413      	add	r3, r2
  while (seg != NULL &&
 801a6ee:	69ba      	ldr	r2, [r7, #24]
 801a6f0:	429a      	cmp	r2, r3
 801a6f2:	f4bf aed9 	bcs.w	801a4a8 <tcp_output+0x160>
 801a6f6:	e000      	b.n	801a6fa <tcp_output+0x3b2>
      break;
 801a6f8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d108      	bne.n	801a714 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	2200      	movs	r2, #0
 801a706:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801a70a:	e004      	b.n	801a716 <tcp_output+0x3ce>
    goto output_done;
 801a70c:	bf00      	nop
 801a70e:	e002      	b.n	801a716 <tcp_output+0x3ce>
    goto output_done;
 801a710:	bf00      	nop
 801a712:	e000      	b.n	801a716 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a714:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	8b5b      	ldrh	r3, [r3, #26]
 801a71a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a71e:	b29a      	uxth	r2, r3
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a724:	2300      	movs	r3, #0
}
 801a726:	4618      	mov	r0, r3
 801a728:	3728      	adds	r7, #40	; 0x28
 801a72a:	46bd      	mov	sp, r7
 801a72c:	bdb0      	pop	{r4, r5, r7, pc}
 801a72e:	bf00      	nop

0801a730 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b082      	sub	sp, #8
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d106      	bne.n	801a74c <tcp_output_segment_busy+0x1c>
 801a73e:	4b09      	ldr	r3, [pc, #36]	; (801a764 <tcp_output_segment_busy+0x34>)
 801a740:	f240 529a 	movw	r2, #1434	; 0x59a
 801a744:	4908      	ldr	r1, [pc, #32]	; (801a768 <tcp_output_segment_busy+0x38>)
 801a746:	4809      	ldr	r0, [pc, #36]	; (801a76c <tcp_output_segment_busy+0x3c>)
 801a748:	f006 fb40 	bl	8020dcc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	685b      	ldr	r3, [r3, #4]
 801a750:	7b9b      	ldrb	r3, [r3, #14]
 801a752:	2b01      	cmp	r3, #1
 801a754:	d001      	beq.n	801a75a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a756:	2301      	movs	r3, #1
 801a758:	e000      	b.n	801a75c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a75a:	2300      	movs	r3, #0
}
 801a75c:	4618      	mov	r0, r3
 801a75e:	3708      	adds	r7, #8
 801a760:	46bd      	mov	sp, r7
 801a762:	bd80      	pop	{r7, pc}
 801a764:	08024bcc 	.word	0x08024bcc
 801a768:	08025168 	.word	0x08025168
 801a76c:	08024c20 	.word	0x08024c20

0801a770 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a770:	b5b0      	push	{r4, r5, r7, lr}
 801a772:	b08c      	sub	sp, #48	; 0x30
 801a774:	af04      	add	r7, sp, #16
 801a776:	60f8      	str	r0, [r7, #12]
 801a778:	60b9      	str	r1, [r7, #8]
 801a77a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d106      	bne.n	801a790 <tcp_output_segment+0x20>
 801a782:	4b63      	ldr	r3, [pc, #396]	; (801a910 <tcp_output_segment+0x1a0>)
 801a784:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801a788:	4962      	ldr	r1, [pc, #392]	; (801a914 <tcp_output_segment+0x1a4>)
 801a78a:	4863      	ldr	r0, [pc, #396]	; (801a918 <tcp_output_segment+0x1a8>)
 801a78c:	f006 fb1e 	bl	8020dcc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d106      	bne.n	801a7a4 <tcp_output_segment+0x34>
 801a796:	4b5e      	ldr	r3, [pc, #376]	; (801a910 <tcp_output_segment+0x1a0>)
 801a798:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a79c:	495f      	ldr	r1, [pc, #380]	; (801a91c <tcp_output_segment+0x1ac>)
 801a79e:	485e      	ldr	r0, [pc, #376]	; (801a918 <tcp_output_segment+0x1a8>)
 801a7a0:	f006 fb14 	bl	8020dcc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d106      	bne.n	801a7b8 <tcp_output_segment+0x48>
 801a7aa:	4b59      	ldr	r3, [pc, #356]	; (801a910 <tcp_output_segment+0x1a0>)
 801a7ac:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801a7b0:	495b      	ldr	r1, [pc, #364]	; (801a920 <tcp_output_segment+0x1b0>)
 801a7b2:	4859      	ldr	r0, [pc, #356]	; (801a918 <tcp_output_segment+0x1a8>)
 801a7b4:	f006 fb0a 	bl	8020dcc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a7b8:	68f8      	ldr	r0, [r7, #12]
 801a7ba:	f7ff ffb9 	bl	801a730 <tcp_output_segment_busy>
 801a7be:	4603      	mov	r3, r0
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d001      	beq.n	801a7c8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	e09f      	b.n	801a908 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a7c8:	68bb      	ldr	r3, [r7, #8]
 801a7ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	68dc      	ldr	r4, [r3, #12]
 801a7d0:	4610      	mov	r0, r2
 801a7d2:	f7f7 fd58 	bl	8012286 <lwip_htonl>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a7da:	68bb      	ldr	r3, [r7, #8]
 801a7dc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	68dc      	ldr	r4, [r3, #12]
 801a7e2:	4610      	mov	r0, r2
 801a7e4:	f7f7 fd3a 	bl	801225c <lwip_htons>
 801a7e8:	4603      	mov	r3, r0
 801a7ea:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a7ec:	68bb      	ldr	r3, [r7, #8]
 801a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7f0:	68ba      	ldr	r2, [r7, #8]
 801a7f2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a7f4:	441a      	add	r2, r3
 801a7f6:	68bb      	ldr	r3, [r7, #8]
 801a7f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	68db      	ldr	r3, [r3, #12]
 801a7fe:	3314      	adds	r3, #20
 801a800:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	7a9b      	ldrb	r3, [r3, #10]
 801a806:	f003 0301 	and.w	r3, r3, #1
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d015      	beq.n	801a83a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a80e:	68bb      	ldr	r3, [r7, #8]
 801a810:	3304      	adds	r3, #4
 801a812:	461a      	mov	r2, r3
 801a814:	6879      	ldr	r1, [r7, #4]
 801a816:	f44f 7006 	mov.w	r0, #536	; 0x218
 801a81a:	f7fc fa37 	bl	8016c8c <tcp_eff_send_mss_netif>
 801a81e:	4603      	mov	r3, r0
 801a820:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a822:	8b7b      	ldrh	r3, [r7, #26]
 801a824:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801a828:	4618      	mov	r0, r3
 801a82a:	f7f7 fd2c 	bl	8012286 <lwip_htonl>
 801a82e:	4602      	mov	r2, r0
 801a830:	69fb      	ldr	r3, [r7, #28]
 801a832:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a834:	69fb      	ldr	r3, [r7, #28]
 801a836:	3304      	adds	r3, #4
 801a838:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a83a:	68bb      	ldr	r3, [r7, #8]
 801a83c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a840:	2b00      	cmp	r3, #0
 801a842:	da02      	bge.n	801a84a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a844:	68bb      	ldr	r3, [r7, #8]
 801a846:	2200      	movs	r2, #0
 801a848:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801a84a:	68bb      	ldr	r3, [r7, #8]
 801a84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d10c      	bne.n	801a86c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a852:	4b34      	ldr	r3, [pc, #208]	; (801a924 <tcp_output_segment+0x1b4>)
 801a854:	681a      	ldr	r2, [r3, #0]
 801a856:	68bb      	ldr	r3, [r7, #8]
 801a858:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	68db      	ldr	r3, [r3, #12]
 801a85e:	685b      	ldr	r3, [r3, #4]
 801a860:	4618      	mov	r0, r3
 801a862:	f7f7 fd10 	bl	8012286 <lwip_htonl>
 801a866:	4602      	mov	r2, r0
 801a868:	68bb      	ldr	r3, [r7, #8]
 801a86a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	68da      	ldr	r2, [r3, #12]
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	685b      	ldr	r3, [r3, #4]
 801a874:	685b      	ldr	r3, [r3, #4]
 801a876:	1ad3      	subs	r3, r2, r3
 801a878:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	685b      	ldr	r3, [r3, #4]
 801a87e:	8959      	ldrh	r1, [r3, #10]
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	685b      	ldr	r3, [r3, #4]
 801a884:	8b3a      	ldrh	r2, [r7, #24]
 801a886:	1a8a      	subs	r2, r1, r2
 801a888:	b292      	uxth	r2, r2
 801a88a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	685b      	ldr	r3, [r3, #4]
 801a890:	8919      	ldrh	r1, [r3, #8]
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	685b      	ldr	r3, [r3, #4]
 801a896:	8b3a      	ldrh	r2, [r7, #24]
 801a898:	1a8a      	subs	r2, r1, r2
 801a89a:	b292      	uxth	r2, r2
 801a89c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	685b      	ldr	r3, [r3, #4]
 801a8a2:	68fa      	ldr	r2, [r7, #12]
 801a8a4:	68d2      	ldr	r2, [r2, #12]
 801a8a6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	68db      	ldr	r3, [r3, #12]
 801a8ac:	2200      	movs	r2, #0
 801a8ae:	741a      	strb	r2, [r3, #16]
 801a8b0:	2200      	movs	r2, #0
 801a8b2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	68db      	ldr	r3, [r3, #12]
 801a8b8:	f103 0214 	add.w	r2, r3, #20
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	7a9b      	ldrb	r3, [r3, #10]
 801a8c0:	009b      	lsls	r3, r3, #2
 801a8c2:	f003 0304 	and.w	r3, r3, #4
 801a8c6:	4413      	add	r3, r2
 801a8c8:	69fa      	ldr	r2, [r7, #28]
 801a8ca:	429a      	cmp	r2, r3
 801a8cc:	d006      	beq.n	801a8dc <tcp_output_segment+0x16c>
 801a8ce:	4b10      	ldr	r3, [pc, #64]	; (801a910 <tcp_output_segment+0x1a0>)
 801a8d0:	f240 621c 	movw	r2, #1564	; 0x61c
 801a8d4:	4914      	ldr	r1, [pc, #80]	; (801a928 <tcp_output_segment+0x1b8>)
 801a8d6:	4810      	ldr	r0, [pc, #64]	; (801a918 <tcp_output_segment+0x1a8>)
 801a8d8:	f006 fa78 	bl	8020dcc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	6858      	ldr	r0, [r3, #4]
 801a8e0:	68b9      	ldr	r1, [r7, #8]
 801a8e2:	68bb      	ldr	r3, [r7, #8]
 801a8e4:	1d1c      	adds	r4, r3, #4
 801a8e6:	68bb      	ldr	r3, [r7, #8]
 801a8e8:	7add      	ldrb	r5, [r3, #11]
 801a8ea:	68bb      	ldr	r3, [r7, #8]
 801a8ec:	7a9b      	ldrb	r3, [r3, #10]
 801a8ee:	687a      	ldr	r2, [r7, #4]
 801a8f0:	9202      	str	r2, [sp, #8]
 801a8f2:	2206      	movs	r2, #6
 801a8f4:	9201      	str	r2, [sp, #4]
 801a8f6:	9300      	str	r3, [sp, #0]
 801a8f8:	462b      	mov	r3, r5
 801a8fa:	4622      	mov	r2, r4
 801a8fc:	f004 fd30 	bl	801f360 <ip4_output_if>
 801a900:	4603      	mov	r3, r0
 801a902:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a904:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a908:	4618      	mov	r0, r3
 801a90a:	3720      	adds	r7, #32
 801a90c:	46bd      	mov	sp, r7
 801a90e:	bdb0      	pop	{r4, r5, r7, pc}
 801a910:	08024bcc 	.word	0x08024bcc
 801a914:	08025190 	.word	0x08025190
 801a918:	08024c20 	.word	0x08024c20
 801a91c:	080251b0 	.word	0x080251b0
 801a920:	080251d0 	.word	0x080251d0
 801a924:	20016db4 	.word	0x20016db4
 801a928:	080251f4 	.word	0x080251f4

0801a92c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a92c:	b5b0      	push	{r4, r5, r7, lr}
 801a92e:	b084      	sub	sp, #16
 801a930:	af00      	add	r7, sp, #0
 801a932:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d106      	bne.n	801a948 <tcp_rexmit_rto_prepare+0x1c>
 801a93a:	4b31      	ldr	r3, [pc, #196]	; (801aa00 <tcp_rexmit_rto_prepare+0xd4>)
 801a93c:	f240 6263 	movw	r2, #1635	; 0x663
 801a940:	4930      	ldr	r1, [pc, #192]	; (801aa04 <tcp_rexmit_rto_prepare+0xd8>)
 801a942:	4831      	ldr	r0, [pc, #196]	; (801aa08 <tcp_rexmit_rto_prepare+0xdc>)
 801a944:	f006 fa42 	bl	8020dcc <iprintf>

  if (pcb->unacked == NULL) {
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d102      	bne.n	801a956 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a950:	f06f 0305 	mvn.w	r3, #5
 801a954:	e050      	b.n	801a9f8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a95a:	60fb      	str	r3, [r7, #12]
 801a95c:	e00b      	b.n	801a976 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a95e:	68f8      	ldr	r0, [r7, #12]
 801a960:	f7ff fee6 	bl	801a730 <tcp_output_segment_busy>
 801a964:	4603      	mov	r3, r0
 801a966:	2b00      	cmp	r3, #0
 801a968:	d002      	beq.n	801a970 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a96a:	f06f 0305 	mvn.w	r3, #5
 801a96e:	e043      	b.n	801a9f8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a970:	68fb      	ldr	r3, [r7, #12]
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	60fb      	str	r3, [r7, #12]
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d1ef      	bne.n	801a95e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a97e:	68f8      	ldr	r0, [r7, #12]
 801a980:	f7ff fed6 	bl	801a730 <tcp_output_segment_busy>
 801a984:	4603      	mov	r3, r0
 801a986:	2b00      	cmp	r3, #0
 801a988:	d002      	beq.n	801a990 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a98a:	f06f 0305 	mvn.w	r3, #5
 801a98e:	e033      	b.n	801a9f8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	8b5b      	ldrh	r3, [r3, #26]
 801a9aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a9ae:	b29a      	uxth	r2, r3
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	68db      	ldr	r3, [r3, #12]
 801a9b8:	685b      	ldr	r3, [r3, #4]
 801a9ba:	4618      	mov	r0, r3
 801a9bc:	f7f7 fc63 	bl	8012286 <lwip_htonl>
 801a9c0:	4604      	mov	r4, r0
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	891b      	ldrh	r3, [r3, #8]
 801a9c6:	461d      	mov	r5, r3
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	68db      	ldr	r3, [r3, #12]
 801a9cc:	899b      	ldrh	r3, [r3, #12]
 801a9ce:	b29b      	uxth	r3, r3
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	f7f7 fc43 	bl	801225c <lwip_htons>
 801a9d6:	4603      	mov	r3, r0
 801a9d8:	b2db      	uxtb	r3, r3
 801a9da:	f003 0303 	and.w	r3, r3, #3
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d001      	beq.n	801a9e6 <tcp_rexmit_rto_prepare+0xba>
 801a9e2:	2301      	movs	r3, #1
 801a9e4:	e000      	b.n	801a9e8 <tcp_rexmit_rto_prepare+0xbc>
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	442b      	add	r3, r5
 801a9ea:	18e2      	adds	r2, r4, r3
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801a9f6:	2300      	movs	r3, #0
}
 801a9f8:	4618      	mov	r0, r3
 801a9fa:	3710      	adds	r7, #16
 801a9fc:	46bd      	mov	sp, r7
 801a9fe:	bdb0      	pop	{r4, r5, r7, pc}
 801aa00:	08024bcc 	.word	0x08024bcc
 801aa04:	08025208 	.word	0x08025208
 801aa08:	08024c20 	.word	0x08024c20

0801aa0c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b082      	sub	sp, #8
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d106      	bne.n	801aa28 <tcp_rexmit_rto_commit+0x1c>
 801aa1a:	4b0d      	ldr	r3, [pc, #52]	; (801aa50 <tcp_rexmit_rto_commit+0x44>)
 801aa1c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801aa20:	490c      	ldr	r1, [pc, #48]	; (801aa54 <tcp_rexmit_rto_commit+0x48>)
 801aa22:	480d      	ldr	r0, [pc, #52]	; (801aa58 <tcp_rexmit_rto_commit+0x4c>)
 801aa24:	f006 f9d2 	bl	8020dcc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801aa2e:	2bff      	cmp	r3, #255	; 0xff
 801aa30:	d007      	beq.n	801aa42 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801aa38:	3301      	adds	r3, #1
 801aa3a:	b2da      	uxtb	r2, r3
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801aa42:	6878      	ldr	r0, [r7, #4]
 801aa44:	f7ff fc80 	bl	801a348 <tcp_output>
}
 801aa48:	bf00      	nop
 801aa4a:	3708      	adds	r7, #8
 801aa4c:	46bd      	mov	sp, r7
 801aa4e:	bd80      	pop	{r7, pc}
 801aa50:	08024bcc 	.word	0x08024bcc
 801aa54:	0802522c 	.word	0x0802522c
 801aa58:	08024c20 	.word	0x08024c20

0801aa5c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b082      	sub	sp, #8
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d106      	bne.n	801aa78 <tcp_rexmit_rto+0x1c>
 801aa6a:	4b0a      	ldr	r3, [pc, #40]	; (801aa94 <tcp_rexmit_rto+0x38>)
 801aa6c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801aa70:	4909      	ldr	r1, [pc, #36]	; (801aa98 <tcp_rexmit_rto+0x3c>)
 801aa72:	480a      	ldr	r0, [pc, #40]	; (801aa9c <tcp_rexmit_rto+0x40>)
 801aa74:	f006 f9aa 	bl	8020dcc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801aa78:	6878      	ldr	r0, [r7, #4]
 801aa7a:	f7ff ff57 	bl	801a92c <tcp_rexmit_rto_prepare>
 801aa7e:	4603      	mov	r3, r0
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d102      	bne.n	801aa8a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801aa84:	6878      	ldr	r0, [r7, #4]
 801aa86:	f7ff ffc1 	bl	801aa0c <tcp_rexmit_rto_commit>
  }
}
 801aa8a:	bf00      	nop
 801aa8c:	3708      	adds	r7, #8
 801aa8e:	46bd      	mov	sp, r7
 801aa90:	bd80      	pop	{r7, pc}
 801aa92:	bf00      	nop
 801aa94:	08024bcc 	.word	0x08024bcc
 801aa98:	08025250 	.word	0x08025250
 801aa9c:	08024c20 	.word	0x08024c20

0801aaa0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801aaa0:	b590      	push	{r4, r7, lr}
 801aaa2:	b085      	sub	sp, #20
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d106      	bne.n	801aabc <tcp_rexmit+0x1c>
 801aaae:	4b2f      	ldr	r3, [pc, #188]	; (801ab6c <tcp_rexmit+0xcc>)
 801aab0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801aab4:	492e      	ldr	r1, [pc, #184]	; (801ab70 <tcp_rexmit+0xd0>)
 801aab6:	482f      	ldr	r0, [pc, #188]	; (801ab74 <tcp_rexmit+0xd4>)
 801aab8:	f006 f988 	bl	8020dcc <iprintf>

  if (pcb->unacked == NULL) {
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d102      	bne.n	801aaca <tcp_rexmit+0x2a>
    return ERR_VAL;
 801aac4:	f06f 0305 	mvn.w	r3, #5
 801aac8:	e04c      	b.n	801ab64 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aace:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801aad0:	68b8      	ldr	r0, [r7, #8]
 801aad2:	f7ff fe2d 	bl	801a730 <tcp_output_segment_busy>
 801aad6:	4603      	mov	r3, r0
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d002      	beq.n	801aae2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801aadc:	f06f 0305 	mvn.w	r3, #5
 801aae0:	e040      	b.n	801ab64 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801aae2:	68bb      	ldr	r3, [r7, #8]
 801aae4:	681a      	ldr	r2, [r3, #0]
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	336c      	adds	r3, #108	; 0x6c
 801aaee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801aaf0:	e002      	b.n	801aaf8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d011      	beq.n	801ab24 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	68db      	ldr	r3, [r3, #12]
 801ab06:	685b      	ldr	r3, [r3, #4]
 801ab08:	4618      	mov	r0, r3
 801ab0a:	f7f7 fbbc 	bl	8012286 <lwip_htonl>
 801ab0e:	4604      	mov	r4, r0
 801ab10:	68bb      	ldr	r3, [r7, #8]
 801ab12:	68db      	ldr	r3, [r3, #12]
 801ab14:	685b      	ldr	r3, [r3, #4]
 801ab16:	4618      	mov	r0, r3
 801ab18:	f7f7 fbb5 	bl	8012286 <lwip_htonl>
 801ab1c:	4603      	mov	r3, r0
 801ab1e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	dbe6      	blt.n	801aaf2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	681a      	ldr	r2, [r3, #0]
 801ab28:	68bb      	ldr	r3, [r7, #8]
 801ab2a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	68ba      	ldr	r2, [r7, #8]
 801ab30:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ab32:	68bb      	ldr	r3, [r7, #8]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d103      	bne.n	801ab42 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	2200      	movs	r2, #0
 801ab3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ab48:	2bff      	cmp	r3, #255	; 0xff
 801ab4a:	d007      	beq.n	801ab5c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ab52:	3301      	adds	r3, #1
 801ab54:	b2da      	uxtb	r2, r3
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	2200      	movs	r2, #0
 801ab60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801ab62:	2300      	movs	r3, #0
}
 801ab64:	4618      	mov	r0, r3
 801ab66:	3714      	adds	r7, #20
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	bd90      	pop	{r4, r7, pc}
 801ab6c:	08024bcc 	.word	0x08024bcc
 801ab70:	0802526c 	.word	0x0802526c
 801ab74:	08024c20 	.word	0x08024c20

0801ab78 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b082      	sub	sp, #8
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d106      	bne.n	801ab94 <tcp_rexmit_fast+0x1c>
 801ab86:	4b2a      	ldr	r3, [pc, #168]	; (801ac30 <tcp_rexmit_fast+0xb8>)
 801ab88:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801ab8c:	4929      	ldr	r1, [pc, #164]	; (801ac34 <tcp_rexmit_fast+0xbc>)
 801ab8e:	482a      	ldr	r0, [pc, #168]	; (801ac38 <tcp_rexmit_fast+0xc0>)
 801ab90:	f006 f91c 	bl	8020dcc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d044      	beq.n	801ac26 <tcp_rexmit_fast+0xae>
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	8b5b      	ldrh	r3, [r3, #26]
 801aba0:	f003 0304 	and.w	r3, r3, #4
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d13e      	bne.n	801ac26 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801aba8:	6878      	ldr	r0, [r7, #4]
 801abaa:	f7ff ff79 	bl	801aaa0 <tcp_rexmit>
 801abae:	4603      	mov	r3, r0
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d138      	bne.n	801ac26 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801abc0:	4293      	cmp	r3, r2
 801abc2:	bf28      	it	cs
 801abc4:	4613      	movcs	r3, r2
 801abc6:	b29b      	uxth	r3, r3
 801abc8:	0fda      	lsrs	r2, r3, #31
 801abca:	4413      	add	r3, r2
 801abcc:	105b      	asrs	r3, r3, #1
 801abce:	b29a      	uxth	r2, r3
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801abdc:	461a      	mov	r2, r3
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abe2:	005b      	lsls	r3, r3, #1
 801abe4:	429a      	cmp	r2, r3
 801abe6:	d206      	bcs.n	801abf6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abec:	005b      	lsls	r3, r3, #1
 801abee:	b29a      	uxth	r2, r3
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ac00:	4619      	mov	r1, r3
 801ac02:	0049      	lsls	r1, r1, #1
 801ac04:	440b      	add	r3, r1
 801ac06:	b29b      	uxth	r3, r3
 801ac08:	4413      	add	r3, r2
 801ac0a:	b29a      	uxth	r2, r3
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	8b5b      	ldrh	r3, [r3, #26]
 801ac16:	f043 0304 	orr.w	r3, r3, #4
 801ac1a:	b29a      	uxth	r2, r3
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	2200      	movs	r2, #0
 801ac24:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801ac26:	bf00      	nop
 801ac28:	3708      	adds	r7, #8
 801ac2a:	46bd      	mov	sp, r7
 801ac2c:	bd80      	pop	{r7, pc}
 801ac2e:	bf00      	nop
 801ac30:	08024bcc 	.word	0x08024bcc
 801ac34:	08025284 	.word	0x08025284
 801ac38:	08024c20 	.word	0x08024c20

0801ac3c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b086      	sub	sp, #24
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	60f8      	str	r0, [r7, #12]
 801ac44:	607b      	str	r3, [r7, #4]
 801ac46:	460b      	mov	r3, r1
 801ac48:	817b      	strh	r3, [r7, #10]
 801ac4a:	4613      	mov	r3, r2
 801ac4c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ac4e:	897a      	ldrh	r2, [r7, #10]
 801ac50:	893b      	ldrh	r3, [r7, #8]
 801ac52:	4413      	add	r3, r2
 801ac54:	b29b      	uxth	r3, r3
 801ac56:	3314      	adds	r3, #20
 801ac58:	b29b      	uxth	r3, r3
 801ac5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ac5e:	4619      	mov	r1, r3
 801ac60:	2022      	movs	r0, #34	; 0x22
 801ac62:	f7f9 fba5 	bl	80143b0 <pbuf_alloc>
 801ac66:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ac68:	697b      	ldr	r3, [r7, #20]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d04d      	beq.n	801ad0a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ac6e:	897b      	ldrh	r3, [r7, #10]
 801ac70:	3313      	adds	r3, #19
 801ac72:	697a      	ldr	r2, [r7, #20]
 801ac74:	8952      	ldrh	r2, [r2, #10]
 801ac76:	4293      	cmp	r3, r2
 801ac78:	db06      	blt.n	801ac88 <tcp_output_alloc_header_common+0x4c>
 801ac7a:	4b26      	ldr	r3, [pc, #152]	; (801ad14 <tcp_output_alloc_header_common+0xd8>)
 801ac7c:	f240 7223 	movw	r2, #1827	; 0x723
 801ac80:	4925      	ldr	r1, [pc, #148]	; (801ad18 <tcp_output_alloc_header_common+0xdc>)
 801ac82:	4826      	ldr	r0, [pc, #152]	; (801ad1c <tcp_output_alloc_header_common+0xe0>)
 801ac84:	f006 f8a2 	bl	8020dcc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ac88:	697b      	ldr	r3, [r7, #20]
 801ac8a:	685b      	ldr	r3, [r3, #4]
 801ac8c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ac8e:	8c3b      	ldrh	r3, [r7, #32]
 801ac90:	4618      	mov	r0, r3
 801ac92:	f7f7 fae3 	bl	801225c <lwip_htons>
 801ac96:	4603      	mov	r3, r0
 801ac98:	461a      	mov	r2, r3
 801ac9a:	693b      	ldr	r3, [r7, #16]
 801ac9c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ac9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aca0:	4618      	mov	r0, r3
 801aca2:	f7f7 fadb 	bl	801225c <lwip_htons>
 801aca6:	4603      	mov	r3, r0
 801aca8:	461a      	mov	r2, r3
 801acaa:	693b      	ldr	r3, [r7, #16]
 801acac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801acae:	693b      	ldr	r3, [r7, #16]
 801acb0:	687a      	ldr	r2, [r7, #4]
 801acb2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801acb4:	68f8      	ldr	r0, [r7, #12]
 801acb6:	f7f7 fae6 	bl	8012286 <lwip_htonl>
 801acba:	4602      	mov	r2, r0
 801acbc:	693b      	ldr	r3, [r7, #16]
 801acbe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801acc0:	897b      	ldrh	r3, [r7, #10]
 801acc2:	089b      	lsrs	r3, r3, #2
 801acc4:	b29b      	uxth	r3, r3
 801acc6:	3305      	adds	r3, #5
 801acc8:	b29b      	uxth	r3, r3
 801acca:	031b      	lsls	r3, r3, #12
 801accc:	b29a      	uxth	r2, r3
 801acce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801acd2:	b29b      	uxth	r3, r3
 801acd4:	4313      	orrs	r3, r2
 801acd6:	b29b      	uxth	r3, r3
 801acd8:	4618      	mov	r0, r3
 801acda:	f7f7 fabf 	bl	801225c <lwip_htons>
 801acde:	4603      	mov	r3, r0
 801ace0:	461a      	mov	r2, r3
 801ace2:	693b      	ldr	r3, [r7, #16]
 801ace4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801ace6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ace8:	4618      	mov	r0, r3
 801acea:	f7f7 fab7 	bl	801225c <lwip_htons>
 801acee:	4603      	mov	r3, r0
 801acf0:	461a      	mov	r2, r3
 801acf2:	693b      	ldr	r3, [r7, #16]
 801acf4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801acf6:	693b      	ldr	r3, [r7, #16]
 801acf8:	2200      	movs	r2, #0
 801acfa:	741a      	strb	r2, [r3, #16]
 801acfc:	2200      	movs	r2, #0
 801acfe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801ad00:	693b      	ldr	r3, [r7, #16]
 801ad02:	2200      	movs	r2, #0
 801ad04:	749a      	strb	r2, [r3, #18]
 801ad06:	2200      	movs	r2, #0
 801ad08:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801ad0a:	697b      	ldr	r3, [r7, #20]
}
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	3718      	adds	r7, #24
 801ad10:	46bd      	mov	sp, r7
 801ad12:	bd80      	pop	{r7, pc}
 801ad14:	08024bcc 	.word	0x08024bcc
 801ad18:	080252a4 	.word	0x080252a4
 801ad1c:	08024c20 	.word	0x08024c20

0801ad20 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801ad20:	b5b0      	push	{r4, r5, r7, lr}
 801ad22:	b08a      	sub	sp, #40	; 0x28
 801ad24:	af04      	add	r7, sp, #16
 801ad26:	60f8      	str	r0, [r7, #12]
 801ad28:	607b      	str	r3, [r7, #4]
 801ad2a:	460b      	mov	r3, r1
 801ad2c:	817b      	strh	r3, [r7, #10]
 801ad2e:	4613      	mov	r3, r2
 801ad30:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d106      	bne.n	801ad46 <tcp_output_alloc_header+0x26>
 801ad38:	4b15      	ldr	r3, [pc, #84]	; (801ad90 <tcp_output_alloc_header+0x70>)
 801ad3a:	f240 7242 	movw	r2, #1858	; 0x742
 801ad3e:	4915      	ldr	r1, [pc, #84]	; (801ad94 <tcp_output_alloc_header+0x74>)
 801ad40:	4815      	ldr	r0, [pc, #84]	; (801ad98 <tcp_output_alloc_header+0x78>)
 801ad42:	f006 f843 	bl	8020dcc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	8adb      	ldrh	r3, [r3, #22]
 801ad4e:	68fa      	ldr	r2, [r7, #12]
 801ad50:	8b12      	ldrh	r2, [r2, #24]
 801ad52:	68f9      	ldr	r1, [r7, #12]
 801ad54:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801ad56:	893d      	ldrh	r5, [r7, #8]
 801ad58:	897c      	ldrh	r4, [r7, #10]
 801ad5a:	9103      	str	r1, [sp, #12]
 801ad5c:	2110      	movs	r1, #16
 801ad5e:	9102      	str	r1, [sp, #8]
 801ad60:	9201      	str	r2, [sp, #4]
 801ad62:	9300      	str	r3, [sp, #0]
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	462a      	mov	r2, r5
 801ad68:	4621      	mov	r1, r4
 801ad6a:	f7ff ff67 	bl	801ac3c <tcp_output_alloc_header_common>
 801ad6e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ad70:	697b      	ldr	r3, [r7, #20]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d006      	beq.n	801ad84 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad7a:	68fa      	ldr	r2, [r7, #12]
 801ad7c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ad7e:	441a      	add	r2, r3
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801ad84:	697b      	ldr	r3, [r7, #20]
}
 801ad86:	4618      	mov	r0, r3
 801ad88:	3718      	adds	r7, #24
 801ad8a:	46bd      	mov	sp, r7
 801ad8c:	bdb0      	pop	{r4, r5, r7, pc}
 801ad8e:	bf00      	nop
 801ad90:	08024bcc 	.word	0x08024bcc
 801ad94:	080252d4 	.word	0x080252d4
 801ad98:	08024c20 	.word	0x08024c20

0801ad9c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801ad9c:	b580      	push	{r7, lr}
 801ad9e:	b088      	sub	sp, #32
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	60f8      	str	r0, [r7, #12]
 801ada4:	60b9      	str	r1, [r7, #8]
 801ada6:	4611      	mov	r1, r2
 801ada8:	461a      	mov	r2, r3
 801adaa:	460b      	mov	r3, r1
 801adac:	71fb      	strb	r3, [r7, #7]
 801adae:	4613      	mov	r3, r2
 801adb0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801adb2:	2300      	movs	r3, #0
 801adb4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801adb6:	68bb      	ldr	r3, [r7, #8]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d106      	bne.n	801adca <tcp_output_fill_options+0x2e>
 801adbc:	4b13      	ldr	r3, [pc, #76]	; (801ae0c <tcp_output_fill_options+0x70>)
 801adbe:	f240 7256 	movw	r2, #1878	; 0x756
 801adc2:	4913      	ldr	r1, [pc, #76]	; (801ae10 <tcp_output_fill_options+0x74>)
 801adc4:	4813      	ldr	r0, [pc, #76]	; (801ae14 <tcp_output_fill_options+0x78>)
 801adc6:	f006 f801 	bl	8020dcc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801adca:	68bb      	ldr	r3, [r7, #8]
 801adcc:	685b      	ldr	r3, [r3, #4]
 801adce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801add0:	69bb      	ldr	r3, [r7, #24]
 801add2:	3314      	adds	r3, #20
 801add4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801add6:	69bb      	ldr	r3, [r7, #24]
 801add8:	f103 0214 	add.w	r2, r3, #20
 801addc:	8bfb      	ldrh	r3, [r7, #30]
 801adde:	009b      	lsls	r3, r3, #2
 801ade0:	4619      	mov	r1, r3
 801ade2:	79fb      	ldrb	r3, [r7, #7]
 801ade4:	009b      	lsls	r3, r3, #2
 801ade6:	f003 0304 	and.w	r3, r3, #4
 801adea:	440b      	add	r3, r1
 801adec:	4413      	add	r3, r2
 801adee:	697a      	ldr	r2, [r7, #20]
 801adf0:	429a      	cmp	r2, r3
 801adf2:	d006      	beq.n	801ae02 <tcp_output_fill_options+0x66>
 801adf4:	4b05      	ldr	r3, [pc, #20]	; (801ae0c <tcp_output_fill_options+0x70>)
 801adf6:	f240 7275 	movw	r2, #1909	; 0x775
 801adfa:	4907      	ldr	r1, [pc, #28]	; (801ae18 <tcp_output_fill_options+0x7c>)
 801adfc:	4805      	ldr	r0, [pc, #20]	; (801ae14 <tcp_output_fill_options+0x78>)
 801adfe:	f005 ffe5 	bl	8020dcc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801ae02:	bf00      	nop
 801ae04:	3720      	adds	r7, #32
 801ae06:	46bd      	mov	sp, r7
 801ae08:	bd80      	pop	{r7, pc}
 801ae0a:	bf00      	nop
 801ae0c:	08024bcc 	.word	0x08024bcc
 801ae10:	080252fc 	.word	0x080252fc
 801ae14:	08024c20 	.word	0x08024c20
 801ae18:	080251f4 	.word	0x080251f4

0801ae1c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b08a      	sub	sp, #40	; 0x28
 801ae20:	af04      	add	r7, sp, #16
 801ae22:	60f8      	str	r0, [r7, #12]
 801ae24:	60b9      	str	r1, [r7, #8]
 801ae26:	607a      	str	r2, [r7, #4]
 801ae28:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ae2a:	68bb      	ldr	r3, [r7, #8]
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d106      	bne.n	801ae3e <tcp_output_control_segment+0x22>
 801ae30:	4b1c      	ldr	r3, [pc, #112]	; (801aea4 <tcp_output_control_segment+0x88>)
 801ae32:	f240 7287 	movw	r2, #1927	; 0x787
 801ae36:	491c      	ldr	r1, [pc, #112]	; (801aea8 <tcp_output_control_segment+0x8c>)
 801ae38:	481c      	ldr	r0, [pc, #112]	; (801aeac <tcp_output_control_segment+0x90>)
 801ae3a:	f005 ffc7 	bl	8020dcc <iprintf>

  netif = tcp_route(pcb, src, dst);
 801ae3e:	683a      	ldr	r2, [r7, #0]
 801ae40:	6879      	ldr	r1, [r7, #4]
 801ae42:	68f8      	ldr	r0, [r7, #12]
 801ae44:	f7fe fae8 	bl	8019418 <tcp_route>
 801ae48:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801ae4a:	693b      	ldr	r3, [r7, #16]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d102      	bne.n	801ae56 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801ae50:	23fc      	movs	r3, #252	; 0xfc
 801ae52:	75fb      	strb	r3, [r7, #23]
 801ae54:	e01c      	b.n	801ae90 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d006      	beq.n	801ae6a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	7adb      	ldrb	r3, [r3, #11]
 801ae60:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	7a9b      	ldrb	r3, [r3, #10]
 801ae66:	757b      	strb	r3, [r7, #21]
 801ae68:	e003      	b.n	801ae72 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801ae6a:	23ff      	movs	r3, #255	; 0xff
 801ae6c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801ae6e:	2300      	movs	r3, #0
 801ae70:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801ae72:	7dba      	ldrb	r2, [r7, #22]
 801ae74:	693b      	ldr	r3, [r7, #16]
 801ae76:	9302      	str	r3, [sp, #8]
 801ae78:	2306      	movs	r3, #6
 801ae7a:	9301      	str	r3, [sp, #4]
 801ae7c:	7d7b      	ldrb	r3, [r7, #21]
 801ae7e:	9300      	str	r3, [sp, #0]
 801ae80:	4613      	mov	r3, r2
 801ae82:	683a      	ldr	r2, [r7, #0]
 801ae84:	6879      	ldr	r1, [r7, #4]
 801ae86:	68b8      	ldr	r0, [r7, #8]
 801ae88:	f004 fa6a 	bl	801f360 <ip4_output_if>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801ae90:	68b8      	ldr	r0, [r7, #8]
 801ae92:	f7f9 fd71 	bl	8014978 <pbuf_free>
  return err;
 801ae96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	3718      	adds	r7, #24
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}
 801aea2:	bf00      	nop
 801aea4:	08024bcc 	.word	0x08024bcc
 801aea8:	08025324 	.word	0x08025324
 801aeac:	08024c20 	.word	0x08024c20

0801aeb0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801aeb0:	b590      	push	{r4, r7, lr}
 801aeb2:	b08b      	sub	sp, #44	; 0x2c
 801aeb4:	af04      	add	r7, sp, #16
 801aeb6:	60f8      	str	r0, [r7, #12]
 801aeb8:	60b9      	str	r1, [r7, #8]
 801aeba:	607a      	str	r2, [r7, #4]
 801aebc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801aebe:	683b      	ldr	r3, [r7, #0]
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d106      	bne.n	801aed2 <tcp_rst+0x22>
 801aec4:	4b1f      	ldr	r3, [pc, #124]	; (801af44 <tcp_rst+0x94>)
 801aec6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801aeca:	491f      	ldr	r1, [pc, #124]	; (801af48 <tcp_rst+0x98>)
 801aecc:	481f      	ldr	r0, [pc, #124]	; (801af4c <tcp_rst+0x9c>)
 801aece:	f005 ff7d 	bl	8020dcc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d106      	bne.n	801aee6 <tcp_rst+0x36>
 801aed8:	4b1a      	ldr	r3, [pc, #104]	; (801af44 <tcp_rst+0x94>)
 801aeda:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801aede:	491c      	ldr	r1, [pc, #112]	; (801af50 <tcp_rst+0xa0>)
 801aee0:	481a      	ldr	r0, [pc, #104]	; (801af4c <tcp_rst+0x9c>)
 801aee2:	f005 ff73 	bl	8020dcc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801aee6:	2300      	movs	r3, #0
 801aee8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801aeea:	f246 0308 	movw	r3, #24584	; 0x6008
 801aeee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801aef0:	7dfb      	ldrb	r3, [r7, #23]
 801aef2:	b29c      	uxth	r4, r3
 801aef4:	68b8      	ldr	r0, [r7, #8]
 801aef6:	f7f7 f9c6 	bl	8012286 <lwip_htonl>
 801aefa:	4602      	mov	r2, r0
 801aefc:	8abb      	ldrh	r3, [r7, #20]
 801aefe:	9303      	str	r3, [sp, #12]
 801af00:	2314      	movs	r3, #20
 801af02:	9302      	str	r3, [sp, #8]
 801af04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801af06:	9301      	str	r3, [sp, #4]
 801af08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801af0a:	9300      	str	r3, [sp, #0]
 801af0c:	4613      	mov	r3, r2
 801af0e:	2200      	movs	r2, #0
 801af10:	4621      	mov	r1, r4
 801af12:	6878      	ldr	r0, [r7, #4]
 801af14:	f7ff fe92 	bl	801ac3c <tcp_output_alloc_header_common>
 801af18:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801af1a:	693b      	ldr	r3, [r7, #16]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d00c      	beq.n	801af3a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801af20:	7dfb      	ldrb	r3, [r7, #23]
 801af22:	2200      	movs	r2, #0
 801af24:	6939      	ldr	r1, [r7, #16]
 801af26:	68f8      	ldr	r0, [r7, #12]
 801af28:	f7ff ff38 	bl	801ad9c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af2e:	683a      	ldr	r2, [r7, #0]
 801af30:	6939      	ldr	r1, [r7, #16]
 801af32:	68f8      	ldr	r0, [r7, #12]
 801af34:	f7ff ff72 	bl	801ae1c <tcp_output_control_segment>
 801af38:	e000      	b.n	801af3c <tcp_rst+0x8c>
    return;
 801af3a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801af3c:	371c      	adds	r7, #28
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd90      	pop	{r4, r7, pc}
 801af42:	bf00      	nop
 801af44:	08024bcc 	.word	0x08024bcc
 801af48:	08025350 	.word	0x08025350
 801af4c:	08024c20 	.word	0x08024c20
 801af50:	0802536c 	.word	0x0802536c

0801af54 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801af54:	b590      	push	{r4, r7, lr}
 801af56:	b087      	sub	sp, #28
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801af5c:	2300      	movs	r3, #0
 801af5e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801af60:	2300      	movs	r3, #0
 801af62:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d106      	bne.n	801af78 <tcp_send_empty_ack+0x24>
 801af6a:	4b28      	ldr	r3, [pc, #160]	; (801b00c <tcp_send_empty_ack+0xb8>)
 801af6c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801af70:	4927      	ldr	r1, [pc, #156]	; (801b010 <tcp_send_empty_ack+0xbc>)
 801af72:	4828      	ldr	r0, [pc, #160]	; (801b014 <tcp_send_empty_ack+0xc0>)
 801af74:	f005 ff2a 	bl	8020dcc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801af78:	7dfb      	ldrb	r3, [r7, #23]
 801af7a:	009b      	lsls	r3, r3, #2
 801af7c:	b2db      	uxtb	r3, r3
 801af7e:	f003 0304 	and.w	r3, r3, #4
 801af82:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801af84:	7d7b      	ldrb	r3, [r7, #21]
 801af86:	b29c      	uxth	r4, r3
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801af8c:	4618      	mov	r0, r3
 801af8e:	f7f7 f97a 	bl	8012286 <lwip_htonl>
 801af92:	4603      	mov	r3, r0
 801af94:	2200      	movs	r2, #0
 801af96:	4621      	mov	r1, r4
 801af98:	6878      	ldr	r0, [r7, #4]
 801af9a:	f7ff fec1 	bl	801ad20 <tcp_output_alloc_header>
 801af9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801afa0:	693b      	ldr	r3, [r7, #16]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d109      	bne.n	801afba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	8b5b      	ldrh	r3, [r3, #26]
 801afaa:	f043 0303 	orr.w	r3, r3, #3
 801afae:	b29a      	uxth	r2, r3
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801afb4:	f06f 0301 	mvn.w	r3, #1
 801afb8:	e023      	b.n	801b002 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801afba:	7dbb      	ldrb	r3, [r7, #22]
 801afbc:	7dfa      	ldrb	r2, [r7, #23]
 801afbe:	6939      	ldr	r1, [r7, #16]
 801afc0:	6878      	ldr	r0, [r7, #4]
 801afc2:	f7ff feeb 	bl	801ad9c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801afc6:	687a      	ldr	r2, [r7, #4]
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	3304      	adds	r3, #4
 801afcc:	6939      	ldr	r1, [r7, #16]
 801afce:	6878      	ldr	r0, [r7, #4]
 801afd0:	f7ff ff24 	bl	801ae1c <tcp_output_control_segment>
 801afd4:	4603      	mov	r3, r0
 801afd6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801afd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d007      	beq.n	801aff0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	8b5b      	ldrh	r3, [r3, #26]
 801afe4:	f043 0303 	orr.w	r3, r3, #3
 801afe8:	b29a      	uxth	r2, r3
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	835a      	strh	r2, [r3, #26]
 801afee:	e006      	b.n	801affe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	8b5b      	ldrh	r3, [r3, #26]
 801aff4:	f023 0303 	bic.w	r3, r3, #3
 801aff8:	b29a      	uxth	r2, r3
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801affe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b002:	4618      	mov	r0, r3
 801b004:	371c      	adds	r7, #28
 801b006:	46bd      	mov	sp, r7
 801b008:	bd90      	pop	{r4, r7, pc}
 801b00a:	bf00      	nop
 801b00c:	08024bcc 	.word	0x08024bcc
 801b010:	08025388 	.word	0x08025388
 801b014:	08024c20 	.word	0x08024c20

0801b018 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b018:	b590      	push	{r4, r7, lr}
 801b01a:	b087      	sub	sp, #28
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b020:	2300      	movs	r3, #0
 801b022:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d106      	bne.n	801b038 <tcp_keepalive+0x20>
 801b02a:	4b18      	ldr	r3, [pc, #96]	; (801b08c <tcp_keepalive+0x74>)
 801b02c:	f640 0224 	movw	r2, #2084	; 0x824
 801b030:	4917      	ldr	r1, [pc, #92]	; (801b090 <tcp_keepalive+0x78>)
 801b032:	4818      	ldr	r0, [pc, #96]	; (801b094 <tcp_keepalive+0x7c>)
 801b034:	f005 feca 	bl	8020dcc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b038:	7dfb      	ldrb	r3, [r7, #23]
 801b03a:	b29c      	uxth	r4, r3
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b040:	3b01      	subs	r3, #1
 801b042:	4618      	mov	r0, r3
 801b044:	f7f7 f91f 	bl	8012286 <lwip_htonl>
 801b048:	4603      	mov	r3, r0
 801b04a:	2200      	movs	r2, #0
 801b04c:	4621      	mov	r1, r4
 801b04e:	6878      	ldr	r0, [r7, #4]
 801b050:	f7ff fe66 	bl	801ad20 <tcp_output_alloc_header>
 801b054:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b056:	693b      	ldr	r3, [r7, #16]
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d102      	bne.n	801b062 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b05c:	f04f 33ff 	mov.w	r3, #4294967295
 801b060:	e010      	b.n	801b084 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b062:	7dfb      	ldrb	r3, [r7, #23]
 801b064:	2200      	movs	r2, #0
 801b066:	6939      	ldr	r1, [r7, #16]
 801b068:	6878      	ldr	r0, [r7, #4]
 801b06a:	f7ff fe97 	bl	801ad9c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b06e:	687a      	ldr	r2, [r7, #4]
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	3304      	adds	r3, #4
 801b074:	6939      	ldr	r1, [r7, #16]
 801b076:	6878      	ldr	r0, [r7, #4]
 801b078:	f7ff fed0 	bl	801ae1c <tcp_output_control_segment>
 801b07c:	4603      	mov	r3, r0
 801b07e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b080:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b084:	4618      	mov	r0, r3
 801b086:	371c      	adds	r7, #28
 801b088:	46bd      	mov	sp, r7
 801b08a:	bd90      	pop	{r4, r7, pc}
 801b08c:	08024bcc 	.word	0x08024bcc
 801b090:	080253a8 	.word	0x080253a8
 801b094:	08024c20 	.word	0x08024c20

0801b098 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b098:	b590      	push	{r4, r7, lr}
 801b09a:	b08b      	sub	sp, #44	; 0x2c
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d106      	bne.n	801b0ba <tcp_zero_window_probe+0x22>
 801b0ac:	4b4c      	ldr	r3, [pc, #304]	; (801b1e0 <tcp_zero_window_probe+0x148>)
 801b0ae:	f640 024f 	movw	r2, #2127	; 0x84f
 801b0b2:	494c      	ldr	r1, [pc, #304]	; (801b1e4 <tcp_zero_window_probe+0x14c>)
 801b0b4:	484c      	ldr	r0, [pc, #304]	; (801b1e8 <tcp_zero_window_probe+0x150>)
 801b0b6:	f005 fe89 	bl	8020dcc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0be:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b0c0:	6a3b      	ldr	r3, [r7, #32]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d101      	bne.n	801b0ca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	e086      	b.n	801b1d8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b0d0:	2bff      	cmp	r3, #255	; 0xff
 801b0d2:	d007      	beq.n	801b0e4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b0da:	3301      	adds	r3, #1
 801b0dc:	b2da      	uxtb	r2, r3
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b0e4:	6a3b      	ldr	r3, [r7, #32]
 801b0e6:	68db      	ldr	r3, [r3, #12]
 801b0e8:	899b      	ldrh	r3, [r3, #12]
 801b0ea:	b29b      	uxth	r3, r3
 801b0ec:	4618      	mov	r0, r3
 801b0ee:	f7f7 f8b5 	bl	801225c <lwip_htons>
 801b0f2:	4603      	mov	r3, r0
 801b0f4:	b2db      	uxtb	r3, r3
 801b0f6:	f003 0301 	and.w	r3, r3, #1
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d005      	beq.n	801b10a <tcp_zero_window_probe+0x72>
 801b0fe:	6a3b      	ldr	r3, [r7, #32]
 801b100:	891b      	ldrh	r3, [r3, #8]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d101      	bne.n	801b10a <tcp_zero_window_probe+0x72>
 801b106:	2301      	movs	r3, #1
 801b108:	e000      	b.n	801b10c <tcp_zero_window_probe+0x74>
 801b10a:	2300      	movs	r3, #0
 801b10c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b10e:	7ffb      	ldrb	r3, [r7, #31]
 801b110:	2b00      	cmp	r3, #0
 801b112:	bf0c      	ite	eq
 801b114:	2301      	moveq	r3, #1
 801b116:	2300      	movne	r3, #0
 801b118:	b2db      	uxtb	r3, r3
 801b11a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b120:	b299      	uxth	r1, r3
 801b122:	6a3b      	ldr	r3, [r7, #32]
 801b124:	68db      	ldr	r3, [r3, #12]
 801b126:	685b      	ldr	r3, [r3, #4]
 801b128:	8bba      	ldrh	r2, [r7, #28]
 801b12a:	6878      	ldr	r0, [r7, #4]
 801b12c:	f7ff fdf8 	bl	801ad20 <tcp_output_alloc_header>
 801b130:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b132:	69bb      	ldr	r3, [r7, #24]
 801b134:	2b00      	cmp	r3, #0
 801b136:	d102      	bne.n	801b13e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b138:	f04f 33ff 	mov.w	r3, #4294967295
 801b13c:	e04c      	b.n	801b1d8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b13e:	69bb      	ldr	r3, [r7, #24]
 801b140:	685b      	ldr	r3, [r3, #4]
 801b142:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b144:	7ffb      	ldrb	r3, [r7, #31]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d011      	beq.n	801b16e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b14a:	697b      	ldr	r3, [r7, #20]
 801b14c:	899b      	ldrh	r3, [r3, #12]
 801b14e:	b29b      	uxth	r3, r3
 801b150:	b21b      	sxth	r3, r3
 801b152:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b156:	b21c      	sxth	r4, r3
 801b158:	2011      	movs	r0, #17
 801b15a:	f7f7 f87f 	bl	801225c <lwip_htons>
 801b15e:	4603      	mov	r3, r0
 801b160:	b21b      	sxth	r3, r3
 801b162:	4323      	orrs	r3, r4
 801b164:	b21b      	sxth	r3, r3
 801b166:	b29a      	uxth	r2, r3
 801b168:	697b      	ldr	r3, [r7, #20]
 801b16a:	819a      	strh	r2, [r3, #12]
 801b16c:	e010      	b.n	801b190 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b16e:	69bb      	ldr	r3, [r7, #24]
 801b170:	685b      	ldr	r3, [r3, #4]
 801b172:	3314      	adds	r3, #20
 801b174:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b176:	6a3b      	ldr	r3, [r7, #32]
 801b178:	6858      	ldr	r0, [r3, #4]
 801b17a:	6a3b      	ldr	r3, [r7, #32]
 801b17c:	685b      	ldr	r3, [r3, #4]
 801b17e:	891a      	ldrh	r2, [r3, #8]
 801b180:	6a3b      	ldr	r3, [r7, #32]
 801b182:	891b      	ldrh	r3, [r3, #8]
 801b184:	1ad3      	subs	r3, r2, r3
 801b186:	b29b      	uxth	r3, r3
 801b188:	2201      	movs	r2, #1
 801b18a:	6939      	ldr	r1, [r7, #16]
 801b18c:	f7f9 fdfa 	bl	8014d84 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b190:	6a3b      	ldr	r3, [r7, #32]
 801b192:	68db      	ldr	r3, [r3, #12]
 801b194:	685b      	ldr	r3, [r3, #4]
 801b196:	4618      	mov	r0, r3
 801b198:	f7f7 f875 	bl	8012286 <lwip_htonl>
 801b19c:	4603      	mov	r3, r0
 801b19e:	3301      	adds	r3, #1
 801b1a0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	1ad3      	subs	r3, r2, r3
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	da02      	bge.n	801b1b4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	68fa      	ldr	r2, [r7, #12]
 801b1b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b1b8:	2200      	movs	r2, #0
 801b1ba:	69b9      	ldr	r1, [r7, #24]
 801b1bc:	6878      	ldr	r0, [r7, #4]
 801b1be:	f7ff fded 	bl	801ad9c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b1c2:	687a      	ldr	r2, [r7, #4]
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	3304      	adds	r3, #4
 801b1c8:	69b9      	ldr	r1, [r7, #24]
 801b1ca:	6878      	ldr	r0, [r7, #4]
 801b1cc:	f7ff fe26 	bl	801ae1c <tcp_output_control_segment>
 801b1d0:	4603      	mov	r3, r0
 801b1d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b1d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b1d8:	4618      	mov	r0, r3
 801b1da:	372c      	adds	r7, #44	; 0x2c
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	bd90      	pop	{r4, r7, pc}
 801b1e0:	08024bcc 	.word	0x08024bcc
 801b1e4:	080253c4 	.word	0x080253c4
 801b1e8:	08024c20 	.word	0x08024c20

0801b1ec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b082      	sub	sp, #8
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b1f4:	f7fa f830 	bl	8015258 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b1f8:	4b0a      	ldr	r3, [pc, #40]	; (801b224 <tcpip_tcp_timer+0x38>)
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d103      	bne.n	801b208 <tcpip_tcp_timer+0x1c>
 801b200:	4b09      	ldr	r3, [pc, #36]	; (801b228 <tcpip_tcp_timer+0x3c>)
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	2b00      	cmp	r3, #0
 801b206:	d005      	beq.n	801b214 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b208:	2200      	movs	r2, #0
 801b20a:	4908      	ldr	r1, [pc, #32]	; (801b22c <tcpip_tcp_timer+0x40>)
 801b20c:	20fa      	movs	r0, #250	; 0xfa
 801b20e:	f000 f8f3 	bl	801b3f8 <sys_timeout>
 801b212:	e003      	b.n	801b21c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b214:	4b06      	ldr	r3, [pc, #24]	; (801b230 <tcpip_tcp_timer+0x44>)
 801b216:	2200      	movs	r2, #0
 801b218:	601a      	str	r2, [r3, #0]
  }
}
 801b21a:	bf00      	nop
 801b21c:	bf00      	nop
 801b21e:	3708      	adds	r7, #8
 801b220:	46bd      	mov	sp, r7
 801b222:	bd80      	pop	{r7, pc}
 801b224:	20016db0 	.word	0x20016db0
 801b228:	20016dc0 	.word	0x20016dc0
 801b22c:	0801b1ed 	.word	0x0801b1ed
 801b230:	20005728 	.word	0x20005728

0801b234 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b234:	b580      	push	{r7, lr}
 801b236:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b238:	4b0a      	ldr	r3, [pc, #40]	; (801b264 <tcp_timer_needed+0x30>)
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d10f      	bne.n	801b260 <tcp_timer_needed+0x2c>
 801b240:	4b09      	ldr	r3, [pc, #36]	; (801b268 <tcp_timer_needed+0x34>)
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	2b00      	cmp	r3, #0
 801b246:	d103      	bne.n	801b250 <tcp_timer_needed+0x1c>
 801b248:	4b08      	ldr	r3, [pc, #32]	; (801b26c <tcp_timer_needed+0x38>)
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d007      	beq.n	801b260 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b250:	4b04      	ldr	r3, [pc, #16]	; (801b264 <tcp_timer_needed+0x30>)
 801b252:	2201      	movs	r2, #1
 801b254:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b256:	2200      	movs	r2, #0
 801b258:	4905      	ldr	r1, [pc, #20]	; (801b270 <tcp_timer_needed+0x3c>)
 801b25a:	20fa      	movs	r0, #250	; 0xfa
 801b25c:	f000 f8cc 	bl	801b3f8 <sys_timeout>
  }
}
 801b260:	bf00      	nop
 801b262:	bd80      	pop	{r7, pc}
 801b264:	20005728 	.word	0x20005728
 801b268:	20016db0 	.word	0x20016db0
 801b26c:	20016dc0 	.word	0x20016dc0
 801b270:	0801b1ed 	.word	0x0801b1ed

0801b274 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b274:	b580      	push	{r7, lr}
 801b276:	b086      	sub	sp, #24
 801b278:	af00      	add	r7, sp, #0
 801b27a:	60f8      	str	r0, [r7, #12]
 801b27c:	60b9      	str	r1, [r7, #8]
 801b27e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b280:	200a      	movs	r0, #10
 801b282:	f7f8 fc77 	bl	8013b74 <memp_malloc>
 801b286:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b288:	693b      	ldr	r3, [r7, #16]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d109      	bne.n	801b2a2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b28e:	693b      	ldr	r3, [r7, #16]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d151      	bne.n	801b338 <sys_timeout_abs+0xc4>
 801b294:	4b2a      	ldr	r3, [pc, #168]	; (801b340 <sys_timeout_abs+0xcc>)
 801b296:	22be      	movs	r2, #190	; 0xbe
 801b298:	492a      	ldr	r1, [pc, #168]	; (801b344 <sys_timeout_abs+0xd0>)
 801b29a:	482b      	ldr	r0, [pc, #172]	; (801b348 <sys_timeout_abs+0xd4>)
 801b29c:	f005 fd96 	bl	8020dcc <iprintf>
    return;
 801b2a0:	e04a      	b.n	801b338 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b2a2:	693b      	ldr	r3, [r7, #16]
 801b2a4:	2200      	movs	r2, #0
 801b2a6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b2a8:	693b      	ldr	r3, [r7, #16]
 801b2aa:	68ba      	ldr	r2, [r7, #8]
 801b2ac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b2ae:	693b      	ldr	r3, [r7, #16]
 801b2b0:	687a      	ldr	r2, [r7, #4]
 801b2b2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b2b4:	693b      	ldr	r3, [r7, #16]
 801b2b6:	68fa      	ldr	r2, [r7, #12]
 801b2b8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b2ba:	4b24      	ldr	r3, [pc, #144]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d103      	bne.n	801b2ca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b2c2:	4a22      	ldr	r2, [pc, #136]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2c4:	693b      	ldr	r3, [r7, #16]
 801b2c6:	6013      	str	r3, [r2, #0]
    return;
 801b2c8:	e037      	b.n	801b33a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b2ca:	693b      	ldr	r3, [r7, #16]
 801b2cc:	685a      	ldr	r2, [r3, #4]
 801b2ce:	4b1f      	ldr	r3, [pc, #124]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	685b      	ldr	r3, [r3, #4]
 801b2d4:	1ad3      	subs	r3, r2, r3
 801b2d6:	0fdb      	lsrs	r3, r3, #31
 801b2d8:	f003 0301 	and.w	r3, r3, #1
 801b2dc:	b2db      	uxtb	r3, r3
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d007      	beq.n	801b2f2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b2e2:	4b1a      	ldr	r3, [pc, #104]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2e4:	681a      	ldr	r2, [r3, #0]
 801b2e6:	693b      	ldr	r3, [r7, #16]
 801b2e8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b2ea:	4a18      	ldr	r2, [pc, #96]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2ec:	693b      	ldr	r3, [r7, #16]
 801b2ee:	6013      	str	r3, [r2, #0]
 801b2f0:	e023      	b.n	801b33a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b2f2:	4b16      	ldr	r3, [pc, #88]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	617b      	str	r3, [r7, #20]
 801b2f8:	e01a      	b.n	801b330 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b2fa:	697b      	ldr	r3, [r7, #20]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d00b      	beq.n	801b31a <sys_timeout_abs+0xa6>
 801b302:	693b      	ldr	r3, [r7, #16]
 801b304:	685a      	ldr	r2, [r3, #4]
 801b306:	697b      	ldr	r3, [r7, #20]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	685b      	ldr	r3, [r3, #4]
 801b30c:	1ad3      	subs	r3, r2, r3
 801b30e:	0fdb      	lsrs	r3, r3, #31
 801b310:	f003 0301 	and.w	r3, r3, #1
 801b314:	b2db      	uxtb	r3, r3
 801b316:	2b00      	cmp	r3, #0
 801b318:	d007      	beq.n	801b32a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b31a:	697b      	ldr	r3, [r7, #20]
 801b31c:	681a      	ldr	r2, [r3, #0]
 801b31e:	693b      	ldr	r3, [r7, #16]
 801b320:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b322:	697b      	ldr	r3, [r7, #20]
 801b324:	693a      	ldr	r2, [r7, #16]
 801b326:	601a      	str	r2, [r3, #0]
        break;
 801b328:	e007      	b.n	801b33a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b32a:	697b      	ldr	r3, [r7, #20]
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	617b      	str	r3, [r7, #20]
 801b330:	697b      	ldr	r3, [r7, #20]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d1e1      	bne.n	801b2fa <sys_timeout_abs+0x86>
 801b336:	e000      	b.n	801b33a <sys_timeout_abs+0xc6>
    return;
 801b338:	bf00      	nop
      }
    }
  }
}
 801b33a:	3718      	adds	r7, #24
 801b33c:	46bd      	mov	sp, r7
 801b33e:	bd80      	pop	{r7, pc}
 801b340:	080253e8 	.word	0x080253e8
 801b344:	0802541c 	.word	0x0802541c
 801b348:	0802545c 	.word	0x0802545c
 801b34c:	20005720 	.word	0x20005720

0801b350 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b350:	b580      	push	{r7, lr}
 801b352:	b086      	sub	sp, #24
 801b354:	af00      	add	r7, sp, #0
 801b356:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b35c:	697b      	ldr	r3, [r7, #20]
 801b35e:	685b      	ldr	r3, [r3, #4]
 801b360:	4798      	blx	r3

  now = sys_now();
 801b362:	f7ef fe3b 	bl	800afdc <sys_now>
 801b366:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b368:	697b      	ldr	r3, [r7, #20]
 801b36a:	681a      	ldr	r2, [r3, #0]
 801b36c:	4b0f      	ldr	r3, [pc, #60]	; (801b3ac <lwip_cyclic_timer+0x5c>)
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	4413      	add	r3, r2
 801b372:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b374:	68fa      	ldr	r2, [r7, #12]
 801b376:	693b      	ldr	r3, [r7, #16]
 801b378:	1ad3      	subs	r3, r2, r3
 801b37a:	0fdb      	lsrs	r3, r3, #31
 801b37c:	f003 0301 	and.w	r3, r3, #1
 801b380:	b2db      	uxtb	r3, r3
 801b382:	2b00      	cmp	r3, #0
 801b384:	d009      	beq.n	801b39a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b386:	697b      	ldr	r3, [r7, #20]
 801b388:	681a      	ldr	r2, [r3, #0]
 801b38a:	693b      	ldr	r3, [r7, #16]
 801b38c:	4413      	add	r3, r2
 801b38e:	687a      	ldr	r2, [r7, #4]
 801b390:	4907      	ldr	r1, [pc, #28]	; (801b3b0 <lwip_cyclic_timer+0x60>)
 801b392:	4618      	mov	r0, r3
 801b394:	f7ff ff6e 	bl	801b274 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b398:	e004      	b.n	801b3a4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b39a:	687a      	ldr	r2, [r7, #4]
 801b39c:	4904      	ldr	r1, [pc, #16]	; (801b3b0 <lwip_cyclic_timer+0x60>)
 801b39e:	68f8      	ldr	r0, [r7, #12]
 801b3a0:	f7ff ff68 	bl	801b274 <sys_timeout_abs>
}
 801b3a4:	bf00      	nop
 801b3a6:	3718      	adds	r7, #24
 801b3a8:	46bd      	mov	sp, r7
 801b3aa:	bd80      	pop	{r7, pc}
 801b3ac:	20005724 	.word	0x20005724
 801b3b0:	0801b351 	.word	0x0801b351

0801b3b4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	b082      	sub	sp, #8
 801b3b8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b3ba:	2301      	movs	r3, #1
 801b3bc:	607b      	str	r3, [r7, #4]
 801b3be:	e00e      	b.n	801b3de <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b3c0:	4a0b      	ldr	r2, [pc, #44]	; (801b3f0 <sys_timeouts_init+0x3c>)
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	00db      	lsls	r3, r3, #3
 801b3cc:	4a08      	ldr	r2, [pc, #32]	; (801b3f0 <sys_timeouts_init+0x3c>)
 801b3ce:	4413      	add	r3, r2
 801b3d0:	461a      	mov	r2, r3
 801b3d2:	4908      	ldr	r1, [pc, #32]	; (801b3f4 <sys_timeouts_init+0x40>)
 801b3d4:	f000 f810 	bl	801b3f8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	3301      	adds	r3, #1
 801b3dc:	607b      	str	r3, [r7, #4]
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	2b05      	cmp	r3, #5
 801b3e2:	d9ed      	bls.n	801b3c0 <sys_timeouts_init+0xc>
  }
}
 801b3e4:	bf00      	nop
 801b3e6:	bf00      	nop
 801b3e8:	3708      	adds	r7, #8
 801b3ea:	46bd      	mov	sp, r7
 801b3ec:	bd80      	pop	{r7, pc}
 801b3ee:	bf00      	nop
 801b3f0:	08026654 	.word	0x08026654
 801b3f4:	0801b351 	.word	0x0801b351

0801b3f8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b3f8:	b580      	push	{r7, lr}
 801b3fa:	b086      	sub	sp, #24
 801b3fc:	af00      	add	r7, sp, #0
 801b3fe:	60f8      	str	r0, [r7, #12]
 801b400:	60b9      	str	r1, [r7, #8]
 801b402:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b40a:	d306      	bcc.n	801b41a <sys_timeout+0x22>
 801b40c:	4b0a      	ldr	r3, [pc, #40]	; (801b438 <sys_timeout+0x40>)
 801b40e:	f240 1229 	movw	r2, #297	; 0x129
 801b412:	490a      	ldr	r1, [pc, #40]	; (801b43c <sys_timeout+0x44>)
 801b414:	480a      	ldr	r0, [pc, #40]	; (801b440 <sys_timeout+0x48>)
 801b416:	f005 fcd9 	bl	8020dcc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b41a:	f7ef fddf 	bl	800afdc <sys_now>
 801b41e:	4602      	mov	r2, r0
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	4413      	add	r3, r2
 801b424:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b426:	687a      	ldr	r2, [r7, #4]
 801b428:	68b9      	ldr	r1, [r7, #8]
 801b42a:	6978      	ldr	r0, [r7, #20]
 801b42c:	f7ff ff22 	bl	801b274 <sys_timeout_abs>
#endif
}
 801b430:	bf00      	nop
 801b432:	3718      	adds	r7, #24
 801b434:	46bd      	mov	sp, r7
 801b436:	bd80      	pop	{r7, pc}
 801b438:	080253e8 	.word	0x080253e8
 801b43c:	08025484 	.word	0x08025484
 801b440:	0802545c 	.word	0x0802545c

0801b444 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b084      	sub	sp, #16
 801b448:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b44a:	f7ef fdc7 	bl	800afdc <sys_now>
 801b44e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b450:	4b17      	ldr	r3, [pc, #92]	; (801b4b0 <sys_check_timeouts+0x6c>)
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b456:	68bb      	ldr	r3, [r7, #8]
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d022      	beq.n	801b4a2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b45c:	68bb      	ldr	r3, [r7, #8]
 801b45e:	685b      	ldr	r3, [r3, #4]
 801b460:	68fa      	ldr	r2, [r7, #12]
 801b462:	1ad3      	subs	r3, r2, r3
 801b464:	0fdb      	lsrs	r3, r3, #31
 801b466:	f003 0301 	and.w	r3, r3, #1
 801b46a:	b2db      	uxtb	r3, r3
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d11a      	bne.n	801b4a6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b470:	68bb      	ldr	r3, [r7, #8]
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	4a0e      	ldr	r2, [pc, #56]	; (801b4b0 <sys_check_timeouts+0x6c>)
 801b476:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b478:	68bb      	ldr	r3, [r7, #8]
 801b47a:	689b      	ldr	r3, [r3, #8]
 801b47c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b47e:	68bb      	ldr	r3, [r7, #8]
 801b480:	68db      	ldr	r3, [r3, #12]
 801b482:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b484:	68bb      	ldr	r3, [r7, #8]
 801b486:	685b      	ldr	r3, [r3, #4]
 801b488:	4a0a      	ldr	r2, [pc, #40]	; (801b4b4 <sys_check_timeouts+0x70>)
 801b48a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b48c:	68b9      	ldr	r1, [r7, #8]
 801b48e:	200a      	movs	r0, #10
 801b490:	f7f8 fbc2 	bl	8013c18 <memp_free>
    if (handler != NULL) {
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	2b00      	cmp	r3, #0
 801b498:	d0da      	beq.n	801b450 <sys_check_timeouts+0xc>
      handler(arg);
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	6838      	ldr	r0, [r7, #0]
 801b49e:	4798      	blx	r3
  do {
 801b4a0:	e7d6      	b.n	801b450 <sys_check_timeouts+0xc>
      return;
 801b4a2:	bf00      	nop
 801b4a4:	e000      	b.n	801b4a8 <sys_check_timeouts+0x64>
      return;
 801b4a6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b4a8:	3710      	adds	r7, #16
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	bd80      	pop	{r7, pc}
 801b4ae:	bf00      	nop
 801b4b0:	20005720 	.word	0x20005720
 801b4b4:	20005724 	.word	0x20005724

0801b4b8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b4b8:	b580      	push	{r7, lr}
 801b4ba:	b082      	sub	sp, #8
 801b4bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b4be:	4b16      	ldr	r3, [pc, #88]	; (801b518 <sys_timeouts_sleeptime+0x60>)
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d102      	bne.n	801b4cc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b4c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b4ca:	e020      	b.n	801b50e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b4cc:	f7ef fd86 	bl	800afdc <sys_now>
 801b4d0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b4d2:	4b11      	ldr	r3, [pc, #68]	; (801b518 <sys_timeouts_sleeptime+0x60>)
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	685a      	ldr	r2, [r3, #4]
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	1ad3      	subs	r3, r2, r3
 801b4dc:	0fdb      	lsrs	r3, r3, #31
 801b4de:	f003 0301 	and.w	r3, r3, #1
 801b4e2:	b2db      	uxtb	r3, r3
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d001      	beq.n	801b4ec <sys_timeouts_sleeptime+0x34>
    return 0;
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	e010      	b.n	801b50e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b4ec:	4b0a      	ldr	r3, [pc, #40]	; (801b518 <sys_timeouts_sleeptime+0x60>)
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	685a      	ldr	r2, [r3, #4]
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	1ad3      	subs	r3, r2, r3
 801b4f6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b4f8:	683b      	ldr	r3, [r7, #0]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	da06      	bge.n	801b50c <sys_timeouts_sleeptime+0x54>
 801b4fe:	4b07      	ldr	r3, [pc, #28]	; (801b51c <sys_timeouts_sleeptime+0x64>)
 801b500:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801b504:	4906      	ldr	r1, [pc, #24]	; (801b520 <sys_timeouts_sleeptime+0x68>)
 801b506:	4807      	ldr	r0, [pc, #28]	; (801b524 <sys_timeouts_sleeptime+0x6c>)
 801b508:	f005 fc60 	bl	8020dcc <iprintf>
    return ret;
 801b50c:	683b      	ldr	r3, [r7, #0]
  }
}
 801b50e:	4618      	mov	r0, r3
 801b510:	3708      	adds	r7, #8
 801b512:	46bd      	mov	sp, r7
 801b514:	bd80      	pop	{r7, pc}
 801b516:	bf00      	nop
 801b518:	20005720 	.word	0x20005720
 801b51c:	080253e8 	.word	0x080253e8
 801b520:	080254bc 	.word	0x080254bc
 801b524:	0802545c 	.word	0x0802545c

0801b528 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b52c:	f005 fd20 	bl	8020f70 <rand>
 801b530:	4603      	mov	r3, r0
 801b532:	b29b      	uxth	r3, r3
 801b534:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b538:	b29b      	uxth	r3, r3
 801b53a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801b53e:	b29a      	uxth	r2, r3
 801b540:	4b01      	ldr	r3, [pc, #4]	; (801b548 <udp_init+0x20>)
 801b542:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b544:	bf00      	nop
 801b546:	bd80      	pop	{r7, pc}
 801b548:	200004fc 	.word	0x200004fc

0801b54c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b54c:	b480      	push	{r7}
 801b54e:	b083      	sub	sp, #12
 801b550:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b552:	2300      	movs	r3, #0
 801b554:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b556:	4b17      	ldr	r3, [pc, #92]	; (801b5b4 <udp_new_port+0x68>)
 801b558:	881b      	ldrh	r3, [r3, #0]
 801b55a:	1c5a      	adds	r2, r3, #1
 801b55c:	b291      	uxth	r1, r2
 801b55e:	4a15      	ldr	r2, [pc, #84]	; (801b5b4 <udp_new_port+0x68>)
 801b560:	8011      	strh	r1, [r2, #0]
 801b562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b566:	4293      	cmp	r3, r2
 801b568:	d103      	bne.n	801b572 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b56a:	4b12      	ldr	r3, [pc, #72]	; (801b5b4 <udp_new_port+0x68>)
 801b56c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801b570:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b572:	4b11      	ldr	r3, [pc, #68]	; (801b5b8 <udp_new_port+0x6c>)
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	603b      	str	r3, [r7, #0]
 801b578:	e011      	b.n	801b59e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b57a:	683b      	ldr	r3, [r7, #0]
 801b57c:	8a5a      	ldrh	r2, [r3, #18]
 801b57e:	4b0d      	ldr	r3, [pc, #52]	; (801b5b4 <udp_new_port+0x68>)
 801b580:	881b      	ldrh	r3, [r3, #0]
 801b582:	429a      	cmp	r2, r3
 801b584:	d108      	bne.n	801b598 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b586:	88fb      	ldrh	r3, [r7, #6]
 801b588:	3301      	adds	r3, #1
 801b58a:	80fb      	strh	r3, [r7, #6]
 801b58c:	88fb      	ldrh	r3, [r7, #6]
 801b58e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b592:	d3e0      	bcc.n	801b556 <udp_new_port+0xa>
        return 0;
 801b594:	2300      	movs	r3, #0
 801b596:	e007      	b.n	801b5a8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b598:	683b      	ldr	r3, [r7, #0]
 801b59a:	68db      	ldr	r3, [r3, #12]
 801b59c:	603b      	str	r3, [r7, #0]
 801b59e:	683b      	ldr	r3, [r7, #0]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d1ea      	bne.n	801b57a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b5a4:	4b03      	ldr	r3, [pc, #12]	; (801b5b4 <udp_new_port+0x68>)
 801b5a6:	881b      	ldrh	r3, [r3, #0]
}
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	370c      	adds	r7, #12
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5b2:	4770      	bx	lr
 801b5b4:	200004fc 	.word	0x200004fc
 801b5b8:	20016dc8 	.word	0x20016dc8

0801b5bc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b5bc:	b580      	push	{r7, lr}
 801b5be:	b084      	sub	sp, #16
 801b5c0:	af00      	add	r7, sp, #0
 801b5c2:	60f8      	str	r0, [r7, #12]
 801b5c4:	60b9      	str	r1, [r7, #8]
 801b5c6:	4613      	mov	r3, r2
 801b5c8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d105      	bne.n	801b5dc <udp_input_local_match+0x20>
 801b5d0:	4b27      	ldr	r3, [pc, #156]	; (801b670 <udp_input_local_match+0xb4>)
 801b5d2:	2287      	movs	r2, #135	; 0x87
 801b5d4:	4927      	ldr	r1, [pc, #156]	; (801b674 <udp_input_local_match+0xb8>)
 801b5d6:	4828      	ldr	r0, [pc, #160]	; (801b678 <udp_input_local_match+0xbc>)
 801b5d8:	f005 fbf8 	bl	8020dcc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b5dc:	68bb      	ldr	r3, [r7, #8]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d105      	bne.n	801b5ee <udp_input_local_match+0x32>
 801b5e2:	4b23      	ldr	r3, [pc, #140]	; (801b670 <udp_input_local_match+0xb4>)
 801b5e4:	2288      	movs	r2, #136	; 0x88
 801b5e6:	4925      	ldr	r1, [pc, #148]	; (801b67c <udp_input_local_match+0xc0>)
 801b5e8:	4823      	ldr	r0, [pc, #140]	; (801b678 <udp_input_local_match+0xbc>)
 801b5ea:	f005 fbef 	bl	8020dcc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	7a1b      	ldrb	r3, [r3, #8]
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d00b      	beq.n	801b60e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	7a1a      	ldrb	r2, [r3, #8]
 801b5fa:	4b21      	ldr	r3, [pc, #132]	; (801b680 <udp_input_local_match+0xc4>)
 801b5fc:	685b      	ldr	r3, [r3, #4]
 801b5fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b602:	3301      	adds	r3, #1
 801b604:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b606:	429a      	cmp	r2, r3
 801b608:	d001      	beq.n	801b60e <udp_input_local_match+0x52>
    return 0;
 801b60a:	2300      	movs	r3, #0
 801b60c:	e02b      	b.n	801b666 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b60e:	79fb      	ldrb	r3, [r7, #7]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d018      	beq.n	801b646 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b614:	68fb      	ldr	r3, [r7, #12]
 801b616:	2b00      	cmp	r3, #0
 801b618:	d013      	beq.n	801b642 <udp_input_local_match+0x86>
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d00f      	beq.n	801b642 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b622:	4b17      	ldr	r3, [pc, #92]	; (801b680 <udp_input_local_match+0xc4>)
 801b624:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b62a:	d00a      	beq.n	801b642 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	681a      	ldr	r2, [r3, #0]
 801b630:	4b13      	ldr	r3, [pc, #76]	; (801b680 <udp_input_local_match+0xc4>)
 801b632:	695b      	ldr	r3, [r3, #20]
 801b634:	405a      	eors	r2, r3
 801b636:	68bb      	ldr	r3, [r7, #8]
 801b638:	3308      	adds	r3, #8
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d110      	bne.n	801b664 <udp_input_local_match+0xa8>
          return 1;
 801b642:	2301      	movs	r3, #1
 801b644:	e00f      	b.n	801b666 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d009      	beq.n	801b660 <udp_input_local_match+0xa4>
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	2b00      	cmp	r3, #0
 801b652:	d005      	beq.n	801b660 <udp_input_local_match+0xa4>
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	681a      	ldr	r2, [r3, #0]
 801b658:	4b09      	ldr	r3, [pc, #36]	; (801b680 <udp_input_local_match+0xc4>)
 801b65a:	695b      	ldr	r3, [r3, #20]
 801b65c:	429a      	cmp	r2, r3
 801b65e:	d101      	bne.n	801b664 <udp_input_local_match+0xa8>
        return 1;
 801b660:	2301      	movs	r3, #1
 801b662:	e000      	b.n	801b666 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b664:	2300      	movs	r3, #0
}
 801b666:	4618      	mov	r0, r3
 801b668:	3710      	adds	r7, #16
 801b66a:	46bd      	mov	sp, r7
 801b66c:	bd80      	pop	{r7, pc}
 801b66e:	bf00      	nop
 801b670:	080254d0 	.word	0x080254d0
 801b674:	08025500 	.word	0x08025500
 801b678:	08025524 	.word	0x08025524
 801b67c:	0802554c 	.word	0x0802554c
 801b680:	200135d0 	.word	0x200135d0

0801b684 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b684:	b590      	push	{r4, r7, lr}
 801b686:	b08d      	sub	sp, #52	; 0x34
 801b688:	af02      	add	r7, sp, #8
 801b68a:	6078      	str	r0, [r7, #4]
 801b68c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b68e:	2300      	movs	r3, #0
 801b690:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	2b00      	cmp	r3, #0
 801b696:	d105      	bne.n	801b6a4 <udp_input+0x20>
 801b698:	4b7c      	ldr	r3, [pc, #496]	; (801b88c <udp_input+0x208>)
 801b69a:	22cf      	movs	r2, #207	; 0xcf
 801b69c:	497c      	ldr	r1, [pc, #496]	; (801b890 <udp_input+0x20c>)
 801b69e:	487d      	ldr	r0, [pc, #500]	; (801b894 <udp_input+0x210>)
 801b6a0:	f005 fb94 	bl	8020dcc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b6a4:	683b      	ldr	r3, [r7, #0]
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d105      	bne.n	801b6b6 <udp_input+0x32>
 801b6aa:	4b78      	ldr	r3, [pc, #480]	; (801b88c <udp_input+0x208>)
 801b6ac:	22d0      	movs	r2, #208	; 0xd0
 801b6ae:	497a      	ldr	r1, [pc, #488]	; (801b898 <udp_input+0x214>)
 801b6b0:	4878      	ldr	r0, [pc, #480]	; (801b894 <udp_input+0x210>)
 801b6b2:	f005 fb8b 	bl	8020dcc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	895b      	ldrh	r3, [r3, #10]
 801b6ba:	2b07      	cmp	r3, #7
 801b6bc:	d803      	bhi.n	801b6c6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b6be:	6878      	ldr	r0, [r7, #4]
 801b6c0:	f7f9 f95a 	bl	8014978 <pbuf_free>
    goto end;
 801b6c4:	e0de      	b.n	801b884 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	685b      	ldr	r3, [r3, #4]
 801b6ca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b6cc:	4b73      	ldr	r3, [pc, #460]	; (801b89c <udp_input+0x218>)
 801b6ce:	695b      	ldr	r3, [r3, #20]
 801b6d0:	4a72      	ldr	r2, [pc, #456]	; (801b89c <udp_input+0x218>)
 801b6d2:	6812      	ldr	r2, [r2, #0]
 801b6d4:	4611      	mov	r1, r2
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	f003 ff1a 	bl	801f510 <ip4_addr_isbroadcast_u32>
 801b6dc:	4603      	mov	r3, r0
 801b6de:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b6e0:	697b      	ldr	r3, [r7, #20]
 801b6e2:	881b      	ldrh	r3, [r3, #0]
 801b6e4:	b29b      	uxth	r3, r3
 801b6e6:	4618      	mov	r0, r3
 801b6e8:	f7f6 fdb8 	bl	801225c <lwip_htons>
 801b6ec:	4603      	mov	r3, r0
 801b6ee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b6f0:	697b      	ldr	r3, [r7, #20]
 801b6f2:	885b      	ldrh	r3, [r3, #2]
 801b6f4:	b29b      	uxth	r3, r3
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	f7f6 fdb0 	bl	801225c <lwip_htons>
 801b6fc:	4603      	mov	r3, r0
 801b6fe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b700:	2300      	movs	r3, #0
 801b702:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801b704:	2300      	movs	r3, #0
 801b706:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b708:	2300      	movs	r3, #0
 801b70a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b70c:	4b64      	ldr	r3, [pc, #400]	; (801b8a0 <udp_input+0x21c>)
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	627b      	str	r3, [r7, #36]	; 0x24
 801b712:	e054      	b.n	801b7be <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b716:	8a5b      	ldrh	r3, [r3, #18]
 801b718:	89fa      	ldrh	r2, [r7, #14]
 801b71a:	429a      	cmp	r2, r3
 801b71c:	d14a      	bne.n	801b7b4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b71e:	7cfb      	ldrb	r3, [r7, #19]
 801b720:	461a      	mov	r2, r3
 801b722:	6839      	ldr	r1, [r7, #0]
 801b724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b726:	f7ff ff49 	bl	801b5bc <udp_input_local_match>
 801b72a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	d041      	beq.n	801b7b4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b732:	7c1b      	ldrb	r3, [r3, #16]
 801b734:	f003 0304 	and.w	r3, r3, #4
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d11d      	bne.n	801b778 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801b73c:	69fb      	ldr	r3, [r7, #28]
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d102      	bne.n	801b748 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b744:	61fb      	str	r3, [r7, #28]
 801b746:	e017      	b.n	801b778 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b748:	7cfb      	ldrb	r3, [r7, #19]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d014      	beq.n	801b778 <udp_input+0xf4>
 801b74e:	4b53      	ldr	r3, [pc, #332]	; (801b89c <udp_input+0x218>)
 801b750:	695b      	ldr	r3, [r3, #20]
 801b752:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b756:	d10f      	bne.n	801b778 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b758:	69fb      	ldr	r3, [r7, #28]
 801b75a:	681a      	ldr	r2, [r3, #0]
 801b75c:	683b      	ldr	r3, [r7, #0]
 801b75e:	3304      	adds	r3, #4
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	429a      	cmp	r2, r3
 801b764:	d008      	beq.n	801b778 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b768:	681a      	ldr	r2, [r3, #0]
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	3304      	adds	r3, #4
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	429a      	cmp	r2, r3
 801b772:	d101      	bne.n	801b778 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801b774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b776:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b77a:	8a9b      	ldrh	r3, [r3, #20]
 801b77c:	8a3a      	ldrh	r2, [r7, #16]
 801b77e:	429a      	cmp	r2, r3
 801b780:	d118      	bne.n	801b7b4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b784:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b786:	2b00      	cmp	r3, #0
 801b788:	d005      	beq.n	801b796 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b78c:	685a      	ldr	r2, [r3, #4]
 801b78e:	4b43      	ldr	r3, [pc, #268]	; (801b89c <udp_input+0x218>)
 801b790:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b792:	429a      	cmp	r2, r3
 801b794:	d10e      	bne.n	801b7b4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b796:	6a3b      	ldr	r3, [r7, #32]
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d014      	beq.n	801b7c6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b79e:	68da      	ldr	r2, [r3, #12]
 801b7a0:	6a3b      	ldr	r3, [r7, #32]
 801b7a2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b7a4:	4b3e      	ldr	r3, [pc, #248]	; (801b8a0 <udp_input+0x21c>)
 801b7a6:	681a      	ldr	r2, [r3, #0]
 801b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7aa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b7ac:	4a3c      	ldr	r2, [pc, #240]	; (801b8a0 <udp_input+0x21c>)
 801b7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7b0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b7b2:	e008      	b.n	801b7c6 <udp_input+0x142>
      }
    }

    prev = pcb;
 801b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7b6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7ba:	68db      	ldr	r3, [r3, #12]
 801b7bc:	627b      	str	r3, [r7, #36]	; 0x24
 801b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d1a7      	bne.n	801b714 <udp_input+0x90>
 801b7c4:	e000      	b.n	801b7c8 <udp_input+0x144>
        break;
 801b7c6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d101      	bne.n	801b7d2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801b7ce:	69fb      	ldr	r3, [r7, #28]
 801b7d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d002      	beq.n	801b7de <udp_input+0x15a>
    for_us = 1;
 801b7d8:	2301      	movs	r3, #1
 801b7da:	76fb      	strb	r3, [r7, #27]
 801b7dc:	e00a      	b.n	801b7f4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b7de:	683b      	ldr	r3, [r7, #0]
 801b7e0:	3304      	adds	r3, #4
 801b7e2:	681a      	ldr	r2, [r3, #0]
 801b7e4:	4b2d      	ldr	r3, [pc, #180]	; (801b89c <udp_input+0x218>)
 801b7e6:	695b      	ldr	r3, [r3, #20]
 801b7e8:	429a      	cmp	r2, r3
 801b7ea:	bf0c      	ite	eq
 801b7ec:	2301      	moveq	r3, #1
 801b7ee:	2300      	movne	r3, #0
 801b7f0:	b2db      	uxtb	r3, r3
 801b7f2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b7f4:	7efb      	ldrb	r3, [r7, #27]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d041      	beq.n	801b87e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b7fa:	2108      	movs	r1, #8
 801b7fc:	6878      	ldr	r0, [r7, #4]
 801b7fe:	f7f9 f835 	bl	801486c <pbuf_remove_header>
 801b802:	4603      	mov	r3, r0
 801b804:	2b00      	cmp	r3, #0
 801b806:	d00a      	beq.n	801b81e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b808:	4b20      	ldr	r3, [pc, #128]	; (801b88c <udp_input+0x208>)
 801b80a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b80e:	4925      	ldr	r1, [pc, #148]	; (801b8a4 <udp_input+0x220>)
 801b810:	4820      	ldr	r0, [pc, #128]	; (801b894 <udp_input+0x210>)
 801b812:	f005 fadb 	bl	8020dcc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b816:	6878      	ldr	r0, [r7, #4]
 801b818:	f7f9 f8ae 	bl	8014978 <pbuf_free>
      goto end;
 801b81c:	e032      	b.n	801b884 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b820:	2b00      	cmp	r3, #0
 801b822:	d012      	beq.n	801b84a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b826:	699b      	ldr	r3, [r3, #24]
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d00a      	beq.n	801b842 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b82e:	699c      	ldr	r4, [r3, #24]
 801b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b832:	69d8      	ldr	r0, [r3, #28]
 801b834:	8a3b      	ldrh	r3, [r7, #16]
 801b836:	9300      	str	r3, [sp, #0]
 801b838:	4b1b      	ldr	r3, [pc, #108]	; (801b8a8 <udp_input+0x224>)
 801b83a:	687a      	ldr	r2, [r7, #4]
 801b83c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b83e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b840:	e021      	b.n	801b886 <udp_input+0x202>
        pbuf_free(p);
 801b842:	6878      	ldr	r0, [r7, #4]
 801b844:	f7f9 f898 	bl	8014978 <pbuf_free>
        goto end;
 801b848:	e01c      	b.n	801b884 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b84a:	7cfb      	ldrb	r3, [r7, #19]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d112      	bne.n	801b876 <udp_input+0x1f2>
 801b850:	4b12      	ldr	r3, [pc, #72]	; (801b89c <udp_input+0x218>)
 801b852:	695b      	ldr	r3, [r3, #20]
 801b854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b858:	2be0      	cmp	r3, #224	; 0xe0
 801b85a:	d00c      	beq.n	801b876 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b85c:	4b0f      	ldr	r3, [pc, #60]	; (801b89c <udp_input+0x218>)
 801b85e:	899b      	ldrh	r3, [r3, #12]
 801b860:	3308      	adds	r3, #8
 801b862:	b29b      	uxth	r3, r3
 801b864:	b21b      	sxth	r3, r3
 801b866:	4619      	mov	r1, r3
 801b868:	6878      	ldr	r0, [r7, #4]
 801b86a:	f7f9 f872 	bl	8014952 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b86e:	2103      	movs	r1, #3
 801b870:	6878      	ldr	r0, [r7, #4]
 801b872:	f003 fb0f 	bl	801ee94 <icmp_dest_unreach>
      pbuf_free(p);
 801b876:	6878      	ldr	r0, [r7, #4]
 801b878:	f7f9 f87e 	bl	8014978 <pbuf_free>
  return;
 801b87c:	e003      	b.n	801b886 <udp_input+0x202>
    pbuf_free(p);
 801b87e:	6878      	ldr	r0, [r7, #4]
 801b880:	f7f9 f87a 	bl	8014978 <pbuf_free>
  return;
 801b884:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b886:	372c      	adds	r7, #44	; 0x2c
 801b888:	46bd      	mov	sp, r7
 801b88a:	bd90      	pop	{r4, r7, pc}
 801b88c:	080254d0 	.word	0x080254d0
 801b890:	08025574 	.word	0x08025574
 801b894:	08025524 	.word	0x08025524
 801b898:	0802558c 	.word	0x0802558c
 801b89c:	200135d0 	.word	0x200135d0
 801b8a0:	20016dc8 	.word	0x20016dc8
 801b8a4:	080255a8 	.word	0x080255a8
 801b8a8:	200135e0 	.word	0x200135e0

0801b8ac <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801b8ac:	b580      	push	{r7, lr}
 801b8ae:	b082      	sub	sp, #8
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	6078      	str	r0, [r7, #4]
 801b8b4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d109      	bne.n	801b8d0 <udp_send+0x24>
 801b8bc:	4b11      	ldr	r3, [pc, #68]	; (801b904 <udp_send+0x58>)
 801b8be:	f240 12d5 	movw	r2, #469	; 0x1d5
 801b8c2:	4911      	ldr	r1, [pc, #68]	; (801b908 <udp_send+0x5c>)
 801b8c4:	4811      	ldr	r0, [pc, #68]	; (801b90c <udp_send+0x60>)
 801b8c6:	f005 fa81 	bl	8020dcc <iprintf>
 801b8ca:	f06f 030f 	mvn.w	r3, #15
 801b8ce:	e015      	b.n	801b8fc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801b8d0:	683b      	ldr	r3, [r7, #0]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d109      	bne.n	801b8ea <udp_send+0x3e>
 801b8d6:	4b0b      	ldr	r3, [pc, #44]	; (801b904 <udp_send+0x58>)
 801b8d8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801b8dc:	490c      	ldr	r1, [pc, #48]	; (801b910 <udp_send+0x64>)
 801b8de:	480b      	ldr	r0, [pc, #44]	; (801b90c <udp_send+0x60>)
 801b8e0:	f005 fa74 	bl	8020dcc <iprintf>
 801b8e4:	f06f 030f 	mvn.w	r3, #15
 801b8e8:	e008      	b.n	801b8fc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	1d1a      	adds	r2, r3, #4
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	8a9b      	ldrh	r3, [r3, #20]
 801b8f2:	6839      	ldr	r1, [r7, #0]
 801b8f4:	6878      	ldr	r0, [r7, #4]
 801b8f6:	f000 f80d 	bl	801b914 <udp_sendto>
 801b8fa:	4603      	mov	r3, r0
}
 801b8fc:	4618      	mov	r0, r3
 801b8fe:	3708      	adds	r7, #8
 801b900:	46bd      	mov	sp, r7
 801b902:	bd80      	pop	{r7, pc}
 801b904:	080254d0 	.word	0x080254d0
 801b908:	080255c4 	.word	0x080255c4
 801b90c:	08025524 	.word	0x08025524
 801b910:	080255dc 	.word	0x080255dc

0801b914 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801b914:	b580      	push	{r7, lr}
 801b916:	b088      	sub	sp, #32
 801b918:	af02      	add	r7, sp, #8
 801b91a:	60f8      	str	r0, [r7, #12]
 801b91c:	60b9      	str	r1, [r7, #8]
 801b91e:	607a      	str	r2, [r7, #4]
 801b920:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801b922:	68fb      	ldr	r3, [r7, #12]
 801b924:	2b00      	cmp	r3, #0
 801b926:	d109      	bne.n	801b93c <udp_sendto+0x28>
 801b928:	4b23      	ldr	r3, [pc, #140]	; (801b9b8 <udp_sendto+0xa4>)
 801b92a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b92e:	4923      	ldr	r1, [pc, #140]	; (801b9bc <udp_sendto+0xa8>)
 801b930:	4823      	ldr	r0, [pc, #140]	; (801b9c0 <udp_sendto+0xac>)
 801b932:	f005 fa4b 	bl	8020dcc <iprintf>
 801b936:	f06f 030f 	mvn.w	r3, #15
 801b93a:	e038      	b.n	801b9ae <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801b93c:	68bb      	ldr	r3, [r7, #8]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d109      	bne.n	801b956 <udp_sendto+0x42>
 801b942:	4b1d      	ldr	r3, [pc, #116]	; (801b9b8 <udp_sendto+0xa4>)
 801b944:	f240 2219 	movw	r2, #537	; 0x219
 801b948:	491e      	ldr	r1, [pc, #120]	; (801b9c4 <udp_sendto+0xb0>)
 801b94a:	481d      	ldr	r0, [pc, #116]	; (801b9c0 <udp_sendto+0xac>)
 801b94c:	f005 fa3e 	bl	8020dcc <iprintf>
 801b950:	f06f 030f 	mvn.w	r3, #15
 801b954:	e02b      	b.n	801b9ae <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d109      	bne.n	801b970 <udp_sendto+0x5c>
 801b95c:	4b16      	ldr	r3, [pc, #88]	; (801b9b8 <udp_sendto+0xa4>)
 801b95e:	f240 221a 	movw	r2, #538	; 0x21a
 801b962:	4919      	ldr	r1, [pc, #100]	; (801b9c8 <udp_sendto+0xb4>)
 801b964:	4816      	ldr	r0, [pc, #88]	; (801b9c0 <udp_sendto+0xac>)
 801b966:	f005 fa31 	bl	8020dcc <iprintf>
 801b96a:	f06f 030f 	mvn.w	r3, #15
 801b96e:	e01e      	b.n	801b9ae <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	7a1b      	ldrb	r3, [r3, #8]
 801b974:	2b00      	cmp	r3, #0
 801b976:	d006      	beq.n	801b986 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	7a1b      	ldrb	r3, [r3, #8]
 801b97c:	4618      	mov	r0, r3
 801b97e:	f7f8 fc6d 	bl	801425c <netif_get_by_index>
 801b982:	6178      	str	r0, [r7, #20]
 801b984:	e003      	b.n	801b98e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801b986:	6878      	ldr	r0, [r7, #4]
 801b988:	f003 fb0e 	bl	801efa8 <ip4_route>
 801b98c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801b98e:	697b      	ldr	r3, [r7, #20]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d102      	bne.n	801b99a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801b994:	f06f 0303 	mvn.w	r3, #3
 801b998:	e009      	b.n	801b9ae <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801b99a:	887a      	ldrh	r2, [r7, #2]
 801b99c:	697b      	ldr	r3, [r7, #20]
 801b99e:	9300      	str	r3, [sp, #0]
 801b9a0:	4613      	mov	r3, r2
 801b9a2:	687a      	ldr	r2, [r7, #4]
 801b9a4:	68b9      	ldr	r1, [r7, #8]
 801b9a6:	68f8      	ldr	r0, [r7, #12]
 801b9a8:	f000 f810 	bl	801b9cc <udp_sendto_if>
 801b9ac:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	3718      	adds	r7, #24
 801b9b2:	46bd      	mov	sp, r7
 801b9b4:	bd80      	pop	{r7, pc}
 801b9b6:	bf00      	nop
 801b9b8:	080254d0 	.word	0x080254d0
 801b9bc:	080255f4 	.word	0x080255f4
 801b9c0:	08025524 	.word	0x08025524
 801b9c4:	0802560c 	.word	0x0802560c
 801b9c8:	08025628 	.word	0x08025628

0801b9cc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801b9cc:	b580      	push	{r7, lr}
 801b9ce:	b088      	sub	sp, #32
 801b9d0:	af02      	add	r7, sp, #8
 801b9d2:	60f8      	str	r0, [r7, #12]
 801b9d4:	60b9      	str	r1, [r7, #8]
 801b9d6:	607a      	str	r2, [r7, #4]
 801b9d8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d109      	bne.n	801b9f4 <udp_sendto_if+0x28>
 801b9e0:	4b2e      	ldr	r3, [pc, #184]	; (801ba9c <udp_sendto_if+0xd0>)
 801b9e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b9e6:	492e      	ldr	r1, [pc, #184]	; (801baa0 <udp_sendto_if+0xd4>)
 801b9e8:	482e      	ldr	r0, [pc, #184]	; (801baa4 <udp_sendto_if+0xd8>)
 801b9ea:	f005 f9ef 	bl	8020dcc <iprintf>
 801b9ee:	f06f 030f 	mvn.w	r3, #15
 801b9f2:	e04f      	b.n	801ba94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b9f4:	68bb      	ldr	r3, [r7, #8]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d109      	bne.n	801ba0e <udp_sendto_if+0x42>
 801b9fa:	4b28      	ldr	r3, [pc, #160]	; (801ba9c <udp_sendto_if+0xd0>)
 801b9fc:	f240 2281 	movw	r2, #641	; 0x281
 801ba00:	4929      	ldr	r1, [pc, #164]	; (801baa8 <udp_sendto_if+0xdc>)
 801ba02:	4828      	ldr	r0, [pc, #160]	; (801baa4 <udp_sendto_if+0xd8>)
 801ba04:	f005 f9e2 	bl	8020dcc <iprintf>
 801ba08:	f06f 030f 	mvn.w	r3, #15
 801ba0c:	e042      	b.n	801ba94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d109      	bne.n	801ba28 <udp_sendto_if+0x5c>
 801ba14:	4b21      	ldr	r3, [pc, #132]	; (801ba9c <udp_sendto_if+0xd0>)
 801ba16:	f240 2282 	movw	r2, #642	; 0x282
 801ba1a:	4924      	ldr	r1, [pc, #144]	; (801baac <udp_sendto_if+0xe0>)
 801ba1c:	4821      	ldr	r0, [pc, #132]	; (801baa4 <udp_sendto_if+0xd8>)
 801ba1e:	f005 f9d5 	bl	8020dcc <iprintf>
 801ba22:	f06f 030f 	mvn.w	r3, #15
 801ba26:	e035      	b.n	801ba94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801ba28:	6a3b      	ldr	r3, [r7, #32]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d109      	bne.n	801ba42 <udp_sendto_if+0x76>
 801ba2e:	4b1b      	ldr	r3, [pc, #108]	; (801ba9c <udp_sendto_if+0xd0>)
 801ba30:	f240 2283 	movw	r2, #643	; 0x283
 801ba34:	491e      	ldr	r1, [pc, #120]	; (801bab0 <udp_sendto_if+0xe4>)
 801ba36:	481b      	ldr	r0, [pc, #108]	; (801baa4 <udp_sendto_if+0xd8>)
 801ba38:	f005 f9c8 	bl	8020dcc <iprintf>
 801ba3c:	f06f 030f 	mvn.w	r3, #15
 801ba40:	e028      	b.n	801ba94 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d009      	beq.n	801ba5c <udp_sendto_if+0x90>
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d005      	beq.n	801ba5c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801ba50:	68fb      	ldr	r3, [r7, #12]
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ba58:	2be0      	cmp	r3, #224	; 0xe0
 801ba5a:	d103      	bne.n	801ba64 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801ba5c:	6a3b      	ldr	r3, [r7, #32]
 801ba5e:	3304      	adds	r3, #4
 801ba60:	617b      	str	r3, [r7, #20]
 801ba62:	e00b      	b.n	801ba7c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	681a      	ldr	r2, [r3, #0]
 801ba68:	6a3b      	ldr	r3, [r7, #32]
 801ba6a:	3304      	adds	r3, #4
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	429a      	cmp	r2, r3
 801ba70:	d002      	beq.n	801ba78 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801ba72:	f06f 0303 	mvn.w	r3, #3
 801ba76:	e00d      	b.n	801ba94 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801ba78:	68fb      	ldr	r3, [r7, #12]
 801ba7a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801ba7c:	887a      	ldrh	r2, [r7, #2]
 801ba7e:	697b      	ldr	r3, [r7, #20]
 801ba80:	9301      	str	r3, [sp, #4]
 801ba82:	6a3b      	ldr	r3, [r7, #32]
 801ba84:	9300      	str	r3, [sp, #0]
 801ba86:	4613      	mov	r3, r2
 801ba88:	687a      	ldr	r2, [r7, #4]
 801ba8a:	68b9      	ldr	r1, [r7, #8]
 801ba8c:	68f8      	ldr	r0, [r7, #12]
 801ba8e:	f000 f811 	bl	801bab4 <udp_sendto_if_src>
 801ba92:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801ba94:	4618      	mov	r0, r3
 801ba96:	3718      	adds	r7, #24
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	bd80      	pop	{r7, pc}
 801ba9c:	080254d0 	.word	0x080254d0
 801baa0:	08025644 	.word	0x08025644
 801baa4:	08025524 	.word	0x08025524
 801baa8:	08025660 	.word	0x08025660
 801baac:	0802567c 	.word	0x0802567c
 801bab0:	0802569c 	.word	0x0802569c

0801bab4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801bab4:	b580      	push	{r7, lr}
 801bab6:	b08c      	sub	sp, #48	; 0x30
 801bab8:	af04      	add	r7, sp, #16
 801baba:	60f8      	str	r0, [r7, #12]
 801babc:	60b9      	str	r1, [r7, #8]
 801babe:	607a      	str	r2, [r7, #4]
 801bac0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bac2:	68fb      	ldr	r3, [r7, #12]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d109      	bne.n	801badc <udp_sendto_if_src+0x28>
 801bac8:	4b65      	ldr	r3, [pc, #404]	; (801bc60 <udp_sendto_if_src+0x1ac>)
 801baca:	f240 22d1 	movw	r2, #721	; 0x2d1
 801bace:	4965      	ldr	r1, [pc, #404]	; (801bc64 <udp_sendto_if_src+0x1b0>)
 801bad0:	4865      	ldr	r0, [pc, #404]	; (801bc68 <udp_sendto_if_src+0x1b4>)
 801bad2:	f005 f97b 	bl	8020dcc <iprintf>
 801bad6:	f06f 030f 	mvn.w	r3, #15
 801bada:	e0bc      	b.n	801bc56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801badc:	68bb      	ldr	r3, [r7, #8]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d109      	bne.n	801baf6 <udp_sendto_if_src+0x42>
 801bae2:	4b5f      	ldr	r3, [pc, #380]	; (801bc60 <udp_sendto_if_src+0x1ac>)
 801bae4:	f240 22d2 	movw	r2, #722	; 0x2d2
 801bae8:	4960      	ldr	r1, [pc, #384]	; (801bc6c <udp_sendto_if_src+0x1b8>)
 801baea:	485f      	ldr	r0, [pc, #380]	; (801bc68 <udp_sendto_if_src+0x1b4>)
 801baec:	f005 f96e 	bl	8020dcc <iprintf>
 801baf0:	f06f 030f 	mvn.w	r3, #15
 801baf4:	e0af      	b.n	801bc56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d109      	bne.n	801bb10 <udp_sendto_if_src+0x5c>
 801bafc:	4b58      	ldr	r3, [pc, #352]	; (801bc60 <udp_sendto_if_src+0x1ac>)
 801bafe:	f240 22d3 	movw	r2, #723	; 0x2d3
 801bb02:	495b      	ldr	r1, [pc, #364]	; (801bc70 <udp_sendto_if_src+0x1bc>)
 801bb04:	4858      	ldr	r0, [pc, #352]	; (801bc68 <udp_sendto_if_src+0x1b4>)
 801bb06:	f005 f961 	bl	8020dcc <iprintf>
 801bb0a:	f06f 030f 	mvn.w	r3, #15
 801bb0e:	e0a2      	b.n	801bc56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d109      	bne.n	801bb2a <udp_sendto_if_src+0x76>
 801bb16:	4b52      	ldr	r3, [pc, #328]	; (801bc60 <udp_sendto_if_src+0x1ac>)
 801bb18:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801bb1c:	4955      	ldr	r1, [pc, #340]	; (801bc74 <udp_sendto_if_src+0x1c0>)
 801bb1e:	4852      	ldr	r0, [pc, #328]	; (801bc68 <udp_sendto_if_src+0x1b4>)
 801bb20:	f005 f954 	bl	8020dcc <iprintf>
 801bb24:	f06f 030f 	mvn.w	r3, #15
 801bb28:	e095      	b.n	801bc56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d109      	bne.n	801bb44 <udp_sendto_if_src+0x90>
 801bb30:	4b4b      	ldr	r3, [pc, #300]	; (801bc60 <udp_sendto_if_src+0x1ac>)
 801bb32:	f240 22d5 	movw	r2, #725	; 0x2d5
 801bb36:	4950      	ldr	r1, [pc, #320]	; (801bc78 <udp_sendto_if_src+0x1c4>)
 801bb38:	484b      	ldr	r0, [pc, #300]	; (801bc68 <udp_sendto_if_src+0x1b4>)
 801bb3a:	f005 f947 	bl	8020dcc <iprintf>
 801bb3e:	f06f 030f 	mvn.w	r3, #15
 801bb42:	e088      	b.n	801bc56 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801bb44:	68fb      	ldr	r3, [r7, #12]
 801bb46:	8a5b      	ldrh	r3, [r3, #18]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d10f      	bne.n	801bb6c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bb4c:	68f9      	ldr	r1, [r7, #12]
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	8a5b      	ldrh	r3, [r3, #18]
 801bb52:	461a      	mov	r2, r3
 801bb54:	68f8      	ldr	r0, [r7, #12]
 801bb56:	f000 f893 	bl	801bc80 <udp_bind>
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801bb5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d002      	beq.n	801bb6c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801bb66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bb6a:	e074      	b.n	801bc56 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801bb6c:	68bb      	ldr	r3, [r7, #8]
 801bb6e:	891b      	ldrh	r3, [r3, #8]
 801bb70:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801bb74:	4293      	cmp	r3, r2
 801bb76:	d902      	bls.n	801bb7e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801bb78:	f04f 33ff 	mov.w	r3, #4294967295
 801bb7c:	e06b      	b.n	801bc56 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801bb7e:	2108      	movs	r1, #8
 801bb80:	68b8      	ldr	r0, [r7, #8]
 801bb82:	f7f8 fe63 	bl	801484c <pbuf_add_header>
 801bb86:	4603      	mov	r3, r0
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d015      	beq.n	801bbb8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801bb8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bb90:	2108      	movs	r1, #8
 801bb92:	2022      	movs	r0, #34	; 0x22
 801bb94:	f7f8 fc0c 	bl	80143b0 <pbuf_alloc>
 801bb98:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801bb9a:	69fb      	ldr	r3, [r7, #28]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d102      	bne.n	801bba6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801bba0:	f04f 33ff 	mov.w	r3, #4294967295
 801bba4:	e057      	b.n	801bc56 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801bba6:	68bb      	ldr	r3, [r7, #8]
 801bba8:	891b      	ldrh	r3, [r3, #8]
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d006      	beq.n	801bbbc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801bbae:	68b9      	ldr	r1, [r7, #8]
 801bbb0:	69f8      	ldr	r0, [r7, #28]
 801bbb2:	f7f9 f805 	bl	8014bc0 <pbuf_chain>
 801bbb6:	e001      	b.n	801bbbc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801bbb8:	68bb      	ldr	r3, [r7, #8]
 801bbba:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bbbc:	69fb      	ldr	r3, [r7, #28]
 801bbbe:	895b      	ldrh	r3, [r3, #10]
 801bbc0:	2b07      	cmp	r3, #7
 801bbc2:	d806      	bhi.n	801bbd2 <udp_sendto_if_src+0x11e>
 801bbc4:	4b26      	ldr	r3, [pc, #152]	; (801bc60 <udp_sendto_if_src+0x1ac>)
 801bbc6:	f240 320d 	movw	r2, #781	; 0x30d
 801bbca:	492c      	ldr	r1, [pc, #176]	; (801bc7c <udp_sendto_if_src+0x1c8>)
 801bbcc:	4826      	ldr	r0, [pc, #152]	; (801bc68 <udp_sendto_if_src+0x1b4>)
 801bbce:	f005 f8fd 	bl	8020dcc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801bbd2:	69fb      	ldr	r3, [r7, #28]
 801bbd4:	685b      	ldr	r3, [r3, #4]
 801bbd6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801bbd8:	68fb      	ldr	r3, [r7, #12]
 801bbda:	8a5b      	ldrh	r3, [r3, #18]
 801bbdc:	4618      	mov	r0, r3
 801bbde:	f7f6 fb3d 	bl	801225c <lwip_htons>
 801bbe2:	4603      	mov	r3, r0
 801bbe4:	461a      	mov	r2, r3
 801bbe6:	697b      	ldr	r3, [r7, #20]
 801bbe8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801bbea:	887b      	ldrh	r3, [r7, #2]
 801bbec:	4618      	mov	r0, r3
 801bbee:	f7f6 fb35 	bl	801225c <lwip_htons>
 801bbf2:	4603      	mov	r3, r0
 801bbf4:	461a      	mov	r2, r3
 801bbf6:	697b      	ldr	r3, [r7, #20]
 801bbf8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801bbfa:	697b      	ldr	r3, [r7, #20]
 801bbfc:	2200      	movs	r2, #0
 801bbfe:	719a      	strb	r2, [r3, #6]
 801bc00:	2200      	movs	r2, #0
 801bc02:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801bc04:	69fb      	ldr	r3, [r7, #28]
 801bc06:	891b      	ldrh	r3, [r3, #8]
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7f6 fb27 	bl	801225c <lwip_htons>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	461a      	mov	r2, r3
 801bc12:	697b      	ldr	r3, [r7, #20]
 801bc14:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801bc16:	2311      	movs	r3, #17
 801bc18:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	7adb      	ldrb	r3, [r3, #11]
 801bc1e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	7a9b      	ldrb	r3, [r3, #10]
 801bc24:	7cb9      	ldrb	r1, [r7, #18]
 801bc26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bc28:	9202      	str	r2, [sp, #8]
 801bc2a:	7cfa      	ldrb	r2, [r7, #19]
 801bc2c:	9201      	str	r2, [sp, #4]
 801bc2e:	9300      	str	r3, [sp, #0]
 801bc30:	460b      	mov	r3, r1
 801bc32:	687a      	ldr	r2, [r7, #4]
 801bc34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bc36:	69f8      	ldr	r0, [r7, #28]
 801bc38:	f003 fbbc 	bl	801f3b4 <ip4_output_if_src>
 801bc3c:	4603      	mov	r3, r0
 801bc3e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801bc40:	69fa      	ldr	r2, [r7, #28]
 801bc42:	68bb      	ldr	r3, [r7, #8]
 801bc44:	429a      	cmp	r2, r3
 801bc46:	d004      	beq.n	801bc52 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801bc48:	69f8      	ldr	r0, [r7, #28]
 801bc4a:	f7f8 fe95 	bl	8014978 <pbuf_free>
    q = NULL;
 801bc4e:	2300      	movs	r3, #0
 801bc50:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801bc52:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801bc56:	4618      	mov	r0, r3
 801bc58:	3720      	adds	r7, #32
 801bc5a:	46bd      	mov	sp, r7
 801bc5c:	bd80      	pop	{r7, pc}
 801bc5e:	bf00      	nop
 801bc60:	080254d0 	.word	0x080254d0
 801bc64:	080256bc 	.word	0x080256bc
 801bc68:	08025524 	.word	0x08025524
 801bc6c:	080256dc 	.word	0x080256dc
 801bc70:	080256fc 	.word	0x080256fc
 801bc74:	08025720 	.word	0x08025720
 801bc78:	08025744 	.word	0x08025744
 801bc7c:	08025768 	.word	0x08025768

0801bc80 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b086      	sub	sp, #24
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	60f8      	str	r0, [r7, #12]
 801bc88:	60b9      	str	r1, [r7, #8]
 801bc8a:	4613      	mov	r3, r2
 801bc8c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801bc8e:	68bb      	ldr	r3, [r7, #8]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d101      	bne.n	801bc98 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801bc94:	4b39      	ldr	r3, [pc, #228]	; (801bd7c <udp_bind+0xfc>)
 801bc96:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801bc98:	68fb      	ldr	r3, [r7, #12]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d109      	bne.n	801bcb2 <udp_bind+0x32>
 801bc9e:	4b38      	ldr	r3, [pc, #224]	; (801bd80 <udp_bind+0x100>)
 801bca0:	f240 32b7 	movw	r2, #951	; 0x3b7
 801bca4:	4937      	ldr	r1, [pc, #220]	; (801bd84 <udp_bind+0x104>)
 801bca6:	4838      	ldr	r0, [pc, #224]	; (801bd88 <udp_bind+0x108>)
 801bca8:	f005 f890 	bl	8020dcc <iprintf>
 801bcac:	f06f 030f 	mvn.w	r3, #15
 801bcb0:	e060      	b.n	801bd74 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801bcb2:	2300      	movs	r3, #0
 801bcb4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bcb6:	4b35      	ldr	r3, [pc, #212]	; (801bd8c <udp_bind+0x10c>)
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	617b      	str	r3, [r7, #20]
 801bcbc:	e009      	b.n	801bcd2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801bcbe:	68fa      	ldr	r2, [r7, #12]
 801bcc0:	697b      	ldr	r3, [r7, #20]
 801bcc2:	429a      	cmp	r2, r3
 801bcc4:	d102      	bne.n	801bccc <udp_bind+0x4c>
      rebind = 1;
 801bcc6:	2301      	movs	r3, #1
 801bcc8:	74fb      	strb	r3, [r7, #19]
      break;
 801bcca:	e005      	b.n	801bcd8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bccc:	697b      	ldr	r3, [r7, #20]
 801bcce:	68db      	ldr	r3, [r3, #12]
 801bcd0:	617b      	str	r3, [r7, #20]
 801bcd2:	697b      	ldr	r3, [r7, #20]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d1f2      	bne.n	801bcbe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801bcd8:	88fb      	ldrh	r3, [r7, #6]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d109      	bne.n	801bcf2 <udp_bind+0x72>
    port = udp_new_port();
 801bcde:	f7ff fc35 	bl	801b54c <udp_new_port>
 801bce2:	4603      	mov	r3, r0
 801bce4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801bce6:	88fb      	ldrh	r3, [r7, #6]
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d12c      	bne.n	801bd46 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801bcec:	f06f 0307 	mvn.w	r3, #7
 801bcf0:	e040      	b.n	801bd74 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bcf2:	4b26      	ldr	r3, [pc, #152]	; (801bd8c <udp_bind+0x10c>)
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	617b      	str	r3, [r7, #20]
 801bcf8:	e022      	b.n	801bd40 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801bcfa:	68fa      	ldr	r2, [r7, #12]
 801bcfc:	697b      	ldr	r3, [r7, #20]
 801bcfe:	429a      	cmp	r2, r3
 801bd00:	d01b      	beq.n	801bd3a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801bd02:	697b      	ldr	r3, [r7, #20]
 801bd04:	8a5b      	ldrh	r3, [r3, #18]
 801bd06:	88fa      	ldrh	r2, [r7, #6]
 801bd08:	429a      	cmp	r2, r3
 801bd0a:	d116      	bne.n	801bd3a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bd0c:	697b      	ldr	r3, [r7, #20]
 801bd0e:	681a      	ldr	r2, [r3, #0]
 801bd10:	68bb      	ldr	r3, [r7, #8]
 801bd12:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801bd14:	429a      	cmp	r2, r3
 801bd16:	d00d      	beq.n	801bd34 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bd18:	68bb      	ldr	r3, [r7, #8]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d00a      	beq.n	801bd34 <udp_bind+0xb4>
 801bd1e:	68bb      	ldr	r3, [r7, #8]
 801bd20:	681b      	ldr	r3, [r3, #0]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d006      	beq.n	801bd34 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801bd26:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d003      	beq.n	801bd34 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801bd2c:	697b      	ldr	r3, [r7, #20]
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d102      	bne.n	801bd3a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801bd34:	f06f 0307 	mvn.w	r3, #7
 801bd38:	e01c      	b.n	801bd74 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bd3a:	697b      	ldr	r3, [r7, #20]
 801bd3c:	68db      	ldr	r3, [r3, #12]
 801bd3e:	617b      	str	r3, [r7, #20]
 801bd40:	697b      	ldr	r3, [r7, #20]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d1d9      	bne.n	801bcfa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801bd46:	68bb      	ldr	r3, [r7, #8]
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d002      	beq.n	801bd52 <udp_bind+0xd2>
 801bd4c:	68bb      	ldr	r3, [r7, #8]
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	e000      	b.n	801bd54 <udp_bind+0xd4>
 801bd52:	2300      	movs	r3, #0
 801bd54:	68fa      	ldr	r2, [r7, #12]
 801bd56:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801bd58:	68fb      	ldr	r3, [r7, #12]
 801bd5a:	88fa      	ldrh	r2, [r7, #6]
 801bd5c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801bd5e:	7cfb      	ldrb	r3, [r7, #19]
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d106      	bne.n	801bd72 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801bd64:	4b09      	ldr	r3, [pc, #36]	; (801bd8c <udp_bind+0x10c>)
 801bd66:	681a      	ldr	r2, [r3, #0]
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801bd6c:	4a07      	ldr	r2, [pc, #28]	; (801bd8c <udp_bind+0x10c>)
 801bd6e:	68fb      	ldr	r3, [r7, #12]
 801bd70:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801bd72:	2300      	movs	r3, #0
}
 801bd74:	4618      	mov	r0, r3
 801bd76:	3718      	adds	r7, #24
 801bd78:	46bd      	mov	sp, r7
 801bd7a:	bd80      	pop	{r7, pc}
 801bd7c:	08026684 	.word	0x08026684
 801bd80:	080254d0 	.word	0x080254d0
 801bd84:	08025798 	.word	0x08025798
 801bd88:	08025524 	.word	0x08025524
 801bd8c:	20016dc8 	.word	0x20016dc8

0801bd90 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bd90:	b580      	push	{r7, lr}
 801bd92:	b086      	sub	sp, #24
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	60f8      	str	r0, [r7, #12]
 801bd98:	60b9      	str	r1, [r7, #8]
 801bd9a:	4613      	mov	r3, r2
 801bd9c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801bd9e:	68fb      	ldr	r3, [r7, #12]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d109      	bne.n	801bdb8 <udp_connect+0x28>
 801bda4:	4b2c      	ldr	r3, [pc, #176]	; (801be58 <udp_connect+0xc8>)
 801bda6:	f240 4235 	movw	r2, #1077	; 0x435
 801bdaa:	492c      	ldr	r1, [pc, #176]	; (801be5c <udp_connect+0xcc>)
 801bdac:	482c      	ldr	r0, [pc, #176]	; (801be60 <udp_connect+0xd0>)
 801bdae:	f005 f80d 	bl	8020dcc <iprintf>
 801bdb2:	f06f 030f 	mvn.w	r3, #15
 801bdb6:	e04b      	b.n	801be50 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801bdb8:	68bb      	ldr	r3, [r7, #8]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d109      	bne.n	801bdd2 <udp_connect+0x42>
 801bdbe:	4b26      	ldr	r3, [pc, #152]	; (801be58 <udp_connect+0xc8>)
 801bdc0:	f240 4236 	movw	r2, #1078	; 0x436
 801bdc4:	4927      	ldr	r1, [pc, #156]	; (801be64 <udp_connect+0xd4>)
 801bdc6:	4826      	ldr	r0, [pc, #152]	; (801be60 <udp_connect+0xd0>)
 801bdc8:	f005 f800 	bl	8020dcc <iprintf>
 801bdcc:	f06f 030f 	mvn.w	r3, #15
 801bdd0:	e03e      	b.n	801be50 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801bdd2:	68fb      	ldr	r3, [r7, #12]
 801bdd4:	8a5b      	ldrh	r3, [r3, #18]
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	d10f      	bne.n	801bdfa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bdda:	68f9      	ldr	r1, [r7, #12]
 801bddc:	68fb      	ldr	r3, [r7, #12]
 801bdde:	8a5b      	ldrh	r3, [r3, #18]
 801bde0:	461a      	mov	r2, r3
 801bde2:	68f8      	ldr	r0, [r7, #12]
 801bde4:	f7ff ff4c 	bl	801bc80 <udp_bind>
 801bde8:	4603      	mov	r3, r0
 801bdea:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801bdec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d002      	beq.n	801bdfa <udp_connect+0x6a>
      return err;
 801bdf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bdf8:	e02a      	b.n	801be50 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801bdfa:	68bb      	ldr	r3, [r7, #8]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d002      	beq.n	801be06 <udp_connect+0x76>
 801be00:	68bb      	ldr	r3, [r7, #8]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	e000      	b.n	801be08 <udp_connect+0x78>
 801be06:	2300      	movs	r3, #0
 801be08:	68fa      	ldr	r2, [r7, #12]
 801be0a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801be0c:	68fb      	ldr	r3, [r7, #12]
 801be0e:	88fa      	ldrh	r2, [r7, #6]
 801be10:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	7c1b      	ldrb	r3, [r3, #16]
 801be16:	f043 0304 	orr.w	r3, r3, #4
 801be1a:	b2da      	uxtb	r2, r3
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801be20:	4b11      	ldr	r3, [pc, #68]	; (801be68 <udp_connect+0xd8>)
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	617b      	str	r3, [r7, #20]
 801be26:	e008      	b.n	801be3a <udp_connect+0xaa>
    if (pcb == ipcb) {
 801be28:	68fa      	ldr	r2, [r7, #12]
 801be2a:	697b      	ldr	r3, [r7, #20]
 801be2c:	429a      	cmp	r2, r3
 801be2e:	d101      	bne.n	801be34 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801be30:	2300      	movs	r3, #0
 801be32:	e00d      	b.n	801be50 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801be34:	697b      	ldr	r3, [r7, #20]
 801be36:	68db      	ldr	r3, [r3, #12]
 801be38:	617b      	str	r3, [r7, #20]
 801be3a:	697b      	ldr	r3, [r7, #20]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d1f3      	bne.n	801be28 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801be40:	4b09      	ldr	r3, [pc, #36]	; (801be68 <udp_connect+0xd8>)
 801be42:	681a      	ldr	r2, [r3, #0]
 801be44:	68fb      	ldr	r3, [r7, #12]
 801be46:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801be48:	4a07      	ldr	r2, [pc, #28]	; (801be68 <udp_connect+0xd8>)
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801be4e:	2300      	movs	r3, #0
}
 801be50:	4618      	mov	r0, r3
 801be52:	3718      	adds	r7, #24
 801be54:	46bd      	mov	sp, r7
 801be56:	bd80      	pop	{r7, pc}
 801be58:	080254d0 	.word	0x080254d0
 801be5c:	080257b0 	.word	0x080257b0
 801be60:	08025524 	.word	0x08025524
 801be64:	080257cc 	.word	0x080257cc
 801be68:	20016dc8 	.word	0x20016dc8

0801be6c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801be6c:	b580      	push	{r7, lr}
 801be6e:	b082      	sub	sp, #8
 801be70:	af00      	add	r7, sp, #0
 801be72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d107      	bne.n	801be8a <udp_disconnect+0x1e>
 801be7a:	4b0d      	ldr	r3, [pc, #52]	; (801beb0 <udp_disconnect+0x44>)
 801be7c:	f240 426a 	movw	r2, #1130	; 0x46a
 801be80:	490c      	ldr	r1, [pc, #48]	; (801beb4 <udp_disconnect+0x48>)
 801be82:	480d      	ldr	r0, [pc, #52]	; (801beb8 <udp_disconnect+0x4c>)
 801be84:	f004 ffa2 	bl	8020dcc <iprintf>
 801be88:	e00f      	b.n	801beaa <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	2200      	movs	r2, #0
 801be8e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	2200      	movs	r2, #0
 801be94:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	2200      	movs	r2, #0
 801be9a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	7c1b      	ldrb	r3, [r3, #16]
 801bea0:	f023 0304 	bic.w	r3, r3, #4
 801bea4:	b2da      	uxtb	r2, r3
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	741a      	strb	r2, [r3, #16]
}
 801beaa:	3708      	adds	r7, #8
 801beac:	46bd      	mov	sp, r7
 801beae:	bd80      	pop	{r7, pc}
 801beb0:	080254d0 	.word	0x080254d0
 801beb4:	080257e8 	.word	0x080257e8
 801beb8:	08025524 	.word	0x08025524

0801bebc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801bebc:	b580      	push	{r7, lr}
 801bebe:	b084      	sub	sp, #16
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	60f8      	str	r0, [r7, #12]
 801bec4:	60b9      	str	r1, [r7, #8]
 801bec6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801bec8:	68fb      	ldr	r3, [r7, #12]
 801beca:	2b00      	cmp	r3, #0
 801becc:	d107      	bne.n	801bede <udp_recv+0x22>
 801bece:	4b08      	ldr	r3, [pc, #32]	; (801bef0 <udp_recv+0x34>)
 801bed0:	f240 428a 	movw	r2, #1162	; 0x48a
 801bed4:	4907      	ldr	r1, [pc, #28]	; (801bef4 <udp_recv+0x38>)
 801bed6:	4808      	ldr	r0, [pc, #32]	; (801bef8 <udp_recv+0x3c>)
 801bed8:	f004 ff78 	bl	8020dcc <iprintf>
 801bedc:	e005      	b.n	801beea <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	68ba      	ldr	r2, [r7, #8]
 801bee2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	687a      	ldr	r2, [r7, #4]
 801bee8:	61da      	str	r2, [r3, #28]
}
 801beea:	3710      	adds	r7, #16
 801beec:	46bd      	mov	sp, r7
 801beee:	bd80      	pop	{r7, pc}
 801bef0:	080254d0 	.word	0x080254d0
 801bef4:	08025804 	.word	0x08025804
 801bef8:	08025524 	.word	0x08025524

0801befc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801befc:	b580      	push	{r7, lr}
 801befe:	b084      	sub	sp, #16
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d107      	bne.n	801bf1a <udp_remove+0x1e>
 801bf0a:	4b19      	ldr	r3, [pc, #100]	; (801bf70 <udp_remove+0x74>)
 801bf0c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801bf10:	4918      	ldr	r1, [pc, #96]	; (801bf74 <udp_remove+0x78>)
 801bf12:	4819      	ldr	r0, [pc, #100]	; (801bf78 <udp_remove+0x7c>)
 801bf14:	f004 ff5a 	bl	8020dcc <iprintf>
 801bf18:	e026      	b.n	801bf68 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801bf1a:	4b18      	ldr	r3, [pc, #96]	; (801bf7c <udp_remove+0x80>)
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	687a      	ldr	r2, [r7, #4]
 801bf20:	429a      	cmp	r2, r3
 801bf22:	d105      	bne.n	801bf30 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801bf24:	4b15      	ldr	r3, [pc, #84]	; (801bf7c <udp_remove+0x80>)
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	68db      	ldr	r3, [r3, #12]
 801bf2a:	4a14      	ldr	r2, [pc, #80]	; (801bf7c <udp_remove+0x80>)
 801bf2c:	6013      	str	r3, [r2, #0]
 801bf2e:	e017      	b.n	801bf60 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801bf30:	4b12      	ldr	r3, [pc, #72]	; (801bf7c <udp_remove+0x80>)
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	60fb      	str	r3, [r7, #12]
 801bf36:	e010      	b.n	801bf5a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801bf38:	68fb      	ldr	r3, [r7, #12]
 801bf3a:	68db      	ldr	r3, [r3, #12]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d009      	beq.n	801bf54 <udp_remove+0x58>
 801bf40:	68fb      	ldr	r3, [r7, #12]
 801bf42:	68db      	ldr	r3, [r3, #12]
 801bf44:	687a      	ldr	r2, [r7, #4]
 801bf46:	429a      	cmp	r2, r3
 801bf48:	d104      	bne.n	801bf54 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	68da      	ldr	r2, [r3, #12]
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	60da      	str	r2, [r3, #12]
        break;
 801bf52:	e005      	b.n	801bf60 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	68db      	ldr	r3, [r3, #12]
 801bf58:	60fb      	str	r3, [r7, #12]
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d1eb      	bne.n	801bf38 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801bf60:	6879      	ldr	r1, [r7, #4]
 801bf62:	2000      	movs	r0, #0
 801bf64:	f7f7 fe58 	bl	8013c18 <memp_free>
}
 801bf68:	3710      	adds	r7, #16
 801bf6a:	46bd      	mov	sp, r7
 801bf6c:	bd80      	pop	{r7, pc}
 801bf6e:	bf00      	nop
 801bf70:	080254d0 	.word	0x080254d0
 801bf74:	0802581c 	.word	0x0802581c
 801bf78:	08025524 	.word	0x08025524
 801bf7c:	20016dc8 	.word	0x20016dc8

0801bf80 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801bf80:	b580      	push	{r7, lr}
 801bf82:	b082      	sub	sp, #8
 801bf84:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801bf86:	2000      	movs	r0, #0
 801bf88:	f7f7 fdf4 	bl	8013b74 <memp_malloc>
 801bf8c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d007      	beq.n	801bfa4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801bf94:	2220      	movs	r2, #32
 801bf96:	2100      	movs	r1, #0
 801bf98:	6878      	ldr	r0, [r7, #4]
 801bf9a:	f004 fe55 	bl	8020c48 <memset>
    pcb->ttl = UDP_TTL;
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	22ff      	movs	r2, #255	; 0xff
 801bfa2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801bfa4:	687b      	ldr	r3, [r7, #4]
}
 801bfa6:	4618      	mov	r0, r3
 801bfa8:	3708      	adds	r7, #8
 801bfaa:	46bd      	mov	sp, r7
 801bfac:	bd80      	pop	{r7, pc}

0801bfae <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801bfae:	b580      	push	{r7, lr}
 801bfb0:	b084      	sub	sp, #16
 801bfb2:	af00      	add	r7, sp, #0
 801bfb4:	4603      	mov	r3, r0
 801bfb6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801bfb8:	f7ff ffe2 	bl	801bf80 <udp_new>
 801bfbc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801bfbe:	68fb      	ldr	r3, [r7, #12]
}
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	3710      	adds	r7, #16
 801bfc4:	46bd      	mov	sp, r7
 801bfc6:	bd80      	pop	{r7, pc}

0801bfc8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801bfc8:	b480      	push	{r7}
 801bfca:	b085      	sub	sp, #20
 801bfcc:	af00      	add	r7, sp, #0
 801bfce:	6078      	str	r0, [r7, #4]
 801bfd0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d01e      	beq.n	801c016 <udp_netif_ip_addr_changed+0x4e>
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d01a      	beq.n	801c016 <udp_netif_ip_addr_changed+0x4e>
 801bfe0:	683b      	ldr	r3, [r7, #0]
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d017      	beq.n	801c016 <udp_netif_ip_addr_changed+0x4e>
 801bfe6:	683b      	ldr	r3, [r7, #0]
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d013      	beq.n	801c016 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bfee:	4b0d      	ldr	r3, [pc, #52]	; (801c024 <udp_netif_ip_addr_changed+0x5c>)
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	60fb      	str	r3, [r7, #12]
 801bff4:	e00c      	b.n	801c010 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801bff6:	68fb      	ldr	r3, [r7, #12]
 801bff8:	681a      	ldr	r2, [r3, #0]
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	429a      	cmp	r2, r3
 801c000:	d103      	bne.n	801c00a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c002:	683b      	ldr	r3, [r7, #0]
 801c004:	681a      	ldr	r2, [r3, #0]
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c00a:	68fb      	ldr	r3, [r7, #12]
 801c00c:	68db      	ldr	r3, [r3, #12]
 801c00e:	60fb      	str	r3, [r7, #12]
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	2b00      	cmp	r3, #0
 801c014:	d1ef      	bne.n	801bff6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c016:	bf00      	nop
 801c018:	3714      	adds	r7, #20
 801c01a:	46bd      	mov	sp, r7
 801c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c020:	4770      	bx	lr
 801c022:	bf00      	nop
 801c024:	20016dc8 	.word	0x20016dc8

0801c028 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801c028:	b580      	push	{r7, lr}
 801c02a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801c02c:	4b20      	ldr	r3, [pc, #128]	; (801c0b0 <dhcp_inc_pcb_refcount+0x88>)
 801c02e:	781b      	ldrb	r3, [r3, #0]
 801c030:	2b00      	cmp	r3, #0
 801c032:	d133      	bne.n	801c09c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801c034:	4b1f      	ldr	r3, [pc, #124]	; (801c0b4 <dhcp_inc_pcb_refcount+0x8c>)
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d005      	beq.n	801c048 <dhcp_inc_pcb_refcount+0x20>
 801c03c:	4b1e      	ldr	r3, [pc, #120]	; (801c0b8 <dhcp_inc_pcb_refcount+0x90>)
 801c03e:	22e5      	movs	r2, #229	; 0xe5
 801c040:	491e      	ldr	r1, [pc, #120]	; (801c0bc <dhcp_inc_pcb_refcount+0x94>)
 801c042:	481f      	ldr	r0, [pc, #124]	; (801c0c0 <dhcp_inc_pcb_refcount+0x98>)
 801c044:	f004 fec2 	bl	8020dcc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801c048:	f7ff ff9a 	bl	801bf80 <udp_new>
 801c04c:	4603      	mov	r3, r0
 801c04e:	4a19      	ldr	r2, [pc, #100]	; (801c0b4 <dhcp_inc_pcb_refcount+0x8c>)
 801c050:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801c052:	4b18      	ldr	r3, [pc, #96]	; (801c0b4 <dhcp_inc_pcb_refcount+0x8c>)
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d102      	bne.n	801c060 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801c05a:	f04f 33ff 	mov.w	r3, #4294967295
 801c05e:	e024      	b.n	801c0aa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c060:	4b14      	ldr	r3, [pc, #80]	; (801c0b4 <dhcp_inc_pcb_refcount+0x8c>)
 801c062:	681b      	ldr	r3, [r3, #0]
 801c064:	7a5a      	ldrb	r2, [r3, #9]
 801c066:	4b13      	ldr	r3, [pc, #76]	; (801c0b4 <dhcp_inc_pcb_refcount+0x8c>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	f042 0220 	orr.w	r2, r2, #32
 801c06e:	b2d2      	uxtb	r2, r2
 801c070:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c072:	4b10      	ldr	r3, [pc, #64]	; (801c0b4 <dhcp_inc_pcb_refcount+0x8c>)
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	2244      	movs	r2, #68	; 0x44
 801c078:	4912      	ldr	r1, [pc, #72]	; (801c0c4 <dhcp_inc_pcb_refcount+0x9c>)
 801c07a:	4618      	mov	r0, r3
 801c07c:	f7ff fe00 	bl	801bc80 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801c080:	4b0c      	ldr	r3, [pc, #48]	; (801c0b4 <dhcp_inc_pcb_refcount+0x8c>)
 801c082:	681b      	ldr	r3, [r3, #0]
 801c084:	2243      	movs	r2, #67	; 0x43
 801c086:	490f      	ldr	r1, [pc, #60]	; (801c0c4 <dhcp_inc_pcb_refcount+0x9c>)
 801c088:	4618      	mov	r0, r3
 801c08a:	f7ff fe81 	bl	801bd90 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801c08e:	4b09      	ldr	r3, [pc, #36]	; (801c0b4 <dhcp_inc_pcb_refcount+0x8c>)
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	2200      	movs	r2, #0
 801c094:	490c      	ldr	r1, [pc, #48]	; (801c0c8 <dhcp_inc_pcb_refcount+0xa0>)
 801c096:	4618      	mov	r0, r3
 801c098:	f7ff ff10 	bl	801bebc <udp_recv>
  }

  dhcp_pcb_refcount++;
 801c09c:	4b04      	ldr	r3, [pc, #16]	; (801c0b0 <dhcp_inc_pcb_refcount+0x88>)
 801c09e:	781b      	ldrb	r3, [r3, #0]
 801c0a0:	3301      	adds	r3, #1
 801c0a2:	b2da      	uxtb	r2, r3
 801c0a4:	4b02      	ldr	r3, [pc, #8]	; (801c0b0 <dhcp_inc_pcb_refcount+0x88>)
 801c0a6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801c0a8:	2300      	movs	r3, #0
}
 801c0aa:	4618      	mov	r0, r3
 801c0ac:	bd80      	pop	{r7, pc}
 801c0ae:	bf00      	nop
 801c0b0:	20005730 	.word	0x20005730
 801c0b4:	2000572c 	.word	0x2000572c
 801c0b8:	08025834 	.word	0x08025834
 801c0bc:	0802586c 	.word	0x0802586c
 801c0c0:	08025894 	.word	0x08025894
 801c0c4:	08026684 	.word	0x08026684
 801c0c8:	0801d9fd 	.word	0x0801d9fd

0801c0cc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801c0cc:	b580      	push	{r7, lr}
 801c0ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c0d0:	4b0e      	ldr	r3, [pc, #56]	; (801c10c <dhcp_dec_pcb_refcount+0x40>)
 801c0d2:	781b      	ldrb	r3, [r3, #0]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d105      	bne.n	801c0e4 <dhcp_dec_pcb_refcount+0x18>
 801c0d8:	4b0d      	ldr	r3, [pc, #52]	; (801c110 <dhcp_dec_pcb_refcount+0x44>)
 801c0da:	22ff      	movs	r2, #255	; 0xff
 801c0dc:	490d      	ldr	r1, [pc, #52]	; (801c114 <dhcp_dec_pcb_refcount+0x48>)
 801c0de:	480e      	ldr	r0, [pc, #56]	; (801c118 <dhcp_dec_pcb_refcount+0x4c>)
 801c0e0:	f004 fe74 	bl	8020dcc <iprintf>
  dhcp_pcb_refcount--;
 801c0e4:	4b09      	ldr	r3, [pc, #36]	; (801c10c <dhcp_dec_pcb_refcount+0x40>)
 801c0e6:	781b      	ldrb	r3, [r3, #0]
 801c0e8:	3b01      	subs	r3, #1
 801c0ea:	b2da      	uxtb	r2, r3
 801c0ec:	4b07      	ldr	r3, [pc, #28]	; (801c10c <dhcp_dec_pcb_refcount+0x40>)
 801c0ee:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801c0f0:	4b06      	ldr	r3, [pc, #24]	; (801c10c <dhcp_dec_pcb_refcount+0x40>)
 801c0f2:	781b      	ldrb	r3, [r3, #0]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d107      	bne.n	801c108 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801c0f8:	4b08      	ldr	r3, [pc, #32]	; (801c11c <dhcp_dec_pcb_refcount+0x50>)
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	f7ff fefd 	bl	801befc <udp_remove>
    dhcp_pcb = NULL;
 801c102:	4b06      	ldr	r3, [pc, #24]	; (801c11c <dhcp_dec_pcb_refcount+0x50>)
 801c104:	2200      	movs	r2, #0
 801c106:	601a      	str	r2, [r3, #0]
  }
}
 801c108:	bf00      	nop
 801c10a:	bd80      	pop	{r7, pc}
 801c10c:	20005730 	.word	0x20005730
 801c110:	08025834 	.word	0x08025834
 801c114:	080258bc 	.word	0x080258bc
 801c118:	08025894 	.word	0x08025894
 801c11c:	2000572c 	.word	0x2000572c

0801c120 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801c120:	b580      	push	{r7, lr}
 801c122:	b084      	sub	sp, #16
 801c124:	af00      	add	r7, sp, #0
 801c126:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c12c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c12e:	210c      	movs	r1, #12
 801c130:	68f8      	ldr	r0, [r7, #12]
 801c132:	f001 f875 	bl	801d220 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c136:	4b06      	ldr	r3, [pc, #24]	; (801c150 <dhcp_handle_nak+0x30>)
 801c138:	4a05      	ldr	r2, [pc, #20]	; (801c150 <dhcp_handle_nak+0x30>)
 801c13a:	4905      	ldr	r1, [pc, #20]	; (801c150 <dhcp_handle_nak+0x30>)
 801c13c:	6878      	ldr	r0, [r7, #4]
 801c13e:	f7f7 ff0d 	bl	8013f5c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801c142:	6878      	ldr	r0, [r7, #4]
 801c144:	f000 fc68 	bl	801ca18 <dhcp_discover>
}
 801c148:	bf00      	nop
 801c14a:	3710      	adds	r7, #16
 801c14c:	46bd      	mov	sp, r7
 801c14e:	bd80      	pop	{r7, pc}
 801c150:	08026684 	.word	0x08026684

0801c154 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801c154:	b580      	push	{r7, lr}
 801c156:	b084      	sub	sp, #16
 801c158:	af00      	add	r7, sp, #0
 801c15a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c160:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801c162:	2108      	movs	r1, #8
 801c164:	68f8      	ldr	r0, [r7, #12]
 801c166:	f001 f85b 	bl	801d220 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801c16a:	68fb      	ldr	r3, [r7, #12]
 801c16c:	331c      	adds	r3, #28
 801c16e:	2200      	movs	r2, #0
 801c170:	4619      	mov	r1, r3
 801c172:	6878      	ldr	r0, [r7, #4]
 801c174:	f002 fb8c 	bl	801e890 <etharp_query>
 801c178:	4603      	mov	r3, r0
 801c17a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801c17c:	68fb      	ldr	r3, [r7, #12]
 801c17e:	799b      	ldrb	r3, [r3, #6]
 801c180:	2bff      	cmp	r3, #255	; 0xff
 801c182:	d005      	beq.n	801c190 <dhcp_check+0x3c>
    dhcp->tries++;
 801c184:	68fb      	ldr	r3, [r7, #12]
 801c186:	799b      	ldrb	r3, [r3, #6]
 801c188:	3301      	adds	r3, #1
 801c18a:	b2da      	uxtb	r2, r3
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801c190:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801c194:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c196:	893b      	ldrh	r3, [r7, #8]
 801c198:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c19c:	4a06      	ldr	r2, [pc, #24]	; (801c1b8 <dhcp_check+0x64>)
 801c19e:	fb82 1203 	smull	r1, r2, r2, r3
 801c1a2:	1152      	asrs	r2, r2, #5
 801c1a4:	17db      	asrs	r3, r3, #31
 801c1a6:	1ad3      	subs	r3, r2, r3
 801c1a8:	b29a      	uxth	r2, r3
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801c1ae:	bf00      	nop
 801c1b0:	3710      	adds	r7, #16
 801c1b2:	46bd      	mov	sp, r7
 801c1b4:	bd80      	pop	{r7, pc}
 801c1b6:	bf00      	nop
 801c1b8:	10624dd3 	.word	0x10624dd3

0801c1bc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801c1bc:	b580      	push	{r7, lr}
 801c1be:	b084      	sub	sp, #16
 801c1c0:	af00      	add	r7, sp, #0
 801c1c2:	6078      	str	r0, [r7, #4]
 801c1c4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801c1cc:	4b0c      	ldr	r3, [pc, #48]	; (801c200 <dhcp_handle_offer+0x44>)
 801c1ce:	789b      	ldrb	r3, [r3, #2]
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d011      	beq.n	801c1f8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801c1da:	4b0a      	ldr	r3, [pc, #40]	; (801c204 <dhcp_handle_offer+0x48>)
 801c1dc:	689b      	ldr	r3, [r3, #8]
 801c1de:	4618      	mov	r0, r3
 801c1e0:	f7f6 f851 	bl	8012286 <lwip_htonl>
 801c1e4:	4602      	mov	r2, r0
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c1ea:	683b      	ldr	r3, [r7, #0]
 801c1ec:	691a      	ldr	r2, [r3, #16]
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801c1f2:	6878      	ldr	r0, [r7, #4]
 801c1f4:	f000 f808 	bl	801c208 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801c1f8:	bf00      	nop
 801c1fa:	3710      	adds	r7, #16
 801c1fc:	46bd      	mov	sp, r7
 801c1fe:	bd80      	pop	{r7, pc}
 801c200:	20016dcc 	.word	0x20016dcc
 801c204:	20016dd8 	.word	0x20016dd8

0801c208 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801c208:	b5b0      	push	{r4, r5, r7, lr}
 801c20a:	b08a      	sub	sp, #40	; 0x28
 801c20c:	af02      	add	r7, sp, #8
 801c20e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	2b00      	cmp	r3, #0
 801c214:	d109      	bne.n	801c22a <dhcp_select+0x22>
 801c216:	4b71      	ldr	r3, [pc, #452]	; (801c3dc <dhcp_select+0x1d4>)
 801c218:	f240 1277 	movw	r2, #375	; 0x177
 801c21c:	4970      	ldr	r1, [pc, #448]	; (801c3e0 <dhcp_select+0x1d8>)
 801c21e:	4871      	ldr	r0, [pc, #452]	; (801c3e4 <dhcp_select+0x1dc>)
 801c220:	f004 fdd4 	bl	8020dcc <iprintf>
 801c224:	f06f 030f 	mvn.w	r3, #15
 801c228:	e0d3      	b.n	801c3d2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c22e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801c230:	69bb      	ldr	r3, [r7, #24]
 801c232:	2b00      	cmp	r3, #0
 801c234:	d109      	bne.n	801c24a <dhcp_select+0x42>
 801c236:	4b69      	ldr	r3, [pc, #420]	; (801c3dc <dhcp_select+0x1d4>)
 801c238:	f240 1279 	movw	r2, #377	; 0x179
 801c23c:	496a      	ldr	r1, [pc, #424]	; (801c3e8 <dhcp_select+0x1e0>)
 801c23e:	4869      	ldr	r0, [pc, #420]	; (801c3e4 <dhcp_select+0x1dc>)
 801c240:	f004 fdc4 	bl	8020dcc <iprintf>
 801c244:	f06f 0305 	mvn.w	r3, #5
 801c248:	e0c3      	b.n	801c3d2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801c24a:	2101      	movs	r1, #1
 801c24c:	69b8      	ldr	r0, [r7, #24]
 801c24e:	f000 ffe7 	bl	801d220 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c252:	f107 030c 	add.w	r3, r7, #12
 801c256:	2203      	movs	r2, #3
 801c258:	69b9      	ldr	r1, [r7, #24]
 801c25a:	6878      	ldr	r0, [r7, #4]
 801c25c:	f001 fc9c 	bl	801db98 <dhcp_create_msg>
 801c260:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c262:	697b      	ldr	r3, [r7, #20]
 801c264:	2b00      	cmp	r3, #0
 801c266:	f000 8085 	beq.w	801c374 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c26a:	697b      	ldr	r3, [r7, #20]
 801c26c:	685b      	ldr	r3, [r3, #4]
 801c26e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c270:	89b8      	ldrh	r0, [r7, #12]
 801c272:	693b      	ldr	r3, [r7, #16]
 801c274:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c278:	2302      	movs	r3, #2
 801c27a:	2239      	movs	r2, #57	; 0x39
 801c27c:	f000 ffea 	bl	801d254 <dhcp_option>
 801c280:	4603      	mov	r3, r0
 801c282:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c284:	89b8      	ldrh	r0, [r7, #12]
 801c286:	693b      	ldr	r3, [r7, #16]
 801c288:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c290:	461a      	mov	r2, r3
 801c292:	f001 f839 	bl	801d308 <dhcp_option_short>
 801c296:	4603      	mov	r3, r0
 801c298:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c29a:	89b8      	ldrh	r0, [r7, #12]
 801c29c:	693b      	ldr	r3, [r7, #16]
 801c29e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c2a2:	2304      	movs	r3, #4
 801c2a4:	2232      	movs	r2, #50	; 0x32
 801c2a6:	f000 ffd5 	bl	801d254 <dhcp_option>
 801c2aa:	4603      	mov	r3, r0
 801c2ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c2ae:	89bc      	ldrh	r4, [r7, #12]
 801c2b0:	693b      	ldr	r3, [r7, #16]
 801c2b2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c2b6:	69bb      	ldr	r3, [r7, #24]
 801c2b8:	69db      	ldr	r3, [r3, #28]
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	f7f5 ffe3 	bl	8012286 <lwip_htonl>
 801c2c0:	4603      	mov	r3, r0
 801c2c2:	461a      	mov	r2, r3
 801c2c4:	4629      	mov	r1, r5
 801c2c6:	4620      	mov	r0, r4
 801c2c8:	f001 f850 	bl	801d36c <dhcp_option_long>
 801c2cc:	4603      	mov	r3, r0
 801c2ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c2d0:	89b8      	ldrh	r0, [r7, #12]
 801c2d2:	693b      	ldr	r3, [r7, #16]
 801c2d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c2d8:	2304      	movs	r3, #4
 801c2da:	2236      	movs	r2, #54	; 0x36
 801c2dc:	f000 ffba 	bl	801d254 <dhcp_option>
 801c2e0:	4603      	mov	r3, r0
 801c2e2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c2e4:	89bc      	ldrh	r4, [r7, #12]
 801c2e6:	693b      	ldr	r3, [r7, #16]
 801c2e8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c2ec:	69bb      	ldr	r3, [r7, #24]
 801c2ee:	699b      	ldr	r3, [r3, #24]
 801c2f0:	4618      	mov	r0, r3
 801c2f2:	f7f5 ffc8 	bl	8012286 <lwip_htonl>
 801c2f6:	4603      	mov	r3, r0
 801c2f8:	461a      	mov	r2, r3
 801c2fa:	4629      	mov	r1, r5
 801c2fc:	4620      	mov	r0, r4
 801c2fe:	f001 f835 	bl	801d36c <dhcp_option_long>
 801c302:	4603      	mov	r3, r0
 801c304:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c306:	89b8      	ldrh	r0, [r7, #12]
 801c308:	693b      	ldr	r3, [r7, #16]
 801c30a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c30e:	2304      	movs	r3, #4
 801c310:	2237      	movs	r2, #55	; 0x37
 801c312:	f000 ff9f 	bl	801d254 <dhcp_option>
 801c316:	4603      	mov	r3, r0
 801c318:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c31a:	2300      	movs	r3, #0
 801c31c:	77bb      	strb	r3, [r7, #30]
 801c31e:	e00e      	b.n	801c33e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c320:	89b8      	ldrh	r0, [r7, #12]
 801c322:	693b      	ldr	r3, [r7, #16]
 801c324:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c328:	7fbb      	ldrb	r3, [r7, #30]
 801c32a:	4a30      	ldr	r2, [pc, #192]	; (801c3ec <dhcp_select+0x1e4>)
 801c32c:	5cd3      	ldrb	r3, [r2, r3]
 801c32e:	461a      	mov	r2, r3
 801c330:	f000 ffc4 	bl	801d2bc <dhcp_option_byte>
 801c334:	4603      	mov	r3, r0
 801c336:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c338:	7fbb      	ldrb	r3, [r7, #30]
 801c33a:	3301      	adds	r3, #1
 801c33c:	77bb      	strb	r3, [r7, #30]
 801c33e:	7fbb      	ldrb	r3, [r7, #30]
 801c340:	2b03      	cmp	r3, #3
 801c342:	d9ed      	bls.n	801c320 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c344:	89b8      	ldrh	r0, [r7, #12]
 801c346:	693b      	ldr	r3, [r7, #16]
 801c348:	33f0      	adds	r3, #240	; 0xf0
 801c34a:	697a      	ldr	r2, [r7, #20]
 801c34c:	4619      	mov	r1, r3
 801c34e:	f001 fcf9 	bl	801dd44 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c352:	4b27      	ldr	r3, [pc, #156]	; (801c3f0 <dhcp_select+0x1e8>)
 801c354:	6818      	ldr	r0, [r3, #0]
 801c356:	4b27      	ldr	r3, [pc, #156]	; (801c3f4 <dhcp_select+0x1ec>)
 801c358:	9301      	str	r3, [sp, #4]
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	9300      	str	r3, [sp, #0]
 801c35e:	2343      	movs	r3, #67	; 0x43
 801c360:	4a25      	ldr	r2, [pc, #148]	; (801c3f8 <dhcp_select+0x1f0>)
 801c362:	6979      	ldr	r1, [r7, #20]
 801c364:	f7ff fba6 	bl	801bab4 <udp_sendto_if_src>
 801c368:	4603      	mov	r3, r0
 801c36a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c36c:	6978      	ldr	r0, [r7, #20]
 801c36e:	f7f8 fb03 	bl	8014978 <pbuf_free>
 801c372:	e001      	b.n	801c378 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c374:	23ff      	movs	r3, #255	; 0xff
 801c376:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c378:	69bb      	ldr	r3, [r7, #24]
 801c37a:	799b      	ldrb	r3, [r3, #6]
 801c37c:	2bff      	cmp	r3, #255	; 0xff
 801c37e:	d005      	beq.n	801c38c <dhcp_select+0x184>
    dhcp->tries++;
 801c380:	69bb      	ldr	r3, [r7, #24]
 801c382:	799b      	ldrb	r3, [r3, #6]
 801c384:	3301      	adds	r3, #1
 801c386:	b2da      	uxtb	r2, r3
 801c388:	69bb      	ldr	r3, [r7, #24]
 801c38a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c38c:	69bb      	ldr	r3, [r7, #24]
 801c38e:	799b      	ldrb	r3, [r3, #6]
 801c390:	2b05      	cmp	r3, #5
 801c392:	d80d      	bhi.n	801c3b0 <dhcp_select+0x1a8>
 801c394:	69bb      	ldr	r3, [r7, #24]
 801c396:	799b      	ldrb	r3, [r3, #6]
 801c398:	461a      	mov	r2, r3
 801c39a:	2301      	movs	r3, #1
 801c39c:	4093      	lsls	r3, r2
 801c39e:	b29b      	uxth	r3, r3
 801c3a0:	461a      	mov	r2, r3
 801c3a2:	0152      	lsls	r2, r2, #5
 801c3a4:	1ad2      	subs	r2, r2, r3
 801c3a6:	0092      	lsls	r2, r2, #2
 801c3a8:	4413      	add	r3, r2
 801c3aa:	00db      	lsls	r3, r3, #3
 801c3ac:	b29b      	uxth	r3, r3
 801c3ae:	e001      	b.n	801c3b4 <dhcp_select+0x1ac>
 801c3b0:	f64e 2360 	movw	r3, #60000	; 0xea60
 801c3b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c3b6:	89fb      	ldrh	r3, [r7, #14]
 801c3b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c3bc:	4a0f      	ldr	r2, [pc, #60]	; (801c3fc <dhcp_select+0x1f4>)
 801c3be:	fb82 1203 	smull	r1, r2, r2, r3
 801c3c2:	1152      	asrs	r2, r2, #5
 801c3c4:	17db      	asrs	r3, r3, #31
 801c3c6:	1ad3      	subs	r3, r2, r3
 801c3c8:	b29a      	uxth	r2, r3
 801c3ca:	69bb      	ldr	r3, [r7, #24]
 801c3cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c3ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c3d2:	4618      	mov	r0, r3
 801c3d4:	3720      	adds	r7, #32
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	bdb0      	pop	{r4, r5, r7, pc}
 801c3da:	bf00      	nop
 801c3dc:	08025834 	.word	0x08025834
 801c3e0:	080258e0 	.word	0x080258e0
 801c3e4:	08025894 	.word	0x08025894
 801c3e8:	080258fc 	.word	0x080258fc
 801c3ec:	20000500 	.word	0x20000500
 801c3f0:	2000572c 	.word	0x2000572c
 801c3f4:	08026684 	.word	0x08026684
 801c3f8:	08026688 	.word	0x08026688
 801c3fc:	10624dd3 	.word	0x10624dd3

0801c400 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801c400:	b580      	push	{r7, lr}
 801c402:	b082      	sub	sp, #8
 801c404:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801c406:	4b27      	ldr	r3, [pc, #156]	; (801c4a4 <dhcp_coarse_tmr+0xa4>)
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	607b      	str	r3, [r7, #4]
 801c40c:	e042      	b.n	801c494 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c412:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801c414:	683b      	ldr	r3, [r7, #0]
 801c416:	2b00      	cmp	r3, #0
 801c418:	d039      	beq.n	801c48e <dhcp_coarse_tmr+0x8e>
 801c41a:	683b      	ldr	r3, [r7, #0]
 801c41c:	795b      	ldrb	r3, [r3, #5]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d035      	beq.n	801c48e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801c422:	683b      	ldr	r3, [r7, #0]
 801c424:	8a9b      	ldrh	r3, [r3, #20]
 801c426:	2b00      	cmp	r3, #0
 801c428:	d012      	beq.n	801c450 <dhcp_coarse_tmr+0x50>
 801c42a:	683b      	ldr	r3, [r7, #0]
 801c42c:	8a5b      	ldrh	r3, [r3, #18]
 801c42e:	3301      	adds	r3, #1
 801c430:	b29a      	uxth	r2, r3
 801c432:	683b      	ldr	r3, [r7, #0]
 801c434:	825a      	strh	r2, [r3, #18]
 801c436:	683b      	ldr	r3, [r7, #0]
 801c438:	8a5a      	ldrh	r2, [r3, #18]
 801c43a:	683b      	ldr	r3, [r7, #0]
 801c43c:	8a9b      	ldrh	r3, [r3, #20]
 801c43e:	429a      	cmp	r2, r3
 801c440:	d106      	bne.n	801c450 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801c442:	6878      	ldr	r0, [r7, #4]
 801c444:	f000 fe52 	bl	801d0ec <dhcp_release_and_stop>
        dhcp_start(netif);
 801c448:	6878      	ldr	r0, [r7, #4]
 801c44a:	f000 f989 	bl	801c760 <dhcp_start>
 801c44e:	e01e      	b.n	801c48e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801c450:	683b      	ldr	r3, [r7, #0]
 801c452:	8a1b      	ldrh	r3, [r3, #16]
 801c454:	2b00      	cmp	r3, #0
 801c456:	d00b      	beq.n	801c470 <dhcp_coarse_tmr+0x70>
 801c458:	683b      	ldr	r3, [r7, #0]
 801c45a:	8a1b      	ldrh	r3, [r3, #16]
 801c45c:	1e5a      	subs	r2, r3, #1
 801c45e:	b291      	uxth	r1, r2
 801c460:	683a      	ldr	r2, [r7, #0]
 801c462:	8211      	strh	r1, [r2, #16]
 801c464:	2b01      	cmp	r3, #1
 801c466:	d103      	bne.n	801c470 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801c468:	6878      	ldr	r0, [r7, #4]
 801c46a:	f000 f8c6 	bl	801c5fa <dhcp_t2_timeout>
 801c46e:	e00e      	b.n	801c48e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801c470:	683b      	ldr	r3, [r7, #0]
 801c472:	89db      	ldrh	r3, [r3, #14]
 801c474:	2b00      	cmp	r3, #0
 801c476:	d00a      	beq.n	801c48e <dhcp_coarse_tmr+0x8e>
 801c478:	683b      	ldr	r3, [r7, #0]
 801c47a:	89db      	ldrh	r3, [r3, #14]
 801c47c:	1e5a      	subs	r2, r3, #1
 801c47e:	b291      	uxth	r1, r2
 801c480:	683a      	ldr	r2, [r7, #0]
 801c482:	81d1      	strh	r1, [r2, #14]
 801c484:	2b01      	cmp	r3, #1
 801c486:	d102      	bne.n	801c48e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801c488:	6878      	ldr	r0, [r7, #4]
 801c48a:	f000 f888 	bl	801c59e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	607b      	str	r3, [r7, #4]
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d1b9      	bne.n	801c40e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801c49a:	bf00      	nop
 801c49c:	bf00      	nop
 801c49e:	3708      	adds	r7, #8
 801c4a0:	46bd      	mov	sp, r7
 801c4a2:	bd80      	pop	{r7, pc}
 801c4a4:	20016da0 	.word	0x20016da0

0801c4a8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801c4a8:	b580      	push	{r7, lr}
 801c4aa:	b082      	sub	sp, #8
 801c4ac:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801c4ae:	4b16      	ldr	r3, [pc, #88]	; (801c508 <dhcp_fine_tmr+0x60>)
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	607b      	str	r3, [r7, #4]
 801c4b4:	e020      	b.n	801c4f8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4ba:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801c4bc:	683b      	ldr	r3, [r7, #0]
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d017      	beq.n	801c4f2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801c4c2:	683b      	ldr	r3, [r7, #0]
 801c4c4:	891b      	ldrh	r3, [r3, #8]
 801c4c6:	2b01      	cmp	r3, #1
 801c4c8:	d906      	bls.n	801c4d8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801c4ca:	683b      	ldr	r3, [r7, #0]
 801c4cc:	891b      	ldrh	r3, [r3, #8]
 801c4ce:	3b01      	subs	r3, #1
 801c4d0:	b29a      	uxth	r2, r3
 801c4d2:	683b      	ldr	r3, [r7, #0]
 801c4d4:	811a      	strh	r2, [r3, #8]
 801c4d6:	e00c      	b.n	801c4f2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801c4d8:	683b      	ldr	r3, [r7, #0]
 801c4da:	891b      	ldrh	r3, [r3, #8]
 801c4dc:	2b01      	cmp	r3, #1
 801c4de:	d108      	bne.n	801c4f2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801c4e0:	683b      	ldr	r3, [r7, #0]
 801c4e2:	891b      	ldrh	r3, [r3, #8]
 801c4e4:	3b01      	subs	r3, #1
 801c4e6:	b29a      	uxth	r2, r3
 801c4e8:	683b      	ldr	r3, [r7, #0]
 801c4ea:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801c4ec:	6878      	ldr	r0, [r7, #4]
 801c4ee:	f000 f80d 	bl	801c50c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	607b      	str	r3, [r7, #4]
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d1db      	bne.n	801c4b6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801c4fe:	bf00      	nop
 801c500:	bf00      	nop
 801c502:	3708      	adds	r7, #8
 801c504:	46bd      	mov	sp, r7
 801c506:	bd80      	pop	{r7, pc}
 801c508:	20016da0 	.word	0x20016da0

0801c50c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801c50c:	b580      	push	{r7, lr}
 801c50e:	b084      	sub	sp, #16
 801c510:	af00      	add	r7, sp, #0
 801c512:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c518:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	795b      	ldrb	r3, [r3, #5]
 801c51e:	2b0c      	cmp	r3, #12
 801c520:	d003      	beq.n	801c52a <dhcp_timeout+0x1e>
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	795b      	ldrb	r3, [r3, #5]
 801c526:	2b06      	cmp	r3, #6
 801c528:	d103      	bne.n	801c532 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801c52a:	6878      	ldr	r0, [r7, #4]
 801c52c:	f000 fa74 	bl	801ca18 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801c530:	e031      	b.n	801c596 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	795b      	ldrb	r3, [r3, #5]
 801c536:	2b01      	cmp	r3, #1
 801c538:	d10e      	bne.n	801c558 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801c53a:	68fb      	ldr	r3, [r7, #12]
 801c53c:	799b      	ldrb	r3, [r3, #6]
 801c53e:	2b05      	cmp	r3, #5
 801c540:	d803      	bhi.n	801c54a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801c542:	6878      	ldr	r0, [r7, #4]
 801c544:	f7ff fe60 	bl	801c208 <dhcp_select>
}
 801c548:	e025      	b.n	801c596 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801c54a:	6878      	ldr	r0, [r7, #4]
 801c54c:	f000 fdce 	bl	801d0ec <dhcp_release_and_stop>
      dhcp_start(netif);
 801c550:	6878      	ldr	r0, [r7, #4]
 801c552:	f000 f905 	bl	801c760 <dhcp_start>
}
 801c556:	e01e      	b.n	801c596 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	795b      	ldrb	r3, [r3, #5]
 801c55c:	2b08      	cmp	r3, #8
 801c55e:	d10b      	bne.n	801c578 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	799b      	ldrb	r3, [r3, #6]
 801c564:	2b01      	cmp	r3, #1
 801c566:	d803      	bhi.n	801c570 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801c568:	6878      	ldr	r0, [r7, #4]
 801c56a:	f7ff fdf3 	bl	801c154 <dhcp_check>
}
 801c56e:	e012      	b.n	801c596 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801c570:	6878      	ldr	r0, [r7, #4]
 801c572:	f000 faf3 	bl	801cb5c <dhcp_bind>
}
 801c576:	e00e      	b.n	801c596 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	795b      	ldrb	r3, [r3, #5]
 801c57c:	2b03      	cmp	r3, #3
 801c57e:	d10a      	bne.n	801c596 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	799b      	ldrb	r3, [r3, #6]
 801c584:	2b01      	cmp	r3, #1
 801c586:	d803      	bhi.n	801c590 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801c588:	6878      	ldr	r0, [r7, #4]
 801c58a:	f000 fcf9 	bl	801cf80 <dhcp_reboot>
}
 801c58e:	e002      	b.n	801c596 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801c590:	6878      	ldr	r0, [r7, #4]
 801c592:	f000 fa41 	bl	801ca18 <dhcp_discover>
}
 801c596:	bf00      	nop
 801c598:	3710      	adds	r7, #16
 801c59a:	46bd      	mov	sp, r7
 801c59c:	bd80      	pop	{r7, pc}

0801c59e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801c59e:	b580      	push	{r7, lr}
 801c5a0:	b084      	sub	sp, #16
 801c5a2:	af00      	add	r7, sp, #0
 801c5a4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5aa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	795b      	ldrb	r3, [r3, #5]
 801c5b0:	2b01      	cmp	r3, #1
 801c5b2:	d007      	beq.n	801c5c4 <dhcp_t1_timeout+0x26>
 801c5b4:	68fb      	ldr	r3, [r7, #12]
 801c5b6:	795b      	ldrb	r3, [r3, #5]
 801c5b8:	2b0a      	cmp	r3, #10
 801c5ba:	d003      	beq.n	801c5c4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c5c0:	2b05      	cmp	r3, #5
 801c5c2:	d116      	bne.n	801c5f2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801c5c4:	6878      	ldr	r0, [r7, #4]
 801c5c6:	f000 fba3 	bl	801cd10 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	899b      	ldrh	r3, [r3, #12]
 801c5ce:	461a      	mov	r2, r3
 801c5d0:	68fb      	ldr	r3, [r7, #12]
 801c5d2:	8a5b      	ldrh	r3, [r3, #18]
 801c5d4:	1ad3      	subs	r3, r2, r3
 801c5d6:	2b01      	cmp	r3, #1
 801c5d8:	dd0b      	ble.n	801c5f2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	899b      	ldrh	r3, [r3, #12]
 801c5de:	461a      	mov	r2, r3
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	8a5b      	ldrh	r3, [r3, #18]
 801c5e4:	1ad3      	subs	r3, r2, r3
 801c5e6:	0fda      	lsrs	r2, r3, #31
 801c5e8:	4413      	add	r3, r2
 801c5ea:	105b      	asrs	r3, r3, #1
 801c5ec:	b29a      	uxth	r2, r3
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801c5f2:	bf00      	nop
 801c5f4:	3710      	adds	r7, #16
 801c5f6:	46bd      	mov	sp, r7
 801c5f8:	bd80      	pop	{r7, pc}

0801c5fa <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801c5fa:	b580      	push	{r7, lr}
 801c5fc:	b084      	sub	sp, #16
 801c5fe:	af00      	add	r7, sp, #0
 801c600:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c606:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	795b      	ldrb	r3, [r3, #5]
 801c60c:	2b01      	cmp	r3, #1
 801c60e:	d00b      	beq.n	801c628 <dhcp_t2_timeout+0x2e>
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	795b      	ldrb	r3, [r3, #5]
 801c614:	2b0a      	cmp	r3, #10
 801c616:	d007      	beq.n	801c628 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c61c:	2b05      	cmp	r3, #5
 801c61e:	d003      	beq.n	801c628 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	795b      	ldrb	r3, [r3, #5]
 801c624:	2b04      	cmp	r3, #4
 801c626:	d116      	bne.n	801c656 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801c628:	6878      	ldr	r0, [r7, #4]
 801c62a:	f000 fc0d 	bl	801ce48 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	8a9b      	ldrh	r3, [r3, #20]
 801c632:	461a      	mov	r2, r3
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	8a5b      	ldrh	r3, [r3, #18]
 801c638:	1ad3      	subs	r3, r2, r3
 801c63a:	2b01      	cmp	r3, #1
 801c63c:	dd0b      	ble.n	801c656 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	8a9b      	ldrh	r3, [r3, #20]
 801c642:	461a      	mov	r2, r3
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	8a5b      	ldrh	r3, [r3, #18]
 801c648:	1ad3      	subs	r3, r2, r3
 801c64a:	0fda      	lsrs	r2, r3, #31
 801c64c:	4413      	add	r3, r2
 801c64e:	105b      	asrs	r3, r3, #1
 801c650:	b29a      	uxth	r2, r3
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801c656:	bf00      	nop
 801c658:	3710      	adds	r7, #16
 801c65a:	46bd      	mov	sp, r7
 801c65c:	bd80      	pop	{r7, pc}
	...

0801c660 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801c660:	b580      	push	{r7, lr}
 801c662:	b086      	sub	sp, #24
 801c664:	af00      	add	r7, sp, #0
 801c666:	6078      	str	r0, [r7, #4]
 801c668:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c66e:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801c670:	693b      	ldr	r3, [r7, #16]
 801c672:	2200      	movs	r2, #0
 801c674:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801c676:	693b      	ldr	r3, [r7, #16]
 801c678:	2200      	movs	r2, #0
 801c67a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c67c:	4b36      	ldr	r3, [pc, #216]	; (801c758 <dhcp_handle_ack+0xf8>)
 801c67e:	78db      	ldrb	r3, [r3, #3]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d003      	beq.n	801c68c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801c684:	4b35      	ldr	r3, [pc, #212]	; (801c75c <dhcp_handle_ack+0xfc>)
 801c686:	68da      	ldr	r2, [r3, #12]
 801c688:	693b      	ldr	r3, [r7, #16]
 801c68a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801c68c:	4b32      	ldr	r3, [pc, #200]	; (801c758 <dhcp_handle_ack+0xf8>)
 801c68e:	791b      	ldrb	r3, [r3, #4]
 801c690:	2b00      	cmp	r3, #0
 801c692:	d004      	beq.n	801c69e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801c694:	4b31      	ldr	r3, [pc, #196]	; (801c75c <dhcp_handle_ack+0xfc>)
 801c696:	691a      	ldr	r2, [r3, #16]
 801c698:	693b      	ldr	r3, [r7, #16]
 801c69a:	62da      	str	r2, [r3, #44]	; 0x2c
 801c69c:	e004      	b.n	801c6a8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801c69e:	693b      	ldr	r3, [r7, #16]
 801c6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6a2:	085a      	lsrs	r2, r3, #1
 801c6a4:	693b      	ldr	r3, [r7, #16]
 801c6a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801c6a8:	4b2b      	ldr	r3, [pc, #172]	; (801c758 <dhcp_handle_ack+0xf8>)
 801c6aa:	795b      	ldrb	r3, [r3, #5]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d004      	beq.n	801c6ba <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801c6b0:	4b2a      	ldr	r3, [pc, #168]	; (801c75c <dhcp_handle_ack+0xfc>)
 801c6b2:	695a      	ldr	r2, [r3, #20]
 801c6b4:	693b      	ldr	r3, [r7, #16]
 801c6b6:	631a      	str	r2, [r3, #48]	; 0x30
 801c6b8:	e007      	b.n	801c6ca <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801c6ba:	693b      	ldr	r3, [r7, #16]
 801c6bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c6be:	4613      	mov	r3, r2
 801c6c0:	00db      	lsls	r3, r3, #3
 801c6c2:	1a9b      	subs	r3, r3, r2
 801c6c4:	08da      	lsrs	r2, r3, #3
 801c6c6:	693b      	ldr	r3, [r7, #16]
 801c6c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c6ca:	683b      	ldr	r3, [r7, #0]
 801c6cc:	691a      	ldr	r2, [r3, #16]
 801c6ce:	693b      	ldr	r3, [r7, #16]
 801c6d0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801c6d2:	4b21      	ldr	r3, [pc, #132]	; (801c758 <dhcp_handle_ack+0xf8>)
 801c6d4:	799b      	ldrb	r3, [r3, #6]
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d00b      	beq.n	801c6f2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801c6da:	4b20      	ldr	r3, [pc, #128]	; (801c75c <dhcp_handle_ack+0xfc>)
 801c6dc:	699b      	ldr	r3, [r3, #24]
 801c6de:	4618      	mov	r0, r3
 801c6e0:	f7f5 fdd1 	bl	8012286 <lwip_htonl>
 801c6e4:	4602      	mov	r2, r0
 801c6e6:	693b      	ldr	r3, [r7, #16]
 801c6e8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801c6ea:	693b      	ldr	r3, [r7, #16]
 801c6ec:	2201      	movs	r2, #1
 801c6ee:	71da      	strb	r2, [r3, #7]
 801c6f0:	e002      	b.n	801c6f8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801c6f2:	693b      	ldr	r3, [r7, #16]
 801c6f4:	2200      	movs	r2, #0
 801c6f6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801c6f8:	4b17      	ldr	r3, [pc, #92]	; (801c758 <dhcp_handle_ack+0xf8>)
 801c6fa:	79db      	ldrb	r3, [r3, #7]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d007      	beq.n	801c710 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801c700:	4b16      	ldr	r3, [pc, #88]	; (801c75c <dhcp_handle_ack+0xfc>)
 801c702:	69db      	ldr	r3, [r3, #28]
 801c704:	4618      	mov	r0, r3
 801c706:	f7f5 fdbe 	bl	8012286 <lwip_htonl>
 801c70a:	4602      	mov	r2, r0
 801c70c:	693b      	ldr	r3, [r7, #16]
 801c70e:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801c710:	2300      	movs	r3, #0
 801c712:	75fb      	strb	r3, [r7, #23]
 801c714:	e013      	b.n	801c73e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801c716:	7dfb      	ldrb	r3, [r7, #23]
 801c718:	3308      	adds	r3, #8
 801c71a:	4a10      	ldr	r2, [pc, #64]	; (801c75c <dhcp_handle_ack+0xfc>)
 801c71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c720:	4618      	mov	r0, r3
 801c722:	f7f5 fdb0 	bl	8012286 <lwip_htonl>
 801c726:	4603      	mov	r3, r0
 801c728:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 801c72a:	f107 020c 	add.w	r2, r7, #12
 801c72e:	7dfb      	ldrb	r3, [r7, #23]
 801c730:	4611      	mov	r1, r2
 801c732:	4618      	mov	r0, r3
 801c734:	f7f5 fe02 	bl	801233c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801c738:	7dfb      	ldrb	r3, [r7, #23]
 801c73a:	3301      	adds	r3, #1
 801c73c:	75fb      	strb	r3, [r7, #23]
 801c73e:	7dfb      	ldrb	r3, [r7, #23]
 801c740:	2b01      	cmp	r3, #1
 801c742:	d805      	bhi.n	801c750 <dhcp_handle_ack+0xf0>
 801c744:	7dfb      	ldrb	r3, [r7, #23]
 801c746:	3308      	adds	r3, #8
 801c748:	4a03      	ldr	r2, [pc, #12]	; (801c758 <dhcp_handle_ack+0xf8>)
 801c74a:	5cd3      	ldrb	r3, [r2, r3]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d1e2      	bne.n	801c716 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801c750:	bf00      	nop
 801c752:	3718      	adds	r7, #24
 801c754:	46bd      	mov	sp, r7
 801c756:	bd80      	pop	{r7, pc}
 801c758:	20016dcc 	.word	0x20016dcc
 801c75c:	20016dd8 	.word	0x20016dd8

0801c760 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801c760:	b580      	push	{r7, lr}
 801c762:	b084      	sub	sp, #16
 801c764:	af00      	add	r7, sp, #0
 801c766:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d109      	bne.n	801c782 <dhcp_start+0x22>
 801c76e:	4b37      	ldr	r3, [pc, #220]	; (801c84c <dhcp_start+0xec>)
 801c770:	f240 22e7 	movw	r2, #743	; 0x2e7
 801c774:	4936      	ldr	r1, [pc, #216]	; (801c850 <dhcp_start+0xf0>)
 801c776:	4837      	ldr	r0, [pc, #220]	; (801c854 <dhcp_start+0xf4>)
 801c778:	f004 fb28 	bl	8020dcc <iprintf>
 801c77c:	f06f 030f 	mvn.w	r3, #15
 801c780:	e060      	b.n	801c844 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c788:	f003 0301 	and.w	r3, r3, #1
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d109      	bne.n	801c7a4 <dhcp_start+0x44>
 801c790:	4b2e      	ldr	r3, [pc, #184]	; (801c84c <dhcp_start+0xec>)
 801c792:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801c796:	4930      	ldr	r1, [pc, #192]	; (801c858 <dhcp_start+0xf8>)
 801c798:	482e      	ldr	r0, [pc, #184]	; (801c854 <dhcp_start+0xf4>)
 801c79a:	f004 fb17 	bl	8020dcc <iprintf>
 801c79e:	f06f 030f 	mvn.w	r3, #15
 801c7a2:	e04f      	b.n	801c844 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7a8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c7ae:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801c7b2:	d202      	bcs.n	801c7ba <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801c7b4:	f04f 33ff 	mov.w	r3, #4294967295
 801c7b8:	e044      	b.n	801c844 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801c7ba:	68fb      	ldr	r3, [r7, #12]
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d10d      	bne.n	801c7dc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801c7c0:	2034      	movs	r0, #52	; 0x34
 801c7c2:	f7f7 f855 	bl	8013870 <mem_malloc>
 801c7c6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d102      	bne.n	801c7d4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801c7ce:	f04f 33ff 	mov.w	r3, #4294967295
 801c7d2:	e037      	b.n	801c844 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	68fa      	ldr	r2, [r7, #12]
 801c7d8:	625a      	str	r2, [r3, #36]	; 0x24
 801c7da:	e005      	b.n	801c7e8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	791b      	ldrb	r3, [r3, #4]
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	d001      	beq.n	801c7e8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801c7e4:	f7ff fc72 	bl	801c0cc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801c7e8:	2234      	movs	r2, #52	; 0x34
 801c7ea:	2100      	movs	r1, #0
 801c7ec:	68f8      	ldr	r0, [r7, #12]
 801c7ee:	f004 fa2b 	bl	8020c48 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801c7f2:	f7ff fc19 	bl	801c028 <dhcp_inc_pcb_refcount>
 801c7f6:	4603      	mov	r3, r0
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d002      	beq.n	801c802 <dhcp_start+0xa2>
    return ERR_MEM;
 801c7fc:	f04f 33ff 	mov.w	r3, #4294967295
 801c800:	e020      	b.n	801c844 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801c802:	68fb      	ldr	r3, [r7, #12]
 801c804:	2201      	movs	r2, #1
 801c806:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c80e:	f003 0304 	and.w	r3, r3, #4
 801c812:	2b00      	cmp	r3, #0
 801c814:	d105      	bne.n	801c822 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801c816:	2102      	movs	r1, #2
 801c818:	68f8      	ldr	r0, [r7, #12]
 801c81a:	f000 fd01 	bl	801d220 <dhcp_set_state>
    return ERR_OK;
 801c81e:	2300      	movs	r3, #0
 801c820:	e010      	b.n	801c844 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801c822:	6878      	ldr	r0, [r7, #4]
 801c824:	f000 f8f8 	bl	801ca18 <dhcp_discover>
 801c828:	4603      	mov	r3, r0
 801c82a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801c82c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801c830:	2b00      	cmp	r3, #0
 801c832:	d005      	beq.n	801c840 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801c834:	6878      	ldr	r0, [r7, #4]
 801c836:	f000 fc59 	bl	801d0ec <dhcp_release_and_stop>
    return ERR_MEM;
 801c83a:	f04f 33ff 	mov.w	r3, #4294967295
 801c83e:	e001      	b.n	801c844 <dhcp_start+0xe4>
  }
  return result;
 801c840:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c844:	4618      	mov	r0, r3
 801c846:	3710      	adds	r7, #16
 801c848:	46bd      	mov	sp, r7
 801c84a:	bd80      	pop	{r7, pc}
 801c84c:	08025834 	.word	0x08025834
 801c850:	08025918 	.word	0x08025918
 801c854:	08025894 	.word	0x08025894
 801c858:	0802595c 	.word	0x0802595c

0801c85c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801c85c:	b580      	push	{r7, lr}
 801c85e:	b084      	sub	sp, #16
 801c860:	af00      	add	r7, sp, #0
 801c862:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c868:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d025      	beq.n	801c8bc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	795b      	ldrb	r3, [r3, #5]
 801c874:	2b0a      	cmp	r3, #10
 801c876:	d008      	beq.n	801c88a <dhcp_network_changed+0x2e>
 801c878:	2b0a      	cmp	r3, #10
 801c87a:	dc0d      	bgt.n	801c898 <dhcp_network_changed+0x3c>
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d01f      	beq.n	801c8c0 <dhcp_network_changed+0x64>
 801c880:	2b00      	cmp	r3, #0
 801c882:	db09      	blt.n	801c898 <dhcp_network_changed+0x3c>
 801c884:	3b03      	subs	r3, #3
 801c886:	2b02      	cmp	r3, #2
 801c888:	d806      	bhi.n	801c898 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	2200      	movs	r2, #0
 801c88e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801c890:	6878      	ldr	r0, [r7, #4]
 801c892:	f000 fb75 	bl	801cf80 <dhcp_reboot>
      break;
 801c896:	e014      	b.n	801c8c2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801c898:	68fb      	ldr	r3, [r7, #12]
 801c89a:	795b      	ldrb	r3, [r3, #5]
 801c89c:	2b0c      	cmp	r3, #12
 801c89e:	d906      	bls.n	801c8ae <dhcp_network_changed+0x52>
 801c8a0:	4b09      	ldr	r3, [pc, #36]	; (801c8c8 <dhcp_network_changed+0x6c>)
 801c8a2:	f240 326d 	movw	r2, #877	; 0x36d
 801c8a6:	4909      	ldr	r1, [pc, #36]	; (801c8cc <dhcp_network_changed+0x70>)
 801c8a8:	4809      	ldr	r0, [pc, #36]	; (801c8d0 <dhcp_network_changed+0x74>)
 801c8aa:	f004 fa8f 	bl	8020dcc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	2200      	movs	r2, #0
 801c8b2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801c8b4:	6878      	ldr	r0, [r7, #4]
 801c8b6:	f000 f8af 	bl	801ca18 <dhcp_discover>
      break;
 801c8ba:	e002      	b.n	801c8c2 <dhcp_network_changed+0x66>
    return;
 801c8bc:	bf00      	nop
 801c8be:	e000      	b.n	801c8c2 <dhcp_network_changed+0x66>
      break;
 801c8c0:	bf00      	nop
  }
}
 801c8c2:	3710      	adds	r7, #16
 801c8c4:	46bd      	mov	sp, r7
 801c8c6:	bd80      	pop	{r7, pc}
 801c8c8:	08025834 	.word	0x08025834
 801c8cc:	08025980 	.word	0x08025980
 801c8d0:	08025894 	.word	0x08025894

0801c8d4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801c8d4:	b580      	push	{r7, lr}
 801c8d6:	b084      	sub	sp, #16
 801c8d8:	af00      	add	r7, sp, #0
 801c8da:	6078      	str	r0, [r7, #4]
 801c8dc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d107      	bne.n	801c8f4 <dhcp_arp_reply+0x20>
 801c8e4:	4b0e      	ldr	r3, [pc, #56]	; (801c920 <dhcp_arp_reply+0x4c>)
 801c8e6:	f240 328b 	movw	r2, #907	; 0x38b
 801c8ea:	490e      	ldr	r1, [pc, #56]	; (801c924 <dhcp_arp_reply+0x50>)
 801c8ec:	480e      	ldr	r0, [pc, #56]	; (801c928 <dhcp_arp_reply+0x54>)
 801c8ee:	f004 fa6d 	bl	8020dcc <iprintf>
 801c8f2:	e012      	b.n	801c91a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8f8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d00c      	beq.n	801c91a <dhcp_arp_reply+0x46>
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	795b      	ldrb	r3, [r3, #5]
 801c904:	2b08      	cmp	r3, #8
 801c906:	d108      	bne.n	801c91a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801c908:	683b      	ldr	r3, [r7, #0]
 801c90a:	681a      	ldr	r2, [r3, #0]
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	69db      	ldr	r3, [r3, #28]
 801c910:	429a      	cmp	r2, r3
 801c912:	d102      	bne.n	801c91a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801c914:	6878      	ldr	r0, [r7, #4]
 801c916:	f000 f809 	bl	801c92c <dhcp_decline>
    }
  }
}
 801c91a:	3710      	adds	r7, #16
 801c91c:	46bd      	mov	sp, r7
 801c91e:	bd80      	pop	{r7, pc}
 801c920:	08025834 	.word	0x08025834
 801c924:	08025918 	.word	0x08025918
 801c928:	08025894 	.word	0x08025894

0801c92c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801c92c:	b5b0      	push	{r4, r5, r7, lr}
 801c92e:	b08a      	sub	sp, #40	; 0x28
 801c930:	af02      	add	r7, sp, #8
 801c932:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c938:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c93a:	210c      	movs	r1, #12
 801c93c:	69b8      	ldr	r0, [r7, #24]
 801c93e:	f000 fc6f 	bl	801d220 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801c942:	f107 030c 	add.w	r3, r7, #12
 801c946:	2204      	movs	r2, #4
 801c948:	69b9      	ldr	r1, [r7, #24]
 801c94a:	6878      	ldr	r0, [r7, #4]
 801c94c:	f001 f924 	bl	801db98 <dhcp_create_msg>
 801c950:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c952:	697b      	ldr	r3, [r7, #20]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d035      	beq.n	801c9c4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c958:	697b      	ldr	r3, [r7, #20]
 801c95a:	685b      	ldr	r3, [r3, #4]
 801c95c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c95e:	89b8      	ldrh	r0, [r7, #12]
 801c960:	693b      	ldr	r3, [r7, #16]
 801c962:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c966:	2304      	movs	r3, #4
 801c968:	2232      	movs	r2, #50	; 0x32
 801c96a:	f000 fc73 	bl	801d254 <dhcp_option>
 801c96e:	4603      	mov	r3, r0
 801c970:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c972:	89bc      	ldrh	r4, [r7, #12]
 801c974:	693b      	ldr	r3, [r7, #16]
 801c976:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c97a:	69bb      	ldr	r3, [r7, #24]
 801c97c:	69db      	ldr	r3, [r3, #28]
 801c97e:	4618      	mov	r0, r3
 801c980:	f7f5 fc81 	bl	8012286 <lwip_htonl>
 801c984:	4603      	mov	r3, r0
 801c986:	461a      	mov	r2, r3
 801c988:	4629      	mov	r1, r5
 801c98a:	4620      	mov	r0, r4
 801c98c:	f000 fcee 	bl	801d36c <dhcp_option_long>
 801c990:	4603      	mov	r3, r0
 801c992:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c994:	89b8      	ldrh	r0, [r7, #12]
 801c996:	693b      	ldr	r3, [r7, #16]
 801c998:	33f0      	adds	r3, #240	; 0xf0
 801c99a:	697a      	ldr	r2, [r7, #20]
 801c99c:	4619      	mov	r1, r3
 801c99e:	f001 f9d1 	bl	801dd44 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c9a2:	4b19      	ldr	r3, [pc, #100]	; (801ca08 <dhcp_decline+0xdc>)
 801c9a4:	6818      	ldr	r0, [r3, #0]
 801c9a6:	4b19      	ldr	r3, [pc, #100]	; (801ca0c <dhcp_decline+0xe0>)
 801c9a8:	9301      	str	r3, [sp, #4]
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	9300      	str	r3, [sp, #0]
 801c9ae:	2343      	movs	r3, #67	; 0x43
 801c9b0:	4a17      	ldr	r2, [pc, #92]	; (801ca10 <dhcp_decline+0xe4>)
 801c9b2:	6979      	ldr	r1, [r7, #20]
 801c9b4:	f7ff f87e 	bl	801bab4 <udp_sendto_if_src>
 801c9b8:	4603      	mov	r3, r0
 801c9ba:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c9bc:	6978      	ldr	r0, [r7, #20]
 801c9be:	f7f7 ffdb 	bl	8014978 <pbuf_free>
 801c9c2:	e001      	b.n	801c9c8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c9c4:	23ff      	movs	r3, #255	; 0xff
 801c9c6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c9c8:	69bb      	ldr	r3, [r7, #24]
 801c9ca:	799b      	ldrb	r3, [r3, #6]
 801c9cc:	2bff      	cmp	r3, #255	; 0xff
 801c9ce:	d005      	beq.n	801c9dc <dhcp_decline+0xb0>
    dhcp->tries++;
 801c9d0:	69bb      	ldr	r3, [r7, #24]
 801c9d2:	799b      	ldrb	r3, [r3, #6]
 801c9d4:	3301      	adds	r3, #1
 801c9d6:	b2da      	uxtb	r2, r3
 801c9d8:	69bb      	ldr	r3, [r7, #24]
 801c9da:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801c9dc:	f242 7310 	movw	r3, #10000	; 0x2710
 801c9e0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c9e2:	89fb      	ldrh	r3, [r7, #14]
 801c9e4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c9e8:	4a0a      	ldr	r2, [pc, #40]	; (801ca14 <dhcp_decline+0xe8>)
 801c9ea:	fb82 1203 	smull	r1, r2, r2, r3
 801c9ee:	1152      	asrs	r2, r2, #5
 801c9f0:	17db      	asrs	r3, r3, #31
 801c9f2:	1ad3      	subs	r3, r2, r3
 801c9f4:	b29a      	uxth	r2, r3
 801c9f6:	69bb      	ldr	r3, [r7, #24]
 801c9f8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c9fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c9fe:	4618      	mov	r0, r3
 801ca00:	3720      	adds	r7, #32
 801ca02:	46bd      	mov	sp, r7
 801ca04:	bdb0      	pop	{r4, r5, r7, pc}
 801ca06:	bf00      	nop
 801ca08:	2000572c 	.word	0x2000572c
 801ca0c:	08026684 	.word	0x08026684
 801ca10:	08026688 	.word	0x08026688
 801ca14:	10624dd3 	.word	0x10624dd3

0801ca18 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801ca18:	b580      	push	{r7, lr}
 801ca1a:	b08a      	sub	sp, #40	; 0x28
 801ca1c:	af02      	add	r7, sp, #8
 801ca1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca24:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801ca26:	2300      	movs	r3, #0
 801ca28:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801ca2a:	69bb      	ldr	r3, [r7, #24]
 801ca2c:	2200      	movs	r2, #0
 801ca2e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801ca30:	2106      	movs	r1, #6
 801ca32:	69b8      	ldr	r0, [r7, #24]
 801ca34:	f000 fbf4 	bl	801d220 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801ca38:	f107 0308 	add.w	r3, r7, #8
 801ca3c:	2201      	movs	r2, #1
 801ca3e:	69b9      	ldr	r1, [r7, #24]
 801ca40:	6878      	ldr	r0, [r7, #4]
 801ca42:	f001 f8a9 	bl	801db98 <dhcp_create_msg>
 801ca46:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801ca48:	693b      	ldr	r3, [r7, #16]
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d04b      	beq.n	801cae6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ca4e:	693b      	ldr	r3, [r7, #16]
 801ca50:	685b      	ldr	r3, [r3, #4]
 801ca52:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ca54:	8938      	ldrh	r0, [r7, #8]
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ca5c:	2302      	movs	r3, #2
 801ca5e:	2239      	movs	r2, #57	; 0x39
 801ca60:	f000 fbf8 	bl	801d254 <dhcp_option>
 801ca64:	4603      	mov	r3, r0
 801ca66:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ca68:	8938      	ldrh	r0, [r7, #8]
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ca74:	461a      	mov	r2, r3
 801ca76:	f000 fc47 	bl	801d308 <dhcp_option_short>
 801ca7a:	4603      	mov	r3, r0
 801ca7c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ca7e:	8938      	ldrh	r0, [r7, #8]
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ca86:	2304      	movs	r3, #4
 801ca88:	2237      	movs	r2, #55	; 0x37
 801ca8a:	f000 fbe3 	bl	801d254 <dhcp_option>
 801ca8e:	4603      	mov	r3, r0
 801ca90:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ca92:	2300      	movs	r3, #0
 801ca94:	77fb      	strb	r3, [r7, #31]
 801ca96:	e00e      	b.n	801cab6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ca98:	8938      	ldrh	r0, [r7, #8]
 801ca9a:	68fb      	ldr	r3, [r7, #12]
 801ca9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801caa0:	7ffb      	ldrb	r3, [r7, #31]
 801caa2:	4a29      	ldr	r2, [pc, #164]	; (801cb48 <dhcp_discover+0x130>)
 801caa4:	5cd3      	ldrb	r3, [r2, r3]
 801caa6:	461a      	mov	r2, r3
 801caa8:	f000 fc08 	bl	801d2bc <dhcp_option_byte>
 801caac:	4603      	mov	r3, r0
 801caae:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cab0:	7ffb      	ldrb	r3, [r7, #31]
 801cab2:	3301      	adds	r3, #1
 801cab4:	77fb      	strb	r3, [r7, #31]
 801cab6:	7ffb      	ldrb	r3, [r7, #31]
 801cab8:	2b03      	cmp	r3, #3
 801caba:	d9ed      	bls.n	801ca98 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cabc:	8938      	ldrh	r0, [r7, #8]
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	33f0      	adds	r3, #240	; 0xf0
 801cac2:	693a      	ldr	r2, [r7, #16]
 801cac4:	4619      	mov	r1, r3
 801cac6:	f001 f93d 	bl	801dd44 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801caca:	4b20      	ldr	r3, [pc, #128]	; (801cb4c <dhcp_discover+0x134>)
 801cacc:	6818      	ldr	r0, [r3, #0]
 801cace:	4b20      	ldr	r3, [pc, #128]	; (801cb50 <dhcp_discover+0x138>)
 801cad0:	9301      	str	r3, [sp, #4]
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	9300      	str	r3, [sp, #0]
 801cad6:	2343      	movs	r3, #67	; 0x43
 801cad8:	4a1e      	ldr	r2, [pc, #120]	; (801cb54 <dhcp_discover+0x13c>)
 801cada:	6939      	ldr	r1, [r7, #16]
 801cadc:	f7fe ffea 	bl	801bab4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801cae0:	6938      	ldr	r0, [r7, #16]
 801cae2:	f7f7 ff49 	bl	8014978 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801cae6:	69bb      	ldr	r3, [r7, #24]
 801cae8:	799b      	ldrb	r3, [r3, #6]
 801caea:	2bff      	cmp	r3, #255	; 0xff
 801caec:	d005      	beq.n	801cafa <dhcp_discover+0xe2>
    dhcp->tries++;
 801caee:	69bb      	ldr	r3, [r7, #24]
 801caf0:	799b      	ldrb	r3, [r3, #6]
 801caf2:	3301      	adds	r3, #1
 801caf4:	b2da      	uxtb	r2, r3
 801caf6:	69bb      	ldr	r3, [r7, #24]
 801caf8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801cafa:	69bb      	ldr	r3, [r7, #24]
 801cafc:	799b      	ldrb	r3, [r3, #6]
 801cafe:	2b05      	cmp	r3, #5
 801cb00:	d80d      	bhi.n	801cb1e <dhcp_discover+0x106>
 801cb02:	69bb      	ldr	r3, [r7, #24]
 801cb04:	799b      	ldrb	r3, [r3, #6]
 801cb06:	461a      	mov	r2, r3
 801cb08:	2301      	movs	r3, #1
 801cb0a:	4093      	lsls	r3, r2
 801cb0c:	b29b      	uxth	r3, r3
 801cb0e:	461a      	mov	r2, r3
 801cb10:	0152      	lsls	r2, r2, #5
 801cb12:	1ad2      	subs	r2, r2, r3
 801cb14:	0092      	lsls	r2, r2, #2
 801cb16:	4413      	add	r3, r2
 801cb18:	00db      	lsls	r3, r3, #3
 801cb1a:	b29b      	uxth	r3, r3
 801cb1c:	e001      	b.n	801cb22 <dhcp_discover+0x10a>
 801cb1e:	f64e 2360 	movw	r3, #60000	; 0xea60
 801cb22:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cb24:	897b      	ldrh	r3, [r7, #10]
 801cb26:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801cb2a:	4a0b      	ldr	r2, [pc, #44]	; (801cb58 <dhcp_discover+0x140>)
 801cb2c:	fb82 1203 	smull	r1, r2, r2, r3
 801cb30:	1152      	asrs	r2, r2, #5
 801cb32:	17db      	asrs	r3, r3, #31
 801cb34:	1ad3      	subs	r3, r2, r3
 801cb36:	b29a      	uxth	r2, r3
 801cb38:	69bb      	ldr	r3, [r7, #24]
 801cb3a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801cb3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cb40:	4618      	mov	r0, r3
 801cb42:	3720      	adds	r7, #32
 801cb44:	46bd      	mov	sp, r7
 801cb46:	bd80      	pop	{r7, pc}
 801cb48:	20000500 	.word	0x20000500
 801cb4c:	2000572c 	.word	0x2000572c
 801cb50:	08026684 	.word	0x08026684
 801cb54:	08026688 	.word	0x08026688
 801cb58:	10624dd3 	.word	0x10624dd3

0801cb5c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801cb5c:	b580      	push	{r7, lr}
 801cb5e:	b088      	sub	sp, #32
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d107      	bne.n	801cb7a <dhcp_bind+0x1e>
 801cb6a:	4b64      	ldr	r3, [pc, #400]	; (801ccfc <dhcp_bind+0x1a0>)
 801cb6c:	f240 4215 	movw	r2, #1045	; 0x415
 801cb70:	4963      	ldr	r1, [pc, #396]	; (801cd00 <dhcp_bind+0x1a4>)
 801cb72:	4864      	ldr	r0, [pc, #400]	; (801cd04 <dhcp_bind+0x1a8>)
 801cb74:	f004 f92a 	bl	8020dcc <iprintf>
 801cb78:	e0bc      	b.n	801ccf4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb7e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801cb80:	69bb      	ldr	r3, [r7, #24]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d107      	bne.n	801cb96 <dhcp_bind+0x3a>
 801cb86:	4b5d      	ldr	r3, [pc, #372]	; (801ccfc <dhcp_bind+0x1a0>)
 801cb88:	f240 4217 	movw	r2, #1047	; 0x417
 801cb8c:	495e      	ldr	r1, [pc, #376]	; (801cd08 <dhcp_bind+0x1ac>)
 801cb8e:	485d      	ldr	r0, [pc, #372]	; (801cd04 <dhcp_bind+0x1a8>)
 801cb90:	f004 f91c 	bl	8020dcc <iprintf>
 801cb94:	e0ae      	b.n	801ccf4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801cb96:	69bb      	ldr	r3, [r7, #24]
 801cb98:	2200      	movs	r2, #0
 801cb9a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801cb9c:	69bb      	ldr	r3, [r7, #24]
 801cb9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cba4:	d019      	beq.n	801cbda <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cba6:	69bb      	ldr	r3, [r7, #24]
 801cba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbaa:	331e      	adds	r3, #30
 801cbac:	4a57      	ldr	r2, [pc, #348]	; (801cd0c <dhcp_bind+0x1b0>)
 801cbae:	fba2 2303 	umull	r2, r3, r2, r3
 801cbb2:	095b      	lsrs	r3, r3, #5
 801cbb4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801cbb6:	69fb      	ldr	r3, [r7, #28]
 801cbb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cbbc:	d302      	bcc.n	801cbc4 <dhcp_bind+0x68>
      timeout = 0xffff;
 801cbbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cbc2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801cbc4:	69fb      	ldr	r3, [r7, #28]
 801cbc6:	b29a      	uxth	r2, r3
 801cbc8:	69bb      	ldr	r3, [r7, #24]
 801cbca:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801cbcc:	69bb      	ldr	r3, [r7, #24]
 801cbce:	8a9b      	ldrh	r3, [r3, #20]
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d102      	bne.n	801cbda <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801cbd4:	69bb      	ldr	r3, [r7, #24]
 801cbd6:	2201      	movs	r2, #1
 801cbd8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801cbda:	69bb      	ldr	r3, [r7, #24]
 801cbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cbe2:	d01d      	beq.n	801cc20 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cbe4:	69bb      	ldr	r3, [r7, #24]
 801cbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbe8:	331e      	adds	r3, #30
 801cbea:	4a48      	ldr	r2, [pc, #288]	; (801cd0c <dhcp_bind+0x1b0>)
 801cbec:	fba2 2303 	umull	r2, r3, r2, r3
 801cbf0:	095b      	lsrs	r3, r3, #5
 801cbf2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801cbf4:	69fb      	ldr	r3, [r7, #28]
 801cbf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cbfa:	d302      	bcc.n	801cc02 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801cbfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cc00:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801cc02:	69fb      	ldr	r3, [r7, #28]
 801cc04:	b29a      	uxth	r2, r3
 801cc06:	69bb      	ldr	r3, [r7, #24]
 801cc08:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801cc0a:	69bb      	ldr	r3, [r7, #24]
 801cc0c:	895b      	ldrh	r3, [r3, #10]
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d102      	bne.n	801cc18 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801cc12:	69bb      	ldr	r3, [r7, #24]
 801cc14:	2201      	movs	r2, #1
 801cc16:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801cc18:	69bb      	ldr	r3, [r7, #24]
 801cc1a:	895a      	ldrh	r2, [r3, #10]
 801cc1c:	69bb      	ldr	r3, [r7, #24]
 801cc1e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801cc20:	69bb      	ldr	r3, [r7, #24]
 801cc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc28:	d01d      	beq.n	801cc66 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cc2a:	69bb      	ldr	r3, [r7, #24]
 801cc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc2e:	331e      	adds	r3, #30
 801cc30:	4a36      	ldr	r2, [pc, #216]	; (801cd0c <dhcp_bind+0x1b0>)
 801cc32:	fba2 2303 	umull	r2, r3, r2, r3
 801cc36:	095b      	lsrs	r3, r3, #5
 801cc38:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801cc3a:	69fb      	ldr	r3, [r7, #28]
 801cc3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cc40:	d302      	bcc.n	801cc48 <dhcp_bind+0xec>
      timeout = 0xffff;
 801cc42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cc46:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801cc48:	69fb      	ldr	r3, [r7, #28]
 801cc4a:	b29a      	uxth	r2, r3
 801cc4c:	69bb      	ldr	r3, [r7, #24]
 801cc4e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801cc50:	69bb      	ldr	r3, [r7, #24]
 801cc52:	899b      	ldrh	r3, [r3, #12]
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d102      	bne.n	801cc5e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801cc58:	69bb      	ldr	r3, [r7, #24]
 801cc5a:	2201      	movs	r2, #1
 801cc5c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801cc5e:	69bb      	ldr	r3, [r7, #24]
 801cc60:	899a      	ldrh	r2, [r3, #12]
 801cc62:	69bb      	ldr	r3, [r7, #24]
 801cc64:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801cc66:	69bb      	ldr	r3, [r7, #24]
 801cc68:	895a      	ldrh	r2, [r3, #10]
 801cc6a:	69bb      	ldr	r3, [r7, #24]
 801cc6c:	899b      	ldrh	r3, [r3, #12]
 801cc6e:	429a      	cmp	r2, r3
 801cc70:	d306      	bcc.n	801cc80 <dhcp_bind+0x124>
 801cc72:	69bb      	ldr	r3, [r7, #24]
 801cc74:	899b      	ldrh	r3, [r3, #12]
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	d002      	beq.n	801cc80 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801cc7a:	69bb      	ldr	r3, [r7, #24]
 801cc7c:	2200      	movs	r2, #0
 801cc7e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801cc80:	69bb      	ldr	r3, [r7, #24]
 801cc82:	79db      	ldrb	r3, [r3, #7]
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d003      	beq.n	801cc90 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801cc88:	69bb      	ldr	r3, [r7, #24]
 801cc8a:	6a1b      	ldr	r3, [r3, #32]
 801cc8c:	613b      	str	r3, [r7, #16]
 801cc8e:	e014      	b.n	801ccba <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801cc90:	69bb      	ldr	r3, [r7, #24]
 801cc92:	331c      	adds	r3, #28
 801cc94:	781b      	ldrb	r3, [r3, #0]
 801cc96:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801cc98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	db02      	blt.n	801cca6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801cca0:	23ff      	movs	r3, #255	; 0xff
 801cca2:	613b      	str	r3, [r7, #16]
 801cca4:	e009      	b.n	801ccba <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801cca6:	7dfb      	ldrb	r3, [r7, #23]
 801cca8:	2bbf      	cmp	r3, #191	; 0xbf
 801ccaa:	d903      	bls.n	801ccb4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801ccac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801ccb0:	613b      	str	r3, [r7, #16]
 801ccb2:	e002      	b.n	801ccba <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801ccb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ccb8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801ccba:	69bb      	ldr	r3, [r7, #24]
 801ccbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccbe:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d108      	bne.n	801ccd8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801ccc6:	69bb      	ldr	r3, [r7, #24]
 801ccc8:	69da      	ldr	r2, [r3, #28]
 801ccca:	693b      	ldr	r3, [r7, #16]
 801cccc:	4013      	ands	r3, r2
 801ccce:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801ccd6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801ccd8:	210a      	movs	r1, #10
 801ccda:	69b8      	ldr	r0, [r7, #24]
 801ccdc:	f000 faa0 	bl	801d220 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801cce0:	69bb      	ldr	r3, [r7, #24]
 801cce2:	f103 011c 	add.w	r1, r3, #28
 801cce6:	f107 030c 	add.w	r3, r7, #12
 801ccea:	f107 0210 	add.w	r2, r7, #16
 801ccee:	6878      	ldr	r0, [r7, #4]
 801ccf0:	f7f7 f934 	bl	8013f5c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801ccf4:	3720      	adds	r7, #32
 801ccf6:	46bd      	mov	sp, r7
 801ccf8:	bd80      	pop	{r7, pc}
 801ccfa:	bf00      	nop
 801ccfc:	08025834 	.word	0x08025834
 801cd00:	08025994 	.word	0x08025994
 801cd04:	08025894 	.word	0x08025894
 801cd08:	080259b0 	.word	0x080259b0
 801cd0c:	88888889 	.word	0x88888889

0801cd10 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801cd10:	b580      	push	{r7, lr}
 801cd12:	b08a      	sub	sp, #40	; 0x28
 801cd14:	af02      	add	r7, sp, #8
 801cd16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd1c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801cd1e:	2105      	movs	r1, #5
 801cd20:	69b8      	ldr	r0, [r7, #24]
 801cd22:	f000 fa7d 	bl	801d220 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801cd26:	f107 030c 	add.w	r3, r7, #12
 801cd2a:	2203      	movs	r2, #3
 801cd2c:	69b9      	ldr	r1, [r7, #24]
 801cd2e:	6878      	ldr	r0, [r7, #4]
 801cd30:	f000 ff32 	bl	801db98 <dhcp_create_msg>
 801cd34:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801cd36:	697b      	ldr	r3, [r7, #20]
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d04e      	beq.n	801cdda <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801cd3c:	697b      	ldr	r3, [r7, #20]
 801cd3e:	685b      	ldr	r3, [r3, #4]
 801cd40:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cd42:	89b8      	ldrh	r0, [r7, #12]
 801cd44:	693b      	ldr	r3, [r7, #16]
 801cd46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cd4a:	2302      	movs	r3, #2
 801cd4c:	2239      	movs	r2, #57	; 0x39
 801cd4e:	f000 fa81 	bl	801d254 <dhcp_option>
 801cd52:	4603      	mov	r3, r0
 801cd54:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801cd56:	89b8      	ldrh	r0, [r7, #12]
 801cd58:	693b      	ldr	r3, [r7, #16]
 801cd5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cd62:	461a      	mov	r2, r3
 801cd64:	f000 fad0 	bl	801d308 <dhcp_option_short>
 801cd68:	4603      	mov	r3, r0
 801cd6a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cd6c:	89b8      	ldrh	r0, [r7, #12]
 801cd6e:	693b      	ldr	r3, [r7, #16]
 801cd70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cd74:	2304      	movs	r3, #4
 801cd76:	2237      	movs	r2, #55	; 0x37
 801cd78:	f000 fa6c 	bl	801d254 <dhcp_option>
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cd80:	2300      	movs	r3, #0
 801cd82:	77bb      	strb	r3, [r7, #30]
 801cd84:	e00e      	b.n	801cda4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801cd86:	89b8      	ldrh	r0, [r7, #12]
 801cd88:	693b      	ldr	r3, [r7, #16]
 801cd8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cd8e:	7fbb      	ldrb	r3, [r7, #30]
 801cd90:	4a2a      	ldr	r2, [pc, #168]	; (801ce3c <dhcp_renew+0x12c>)
 801cd92:	5cd3      	ldrb	r3, [r2, r3]
 801cd94:	461a      	mov	r2, r3
 801cd96:	f000 fa91 	bl	801d2bc <dhcp_option_byte>
 801cd9a:	4603      	mov	r3, r0
 801cd9c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cd9e:	7fbb      	ldrb	r3, [r7, #30]
 801cda0:	3301      	adds	r3, #1
 801cda2:	77bb      	strb	r3, [r7, #30]
 801cda4:	7fbb      	ldrb	r3, [r7, #30]
 801cda6:	2b03      	cmp	r3, #3
 801cda8:	d9ed      	bls.n	801cd86 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cdaa:	89b8      	ldrh	r0, [r7, #12]
 801cdac:	693b      	ldr	r3, [r7, #16]
 801cdae:	33f0      	adds	r3, #240	; 0xf0
 801cdb0:	697a      	ldr	r2, [r7, #20]
 801cdb2:	4619      	mov	r1, r3
 801cdb4:	f000 ffc6 	bl	801dd44 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801cdb8:	4b21      	ldr	r3, [pc, #132]	; (801ce40 <dhcp_renew+0x130>)
 801cdba:	6818      	ldr	r0, [r3, #0]
 801cdbc:	69bb      	ldr	r3, [r7, #24]
 801cdbe:	f103 0218 	add.w	r2, r3, #24
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	9300      	str	r3, [sp, #0]
 801cdc6:	2343      	movs	r3, #67	; 0x43
 801cdc8:	6979      	ldr	r1, [r7, #20]
 801cdca:	f7fe fdff 	bl	801b9cc <udp_sendto_if>
 801cdce:	4603      	mov	r3, r0
 801cdd0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801cdd2:	6978      	ldr	r0, [r7, #20]
 801cdd4:	f7f7 fdd0 	bl	8014978 <pbuf_free>
 801cdd8:	e001      	b.n	801cdde <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801cdda:	23ff      	movs	r3, #255	; 0xff
 801cddc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801cdde:	69bb      	ldr	r3, [r7, #24]
 801cde0:	799b      	ldrb	r3, [r3, #6]
 801cde2:	2bff      	cmp	r3, #255	; 0xff
 801cde4:	d005      	beq.n	801cdf2 <dhcp_renew+0xe2>
    dhcp->tries++;
 801cde6:	69bb      	ldr	r3, [r7, #24]
 801cde8:	799b      	ldrb	r3, [r3, #6]
 801cdea:	3301      	adds	r3, #1
 801cdec:	b2da      	uxtb	r2, r3
 801cdee:	69bb      	ldr	r3, [r7, #24]
 801cdf0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801cdf2:	69bb      	ldr	r3, [r7, #24]
 801cdf4:	799b      	ldrb	r3, [r3, #6]
 801cdf6:	2b09      	cmp	r3, #9
 801cdf8:	d80a      	bhi.n	801ce10 <dhcp_renew+0x100>
 801cdfa:	69bb      	ldr	r3, [r7, #24]
 801cdfc:	799b      	ldrb	r3, [r3, #6]
 801cdfe:	b29b      	uxth	r3, r3
 801ce00:	461a      	mov	r2, r3
 801ce02:	0152      	lsls	r2, r2, #5
 801ce04:	1ad2      	subs	r2, r2, r3
 801ce06:	0092      	lsls	r2, r2, #2
 801ce08:	4413      	add	r3, r2
 801ce0a:	011b      	lsls	r3, r3, #4
 801ce0c:	b29b      	uxth	r3, r3
 801ce0e:	e001      	b.n	801ce14 <dhcp_renew+0x104>
 801ce10:	f644 6320 	movw	r3, #20000	; 0x4e20
 801ce14:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ce16:	89fb      	ldrh	r3, [r7, #14]
 801ce18:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ce1c:	4a09      	ldr	r2, [pc, #36]	; (801ce44 <dhcp_renew+0x134>)
 801ce1e:	fb82 1203 	smull	r1, r2, r2, r3
 801ce22:	1152      	asrs	r2, r2, #5
 801ce24:	17db      	asrs	r3, r3, #31
 801ce26:	1ad3      	subs	r3, r2, r3
 801ce28:	b29a      	uxth	r2, r3
 801ce2a:	69bb      	ldr	r3, [r7, #24]
 801ce2c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ce2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ce32:	4618      	mov	r0, r3
 801ce34:	3720      	adds	r7, #32
 801ce36:	46bd      	mov	sp, r7
 801ce38:	bd80      	pop	{r7, pc}
 801ce3a:	bf00      	nop
 801ce3c:	20000500 	.word	0x20000500
 801ce40:	2000572c 	.word	0x2000572c
 801ce44:	10624dd3 	.word	0x10624dd3

0801ce48 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801ce48:	b580      	push	{r7, lr}
 801ce4a:	b08a      	sub	sp, #40	; 0x28
 801ce4c:	af02      	add	r7, sp, #8
 801ce4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce54:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801ce56:	2104      	movs	r1, #4
 801ce58:	69b8      	ldr	r0, [r7, #24]
 801ce5a:	f000 f9e1 	bl	801d220 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ce5e:	f107 030c 	add.w	r3, r7, #12
 801ce62:	2203      	movs	r2, #3
 801ce64:	69b9      	ldr	r1, [r7, #24]
 801ce66:	6878      	ldr	r0, [r7, #4]
 801ce68:	f000 fe96 	bl	801db98 <dhcp_create_msg>
 801ce6c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ce6e:	697b      	ldr	r3, [r7, #20]
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d04c      	beq.n	801cf0e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ce74:	697b      	ldr	r3, [r7, #20]
 801ce76:	685b      	ldr	r3, [r3, #4]
 801ce78:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ce7a:	89b8      	ldrh	r0, [r7, #12]
 801ce7c:	693b      	ldr	r3, [r7, #16]
 801ce7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ce82:	2302      	movs	r3, #2
 801ce84:	2239      	movs	r2, #57	; 0x39
 801ce86:	f000 f9e5 	bl	801d254 <dhcp_option>
 801ce8a:	4603      	mov	r3, r0
 801ce8c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ce8e:	89b8      	ldrh	r0, [r7, #12]
 801ce90:	693b      	ldr	r3, [r7, #16]
 801ce92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ce9a:	461a      	mov	r2, r3
 801ce9c:	f000 fa34 	bl	801d308 <dhcp_option_short>
 801cea0:	4603      	mov	r3, r0
 801cea2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cea4:	89b8      	ldrh	r0, [r7, #12]
 801cea6:	693b      	ldr	r3, [r7, #16]
 801cea8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ceac:	2304      	movs	r3, #4
 801ceae:	2237      	movs	r2, #55	; 0x37
 801ceb0:	f000 f9d0 	bl	801d254 <dhcp_option>
 801ceb4:	4603      	mov	r3, r0
 801ceb6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ceb8:	2300      	movs	r3, #0
 801ceba:	77bb      	strb	r3, [r7, #30]
 801cebc:	e00e      	b.n	801cedc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801cebe:	89b8      	ldrh	r0, [r7, #12]
 801cec0:	693b      	ldr	r3, [r7, #16]
 801cec2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cec6:	7fbb      	ldrb	r3, [r7, #30]
 801cec8:	4a29      	ldr	r2, [pc, #164]	; (801cf70 <dhcp_rebind+0x128>)
 801ceca:	5cd3      	ldrb	r3, [r2, r3]
 801cecc:	461a      	mov	r2, r3
 801cece:	f000 f9f5 	bl	801d2bc <dhcp_option_byte>
 801ced2:	4603      	mov	r3, r0
 801ced4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ced6:	7fbb      	ldrb	r3, [r7, #30]
 801ced8:	3301      	adds	r3, #1
 801ceda:	77bb      	strb	r3, [r7, #30]
 801cedc:	7fbb      	ldrb	r3, [r7, #30]
 801cede:	2b03      	cmp	r3, #3
 801cee0:	d9ed      	bls.n	801cebe <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cee2:	89b8      	ldrh	r0, [r7, #12]
 801cee4:	693b      	ldr	r3, [r7, #16]
 801cee6:	33f0      	adds	r3, #240	; 0xf0
 801cee8:	697a      	ldr	r2, [r7, #20]
 801ceea:	4619      	mov	r1, r3
 801ceec:	f000 ff2a 	bl	801dd44 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801cef0:	4b20      	ldr	r3, [pc, #128]	; (801cf74 <dhcp_rebind+0x12c>)
 801cef2:	6818      	ldr	r0, [r3, #0]
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	9300      	str	r3, [sp, #0]
 801cef8:	2343      	movs	r3, #67	; 0x43
 801cefa:	4a1f      	ldr	r2, [pc, #124]	; (801cf78 <dhcp_rebind+0x130>)
 801cefc:	6979      	ldr	r1, [r7, #20]
 801cefe:	f7fe fd65 	bl	801b9cc <udp_sendto_if>
 801cf02:	4603      	mov	r3, r0
 801cf04:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801cf06:	6978      	ldr	r0, [r7, #20]
 801cf08:	f7f7 fd36 	bl	8014978 <pbuf_free>
 801cf0c:	e001      	b.n	801cf12 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801cf0e:	23ff      	movs	r3, #255	; 0xff
 801cf10:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801cf12:	69bb      	ldr	r3, [r7, #24]
 801cf14:	799b      	ldrb	r3, [r3, #6]
 801cf16:	2bff      	cmp	r3, #255	; 0xff
 801cf18:	d005      	beq.n	801cf26 <dhcp_rebind+0xde>
    dhcp->tries++;
 801cf1a:	69bb      	ldr	r3, [r7, #24]
 801cf1c:	799b      	ldrb	r3, [r3, #6]
 801cf1e:	3301      	adds	r3, #1
 801cf20:	b2da      	uxtb	r2, r3
 801cf22:	69bb      	ldr	r3, [r7, #24]
 801cf24:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801cf26:	69bb      	ldr	r3, [r7, #24]
 801cf28:	799b      	ldrb	r3, [r3, #6]
 801cf2a:	2b09      	cmp	r3, #9
 801cf2c:	d80a      	bhi.n	801cf44 <dhcp_rebind+0xfc>
 801cf2e:	69bb      	ldr	r3, [r7, #24]
 801cf30:	799b      	ldrb	r3, [r3, #6]
 801cf32:	b29b      	uxth	r3, r3
 801cf34:	461a      	mov	r2, r3
 801cf36:	0152      	lsls	r2, r2, #5
 801cf38:	1ad2      	subs	r2, r2, r3
 801cf3a:	0092      	lsls	r2, r2, #2
 801cf3c:	4413      	add	r3, r2
 801cf3e:	00db      	lsls	r3, r3, #3
 801cf40:	b29b      	uxth	r3, r3
 801cf42:	e001      	b.n	801cf48 <dhcp_rebind+0x100>
 801cf44:	f242 7310 	movw	r3, #10000	; 0x2710
 801cf48:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cf4a:	89fb      	ldrh	r3, [r7, #14]
 801cf4c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801cf50:	4a0a      	ldr	r2, [pc, #40]	; (801cf7c <dhcp_rebind+0x134>)
 801cf52:	fb82 1203 	smull	r1, r2, r2, r3
 801cf56:	1152      	asrs	r2, r2, #5
 801cf58:	17db      	asrs	r3, r3, #31
 801cf5a:	1ad3      	subs	r3, r2, r3
 801cf5c:	b29a      	uxth	r2, r3
 801cf5e:	69bb      	ldr	r3, [r7, #24]
 801cf60:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801cf62:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cf66:	4618      	mov	r0, r3
 801cf68:	3720      	adds	r7, #32
 801cf6a:	46bd      	mov	sp, r7
 801cf6c:	bd80      	pop	{r7, pc}
 801cf6e:	bf00      	nop
 801cf70:	20000500 	.word	0x20000500
 801cf74:	2000572c 	.word	0x2000572c
 801cf78:	08026688 	.word	0x08026688
 801cf7c:	10624dd3 	.word	0x10624dd3

0801cf80 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801cf80:	b5b0      	push	{r4, r5, r7, lr}
 801cf82:	b08a      	sub	sp, #40	; 0x28
 801cf84:	af02      	add	r7, sp, #8
 801cf86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf8c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801cf8e:	2103      	movs	r1, #3
 801cf90:	69b8      	ldr	r0, [r7, #24]
 801cf92:	f000 f945 	bl	801d220 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801cf96:	f107 030c 	add.w	r3, r7, #12
 801cf9a:	2203      	movs	r2, #3
 801cf9c:	69b9      	ldr	r1, [r7, #24]
 801cf9e:	6878      	ldr	r0, [r7, #4]
 801cfa0:	f000 fdfa 	bl	801db98 <dhcp_create_msg>
 801cfa4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801cfa6:	697b      	ldr	r3, [r7, #20]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d066      	beq.n	801d07a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801cfac:	697b      	ldr	r3, [r7, #20]
 801cfae:	685b      	ldr	r3, [r3, #4]
 801cfb0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cfb2:	89b8      	ldrh	r0, [r7, #12]
 801cfb4:	693b      	ldr	r3, [r7, #16]
 801cfb6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cfba:	2302      	movs	r3, #2
 801cfbc:	2239      	movs	r2, #57	; 0x39
 801cfbe:	f000 f949 	bl	801d254 <dhcp_option>
 801cfc2:	4603      	mov	r3, r0
 801cfc4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801cfc6:	89b8      	ldrh	r0, [r7, #12]
 801cfc8:	693b      	ldr	r3, [r7, #16]
 801cfca:	33f0      	adds	r3, #240	; 0xf0
 801cfcc:	f44f 7210 	mov.w	r2, #576	; 0x240
 801cfd0:	4619      	mov	r1, r3
 801cfd2:	f000 f999 	bl	801d308 <dhcp_option_short>
 801cfd6:	4603      	mov	r3, r0
 801cfd8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801cfda:	89b8      	ldrh	r0, [r7, #12]
 801cfdc:	693b      	ldr	r3, [r7, #16]
 801cfde:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cfe2:	2304      	movs	r3, #4
 801cfe4:	2232      	movs	r2, #50	; 0x32
 801cfe6:	f000 f935 	bl	801d254 <dhcp_option>
 801cfea:	4603      	mov	r3, r0
 801cfec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cfee:	89bc      	ldrh	r4, [r7, #12]
 801cff0:	693b      	ldr	r3, [r7, #16]
 801cff2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801cff6:	69bb      	ldr	r3, [r7, #24]
 801cff8:	69db      	ldr	r3, [r3, #28]
 801cffa:	4618      	mov	r0, r3
 801cffc:	f7f5 f943 	bl	8012286 <lwip_htonl>
 801d000:	4603      	mov	r3, r0
 801d002:	461a      	mov	r2, r3
 801d004:	4629      	mov	r1, r5
 801d006:	4620      	mov	r0, r4
 801d008:	f000 f9b0 	bl	801d36c <dhcp_option_long>
 801d00c:	4603      	mov	r3, r0
 801d00e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d010:	89b8      	ldrh	r0, [r7, #12]
 801d012:	693b      	ldr	r3, [r7, #16]
 801d014:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d018:	2304      	movs	r3, #4
 801d01a:	2237      	movs	r2, #55	; 0x37
 801d01c:	f000 f91a 	bl	801d254 <dhcp_option>
 801d020:	4603      	mov	r3, r0
 801d022:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d024:	2300      	movs	r3, #0
 801d026:	77bb      	strb	r3, [r7, #30]
 801d028:	e00e      	b.n	801d048 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d02a:	89b8      	ldrh	r0, [r7, #12]
 801d02c:	693b      	ldr	r3, [r7, #16]
 801d02e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d032:	7fbb      	ldrb	r3, [r7, #30]
 801d034:	4a29      	ldr	r2, [pc, #164]	; (801d0dc <dhcp_reboot+0x15c>)
 801d036:	5cd3      	ldrb	r3, [r2, r3]
 801d038:	461a      	mov	r2, r3
 801d03a:	f000 f93f 	bl	801d2bc <dhcp_option_byte>
 801d03e:	4603      	mov	r3, r0
 801d040:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d042:	7fbb      	ldrb	r3, [r7, #30]
 801d044:	3301      	adds	r3, #1
 801d046:	77bb      	strb	r3, [r7, #30]
 801d048:	7fbb      	ldrb	r3, [r7, #30]
 801d04a:	2b03      	cmp	r3, #3
 801d04c:	d9ed      	bls.n	801d02a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d04e:	89b8      	ldrh	r0, [r7, #12]
 801d050:	693b      	ldr	r3, [r7, #16]
 801d052:	33f0      	adds	r3, #240	; 0xf0
 801d054:	697a      	ldr	r2, [r7, #20]
 801d056:	4619      	mov	r1, r3
 801d058:	f000 fe74 	bl	801dd44 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d05c:	4b20      	ldr	r3, [pc, #128]	; (801d0e0 <dhcp_reboot+0x160>)
 801d05e:	6818      	ldr	r0, [r3, #0]
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	9300      	str	r3, [sp, #0]
 801d064:	2343      	movs	r3, #67	; 0x43
 801d066:	4a1f      	ldr	r2, [pc, #124]	; (801d0e4 <dhcp_reboot+0x164>)
 801d068:	6979      	ldr	r1, [r7, #20]
 801d06a:	f7fe fcaf 	bl	801b9cc <udp_sendto_if>
 801d06e:	4603      	mov	r3, r0
 801d070:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d072:	6978      	ldr	r0, [r7, #20]
 801d074:	f7f7 fc80 	bl	8014978 <pbuf_free>
 801d078:	e001      	b.n	801d07e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d07a:	23ff      	movs	r3, #255	; 0xff
 801d07c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d07e:	69bb      	ldr	r3, [r7, #24]
 801d080:	799b      	ldrb	r3, [r3, #6]
 801d082:	2bff      	cmp	r3, #255	; 0xff
 801d084:	d005      	beq.n	801d092 <dhcp_reboot+0x112>
    dhcp->tries++;
 801d086:	69bb      	ldr	r3, [r7, #24]
 801d088:	799b      	ldrb	r3, [r3, #6]
 801d08a:	3301      	adds	r3, #1
 801d08c:	b2da      	uxtb	r2, r3
 801d08e:	69bb      	ldr	r3, [r7, #24]
 801d090:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d092:	69bb      	ldr	r3, [r7, #24]
 801d094:	799b      	ldrb	r3, [r3, #6]
 801d096:	2b09      	cmp	r3, #9
 801d098:	d80a      	bhi.n	801d0b0 <dhcp_reboot+0x130>
 801d09a:	69bb      	ldr	r3, [r7, #24]
 801d09c:	799b      	ldrb	r3, [r3, #6]
 801d09e:	b29b      	uxth	r3, r3
 801d0a0:	461a      	mov	r2, r3
 801d0a2:	0152      	lsls	r2, r2, #5
 801d0a4:	1ad2      	subs	r2, r2, r3
 801d0a6:	0092      	lsls	r2, r2, #2
 801d0a8:	4413      	add	r3, r2
 801d0aa:	00db      	lsls	r3, r3, #3
 801d0ac:	b29b      	uxth	r3, r3
 801d0ae:	e001      	b.n	801d0b4 <dhcp_reboot+0x134>
 801d0b0:	f242 7310 	movw	r3, #10000	; 0x2710
 801d0b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d0b6:	89fb      	ldrh	r3, [r7, #14]
 801d0b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d0bc:	4a0a      	ldr	r2, [pc, #40]	; (801d0e8 <dhcp_reboot+0x168>)
 801d0be:	fb82 1203 	smull	r1, r2, r2, r3
 801d0c2:	1152      	asrs	r2, r2, #5
 801d0c4:	17db      	asrs	r3, r3, #31
 801d0c6:	1ad3      	subs	r3, r2, r3
 801d0c8:	b29a      	uxth	r2, r3
 801d0ca:	69bb      	ldr	r3, [r7, #24]
 801d0cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d0ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d0d2:	4618      	mov	r0, r3
 801d0d4:	3720      	adds	r7, #32
 801d0d6:	46bd      	mov	sp, r7
 801d0d8:	bdb0      	pop	{r4, r5, r7, pc}
 801d0da:	bf00      	nop
 801d0dc:	20000500 	.word	0x20000500
 801d0e0:	2000572c 	.word	0x2000572c
 801d0e4:	08026688 	.word	0x08026688
 801d0e8:	10624dd3 	.word	0x10624dd3

0801d0ec <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801d0ec:	b5b0      	push	{r4, r5, r7, lr}
 801d0ee:	b08a      	sub	sp, #40	; 0x28
 801d0f0:	af02      	add	r7, sp, #8
 801d0f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0f8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801d0fa:	69fb      	ldr	r3, [r7, #28]
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	f000 8084 	beq.w	801d20a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801d102:	69fb      	ldr	r3, [r7, #28]
 801d104:	795b      	ldrb	r3, [r3, #5]
 801d106:	2b00      	cmp	r3, #0
 801d108:	f000 8081 	beq.w	801d20e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d10c:	69fb      	ldr	r3, [r7, #28]
 801d10e:	699b      	ldr	r3, [r3, #24]
 801d110:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801d112:	69fb      	ldr	r3, [r7, #28]
 801d114:	2200      	movs	r2, #0
 801d116:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801d118:	69fb      	ldr	r3, [r7, #28]
 801d11a:	2200      	movs	r2, #0
 801d11c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d11e:	69fb      	ldr	r3, [r7, #28]
 801d120:	2200      	movs	r2, #0
 801d122:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d124:	69fb      	ldr	r3, [r7, #28]
 801d126:	2200      	movs	r2, #0
 801d128:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d12a:	69fb      	ldr	r3, [r7, #28]
 801d12c:	2200      	movs	r2, #0
 801d12e:	631a      	str	r2, [r3, #48]	; 0x30
 801d130:	69fb      	ldr	r3, [r7, #28]
 801d132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d134:	69fb      	ldr	r3, [r7, #28]
 801d136:	62da      	str	r2, [r3, #44]	; 0x2c
 801d138:	69fb      	ldr	r3, [r7, #28]
 801d13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d13c:	69fb      	ldr	r3, [r7, #28]
 801d13e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801d140:	69fb      	ldr	r3, [r7, #28]
 801d142:	2200      	movs	r2, #0
 801d144:	829a      	strh	r2, [r3, #20]
 801d146:	69fb      	ldr	r3, [r7, #28]
 801d148:	8a9a      	ldrh	r2, [r3, #20]
 801d14a:	69fb      	ldr	r3, [r7, #28]
 801d14c:	825a      	strh	r2, [r3, #18]
 801d14e:	69fb      	ldr	r3, [r7, #28]
 801d150:	8a5a      	ldrh	r2, [r3, #18]
 801d152:	69fb      	ldr	r3, [r7, #28]
 801d154:	821a      	strh	r2, [r3, #16]
 801d156:	69fb      	ldr	r3, [r7, #28]
 801d158:	8a1a      	ldrh	r2, [r3, #16]
 801d15a:	69fb      	ldr	r3, [r7, #28]
 801d15c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801d15e:	6878      	ldr	r0, [r7, #4]
 801d160:	f000 fe1e 	bl	801dda0 <dhcp_supplied_address>
 801d164:	4603      	mov	r3, r0
 801d166:	2b00      	cmp	r3, #0
 801d168:	d03b      	beq.n	801d1e2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801d16a:	f107 030e 	add.w	r3, r7, #14
 801d16e:	2207      	movs	r2, #7
 801d170:	69f9      	ldr	r1, [r7, #28]
 801d172:	6878      	ldr	r0, [r7, #4]
 801d174:	f000 fd10 	bl	801db98 <dhcp_create_msg>
 801d178:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801d17a:	69bb      	ldr	r3, [r7, #24]
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	d030      	beq.n	801d1e2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d180:	69bb      	ldr	r3, [r7, #24]
 801d182:	685b      	ldr	r3, [r3, #4]
 801d184:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d186:	89f8      	ldrh	r0, [r7, #14]
 801d188:	697b      	ldr	r3, [r7, #20]
 801d18a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d18e:	2304      	movs	r3, #4
 801d190:	2236      	movs	r2, #54	; 0x36
 801d192:	f000 f85f 	bl	801d254 <dhcp_option>
 801d196:	4603      	mov	r3, r0
 801d198:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d19a:	89fc      	ldrh	r4, [r7, #14]
 801d19c:	697b      	ldr	r3, [r7, #20]
 801d19e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d1a2:	693b      	ldr	r3, [r7, #16]
 801d1a4:	4618      	mov	r0, r3
 801d1a6:	f7f5 f86e 	bl	8012286 <lwip_htonl>
 801d1aa:	4603      	mov	r3, r0
 801d1ac:	461a      	mov	r2, r3
 801d1ae:	4629      	mov	r1, r5
 801d1b0:	4620      	mov	r0, r4
 801d1b2:	f000 f8db 	bl	801d36c <dhcp_option_long>
 801d1b6:	4603      	mov	r3, r0
 801d1b8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d1ba:	89f8      	ldrh	r0, [r7, #14]
 801d1bc:	697b      	ldr	r3, [r7, #20]
 801d1be:	33f0      	adds	r3, #240	; 0xf0
 801d1c0:	69ba      	ldr	r2, [r7, #24]
 801d1c2:	4619      	mov	r1, r3
 801d1c4:	f000 fdbe 	bl	801dd44 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d1c8:	4b13      	ldr	r3, [pc, #76]	; (801d218 <dhcp_release_and_stop+0x12c>)
 801d1ca:	6818      	ldr	r0, [r3, #0]
 801d1cc:	f107 0210 	add.w	r2, r7, #16
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	9300      	str	r3, [sp, #0]
 801d1d4:	2343      	movs	r3, #67	; 0x43
 801d1d6:	69b9      	ldr	r1, [r7, #24]
 801d1d8:	f7fe fbf8 	bl	801b9cc <udp_sendto_if>
      pbuf_free(p_out);
 801d1dc:	69b8      	ldr	r0, [r7, #24]
 801d1de:	f7f7 fbcb 	bl	8014978 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801d1e2:	4b0e      	ldr	r3, [pc, #56]	; (801d21c <dhcp_release_and_stop+0x130>)
 801d1e4:	4a0d      	ldr	r2, [pc, #52]	; (801d21c <dhcp_release_and_stop+0x130>)
 801d1e6:	490d      	ldr	r1, [pc, #52]	; (801d21c <dhcp_release_and_stop+0x130>)
 801d1e8:	6878      	ldr	r0, [r7, #4]
 801d1ea:	f7f6 feb7 	bl	8013f5c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801d1ee:	2100      	movs	r1, #0
 801d1f0:	69f8      	ldr	r0, [r7, #28]
 801d1f2:	f000 f815 	bl	801d220 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801d1f6:	69fb      	ldr	r3, [r7, #28]
 801d1f8:	791b      	ldrb	r3, [r3, #4]
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d008      	beq.n	801d210 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d1fe:	f7fe ff65 	bl	801c0cc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801d202:	69fb      	ldr	r3, [r7, #28]
 801d204:	2200      	movs	r2, #0
 801d206:	711a      	strb	r2, [r3, #4]
 801d208:	e002      	b.n	801d210 <dhcp_release_and_stop+0x124>
    return;
 801d20a:	bf00      	nop
 801d20c:	e000      	b.n	801d210 <dhcp_release_and_stop+0x124>
    return;
 801d20e:	bf00      	nop
  }
}
 801d210:	3720      	adds	r7, #32
 801d212:	46bd      	mov	sp, r7
 801d214:	bdb0      	pop	{r4, r5, r7, pc}
 801d216:	bf00      	nop
 801d218:	2000572c 	.word	0x2000572c
 801d21c:	08026684 	.word	0x08026684

0801d220 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801d220:	b480      	push	{r7}
 801d222:	b083      	sub	sp, #12
 801d224:	af00      	add	r7, sp, #0
 801d226:	6078      	str	r0, [r7, #4]
 801d228:	460b      	mov	r3, r1
 801d22a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	795b      	ldrb	r3, [r3, #5]
 801d230:	78fa      	ldrb	r2, [r7, #3]
 801d232:	429a      	cmp	r2, r3
 801d234:	d008      	beq.n	801d248 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	78fa      	ldrb	r2, [r7, #3]
 801d23a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	2200      	movs	r2, #0
 801d240:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	2200      	movs	r2, #0
 801d246:	811a      	strh	r2, [r3, #8]
  }
}
 801d248:	bf00      	nop
 801d24a:	370c      	adds	r7, #12
 801d24c:	46bd      	mov	sp, r7
 801d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d252:	4770      	bx	lr

0801d254 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801d254:	b580      	push	{r7, lr}
 801d256:	b082      	sub	sp, #8
 801d258:	af00      	add	r7, sp, #0
 801d25a:	6039      	str	r1, [r7, #0]
 801d25c:	4611      	mov	r1, r2
 801d25e:	461a      	mov	r2, r3
 801d260:	4603      	mov	r3, r0
 801d262:	80fb      	strh	r3, [r7, #6]
 801d264:	460b      	mov	r3, r1
 801d266:	717b      	strb	r3, [r7, #5]
 801d268:	4613      	mov	r3, r2
 801d26a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d26c:	88fa      	ldrh	r2, [r7, #6]
 801d26e:	793b      	ldrb	r3, [r7, #4]
 801d270:	4413      	add	r3, r2
 801d272:	3302      	adds	r3, #2
 801d274:	2b44      	cmp	r3, #68	; 0x44
 801d276:	d906      	bls.n	801d286 <dhcp_option+0x32>
 801d278:	4b0d      	ldr	r3, [pc, #52]	; (801d2b0 <dhcp_option+0x5c>)
 801d27a:	f240 529a 	movw	r2, #1434	; 0x59a
 801d27e:	490d      	ldr	r1, [pc, #52]	; (801d2b4 <dhcp_option+0x60>)
 801d280:	480d      	ldr	r0, [pc, #52]	; (801d2b8 <dhcp_option+0x64>)
 801d282:	f003 fda3 	bl	8020dcc <iprintf>
  options[options_out_len++] = option_type;
 801d286:	88fb      	ldrh	r3, [r7, #6]
 801d288:	1c5a      	adds	r2, r3, #1
 801d28a:	80fa      	strh	r2, [r7, #6]
 801d28c:	461a      	mov	r2, r3
 801d28e:	683b      	ldr	r3, [r7, #0]
 801d290:	4413      	add	r3, r2
 801d292:	797a      	ldrb	r2, [r7, #5]
 801d294:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801d296:	88fb      	ldrh	r3, [r7, #6]
 801d298:	1c5a      	adds	r2, r3, #1
 801d29a:	80fa      	strh	r2, [r7, #6]
 801d29c:	461a      	mov	r2, r3
 801d29e:	683b      	ldr	r3, [r7, #0]
 801d2a0:	4413      	add	r3, r2
 801d2a2:	793a      	ldrb	r2, [r7, #4]
 801d2a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d2a6:	88fb      	ldrh	r3, [r7, #6]
}
 801d2a8:	4618      	mov	r0, r3
 801d2aa:	3708      	adds	r7, #8
 801d2ac:	46bd      	mov	sp, r7
 801d2ae:	bd80      	pop	{r7, pc}
 801d2b0:	08025834 	.word	0x08025834
 801d2b4:	080259c8 	.word	0x080259c8
 801d2b8:	08025894 	.word	0x08025894

0801d2bc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801d2bc:	b580      	push	{r7, lr}
 801d2be:	b082      	sub	sp, #8
 801d2c0:	af00      	add	r7, sp, #0
 801d2c2:	4603      	mov	r3, r0
 801d2c4:	6039      	str	r1, [r7, #0]
 801d2c6:	80fb      	strh	r3, [r7, #6]
 801d2c8:	4613      	mov	r3, r2
 801d2ca:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d2cc:	88fb      	ldrh	r3, [r7, #6]
 801d2ce:	2b43      	cmp	r3, #67	; 0x43
 801d2d0:	d906      	bls.n	801d2e0 <dhcp_option_byte+0x24>
 801d2d2:	4b0a      	ldr	r3, [pc, #40]	; (801d2fc <dhcp_option_byte+0x40>)
 801d2d4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801d2d8:	4909      	ldr	r1, [pc, #36]	; (801d300 <dhcp_option_byte+0x44>)
 801d2da:	480a      	ldr	r0, [pc, #40]	; (801d304 <dhcp_option_byte+0x48>)
 801d2dc:	f003 fd76 	bl	8020dcc <iprintf>
  options[options_out_len++] = value;
 801d2e0:	88fb      	ldrh	r3, [r7, #6]
 801d2e2:	1c5a      	adds	r2, r3, #1
 801d2e4:	80fa      	strh	r2, [r7, #6]
 801d2e6:	461a      	mov	r2, r3
 801d2e8:	683b      	ldr	r3, [r7, #0]
 801d2ea:	4413      	add	r3, r2
 801d2ec:	797a      	ldrb	r2, [r7, #5]
 801d2ee:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d2f0:	88fb      	ldrh	r3, [r7, #6]
}
 801d2f2:	4618      	mov	r0, r3
 801d2f4:	3708      	adds	r7, #8
 801d2f6:	46bd      	mov	sp, r7
 801d2f8:	bd80      	pop	{r7, pc}
 801d2fa:	bf00      	nop
 801d2fc:	08025834 	.word	0x08025834
 801d300:	08025a0c 	.word	0x08025a0c
 801d304:	08025894 	.word	0x08025894

0801d308 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801d308:	b580      	push	{r7, lr}
 801d30a:	b082      	sub	sp, #8
 801d30c:	af00      	add	r7, sp, #0
 801d30e:	4603      	mov	r3, r0
 801d310:	6039      	str	r1, [r7, #0]
 801d312:	80fb      	strh	r3, [r7, #6]
 801d314:	4613      	mov	r3, r2
 801d316:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801d318:	88fb      	ldrh	r3, [r7, #6]
 801d31a:	3302      	adds	r3, #2
 801d31c:	2b44      	cmp	r3, #68	; 0x44
 801d31e:	d906      	bls.n	801d32e <dhcp_option_short+0x26>
 801d320:	4b0f      	ldr	r3, [pc, #60]	; (801d360 <dhcp_option_short+0x58>)
 801d322:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801d326:	490f      	ldr	r1, [pc, #60]	; (801d364 <dhcp_option_short+0x5c>)
 801d328:	480f      	ldr	r0, [pc, #60]	; (801d368 <dhcp_option_short+0x60>)
 801d32a:	f003 fd4f 	bl	8020dcc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801d32e:	88bb      	ldrh	r3, [r7, #4]
 801d330:	0a1b      	lsrs	r3, r3, #8
 801d332:	b29a      	uxth	r2, r3
 801d334:	88fb      	ldrh	r3, [r7, #6]
 801d336:	1c59      	adds	r1, r3, #1
 801d338:	80f9      	strh	r1, [r7, #6]
 801d33a:	4619      	mov	r1, r3
 801d33c:	683b      	ldr	r3, [r7, #0]
 801d33e:	440b      	add	r3, r1
 801d340:	b2d2      	uxtb	r2, r2
 801d342:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801d344:	88fb      	ldrh	r3, [r7, #6]
 801d346:	1c5a      	adds	r2, r3, #1
 801d348:	80fa      	strh	r2, [r7, #6]
 801d34a:	461a      	mov	r2, r3
 801d34c:	683b      	ldr	r3, [r7, #0]
 801d34e:	4413      	add	r3, r2
 801d350:	88ba      	ldrh	r2, [r7, #4]
 801d352:	b2d2      	uxtb	r2, r2
 801d354:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d356:	88fb      	ldrh	r3, [r7, #6]
}
 801d358:	4618      	mov	r0, r3
 801d35a:	3708      	adds	r7, #8
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bd80      	pop	{r7, pc}
 801d360:	08025834 	.word	0x08025834
 801d364:	08025a44 	.word	0x08025a44
 801d368:	08025894 	.word	0x08025894

0801d36c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801d36c:	b580      	push	{r7, lr}
 801d36e:	b084      	sub	sp, #16
 801d370:	af00      	add	r7, sp, #0
 801d372:	4603      	mov	r3, r0
 801d374:	60b9      	str	r1, [r7, #8]
 801d376:	607a      	str	r2, [r7, #4]
 801d378:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801d37a:	89fb      	ldrh	r3, [r7, #14]
 801d37c:	3304      	adds	r3, #4
 801d37e:	2b44      	cmp	r3, #68	; 0x44
 801d380:	d906      	bls.n	801d390 <dhcp_option_long+0x24>
 801d382:	4b19      	ldr	r3, [pc, #100]	; (801d3e8 <dhcp_option_long+0x7c>)
 801d384:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801d388:	4918      	ldr	r1, [pc, #96]	; (801d3ec <dhcp_option_long+0x80>)
 801d38a:	4819      	ldr	r0, [pc, #100]	; (801d3f0 <dhcp_option_long+0x84>)
 801d38c:	f003 fd1e 	bl	8020dcc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	0e1a      	lsrs	r2, r3, #24
 801d394:	89fb      	ldrh	r3, [r7, #14]
 801d396:	1c59      	adds	r1, r3, #1
 801d398:	81f9      	strh	r1, [r7, #14]
 801d39a:	4619      	mov	r1, r3
 801d39c:	68bb      	ldr	r3, [r7, #8]
 801d39e:	440b      	add	r3, r1
 801d3a0:	b2d2      	uxtb	r2, r2
 801d3a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	0c1a      	lsrs	r2, r3, #16
 801d3a8:	89fb      	ldrh	r3, [r7, #14]
 801d3aa:	1c59      	adds	r1, r3, #1
 801d3ac:	81f9      	strh	r1, [r7, #14]
 801d3ae:	4619      	mov	r1, r3
 801d3b0:	68bb      	ldr	r3, [r7, #8]
 801d3b2:	440b      	add	r3, r1
 801d3b4:	b2d2      	uxtb	r2, r2
 801d3b6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	0a1a      	lsrs	r2, r3, #8
 801d3bc:	89fb      	ldrh	r3, [r7, #14]
 801d3be:	1c59      	adds	r1, r3, #1
 801d3c0:	81f9      	strh	r1, [r7, #14]
 801d3c2:	4619      	mov	r1, r3
 801d3c4:	68bb      	ldr	r3, [r7, #8]
 801d3c6:	440b      	add	r3, r1
 801d3c8:	b2d2      	uxtb	r2, r2
 801d3ca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801d3cc:	89fb      	ldrh	r3, [r7, #14]
 801d3ce:	1c5a      	adds	r2, r3, #1
 801d3d0:	81fa      	strh	r2, [r7, #14]
 801d3d2:	461a      	mov	r2, r3
 801d3d4:	68bb      	ldr	r3, [r7, #8]
 801d3d6:	4413      	add	r3, r2
 801d3d8:	687a      	ldr	r2, [r7, #4]
 801d3da:	b2d2      	uxtb	r2, r2
 801d3dc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d3de:	89fb      	ldrh	r3, [r7, #14]
}
 801d3e0:	4618      	mov	r0, r3
 801d3e2:	3710      	adds	r7, #16
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	bd80      	pop	{r7, pc}
 801d3e8:	08025834 	.word	0x08025834
 801d3ec:	08025a80 	.word	0x08025a80
 801d3f0:	08025894 	.word	0x08025894

0801d3f4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801d3f4:	b580      	push	{r7, lr}
 801d3f6:	b090      	sub	sp, #64	; 0x40
 801d3f8:	af00      	add	r7, sp, #0
 801d3fa:	6078      	str	r0, [r7, #4]
 801d3fc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801d3fe:	2300      	movs	r3, #0
 801d400:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801d402:	2300      	movs	r3, #0
 801d404:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801d406:	220a      	movs	r2, #10
 801d408:	2100      	movs	r1, #0
 801d40a:	48ba      	ldr	r0, [pc, #744]	; (801d6f4 <dhcp_parse_reply+0x300>)
 801d40c:	f003 fc1c 	bl	8020c48 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	895b      	ldrh	r3, [r3, #10]
 801d414:	2b2b      	cmp	r3, #43	; 0x2b
 801d416:	d802      	bhi.n	801d41e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801d418:	f06f 0301 	mvn.w	r3, #1
 801d41c:	e2e9      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	685b      	ldr	r3, [r3, #4]
 801d422:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801d424:	23f0      	movs	r3, #240	; 0xf0
 801d426:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	891b      	ldrh	r3, [r3, #8]
 801d42c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801d432:	e00c      	b.n	801d44e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801d434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d436:	895b      	ldrh	r3, [r3, #10]
 801d438:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d43a:	1ad3      	subs	r3, r2, r3
 801d43c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d440:	895b      	ldrh	r3, [r3, #10]
 801d442:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801d444:	1ad3      	subs	r3, r2, r3
 801d446:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801d448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801d44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d450:	2b00      	cmp	r3, #0
 801d452:	d004      	beq.n	801d45e <dhcp_parse_reply+0x6a>
 801d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d456:	895b      	ldrh	r3, [r3, #10]
 801d458:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d45a:	429a      	cmp	r2, r3
 801d45c:	d2ea      	bcs.n	801d434 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d460:	2b00      	cmp	r3, #0
 801d462:	d102      	bne.n	801d46a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801d464:	f06f 0301 	mvn.w	r3, #1
 801d468:	e2c3      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
  }
  offset = options_idx;
 801d46a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801d46c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801d46e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d470:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801d472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d474:	685b      	ldr	r3, [r3, #4]
 801d476:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d478:	e267      	b.n	801d94a <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 801d47a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d47c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d47e:	4413      	add	r3, r2
 801d480:	781b      	ldrb	r3, [r3, #0]
 801d482:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801d484:	2300      	movs	r3, #0
 801d486:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801d48a:	f04f 33ff 	mov.w	r3, #4294967295
 801d48e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801d490:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d492:	3302      	adds	r3, #2
 801d494:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801d496:	8bfa      	ldrh	r2, [r7, #30]
 801d498:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d49a:	429a      	cmp	r2, r3
 801d49c:	d202      	bcs.n	801d4a4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801d49e:	f06f 0301 	mvn.w	r3, #1
 801d4a2:	e2a6      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801d4a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d4a6:	3301      	adds	r3, #1
 801d4a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d4aa:	8952      	ldrh	r2, [r2, #10]
 801d4ac:	4293      	cmp	r3, r2
 801d4ae:	da07      	bge.n	801d4c0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801d4b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d4b2:	3301      	adds	r3, #1
 801d4b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d4b6:	4413      	add	r3, r2
 801d4b8:	781b      	ldrb	r3, [r3, #0]
 801d4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d4be:	e00b      	b.n	801d4d8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801d4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4c2:	681b      	ldr	r3, [r3, #0]
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	d004      	beq.n	801d4d2 <dhcp_parse_reply+0xde>
 801d4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	685b      	ldr	r3, [r3, #4]
 801d4ce:	781b      	ldrb	r3, [r3, #0]
 801d4d0:	e000      	b.n	801d4d4 <dhcp_parse_reply+0xe0>
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801d4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d4dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801d4e0:	7dfb      	ldrb	r3, [r7, #23]
 801d4e2:	2b3b      	cmp	r3, #59	; 0x3b
 801d4e4:	f200 815a 	bhi.w	801d79c <dhcp_parse_reply+0x3a8>
 801d4e8:	a201      	add	r2, pc, #4	; (adr r2, 801d4f0 <dhcp_parse_reply+0xfc>)
 801d4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d4ee:	bf00      	nop
 801d4f0:	0801d5e1 	.word	0x0801d5e1
 801d4f4:	0801d5f1 	.word	0x0801d5f1
 801d4f8:	0801d79d 	.word	0x0801d79d
 801d4fc:	0801d613 	.word	0x0801d613
 801d500:	0801d79d 	.word	0x0801d79d
 801d504:	0801d79d 	.word	0x0801d79d
 801d508:	0801d63f 	.word	0x0801d63f
 801d50c:	0801d79d 	.word	0x0801d79d
 801d510:	0801d79d 	.word	0x0801d79d
 801d514:	0801d79d 	.word	0x0801d79d
 801d518:	0801d79d 	.word	0x0801d79d
 801d51c:	0801d79d 	.word	0x0801d79d
 801d520:	0801d79d 	.word	0x0801d79d
 801d524:	0801d79d 	.word	0x0801d79d
 801d528:	0801d79d 	.word	0x0801d79d
 801d52c:	0801d79d 	.word	0x0801d79d
 801d530:	0801d79d 	.word	0x0801d79d
 801d534:	0801d79d 	.word	0x0801d79d
 801d538:	0801d79d 	.word	0x0801d79d
 801d53c:	0801d79d 	.word	0x0801d79d
 801d540:	0801d79d 	.word	0x0801d79d
 801d544:	0801d79d 	.word	0x0801d79d
 801d548:	0801d79d 	.word	0x0801d79d
 801d54c:	0801d79d 	.word	0x0801d79d
 801d550:	0801d79d 	.word	0x0801d79d
 801d554:	0801d79d 	.word	0x0801d79d
 801d558:	0801d79d 	.word	0x0801d79d
 801d55c:	0801d79d 	.word	0x0801d79d
 801d560:	0801d79d 	.word	0x0801d79d
 801d564:	0801d79d 	.word	0x0801d79d
 801d568:	0801d79d 	.word	0x0801d79d
 801d56c:	0801d79d 	.word	0x0801d79d
 801d570:	0801d79d 	.word	0x0801d79d
 801d574:	0801d79d 	.word	0x0801d79d
 801d578:	0801d79d 	.word	0x0801d79d
 801d57c:	0801d79d 	.word	0x0801d79d
 801d580:	0801d79d 	.word	0x0801d79d
 801d584:	0801d79d 	.word	0x0801d79d
 801d588:	0801d79d 	.word	0x0801d79d
 801d58c:	0801d79d 	.word	0x0801d79d
 801d590:	0801d79d 	.word	0x0801d79d
 801d594:	0801d79d 	.word	0x0801d79d
 801d598:	0801d79d 	.word	0x0801d79d
 801d59c:	0801d79d 	.word	0x0801d79d
 801d5a0:	0801d79d 	.word	0x0801d79d
 801d5a4:	0801d79d 	.word	0x0801d79d
 801d5a8:	0801d79d 	.word	0x0801d79d
 801d5ac:	0801d79d 	.word	0x0801d79d
 801d5b0:	0801d79d 	.word	0x0801d79d
 801d5b4:	0801d79d 	.word	0x0801d79d
 801d5b8:	0801d79d 	.word	0x0801d79d
 801d5bc:	0801d695 	.word	0x0801d695
 801d5c0:	0801d6b7 	.word	0x0801d6b7
 801d5c4:	0801d715 	.word	0x0801d715
 801d5c8:	0801d737 	.word	0x0801d737
 801d5cc:	0801d79d 	.word	0x0801d79d
 801d5d0:	0801d79d 	.word	0x0801d79d
 801d5d4:	0801d79d 	.word	0x0801d79d
 801d5d8:	0801d759 	.word	0x0801d759
 801d5dc:	0801d77b 	.word	0x0801d77b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801d5e0:	2300      	movs	r3, #0
 801d5e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d5ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801d5ee:	e0d9      	b.n	801d7a4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d5f4:	2b04      	cmp	r3, #4
 801d5f6:	d009      	beq.n	801d60c <dhcp_parse_reply+0x218>
 801d5f8:	4b3f      	ldr	r3, [pc, #252]	; (801d6f8 <dhcp_parse_reply+0x304>)
 801d5fa:	f240 622e 	movw	r2, #1582	; 0x62e
 801d5fe:	493f      	ldr	r1, [pc, #252]	; (801d6fc <dhcp_parse_reply+0x308>)
 801d600:	483f      	ldr	r0, [pc, #252]	; (801d700 <dhcp_parse_reply+0x30c>)
 801d602:	f003 fbe3 	bl	8020dcc <iprintf>
 801d606:	f06f 0305 	mvn.w	r3, #5
 801d60a:	e1f2      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801d60c:	2306      	movs	r3, #6
 801d60e:	623b      	str	r3, [r7, #32]
        break;
 801d610:	e0c8      	b.n	801d7a4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801d612:	2304      	movs	r3, #4
 801d614:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801d618:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d61c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d620:	429a      	cmp	r2, r3
 801d622:	d209      	bcs.n	801d638 <dhcp_parse_reply+0x244>
 801d624:	4b34      	ldr	r3, [pc, #208]	; (801d6f8 <dhcp_parse_reply+0x304>)
 801d626:	f240 6233 	movw	r2, #1587	; 0x633
 801d62a:	4936      	ldr	r1, [pc, #216]	; (801d704 <dhcp_parse_reply+0x310>)
 801d62c:	4834      	ldr	r0, [pc, #208]	; (801d700 <dhcp_parse_reply+0x30c>)
 801d62e:	f003 fbcd 	bl	8020dcc <iprintf>
 801d632:	f06f 0305 	mvn.w	r3, #5
 801d636:	e1dc      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801d638:	2307      	movs	r3, #7
 801d63a:	623b      	str	r3, [r7, #32]
        break;
 801d63c:	e0b2      	b.n	801d7a4 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801d63e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d642:	f003 0303 	and.w	r3, r3, #3
 801d646:	b2db      	uxtb	r3, r3
 801d648:	2b00      	cmp	r3, #0
 801d64a:	d009      	beq.n	801d660 <dhcp_parse_reply+0x26c>
 801d64c:	4b2a      	ldr	r3, [pc, #168]	; (801d6f8 <dhcp_parse_reply+0x304>)
 801d64e:	f240 6239 	movw	r2, #1593	; 0x639
 801d652:	492d      	ldr	r1, [pc, #180]	; (801d708 <dhcp_parse_reply+0x314>)
 801d654:	482a      	ldr	r0, [pc, #168]	; (801d700 <dhcp_parse_reply+0x30c>)
 801d656:	f003 fbb9 	bl	8020dcc <iprintf>
 801d65a:	f06f 0305 	mvn.w	r3, #5
 801d65e:	e1c8      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801d660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d664:	2b08      	cmp	r3, #8
 801d666:	bf28      	it	cs
 801d668:	2308      	movcs	r3, #8
 801d66a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801d66e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d672:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d676:	429a      	cmp	r2, r3
 801d678:	d209      	bcs.n	801d68e <dhcp_parse_reply+0x29a>
 801d67a:	4b1f      	ldr	r3, [pc, #124]	; (801d6f8 <dhcp_parse_reply+0x304>)
 801d67c:	f240 623c 	movw	r2, #1596	; 0x63c
 801d680:	4920      	ldr	r1, [pc, #128]	; (801d704 <dhcp_parse_reply+0x310>)
 801d682:	481f      	ldr	r0, [pc, #124]	; (801d700 <dhcp_parse_reply+0x30c>)
 801d684:	f003 fba2 	bl	8020dcc <iprintf>
 801d688:	f06f 0305 	mvn.w	r3, #5
 801d68c:	e1b1      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801d68e:	2308      	movs	r3, #8
 801d690:	623b      	str	r3, [r7, #32]
        break;
 801d692:	e087      	b.n	801d7a4 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d698:	2b04      	cmp	r3, #4
 801d69a:	d009      	beq.n	801d6b0 <dhcp_parse_reply+0x2bc>
 801d69c:	4b16      	ldr	r3, [pc, #88]	; (801d6f8 <dhcp_parse_reply+0x304>)
 801d69e:	f240 6241 	movw	r2, #1601	; 0x641
 801d6a2:	4916      	ldr	r1, [pc, #88]	; (801d6fc <dhcp_parse_reply+0x308>)
 801d6a4:	4816      	ldr	r0, [pc, #88]	; (801d700 <dhcp_parse_reply+0x30c>)
 801d6a6:	f003 fb91 	bl	8020dcc <iprintf>
 801d6aa:	f06f 0305 	mvn.w	r3, #5
 801d6ae:	e1a0      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801d6b0:	2303      	movs	r3, #3
 801d6b2:	623b      	str	r3, [r7, #32]
        break;
 801d6b4:	e076      	b.n	801d7a4 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d6b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d6ba:	2b01      	cmp	r3, #1
 801d6bc:	d009      	beq.n	801d6d2 <dhcp_parse_reply+0x2de>
 801d6be:	4b0e      	ldr	r3, [pc, #56]	; (801d6f8 <dhcp_parse_reply+0x304>)
 801d6c0:	f240 624f 	movw	r2, #1615	; 0x64f
 801d6c4:	4911      	ldr	r1, [pc, #68]	; (801d70c <dhcp_parse_reply+0x318>)
 801d6c6:	480e      	ldr	r0, [pc, #56]	; (801d700 <dhcp_parse_reply+0x30c>)
 801d6c8:	f003 fb80 	bl	8020dcc <iprintf>
 801d6cc:	f06f 0305 	mvn.w	r3, #5
 801d6d0:	e18f      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801d6d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801d6d4:	2bf0      	cmp	r3, #240	; 0xf0
 801d6d6:	d009      	beq.n	801d6ec <dhcp_parse_reply+0x2f8>
 801d6d8:	4b07      	ldr	r3, [pc, #28]	; (801d6f8 <dhcp_parse_reply+0x304>)
 801d6da:	f240 6251 	movw	r2, #1617	; 0x651
 801d6de:	490c      	ldr	r1, [pc, #48]	; (801d710 <dhcp_parse_reply+0x31c>)
 801d6e0:	4807      	ldr	r0, [pc, #28]	; (801d700 <dhcp_parse_reply+0x30c>)
 801d6e2:	f003 fb73 	bl	8020dcc <iprintf>
 801d6e6:	f06f 0305 	mvn.w	r3, #5
 801d6ea:	e182      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801d6ec:	2300      	movs	r3, #0
 801d6ee:	623b      	str	r3, [r7, #32]
        break;
 801d6f0:	e058      	b.n	801d7a4 <dhcp_parse_reply+0x3b0>
 801d6f2:	bf00      	nop
 801d6f4:	20016dcc 	.word	0x20016dcc
 801d6f8:	08025834 	.word	0x08025834
 801d6fc:	08025abc 	.word	0x08025abc
 801d700:	08025894 	.word	0x08025894
 801d704:	08025ac8 	.word	0x08025ac8
 801d708:	08025adc 	.word	0x08025adc
 801d70c:	08025aec 	.word	0x08025aec
 801d710:	08025af8 	.word	0x08025af8
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d718:	2b01      	cmp	r3, #1
 801d71a:	d009      	beq.n	801d730 <dhcp_parse_reply+0x33c>
 801d71c:	4ba5      	ldr	r3, [pc, #660]	; (801d9b4 <dhcp_parse_reply+0x5c0>)
 801d71e:	f240 6255 	movw	r2, #1621	; 0x655
 801d722:	49a5      	ldr	r1, [pc, #660]	; (801d9b8 <dhcp_parse_reply+0x5c4>)
 801d724:	48a5      	ldr	r0, [pc, #660]	; (801d9bc <dhcp_parse_reply+0x5c8>)
 801d726:	f003 fb51 	bl	8020dcc <iprintf>
 801d72a:	f06f 0305 	mvn.w	r3, #5
 801d72e:	e160      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801d730:	2301      	movs	r3, #1
 801d732:	623b      	str	r3, [r7, #32]
        break;
 801d734:	e036      	b.n	801d7a4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d73a:	2b04      	cmp	r3, #4
 801d73c:	d009      	beq.n	801d752 <dhcp_parse_reply+0x35e>
 801d73e:	4b9d      	ldr	r3, [pc, #628]	; (801d9b4 <dhcp_parse_reply+0x5c0>)
 801d740:	f240 6259 	movw	r2, #1625	; 0x659
 801d744:	499e      	ldr	r1, [pc, #632]	; (801d9c0 <dhcp_parse_reply+0x5cc>)
 801d746:	489d      	ldr	r0, [pc, #628]	; (801d9bc <dhcp_parse_reply+0x5c8>)
 801d748:	f003 fb40 	bl	8020dcc <iprintf>
 801d74c:	f06f 0305 	mvn.w	r3, #5
 801d750:	e14f      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801d752:	2302      	movs	r3, #2
 801d754:	623b      	str	r3, [r7, #32]
        break;
 801d756:	e025      	b.n	801d7a4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d75c:	2b04      	cmp	r3, #4
 801d75e:	d009      	beq.n	801d774 <dhcp_parse_reply+0x380>
 801d760:	4b94      	ldr	r3, [pc, #592]	; (801d9b4 <dhcp_parse_reply+0x5c0>)
 801d762:	f240 625d 	movw	r2, #1629	; 0x65d
 801d766:	4996      	ldr	r1, [pc, #600]	; (801d9c0 <dhcp_parse_reply+0x5cc>)
 801d768:	4894      	ldr	r0, [pc, #592]	; (801d9bc <dhcp_parse_reply+0x5c8>)
 801d76a:	f003 fb2f 	bl	8020dcc <iprintf>
 801d76e:	f06f 0305 	mvn.w	r3, #5
 801d772:	e13e      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T1;
 801d774:	2304      	movs	r3, #4
 801d776:	623b      	str	r3, [r7, #32]
        break;
 801d778:	e014      	b.n	801d7a4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d77a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d77e:	2b04      	cmp	r3, #4
 801d780:	d009      	beq.n	801d796 <dhcp_parse_reply+0x3a2>
 801d782:	4b8c      	ldr	r3, [pc, #560]	; (801d9b4 <dhcp_parse_reply+0x5c0>)
 801d784:	f240 6261 	movw	r2, #1633	; 0x661
 801d788:	498d      	ldr	r1, [pc, #564]	; (801d9c0 <dhcp_parse_reply+0x5cc>)
 801d78a:	488c      	ldr	r0, [pc, #560]	; (801d9bc <dhcp_parse_reply+0x5c8>)
 801d78c:	f003 fb1e 	bl	8020dcc <iprintf>
 801d790:	f06f 0305 	mvn.w	r3, #5
 801d794:	e12d      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T2;
 801d796:	2305      	movs	r3, #5
 801d798:	623b      	str	r3, [r7, #32]
        break;
 801d79a:	e003      	b.n	801d7a4 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 801d79c:	2300      	movs	r3, #0
 801d79e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801d7a2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801d7a4:	7dfb      	ldrb	r3, [r7, #23]
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d103      	bne.n	801d7b2 <dhcp_parse_reply+0x3be>
      offset++;
 801d7aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d7ac:	3301      	adds	r3, #1
 801d7ae:	877b      	strh	r3, [r7, #58]	; 0x3a
 801d7b0:	e0a1      	b.n	801d8f6 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801d7b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d7b8:	4413      	add	r3, r2
 801d7ba:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801d7be:	4293      	cmp	r3, r2
 801d7c0:	dd02      	ble.n	801d7c8 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 801d7c2:	f06f 0301 	mvn.w	r3, #1
 801d7c6:	e114      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
      }
      offset = (u16_t)(offset + len + 2);
 801d7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d7cc:	b29a      	uxth	r2, r3
 801d7ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d7d0:	4413      	add	r3, r2
 801d7d2:	b29b      	uxth	r3, r3
 801d7d4:	3302      	adds	r3, #2
 801d7d6:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801d7d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	f000 808a 	beq.w	801d8f6 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 801d7e2:	2300      	movs	r3, #0
 801d7e4:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801d7e6:	6a3b      	ldr	r3, [r7, #32]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	db02      	blt.n	801d7f2 <dhcp_parse_reply+0x3fe>
 801d7ec:	6a3b      	ldr	r3, [r7, #32]
 801d7ee:	2b09      	cmp	r3, #9
 801d7f0:	dd06      	ble.n	801d800 <dhcp_parse_reply+0x40c>
 801d7f2:	4b70      	ldr	r3, [pc, #448]	; (801d9b4 <dhcp_parse_reply+0x5c0>)
 801d7f4:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801d7f8:	4972      	ldr	r1, [pc, #456]	; (801d9c4 <dhcp_parse_reply+0x5d0>)
 801d7fa:	4870      	ldr	r0, [pc, #448]	; (801d9bc <dhcp_parse_reply+0x5c8>)
 801d7fc:	f003 fae6 	bl	8020dcc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801d800:	4a71      	ldr	r2, [pc, #452]	; (801d9c8 <dhcp_parse_reply+0x5d4>)
 801d802:	6a3b      	ldr	r3, [r7, #32]
 801d804:	4413      	add	r3, r2
 801d806:	781b      	ldrb	r3, [r3, #0]
 801d808:	2b00      	cmp	r3, #0
 801d80a:	d174      	bne.n	801d8f6 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 801d80c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d810:	2b04      	cmp	r3, #4
 801d812:	bf28      	it	cs
 801d814:	2304      	movcs	r3, #4
 801d816:	b2db      	uxtb	r3, r3
 801d818:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801d81a:	8bfb      	ldrh	r3, [r7, #30]
 801d81c:	8aba      	ldrh	r2, [r7, #20]
 801d81e:	f107 0108 	add.w	r1, r7, #8
 801d822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d824:	f7f7 faae 	bl	8014d84 <pbuf_copy_partial>
 801d828:	4603      	mov	r3, r0
 801d82a:	461a      	mov	r2, r3
 801d82c:	8abb      	ldrh	r3, [r7, #20]
 801d82e:	4293      	cmp	r3, r2
 801d830:	d002      	beq.n	801d838 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801d832:	f06f 0301 	mvn.w	r3, #1
 801d836:	e0dc      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
          }
          if (decode_len > 4) {
 801d838:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d83c:	2b04      	cmp	r3, #4
 801d83e:	d933      	bls.n	801d8a8 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801d840:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d844:	f003 0303 	and.w	r3, r3, #3
 801d848:	b2db      	uxtb	r3, r3
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	d009      	beq.n	801d862 <dhcp_parse_reply+0x46e>
 801d84e:	4b59      	ldr	r3, [pc, #356]	; (801d9b4 <dhcp_parse_reply+0x5c0>)
 801d850:	f240 6281 	movw	r2, #1665	; 0x681
 801d854:	495d      	ldr	r1, [pc, #372]	; (801d9cc <dhcp_parse_reply+0x5d8>)
 801d856:	4859      	ldr	r0, [pc, #356]	; (801d9bc <dhcp_parse_reply+0x5c8>)
 801d858:	f003 fab8 	bl	8020dcc <iprintf>
 801d85c:	f06f 0305 	mvn.w	r3, #5
 801d860:	e0c7      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
            dhcp_got_option(dhcp, decode_idx);
 801d862:	4a59      	ldr	r2, [pc, #356]	; (801d9c8 <dhcp_parse_reply+0x5d4>)
 801d864:	6a3b      	ldr	r3, [r7, #32]
 801d866:	4413      	add	r3, r2
 801d868:	2201      	movs	r2, #1
 801d86a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801d86c:	68bb      	ldr	r3, [r7, #8]
 801d86e:	4618      	mov	r0, r3
 801d870:	f7f4 fd09 	bl	8012286 <lwip_htonl>
 801d874:	4602      	mov	r2, r0
 801d876:	4956      	ldr	r1, [pc, #344]	; (801d9d0 <dhcp_parse_reply+0x5dc>)
 801d878:	6a3b      	ldr	r3, [r7, #32]
 801d87a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801d87e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d882:	3b04      	subs	r3, #4
 801d884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801d888:	8bfb      	ldrh	r3, [r7, #30]
 801d88a:	3304      	adds	r3, #4
 801d88c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801d88e:	8a7a      	ldrh	r2, [r7, #18]
 801d890:	8bfb      	ldrh	r3, [r7, #30]
 801d892:	429a      	cmp	r2, r3
 801d894:	d202      	bcs.n	801d89c <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801d896:	f06f 0301 	mvn.w	r3, #1
 801d89a:	e0aa      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
            }
            val_offset = next_val_offset;
 801d89c:	8a7b      	ldrh	r3, [r7, #18]
 801d89e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801d8a0:	6a3b      	ldr	r3, [r7, #32]
 801d8a2:	3301      	adds	r3, #1
 801d8a4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801d8a6:	e79e      	b.n	801d7e6 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801d8a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d8ac:	2b04      	cmp	r3, #4
 801d8ae:	d106      	bne.n	801d8be <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 801d8b0:	68bb      	ldr	r3, [r7, #8]
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	f7f4 fce7 	bl	8012286 <lwip_htonl>
 801d8b8:	4603      	mov	r3, r0
 801d8ba:	60bb      	str	r3, [r7, #8]
 801d8bc:	e011      	b.n	801d8e2 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801d8be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d8c2:	2b01      	cmp	r3, #1
 801d8c4:	d009      	beq.n	801d8da <dhcp_parse_reply+0x4e6>
 801d8c6:	4b3b      	ldr	r3, [pc, #236]	; (801d9b4 <dhcp_parse_reply+0x5c0>)
 801d8c8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801d8cc:	4941      	ldr	r1, [pc, #260]	; (801d9d4 <dhcp_parse_reply+0x5e0>)
 801d8ce:	483b      	ldr	r0, [pc, #236]	; (801d9bc <dhcp_parse_reply+0x5c8>)
 801d8d0:	f003 fa7c 	bl	8020dcc <iprintf>
 801d8d4:	f06f 0305 	mvn.w	r3, #5
 801d8d8:	e08b      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
            value = ((u8_t *)&value)[0];
 801d8da:	f107 0308 	add.w	r3, r7, #8
 801d8de:	781b      	ldrb	r3, [r3, #0]
 801d8e0:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801d8e2:	4a39      	ldr	r2, [pc, #228]	; (801d9c8 <dhcp_parse_reply+0x5d4>)
 801d8e4:	6a3b      	ldr	r3, [r7, #32]
 801d8e6:	4413      	add	r3, r2
 801d8e8:	2201      	movs	r2, #1
 801d8ea:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801d8ec:	68ba      	ldr	r2, [r7, #8]
 801d8ee:	4938      	ldr	r1, [pc, #224]	; (801d9d0 <dhcp_parse_reply+0x5dc>)
 801d8f0:	6a3b      	ldr	r3, [r7, #32]
 801d8f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801d8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8f8:	895b      	ldrh	r3, [r3, #10]
 801d8fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d8fc:	429a      	cmp	r2, r3
 801d8fe:	d324      	bcc.n	801d94a <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 801d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d902:	895b      	ldrh	r3, [r3, #10]
 801d904:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d906:	1ad3      	subs	r3, r2, r3
 801d908:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801d90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d90c:	895b      	ldrh	r3, [r3, #10]
 801d90e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801d910:	1ad3      	subs	r3, r2, r3
 801d912:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801d914:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d916:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801d918:	429a      	cmp	r2, r3
 801d91a:	d213      	bcs.n	801d944 <dhcp_parse_reply+0x550>
        q = q->next;
 801d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801d922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d924:	2b00      	cmp	r3, #0
 801d926:	d109      	bne.n	801d93c <dhcp_parse_reply+0x548>
 801d928:	4b22      	ldr	r3, [pc, #136]	; (801d9b4 <dhcp_parse_reply+0x5c0>)
 801d92a:	f240 629d 	movw	r2, #1693	; 0x69d
 801d92e:	492a      	ldr	r1, [pc, #168]	; (801d9d8 <dhcp_parse_reply+0x5e4>)
 801d930:	4822      	ldr	r0, [pc, #136]	; (801d9bc <dhcp_parse_reply+0x5c8>)
 801d932:	f003 fa4b 	bl	8020dcc <iprintf>
 801d936:	f06f 0305 	mvn.w	r3, #5
 801d93a:	e05a      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
        options = (u8_t *)q->payload;
 801d93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d93e:	685b      	ldr	r3, [r3, #4]
 801d940:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d942:	e002      	b.n	801d94a <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801d944:	f06f 0301 	mvn.w	r3, #1
 801d948:	e053      	b.n	801d9f2 <dhcp_parse_reply+0x5fe>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d00a      	beq.n	801d966 <dhcp_parse_reply+0x572>
 801d950:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d952:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801d954:	429a      	cmp	r2, r3
 801d956:	d206      	bcs.n	801d966 <dhcp_parse_reply+0x572>
 801d958:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d95a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d95c:	4413      	add	r3, r2
 801d95e:	781b      	ldrb	r3, [r3, #0]
 801d960:	2bff      	cmp	r3, #255	; 0xff
 801d962:	f47f ad8a 	bne.w	801d47a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801d966:	4b18      	ldr	r3, [pc, #96]	; (801d9c8 <dhcp_parse_reply+0x5d4>)
 801d968:	781b      	ldrb	r3, [r3, #0]
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d018      	beq.n	801d9a0 <dhcp_parse_reply+0x5ac>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801d96e:	4b18      	ldr	r3, [pc, #96]	; (801d9d0 <dhcp_parse_reply+0x5dc>)
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801d974:	4b14      	ldr	r3, [pc, #80]	; (801d9c8 <dhcp_parse_reply+0x5d4>)
 801d976:	2200      	movs	r2, #0
 801d978:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	2b01      	cmp	r3, #1
 801d97e:	d102      	bne.n	801d986 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801d980:	2301      	movs	r3, #1
 801d982:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d984:	e00c      	b.n	801d9a0 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	2b02      	cmp	r3, #2
 801d98a:	d102      	bne.n	801d992 <dhcp_parse_reply+0x59e>
      parse_sname_as_options = 1;
 801d98c:	2301      	movs	r3, #1
 801d98e:	62bb      	str	r3, [r7, #40]	; 0x28
 801d990:	e006      	b.n	801d9a0 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	2b03      	cmp	r3, #3
 801d996:	d103      	bne.n	801d9a0 <dhcp_parse_reply+0x5ac>
      parse_sname_as_options = 1;
 801d998:	2301      	movs	r3, #1
 801d99a:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801d99c:	2301      	movs	r3, #1
 801d99e:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801d9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d01a      	beq.n	801d9dc <dhcp_parse_reply+0x5e8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801d9a6:	2300      	movs	r3, #0
 801d9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801d9aa:	236c      	movs	r3, #108	; 0x6c
 801d9ac:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801d9ae:	23ec      	movs	r3, #236	; 0xec
 801d9b0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801d9b2:	e53c      	b.n	801d42e <dhcp_parse_reply+0x3a>
 801d9b4:	08025834 	.word	0x08025834
 801d9b8:	08025aec 	.word	0x08025aec
 801d9bc:	08025894 	.word	0x08025894
 801d9c0:	08025abc 	.word	0x08025abc
 801d9c4:	08025b10 	.word	0x08025b10
 801d9c8:	20016dcc 	.word	0x20016dcc
 801d9cc:	08025b24 	.word	0x08025b24
 801d9d0:	20016dd8 	.word	0x20016dd8
 801d9d4:	08025b3c 	.word	0x08025b3c
 801d9d8:	08025b50 	.word	0x08025b50
  } else if (parse_sname_as_options) {
 801d9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d006      	beq.n	801d9f0 <dhcp_parse_reply+0x5fc>
    parse_sname_as_options = 0;
 801d9e2:	2300      	movs	r3, #0
 801d9e4:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801d9e6:	232c      	movs	r3, #44	; 0x2c
 801d9e8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801d9ea:	236c      	movs	r3, #108	; 0x6c
 801d9ec:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801d9ee:	e51e      	b.n	801d42e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801d9f0:	2300      	movs	r3, #0
}
 801d9f2:	4618      	mov	r0, r3
 801d9f4:	3740      	adds	r7, #64	; 0x40
 801d9f6:	46bd      	mov	sp, r7
 801d9f8:	bd80      	pop	{r7, pc}
 801d9fa:	bf00      	nop

0801d9fc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801d9fc:	b580      	push	{r7, lr}
 801d9fe:	b08a      	sub	sp, #40	; 0x28
 801da00:	af00      	add	r7, sp, #0
 801da02:	60f8      	str	r0, [r7, #12]
 801da04:	60b9      	str	r1, [r7, #8]
 801da06:	607a      	str	r2, [r7, #4]
 801da08:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801da0a:	4b60      	ldr	r3, [pc, #384]	; (801db8c <dhcp_recv+0x190>)
 801da0c:	685b      	ldr	r3, [r3, #4]
 801da0e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801da10:	6a3b      	ldr	r3, [r7, #32]
 801da12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da14:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	685b      	ldr	r3, [r3, #4]
 801da1a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801da1c:	69fb      	ldr	r3, [r7, #28]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	f000 809d 	beq.w	801db5e <dhcp_recv+0x162>
 801da24:	69fb      	ldr	r3, [r7, #28]
 801da26:	791b      	ldrb	r3, [r3, #4]
 801da28:	2b00      	cmp	r3, #0
 801da2a:	f000 8098 	beq.w	801db5e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	895b      	ldrh	r3, [r3, #10]
 801da32:	2b2b      	cmp	r3, #43	; 0x2b
 801da34:	f240 8095 	bls.w	801db62 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801da38:	69bb      	ldr	r3, [r7, #24]
 801da3a:	781b      	ldrb	r3, [r3, #0]
 801da3c:	2b02      	cmp	r3, #2
 801da3e:	f040 8092 	bne.w	801db66 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801da42:	2300      	movs	r3, #0
 801da44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801da48:	e012      	b.n	801da70 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801da4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da4e:	6a3a      	ldr	r2, [r7, #32]
 801da50:	4413      	add	r3, r2
 801da52:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801da56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da5a:	69b9      	ldr	r1, [r7, #24]
 801da5c:	440b      	add	r3, r1
 801da5e:	7f1b      	ldrb	r3, [r3, #28]
 801da60:	429a      	cmp	r2, r3
 801da62:	f040 8082 	bne.w	801db6a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801da66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da6a:	3301      	adds	r3, #1
 801da6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801da70:	6a3b      	ldr	r3, [r7, #32]
 801da72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801da76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801da7a:	429a      	cmp	r2, r3
 801da7c:	d203      	bcs.n	801da86 <dhcp_recv+0x8a>
 801da7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da82:	2b05      	cmp	r3, #5
 801da84:	d9e1      	bls.n	801da4a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801da86:	69bb      	ldr	r3, [r7, #24]
 801da88:	685b      	ldr	r3, [r3, #4]
 801da8a:	4618      	mov	r0, r3
 801da8c:	f7f4 fbfb 	bl	8012286 <lwip_htonl>
 801da90:	4602      	mov	r2, r0
 801da92:	69fb      	ldr	r3, [r7, #28]
 801da94:	681b      	ldr	r3, [r3, #0]
 801da96:	429a      	cmp	r2, r3
 801da98:	d169      	bne.n	801db6e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801da9a:	69f9      	ldr	r1, [r7, #28]
 801da9c:	6878      	ldr	r0, [r7, #4]
 801da9e:	f7ff fca9 	bl	801d3f4 <dhcp_parse_reply>
 801daa2:	4603      	mov	r3, r0
 801daa4:	2b00      	cmp	r3, #0
 801daa6:	d164      	bne.n	801db72 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801daa8:	4b39      	ldr	r3, [pc, #228]	; (801db90 <dhcp_recv+0x194>)
 801daaa:	785b      	ldrb	r3, [r3, #1]
 801daac:	2b00      	cmp	r3, #0
 801daae:	d062      	beq.n	801db76 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	685b      	ldr	r3, [r3, #4]
 801dab4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801dab6:	4b37      	ldr	r3, [pc, #220]	; (801db94 <dhcp_recv+0x198>)
 801dab8:	685b      	ldr	r3, [r3, #4]
 801daba:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801dabc:	7cfb      	ldrb	r3, [r7, #19]
 801dabe:	2b05      	cmp	r3, #5
 801dac0:	d12a      	bne.n	801db18 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801dac2:	69fb      	ldr	r3, [r7, #28]
 801dac4:	795b      	ldrb	r3, [r3, #5]
 801dac6:	2b01      	cmp	r3, #1
 801dac8:	d112      	bne.n	801daf0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801daca:	6979      	ldr	r1, [r7, #20]
 801dacc:	6a38      	ldr	r0, [r7, #32]
 801dace:	f7fe fdc7 	bl	801c660 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801dad2:	6a3b      	ldr	r3, [r7, #32]
 801dad4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dad8:	f003 0308 	and.w	r3, r3, #8
 801dadc:	2b00      	cmp	r3, #0
 801dade:	d003      	beq.n	801dae8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801dae0:	6a38      	ldr	r0, [r7, #32]
 801dae2:	f7fe fb37 	bl	801c154 <dhcp_check>
 801dae6:	e049      	b.n	801db7c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801dae8:	6a38      	ldr	r0, [r7, #32]
 801daea:	f7ff f837 	bl	801cb5c <dhcp_bind>
 801daee:	e045      	b.n	801db7c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801daf0:	69fb      	ldr	r3, [r7, #28]
 801daf2:	795b      	ldrb	r3, [r3, #5]
 801daf4:	2b03      	cmp	r3, #3
 801daf6:	d007      	beq.n	801db08 <dhcp_recv+0x10c>
 801daf8:	69fb      	ldr	r3, [r7, #28]
 801dafa:	795b      	ldrb	r3, [r3, #5]
 801dafc:	2b04      	cmp	r3, #4
 801dafe:	d003      	beq.n	801db08 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801db00:	69fb      	ldr	r3, [r7, #28]
 801db02:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801db04:	2b05      	cmp	r3, #5
 801db06:	d139      	bne.n	801db7c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801db08:	6979      	ldr	r1, [r7, #20]
 801db0a:	6a38      	ldr	r0, [r7, #32]
 801db0c:	f7fe fda8 	bl	801c660 <dhcp_handle_ack>
      dhcp_bind(netif);
 801db10:	6a38      	ldr	r0, [r7, #32]
 801db12:	f7ff f823 	bl	801cb5c <dhcp_bind>
 801db16:	e031      	b.n	801db7c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801db18:	7cfb      	ldrb	r3, [r7, #19]
 801db1a:	2b06      	cmp	r3, #6
 801db1c:	d113      	bne.n	801db46 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801db1e:	69fb      	ldr	r3, [r7, #28]
 801db20:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801db22:	2b03      	cmp	r3, #3
 801db24:	d00b      	beq.n	801db3e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801db26:	69fb      	ldr	r3, [r7, #28]
 801db28:	795b      	ldrb	r3, [r3, #5]
 801db2a:	2b01      	cmp	r3, #1
 801db2c:	d007      	beq.n	801db3e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801db2e:	69fb      	ldr	r3, [r7, #28]
 801db30:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801db32:	2b04      	cmp	r3, #4
 801db34:	d003      	beq.n	801db3e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801db36:	69fb      	ldr	r3, [r7, #28]
 801db38:	795b      	ldrb	r3, [r3, #5]
 801db3a:	2b05      	cmp	r3, #5
 801db3c:	d103      	bne.n	801db46 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801db3e:	6a38      	ldr	r0, [r7, #32]
 801db40:	f7fe faee 	bl	801c120 <dhcp_handle_nak>
 801db44:	e01a      	b.n	801db7c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801db46:	7cfb      	ldrb	r3, [r7, #19]
 801db48:	2b02      	cmp	r3, #2
 801db4a:	d116      	bne.n	801db7a <dhcp_recv+0x17e>
 801db4c:	69fb      	ldr	r3, [r7, #28]
 801db4e:	795b      	ldrb	r3, [r3, #5]
 801db50:	2b06      	cmp	r3, #6
 801db52:	d112      	bne.n	801db7a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801db54:	6979      	ldr	r1, [r7, #20]
 801db56:	6a38      	ldr	r0, [r7, #32]
 801db58:	f7fe fb30 	bl	801c1bc <dhcp_handle_offer>
 801db5c:	e00e      	b.n	801db7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801db5e:	bf00      	nop
 801db60:	e00c      	b.n	801db7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801db62:	bf00      	nop
 801db64:	e00a      	b.n	801db7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801db66:	bf00      	nop
 801db68:	e008      	b.n	801db7c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801db6a:	bf00      	nop
 801db6c:	e006      	b.n	801db7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801db6e:	bf00      	nop
 801db70:	e004      	b.n	801db7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801db72:	bf00      	nop
 801db74:	e002      	b.n	801db7c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801db76:	bf00      	nop
 801db78:	e000      	b.n	801db7c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801db7a:	bf00      	nop
  pbuf_free(p);
 801db7c:	6878      	ldr	r0, [r7, #4]
 801db7e:	f7f6 fefb 	bl	8014978 <pbuf_free>
}
 801db82:	bf00      	nop
 801db84:	3728      	adds	r7, #40	; 0x28
 801db86:	46bd      	mov	sp, r7
 801db88:	bd80      	pop	{r7, pc}
 801db8a:	bf00      	nop
 801db8c:	200135d0 	.word	0x200135d0
 801db90:	20016dcc 	.word	0x20016dcc
 801db94:	20016dd8 	.word	0x20016dd8

0801db98 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801db98:	b580      	push	{r7, lr}
 801db9a:	b088      	sub	sp, #32
 801db9c:	af00      	add	r7, sp, #0
 801db9e:	60f8      	str	r0, [r7, #12]
 801dba0:	60b9      	str	r1, [r7, #8]
 801dba2:	603b      	str	r3, [r7, #0]
 801dba4:	4613      	mov	r3, r2
 801dba6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801dba8:	68fb      	ldr	r3, [r7, #12]
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d108      	bne.n	801dbc0 <dhcp_create_msg+0x28>
 801dbae:	4b5f      	ldr	r3, [pc, #380]	; (801dd2c <dhcp_create_msg+0x194>)
 801dbb0:	f240 7269 	movw	r2, #1897	; 0x769
 801dbb4:	495e      	ldr	r1, [pc, #376]	; (801dd30 <dhcp_create_msg+0x198>)
 801dbb6:	485f      	ldr	r0, [pc, #380]	; (801dd34 <dhcp_create_msg+0x19c>)
 801dbb8:	f003 f908 	bl	8020dcc <iprintf>
 801dbbc:	2300      	movs	r3, #0
 801dbbe:	e0b1      	b.n	801dd24 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801dbc0:	68bb      	ldr	r3, [r7, #8]
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	d108      	bne.n	801dbd8 <dhcp_create_msg+0x40>
 801dbc6:	4b59      	ldr	r3, [pc, #356]	; (801dd2c <dhcp_create_msg+0x194>)
 801dbc8:	f240 726a 	movw	r2, #1898	; 0x76a
 801dbcc:	495a      	ldr	r1, [pc, #360]	; (801dd38 <dhcp_create_msg+0x1a0>)
 801dbce:	4859      	ldr	r0, [pc, #356]	; (801dd34 <dhcp_create_msg+0x19c>)
 801dbd0:	f003 f8fc 	bl	8020dcc <iprintf>
 801dbd4:	2300      	movs	r3, #0
 801dbd6:	e0a5      	b.n	801dd24 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801dbd8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dbdc:	f44f 719a 	mov.w	r1, #308	; 0x134
 801dbe0:	2036      	movs	r0, #54	; 0x36
 801dbe2:	f7f6 fbe5 	bl	80143b0 <pbuf_alloc>
 801dbe6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801dbe8:	69bb      	ldr	r3, [r7, #24]
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d101      	bne.n	801dbf2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801dbee:	2300      	movs	r3, #0
 801dbf0:	e098      	b.n	801dd24 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801dbf2:	69bb      	ldr	r3, [r7, #24]
 801dbf4:	895b      	ldrh	r3, [r3, #10]
 801dbf6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801dbfa:	d206      	bcs.n	801dc0a <dhcp_create_msg+0x72>
 801dbfc:	4b4b      	ldr	r3, [pc, #300]	; (801dd2c <dhcp_create_msg+0x194>)
 801dbfe:	f240 7271 	movw	r2, #1905	; 0x771
 801dc02:	494e      	ldr	r1, [pc, #312]	; (801dd3c <dhcp_create_msg+0x1a4>)
 801dc04:	484b      	ldr	r0, [pc, #300]	; (801dd34 <dhcp_create_msg+0x19c>)
 801dc06:	f003 f8e1 	bl	8020dcc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801dc0a:	79fb      	ldrb	r3, [r7, #7]
 801dc0c:	2b03      	cmp	r3, #3
 801dc0e:	d103      	bne.n	801dc18 <dhcp_create_msg+0x80>
 801dc10:	68bb      	ldr	r3, [r7, #8]
 801dc12:	795b      	ldrb	r3, [r3, #5]
 801dc14:	2b03      	cmp	r3, #3
 801dc16:	d10d      	bne.n	801dc34 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801dc18:	68bb      	ldr	r3, [r7, #8]
 801dc1a:	799b      	ldrb	r3, [r3, #6]
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d105      	bne.n	801dc2c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801dc20:	f003 f9a6 	bl	8020f70 <rand>
 801dc24:	4603      	mov	r3, r0
 801dc26:	461a      	mov	r2, r3
 801dc28:	4b45      	ldr	r3, [pc, #276]	; (801dd40 <dhcp_create_msg+0x1a8>)
 801dc2a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801dc2c:	4b44      	ldr	r3, [pc, #272]	; (801dd40 <dhcp_create_msg+0x1a8>)
 801dc2e:	681a      	ldr	r2, [r3, #0]
 801dc30:	68bb      	ldr	r3, [r7, #8]
 801dc32:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801dc34:	69bb      	ldr	r3, [r7, #24]
 801dc36:	685b      	ldr	r3, [r3, #4]
 801dc38:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801dc3a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801dc3e:	2100      	movs	r1, #0
 801dc40:	6978      	ldr	r0, [r7, #20]
 801dc42:	f003 f801 	bl	8020c48 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801dc46:	697b      	ldr	r3, [r7, #20]
 801dc48:	2201      	movs	r2, #1
 801dc4a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801dc4c:	697b      	ldr	r3, [r7, #20]
 801dc4e:	2201      	movs	r2, #1
 801dc50:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801dc58:	697b      	ldr	r3, [r7, #20]
 801dc5a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801dc5c:	68bb      	ldr	r3, [r7, #8]
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	4618      	mov	r0, r3
 801dc62:	f7f4 fb10 	bl	8012286 <lwip_htonl>
 801dc66:	4602      	mov	r2, r0
 801dc68:	697b      	ldr	r3, [r7, #20]
 801dc6a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801dc6c:	79fb      	ldrb	r3, [r7, #7]
 801dc6e:	2b08      	cmp	r3, #8
 801dc70:	d010      	beq.n	801dc94 <dhcp_create_msg+0xfc>
 801dc72:	79fb      	ldrb	r3, [r7, #7]
 801dc74:	2b04      	cmp	r3, #4
 801dc76:	d00d      	beq.n	801dc94 <dhcp_create_msg+0xfc>
 801dc78:	79fb      	ldrb	r3, [r7, #7]
 801dc7a:	2b07      	cmp	r3, #7
 801dc7c:	d00a      	beq.n	801dc94 <dhcp_create_msg+0xfc>
 801dc7e:	79fb      	ldrb	r3, [r7, #7]
 801dc80:	2b03      	cmp	r3, #3
 801dc82:	d10c      	bne.n	801dc9e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801dc84:	68bb      	ldr	r3, [r7, #8]
 801dc86:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801dc88:	2b05      	cmp	r3, #5
 801dc8a:	d003      	beq.n	801dc94 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801dc8c:	68bb      	ldr	r3, [r7, #8]
 801dc8e:	795b      	ldrb	r3, [r3, #5]
 801dc90:	2b04      	cmp	r3, #4
 801dc92:	d104      	bne.n	801dc9e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801dc94:	68fb      	ldr	r3, [r7, #12]
 801dc96:	3304      	adds	r3, #4
 801dc98:	681a      	ldr	r2, [r3, #0]
 801dc9a:	697b      	ldr	r3, [r7, #20]
 801dc9c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801dc9e:	2300      	movs	r3, #0
 801dca0:	83fb      	strh	r3, [r7, #30]
 801dca2:	e00c      	b.n	801dcbe <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801dca4:	8bfa      	ldrh	r2, [r7, #30]
 801dca6:	8bfb      	ldrh	r3, [r7, #30]
 801dca8:	68f9      	ldr	r1, [r7, #12]
 801dcaa:	440a      	add	r2, r1
 801dcac:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801dcb0:	697a      	ldr	r2, [r7, #20]
 801dcb2:	4413      	add	r3, r2
 801dcb4:	460a      	mov	r2, r1
 801dcb6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801dcb8:	8bfb      	ldrh	r3, [r7, #30]
 801dcba:	3301      	adds	r3, #1
 801dcbc:	83fb      	strh	r3, [r7, #30]
 801dcbe:	8bfb      	ldrh	r3, [r7, #30]
 801dcc0:	2b05      	cmp	r3, #5
 801dcc2:	d9ef      	bls.n	801dca4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801dcc4:	697b      	ldr	r3, [r7, #20]
 801dcc6:	2200      	movs	r2, #0
 801dcc8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801dccc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801dcd0:	2200      	movs	r2, #0
 801dcd2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801dcd6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801dcda:	2200      	movs	r2, #0
 801dcdc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801dce0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801dce4:	2200      	movs	r2, #0
 801dce6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801dcea:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801dcee:	697b      	ldr	r3, [r7, #20]
 801dcf0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801dcf4:	2301      	movs	r3, #1
 801dcf6:	2235      	movs	r2, #53	; 0x35
 801dcf8:	2000      	movs	r0, #0
 801dcfa:	f7ff faab 	bl	801d254 <dhcp_option>
 801dcfe:	4603      	mov	r3, r0
 801dd00:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801dd02:	697b      	ldr	r3, [r7, #20]
 801dd04:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801dd08:	79fa      	ldrb	r2, [r7, #7]
 801dd0a:	8a7b      	ldrh	r3, [r7, #18]
 801dd0c:	4618      	mov	r0, r3
 801dd0e:	f7ff fad5 	bl	801d2bc <dhcp_option_byte>
 801dd12:	4603      	mov	r3, r0
 801dd14:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801dd16:	683b      	ldr	r3, [r7, #0]
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	d002      	beq.n	801dd22 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801dd1c:	683b      	ldr	r3, [r7, #0]
 801dd1e:	8a7a      	ldrh	r2, [r7, #18]
 801dd20:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801dd22:	69bb      	ldr	r3, [r7, #24]
}
 801dd24:	4618      	mov	r0, r3
 801dd26:	3720      	adds	r7, #32
 801dd28:	46bd      	mov	sp, r7
 801dd2a:	bd80      	pop	{r7, pc}
 801dd2c:	08025834 	.word	0x08025834
 801dd30:	08025b64 	.word	0x08025b64
 801dd34:	08025894 	.word	0x08025894
 801dd38:	08025b84 	.word	0x08025b84
 801dd3c:	08025ba4 	.word	0x08025ba4
 801dd40:	20005734 	.word	0x20005734

0801dd44 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801dd44:	b580      	push	{r7, lr}
 801dd46:	b084      	sub	sp, #16
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	4603      	mov	r3, r0
 801dd4c:	60b9      	str	r1, [r7, #8]
 801dd4e:	607a      	str	r2, [r7, #4]
 801dd50:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801dd52:	89fb      	ldrh	r3, [r7, #14]
 801dd54:	1c5a      	adds	r2, r3, #1
 801dd56:	81fa      	strh	r2, [r7, #14]
 801dd58:	461a      	mov	r2, r3
 801dd5a:	68bb      	ldr	r3, [r7, #8]
 801dd5c:	4413      	add	r3, r2
 801dd5e:	22ff      	movs	r2, #255	; 0xff
 801dd60:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801dd62:	e007      	b.n	801dd74 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801dd64:	89fb      	ldrh	r3, [r7, #14]
 801dd66:	1c5a      	adds	r2, r3, #1
 801dd68:	81fa      	strh	r2, [r7, #14]
 801dd6a:	461a      	mov	r2, r3
 801dd6c:	68bb      	ldr	r3, [r7, #8]
 801dd6e:	4413      	add	r3, r2
 801dd70:	2200      	movs	r2, #0
 801dd72:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801dd74:	89fb      	ldrh	r3, [r7, #14]
 801dd76:	2b43      	cmp	r3, #67	; 0x43
 801dd78:	d904      	bls.n	801dd84 <dhcp_option_trailer+0x40>
 801dd7a:	89fb      	ldrh	r3, [r7, #14]
 801dd7c:	f003 0303 	and.w	r3, r3, #3
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d002      	beq.n	801dd8a <dhcp_option_trailer+0x46>
 801dd84:	89fb      	ldrh	r3, [r7, #14]
 801dd86:	2b43      	cmp	r3, #67	; 0x43
 801dd88:	d9ec      	bls.n	801dd64 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801dd8a:	89fb      	ldrh	r3, [r7, #14]
 801dd8c:	33f0      	adds	r3, #240	; 0xf0
 801dd8e:	b29b      	uxth	r3, r3
 801dd90:	4619      	mov	r1, r3
 801dd92:	6878      	ldr	r0, [r7, #4]
 801dd94:	f7f6 fc6a 	bl	801466c <pbuf_realloc>
}
 801dd98:	bf00      	nop
 801dd9a:	3710      	adds	r7, #16
 801dd9c:	46bd      	mov	sp, r7
 801dd9e:	bd80      	pop	{r7, pc}

0801dda0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801dda0:	b480      	push	{r7}
 801dda2:	b085      	sub	sp, #20
 801dda4:	af00      	add	r7, sp, #0
 801dda6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	d017      	beq.n	801ddde <dhcp_supplied_address+0x3e>
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	d013      	beq.n	801ddde <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddba:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	795b      	ldrb	r3, [r3, #5]
 801ddc0:	2b0a      	cmp	r3, #10
 801ddc2:	d007      	beq.n	801ddd4 <dhcp_supplied_address+0x34>
 801ddc4:	68fb      	ldr	r3, [r7, #12]
 801ddc6:	795b      	ldrb	r3, [r3, #5]
 801ddc8:	2b05      	cmp	r3, #5
 801ddca:	d003      	beq.n	801ddd4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801ddd0:	2b04      	cmp	r3, #4
 801ddd2:	d101      	bne.n	801ddd8 <dhcp_supplied_address+0x38>
 801ddd4:	2301      	movs	r3, #1
 801ddd6:	e000      	b.n	801ddda <dhcp_supplied_address+0x3a>
 801ddd8:	2300      	movs	r3, #0
 801ddda:	b2db      	uxtb	r3, r3
 801dddc:	e000      	b.n	801dde0 <dhcp_supplied_address+0x40>
  }
  return 0;
 801ddde:	2300      	movs	r3, #0
}
 801dde0:	4618      	mov	r0, r3
 801dde2:	3714      	adds	r7, #20
 801dde4:	46bd      	mov	sp, r7
 801dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddea:	4770      	bx	lr

0801ddec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801ddec:	b580      	push	{r7, lr}
 801ddee:	b082      	sub	sp, #8
 801ddf0:	af00      	add	r7, sp, #0
 801ddf2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801ddf4:	4915      	ldr	r1, [pc, #84]	; (801de4c <etharp_free_entry+0x60>)
 801ddf6:	687a      	ldr	r2, [r7, #4]
 801ddf8:	4613      	mov	r3, r2
 801ddfa:	005b      	lsls	r3, r3, #1
 801ddfc:	4413      	add	r3, r2
 801ddfe:	00db      	lsls	r3, r3, #3
 801de00:	440b      	add	r3, r1
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	2b00      	cmp	r3, #0
 801de06:	d013      	beq.n	801de30 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801de08:	4910      	ldr	r1, [pc, #64]	; (801de4c <etharp_free_entry+0x60>)
 801de0a:	687a      	ldr	r2, [r7, #4]
 801de0c:	4613      	mov	r3, r2
 801de0e:	005b      	lsls	r3, r3, #1
 801de10:	4413      	add	r3, r2
 801de12:	00db      	lsls	r3, r3, #3
 801de14:	440b      	add	r3, r1
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	4618      	mov	r0, r3
 801de1a:	f7f6 fdad 	bl	8014978 <pbuf_free>
    arp_table[i].q = NULL;
 801de1e:	490b      	ldr	r1, [pc, #44]	; (801de4c <etharp_free_entry+0x60>)
 801de20:	687a      	ldr	r2, [r7, #4]
 801de22:	4613      	mov	r3, r2
 801de24:	005b      	lsls	r3, r3, #1
 801de26:	4413      	add	r3, r2
 801de28:	00db      	lsls	r3, r3, #3
 801de2a:	440b      	add	r3, r1
 801de2c:	2200      	movs	r2, #0
 801de2e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801de30:	4906      	ldr	r1, [pc, #24]	; (801de4c <etharp_free_entry+0x60>)
 801de32:	687a      	ldr	r2, [r7, #4]
 801de34:	4613      	mov	r3, r2
 801de36:	005b      	lsls	r3, r3, #1
 801de38:	4413      	add	r3, r2
 801de3a:	00db      	lsls	r3, r3, #3
 801de3c:	440b      	add	r3, r1
 801de3e:	3314      	adds	r3, #20
 801de40:	2200      	movs	r2, #0
 801de42:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801de44:	bf00      	nop
 801de46:	3708      	adds	r7, #8
 801de48:	46bd      	mov	sp, r7
 801de4a:	bd80      	pop	{r7, pc}
 801de4c:	20005738 	.word	0x20005738

0801de50 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801de50:	b580      	push	{r7, lr}
 801de52:	b082      	sub	sp, #8
 801de54:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801de56:	2300      	movs	r3, #0
 801de58:	607b      	str	r3, [r7, #4]
 801de5a:	e096      	b.n	801df8a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801de5c:	494f      	ldr	r1, [pc, #316]	; (801df9c <etharp_tmr+0x14c>)
 801de5e:	687a      	ldr	r2, [r7, #4]
 801de60:	4613      	mov	r3, r2
 801de62:	005b      	lsls	r3, r3, #1
 801de64:	4413      	add	r3, r2
 801de66:	00db      	lsls	r3, r3, #3
 801de68:	440b      	add	r3, r1
 801de6a:	3314      	adds	r3, #20
 801de6c:	781b      	ldrb	r3, [r3, #0]
 801de6e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801de70:	78fb      	ldrb	r3, [r7, #3]
 801de72:	2b00      	cmp	r3, #0
 801de74:	f000 8086 	beq.w	801df84 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801de78:	4948      	ldr	r1, [pc, #288]	; (801df9c <etharp_tmr+0x14c>)
 801de7a:	687a      	ldr	r2, [r7, #4]
 801de7c:	4613      	mov	r3, r2
 801de7e:	005b      	lsls	r3, r3, #1
 801de80:	4413      	add	r3, r2
 801de82:	00db      	lsls	r3, r3, #3
 801de84:	440b      	add	r3, r1
 801de86:	3312      	adds	r3, #18
 801de88:	881b      	ldrh	r3, [r3, #0]
 801de8a:	3301      	adds	r3, #1
 801de8c:	b298      	uxth	r0, r3
 801de8e:	4943      	ldr	r1, [pc, #268]	; (801df9c <etharp_tmr+0x14c>)
 801de90:	687a      	ldr	r2, [r7, #4]
 801de92:	4613      	mov	r3, r2
 801de94:	005b      	lsls	r3, r3, #1
 801de96:	4413      	add	r3, r2
 801de98:	00db      	lsls	r3, r3, #3
 801de9a:	440b      	add	r3, r1
 801de9c:	3312      	adds	r3, #18
 801de9e:	4602      	mov	r2, r0
 801dea0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801dea2:	493e      	ldr	r1, [pc, #248]	; (801df9c <etharp_tmr+0x14c>)
 801dea4:	687a      	ldr	r2, [r7, #4]
 801dea6:	4613      	mov	r3, r2
 801dea8:	005b      	lsls	r3, r3, #1
 801deaa:	4413      	add	r3, r2
 801deac:	00db      	lsls	r3, r3, #3
 801deae:	440b      	add	r3, r1
 801deb0:	3312      	adds	r3, #18
 801deb2:	881b      	ldrh	r3, [r3, #0]
 801deb4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801deb8:	d215      	bcs.n	801dee6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801deba:	4938      	ldr	r1, [pc, #224]	; (801df9c <etharp_tmr+0x14c>)
 801debc:	687a      	ldr	r2, [r7, #4]
 801debe:	4613      	mov	r3, r2
 801dec0:	005b      	lsls	r3, r3, #1
 801dec2:	4413      	add	r3, r2
 801dec4:	00db      	lsls	r3, r3, #3
 801dec6:	440b      	add	r3, r1
 801dec8:	3314      	adds	r3, #20
 801deca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801decc:	2b01      	cmp	r3, #1
 801dece:	d10e      	bne.n	801deee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801ded0:	4932      	ldr	r1, [pc, #200]	; (801df9c <etharp_tmr+0x14c>)
 801ded2:	687a      	ldr	r2, [r7, #4]
 801ded4:	4613      	mov	r3, r2
 801ded6:	005b      	lsls	r3, r3, #1
 801ded8:	4413      	add	r3, r2
 801deda:	00db      	lsls	r3, r3, #3
 801dedc:	440b      	add	r3, r1
 801dede:	3312      	adds	r3, #18
 801dee0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801dee2:	2b04      	cmp	r3, #4
 801dee4:	d903      	bls.n	801deee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801dee6:	6878      	ldr	r0, [r7, #4]
 801dee8:	f7ff ff80 	bl	801ddec <etharp_free_entry>
 801deec:	e04a      	b.n	801df84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801deee:	492b      	ldr	r1, [pc, #172]	; (801df9c <etharp_tmr+0x14c>)
 801def0:	687a      	ldr	r2, [r7, #4]
 801def2:	4613      	mov	r3, r2
 801def4:	005b      	lsls	r3, r3, #1
 801def6:	4413      	add	r3, r2
 801def8:	00db      	lsls	r3, r3, #3
 801defa:	440b      	add	r3, r1
 801defc:	3314      	adds	r3, #20
 801defe:	781b      	ldrb	r3, [r3, #0]
 801df00:	2b03      	cmp	r3, #3
 801df02:	d10a      	bne.n	801df1a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801df04:	4925      	ldr	r1, [pc, #148]	; (801df9c <etharp_tmr+0x14c>)
 801df06:	687a      	ldr	r2, [r7, #4]
 801df08:	4613      	mov	r3, r2
 801df0a:	005b      	lsls	r3, r3, #1
 801df0c:	4413      	add	r3, r2
 801df0e:	00db      	lsls	r3, r3, #3
 801df10:	440b      	add	r3, r1
 801df12:	3314      	adds	r3, #20
 801df14:	2204      	movs	r2, #4
 801df16:	701a      	strb	r2, [r3, #0]
 801df18:	e034      	b.n	801df84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801df1a:	4920      	ldr	r1, [pc, #128]	; (801df9c <etharp_tmr+0x14c>)
 801df1c:	687a      	ldr	r2, [r7, #4]
 801df1e:	4613      	mov	r3, r2
 801df20:	005b      	lsls	r3, r3, #1
 801df22:	4413      	add	r3, r2
 801df24:	00db      	lsls	r3, r3, #3
 801df26:	440b      	add	r3, r1
 801df28:	3314      	adds	r3, #20
 801df2a:	781b      	ldrb	r3, [r3, #0]
 801df2c:	2b04      	cmp	r3, #4
 801df2e:	d10a      	bne.n	801df46 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801df30:	491a      	ldr	r1, [pc, #104]	; (801df9c <etharp_tmr+0x14c>)
 801df32:	687a      	ldr	r2, [r7, #4]
 801df34:	4613      	mov	r3, r2
 801df36:	005b      	lsls	r3, r3, #1
 801df38:	4413      	add	r3, r2
 801df3a:	00db      	lsls	r3, r3, #3
 801df3c:	440b      	add	r3, r1
 801df3e:	3314      	adds	r3, #20
 801df40:	2202      	movs	r2, #2
 801df42:	701a      	strb	r2, [r3, #0]
 801df44:	e01e      	b.n	801df84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801df46:	4915      	ldr	r1, [pc, #84]	; (801df9c <etharp_tmr+0x14c>)
 801df48:	687a      	ldr	r2, [r7, #4]
 801df4a:	4613      	mov	r3, r2
 801df4c:	005b      	lsls	r3, r3, #1
 801df4e:	4413      	add	r3, r2
 801df50:	00db      	lsls	r3, r3, #3
 801df52:	440b      	add	r3, r1
 801df54:	3314      	adds	r3, #20
 801df56:	781b      	ldrb	r3, [r3, #0]
 801df58:	2b01      	cmp	r3, #1
 801df5a:	d113      	bne.n	801df84 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801df5c:	490f      	ldr	r1, [pc, #60]	; (801df9c <etharp_tmr+0x14c>)
 801df5e:	687a      	ldr	r2, [r7, #4]
 801df60:	4613      	mov	r3, r2
 801df62:	005b      	lsls	r3, r3, #1
 801df64:	4413      	add	r3, r2
 801df66:	00db      	lsls	r3, r3, #3
 801df68:	440b      	add	r3, r1
 801df6a:	3308      	adds	r3, #8
 801df6c:	6818      	ldr	r0, [r3, #0]
 801df6e:	687a      	ldr	r2, [r7, #4]
 801df70:	4613      	mov	r3, r2
 801df72:	005b      	lsls	r3, r3, #1
 801df74:	4413      	add	r3, r2
 801df76:	00db      	lsls	r3, r3, #3
 801df78:	4a08      	ldr	r2, [pc, #32]	; (801df9c <etharp_tmr+0x14c>)
 801df7a:	4413      	add	r3, r2
 801df7c:	3304      	adds	r3, #4
 801df7e:	4619      	mov	r1, r3
 801df80:	f000 fe72 	bl	801ec68 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801df84:	687b      	ldr	r3, [r7, #4]
 801df86:	3301      	adds	r3, #1
 801df88:	607b      	str	r3, [r7, #4]
 801df8a:	687b      	ldr	r3, [r7, #4]
 801df8c:	2b09      	cmp	r3, #9
 801df8e:	f77f af65 	ble.w	801de5c <etharp_tmr+0xc>
      }
    }
  }
}
 801df92:	bf00      	nop
 801df94:	bf00      	nop
 801df96:	3708      	adds	r7, #8
 801df98:	46bd      	mov	sp, r7
 801df9a:	bd80      	pop	{r7, pc}
 801df9c:	20005738 	.word	0x20005738

0801dfa0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801dfa0:	b580      	push	{r7, lr}
 801dfa2:	b08a      	sub	sp, #40	; 0x28
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	60f8      	str	r0, [r7, #12]
 801dfa8:	460b      	mov	r3, r1
 801dfaa:	607a      	str	r2, [r7, #4]
 801dfac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801dfae:	230a      	movs	r3, #10
 801dfb0:	84fb      	strh	r3, [r7, #38]	; 0x26
 801dfb2:	230a      	movs	r3, #10
 801dfb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801dfb6:	230a      	movs	r3, #10
 801dfb8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801dfba:	2300      	movs	r3, #0
 801dfbc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801dfbe:	230a      	movs	r3, #10
 801dfc0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801dfc2:	2300      	movs	r3, #0
 801dfc4:	83bb      	strh	r3, [r7, #28]
 801dfc6:	2300      	movs	r3, #0
 801dfc8:	837b      	strh	r3, [r7, #26]
 801dfca:	2300      	movs	r3, #0
 801dfcc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801dfce:	2300      	movs	r3, #0
 801dfd0:	843b      	strh	r3, [r7, #32]
 801dfd2:	e0ae      	b.n	801e132 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801dfd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dfd8:	49a6      	ldr	r1, [pc, #664]	; (801e274 <etharp_find_entry+0x2d4>)
 801dfda:	4613      	mov	r3, r2
 801dfdc:	005b      	lsls	r3, r3, #1
 801dfde:	4413      	add	r3, r2
 801dfe0:	00db      	lsls	r3, r3, #3
 801dfe2:	440b      	add	r3, r1
 801dfe4:	3314      	adds	r3, #20
 801dfe6:	781b      	ldrb	r3, [r3, #0]
 801dfe8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801dfea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801dfee:	2b0a      	cmp	r3, #10
 801dff0:	d105      	bne.n	801dffe <etharp_find_entry+0x5e>
 801dff2:	7dfb      	ldrb	r3, [r7, #23]
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d102      	bne.n	801dffe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801dff8:	8c3b      	ldrh	r3, [r7, #32]
 801dffa:	847b      	strh	r3, [r7, #34]	; 0x22
 801dffc:	e095      	b.n	801e12a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801dffe:	7dfb      	ldrb	r3, [r7, #23]
 801e000:	2b00      	cmp	r3, #0
 801e002:	f000 8092 	beq.w	801e12a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801e006:	7dfb      	ldrb	r3, [r7, #23]
 801e008:	2b01      	cmp	r3, #1
 801e00a:	d009      	beq.n	801e020 <etharp_find_entry+0x80>
 801e00c:	7dfb      	ldrb	r3, [r7, #23]
 801e00e:	2b01      	cmp	r3, #1
 801e010:	d806      	bhi.n	801e020 <etharp_find_entry+0x80>
 801e012:	4b99      	ldr	r3, [pc, #612]	; (801e278 <etharp_find_entry+0x2d8>)
 801e014:	f240 1223 	movw	r2, #291	; 0x123
 801e018:	4998      	ldr	r1, [pc, #608]	; (801e27c <etharp_find_entry+0x2dc>)
 801e01a:	4899      	ldr	r0, [pc, #612]	; (801e280 <etharp_find_entry+0x2e0>)
 801e01c:	f002 fed6 	bl	8020dcc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801e020:	68fb      	ldr	r3, [r7, #12]
 801e022:	2b00      	cmp	r3, #0
 801e024:	d020      	beq.n	801e068 <etharp_find_entry+0xc8>
 801e026:	68fb      	ldr	r3, [r7, #12]
 801e028:	6819      	ldr	r1, [r3, #0]
 801e02a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e02e:	4891      	ldr	r0, [pc, #580]	; (801e274 <etharp_find_entry+0x2d4>)
 801e030:	4613      	mov	r3, r2
 801e032:	005b      	lsls	r3, r3, #1
 801e034:	4413      	add	r3, r2
 801e036:	00db      	lsls	r3, r3, #3
 801e038:	4403      	add	r3, r0
 801e03a:	3304      	adds	r3, #4
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	4299      	cmp	r1, r3
 801e040:	d112      	bne.n	801e068 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	2b00      	cmp	r3, #0
 801e046:	d00c      	beq.n	801e062 <etharp_find_entry+0xc2>
 801e048:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e04c:	4989      	ldr	r1, [pc, #548]	; (801e274 <etharp_find_entry+0x2d4>)
 801e04e:	4613      	mov	r3, r2
 801e050:	005b      	lsls	r3, r3, #1
 801e052:	4413      	add	r3, r2
 801e054:	00db      	lsls	r3, r3, #3
 801e056:	440b      	add	r3, r1
 801e058:	3308      	adds	r3, #8
 801e05a:	681b      	ldr	r3, [r3, #0]
 801e05c:	687a      	ldr	r2, [r7, #4]
 801e05e:	429a      	cmp	r2, r3
 801e060:	d102      	bne.n	801e068 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801e062:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e066:	e100      	b.n	801e26a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801e068:	7dfb      	ldrb	r3, [r7, #23]
 801e06a:	2b01      	cmp	r3, #1
 801e06c:	d140      	bne.n	801e0f0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801e06e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e072:	4980      	ldr	r1, [pc, #512]	; (801e274 <etharp_find_entry+0x2d4>)
 801e074:	4613      	mov	r3, r2
 801e076:	005b      	lsls	r3, r3, #1
 801e078:	4413      	add	r3, r2
 801e07a:	00db      	lsls	r3, r3, #3
 801e07c:	440b      	add	r3, r1
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	2b00      	cmp	r3, #0
 801e082:	d01a      	beq.n	801e0ba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801e084:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e088:	497a      	ldr	r1, [pc, #488]	; (801e274 <etharp_find_entry+0x2d4>)
 801e08a:	4613      	mov	r3, r2
 801e08c:	005b      	lsls	r3, r3, #1
 801e08e:	4413      	add	r3, r2
 801e090:	00db      	lsls	r3, r3, #3
 801e092:	440b      	add	r3, r1
 801e094:	3312      	adds	r3, #18
 801e096:	881b      	ldrh	r3, [r3, #0]
 801e098:	8bba      	ldrh	r2, [r7, #28]
 801e09a:	429a      	cmp	r2, r3
 801e09c:	d845      	bhi.n	801e12a <etharp_find_entry+0x18a>
            old_queue = i;
 801e09e:	8c3b      	ldrh	r3, [r7, #32]
 801e0a0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801e0a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e0a6:	4973      	ldr	r1, [pc, #460]	; (801e274 <etharp_find_entry+0x2d4>)
 801e0a8:	4613      	mov	r3, r2
 801e0aa:	005b      	lsls	r3, r3, #1
 801e0ac:	4413      	add	r3, r2
 801e0ae:	00db      	lsls	r3, r3, #3
 801e0b0:	440b      	add	r3, r1
 801e0b2:	3312      	adds	r3, #18
 801e0b4:	881b      	ldrh	r3, [r3, #0]
 801e0b6:	83bb      	strh	r3, [r7, #28]
 801e0b8:	e037      	b.n	801e12a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801e0ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e0be:	496d      	ldr	r1, [pc, #436]	; (801e274 <etharp_find_entry+0x2d4>)
 801e0c0:	4613      	mov	r3, r2
 801e0c2:	005b      	lsls	r3, r3, #1
 801e0c4:	4413      	add	r3, r2
 801e0c6:	00db      	lsls	r3, r3, #3
 801e0c8:	440b      	add	r3, r1
 801e0ca:	3312      	adds	r3, #18
 801e0cc:	881b      	ldrh	r3, [r3, #0]
 801e0ce:	8b7a      	ldrh	r2, [r7, #26]
 801e0d0:	429a      	cmp	r2, r3
 801e0d2:	d82a      	bhi.n	801e12a <etharp_find_entry+0x18a>
            old_pending = i;
 801e0d4:	8c3b      	ldrh	r3, [r7, #32]
 801e0d6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801e0d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e0dc:	4965      	ldr	r1, [pc, #404]	; (801e274 <etharp_find_entry+0x2d4>)
 801e0de:	4613      	mov	r3, r2
 801e0e0:	005b      	lsls	r3, r3, #1
 801e0e2:	4413      	add	r3, r2
 801e0e4:	00db      	lsls	r3, r3, #3
 801e0e6:	440b      	add	r3, r1
 801e0e8:	3312      	adds	r3, #18
 801e0ea:	881b      	ldrh	r3, [r3, #0]
 801e0ec:	837b      	strh	r3, [r7, #26]
 801e0ee:	e01c      	b.n	801e12a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801e0f0:	7dfb      	ldrb	r3, [r7, #23]
 801e0f2:	2b01      	cmp	r3, #1
 801e0f4:	d919      	bls.n	801e12a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801e0f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e0fa:	495e      	ldr	r1, [pc, #376]	; (801e274 <etharp_find_entry+0x2d4>)
 801e0fc:	4613      	mov	r3, r2
 801e0fe:	005b      	lsls	r3, r3, #1
 801e100:	4413      	add	r3, r2
 801e102:	00db      	lsls	r3, r3, #3
 801e104:	440b      	add	r3, r1
 801e106:	3312      	adds	r3, #18
 801e108:	881b      	ldrh	r3, [r3, #0]
 801e10a:	8b3a      	ldrh	r2, [r7, #24]
 801e10c:	429a      	cmp	r2, r3
 801e10e:	d80c      	bhi.n	801e12a <etharp_find_entry+0x18a>
            old_stable = i;
 801e110:	8c3b      	ldrh	r3, [r7, #32]
 801e112:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801e114:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e118:	4956      	ldr	r1, [pc, #344]	; (801e274 <etharp_find_entry+0x2d4>)
 801e11a:	4613      	mov	r3, r2
 801e11c:	005b      	lsls	r3, r3, #1
 801e11e:	4413      	add	r3, r2
 801e120:	00db      	lsls	r3, r3, #3
 801e122:	440b      	add	r3, r1
 801e124:	3312      	adds	r3, #18
 801e126:	881b      	ldrh	r3, [r3, #0]
 801e128:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e12a:	8c3b      	ldrh	r3, [r7, #32]
 801e12c:	3301      	adds	r3, #1
 801e12e:	b29b      	uxth	r3, r3
 801e130:	843b      	strh	r3, [r7, #32]
 801e132:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e136:	2b09      	cmp	r3, #9
 801e138:	f77f af4c 	ble.w	801dfd4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801e13c:	7afb      	ldrb	r3, [r7, #11]
 801e13e:	f003 0302 	and.w	r3, r3, #2
 801e142:	2b00      	cmp	r3, #0
 801e144:	d108      	bne.n	801e158 <etharp_find_entry+0x1b8>
 801e146:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e14a:	2b0a      	cmp	r3, #10
 801e14c:	d107      	bne.n	801e15e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801e14e:	7afb      	ldrb	r3, [r7, #11]
 801e150:	f003 0301 	and.w	r3, r3, #1
 801e154:	2b00      	cmp	r3, #0
 801e156:	d102      	bne.n	801e15e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801e158:	f04f 33ff 	mov.w	r3, #4294967295
 801e15c:	e085      	b.n	801e26a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801e15e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e162:	2b09      	cmp	r3, #9
 801e164:	dc02      	bgt.n	801e16c <etharp_find_entry+0x1cc>
    i = empty;
 801e166:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e168:	843b      	strh	r3, [r7, #32]
 801e16a:	e039      	b.n	801e1e0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801e16c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e170:	2b09      	cmp	r3, #9
 801e172:	dc14      	bgt.n	801e19e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801e174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e176:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801e178:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e17c:	493d      	ldr	r1, [pc, #244]	; (801e274 <etharp_find_entry+0x2d4>)
 801e17e:	4613      	mov	r3, r2
 801e180:	005b      	lsls	r3, r3, #1
 801e182:	4413      	add	r3, r2
 801e184:	00db      	lsls	r3, r3, #3
 801e186:	440b      	add	r3, r1
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d018      	beq.n	801e1c0 <etharp_find_entry+0x220>
 801e18e:	4b3a      	ldr	r3, [pc, #232]	; (801e278 <etharp_find_entry+0x2d8>)
 801e190:	f240 126d 	movw	r2, #365	; 0x16d
 801e194:	493b      	ldr	r1, [pc, #236]	; (801e284 <etharp_find_entry+0x2e4>)
 801e196:	483a      	ldr	r0, [pc, #232]	; (801e280 <etharp_find_entry+0x2e0>)
 801e198:	f002 fe18 	bl	8020dcc <iprintf>
 801e19c:	e010      	b.n	801e1c0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e19e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e1a2:	2b09      	cmp	r3, #9
 801e1a4:	dc02      	bgt.n	801e1ac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801e1a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e1a8:	843b      	strh	r3, [r7, #32]
 801e1aa:	e009      	b.n	801e1c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801e1ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801e1b0:	2b09      	cmp	r3, #9
 801e1b2:	dc02      	bgt.n	801e1ba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801e1b4:	8bfb      	ldrh	r3, [r7, #30]
 801e1b6:	843b      	strh	r3, [r7, #32]
 801e1b8:	e002      	b.n	801e1c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801e1ba:	f04f 33ff 	mov.w	r3, #4294967295
 801e1be:	e054      	b.n	801e26a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e1c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e1c4:	2b09      	cmp	r3, #9
 801e1c6:	dd06      	ble.n	801e1d6 <etharp_find_entry+0x236>
 801e1c8:	4b2b      	ldr	r3, [pc, #172]	; (801e278 <etharp_find_entry+0x2d8>)
 801e1ca:	f240 127f 	movw	r2, #383	; 0x17f
 801e1ce:	492e      	ldr	r1, [pc, #184]	; (801e288 <etharp_find_entry+0x2e8>)
 801e1d0:	482b      	ldr	r0, [pc, #172]	; (801e280 <etharp_find_entry+0x2e0>)
 801e1d2:	f002 fdfb 	bl	8020dcc <iprintf>
    etharp_free_entry(i);
 801e1d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e1da:	4618      	mov	r0, r3
 801e1dc:	f7ff fe06 	bl	801ddec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e1e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e1e4:	2b09      	cmp	r3, #9
 801e1e6:	dd06      	ble.n	801e1f6 <etharp_find_entry+0x256>
 801e1e8:	4b23      	ldr	r3, [pc, #140]	; (801e278 <etharp_find_entry+0x2d8>)
 801e1ea:	f240 1283 	movw	r2, #387	; 0x183
 801e1ee:	4926      	ldr	r1, [pc, #152]	; (801e288 <etharp_find_entry+0x2e8>)
 801e1f0:	4823      	ldr	r0, [pc, #140]	; (801e280 <etharp_find_entry+0x2e0>)
 801e1f2:	f002 fdeb 	bl	8020dcc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e1f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e1fa:	491e      	ldr	r1, [pc, #120]	; (801e274 <etharp_find_entry+0x2d4>)
 801e1fc:	4613      	mov	r3, r2
 801e1fe:	005b      	lsls	r3, r3, #1
 801e200:	4413      	add	r3, r2
 801e202:	00db      	lsls	r3, r3, #3
 801e204:	440b      	add	r3, r1
 801e206:	3314      	adds	r3, #20
 801e208:	781b      	ldrb	r3, [r3, #0]
 801e20a:	2b00      	cmp	r3, #0
 801e20c:	d006      	beq.n	801e21c <etharp_find_entry+0x27c>
 801e20e:	4b1a      	ldr	r3, [pc, #104]	; (801e278 <etharp_find_entry+0x2d8>)
 801e210:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801e214:	491d      	ldr	r1, [pc, #116]	; (801e28c <etharp_find_entry+0x2ec>)
 801e216:	481a      	ldr	r0, [pc, #104]	; (801e280 <etharp_find_entry+0x2e0>)
 801e218:	f002 fdd8 	bl	8020dcc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	2b00      	cmp	r3, #0
 801e220:	d00b      	beq.n	801e23a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801e222:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	6819      	ldr	r1, [r3, #0]
 801e22a:	4812      	ldr	r0, [pc, #72]	; (801e274 <etharp_find_entry+0x2d4>)
 801e22c:	4613      	mov	r3, r2
 801e22e:	005b      	lsls	r3, r3, #1
 801e230:	4413      	add	r3, r2
 801e232:	00db      	lsls	r3, r3, #3
 801e234:	4403      	add	r3, r0
 801e236:	3304      	adds	r3, #4
 801e238:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801e23a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e23e:	490d      	ldr	r1, [pc, #52]	; (801e274 <etharp_find_entry+0x2d4>)
 801e240:	4613      	mov	r3, r2
 801e242:	005b      	lsls	r3, r3, #1
 801e244:	4413      	add	r3, r2
 801e246:	00db      	lsls	r3, r3, #3
 801e248:	440b      	add	r3, r1
 801e24a:	3312      	adds	r3, #18
 801e24c:	2200      	movs	r2, #0
 801e24e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801e250:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e254:	4907      	ldr	r1, [pc, #28]	; (801e274 <etharp_find_entry+0x2d4>)
 801e256:	4613      	mov	r3, r2
 801e258:	005b      	lsls	r3, r3, #1
 801e25a:	4413      	add	r3, r2
 801e25c:	00db      	lsls	r3, r3, #3
 801e25e:	440b      	add	r3, r1
 801e260:	3308      	adds	r3, #8
 801e262:	687a      	ldr	r2, [r7, #4]
 801e264:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801e266:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801e26a:	4618      	mov	r0, r3
 801e26c:	3728      	adds	r7, #40	; 0x28
 801e26e:	46bd      	mov	sp, r7
 801e270:	bd80      	pop	{r7, pc}
 801e272:	bf00      	nop
 801e274:	20005738 	.word	0x20005738
 801e278:	08025be4 	.word	0x08025be4
 801e27c:	08025c1c 	.word	0x08025c1c
 801e280:	08025c5c 	.word	0x08025c5c
 801e284:	08025c84 	.word	0x08025c84
 801e288:	08025c9c 	.word	0x08025c9c
 801e28c:	08025cb0 	.word	0x08025cb0

0801e290 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801e290:	b580      	push	{r7, lr}
 801e292:	b088      	sub	sp, #32
 801e294:	af02      	add	r7, sp, #8
 801e296:	60f8      	str	r0, [r7, #12]
 801e298:	60b9      	str	r1, [r7, #8]
 801e29a:	607a      	str	r2, [r7, #4]
 801e29c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e2a4:	2b06      	cmp	r3, #6
 801e2a6:	d006      	beq.n	801e2b6 <etharp_update_arp_entry+0x26>
 801e2a8:	4b48      	ldr	r3, [pc, #288]	; (801e3cc <etharp_update_arp_entry+0x13c>)
 801e2aa:	f240 12a9 	movw	r2, #425	; 0x1a9
 801e2ae:	4948      	ldr	r1, [pc, #288]	; (801e3d0 <etharp_update_arp_entry+0x140>)
 801e2b0:	4848      	ldr	r0, [pc, #288]	; (801e3d4 <etharp_update_arp_entry+0x144>)
 801e2b2:	f002 fd8b 	bl	8020dcc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801e2b6:	68bb      	ldr	r3, [r7, #8]
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d012      	beq.n	801e2e2 <etharp_update_arp_entry+0x52>
 801e2bc:	68bb      	ldr	r3, [r7, #8]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d00e      	beq.n	801e2e2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e2c4:	68bb      	ldr	r3, [r7, #8]
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	68f9      	ldr	r1, [r7, #12]
 801e2ca:	4618      	mov	r0, r3
 801e2cc:	f001 f920 	bl	801f510 <ip4_addr_isbroadcast_u32>
 801e2d0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d105      	bne.n	801e2e2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801e2d6:	68bb      	ldr	r3, [r7, #8]
 801e2d8:	681b      	ldr	r3, [r3, #0]
 801e2da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e2de:	2be0      	cmp	r3, #224	; 0xe0
 801e2e0:	d102      	bne.n	801e2e8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e2e2:	f06f 030f 	mvn.w	r3, #15
 801e2e6:	e06c      	b.n	801e3c2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801e2e8:	78fb      	ldrb	r3, [r7, #3]
 801e2ea:	68fa      	ldr	r2, [r7, #12]
 801e2ec:	4619      	mov	r1, r3
 801e2ee:	68b8      	ldr	r0, [r7, #8]
 801e2f0:	f7ff fe56 	bl	801dfa0 <etharp_find_entry>
 801e2f4:	4603      	mov	r3, r0
 801e2f6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801e2f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	da02      	bge.n	801e306 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801e300:	8afb      	ldrh	r3, [r7, #22]
 801e302:	b25b      	sxtb	r3, r3
 801e304:	e05d      	b.n	801e3c2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e306:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e30a:	4933      	ldr	r1, [pc, #204]	; (801e3d8 <etharp_update_arp_entry+0x148>)
 801e30c:	4613      	mov	r3, r2
 801e30e:	005b      	lsls	r3, r3, #1
 801e310:	4413      	add	r3, r2
 801e312:	00db      	lsls	r3, r3, #3
 801e314:	440b      	add	r3, r1
 801e316:	3314      	adds	r3, #20
 801e318:	2202      	movs	r2, #2
 801e31a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801e31c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e320:	492d      	ldr	r1, [pc, #180]	; (801e3d8 <etharp_update_arp_entry+0x148>)
 801e322:	4613      	mov	r3, r2
 801e324:	005b      	lsls	r3, r3, #1
 801e326:	4413      	add	r3, r2
 801e328:	00db      	lsls	r3, r3, #3
 801e32a:	440b      	add	r3, r1
 801e32c:	3308      	adds	r3, #8
 801e32e:	68fa      	ldr	r2, [r7, #12]
 801e330:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801e332:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e336:	4613      	mov	r3, r2
 801e338:	005b      	lsls	r3, r3, #1
 801e33a:	4413      	add	r3, r2
 801e33c:	00db      	lsls	r3, r3, #3
 801e33e:	3308      	adds	r3, #8
 801e340:	4a25      	ldr	r2, [pc, #148]	; (801e3d8 <etharp_update_arp_entry+0x148>)
 801e342:	4413      	add	r3, r2
 801e344:	3304      	adds	r3, #4
 801e346:	2206      	movs	r2, #6
 801e348:	6879      	ldr	r1, [r7, #4]
 801e34a:	4618      	mov	r0, r3
 801e34c:	f002 fc54 	bl	8020bf8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801e350:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e354:	4920      	ldr	r1, [pc, #128]	; (801e3d8 <etharp_update_arp_entry+0x148>)
 801e356:	4613      	mov	r3, r2
 801e358:	005b      	lsls	r3, r3, #1
 801e35a:	4413      	add	r3, r2
 801e35c:	00db      	lsls	r3, r3, #3
 801e35e:	440b      	add	r3, r1
 801e360:	3312      	adds	r3, #18
 801e362:	2200      	movs	r2, #0
 801e364:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801e366:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e36a:	491b      	ldr	r1, [pc, #108]	; (801e3d8 <etharp_update_arp_entry+0x148>)
 801e36c:	4613      	mov	r3, r2
 801e36e:	005b      	lsls	r3, r3, #1
 801e370:	4413      	add	r3, r2
 801e372:	00db      	lsls	r3, r3, #3
 801e374:	440b      	add	r3, r1
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	2b00      	cmp	r3, #0
 801e37a:	d021      	beq.n	801e3c0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801e37c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e380:	4915      	ldr	r1, [pc, #84]	; (801e3d8 <etharp_update_arp_entry+0x148>)
 801e382:	4613      	mov	r3, r2
 801e384:	005b      	lsls	r3, r3, #1
 801e386:	4413      	add	r3, r2
 801e388:	00db      	lsls	r3, r3, #3
 801e38a:	440b      	add	r3, r1
 801e38c:	681b      	ldr	r3, [r3, #0]
 801e38e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801e390:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e394:	4910      	ldr	r1, [pc, #64]	; (801e3d8 <etharp_update_arp_entry+0x148>)
 801e396:	4613      	mov	r3, r2
 801e398:	005b      	lsls	r3, r3, #1
 801e39a:	4413      	add	r3, r2
 801e39c:	00db      	lsls	r3, r3, #3
 801e39e:	440b      	add	r3, r1
 801e3a0:	2200      	movs	r2, #0
 801e3a2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801e3a4:	68fb      	ldr	r3, [r7, #12]
 801e3a6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801e3aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e3ae:	9300      	str	r3, [sp, #0]
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	6939      	ldr	r1, [r7, #16]
 801e3b4:	68f8      	ldr	r0, [r7, #12]
 801e3b6:	f002 f8dd 	bl	8020574 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801e3ba:	6938      	ldr	r0, [r7, #16]
 801e3bc:	f7f6 fadc 	bl	8014978 <pbuf_free>
  }
  return ERR_OK;
 801e3c0:	2300      	movs	r3, #0
}
 801e3c2:	4618      	mov	r0, r3
 801e3c4:	3718      	adds	r7, #24
 801e3c6:	46bd      	mov	sp, r7
 801e3c8:	bd80      	pop	{r7, pc}
 801e3ca:	bf00      	nop
 801e3cc:	08025be4 	.word	0x08025be4
 801e3d0:	08025cdc 	.word	0x08025cdc
 801e3d4:	08025c5c 	.word	0x08025c5c
 801e3d8:	20005738 	.word	0x20005738

0801e3dc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801e3dc:	b580      	push	{r7, lr}
 801e3de:	b084      	sub	sp, #16
 801e3e0:	af00      	add	r7, sp, #0
 801e3e2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e3e4:	2300      	movs	r3, #0
 801e3e6:	60fb      	str	r3, [r7, #12]
 801e3e8:	e01e      	b.n	801e428 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801e3ea:	4913      	ldr	r1, [pc, #76]	; (801e438 <etharp_cleanup_netif+0x5c>)
 801e3ec:	68fa      	ldr	r2, [r7, #12]
 801e3ee:	4613      	mov	r3, r2
 801e3f0:	005b      	lsls	r3, r3, #1
 801e3f2:	4413      	add	r3, r2
 801e3f4:	00db      	lsls	r3, r3, #3
 801e3f6:	440b      	add	r3, r1
 801e3f8:	3314      	adds	r3, #20
 801e3fa:	781b      	ldrb	r3, [r3, #0]
 801e3fc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801e3fe:	7afb      	ldrb	r3, [r7, #11]
 801e400:	2b00      	cmp	r3, #0
 801e402:	d00e      	beq.n	801e422 <etharp_cleanup_netif+0x46>
 801e404:	490c      	ldr	r1, [pc, #48]	; (801e438 <etharp_cleanup_netif+0x5c>)
 801e406:	68fa      	ldr	r2, [r7, #12]
 801e408:	4613      	mov	r3, r2
 801e40a:	005b      	lsls	r3, r3, #1
 801e40c:	4413      	add	r3, r2
 801e40e:	00db      	lsls	r3, r3, #3
 801e410:	440b      	add	r3, r1
 801e412:	3308      	adds	r3, #8
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	687a      	ldr	r2, [r7, #4]
 801e418:	429a      	cmp	r2, r3
 801e41a:	d102      	bne.n	801e422 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801e41c:	68f8      	ldr	r0, [r7, #12]
 801e41e:	f7ff fce5 	bl	801ddec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e422:	68fb      	ldr	r3, [r7, #12]
 801e424:	3301      	adds	r3, #1
 801e426:	60fb      	str	r3, [r7, #12]
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	2b09      	cmp	r3, #9
 801e42c:	dddd      	ble.n	801e3ea <etharp_cleanup_netif+0xe>
    }
  }
}
 801e42e:	bf00      	nop
 801e430:	bf00      	nop
 801e432:	3710      	adds	r7, #16
 801e434:	46bd      	mov	sp, r7
 801e436:	bd80      	pop	{r7, pc}
 801e438:	20005738 	.word	0x20005738

0801e43c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801e43c:	b5b0      	push	{r4, r5, r7, lr}
 801e43e:	b08a      	sub	sp, #40	; 0x28
 801e440:	af04      	add	r7, sp, #16
 801e442:	6078      	str	r0, [r7, #4]
 801e444:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e446:	683b      	ldr	r3, [r7, #0]
 801e448:	2b00      	cmp	r3, #0
 801e44a:	d107      	bne.n	801e45c <etharp_input+0x20>
 801e44c:	4b3f      	ldr	r3, [pc, #252]	; (801e54c <etharp_input+0x110>)
 801e44e:	f240 228a 	movw	r2, #650	; 0x28a
 801e452:	493f      	ldr	r1, [pc, #252]	; (801e550 <etharp_input+0x114>)
 801e454:	483f      	ldr	r0, [pc, #252]	; (801e554 <etharp_input+0x118>)
 801e456:	f002 fcb9 	bl	8020dcc <iprintf>
 801e45a:	e074      	b.n	801e546 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	685b      	ldr	r3, [r3, #4]
 801e460:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e462:	693b      	ldr	r3, [r7, #16]
 801e464:	881b      	ldrh	r3, [r3, #0]
 801e466:	b29b      	uxth	r3, r3
 801e468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e46c:	d10c      	bne.n	801e488 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e46e:	693b      	ldr	r3, [r7, #16]
 801e470:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e472:	2b06      	cmp	r3, #6
 801e474:	d108      	bne.n	801e488 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e476:	693b      	ldr	r3, [r7, #16]
 801e478:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e47a:	2b04      	cmp	r3, #4
 801e47c:	d104      	bne.n	801e488 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801e47e:	693b      	ldr	r3, [r7, #16]
 801e480:	885b      	ldrh	r3, [r3, #2]
 801e482:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e484:	2b08      	cmp	r3, #8
 801e486:	d003      	beq.n	801e490 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801e488:	6878      	ldr	r0, [r7, #4]
 801e48a:	f7f6 fa75 	bl	8014978 <pbuf_free>
    return;
 801e48e:	e05a      	b.n	801e546 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801e490:	693b      	ldr	r3, [r7, #16]
 801e492:	330e      	adds	r3, #14
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801e498:	693b      	ldr	r3, [r7, #16]
 801e49a:	3318      	adds	r3, #24
 801e49c:	681b      	ldr	r3, [r3, #0]
 801e49e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e4a0:	683b      	ldr	r3, [r7, #0]
 801e4a2:	3304      	adds	r3, #4
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d102      	bne.n	801e4b0 <etharp_input+0x74>
    for_us = 0;
 801e4aa:	2300      	movs	r3, #0
 801e4ac:	75fb      	strb	r3, [r7, #23]
 801e4ae:	e009      	b.n	801e4c4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801e4b0:	68ba      	ldr	r2, [r7, #8]
 801e4b2:	683b      	ldr	r3, [r7, #0]
 801e4b4:	3304      	adds	r3, #4
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	429a      	cmp	r2, r3
 801e4ba:	bf0c      	ite	eq
 801e4bc:	2301      	moveq	r3, #1
 801e4be:	2300      	movne	r3, #0
 801e4c0:	b2db      	uxtb	r3, r3
 801e4c2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e4c4:	693b      	ldr	r3, [r7, #16]
 801e4c6:	f103 0208 	add.w	r2, r3, #8
 801e4ca:	7dfb      	ldrb	r3, [r7, #23]
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d001      	beq.n	801e4d4 <etharp_input+0x98>
 801e4d0:	2301      	movs	r3, #1
 801e4d2:	e000      	b.n	801e4d6 <etharp_input+0x9a>
 801e4d4:	2302      	movs	r3, #2
 801e4d6:	f107 010c 	add.w	r1, r7, #12
 801e4da:	6838      	ldr	r0, [r7, #0]
 801e4dc:	f7ff fed8 	bl	801e290 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801e4e0:	693b      	ldr	r3, [r7, #16]
 801e4e2:	88db      	ldrh	r3, [r3, #6]
 801e4e4:	b29b      	uxth	r3, r3
 801e4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e4ea:	d003      	beq.n	801e4f4 <etharp_input+0xb8>
 801e4ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e4f0:	d01e      	beq.n	801e530 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801e4f2:	e025      	b.n	801e540 <etharp_input+0x104>
      if (for_us) {
 801e4f4:	7dfb      	ldrb	r3, [r7, #23]
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	d021      	beq.n	801e53e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801e4fa:	683b      	ldr	r3, [r7, #0]
 801e4fc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801e500:	693b      	ldr	r3, [r7, #16]
 801e502:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801e506:	683b      	ldr	r3, [r7, #0]
 801e508:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801e50c:	683b      	ldr	r3, [r7, #0]
 801e50e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801e510:	693a      	ldr	r2, [r7, #16]
 801e512:	3208      	adds	r2, #8
        etharp_raw(netif,
 801e514:	2102      	movs	r1, #2
 801e516:	9103      	str	r1, [sp, #12]
 801e518:	f107 010c 	add.w	r1, r7, #12
 801e51c:	9102      	str	r1, [sp, #8]
 801e51e:	9201      	str	r2, [sp, #4]
 801e520:	9300      	str	r3, [sp, #0]
 801e522:	462b      	mov	r3, r5
 801e524:	4622      	mov	r2, r4
 801e526:	4601      	mov	r1, r0
 801e528:	6838      	ldr	r0, [r7, #0]
 801e52a:	f000 faef 	bl	801eb0c <etharp_raw>
      break;
 801e52e:	e006      	b.n	801e53e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801e530:	f107 030c 	add.w	r3, r7, #12
 801e534:	4619      	mov	r1, r3
 801e536:	6838      	ldr	r0, [r7, #0]
 801e538:	f7fe f9cc 	bl	801c8d4 <dhcp_arp_reply>
      break;
 801e53c:	e000      	b.n	801e540 <etharp_input+0x104>
      break;
 801e53e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801e540:	6878      	ldr	r0, [r7, #4]
 801e542:	f7f6 fa19 	bl	8014978 <pbuf_free>
}
 801e546:	3718      	adds	r7, #24
 801e548:	46bd      	mov	sp, r7
 801e54a:	bdb0      	pop	{r4, r5, r7, pc}
 801e54c:	08025be4 	.word	0x08025be4
 801e550:	08025d34 	.word	0x08025d34
 801e554:	08025c5c 	.word	0x08025c5c

0801e558 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801e558:	b580      	push	{r7, lr}
 801e55a:	b086      	sub	sp, #24
 801e55c:	af02      	add	r7, sp, #8
 801e55e:	60f8      	str	r0, [r7, #12]
 801e560:	60b9      	str	r1, [r7, #8]
 801e562:	4613      	mov	r3, r2
 801e564:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801e566:	79fa      	ldrb	r2, [r7, #7]
 801e568:	4944      	ldr	r1, [pc, #272]	; (801e67c <etharp_output_to_arp_index+0x124>)
 801e56a:	4613      	mov	r3, r2
 801e56c:	005b      	lsls	r3, r3, #1
 801e56e:	4413      	add	r3, r2
 801e570:	00db      	lsls	r3, r3, #3
 801e572:	440b      	add	r3, r1
 801e574:	3314      	adds	r3, #20
 801e576:	781b      	ldrb	r3, [r3, #0]
 801e578:	2b01      	cmp	r3, #1
 801e57a:	d806      	bhi.n	801e58a <etharp_output_to_arp_index+0x32>
 801e57c:	4b40      	ldr	r3, [pc, #256]	; (801e680 <etharp_output_to_arp_index+0x128>)
 801e57e:	f240 22ee 	movw	r2, #750	; 0x2ee
 801e582:	4940      	ldr	r1, [pc, #256]	; (801e684 <etharp_output_to_arp_index+0x12c>)
 801e584:	4840      	ldr	r0, [pc, #256]	; (801e688 <etharp_output_to_arp_index+0x130>)
 801e586:	f002 fc21 	bl	8020dcc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801e58a:	79fa      	ldrb	r2, [r7, #7]
 801e58c:	493b      	ldr	r1, [pc, #236]	; (801e67c <etharp_output_to_arp_index+0x124>)
 801e58e:	4613      	mov	r3, r2
 801e590:	005b      	lsls	r3, r3, #1
 801e592:	4413      	add	r3, r2
 801e594:	00db      	lsls	r3, r3, #3
 801e596:	440b      	add	r3, r1
 801e598:	3314      	adds	r3, #20
 801e59a:	781b      	ldrb	r3, [r3, #0]
 801e59c:	2b02      	cmp	r3, #2
 801e59e:	d153      	bne.n	801e648 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801e5a0:	79fa      	ldrb	r2, [r7, #7]
 801e5a2:	4936      	ldr	r1, [pc, #216]	; (801e67c <etharp_output_to_arp_index+0x124>)
 801e5a4:	4613      	mov	r3, r2
 801e5a6:	005b      	lsls	r3, r3, #1
 801e5a8:	4413      	add	r3, r2
 801e5aa:	00db      	lsls	r3, r3, #3
 801e5ac:	440b      	add	r3, r1
 801e5ae:	3312      	adds	r3, #18
 801e5b0:	881b      	ldrh	r3, [r3, #0]
 801e5b2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801e5b6:	d919      	bls.n	801e5ec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801e5b8:	79fa      	ldrb	r2, [r7, #7]
 801e5ba:	4613      	mov	r3, r2
 801e5bc:	005b      	lsls	r3, r3, #1
 801e5be:	4413      	add	r3, r2
 801e5c0:	00db      	lsls	r3, r3, #3
 801e5c2:	4a2e      	ldr	r2, [pc, #184]	; (801e67c <etharp_output_to_arp_index+0x124>)
 801e5c4:	4413      	add	r3, r2
 801e5c6:	3304      	adds	r3, #4
 801e5c8:	4619      	mov	r1, r3
 801e5ca:	68f8      	ldr	r0, [r7, #12]
 801e5cc:	f000 fb4c 	bl	801ec68 <etharp_request>
 801e5d0:	4603      	mov	r3, r0
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	d138      	bne.n	801e648 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e5d6:	79fa      	ldrb	r2, [r7, #7]
 801e5d8:	4928      	ldr	r1, [pc, #160]	; (801e67c <etharp_output_to_arp_index+0x124>)
 801e5da:	4613      	mov	r3, r2
 801e5dc:	005b      	lsls	r3, r3, #1
 801e5de:	4413      	add	r3, r2
 801e5e0:	00db      	lsls	r3, r3, #3
 801e5e2:	440b      	add	r3, r1
 801e5e4:	3314      	adds	r3, #20
 801e5e6:	2203      	movs	r2, #3
 801e5e8:	701a      	strb	r2, [r3, #0]
 801e5ea:	e02d      	b.n	801e648 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801e5ec:	79fa      	ldrb	r2, [r7, #7]
 801e5ee:	4923      	ldr	r1, [pc, #140]	; (801e67c <etharp_output_to_arp_index+0x124>)
 801e5f0:	4613      	mov	r3, r2
 801e5f2:	005b      	lsls	r3, r3, #1
 801e5f4:	4413      	add	r3, r2
 801e5f6:	00db      	lsls	r3, r3, #3
 801e5f8:	440b      	add	r3, r1
 801e5fa:	3312      	adds	r3, #18
 801e5fc:	881b      	ldrh	r3, [r3, #0]
 801e5fe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801e602:	d321      	bcc.n	801e648 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801e604:	79fa      	ldrb	r2, [r7, #7]
 801e606:	4613      	mov	r3, r2
 801e608:	005b      	lsls	r3, r3, #1
 801e60a:	4413      	add	r3, r2
 801e60c:	00db      	lsls	r3, r3, #3
 801e60e:	4a1b      	ldr	r2, [pc, #108]	; (801e67c <etharp_output_to_arp_index+0x124>)
 801e610:	4413      	add	r3, r2
 801e612:	1d19      	adds	r1, r3, #4
 801e614:	79fa      	ldrb	r2, [r7, #7]
 801e616:	4613      	mov	r3, r2
 801e618:	005b      	lsls	r3, r3, #1
 801e61a:	4413      	add	r3, r2
 801e61c:	00db      	lsls	r3, r3, #3
 801e61e:	3308      	adds	r3, #8
 801e620:	4a16      	ldr	r2, [pc, #88]	; (801e67c <etharp_output_to_arp_index+0x124>)
 801e622:	4413      	add	r3, r2
 801e624:	3304      	adds	r3, #4
 801e626:	461a      	mov	r2, r3
 801e628:	68f8      	ldr	r0, [r7, #12]
 801e62a:	f000 fafb 	bl	801ec24 <etharp_request_dst>
 801e62e:	4603      	mov	r3, r0
 801e630:	2b00      	cmp	r3, #0
 801e632:	d109      	bne.n	801e648 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e634:	79fa      	ldrb	r2, [r7, #7]
 801e636:	4911      	ldr	r1, [pc, #68]	; (801e67c <etharp_output_to_arp_index+0x124>)
 801e638:	4613      	mov	r3, r2
 801e63a:	005b      	lsls	r3, r3, #1
 801e63c:	4413      	add	r3, r2
 801e63e:	00db      	lsls	r3, r3, #3
 801e640:	440b      	add	r3, r1
 801e642:	3314      	adds	r3, #20
 801e644:	2203      	movs	r2, #3
 801e646:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801e648:	68fb      	ldr	r3, [r7, #12]
 801e64a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801e64e:	79fa      	ldrb	r2, [r7, #7]
 801e650:	4613      	mov	r3, r2
 801e652:	005b      	lsls	r3, r3, #1
 801e654:	4413      	add	r3, r2
 801e656:	00db      	lsls	r3, r3, #3
 801e658:	3308      	adds	r3, #8
 801e65a:	4a08      	ldr	r2, [pc, #32]	; (801e67c <etharp_output_to_arp_index+0x124>)
 801e65c:	4413      	add	r3, r2
 801e65e:	3304      	adds	r3, #4
 801e660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e664:	9200      	str	r2, [sp, #0]
 801e666:	460a      	mov	r2, r1
 801e668:	68b9      	ldr	r1, [r7, #8]
 801e66a:	68f8      	ldr	r0, [r7, #12]
 801e66c:	f001 ff82 	bl	8020574 <ethernet_output>
 801e670:	4603      	mov	r3, r0
}
 801e672:	4618      	mov	r0, r3
 801e674:	3710      	adds	r7, #16
 801e676:	46bd      	mov	sp, r7
 801e678:	bd80      	pop	{r7, pc}
 801e67a:	bf00      	nop
 801e67c:	20005738 	.word	0x20005738
 801e680:	08025be4 	.word	0x08025be4
 801e684:	08025d54 	.word	0x08025d54
 801e688:	08025c5c 	.word	0x08025c5c

0801e68c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801e68c:	b580      	push	{r7, lr}
 801e68e:	b08a      	sub	sp, #40	; 0x28
 801e690:	af02      	add	r7, sp, #8
 801e692:	60f8      	str	r0, [r7, #12]
 801e694:	60b9      	str	r1, [r7, #8]
 801e696:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e69c:	68fb      	ldr	r3, [r7, #12]
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	d106      	bne.n	801e6b0 <etharp_output+0x24>
 801e6a2:	4b73      	ldr	r3, [pc, #460]	; (801e870 <etharp_output+0x1e4>)
 801e6a4:	f240 321e 	movw	r2, #798	; 0x31e
 801e6a8:	4972      	ldr	r1, [pc, #456]	; (801e874 <etharp_output+0x1e8>)
 801e6aa:	4873      	ldr	r0, [pc, #460]	; (801e878 <etharp_output+0x1ec>)
 801e6ac:	f002 fb8e 	bl	8020dcc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801e6b0:	68bb      	ldr	r3, [r7, #8]
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d106      	bne.n	801e6c4 <etharp_output+0x38>
 801e6b6:	4b6e      	ldr	r3, [pc, #440]	; (801e870 <etharp_output+0x1e4>)
 801e6b8:	f240 321f 	movw	r2, #799	; 0x31f
 801e6bc:	496f      	ldr	r1, [pc, #444]	; (801e87c <etharp_output+0x1f0>)
 801e6be:	486e      	ldr	r0, [pc, #440]	; (801e878 <etharp_output+0x1ec>)
 801e6c0:	f002 fb84 	bl	8020dcc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	d106      	bne.n	801e6d8 <etharp_output+0x4c>
 801e6ca:	4b69      	ldr	r3, [pc, #420]	; (801e870 <etharp_output+0x1e4>)
 801e6cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 801e6d0:	496b      	ldr	r1, [pc, #428]	; (801e880 <etharp_output+0x1f4>)
 801e6d2:	4869      	ldr	r0, [pc, #420]	; (801e878 <etharp_output+0x1ec>)
 801e6d4:	f002 fb7a 	bl	8020dcc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	681b      	ldr	r3, [r3, #0]
 801e6dc:	68f9      	ldr	r1, [r7, #12]
 801e6de:	4618      	mov	r0, r3
 801e6e0:	f000 ff16 	bl	801f510 <ip4_addr_isbroadcast_u32>
 801e6e4:	4603      	mov	r3, r0
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	d002      	beq.n	801e6f0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801e6ea:	4b66      	ldr	r3, [pc, #408]	; (801e884 <etharp_output+0x1f8>)
 801e6ec:	61fb      	str	r3, [r7, #28]
 801e6ee:	e0af      	b.n	801e850 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	681b      	ldr	r3, [r3, #0]
 801e6f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e6f8:	2be0      	cmp	r3, #224	; 0xe0
 801e6fa:	d118      	bne.n	801e72e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801e6fc:	2301      	movs	r3, #1
 801e6fe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801e700:	2300      	movs	r3, #0
 801e702:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801e704:	235e      	movs	r3, #94	; 0x5e
 801e706:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	3301      	adds	r3, #1
 801e70c:	781b      	ldrb	r3, [r3, #0]
 801e70e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e712:	b2db      	uxtb	r3, r3
 801e714:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	3302      	adds	r3, #2
 801e71a:	781b      	ldrb	r3, [r3, #0]
 801e71c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	3303      	adds	r3, #3
 801e722:	781b      	ldrb	r3, [r3, #0]
 801e724:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801e726:	f107 0310 	add.w	r3, r7, #16
 801e72a:	61fb      	str	r3, [r7, #28]
 801e72c:	e090      	b.n	801e850 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	681a      	ldr	r2, [r3, #0]
 801e732:	68fb      	ldr	r3, [r7, #12]
 801e734:	3304      	adds	r3, #4
 801e736:	681b      	ldr	r3, [r3, #0]
 801e738:	405a      	eors	r2, r3
 801e73a:	68fb      	ldr	r3, [r7, #12]
 801e73c:	3308      	adds	r3, #8
 801e73e:	681b      	ldr	r3, [r3, #0]
 801e740:	4013      	ands	r3, r2
 801e742:	2b00      	cmp	r3, #0
 801e744:	d012      	beq.n	801e76c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	681b      	ldr	r3, [r3, #0]
 801e74a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801e74c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801e750:	4293      	cmp	r3, r2
 801e752:	d00b      	beq.n	801e76c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801e754:	68fb      	ldr	r3, [r7, #12]
 801e756:	330c      	adds	r3, #12
 801e758:	681b      	ldr	r3, [r3, #0]
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d003      	beq.n	801e766 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801e75e:	68fb      	ldr	r3, [r7, #12]
 801e760:	330c      	adds	r3, #12
 801e762:	61bb      	str	r3, [r7, #24]
 801e764:	e002      	b.n	801e76c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801e766:	f06f 0303 	mvn.w	r3, #3
 801e76a:	e07d      	b.n	801e868 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801e76c:	4b46      	ldr	r3, [pc, #280]	; (801e888 <etharp_output+0x1fc>)
 801e76e:	781b      	ldrb	r3, [r3, #0]
 801e770:	4619      	mov	r1, r3
 801e772:	4a46      	ldr	r2, [pc, #280]	; (801e88c <etharp_output+0x200>)
 801e774:	460b      	mov	r3, r1
 801e776:	005b      	lsls	r3, r3, #1
 801e778:	440b      	add	r3, r1
 801e77a:	00db      	lsls	r3, r3, #3
 801e77c:	4413      	add	r3, r2
 801e77e:	3314      	adds	r3, #20
 801e780:	781b      	ldrb	r3, [r3, #0]
 801e782:	2b01      	cmp	r3, #1
 801e784:	d925      	bls.n	801e7d2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801e786:	4b40      	ldr	r3, [pc, #256]	; (801e888 <etharp_output+0x1fc>)
 801e788:	781b      	ldrb	r3, [r3, #0]
 801e78a:	4619      	mov	r1, r3
 801e78c:	4a3f      	ldr	r2, [pc, #252]	; (801e88c <etharp_output+0x200>)
 801e78e:	460b      	mov	r3, r1
 801e790:	005b      	lsls	r3, r3, #1
 801e792:	440b      	add	r3, r1
 801e794:	00db      	lsls	r3, r3, #3
 801e796:	4413      	add	r3, r2
 801e798:	3308      	adds	r3, #8
 801e79a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801e79c:	68fa      	ldr	r2, [r7, #12]
 801e79e:	429a      	cmp	r2, r3
 801e7a0:	d117      	bne.n	801e7d2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801e7a2:	69bb      	ldr	r3, [r7, #24]
 801e7a4:	681a      	ldr	r2, [r3, #0]
 801e7a6:	4b38      	ldr	r3, [pc, #224]	; (801e888 <etharp_output+0x1fc>)
 801e7a8:	781b      	ldrb	r3, [r3, #0]
 801e7aa:	4618      	mov	r0, r3
 801e7ac:	4937      	ldr	r1, [pc, #220]	; (801e88c <etharp_output+0x200>)
 801e7ae:	4603      	mov	r3, r0
 801e7b0:	005b      	lsls	r3, r3, #1
 801e7b2:	4403      	add	r3, r0
 801e7b4:	00db      	lsls	r3, r3, #3
 801e7b6:	440b      	add	r3, r1
 801e7b8:	3304      	adds	r3, #4
 801e7ba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801e7bc:	429a      	cmp	r2, r3
 801e7be:	d108      	bne.n	801e7d2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801e7c0:	4b31      	ldr	r3, [pc, #196]	; (801e888 <etharp_output+0x1fc>)
 801e7c2:	781b      	ldrb	r3, [r3, #0]
 801e7c4:	461a      	mov	r2, r3
 801e7c6:	68b9      	ldr	r1, [r7, #8]
 801e7c8:	68f8      	ldr	r0, [r7, #12]
 801e7ca:	f7ff fec5 	bl	801e558 <etharp_output_to_arp_index>
 801e7ce:	4603      	mov	r3, r0
 801e7d0:	e04a      	b.n	801e868 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801e7d2:	2300      	movs	r3, #0
 801e7d4:	75fb      	strb	r3, [r7, #23]
 801e7d6:	e031      	b.n	801e83c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801e7d8:	7dfa      	ldrb	r2, [r7, #23]
 801e7da:	492c      	ldr	r1, [pc, #176]	; (801e88c <etharp_output+0x200>)
 801e7dc:	4613      	mov	r3, r2
 801e7de:	005b      	lsls	r3, r3, #1
 801e7e0:	4413      	add	r3, r2
 801e7e2:	00db      	lsls	r3, r3, #3
 801e7e4:	440b      	add	r3, r1
 801e7e6:	3314      	adds	r3, #20
 801e7e8:	781b      	ldrb	r3, [r3, #0]
 801e7ea:	2b01      	cmp	r3, #1
 801e7ec:	d923      	bls.n	801e836 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801e7ee:	7dfa      	ldrb	r2, [r7, #23]
 801e7f0:	4926      	ldr	r1, [pc, #152]	; (801e88c <etharp_output+0x200>)
 801e7f2:	4613      	mov	r3, r2
 801e7f4:	005b      	lsls	r3, r3, #1
 801e7f6:	4413      	add	r3, r2
 801e7f8:	00db      	lsls	r3, r3, #3
 801e7fa:	440b      	add	r3, r1
 801e7fc:	3308      	adds	r3, #8
 801e7fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801e800:	68fa      	ldr	r2, [r7, #12]
 801e802:	429a      	cmp	r2, r3
 801e804:	d117      	bne.n	801e836 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801e806:	69bb      	ldr	r3, [r7, #24]
 801e808:	6819      	ldr	r1, [r3, #0]
 801e80a:	7dfa      	ldrb	r2, [r7, #23]
 801e80c:	481f      	ldr	r0, [pc, #124]	; (801e88c <etharp_output+0x200>)
 801e80e:	4613      	mov	r3, r2
 801e810:	005b      	lsls	r3, r3, #1
 801e812:	4413      	add	r3, r2
 801e814:	00db      	lsls	r3, r3, #3
 801e816:	4403      	add	r3, r0
 801e818:	3304      	adds	r3, #4
 801e81a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801e81c:	4299      	cmp	r1, r3
 801e81e:	d10a      	bne.n	801e836 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801e820:	4a19      	ldr	r2, [pc, #100]	; (801e888 <etharp_output+0x1fc>)
 801e822:	7dfb      	ldrb	r3, [r7, #23]
 801e824:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801e826:	7dfb      	ldrb	r3, [r7, #23]
 801e828:	461a      	mov	r2, r3
 801e82a:	68b9      	ldr	r1, [r7, #8]
 801e82c:	68f8      	ldr	r0, [r7, #12]
 801e82e:	f7ff fe93 	bl	801e558 <etharp_output_to_arp_index>
 801e832:	4603      	mov	r3, r0
 801e834:	e018      	b.n	801e868 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801e836:	7dfb      	ldrb	r3, [r7, #23]
 801e838:	3301      	adds	r3, #1
 801e83a:	75fb      	strb	r3, [r7, #23]
 801e83c:	7dfb      	ldrb	r3, [r7, #23]
 801e83e:	2b09      	cmp	r3, #9
 801e840:	d9ca      	bls.n	801e7d8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801e842:	68ba      	ldr	r2, [r7, #8]
 801e844:	69b9      	ldr	r1, [r7, #24]
 801e846:	68f8      	ldr	r0, [r7, #12]
 801e848:	f000 f822 	bl	801e890 <etharp_query>
 801e84c:	4603      	mov	r3, r0
 801e84e:	e00b      	b.n	801e868 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801e850:	68fb      	ldr	r3, [r7, #12]
 801e852:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801e856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e85a:	9300      	str	r3, [sp, #0]
 801e85c:	69fb      	ldr	r3, [r7, #28]
 801e85e:	68b9      	ldr	r1, [r7, #8]
 801e860:	68f8      	ldr	r0, [r7, #12]
 801e862:	f001 fe87 	bl	8020574 <ethernet_output>
 801e866:	4603      	mov	r3, r0
}
 801e868:	4618      	mov	r0, r3
 801e86a:	3720      	adds	r7, #32
 801e86c:	46bd      	mov	sp, r7
 801e86e:	bd80      	pop	{r7, pc}
 801e870:	08025be4 	.word	0x08025be4
 801e874:	08025d34 	.word	0x08025d34
 801e878:	08025c5c 	.word	0x08025c5c
 801e87c:	08025d84 	.word	0x08025d84
 801e880:	08025d24 	.word	0x08025d24
 801e884:	0802668c 	.word	0x0802668c
 801e888:	20005828 	.word	0x20005828
 801e88c:	20005738 	.word	0x20005738

0801e890 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801e890:	b580      	push	{r7, lr}
 801e892:	b08c      	sub	sp, #48	; 0x30
 801e894:	af02      	add	r7, sp, #8
 801e896:	60f8      	str	r0, [r7, #12]
 801e898:	60b9      	str	r1, [r7, #8]
 801e89a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801e89c:	68fb      	ldr	r3, [r7, #12]
 801e89e:	332a      	adds	r3, #42	; 0x2a
 801e8a0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801e8a2:	23ff      	movs	r3, #255	; 0xff
 801e8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801e8a8:	2300      	movs	r3, #0
 801e8aa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e8ac:	68bb      	ldr	r3, [r7, #8]
 801e8ae:	681b      	ldr	r3, [r3, #0]
 801e8b0:	68f9      	ldr	r1, [r7, #12]
 801e8b2:	4618      	mov	r0, r3
 801e8b4:	f000 fe2c 	bl	801f510 <ip4_addr_isbroadcast_u32>
 801e8b8:	4603      	mov	r3, r0
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d10c      	bne.n	801e8d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e8be:	68bb      	ldr	r3, [r7, #8]
 801e8c0:	681b      	ldr	r3, [r3, #0]
 801e8c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e8c6:	2be0      	cmp	r3, #224	; 0xe0
 801e8c8:	d006      	beq.n	801e8d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e8ca:	68bb      	ldr	r3, [r7, #8]
 801e8cc:	2b00      	cmp	r3, #0
 801e8ce:	d003      	beq.n	801e8d8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801e8d0:	68bb      	ldr	r3, [r7, #8]
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	2b00      	cmp	r3, #0
 801e8d6:	d102      	bne.n	801e8de <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e8d8:	f06f 030f 	mvn.w	r3, #15
 801e8dc:	e101      	b.n	801eae2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801e8de:	68fa      	ldr	r2, [r7, #12]
 801e8e0:	2101      	movs	r1, #1
 801e8e2:	68b8      	ldr	r0, [r7, #8]
 801e8e4:	f7ff fb5c 	bl	801dfa0 <etharp_find_entry>
 801e8e8:	4603      	mov	r3, r0
 801e8ea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801e8ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	da02      	bge.n	801e8fa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801e8f4:	8a7b      	ldrh	r3, [r7, #18]
 801e8f6:	b25b      	sxtb	r3, r3
 801e8f8:	e0f3      	b.n	801eae2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801e8fa:	8a7b      	ldrh	r3, [r7, #18]
 801e8fc:	2b7e      	cmp	r3, #126	; 0x7e
 801e8fe:	d906      	bls.n	801e90e <etharp_query+0x7e>
 801e900:	4b7a      	ldr	r3, [pc, #488]	; (801eaec <etharp_query+0x25c>)
 801e902:	f240 32c1 	movw	r2, #961	; 0x3c1
 801e906:	497a      	ldr	r1, [pc, #488]	; (801eaf0 <etharp_query+0x260>)
 801e908:	487a      	ldr	r0, [pc, #488]	; (801eaf4 <etharp_query+0x264>)
 801e90a:	f002 fa5f 	bl	8020dcc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801e90e:	8a7b      	ldrh	r3, [r7, #18]
 801e910:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801e912:	7c7a      	ldrb	r2, [r7, #17]
 801e914:	4978      	ldr	r1, [pc, #480]	; (801eaf8 <etharp_query+0x268>)
 801e916:	4613      	mov	r3, r2
 801e918:	005b      	lsls	r3, r3, #1
 801e91a:	4413      	add	r3, r2
 801e91c:	00db      	lsls	r3, r3, #3
 801e91e:	440b      	add	r3, r1
 801e920:	3314      	adds	r3, #20
 801e922:	781b      	ldrb	r3, [r3, #0]
 801e924:	2b00      	cmp	r3, #0
 801e926:	d115      	bne.n	801e954 <etharp_query+0xc4>
    is_new_entry = 1;
 801e928:	2301      	movs	r3, #1
 801e92a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801e92c:	7c7a      	ldrb	r2, [r7, #17]
 801e92e:	4972      	ldr	r1, [pc, #456]	; (801eaf8 <etharp_query+0x268>)
 801e930:	4613      	mov	r3, r2
 801e932:	005b      	lsls	r3, r3, #1
 801e934:	4413      	add	r3, r2
 801e936:	00db      	lsls	r3, r3, #3
 801e938:	440b      	add	r3, r1
 801e93a:	3314      	adds	r3, #20
 801e93c:	2201      	movs	r2, #1
 801e93e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801e940:	7c7a      	ldrb	r2, [r7, #17]
 801e942:	496d      	ldr	r1, [pc, #436]	; (801eaf8 <etharp_query+0x268>)
 801e944:	4613      	mov	r3, r2
 801e946:	005b      	lsls	r3, r3, #1
 801e948:	4413      	add	r3, r2
 801e94a:	00db      	lsls	r3, r3, #3
 801e94c:	440b      	add	r3, r1
 801e94e:	3308      	adds	r3, #8
 801e950:	68fa      	ldr	r2, [r7, #12]
 801e952:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801e954:	7c7a      	ldrb	r2, [r7, #17]
 801e956:	4968      	ldr	r1, [pc, #416]	; (801eaf8 <etharp_query+0x268>)
 801e958:	4613      	mov	r3, r2
 801e95a:	005b      	lsls	r3, r3, #1
 801e95c:	4413      	add	r3, r2
 801e95e:	00db      	lsls	r3, r3, #3
 801e960:	440b      	add	r3, r1
 801e962:	3314      	adds	r3, #20
 801e964:	781b      	ldrb	r3, [r3, #0]
 801e966:	2b01      	cmp	r3, #1
 801e968:	d011      	beq.n	801e98e <etharp_query+0xfe>
 801e96a:	7c7a      	ldrb	r2, [r7, #17]
 801e96c:	4962      	ldr	r1, [pc, #392]	; (801eaf8 <etharp_query+0x268>)
 801e96e:	4613      	mov	r3, r2
 801e970:	005b      	lsls	r3, r3, #1
 801e972:	4413      	add	r3, r2
 801e974:	00db      	lsls	r3, r3, #3
 801e976:	440b      	add	r3, r1
 801e978:	3314      	adds	r3, #20
 801e97a:	781b      	ldrb	r3, [r3, #0]
 801e97c:	2b01      	cmp	r3, #1
 801e97e:	d806      	bhi.n	801e98e <etharp_query+0xfe>
 801e980:	4b5a      	ldr	r3, [pc, #360]	; (801eaec <etharp_query+0x25c>)
 801e982:	f240 32cd 	movw	r2, #973	; 0x3cd
 801e986:	495d      	ldr	r1, [pc, #372]	; (801eafc <etharp_query+0x26c>)
 801e988:	485a      	ldr	r0, [pc, #360]	; (801eaf4 <etharp_query+0x264>)
 801e98a:	f002 fa1f 	bl	8020dcc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801e98e:	6a3b      	ldr	r3, [r7, #32]
 801e990:	2b00      	cmp	r3, #0
 801e992:	d102      	bne.n	801e99a <etharp_query+0x10a>
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	2b00      	cmp	r3, #0
 801e998:	d10c      	bne.n	801e9b4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801e99a:	68b9      	ldr	r1, [r7, #8]
 801e99c:	68f8      	ldr	r0, [r7, #12]
 801e99e:	f000 f963 	bl	801ec68 <etharp_request>
 801e9a2:	4603      	mov	r3, r0
 801e9a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d102      	bne.n	801e9b4 <etharp_query+0x124>
      return result;
 801e9ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801e9b2:	e096      	b.n	801eae2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801e9b4:	687b      	ldr	r3, [r7, #4]
 801e9b6:	2b00      	cmp	r3, #0
 801e9b8:	d106      	bne.n	801e9c8 <etharp_query+0x138>
 801e9ba:	4b4c      	ldr	r3, [pc, #304]	; (801eaec <etharp_query+0x25c>)
 801e9bc:	f240 32e1 	movw	r2, #993	; 0x3e1
 801e9c0:	494f      	ldr	r1, [pc, #316]	; (801eb00 <etharp_query+0x270>)
 801e9c2:	484c      	ldr	r0, [pc, #304]	; (801eaf4 <etharp_query+0x264>)
 801e9c4:	f002 fa02 	bl	8020dcc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801e9c8:	7c7a      	ldrb	r2, [r7, #17]
 801e9ca:	494b      	ldr	r1, [pc, #300]	; (801eaf8 <etharp_query+0x268>)
 801e9cc:	4613      	mov	r3, r2
 801e9ce:	005b      	lsls	r3, r3, #1
 801e9d0:	4413      	add	r3, r2
 801e9d2:	00db      	lsls	r3, r3, #3
 801e9d4:	440b      	add	r3, r1
 801e9d6:	3314      	adds	r3, #20
 801e9d8:	781b      	ldrb	r3, [r3, #0]
 801e9da:	2b01      	cmp	r3, #1
 801e9dc:	d917      	bls.n	801ea0e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801e9de:	4a49      	ldr	r2, [pc, #292]	; (801eb04 <etharp_query+0x274>)
 801e9e0:	7c7b      	ldrb	r3, [r7, #17]
 801e9e2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801e9e4:	7c7a      	ldrb	r2, [r7, #17]
 801e9e6:	4613      	mov	r3, r2
 801e9e8:	005b      	lsls	r3, r3, #1
 801e9ea:	4413      	add	r3, r2
 801e9ec:	00db      	lsls	r3, r3, #3
 801e9ee:	3308      	adds	r3, #8
 801e9f0:	4a41      	ldr	r2, [pc, #260]	; (801eaf8 <etharp_query+0x268>)
 801e9f2:	4413      	add	r3, r2
 801e9f4:	3304      	adds	r3, #4
 801e9f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e9fa:	9200      	str	r2, [sp, #0]
 801e9fc:	697a      	ldr	r2, [r7, #20]
 801e9fe:	6879      	ldr	r1, [r7, #4]
 801ea00:	68f8      	ldr	r0, [r7, #12]
 801ea02:	f001 fdb7 	bl	8020574 <ethernet_output>
 801ea06:	4603      	mov	r3, r0
 801ea08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ea0c:	e067      	b.n	801eade <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ea0e:	7c7a      	ldrb	r2, [r7, #17]
 801ea10:	4939      	ldr	r1, [pc, #228]	; (801eaf8 <etharp_query+0x268>)
 801ea12:	4613      	mov	r3, r2
 801ea14:	005b      	lsls	r3, r3, #1
 801ea16:	4413      	add	r3, r2
 801ea18:	00db      	lsls	r3, r3, #3
 801ea1a:	440b      	add	r3, r1
 801ea1c:	3314      	adds	r3, #20
 801ea1e:	781b      	ldrb	r3, [r3, #0]
 801ea20:	2b01      	cmp	r3, #1
 801ea22:	d15c      	bne.n	801eade <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ea24:	2300      	movs	r3, #0
 801ea26:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ea2c:	e01c      	b.n	801ea68 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ea2e:	69fb      	ldr	r3, [r7, #28]
 801ea30:	895a      	ldrh	r2, [r3, #10]
 801ea32:	69fb      	ldr	r3, [r7, #28]
 801ea34:	891b      	ldrh	r3, [r3, #8]
 801ea36:	429a      	cmp	r2, r3
 801ea38:	d10a      	bne.n	801ea50 <etharp_query+0x1c0>
 801ea3a:	69fb      	ldr	r3, [r7, #28]
 801ea3c:	681b      	ldr	r3, [r3, #0]
 801ea3e:	2b00      	cmp	r3, #0
 801ea40:	d006      	beq.n	801ea50 <etharp_query+0x1c0>
 801ea42:	4b2a      	ldr	r3, [pc, #168]	; (801eaec <etharp_query+0x25c>)
 801ea44:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801ea48:	492f      	ldr	r1, [pc, #188]	; (801eb08 <etharp_query+0x278>)
 801ea4a:	482a      	ldr	r0, [pc, #168]	; (801eaf4 <etharp_query+0x264>)
 801ea4c:	f002 f9be 	bl	8020dcc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ea50:	69fb      	ldr	r3, [r7, #28]
 801ea52:	7b1b      	ldrb	r3, [r3, #12]
 801ea54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ea58:	2b00      	cmp	r3, #0
 801ea5a:	d002      	beq.n	801ea62 <etharp_query+0x1d2>
        copy_needed = 1;
 801ea5c:	2301      	movs	r3, #1
 801ea5e:	61bb      	str	r3, [r7, #24]
        break;
 801ea60:	e005      	b.n	801ea6e <etharp_query+0x1de>
      }
      p = p->next;
 801ea62:	69fb      	ldr	r3, [r7, #28]
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ea68:	69fb      	ldr	r3, [r7, #28]
 801ea6a:	2b00      	cmp	r3, #0
 801ea6c:	d1df      	bne.n	801ea2e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ea6e:	69bb      	ldr	r3, [r7, #24]
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	d007      	beq.n	801ea84 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ea74:	687a      	ldr	r2, [r7, #4]
 801ea76:	f44f 7120 	mov.w	r1, #640	; 0x280
 801ea7a:	200e      	movs	r0, #14
 801ea7c:	f7f6 fb2c 	bl	80150d8 <pbuf_clone>
 801ea80:	61f8      	str	r0, [r7, #28]
 801ea82:	e004      	b.n	801ea8e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ea88:	69f8      	ldr	r0, [r7, #28]
 801ea8a:	f7f6 f81b 	bl	8014ac4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ea8e:	69fb      	ldr	r3, [r7, #28]
 801ea90:	2b00      	cmp	r3, #0
 801ea92:	d021      	beq.n	801ead8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ea94:	7c7a      	ldrb	r2, [r7, #17]
 801ea96:	4918      	ldr	r1, [pc, #96]	; (801eaf8 <etharp_query+0x268>)
 801ea98:	4613      	mov	r3, r2
 801ea9a:	005b      	lsls	r3, r3, #1
 801ea9c:	4413      	add	r3, r2
 801ea9e:	00db      	lsls	r3, r3, #3
 801eaa0:	440b      	add	r3, r1
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d00a      	beq.n	801eabe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801eaa8:	7c7a      	ldrb	r2, [r7, #17]
 801eaaa:	4913      	ldr	r1, [pc, #76]	; (801eaf8 <etharp_query+0x268>)
 801eaac:	4613      	mov	r3, r2
 801eaae:	005b      	lsls	r3, r3, #1
 801eab0:	4413      	add	r3, r2
 801eab2:	00db      	lsls	r3, r3, #3
 801eab4:	440b      	add	r3, r1
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	4618      	mov	r0, r3
 801eaba:	f7f5 ff5d 	bl	8014978 <pbuf_free>
      }
      arp_table[i].q = p;
 801eabe:	7c7a      	ldrb	r2, [r7, #17]
 801eac0:	490d      	ldr	r1, [pc, #52]	; (801eaf8 <etharp_query+0x268>)
 801eac2:	4613      	mov	r3, r2
 801eac4:	005b      	lsls	r3, r3, #1
 801eac6:	4413      	add	r3, r2
 801eac8:	00db      	lsls	r3, r3, #3
 801eaca:	440b      	add	r3, r1
 801eacc:	69fa      	ldr	r2, [r7, #28]
 801eace:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ead0:	2300      	movs	r3, #0
 801ead2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ead6:	e002      	b.n	801eade <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ead8:	23ff      	movs	r3, #255	; 0xff
 801eada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801eade:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801eae2:	4618      	mov	r0, r3
 801eae4:	3728      	adds	r7, #40	; 0x28
 801eae6:	46bd      	mov	sp, r7
 801eae8:	bd80      	pop	{r7, pc}
 801eaea:	bf00      	nop
 801eaec:	08025be4 	.word	0x08025be4
 801eaf0:	08025d90 	.word	0x08025d90
 801eaf4:	08025c5c 	.word	0x08025c5c
 801eaf8:	20005738 	.word	0x20005738
 801eafc:	08025da0 	.word	0x08025da0
 801eb00:	08025d84 	.word	0x08025d84
 801eb04:	20005828 	.word	0x20005828
 801eb08:	08025dc8 	.word	0x08025dc8

0801eb0c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801eb0c:	b580      	push	{r7, lr}
 801eb0e:	b08a      	sub	sp, #40	; 0x28
 801eb10:	af02      	add	r7, sp, #8
 801eb12:	60f8      	str	r0, [r7, #12]
 801eb14:	60b9      	str	r1, [r7, #8]
 801eb16:	607a      	str	r2, [r7, #4]
 801eb18:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801eb1a:	2300      	movs	r3, #0
 801eb1c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801eb1e:	68fb      	ldr	r3, [r7, #12]
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	d106      	bne.n	801eb32 <etharp_raw+0x26>
 801eb24:	4b3a      	ldr	r3, [pc, #232]	; (801ec10 <etharp_raw+0x104>)
 801eb26:	f240 4257 	movw	r2, #1111	; 0x457
 801eb2a:	493a      	ldr	r1, [pc, #232]	; (801ec14 <etharp_raw+0x108>)
 801eb2c:	483a      	ldr	r0, [pc, #232]	; (801ec18 <etharp_raw+0x10c>)
 801eb2e:	f002 f94d 	bl	8020dcc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801eb32:	f44f 7220 	mov.w	r2, #640	; 0x280
 801eb36:	211c      	movs	r1, #28
 801eb38:	200e      	movs	r0, #14
 801eb3a:	f7f5 fc39 	bl	80143b0 <pbuf_alloc>
 801eb3e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801eb40:	69bb      	ldr	r3, [r7, #24]
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	d102      	bne.n	801eb4c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801eb46:	f04f 33ff 	mov.w	r3, #4294967295
 801eb4a:	e05d      	b.n	801ec08 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801eb4c:	69bb      	ldr	r3, [r7, #24]
 801eb4e:	895b      	ldrh	r3, [r3, #10]
 801eb50:	2b1b      	cmp	r3, #27
 801eb52:	d806      	bhi.n	801eb62 <etharp_raw+0x56>
 801eb54:	4b2e      	ldr	r3, [pc, #184]	; (801ec10 <etharp_raw+0x104>)
 801eb56:	f240 4262 	movw	r2, #1122	; 0x462
 801eb5a:	4930      	ldr	r1, [pc, #192]	; (801ec1c <etharp_raw+0x110>)
 801eb5c:	482e      	ldr	r0, [pc, #184]	; (801ec18 <etharp_raw+0x10c>)
 801eb5e:	f002 f935 	bl	8020dcc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801eb62:	69bb      	ldr	r3, [r7, #24]
 801eb64:	685b      	ldr	r3, [r3, #4]
 801eb66:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801eb68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801eb6a:	4618      	mov	r0, r3
 801eb6c:	f7f3 fb76 	bl	801225c <lwip_htons>
 801eb70:	4603      	mov	r3, r0
 801eb72:	461a      	mov	r2, r3
 801eb74:	697b      	ldr	r3, [r7, #20]
 801eb76:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801eb78:	68fb      	ldr	r3, [r7, #12]
 801eb7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801eb7e:	2b06      	cmp	r3, #6
 801eb80:	d006      	beq.n	801eb90 <etharp_raw+0x84>
 801eb82:	4b23      	ldr	r3, [pc, #140]	; (801ec10 <etharp_raw+0x104>)
 801eb84:	f240 4269 	movw	r2, #1129	; 0x469
 801eb88:	4925      	ldr	r1, [pc, #148]	; (801ec20 <etharp_raw+0x114>)
 801eb8a:	4823      	ldr	r0, [pc, #140]	; (801ec18 <etharp_raw+0x10c>)
 801eb8c:	f002 f91e 	bl	8020dcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801eb90:	697b      	ldr	r3, [r7, #20]
 801eb92:	3308      	adds	r3, #8
 801eb94:	2206      	movs	r2, #6
 801eb96:	6839      	ldr	r1, [r7, #0]
 801eb98:	4618      	mov	r0, r3
 801eb9a:	f002 f82d 	bl	8020bf8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801eb9e:	697b      	ldr	r3, [r7, #20]
 801eba0:	3312      	adds	r3, #18
 801eba2:	2206      	movs	r2, #6
 801eba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801eba6:	4618      	mov	r0, r3
 801eba8:	f002 f826 	bl	8020bf8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801ebac:	697b      	ldr	r3, [r7, #20]
 801ebae:	330e      	adds	r3, #14
 801ebb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ebb2:	6812      	ldr	r2, [r2, #0]
 801ebb4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801ebb6:	697b      	ldr	r3, [r7, #20]
 801ebb8:	3318      	adds	r3, #24
 801ebba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ebbc:	6812      	ldr	r2, [r2, #0]
 801ebbe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801ebc0:	697b      	ldr	r3, [r7, #20]
 801ebc2:	2200      	movs	r2, #0
 801ebc4:	701a      	strb	r2, [r3, #0]
 801ebc6:	2200      	movs	r2, #0
 801ebc8:	f042 0201 	orr.w	r2, r2, #1
 801ebcc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801ebce:	697b      	ldr	r3, [r7, #20]
 801ebd0:	2200      	movs	r2, #0
 801ebd2:	f042 0208 	orr.w	r2, r2, #8
 801ebd6:	709a      	strb	r2, [r3, #2]
 801ebd8:	2200      	movs	r2, #0
 801ebda:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801ebdc:	697b      	ldr	r3, [r7, #20]
 801ebde:	2206      	movs	r2, #6
 801ebe0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801ebe2:	697b      	ldr	r3, [r7, #20]
 801ebe4:	2204      	movs	r2, #4
 801ebe6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ebe8:	f640 0306 	movw	r3, #2054	; 0x806
 801ebec:	9300      	str	r3, [sp, #0]
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	68ba      	ldr	r2, [r7, #8]
 801ebf2:	69b9      	ldr	r1, [r7, #24]
 801ebf4:	68f8      	ldr	r0, [r7, #12]
 801ebf6:	f001 fcbd 	bl	8020574 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801ebfa:	69b8      	ldr	r0, [r7, #24]
 801ebfc:	f7f5 febc 	bl	8014978 <pbuf_free>
  p = NULL;
 801ec00:	2300      	movs	r3, #0
 801ec02:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ec04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ec08:	4618      	mov	r0, r3
 801ec0a:	3720      	adds	r7, #32
 801ec0c:	46bd      	mov	sp, r7
 801ec0e:	bd80      	pop	{r7, pc}
 801ec10:	08025be4 	.word	0x08025be4
 801ec14:	08025d34 	.word	0x08025d34
 801ec18:	08025c5c 	.word	0x08025c5c
 801ec1c:	08025de4 	.word	0x08025de4
 801ec20:	08025e18 	.word	0x08025e18

0801ec24 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801ec24:	b580      	push	{r7, lr}
 801ec26:	b088      	sub	sp, #32
 801ec28:	af04      	add	r7, sp, #16
 801ec2a:	60f8      	str	r0, [r7, #12]
 801ec2c:	60b9      	str	r1, [r7, #8]
 801ec2e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ec30:	68fb      	ldr	r3, [r7, #12]
 801ec32:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ec36:	68fb      	ldr	r3, [r7, #12]
 801ec38:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801ec3c:	68fb      	ldr	r3, [r7, #12]
 801ec3e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ec40:	2201      	movs	r2, #1
 801ec42:	9203      	str	r2, [sp, #12]
 801ec44:	68ba      	ldr	r2, [r7, #8]
 801ec46:	9202      	str	r2, [sp, #8]
 801ec48:	4a06      	ldr	r2, [pc, #24]	; (801ec64 <etharp_request_dst+0x40>)
 801ec4a:	9201      	str	r2, [sp, #4]
 801ec4c:	9300      	str	r3, [sp, #0]
 801ec4e:	4603      	mov	r3, r0
 801ec50:	687a      	ldr	r2, [r7, #4]
 801ec52:	68f8      	ldr	r0, [r7, #12]
 801ec54:	f7ff ff5a 	bl	801eb0c <etharp_raw>
 801ec58:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801ec5a:	4618      	mov	r0, r3
 801ec5c:	3710      	adds	r7, #16
 801ec5e:	46bd      	mov	sp, r7
 801ec60:	bd80      	pop	{r7, pc}
 801ec62:	bf00      	nop
 801ec64:	08026694 	.word	0x08026694

0801ec68 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ec68:	b580      	push	{r7, lr}
 801ec6a:	b082      	sub	sp, #8
 801ec6c:	af00      	add	r7, sp, #0
 801ec6e:	6078      	str	r0, [r7, #4]
 801ec70:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ec72:	4a05      	ldr	r2, [pc, #20]	; (801ec88 <etharp_request+0x20>)
 801ec74:	6839      	ldr	r1, [r7, #0]
 801ec76:	6878      	ldr	r0, [r7, #4]
 801ec78:	f7ff ffd4 	bl	801ec24 <etharp_request_dst>
 801ec7c:	4603      	mov	r3, r0
}
 801ec7e:	4618      	mov	r0, r3
 801ec80:	3708      	adds	r7, #8
 801ec82:	46bd      	mov	sp, r7
 801ec84:	bd80      	pop	{r7, pc}
 801ec86:	bf00      	nop
 801ec88:	0802668c 	.word	0x0802668c

0801ec8c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801ec8c:	b580      	push	{r7, lr}
 801ec8e:	b08e      	sub	sp, #56	; 0x38
 801ec90:	af04      	add	r7, sp, #16
 801ec92:	6078      	str	r0, [r7, #4]
 801ec94:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801ec96:	4b79      	ldr	r3, [pc, #484]	; (801ee7c <icmp_input+0x1f0>)
 801ec98:	689b      	ldr	r3, [r3, #8]
 801ec9a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801ec9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec9e:	781b      	ldrb	r3, [r3, #0]
 801eca0:	f003 030f 	and.w	r3, r3, #15
 801eca4:	b2db      	uxtb	r3, r3
 801eca6:	009b      	lsls	r3, r3, #2
 801eca8:	b2db      	uxtb	r3, r3
 801ecaa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801ecac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ecae:	2b13      	cmp	r3, #19
 801ecb0:	f240 80cd 	bls.w	801ee4e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	895b      	ldrh	r3, [r3, #10]
 801ecb8:	2b03      	cmp	r3, #3
 801ecba:	f240 80ca 	bls.w	801ee52 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	685b      	ldr	r3, [r3, #4]
 801ecc2:	781b      	ldrb	r3, [r3, #0]
 801ecc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801ecc8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	f000 80b7 	beq.w	801ee40 <icmp_input+0x1b4>
 801ecd2:	2b08      	cmp	r3, #8
 801ecd4:	f040 80b7 	bne.w	801ee46 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801ecd8:	4b69      	ldr	r3, [pc, #420]	; (801ee80 <icmp_input+0x1f4>)
 801ecda:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ecdc:	4b67      	ldr	r3, [pc, #412]	; (801ee7c <icmp_input+0x1f0>)
 801ecde:	695b      	ldr	r3, [r3, #20]
 801ece0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ece4:	2be0      	cmp	r3, #224	; 0xe0
 801ece6:	f000 80bb 	beq.w	801ee60 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ecea:	4b64      	ldr	r3, [pc, #400]	; (801ee7c <icmp_input+0x1f0>)
 801ecec:	695b      	ldr	r3, [r3, #20]
 801ecee:	4a63      	ldr	r2, [pc, #396]	; (801ee7c <icmp_input+0x1f0>)
 801ecf0:	6812      	ldr	r2, [r2, #0]
 801ecf2:	4611      	mov	r1, r2
 801ecf4:	4618      	mov	r0, r3
 801ecf6:	f000 fc0b 	bl	801f510 <ip4_addr_isbroadcast_u32>
 801ecfa:	4603      	mov	r3, r0
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	f040 80b1 	bne.w	801ee64 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	891b      	ldrh	r3, [r3, #8]
 801ed06:	2b07      	cmp	r3, #7
 801ed08:	f240 80a5 	bls.w	801ee56 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ed0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ed0e:	330e      	adds	r3, #14
 801ed10:	4619      	mov	r1, r3
 801ed12:	6878      	ldr	r0, [r7, #4]
 801ed14:	f7f5 fd9a 	bl	801484c <pbuf_add_header>
 801ed18:	4603      	mov	r3, r0
 801ed1a:	2b00      	cmp	r3, #0
 801ed1c:	d04b      	beq.n	801edb6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801ed1e:	687b      	ldr	r3, [r7, #4]
 801ed20:	891a      	ldrh	r2, [r3, #8]
 801ed22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ed24:	4413      	add	r3, r2
 801ed26:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801ed28:	687b      	ldr	r3, [r7, #4]
 801ed2a:	891b      	ldrh	r3, [r3, #8]
 801ed2c:	8b7a      	ldrh	r2, [r7, #26]
 801ed2e:	429a      	cmp	r2, r3
 801ed30:	f0c0 809a 	bcc.w	801ee68 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801ed34:	8b7b      	ldrh	r3, [r7, #26]
 801ed36:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ed3a:	4619      	mov	r1, r3
 801ed3c:	200e      	movs	r0, #14
 801ed3e:	f7f5 fb37 	bl	80143b0 <pbuf_alloc>
 801ed42:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801ed44:	697b      	ldr	r3, [r7, #20]
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	f000 8090 	beq.w	801ee6c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801ed4c:	697b      	ldr	r3, [r7, #20]
 801ed4e:	895b      	ldrh	r3, [r3, #10]
 801ed50:	461a      	mov	r2, r3
 801ed52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ed54:	3308      	adds	r3, #8
 801ed56:	429a      	cmp	r2, r3
 801ed58:	d203      	bcs.n	801ed62 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801ed5a:	6978      	ldr	r0, [r7, #20]
 801ed5c:	f7f5 fe0c 	bl	8014978 <pbuf_free>
          goto icmperr;
 801ed60:	e085      	b.n	801ee6e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801ed62:	697b      	ldr	r3, [r7, #20]
 801ed64:	685b      	ldr	r3, [r3, #4]
 801ed66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ed68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ed6a:	4618      	mov	r0, r3
 801ed6c:	f001 ff44 	bl	8020bf8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801ed70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ed72:	4619      	mov	r1, r3
 801ed74:	6978      	ldr	r0, [r7, #20]
 801ed76:	f7f5 fd79 	bl	801486c <pbuf_remove_header>
 801ed7a:	4603      	mov	r3, r0
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	d009      	beq.n	801ed94 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ed80:	4b40      	ldr	r3, [pc, #256]	; (801ee84 <icmp_input+0x1f8>)
 801ed82:	22b6      	movs	r2, #182	; 0xb6
 801ed84:	4940      	ldr	r1, [pc, #256]	; (801ee88 <icmp_input+0x1fc>)
 801ed86:	4841      	ldr	r0, [pc, #260]	; (801ee8c <icmp_input+0x200>)
 801ed88:	f002 f820 	bl	8020dcc <iprintf>
          pbuf_free(r);
 801ed8c:	6978      	ldr	r0, [r7, #20]
 801ed8e:	f7f5 fdf3 	bl	8014978 <pbuf_free>
          goto icmperr;
 801ed92:	e06c      	b.n	801ee6e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801ed94:	6879      	ldr	r1, [r7, #4]
 801ed96:	6978      	ldr	r0, [r7, #20]
 801ed98:	f7f5 ff22 	bl	8014be0 <pbuf_copy>
 801ed9c:	4603      	mov	r3, r0
 801ed9e:	2b00      	cmp	r3, #0
 801eda0:	d003      	beq.n	801edaa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801eda2:	6978      	ldr	r0, [r7, #20]
 801eda4:	f7f5 fde8 	bl	8014978 <pbuf_free>
          goto icmperr;
 801eda8:	e061      	b.n	801ee6e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801edaa:	6878      	ldr	r0, [r7, #4]
 801edac:	f7f5 fde4 	bl	8014978 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801edb0:	697b      	ldr	r3, [r7, #20]
 801edb2:	607b      	str	r3, [r7, #4]
 801edb4:	e00f      	b.n	801edd6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801edb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801edb8:	330e      	adds	r3, #14
 801edba:	4619      	mov	r1, r3
 801edbc:	6878      	ldr	r0, [r7, #4]
 801edbe:	f7f5 fd55 	bl	801486c <pbuf_remove_header>
 801edc2:	4603      	mov	r3, r0
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d006      	beq.n	801edd6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801edc8:	4b2e      	ldr	r3, [pc, #184]	; (801ee84 <icmp_input+0x1f8>)
 801edca:	22c7      	movs	r2, #199	; 0xc7
 801edcc:	4930      	ldr	r1, [pc, #192]	; (801ee90 <icmp_input+0x204>)
 801edce:	482f      	ldr	r0, [pc, #188]	; (801ee8c <icmp_input+0x200>)
 801edd0:	f001 fffc 	bl	8020dcc <iprintf>
          goto icmperr;
 801edd4:	e04b      	b.n	801ee6e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801edd6:	687b      	ldr	r3, [r7, #4]
 801edd8:	685b      	ldr	r3, [r3, #4]
 801edda:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801eddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801edde:	4619      	mov	r1, r3
 801ede0:	6878      	ldr	r0, [r7, #4]
 801ede2:	f7f5 fd33 	bl	801484c <pbuf_add_header>
 801ede6:	4603      	mov	r3, r0
 801ede8:	2b00      	cmp	r3, #0
 801edea:	d12b      	bne.n	801ee44 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	685b      	ldr	r3, [r3, #4]
 801edf0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801edf2:	69fb      	ldr	r3, [r7, #28]
 801edf4:	681a      	ldr	r2, [r3, #0]
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801edfa:	4b20      	ldr	r3, [pc, #128]	; (801ee7c <icmp_input+0x1f0>)
 801edfc:	691a      	ldr	r2, [r3, #16]
 801edfe:	68fb      	ldr	r3, [r7, #12]
 801ee00:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ee02:	693b      	ldr	r3, [r7, #16]
 801ee04:	2200      	movs	r2, #0
 801ee06:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801ee08:	693b      	ldr	r3, [r7, #16]
 801ee0a:	2200      	movs	r2, #0
 801ee0c:	709a      	strb	r2, [r3, #2]
 801ee0e:	2200      	movs	r2, #0
 801ee10:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ee12:	68fb      	ldr	r3, [r7, #12]
 801ee14:	22ff      	movs	r2, #255	; 0xff
 801ee16:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801ee18:	68fb      	ldr	r3, [r7, #12]
 801ee1a:	2200      	movs	r2, #0
 801ee1c:	729a      	strb	r2, [r3, #10]
 801ee1e:	2200      	movs	r2, #0
 801ee20:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ee22:	683b      	ldr	r3, [r7, #0]
 801ee24:	9302      	str	r3, [sp, #8]
 801ee26:	2301      	movs	r3, #1
 801ee28:	9301      	str	r3, [sp, #4]
 801ee2a:	2300      	movs	r3, #0
 801ee2c:	9300      	str	r3, [sp, #0]
 801ee2e:	23ff      	movs	r3, #255	; 0xff
 801ee30:	2200      	movs	r2, #0
 801ee32:	69f9      	ldr	r1, [r7, #28]
 801ee34:	6878      	ldr	r0, [r7, #4]
 801ee36:	f000 fa93 	bl	801f360 <ip4_output_if>
 801ee3a:	4603      	mov	r3, r0
 801ee3c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801ee3e:	e001      	b.n	801ee44 <icmp_input+0x1b8>
      break;
 801ee40:	bf00      	nop
 801ee42:	e000      	b.n	801ee46 <icmp_input+0x1ba>
      break;
 801ee44:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801ee46:	6878      	ldr	r0, [r7, #4]
 801ee48:	f7f5 fd96 	bl	8014978 <pbuf_free>
  return;
 801ee4c:	e013      	b.n	801ee76 <icmp_input+0x1ea>
    goto lenerr;
 801ee4e:	bf00      	nop
 801ee50:	e002      	b.n	801ee58 <icmp_input+0x1cc>
    goto lenerr;
 801ee52:	bf00      	nop
 801ee54:	e000      	b.n	801ee58 <icmp_input+0x1cc>
        goto lenerr;
 801ee56:	bf00      	nop
lenerr:
  pbuf_free(p);
 801ee58:	6878      	ldr	r0, [r7, #4]
 801ee5a:	f7f5 fd8d 	bl	8014978 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801ee5e:	e00a      	b.n	801ee76 <icmp_input+0x1ea>
        goto icmperr;
 801ee60:	bf00      	nop
 801ee62:	e004      	b.n	801ee6e <icmp_input+0x1e2>
        goto icmperr;
 801ee64:	bf00      	nop
 801ee66:	e002      	b.n	801ee6e <icmp_input+0x1e2>
          goto icmperr;
 801ee68:	bf00      	nop
 801ee6a:	e000      	b.n	801ee6e <icmp_input+0x1e2>
          goto icmperr;
 801ee6c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801ee6e:	6878      	ldr	r0, [r7, #4]
 801ee70:	f7f5 fd82 	bl	8014978 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801ee74:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801ee76:	3728      	adds	r7, #40	; 0x28
 801ee78:	46bd      	mov	sp, r7
 801ee7a:	bd80      	pop	{r7, pc}
 801ee7c:	200135d0 	.word	0x200135d0
 801ee80:	200135e4 	.word	0x200135e4
 801ee84:	08025e5c 	.word	0x08025e5c
 801ee88:	08025e94 	.word	0x08025e94
 801ee8c:	08025ecc 	.word	0x08025ecc
 801ee90:	08025ef4 	.word	0x08025ef4

0801ee94 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801ee94:	b580      	push	{r7, lr}
 801ee96:	b082      	sub	sp, #8
 801ee98:	af00      	add	r7, sp, #0
 801ee9a:	6078      	str	r0, [r7, #4]
 801ee9c:	460b      	mov	r3, r1
 801ee9e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801eea0:	78fb      	ldrb	r3, [r7, #3]
 801eea2:	461a      	mov	r2, r3
 801eea4:	2103      	movs	r1, #3
 801eea6:	6878      	ldr	r0, [r7, #4]
 801eea8:	f000 f814 	bl	801eed4 <icmp_send_response>
}
 801eeac:	bf00      	nop
 801eeae:	3708      	adds	r7, #8
 801eeb0:	46bd      	mov	sp, r7
 801eeb2:	bd80      	pop	{r7, pc}

0801eeb4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801eeb4:	b580      	push	{r7, lr}
 801eeb6:	b082      	sub	sp, #8
 801eeb8:	af00      	add	r7, sp, #0
 801eeba:	6078      	str	r0, [r7, #4]
 801eebc:	460b      	mov	r3, r1
 801eebe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801eec0:	78fb      	ldrb	r3, [r7, #3]
 801eec2:	461a      	mov	r2, r3
 801eec4:	210b      	movs	r1, #11
 801eec6:	6878      	ldr	r0, [r7, #4]
 801eec8:	f000 f804 	bl	801eed4 <icmp_send_response>
}
 801eecc:	bf00      	nop
 801eece:	3708      	adds	r7, #8
 801eed0:	46bd      	mov	sp, r7
 801eed2:	bd80      	pop	{r7, pc}

0801eed4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801eed4:	b580      	push	{r7, lr}
 801eed6:	b08c      	sub	sp, #48	; 0x30
 801eed8:	af04      	add	r7, sp, #16
 801eeda:	6078      	str	r0, [r7, #4]
 801eedc:	460b      	mov	r3, r1
 801eede:	70fb      	strb	r3, [r7, #3]
 801eee0:	4613      	mov	r3, r2
 801eee2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801eee4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801eee8:	2124      	movs	r1, #36	; 0x24
 801eeea:	2022      	movs	r0, #34	; 0x22
 801eeec:	f7f5 fa60 	bl	80143b0 <pbuf_alloc>
 801eef0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801eef2:	69fb      	ldr	r3, [r7, #28]
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	d04c      	beq.n	801ef92 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801eef8:	69fb      	ldr	r3, [r7, #28]
 801eefa:	895b      	ldrh	r3, [r3, #10]
 801eefc:	2b23      	cmp	r3, #35	; 0x23
 801eefe:	d806      	bhi.n	801ef0e <icmp_send_response+0x3a>
 801ef00:	4b26      	ldr	r3, [pc, #152]	; (801ef9c <icmp_send_response+0xc8>)
 801ef02:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801ef06:	4926      	ldr	r1, [pc, #152]	; (801efa0 <icmp_send_response+0xcc>)
 801ef08:	4826      	ldr	r0, [pc, #152]	; (801efa4 <icmp_send_response+0xd0>)
 801ef0a:	f001 ff5f 	bl	8020dcc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	685b      	ldr	r3, [r3, #4]
 801ef12:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ef14:	69fb      	ldr	r3, [r7, #28]
 801ef16:	685b      	ldr	r3, [r3, #4]
 801ef18:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ef1a:	697b      	ldr	r3, [r7, #20]
 801ef1c:	78fa      	ldrb	r2, [r7, #3]
 801ef1e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801ef20:	697b      	ldr	r3, [r7, #20]
 801ef22:	78ba      	ldrb	r2, [r7, #2]
 801ef24:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801ef26:	697b      	ldr	r3, [r7, #20]
 801ef28:	2200      	movs	r2, #0
 801ef2a:	711a      	strb	r2, [r3, #4]
 801ef2c:	2200      	movs	r2, #0
 801ef2e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801ef30:	697b      	ldr	r3, [r7, #20]
 801ef32:	2200      	movs	r2, #0
 801ef34:	719a      	strb	r2, [r3, #6]
 801ef36:	2200      	movs	r2, #0
 801ef38:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ef3a:	69fb      	ldr	r3, [r7, #28]
 801ef3c:	685b      	ldr	r3, [r3, #4]
 801ef3e:	f103 0008 	add.w	r0, r3, #8
 801ef42:	687b      	ldr	r3, [r7, #4]
 801ef44:	685b      	ldr	r3, [r3, #4]
 801ef46:	221c      	movs	r2, #28
 801ef48:	4619      	mov	r1, r3
 801ef4a:	f001 fe55 	bl	8020bf8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801ef4e:	69bb      	ldr	r3, [r7, #24]
 801ef50:	68db      	ldr	r3, [r3, #12]
 801ef52:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ef54:	f107 030c 	add.w	r3, r7, #12
 801ef58:	4618      	mov	r0, r3
 801ef5a:	f000 f825 	bl	801efa8 <ip4_route>
 801ef5e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ef60:	693b      	ldr	r3, [r7, #16]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d011      	beq.n	801ef8a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ef66:	697b      	ldr	r3, [r7, #20]
 801ef68:	2200      	movs	r2, #0
 801ef6a:	709a      	strb	r2, [r3, #2]
 801ef6c:	2200      	movs	r2, #0
 801ef6e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ef70:	f107 020c 	add.w	r2, r7, #12
 801ef74:	693b      	ldr	r3, [r7, #16]
 801ef76:	9302      	str	r3, [sp, #8]
 801ef78:	2301      	movs	r3, #1
 801ef7a:	9301      	str	r3, [sp, #4]
 801ef7c:	2300      	movs	r3, #0
 801ef7e:	9300      	str	r3, [sp, #0]
 801ef80:	23ff      	movs	r3, #255	; 0xff
 801ef82:	2100      	movs	r1, #0
 801ef84:	69f8      	ldr	r0, [r7, #28]
 801ef86:	f000 f9eb 	bl	801f360 <ip4_output_if>
  }
  pbuf_free(q);
 801ef8a:	69f8      	ldr	r0, [r7, #28]
 801ef8c:	f7f5 fcf4 	bl	8014978 <pbuf_free>
 801ef90:	e000      	b.n	801ef94 <icmp_send_response+0xc0>
    return;
 801ef92:	bf00      	nop
}
 801ef94:	3720      	adds	r7, #32
 801ef96:	46bd      	mov	sp, r7
 801ef98:	bd80      	pop	{r7, pc}
 801ef9a:	bf00      	nop
 801ef9c:	08025e5c 	.word	0x08025e5c
 801efa0:	08025f28 	.word	0x08025f28
 801efa4:	08025ecc 	.word	0x08025ecc

0801efa8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801efa8:	b480      	push	{r7}
 801efaa:	b085      	sub	sp, #20
 801efac:	af00      	add	r7, sp, #0
 801efae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801efb0:	4b33      	ldr	r3, [pc, #204]	; (801f080 <ip4_route+0xd8>)
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	60fb      	str	r3, [r7, #12]
 801efb6:	e036      	b.n	801f026 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801efb8:	68fb      	ldr	r3, [r7, #12]
 801efba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801efbe:	f003 0301 	and.w	r3, r3, #1
 801efc2:	b2db      	uxtb	r3, r3
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d02b      	beq.n	801f020 <ip4_route+0x78>
 801efc8:	68fb      	ldr	r3, [r7, #12]
 801efca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801efce:	089b      	lsrs	r3, r3, #2
 801efd0:	f003 0301 	and.w	r3, r3, #1
 801efd4:	b2db      	uxtb	r3, r3
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d022      	beq.n	801f020 <ip4_route+0x78>
 801efda:	68fb      	ldr	r3, [r7, #12]
 801efdc:	3304      	adds	r3, #4
 801efde:	681b      	ldr	r3, [r3, #0]
 801efe0:	2b00      	cmp	r3, #0
 801efe2:	d01d      	beq.n	801f020 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801efe4:	687b      	ldr	r3, [r7, #4]
 801efe6:	681a      	ldr	r2, [r3, #0]
 801efe8:	68fb      	ldr	r3, [r7, #12]
 801efea:	3304      	adds	r3, #4
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	405a      	eors	r2, r3
 801eff0:	68fb      	ldr	r3, [r7, #12]
 801eff2:	3308      	adds	r3, #8
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	4013      	ands	r3, r2
 801eff8:	2b00      	cmp	r3, #0
 801effa:	d101      	bne.n	801f000 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801effc:	68fb      	ldr	r3, [r7, #12]
 801effe:	e038      	b.n	801f072 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801f000:	68fb      	ldr	r3, [r7, #12]
 801f002:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f006:	f003 0302 	and.w	r3, r3, #2
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	d108      	bne.n	801f020 <ip4_route+0x78>
 801f00e:	687b      	ldr	r3, [r7, #4]
 801f010:	681a      	ldr	r2, [r3, #0]
 801f012:	68fb      	ldr	r3, [r7, #12]
 801f014:	330c      	adds	r3, #12
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	429a      	cmp	r2, r3
 801f01a:	d101      	bne.n	801f020 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801f01c:	68fb      	ldr	r3, [r7, #12]
 801f01e:	e028      	b.n	801f072 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801f020:	68fb      	ldr	r3, [r7, #12]
 801f022:	681b      	ldr	r3, [r3, #0]
 801f024:	60fb      	str	r3, [r7, #12]
 801f026:	68fb      	ldr	r3, [r7, #12]
 801f028:	2b00      	cmp	r3, #0
 801f02a:	d1c5      	bne.n	801efb8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f02c:	4b15      	ldr	r3, [pc, #84]	; (801f084 <ip4_route+0xdc>)
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	2b00      	cmp	r3, #0
 801f032:	d01a      	beq.n	801f06a <ip4_route+0xc2>
 801f034:	4b13      	ldr	r3, [pc, #76]	; (801f084 <ip4_route+0xdc>)
 801f036:	681b      	ldr	r3, [r3, #0]
 801f038:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f03c:	f003 0301 	and.w	r3, r3, #1
 801f040:	2b00      	cmp	r3, #0
 801f042:	d012      	beq.n	801f06a <ip4_route+0xc2>
 801f044:	4b0f      	ldr	r3, [pc, #60]	; (801f084 <ip4_route+0xdc>)
 801f046:	681b      	ldr	r3, [r3, #0]
 801f048:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f04c:	f003 0304 	and.w	r3, r3, #4
 801f050:	2b00      	cmp	r3, #0
 801f052:	d00a      	beq.n	801f06a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f054:	4b0b      	ldr	r3, [pc, #44]	; (801f084 <ip4_route+0xdc>)
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	3304      	adds	r3, #4
 801f05a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	d004      	beq.n	801f06a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	681b      	ldr	r3, [r3, #0]
 801f064:	b2db      	uxtb	r3, r3
 801f066:	2b7f      	cmp	r3, #127	; 0x7f
 801f068:	d101      	bne.n	801f06e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801f06a:	2300      	movs	r3, #0
 801f06c:	e001      	b.n	801f072 <ip4_route+0xca>
  }

  return netif_default;
 801f06e:	4b05      	ldr	r3, [pc, #20]	; (801f084 <ip4_route+0xdc>)
 801f070:	681b      	ldr	r3, [r3, #0]
}
 801f072:	4618      	mov	r0, r3
 801f074:	3714      	adds	r7, #20
 801f076:	46bd      	mov	sp, r7
 801f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f07c:	4770      	bx	lr
 801f07e:	bf00      	nop
 801f080:	20016da0 	.word	0x20016da0
 801f084:	20016da4 	.word	0x20016da4

0801f088 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801f088:	b580      	push	{r7, lr}
 801f08a:	b082      	sub	sp, #8
 801f08c:	af00      	add	r7, sp, #0
 801f08e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f096:	f003 0301 	and.w	r3, r3, #1
 801f09a:	b2db      	uxtb	r3, r3
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d016      	beq.n	801f0ce <ip4_input_accept+0x46>
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	3304      	adds	r3, #4
 801f0a4:	681b      	ldr	r3, [r3, #0]
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	d011      	beq.n	801f0ce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f0aa:	4b0b      	ldr	r3, [pc, #44]	; (801f0d8 <ip4_input_accept+0x50>)
 801f0ac:	695a      	ldr	r2, [r3, #20]
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	3304      	adds	r3, #4
 801f0b2:	681b      	ldr	r3, [r3, #0]
 801f0b4:	429a      	cmp	r2, r3
 801f0b6:	d008      	beq.n	801f0ca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801f0b8:	4b07      	ldr	r3, [pc, #28]	; (801f0d8 <ip4_input_accept+0x50>)
 801f0ba:	695b      	ldr	r3, [r3, #20]
 801f0bc:	6879      	ldr	r1, [r7, #4]
 801f0be:	4618      	mov	r0, r3
 801f0c0:	f000 fa26 	bl	801f510 <ip4_addr_isbroadcast_u32>
 801f0c4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d001      	beq.n	801f0ce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801f0ca:	2301      	movs	r3, #1
 801f0cc:	e000      	b.n	801f0d0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801f0ce:	2300      	movs	r3, #0
}
 801f0d0:	4618      	mov	r0, r3
 801f0d2:	3708      	adds	r7, #8
 801f0d4:	46bd      	mov	sp, r7
 801f0d6:	bd80      	pop	{r7, pc}
 801f0d8:	200135d0 	.word	0x200135d0

0801f0dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801f0dc:	b580      	push	{r7, lr}
 801f0de:	b088      	sub	sp, #32
 801f0e0:	af00      	add	r7, sp, #0
 801f0e2:	6078      	str	r0, [r7, #4]
 801f0e4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801f0e6:	2301      	movs	r3, #1
 801f0e8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	685b      	ldr	r3, [r3, #4]
 801f0ee:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801f0f0:	69fb      	ldr	r3, [r7, #28]
 801f0f2:	781b      	ldrb	r3, [r3, #0]
 801f0f4:	091b      	lsrs	r3, r3, #4
 801f0f6:	b2db      	uxtb	r3, r3
 801f0f8:	2b04      	cmp	r3, #4
 801f0fa:	d004      	beq.n	801f106 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801f0fc:	6878      	ldr	r0, [r7, #4]
 801f0fe:	f7f5 fc3b 	bl	8014978 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801f102:	2300      	movs	r3, #0
 801f104:	e123      	b.n	801f34e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801f106:	69fb      	ldr	r3, [r7, #28]
 801f108:	781b      	ldrb	r3, [r3, #0]
 801f10a:	f003 030f 	and.w	r3, r3, #15
 801f10e:	b2db      	uxtb	r3, r3
 801f110:	009b      	lsls	r3, r3, #2
 801f112:	b2db      	uxtb	r3, r3
 801f114:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801f116:	69fb      	ldr	r3, [r7, #28]
 801f118:	885b      	ldrh	r3, [r3, #2]
 801f11a:	b29b      	uxth	r3, r3
 801f11c:	4618      	mov	r0, r3
 801f11e:	f7f3 f89d 	bl	801225c <lwip_htons>
 801f122:	4603      	mov	r3, r0
 801f124:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	891b      	ldrh	r3, [r3, #8]
 801f12a:	8a3a      	ldrh	r2, [r7, #16]
 801f12c:	429a      	cmp	r2, r3
 801f12e:	d204      	bcs.n	801f13a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801f130:	8a3b      	ldrh	r3, [r7, #16]
 801f132:	4619      	mov	r1, r3
 801f134:	6878      	ldr	r0, [r7, #4]
 801f136:	f7f5 fa99 	bl	801466c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	895b      	ldrh	r3, [r3, #10]
 801f13e:	8a7a      	ldrh	r2, [r7, #18]
 801f140:	429a      	cmp	r2, r3
 801f142:	d807      	bhi.n	801f154 <ip4_input+0x78>
 801f144:	687b      	ldr	r3, [r7, #4]
 801f146:	891b      	ldrh	r3, [r3, #8]
 801f148:	8a3a      	ldrh	r2, [r7, #16]
 801f14a:	429a      	cmp	r2, r3
 801f14c:	d802      	bhi.n	801f154 <ip4_input+0x78>
 801f14e:	8a7b      	ldrh	r3, [r7, #18]
 801f150:	2b13      	cmp	r3, #19
 801f152:	d804      	bhi.n	801f15e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801f154:	6878      	ldr	r0, [r7, #4]
 801f156:	f7f5 fc0f 	bl	8014978 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801f15a:	2300      	movs	r3, #0
 801f15c:	e0f7      	b.n	801f34e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f15e:	69fb      	ldr	r3, [r7, #28]
 801f160:	691b      	ldr	r3, [r3, #16]
 801f162:	4a7d      	ldr	r2, [pc, #500]	; (801f358 <ip4_input+0x27c>)
 801f164:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801f166:	69fb      	ldr	r3, [r7, #28]
 801f168:	68db      	ldr	r3, [r3, #12]
 801f16a:	4a7b      	ldr	r2, [pc, #492]	; (801f358 <ip4_input+0x27c>)
 801f16c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f16e:	4b7a      	ldr	r3, [pc, #488]	; (801f358 <ip4_input+0x27c>)
 801f170:	695b      	ldr	r3, [r3, #20]
 801f172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f176:	2be0      	cmp	r3, #224	; 0xe0
 801f178:	d112      	bne.n	801f1a0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801f17a:	683b      	ldr	r3, [r7, #0]
 801f17c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f180:	f003 0301 	and.w	r3, r3, #1
 801f184:	b2db      	uxtb	r3, r3
 801f186:	2b00      	cmp	r3, #0
 801f188:	d007      	beq.n	801f19a <ip4_input+0xbe>
 801f18a:	683b      	ldr	r3, [r7, #0]
 801f18c:	3304      	adds	r3, #4
 801f18e:	681b      	ldr	r3, [r3, #0]
 801f190:	2b00      	cmp	r3, #0
 801f192:	d002      	beq.n	801f19a <ip4_input+0xbe>
      netif = inp;
 801f194:	683b      	ldr	r3, [r7, #0]
 801f196:	61bb      	str	r3, [r7, #24]
 801f198:	e02a      	b.n	801f1f0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801f19a:	2300      	movs	r3, #0
 801f19c:	61bb      	str	r3, [r7, #24]
 801f19e:	e027      	b.n	801f1f0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801f1a0:	6838      	ldr	r0, [r7, #0]
 801f1a2:	f7ff ff71 	bl	801f088 <ip4_input_accept>
 801f1a6:	4603      	mov	r3, r0
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	d002      	beq.n	801f1b2 <ip4_input+0xd6>
      netif = inp;
 801f1ac:	683b      	ldr	r3, [r7, #0]
 801f1ae:	61bb      	str	r3, [r7, #24]
 801f1b0:	e01e      	b.n	801f1f0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801f1b2:	2300      	movs	r3, #0
 801f1b4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801f1b6:	4b68      	ldr	r3, [pc, #416]	; (801f358 <ip4_input+0x27c>)
 801f1b8:	695b      	ldr	r3, [r3, #20]
 801f1ba:	b2db      	uxtb	r3, r3
 801f1bc:	2b7f      	cmp	r3, #127	; 0x7f
 801f1be:	d017      	beq.n	801f1f0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801f1c0:	4b66      	ldr	r3, [pc, #408]	; (801f35c <ip4_input+0x280>)
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	61bb      	str	r3, [r7, #24]
 801f1c6:	e00e      	b.n	801f1e6 <ip4_input+0x10a>
          if (netif == inp) {
 801f1c8:	69ba      	ldr	r2, [r7, #24]
 801f1ca:	683b      	ldr	r3, [r7, #0]
 801f1cc:	429a      	cmp	r2, r3
 801f1ce:	d006      	beq.n	801f1de <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801f1d0:	69b8      	ldr	r0, [r7, #24]
 801f1d2:	f7ff ff59 	bl	801f088 <ip4_input_accept>
 801f1d6:	4603      	mov	r3, r0
 801f1d8:	2b00      	cmp	r3, #0
 801f1da:	d108      	bne.n	801f1ee <ip4_input+0x112>
 801f1dc:	e000      	b.n	801f1e0 <ip4_input+0x104>
            continue;
 801f1de:	bf00      	nop
        NETIF_FOREACH(netif) {
 801f1e0:	69bb      	ldr	r3, [r7, #24]
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	61bb      	str	r3, [r7, #24]
 801f1e6:	69bb      	ldr	r3, [r7, #24]
 801f1e8:	2b00      	cmp	r3, #0
 801f1ea:	d1ed      	bne.n	801f1c8 <ip4_input+0xec>
 801f1ec:	e000      	b.n	801f1f0 <ip4_input+0x114>
            break;
 801f1ee:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801f1f0:	69bb      	ldr	r3, [r7, #24]
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	d111      	bne.n	801f21a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801f1f6:	69fb      	ldr	r3, [r7, #28]
 801f1f8:	7a5b      	ldrb	r3, [r3, #9]
 801f1fa:	2b11      	cmp	r3, #17
 801f1fc:	d10d      	bne.n	801f21a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801f1fe:	8a7b      	ldrh	r3, [r7, #18]
 801f200:	69fa      	ldr	r2, [r7, #28]
 801f202:	4413      	add	r3, r2
 801f204:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801f206:	68fb      	ldr	r3, [r7, #12]
 801f208:	885b      	ldrh	r3, [r3, #2]
 801f20a:	b29b      	uxth	r3, r3
 801f20c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801f210:	d103      	bne.n	801f21a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801f212:	683b      	ldr	r3, [r7, #0]
 801f214:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801f216:	2300      	movs	r3, #0
 801f218:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801f21a:	697b      	ldr	r3, [r7, #20]
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d017      	beq.n	801f250 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f220:	4b4d      	ldr	r3, [pc, #308]	; (801f358 <ip4_input+0x27c>)
 801f222:	691b      	ldr	r3, [r3, #16]
 801f224:	2b00      	cmp	r3, #0
 801f226:	d013      	beq.n	801f250 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f228:	4b4b      	ldr	r3, [pc, #300]	; (801f358 <ip4_input+0x27c>)
 801f22a:	691b      	ldr	r3, [r3, #16]
 801f22c:	6839      	ldr	r1, [r7, #0]
 801f22e:	4618      	mov	r0, r3
 801f230:	f000 f96e 	bl	801f510 <ip4_addr_isbroadcast_u32>
 801f234:	4603      	mov	r3, r0
 801f236:	2b00      	cmp	r3, #0
 801f238:	d105      	bne.n	801f246 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801f23a:	4b47      	ldr	r3, [pc, #284]	; (801f358 <ip4_input+0x27c>)
 801f23c:	691b      	ldr	r3, [r3, #16]
 801f23e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f242:	2be0      	cmp	r3, #224	; 0xe0
 801f244:	d104      	bne.n	801f250 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801f246:	6878      	ldr	r0, [r7, #4]
 801f248:	f7f5 fb96 	bl	8014978 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801f24c:	2300      	movs	r3, #0
 801f24e:	e07e      	b.n	801f34e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801f250:	69bb      	ldr	r3, [r7, #24]
 801f252:	2b00      	cmp	r3, #0
 801f254:	d104      	bne.n	801f260 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801f256:	6878      	ldr	r0, [r7, #4]
 801f258:	f7f5 fb8e 	bl	8014978 <pbuf_free>
    return ERR_OK;
 801f25c:	2300      	movs	r3, #0
 801f25e:	e076      	b.n	801f34e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801f260:	69fb      	ldr	r3, [r7, #28]
 801f262:	88db      	ldrh	r3, [r3, #6]
 801f264:	b29b      	uxth	r3, r3
 801f266:	461a      	mov	r2, r3
 801f268:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801f26c:	4013      	ands	r3, r2
 801f26e:	2b00      	cmp	r3, #0
 801f270:	d00b      	beq.n	801f28a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801f272:	6878      	ldr	r0, [r7, #4]
 801f274:	f000 fdbc 	bl	801fdf0 <ip4_reass>
 801f278:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	d101      	bne.n	801f284 <ip4_input+0x1a8>
      return ERR_OK;
 801f280:	2300      	movs	r3, #0
 801f282:	e064      	b.n	801f34e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	685b      	ldr	r3, [r3, #4]
 801f288:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801f28a:	4a33      	ldr	r2, [pc, #204]	; (801f358 <ip4_input+0x27c>)
 801f28c:	69bb      	ldr	r3, [r7, #24]
 801f28e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801f290:	4a31      	ldr	r2, [pc, #196]	; (801f358 <ip4_input+0x27c>)
 801f292:	683b      	ldr	r3, [r7, #0]
 801f294:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801f296:	4a30      	ldr	r2, [pc, #192]	; (801f358 <ip4_input+0x27c>)
 801f298:	69fb      	ldr	r3, [r7, #28]
 801f29a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801f29c:	69fb      	ldr	r3, [r7, #28]
 801f29e:	781b      	ldrb	r3, [r3, #0]
 801f2a0:	f003 030f 	and.w	r3, r3, #15
 801f2a4:	b2db      	uxtb	r3, r3
 801f2a6:	009b      	lsls	r3, r3, #2
 801f2a8:	b2db      	uxtb	r3, r3
 801f2aa:	b29a      	uxth	r2, r3
 801f2ac:	4b2a      	ldr	r3, [pc, #168]	; (801f358 <ip4_input+0x27c>)
 801f2ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801f2b0:	8a7b      	ldrh	r3, [r7, #18]
 801f2b2:	4619      	mov	r1, r3
 801f2b4:	6878      	ldr	r0, [r7, #4]
 801f2b6:	f7f5 fad9 	bl	801486c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801f2ba:	69fb      	ldr	r3, [r7, #28]
 801f2bc:	7a5b      	ldrb	r3, [r3, #9]
 801f2be:	2b11      	cmp	r3, #17
 801f2c0:	d006      	beq.n	801f2d0 <ip4_input+0x1f4>
 801f2c2:	2b11      	cmp	r3, #17
 801f2c4:	dc13      	bgt.n	801f2ee <ip4_input+0x212>
 801f2c6:	2b01      	cmp	r3, #1
 801f2c8:	d00c      	beq.n	801f2e4 <ip4_input+0x208>
 801f2ca:	2b06      	cmp	r3, #6
 801f2cc:	d005      	beq.n	801f2da <ip4_input+0x1fe>
 801f2ce:	e00e      	b.n	801f2ee <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801f2d0:	6839      	ldr	r1, [r7, #0]
 801f2d2:	6878      	ldr	r0, [r7, #4]
 801f2d4:	f7fc f9d6 	bl	801b684 <udp_input>
        break;
 801f2d8:	e026      	b.n	801f328 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801f2da:	6839      	ldr	r1, [r7, #0]
 801f2dc:	6878      	ldr	r0, [r7, #4]
 801f2de:	f7f7 fd93 	bl	8016e08 <tcp_input>
        break;
 801f2e2:	e021      	b.n	801f328 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801f2e4:	6839      	ldr	r1, [r7, #0]
 801f2e6:	6878      	ldr	r0, [r7, #4]
 801f2e8:	f7ff fcd0 	bl	801ec8c <icmp_input>
        break;
 801f2ec:	e01c      	b.n	801f328 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f2ee:	4b1a      	ldr	r3, [pc, #104]	; (801f358 <ip4_input+0x27c>)
 801f2f0:	695b      	ldr	r3, [r3, #20]
 801f2f2:	69b9      	ldr	r1, [r7, #24]
 801f2f4:	4618      	mov	r0, r3
 801f2f6:	f000 f90b 	bl	801f510 <ip4_addr_isbroadcast_u32>
 801f2fa:	4603      	mov	r3, r0
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	d10f      	bne.n	801f320 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f300:	4b15      	ldr	r3, [pc, #84]	; (801f358 <ip4_input+0x27c>)
 801f302:	695b      	ldr	r3, [r3, #20]
 801f304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f308:	2be0      	cmp	r3, #224	; 0xe0
 801f30a:	d009      	beq.n	801f320 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801f30c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801f310:	4619      	mov	r1, r3
 801f312:	6878      	ldr	r0, [r7, #4]
 801f314:	f7f5 fb1d 	bl	8014952 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801f318:	2102      	movs	r1, #2
 801f31a:	6878      	ldr	r0, [r7, #4]
 801f31c:	f7ff fdba 	bl	801ee94 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801f320:	6878      	ldr	r0, [r7, #4]
 801f322:	f7f5 fb29 	bl	8014978 <pbuf_free>
        break;
 801f326:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801f328:	4b0b      	ldr	r3, [pc, #44]	; (801f358 <ip4_input+0x27c>)
 801f32a:	2200      	movs	r2, #0
 801f32c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801f32e:	4b0a      	ldr	r3, [pc, #40]	; (801f358 <ip4_input+0x27c>)
 801f330:	2200      	movs	r2, #0
 801f332:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801f334:	4b08      	ldr	r3, [pc, #32]	; (801f358 <ip4_input+0x27c>)
 801f336:	2200      	movs	r2, #0
 801f338:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801f33a:	4b07      	ldr	r3, [pc, #28]	; (801f358 <ip4_input+0x27c>)
 801f33c:	2200      	movs	r2, #0
 801f33e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801f340:	4b05      	ldr	r3, [pc, #20]	; (801f358 <ip4_input+0x27c>)
 801f342:	2200      	movs	r2, #0
 801f344:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801f346:	4b04      	ldr	r3, [pc, #16]	; (801f358 <ip4_input+0x27c>)
 801f348:	2200      	movs	r2, #0
 801f34a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801f34c:	2300      	movs	r3, #0
}
 801f34e:	4618      	mov	r0, r3
 801f350:	3720      	adds	r7, #32
 801f352:	46bd      	mov	sp, r7
 801f354:	bd80      	pop	{r7, pc}
 801f356:	bf00      	nop
 801f358:	200135d0 	.word	0x200135d0
 801f35c:	20016da0 	.word	0x20016da0

0801f360 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801f360:	b580      	push	{r7, lr}
 801f362:	b08a      	sub	sp, #40	; 0x28
 801f364:	af04      	add	r7, sp, #16
 801f366:	60f8      	str	r0, [r7, #12]
 801f368:	60b9      	str	r1, [r7, #8]
 801f36a:	607a      	str	r2, [r7, #4]
 801f36c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801f36e:	68bb      	ldr	r3, [r7, #8]
 801f370:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801f372:	687b      	ldr	r3, [r7, #4]
 801f374:	2b00      	cmp	r3, #0
 801f376:	d009      	beq.n	801f38c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801f378:	68bb      	ldr	r3, [r7, #8]
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d003      	beq.n	801f386 <ip4_output_if+0x26>
 801f37e:	68bb      	ldr	r3, [r7, #8]
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	2b00      	cmp	r3, #0
 801f384:	d102      	bne.n	801f38c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801f386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f388:	3304      	adds	r3, #4
 801f38a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801f38c:	78fa      	ldrb	r2, [r7, #3]
 801f38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f390:	9302      	str	r3, [sp, #8]
 801f392:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f396:	9301      	str	r3, [sp, #4]
 801f398:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f39c:	9300      	str	r3, [sp, #0]
 801f39e:	4613      	mov	r3, r2
 801f3a0:	687a      	ldr	r2, [r7, #4]
 801f3a2:	6979      	ldr	r1, [r7, #20]
 801f3a4:	68f8      	ldr	r0, [r7, #12]
 801f3a6:	f000 f805 	bl	801f3b4 <ip4_output_if_src>
 801f3aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801f3ac:	4618      	mov	r0, r3
 801f3ae:	3718      	adds	r7, #24
 801f3b0:	46bd      	mov	sp, r7
 801f3b2:	bd80      	pop	{r7, pc}

0801f3b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801f3b4:	b580      	push	{r7, lr}
 801f3b6:	b088      	sub	sp, #32
 801f3b8:	af00      	add	r7, sp, #0
 801f3ba:	60f8      	str	r0, [r7, #12]
 801f3bc:	60b9      	str	r1, [r7, #8]
 801f3be:	607a      	str	r2, [r7, #4]
 801f3c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f3c2:	68fb      	ldr	r3, [r7, #12]
 801f3c4:	7b9b      	ldrb	r3, [r3, #14]
 801f3c6:	2b01      	cmp	r3, #1
 801f3c8:	d006      	beq.n	801f3d8 <ip4_output_if_src+0x24>
 801f3ca:	4b4b      	ldr	r3, [pc, #300]	; (801f4f8 <ip4_output_if_src+0x144>)
 801f3cc:	f44f 7255 	mov.w	r2, #852	; 0x354
 801f3d0:	494a      	ldr	r1, [pc, #296]	; (801f4fc <ip4_output_if_src+0x148>)
 801f3d2:	484b      	ldr	r0, [pc, #300]	; (801f500 <ip4_output_if_src+0x14c>)
 801f3d4:	f001 fcfa 	bl	8020dcc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	d060      	beq.n	801f4a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801f3de:	2314      	movs	r3, #20
 801f3e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801f3e2:	2114      	movs	r1, #20
 801f3e4:	68f8      	ldr	r0, [r7, #12]
 801f3e6:	f7f5 fa31 	bl	801484c <pbuf_add_header>
 801f3ea:	4603      	mov	r3, r0
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d002      	beq.n	801f3f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f3f0:	f06f 0301 	mvn.w	r3, #1
 801f3f4:	e07c      	b.n	801f4f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801f3f6:	68fb      	ldr	r3, [r7, #12]
 801f3f8:	685b      	ldr	r3, [r3, #4]
 801f3fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801f3fc:	68fb      	ldr	r3, [r7, #12]
 801f3fe:	895b      	ldrh	r3, [r3, #10]
 801f400:	2b13      	cmp	r3, #19
 801f402:	d806      	bhi.n	801f412 <ip4_output_if_src+0x5e>
 801f404:	4b3c      	ldr	r3, [pc, #240]	; (801f4f8 <ip4_output_if_src+0x144>)
 801f406:	f44f 7262 	mov.w	r2, #904	; 0x388
 801f40a:	493e      	ldr	r1, [pc, #248]	; (801f504 <ip4_output_if_src+0x150>)
 801f40c:	483c      	ldr	r0, [pc, #240]	; (801f500 <ip4_output_if_src+0x14c>)
 801f40e:	f001 fcdd 	bl	8020dcc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801f412:	69fb      	ldr	r3, [r7, #28]
 801f414:	78fa      	ldrb	r2, [r7, #3]
 801f416:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801f418:	69fb      	ldr	r3, [r7, #28]
 801f41a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801f41e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801f420:	687b      	ldr	r3, [r7, #4]
 801f422:	681a      	ldr	r2, [r3, #0]
 801f424:	69fb      	ldr	r3, [r7, #28]
 801f426:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801f428:	8b7b      	ldrh	r3, [r7, #26]
 801f42a:	089b      	lsrs	r3, r3, #2
 801f42c:	b29b      	uxth	r3, r3
 801f42e:	b2db      	uxtb	r3, r3
 801f430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f434:	b2da      	uxtb	r2, r3
 801f436:	69fb      	ldr	r3, [r7, #28]
 801f438:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801f43a:	69fb      	ldr	r3, [r7, #28]
 801f43c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801f440:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f442:	68fb      	ldr	r3, [r7, #12]
 801f444:	891b      	ldrh	r3, [r3, #8]
 801f446:	4618      	mov	r0, r3
 801f448:	f7f2 ff08 	bl	801225c <lwip_htons>
 801f44c:	4603      	mov	r3, r0
 801f44e:	461a      	mov	r2, r3
 801f450:	69fb      	ldr	r3, [r7, #28]
 801f452:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801f454:	69fb      	ldr	r3, [r7, #28]
 801f456:	2200      	movs	r2, #0
 801f458:	719a      	strb	r2, [r3, #6]
 801f45a:	2200      	movs	r2, #0
 801f45c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f45e:	4b2a      	ldr	r3, [pc, #168]	; (801f508 <ip4_output_if_src+0x154>)
 801f460:	881b      	ldrh	r3, [r3, #0]
 801f462:	4618      	mov	r0, r3
 801f464:	f7f2 fefa 	bl	801225c <lwip_htons>
 801f468:	4603      	mov	r3, r0
 801f46a:	461a      	mov	r2, r3
 801f46c:	69fb      	ldr	r3, [r7, #28]
 801f46e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801f470:	4b25      	ldr	r3, [pc, #148]	; (801f508 <ip4_output_if_src+0x154>)
 801f472:	881b      	ldrh	r3, [r3, #0]
 801f474:	3301      	adds	r3, #1
 801f476:	b29a      	uxth	r2, r3
 801f478:	4b23      	ldr	r3, [pc, #140]	; (801f508 <ip4_output_if_src+0x154>)
 801f47a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801f47c:	68bb      	ldr	r3, [r7, #8]
 801f47e:	2b00      	cmp	r3, #0
 801f480:	d104      	bne.n	801f48c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801f482:	4b22      	ldr	r3, [pc, #136]	; (801f50c <ip4_output_if_src+0x158>)
 801f484:	681a      	ldr	r2, [r3, #0]
 801f486:	69fb      	ldr	r3, [r7, #28]
 801f488:	60da      	str	r2, [r3, #12]
 801f48a:	e003      	b.n	801f494 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801f48c:	68bb      	ldr	r3, [r7, #8]
 801f48e:	681a      	ldr	r2, [r3, #0]
 801f490:	69fb      	ldr	r3, [r7, #28]
 801f492:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801f494:	69fb      	ldr	r3, [r7, #28]
 801f496:	2200      	movs	r2, #0
 801f498:	729a      	strb	r2, [r3, #10]
 801f49a:	2200      	movs	r2, #0
 801f49c:	72da      	strb	r2, [r3, #11]
 801f49e:	e00f      	b.n	801f4c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801f4a0:	68fb      	ldr	r3, [r7, #12]
 801f4a2:	895b      	ldrh	r3, [r3, #10]
 801f4a4:	2b13      	cmp	r3, #19
 801f4a6:	d802      	bhi.n	801f4ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f4a8:	f06f 0301 	mvn.w	r3, #1
 801f4ac:	e020      	b.n	801f4f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801f4ae:	68fb      	ldr	r3, [r7, #12]
 801f4b0:	685b      	ldr	r3, [r3, #4]
 801f4b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801f4b4:	69fb      	ldr	r3, [r7, #28]
 801f4b6:	691b      	ldr	r3, [r3, #16]
 801f4b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801f4ba:	f107 0314 	add.w	r3, r7, #20
 801f4be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801f4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f4c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d00c      	beq.n	801f4e2 <ip4_output_if_src+0x12e>
 801f4c8:	68fb      	ldr	r3, [r7, #12]
 801f4ca:	891a      	ldrh	r2, [r3, #8]
 801f4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f4ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f4d0:	429a      	cmp	r2, r3
 801f4d2:	d906      	bls.n	801f4e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801f4d4:	687a      	ldr	r2, [r7, #4]
 801f4d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f4d8:	68f8      	ldr	r0, [r7, #12]
 801f4da:	f000 fe77 	bl	80201cc <ip4_frag>
 801f4de:	4603      	mov	r3, r0
 801f4e0:	e006      	b.n	801f4f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f4e4:	695b      	ldr	r3, [r3, #20]
 801f4e6:	687a      	ldr	r2, [r7, #4]
 801f4e8:	68f9      	ldr	r1, [r7, #12]
 801f4ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f4ec:	4798      	blx	r3
 801f4ee:	4603      	mov	r3, r0
}
 801f4f0:	4618      	mov	r0, r3
 801f4f2:	3720      	adds	r7, #32
 801f4f4:	46bd      	mov	sp, r7
 801f4f6:	bd80      	pop	{r7, pc}
 801f4f8:	08025f54 	.word	0x08025f54
 801f4fc:	08025f88 	.word	0x08025f88
 801f500:	08025f94 	.word	0x08025f94
 801f504:	08025fbc 	.word	0x08025fbc
 801f508:	2000582a 	.word	0x2000582a
 801f50c:	08026684 	.word	0x08026684

0801f510 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801f510:	b480      	push	{r7}
 801f512:	b085      	sub	sp, #20
 801f514:	af00      	add	r7, sp, #0
 801f516:	6078      	str	r0, [r7, #4]
 801f518:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801f51e:	687b      	ldr	r3, [r7, #4]
 801f520:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f524:	d002      	beq.n	801f52c <ip4_addr_isbroadcast_u32+0x1c>
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	2b00      	cmp	r3, #0
 801f52a:	d101      	bne.n	801f530 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801f52c:	2301      	movs	r3, #1
 801f52e:	e02a      	b.n	801f586 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801f530:	683b      	ldr	r3, [r7, #0]
 801f532:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f536:	f003 0302 	and.w	r3, r3, #2
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	d101      	bne.n	801f542 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801f53e:	2300      	movs	r3, #0
 801f540:	e021      	b.n	801f586 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801f542:	683b      	ldr	r3, [r7, #0]
 801f544:	3304      	adds	r3, #4
 801f546:	681b      	ldr	r3, [r3, #0]
 801f548:	687a      	ldr	r2, [r7, #4]
 801f54a:	429a      	cmp	r2, r3
 801f54c:	d101      	bne.n	801f552 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801f54e:	2300      	movs	r3, #0
 801f550:	e019      	b.n	801f586 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801f552:	68fa      	ldr	r2, [r7, #12]
 801f554:	683b      	ldr	r3, [r7, #0]
 801f556:	3304      	adds	r3, #4
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	405a      	eors	r2, r3
 801f55c:	683b      	ldr	r3, [r7, #0]
 801f55e:	3308      	adds	r3, #8
 801f560:	681b      	ldr	r3, [r3, #0]
 801f562:	4013      	ands	r3, r2
 801f564:	2b00      	cmp	r3, #0
 801f566:	d10d      	bne.n	801f584 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f568:	683b      	ldr	r3, [r7, #0]
 801f56a:	3308      	adds	r3, #8
 801f56c:	681b      	ldr	r3, [r3, #0]
 801f56e:	43da      	mvns	r2, r3
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801f574:	683b      	ldr	r3, [r7, #0]
 801f576:	3308      	adds	r3, #8
 801f578:	681b      	ldr	r3, [r3, #0]
 801f57a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f57c:	429a      	cmp	r2, r3
 801f57e:	d101      	bne.n	801f584 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801f580:	2301      	movs	r3, #1
 801f582:	e000      	b.n	801f586 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801f584:	2300      	movs	r3, #0
  }
}
 801f586:	4618      	mov	r0, r3
 801f588:	3714      	adds	r7, #20
 801f58a:	46bd      	mov	sp, r7
 801f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f590:	4770      	bx	lr
	...

0801f594 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801f594:	b580      	push	{r7, lr}
 801f596:	b08a      	sub	sp, #40	; 0x28
 801f598:	af00      	add	r7, sp, #0
 801f59a:	6078      	str	r0, [r7, #4]
 801f59c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801f59e:	f107 030c 	add.w	r3, r7, #12
 801f5a2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	781b      	ldrb	r3, [r3, #0]
 801f5a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801f5ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f5b0:	3301      	adds	r3, #1
 801f5b2:	4a89      	ldr	r2, [pc, #548]	; (801f7d8 <ip4addr_aton+0x244>)
 801f5b4:	4413      	add	r3, r2
 801f5b6:	781b      	ldrb	r3, [r3, #0]
 801f5b8:	f003 0304 	and.w	r3, r3, #4
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	d101      	bne.n	801f5c4 <ip4addr_aton+0x30>
      return 0;
 801f5c0:	2300      	movs	r3, #0
 801f5c2:	e105      	b.n	801f7d0 <ip4addr_aton+0x23c>
    }
    val = 0;
 801f5c4:	2300      	movs	r3, #0
 801f5c6:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801f5c8:	230a      	movs	r3, #10
 801f5ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801f5ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f5d2:	2b30      	cmp	r3, #48	; 0x30
 801f5d4:	d11c      	bne.n	801f610 <ip4addr_aton+0x7c>
      c = *++cp;
 801f5d6:	687b      	ldr	r3, [r7, #4]
 801f5d8:	3301      	adds	r3, #1
 801f5da:	607b      	str	r3, [r7, #4]
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	781b      	ldrb	r3, [r3, #0]
 801f5e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801f5e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f5e8:	2b78      	cmp	r3, #120	; 0x78
 801f5ea:	d003      	beq.n	801f5f4 <ip4addr_aton+0x60>
 801f5ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f5f0:	2b58      	cmp	r3, #88	; 0x58
 801f5f2:	d10a      	bne.n	801f60a <ip4addr_aton+0x76>
        base = 16;
 801f5f4:	2310      	movs	r3, #16
 801f5f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	3301      	adds	r3, #1
 801f5fe:	607b      	str	r3, [r7, #4]
 801f600:	687b      	ldr	r3, [r7, #4]
 801f602:	781b      	ldrb	r3, [r3, #0]
 801f604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801f608:	e002      	b.n	801f610 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801f60a:	2308      	movs	r3, #8
 801f60c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801f610:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f614:	3301      	adds	r3, #1
 801f616:	4a70      	ldr	r2, [pc, #448]	; (801f7d8 <ip4addr_aton+0x244>)
 801f618:	4413      	add	r3, r2
 801f61a:	781b      	ldrb	r3, [r3, #0]
 801f61c:	f003 0304 	and.w	r3, r3, #4
 801f620:	2b00      	cmp	r3, #0
 801f622:	d011      	beq.n	801f648 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801f624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f62a:	fb02 f203 	mul.w	r2, r2, r3
 801f62e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f632:	4413      	add	r3, r2
 801f634:	3b30      	subs	r3, #48	; 0x30
 801f636:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	3301      	adds	r3, #1
 801f63c:	607b      	str	r3, [r7, #4]
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	781b      	ldrb	r3, [r3, #0]
 801f642:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801f646:	e7e3      	b.n	801f610 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801f648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f64c:	2b10      	cmp	r3, #16
 801f64e:	d127      	bne.n	801f6a0 <ip4addr_aton+0x10c>
 801f650:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f654:	3301      	adds	r3, #1
 801f656:	4a60      	ldr	r2, [pc, #384]	; (801f7d8 <ip4addr_aton+0x244>)
 801f658:	4413      	add	r3, r2
 801f65a:	781b      	ldrb	r3, [r3, #0]
 801f65c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801f660:	2b00      	cmp	r3, #0
 801f662:	d01d      	beq.n	801f6a0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801f664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f666:	011b      	lsls	r3, r3, #4
 801f668:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801f66c:	f102 010a 	add.w	r1, r2, #10
 801f670:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801f674:	3201      	adds	r2, #1
 801f676:	4858      	ldr	r0, [pc, #352]	; (801f7d8 <ip4addr_aton+0x244>)
 801f678:	4402      	add	r2, r0
 801f67a:	7812      	ldrb	r2, [r2, #0]
 801f67c:	f002 0203 	and.w	r2, r2, #3
 801f680:	2a02      	cmp	r2, #2
 801f682:	d101      	bne.n	801f688 <ip4addr_aton+0xf4>
 801f684:	2261      	movs	r2, #97	; 0x61
 801f686:	e000      	b.n	801f68a <ip4addr_aton+0xf6>
 801f688:	2241      	movs	r2, #65	; 0x41
 801f68a:	1a8a      	subs	r2, r1, r2
 801f68c:	4313      	orrs	r3, r2
 801f68e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801f690:	687b      	ldr	r3, [r7, #4]
 801f692:	3301      	adds	r3, #1
 801f694:	607b      	str	r3, [r7, #4]
 801f696:	687b      	ldr	r3, [r7, #4]
 801f698:	781b      	ldrb	r3, [r3, #0]
 801f69a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801f69e:	e7b7      	b.n	801f610 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801f6a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f6a4:	2b2e      	cmp	r3, #46	; 0x2e
 801f6a6:	d114      	bne.n	801f6d2 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801f6a8:	f107 030c 	add.w	r3, r7, #12
 801f6ac:	330c      	adds	r3, #12
 801f6ae:	69fa      	ldr	r2, [r7, #28]
 801f6b0:	429a      	cmp	r2, r3
 801f6b2:	d301      	bcc.n	801f6b8 <ip4addr_aton+0x124>
        return 0;
 801f6b4:	2300      	movs	r3, #0
 801f6b6:	e08b      	b.n	801f7d0 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801f6b8:	69fb      	ldr	r3, [r7, #28]
 801f6ba:	1d1a      	adds	r2, r3, #4
 801f6bc:	61fa      	str	r2, [r7, #28]
 801f6be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f6c0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	3301      	adds	r3, #1
 801f6c6:	607b      	str	r3, [r7, #4]
 801f6c8:	687b      	ldr	r3, [r7, #4]
 801f6ca:	781b      	ldrb	r3, [r3, #0]
 801f6cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801f6d0:	e76c      	b.n	801f5ac <ip4addr_aton+0x18>
    } else {
      break;
 801f6d2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801f6d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f6d8:	2b00      	cmp	r3, #0
 801f6da:	d00b      	beq.n	801f6f4 <ip4addr_aton+0x160>
 801f6dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f6e0:	3301      	adds	r3, #1
 801f6e2:	4a3d      	ldr	r2, [pc, #244]	; (801f7d8 <ip4addr_aton+0x244>)
 801f6e4:	4413      	add	r3, r2
 801f6e6:	781b      	ldrb	r3, [r3, #0]
 801f6e8:	f003 0308 	and.w	r3, r3, #8
 801f6ec:	2b00      	cmp	r3, #0
 801f6ee:	d101      	bne.n	801f6f4 <ip4addr_aton+0x160>
    return 0;
 801f6f0:	2300      	movs	r3, #0
 801f6f2:	e06d      	b.n	801f7d0 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801f6f4:	f107 030c 	add.w	r3, r7, #12
 801f6f8:	69fa      	ldr	r2, [r7, #28]
 801f6fa:	1ad3      	subs	r3, r2, r3
 801f6fc:	109b      	asrs	r3, r3, #2
 801f6fe:	3301      	adds	r3, #1
 801f700:	2b04      	cmp	r3, #4
 801f702:	d853      	bhi.n	801f7ac <ip4addr_aton+0x218>
 801f704:	a201      	add	r2, pc, #4	; (adr r2, 801f70c <ip4addr_aton+0x178>)
 801f706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f70a:	bf00      	nop
 801f70c:	0801f721 	.word	0x0801f721
 801f710:	0801f7bb 	.word	0x0801f7bb
 801f714:	0801f725 	.word	0x0801f725
 801f718:	0801f747 	.word	0x0801f747
 801f71c:	0801f775 	.word	0x0801f775

    case 0:
      return 0;       /* initial nondigit */
 801f720:	2300      	movs	r3, #0
 801f722:	e055      	b.n	801f7d0 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801f724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801f72a:	d301      	bcc.n	801f730 <ip4addr_aton+0x19c>
        return 0;
 801f72c:	2300      	movs	r3, #0
 801f72e:	e04f      	b.n	801f7d0 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801f730:	68fb      	ldr	r3, [r7, #12]
 801f732:	2bff      	cmp	r3, #255	; 0xff
 801f734:	d901      	bls.n	801f73a <ip4addr_aton+0x1a6>
        return 0;
 801f736:	2300      	movs	r3, #0
 801f738:	e04a      	b.n	801f7d0 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801f73a:	68fb      	ldr	r3, [r7, #12]
 801f73c:	061b      	lsls	r3, r3, #24
 801f73e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f740:	4313      	orrs	r3, r2
 801f742:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801f744:	e03a      	b.n	801f7bc <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801f746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f74c:	d301      	bcc.n	801f752 <ip4addr_aton+0x1be>
        return 0;
 801f74e:	2300      	movs	r3, #0
 801f750:	e03e      	b.n	801f7d0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801f752:	68fb      	ldr	r3, [r7, #12]
 801f754:	2bff      	cmp	r3, #255	; 0xff
 801f756:	d802      	bhi.n	801f75e <ip4addr_aton+0x1ca>
 801f758:	693b      	ldr	r3, [r7, #16]
 801f75a:	2bff      	cmp	r3, #255	; 0xff
 801f75c:	d901      	bls.n	801f762 <ip4addr_aton+0x1ce>
        return 0;
 801f75e:	2300      	movs	r3, #0
 801f760:	e036      	b.n	801f7d0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801f762:	68fb      	ldr	r3, [r7, #12]
 801f764:	061a      	lsls	r2, r3, #24
 801f766:	693b      	ldr	r3, [r7, #16]
 801f768:	041b      	lsls	r3, r3, #16
 801f76a:	4313      	orrs	r3, r2
 801f76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f76e:	4313      	orrs	r3, r2
 801f770:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801f772:	e023      	b.n	801f7bc <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801f774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f776:	2bff      	cmp	r3, #255	; 0xff
 801f778:	d901      	bls.n	801f77e <ip4addr_aton+0x1ea>
        return 0;
 801f77a:	2300      	movs	r3, #0
 801f77c:	e028      	b.n	801f7d0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801f77e:	68fb      	ldr	r3, [r7, #12]
 801f780:	2bff      	cmp	r3, #255	; 0xff
 801f782:	d805      	bhi.n	801f790 <ip4addr_aton+0x1fc>
 801f784:	693b      	ldr	r3, [r7, #16]
 801f786:	2bff      	cmp	r3, #255	; 0xff
 801f788:	d802      	bhi.n	801f790 <ip4addr_aton+0x1fc>
 801f78a:	697b      	ldr	r3, [r7, #20]
 801f78c:	2bff      	cmp	r3, #255	; 0xff
 801f78e:	d901      	bls.n	801f794 <ip4addr_aton+0x200>
        return 0;
 801f790:	2300      	movs	r3, #0
 801f792:	e01d      	b.n	801f7d0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801f794:	68fb      	ldr	r3, [r7, #12]
 801f796:	061a      	lsls	r2, r3, #24
 801f798:	693b      	ldr	r3, [r7, #16]
 801f79a:	041b      	lsls	r3, r3, #16
 801f79c:	431a      	orrs	r2, r3
 801f79e:	697b      	ldr	r3, [r7, #20]
 801f7a0:	021b      	lsls	r3, r3, #8
 801f7a2:	4313      	orrs	r3, r2
 801f7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f7a6:	4313      	orrs	r3, r2
 801f7a8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801f7aa:	e007      	b.n	801f7bc <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801f7ac:	4b0b      	ldr	r3, [pc, #44]	; (801f7dc <ip4addr_aton+0x248>)
 801f7ae:	22f9      	movs	r2, #249	; 0xf9
 801f7b0:	490b      	ldr	r1, [pc, #44]	; (801f7e0 <ip4addr_aton+0x24c>)
 801f7b2:	480c      	ldr	r0, [pc, #48]	; (801f7e4 <ip4addr_aton+0x250>)
 801f7b4:	f001 fb0a 	bl	8020dcc <iprintf>
      break;
 801f7b8:	e000      	b.n	801f7bc <ip4addr_aton+0x228>
      break;
 801f7ba:	bf00      	nop
  }
  if (addr) {
 801f7bc:	683b      	ldr	r3, [r7, #0]
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	d005      	beq.n	801f7ce <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801f7c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f7c4:	f7f2 fd5f 	bl	8012286 <lwip_htonl>
 801f7c8:	4602      	mov	r2, r0
 801f7ca:	683b      	ldr	r3, [r7, #0]
 801f7cc:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801f7ce:	2301      	movs	r3, #1
}
 801f7d0:	4618      	mov	r0, r3
 801f7d2:	3728      	adds	r7, #40	; 0x28
 801f7d4:	46bd      	mov	sp, r7
 801f7d6:	bd80      	pop	{r7, pc}
 801f7d8:	0802669a 	.word	0x0802669a
 801f7dc:	08025fec 	.word	0x08025fec
 801f7e0:	08026028 	.word	0x08026028
 801f7e4:	08026034 	.word	0x08026034

0801f7e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801f7e8:	b580      	push	{r7, lr}
 801f7ea:	b084      	sub	sp, #16
 801f7ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801f7ee:	2300      	movs	r3, #0
 801f7f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801f7f2:	4b12      	ldr	r3, [pc, #72]	; (801f83c <ip_reass_tmr+0x54>)
 801f7f4:	681b      	ldr	r3, [r3, #0]
 801f7f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801f7f8:	e018      	b.n	801f82c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801f7fa:	68fb      	ldr	r3, [r7, #12]
 801f7fc:	7fdb      	ldrb	r3, [r3, #31]
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	d00b      	beq.n	801f81a <ip_reass_tmr+0x32>
      r->timer--;
 801f802:	68fb      	ldr	r3, [r7, #12]
 801f804:	7fdb      	ldrb	r3, [r3, #31]
 801f806:	3b01      	subs	r3, #1
 801f808:	b2da      	uxtb	r2, r3
 801f80a:	68fb      	ldr	r3, [r7, #12]
 801f80c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801f80e:	68fb      	ldr	r3, [r7, #12]
 801f810:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801f812:	68fb      	ldr	r3, [r7, #12]
 801f814:	681b      	ldr	r3, [r3, #0]
 801f816:	60fb      	str	r3, [r7, #12]
 801f818:	e008      	b.n	801f82c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801f81a:	68fb      	ldr	r3, [r7, #12]
 801f81c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801f81e:	68fb      	ldr	r3, [r7, #12]
 801f820:	681b      	ldr	r3, [r3, #0]
 801f822:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801f824:	68b9      	ldr	r1, [r7, #8]
 801f826:	6878      	ldr	r0, [r7, #4]
 801f828:	f000 f80a 	bl	801f840 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801f82c:	68fb      	ldr	r3, [r7, #12]
 801f82e:	2b00      	cmp	r3, #0
 801f830:	d1e3      	bne.n	801f7fa <ip_reass_tmr+0x12>
    }
  }
}
 801f832:	bf00      	nop
 801f834:	bf00      	nop
 801f836:	3710      	adds	r7, #16
 801f838:	46bd      	mov	sp, r7
 801f83a:	bd80      	pop	{r7, pc}
 801f83c:	2000582c 	.word	0x2000582c

0801f840 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f840:	b580      	push	{r7, lr}
 801f842:	b088      	sub	sp, #32
 801f844:	af00      	add	r7, sp, #0
 801f846:	6078      	str	r0, [r7, #4]
 801f848:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801f84a:	2300      	movs	r3, #0
 801f84c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801f84e:	683a      	ldr	r2, [r7, #0]
 801f850:	687b      	ldr	r3, [r7, #4]
 801f852:	429a      	cmp	r2, r3
 801f854:	d105      	bne.n	801f862 <ip_reass_free_complete_datagram+0x22>
 801f856:	4b45      	ldr	r3, [pc, #276]	; (801f96c <ip_reass_free_complete_datagram+0x12c>)
 801f858:	22ab      	movs	r2, #171	; 0xab
 801f85a:	4945      	ldr	r1, [pc, #276]	; (801f970 <ip_reass_free_complete_datagram+0x130>)
 801f85c:	4845      	ldr	r0, [pc, #276]	; (801f974 <ip_reass_free_complete_datagram+0x134>)
 801f85e:	f001 fab5 	bl	8020dcc <iprintf>
  if (prev != NULL) {
 801f862:	683b      	ldr	r3, [r7, #0]
 801f864:	2b00      	cmp	r3, #0
 801f866:	d00a      	beq.n	801f87e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801f868:	683b      	ldr	r3, [r7, #0]
 801f86a:	681b      	ldr	r3, [r3, #0]
 801f86c:	687a      	ldr	r2, [r7, #4]
 801f86e:	429a      	cmp	r2, r3
 801f870:	d005      	beq.n	801f87e <ip_reass_free_complete_datagram+0x3e>
 801f872:	4b3e      	ldr	r3, [pc, #248]	; (801f96c <ip_reass_free_complete_datagram+0x12c>)
 801f874:	22ad      	movs	r2, #173	; 0xad
 801f876:	4940      	ldr	r1, [pc, #256]	; (801f978 <ip_reass_free_complete_datagram+0x138>)
 801f878:	483e      	ldr	r0, [pc, #248]	; (801f974 <ip_reass_free_complete_datagram+0x134>)
 801f87a:	f001 faa7 	bl	8020dcc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801f87e:	687b      	ldr	r3, [r7, #4]
 801f880:	685b      	ldr	r3, [r3, #4]
 801f882:	685b      	ldr	r3, [r3, #4]
 801f884:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801f886:	697b      	ldr	r3, [r7, #20]
 801f888:	889b      	ldrh	r3, [r3, #4]
 801f88a:	b29b      	uxth	r3, r3
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d12a      	bne.n	801f8e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801f890:	687b      	ldr	r3, [r7, #4]
 801f892:	685b      	ldr	r3, [r3, #4]
 801f894:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801f896:	697b      	ldr	r3, [r7, #20]
 801f898:	681a      	ldr	r2, [r3, #0]
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801f89e:	69bb      	ldr	r3, [r7, #24]
 801f8a0:	6858      	ldr	r0, [r3, #4]
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	3308      	adds	r3, #8
 801f8a6:	2214      	movs	r2, #20
 801f8a8:	4619      	mov	r1, r3
 801f8aa:	f001 f9a5 	bl	8020bf8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801f8ae:	2101      	movs	r1, #1
 801f8b0:	69b8      	ldr	r0, [r7, #24]
 801f8b2:	f7ff faff 	bl	801eeb4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801f8b6:	69b8      	ldr	r0, [r7, #24]
 801f8b8:	f7f5 f8ec 	bl	8014a94 <pbuf_clen>
 801f8bc:	4603      	mov	r3, r0
 801f8be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f8c0:	8bfa      	ldrh	r2, [r7, #30]
 801f8c2:	8a7b      	ldrh	r3, [r7, #18]
 801f8c4:	4413      	add	r3, r2
 801f8c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f8ca:	db05      	blt.n	801f8d8 <ip_reass_free_complete_datagram+0x98>
 801f8cc:	4b27      	ldr	r3, [pc, #156]	; (801f96c <ip_reass_free_complete_datagram+0x12c>)
 801f8ce:	22bc      	movs	r2, #188	; 0xbc
 801f8d0:	492a      	ldr	r1, [pc, #168]	; (801f97c <ip_reass_free_complete_datagram+0x13c>)
 801f8d2:	4828      	ldr	r0, [pc, #160]	; (801f974 <ip_reass_free_complete_datagram+0x134>)
 801f8d4:	f001 fa7a 	bl	8020dcc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f8d8:	8bfa      	ldrh	r2, [r7, #30]
 801f8da:	8a7b      	ldrh	r3, [r7, #18]
 801f8dc:	4413      	add	r3, r2
 801f8de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801f8e0:	69b8      	ldr	r0, [r7, #24]
 801f8e2:	f7f5 f849 	bl	8014978 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	685b      	ldr	r3, [r3, #4]
 801f8ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801f8ec:	e01f      	b.n	801f92e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801f8ee:	69bb      	ldr	r3, [r7, #24]
 801f8f0:	685b      	ldr	r3, [r3, #4]
 801f8f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801f8f4:	69bb      	ldr	r3, [r7, #24]
 801f8f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801f8f8:	697b      	ldr	r3, [r7, #20]
 801f8fa:	681b      	ldr	r3, [r3, #0]
 801f8fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801f8fe:	68f8      	ldr	r0, [r7, #12]
 801f900:	f7f5 f8c8 	bl	8014a94 <pbuf_clen>
 801f904:	4603      	mov	r3, r0
 801f906:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f908:	8bfa      	ldrh	r2, [r7, #30]
 801f90a:	8a7b      	ldrh	r3, [r7, #18]
 801f90c:	4413      	add	r3, r2
 801f90e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f912:	db05      	blt.n	801f920 <ip_reass_free_complete_datagram+0xe0>
 801f914:	4b15      	ldr	r3, [pc, #84]	; (801f96c <ip_reass_free_complete_datagram+0x12c>)
 801f916:	22cc      	movs	r2, #204	; 0xcc
 801f918:	4918      	ldr	r1, [pc, #96]	; (801f97c <ip_reass_free_complete_datagram+0x13c>)
 801f91a:	4816      	ldr	r0, [pc, #88]	; (801f974 <ip_reass_free_complete_datagram+0x134>)
 801f91c:	f001 fa56 	bl	8020dcc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f920:	8bfa      	ldrh	r2, [r7, #30]
 801f922:	8a7b      	ldrh	r3, [r7, #18]
 801f924:	4413      	add	r3, r2
 801f926:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801f928:	68f8      	ldr	r0, [r7, #12]
 801f92a:	f7f5 f825 	bl	8014978 <pbuf_free>
  while (p != NULL) {
 801f92e:	69bb      	ldr	r3, [r7, #24]
 801f930:	2b00      	cmp	r3, #0
 801f932:	d1dc      	bne.n	801f8ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801f934:	6839      	ldr	r1, [r7, #0]
 801f936:	6878      	ldr	r0, [r7, #4]
 801f938:	f000 f8c2 	bl	801fac0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801f93c:	4b10      	ldr	r3, [pc, #64]	; (801f980 <ip_reass_free_complete_datagram+0x140>)
 801f93e:	881b      	ldrh	r3, [r3, #0]
 801f940:	8bfa      	ldrh	r2, [r7, #30]
 801f942:	429a      	cmp	r2, r3
 801f944:	d905      	bls.n	801f952 <ip_reass_free_complete_datagram+0x112>
 801f946:	4b09      	ldr	r3, [pc, #36]	; (801f96c <ip_reass_free_complete_datagram+0x12c>)
 801f948:	22d2      	movs	r2, #210	; 0xd2
 801f94a:	490e      	ldr	r1, [pc, #56]	; (801f984 <ip_reass_free_complete_datagram+0x144>)
 801f94c:	4809      	ldr	r0, [pc, #36]	; (801f974 <ip_reass_free_complete_datagram+0x134>)
 801f94e:	f001 fa3d 	bl	8020dcc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801f952:	4b0b      	ldr	r3, [pc, #44]	; (801f980 <ip_reass_free_complete_datagram+0x140>)
 801f954:	881a      	ldrh	r2, [r3, #0]
 801f956:	8bfb      	ldrh	r3, [r7, #30]
 801f958:	1ad3      	subs	r3, r2, r3
 801f95a:	b29a      	uxth	r2, r3
 801f95c:	4b08      	ldr	r3, [pc, #32]	; (801f980 <ip_reass_free_complete_datagram+0x140>)
 801f95e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801f960:	8bfb      	ldrh	r3, [r7, #30]
}
 801f962:	4618      	mov	r0, r3
 801f964:	3720      	adds	r7, #32
 801f966:	46bd      	mov	sp, r7
 801f968:	bd80      	pop	{r7, pc}
 801f96a:	bf00      	nop
 801f96c:	0802605c 	.word	0x0802605c
 801f970:	08026098 	.word	0x08026098
 801f974:	080260a4 	.word	0x080260a4
 801f978:	080260cc 	.word	0x080260cc
 801f97c:	080260e0 	.word	0x080260e0
 801f980:	20005830 	.word	0x20005830
 801f984:	08026100 	.word	0x08026100

0801f988 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801f988:	b580      	push	{r7, lr}
 801f98a:	b08a      	sub	sp, #40	; 0x28
 801f98c:	af00      	add	r7, sp, #0
 801f98e:	6078      	str	r0, [r7, #4]
 801f990:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801f992:	2300      	movs	r3, #0
 801f994:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801f996:	2300      	movs	r3, #0
 801f998:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801f99a:	2300      	movs	r3, #0
 801f99c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801f99e:	2300      	movs	r3, #0
 801f9a0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801f9a2:	2300      	movs	r3, #0
 801f9a4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801f9a6:	4b28      	ldr	r3, [pc, #160]	; (801fa48 <ip_reass_remove_oldest_datagram+0xc0>)
 801f9a8:	681b      	ldr	r3, [r3, #0]
 801f9aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801f9ac:	e030      	b.n	801fa10 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801f9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9b0:	695a      	ldr	r2, [r3, #20]
 801f9b2:	687b      	ldr	r3, [r7, #4]
 801f9b4:	68db      	ldr	r3, [r3, #12]
 801f9b6:	429a      	cmp	r2, r3
 801f9b8:	d10c      	bne.n	801f9d4 <ip_reass_remove_oldest_datagram+0x4c>
 801f9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9bc:	699a      	ldr	r2, [r3, #24]
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	691b      	ldr	r3, [r3, #16]
 801f9c2:	429a      	cmp	r2, r3
 801f9c4:	d106      	bne.n	801f9d4 <ip_reass_remove_oldest_datagram+0x4c>
 801f9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9c8:	899a      	ldrh	r2, [r3, #12]
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	889b      	ldrh	r3, [r3, #4]
 801f9ce:	b29b      	uxth	r3, r3
 801f9d0:	429a      	cmp	r2, r3
 801f9d2:	d014      	beq.n	801f9fe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801f9d4:	693b      	ldr	r3, [r7, #16]
 801f9d6:	3301      	adds	r3, #1
 801f9d8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801f9da:	6a3b      	ldr	r3, [r7, #32]
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	d104      	bne.n	801f9ea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9e2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f9e4:	69fb      	ldr	r3, [r7, #28]
 801f9e6:	61bb      	str	r3, [r7, #24]
 801f9e8:	e009      	b.n	801f9fe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801f9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9ec:	7fda      	ldrb	r2, [r3, #31]
 801f9ee:	6a3b      	ldr	r3, [r7, #32]
 801f9f0:	7fdb      	ldrb	r3, [r3, #31]
 801f9f2:	429a      	cmp	r2, r3
 801f9f4:	d803      	bhi.n	801f9fe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801f9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9f8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f9fa:	69fb      	ldr	r3, [r7, #28]
 801f9fc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801f9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa00:	681b      	ldr	r3, [r3, #0]
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	d001      	beq.n	801fa0a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801fa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa08:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801fa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa0c:	681b      	ldr	r3, [r3, #0]
 801fa0e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d1cb      	bne.n	801f9ae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801fa16:	6a3b      	ldr	r3, [r7, #32]
 801fa18:	2b00      	cmp	r3, #0
 801fa1a:	d008      	beq.n	801fa2e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801fa1c:	69b9      	ldr	r1, [r7, #24]
 801fa1e:	6a38      	ldr	r0, [r7, #32]
 801fa20:	f7ff ff0e 	bl	801f840 <ip_reass_free_complete_datagram>
 801fa24:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801fa26:	697a      	ldr	r2, [r7, #20]
 801fa28:	68fb      	ldr	r3, [r7, #12]
 801fa2a:	4413      	add	r3, r2
 801fa2c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801fa2e:	697a      	ldr	r2, [r7, #20]
 801fa30:	683b      	ldr	r3, [r7, #0]
 801fa32:	429a      	cmp	r2, r3
 801fa34:	da02      	bge.n	801fa3c <ip_reass_remove_oldest_datagram+0xb4>
 801fa36:	693b      	ldr	r3, [r7, #16]
 801fa38:	2b01      	cmp	r3, #1
 801fa3a:	dcac      	bgt.n	801f996 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801fa3c:	697b      	ldr	r3, [r7, #20]
}
 801fa3e:	4618      	mov	r0, r3
 801fa40:	3728      	adds	r7, #40	; 0x28
 801fa42:	46bd      	mov	sp, r7
 801fa44:	bd80      	pop	{r7, pc}
 801fa46:	bf00      	nop
 801fa48:	2000582c 	.word	0x2000582c

0801fa4c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801fa4c:	b580      	push	{r7, lr}
 801fa4e:	b084      	sub	sp, #16
 801fa50:	af00      	add	r7, sp, #0
 801fa52:	6078      	str	r0, [r7, #4]
 801fa54:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801fa56:	2004      	movs	r0, #4
 801fa58:	f7f4 f88c 	bl	8013b74 <memp_malloc>
 801fa5c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801fa5e:	68fb      	ldr	r3, [r7, #12]
 801fa60:	2b00      	cmp	r3, #0
 801fa62:	d110      	bne.n	801fa86 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801fa64:	6839      	ldr	r1, [r7, #0]
 801fa66:	6878      	ldr	r0, [r7, #4]
 801fa68:	f7ff ff8e 	bl	801f988 <ip_reass_remove_oldest_datagram>
 801fa6c:	4602      	mov	r2, r0
 801fa6e:	683b      	ldr	r3, [r7, #0]
 801fa70:	4293      	cmp	r3, r2
 801fa72:	dc03      	bgt.n	801fa7c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801fa74:	2004      	movs	r0, #4
 801fa76:	f7f4 f87d 	bl	8013b74 <memp_malloc>
 801fa7a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801fa7c:	68fb      	ldr	r3, [r7, #12]
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	d101      	bne.n	801fa86 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801fa82:	2300      	movs	r3, #0
 801fa84:	e016      	b.n	801fab4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801fa86:	2220      	movs	r2, #32
 801fa88:	2100      	movs	r1, #0
 801fa8a:	68f8      	ldr	r0, [r7, #12]
 801fa8c:	f001 f8dc 	bl	8020c48 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801fa90:	68fb      	ldr	r3, [r7, #12]
 801fa92:	220f      	movs	r2, #15
 801fa94:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801fa96:	4b09      	ldr	r3, [pc, #36]	; (801fabc <ip_reass_enqueue_new_datagram+0x70>)
 801fa98:	681a      	ldr	r2, [r3, #0]
 801fa9a:	68fb      	ldr	r3, [r7, #12]
 801fa9c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801fa9e:	4a07      	ldr	r2, [pc, #28]	; (801fabc <ip_reass_enqueue_new_datagram+0x70>)
 801faa0:	68fb      	ldr	r3, [r7, #12]
 801faa2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	3308      	adds	r3, #8
 801faa8:	2214      	movs	r2, #20
 801faaa:	6879      	ldr	r1, [r7, #4]
 801faac:	4618      	mov	r0, r3
 801faae:	f001 f8a3 	bl	8020bf8 <memcpy>
  return ipr;
 801fab2:	68fb      	ldr	r3, [r7, #12]
}
 801fab4:	4618      	mov	r0, r3
 801fab6:	3710      	adds	r7, #16
 801fab8:	46bd      	mov	sp, r7
 801faba:	bd80      	pop	{r7, pc}
 801fabc:	2000582c 	.word	0x2000582c

0801fac0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801fac0:	b580      	push	{r7, lr}
 801fac2:	b082      	sub	sp, #8
 801fac4:	af00      	add	r7, sp, #0
 801fac6:	6078      	str	r0, [r7, #4]
 801fac8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801faca:	4b10      	ldr	r3, [pc, #64]	; (801fb0c <ip_reass_dequeue_datagram+0x4c>)
 801facc:	681b      	ldr	r3, [r3, #0]
 801face:	687a      	ldr	r2, [r7, #4]
 801fad0:	429a      	cmp	r2, r3
 801fad2:	d104      	bne.n	801fade <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	681b      	ldr	r3, [r3, #0]
 801fad8:	4a0c      	ldr	r2, [pc, #48]	; (801fb0c <ip_reass_dequeue_datagram+0x4c>)
 801fada:	6013      	str	r3, [r2, #0]
 801fadc:	e00d      	b.n	801fafa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801fade:	683b      	ldr	r3, [r7, #0]
 801fae0:	2b00      	cmp	r3, #0
 801fae2:	d106      	bne.n	801faf2 <ip_reass_dequeue_datagram+0x32>
 801fae4:	4b0a      	ldr	r3, [pc, #40]	; (801fb10 <ip_reass_dequeue_datagram+0x50>)
 801fae6:	f240 1245 	movw	r2, #325	; 0x145
 801faea:	490a      	ldr	r1, [pc, #40]	; (801fb14 <ip_reass_dequeue_datagram+0x54>)
 801faec:	480a      	ldr	r0, [pc, #40]	; (801fb18 <ip_reass_dequeue_datagram+0x58>)
 801faee:	f001 f96d 	bl	8020dcc <iprintf>
    prev->next = ipr->next;
 801faf2:	687b      	ldr	r3, [r7, #4]
 801faf4:	681a      	ldr	r2, [r3, #0]
 801faf6:	683b      	ldr	r3, [r7, #0]
 801faf8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801fafa:	6879      	ldr	r1, [r7, #4]
 801fafc:	2004      	movs	r0, #4
 801fafe:	f7f4 f88b 	bl	8013c18 <memp_free>
}
 801fb02:	bf00      	nop
 801fb04:	3708      	adds	r7, #8
 801fb06:	46bd      	mov	sp, r7
 801fb08:	bd80      	pop	{r7, pc}
 801fb0a:	bf00      	nop
 801fb0c:	2000582c 	.word	0x2000582c
 801fb10:	0802605c 	.word	0x0802605c
 801fb14:	08026124 	.word	0x08026124
 801fb18:	080260a4 	.word	0x080260a4

0801fb1c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801fb1c:	b580      	push	{r7, lr}
 801fb1e:	b08c      	sub	sp, #48	; 0x30
 801fb20:	af00      	add	r7, sp, #0
 801fb22:	60f8      	str	r0, [r7, #12]
 801fb24:	60b9      	str	r1, [r7, #8]
 801fb26:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801fb28:	2300      	movs	r3, #0
 801fb2a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801fb2c:	2301      	movs	r3, #1
 801fb2e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801fb30:	68bb      	ldr	r3, [r7, #8]
 801fb32:	685b      	ldr	r3, [r3, #4]
 801fb34:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801fb36:	69fb      	ldr	r3, [r7, #28]
 801fb38:	885b      	ldrh	r3, [r3, #2]
 801fb3a:	b29b      	uxth	r3, r3
 801fb3c:	4618      	mov	r0, r3
 801fb3e:	f7f2 fb8d 	bl	801225c <lwip_htons>
 801fb42:	4603      	mov	r3, r0
 801fb44:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801fb46:	69fb      	ldr	r3, [r7, #28]
 801fb48:	781b      	ldrb	r3, [r3, #0]
 801fb4a:	f003 030f 	and.w	r3, r3, #15
 801fb4e:	b2db      	uxtb	r3, r3
 801fb50:	009b      	lsls	r3, r3, #2
 801fb52:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801fb54:	7e7b      	ldrb	r3, [r7, #25]
 801fb56:	b29b      	uxth	r3, r3
 801fb58:	8b7a      	ldrh	r2, [r7, #26]
 801fb5a:	429a      	cmp	r2, r3
 801fb5c:	d202      	bcs.n	801fb64 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fb5e:	f04f 33ff 	mov.w	r3, #4294967295
 801fb62:	e135      	b.n	801fdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801fb64:	7e7b      	ldrb	r3, [r7, #25]
 801fb66:	b29b      	uxth	r3, r3
 801fb68:	8b7a      	ldrh	r2, [r7, #26]
 801fb6a:	1ad3      	subs	r3, r2, r3
 801fb6c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801fb6e:	69fb      	ldr	r3, [r7, #28]
 801fb70:	88db      	ldrh	r3, [r3, #6]
 801fb72:	b29b      	uxth	r3, r3
 801fb74:	4618      	mov	r0, r3
 801fb76:	f7f2 fb71 	bl	801225c <lwip_htons>
 801fb7a:	4603      	mov	r3, r0
 801fb7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fb80:	b29b      	uxth	r3, r3
 801fb82:	00db      	lsls	r3, r3, #3
 801fb84:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801fb86:	68bb      	ldr	r3, [r7, #8]
 801fb88:	685b      	ldr	r3, [r3, #4]
 801fb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801fb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb8e:	2200      	movs	r2, #0
 801fb90:	701a      	strb	r2, [r3, #0]
 801fb92:	2200      	movs	r2, #0
 801fb94:	705a      	strb	r2, [r3, #1]
 801fb96:	2200      	movs	r2, #0
 801fb98:	709a      	strb	r2, [r3, #2]
 801fb9a:	2200      	movs	r2, #0
 801fb9c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801fb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fba0:	8afa      	ldrh	r2, [r7, #22]
 801fba2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801fba4:	8afa      	ldrh	r2, [r7, #22]
 801fba6:	8b7b      	ldrh	r3, [r7, #26]
 801fba8:	4413      	add	r3, r2
 801fbaa:	b29a      	uxth	r2, r3
 801fbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801fbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbb2:	88db      	ldrh	r3, [r3, #6]
 801fbb4:	b29b      	uxth	r3, r3
 801fbb6:	8afa      	ldrh	r2, [r7, #22]
 801fbb8:	429a      	cmp	r2, r3
 801fbba:	d902      	bls.n	801fbc2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fbbc:	f04f 33ff 	mov.w	r3, #4294967295
 801fbc0:	e106      	b.n	801fdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801fbc2:	68fb      	ldr	r3, [r7, #12]
 801fbc4:	685b      	ldr	r3, [r3, #4]
 801fbc6:	627b      	str	r3, [r7, #36]	; 0x24
 801fbc8:	e068      	b.n	801fc9c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801fbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbcc:	685b      	ldr	r3, [r3, #4]
 801fbce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801fbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbd2:	889b      	ldrh	r3, [r3, #4]
 801fbd4:	b29a      	uxth	r2, r3
 801fbd6:	693b      	ldr	r3, [r7, #16]
 801fbd8:	889b      	ldrh	r3, [r3, #4]
 801fbda:	b29b      	uxth	r3, r3
 801fbdc:	429a      	cmp	r2, r3
 801fbde:	d235      	bcs.n	801fc4c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801fbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fbe4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801fbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	d020      	beq.n	801fc2e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801fbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbee:	889b      	ldrh	r3, [r3, #4]
 801fbf0:	b29a      	uxth	r2, r3
 801fbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fbf4:	88db      	ldrh	r3, [r3, #6]
 801fbf6:	b29b      	uxth	r3, r3
 801fbf8:	429a      	cmp	r2, r3
 801fbfa:	d307      	bcc.n	801fc0c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801fbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbfe:	88db      	ldrh	r3, [r3, #6]
 801fc00:	b29a      	uxth	r2, r3
 801fc02:	693b      	ldr	r3, [r7, #16]
 801fc04:	889b      	ldrh	r3, [r3, #4]
 801fc06:	b29b      	uxth	r3, r3
 801fc08:	429a      	cmp	r2, r3
 801fc0a:	d902      	bls.n	801fc12 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fc0c:	f04f 33ff 	mov.w	r3, #4294967295
 801fc10:	e0de      	b.n	801fdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801fc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc14:	68ba      	ldr	r2, [r7, #8]
 801fc16:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801fc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc1a:	88db      	ldrh	r3, [r3, #6]
 801fc1c:	b29a      	uxth	r2, r3
 801fc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fc20:	889b      	ldrh	r3, [r3, #4]
 801fc22:	b29b      	uxth	r3, r3
 801fc24:	429a      	cmp	r2, r3
 801fc26:	d03d      	beq.n	801fca4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801fc28:	2300      	movs	r3, #0
 801fc2a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801fc2c:	e03a      	b.n	801fca4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801fc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fc30:	88db      	ldrh	r3, [r3, #6]
 801fc32:	b29a      	uxth	r2, r3
 801fc34:	693b      	ldr	r3, [r7, #16]
 801fc36:	889b      	ldrh	r3, [r3, #4]
 801fc38:	b29b      	uxth	r3, r3
 801fc3a:	429a      	cmp	r2, r3
 801fc3c:	d902      	bls.n	801fc44 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fc3e:	f04f 33ff 	mov.w	r3, #4294967295
 801fc42:	e0c5      	b.n	801fdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801fc44:	68fb      	ldr	r3, [r7, #12]
 801fc46:	68ba      	ldr	r2, [r7, #8]
 801fc48:	605a      	str	r2, [r3, #4]
      break;
 801fc4a:	e02b      	b.n	801fca4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801fc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fc4e:	889b      	ldrh	r3, [r3, #4]
 801fc50:	b29a      	uxth	r2, r3
 801fc52:	693b      	ldr	r3, [r7, #16]
 801fc54:	889b      	ldrh	r3, [r3, #4]
 801fc56:	b29b      	uxth	r3, r3
 801fc58:	429a      	cmp	r2, r3
 801fc5a:	d102      	bne.n	801fc62 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fc5c:	f04f 33ff 	mov.w	r3, #4294967295
 801fc60:	e0b6      	b.n	801fdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801fc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fc64:	889b      	ldrh	r3, [r3, #4]
 801fc66:	b29a      	uxth	r2, r3
 801fc68:	693b      	ldr	r3, [r7, #16]
 801fc6a:	88db      	ldrh	r3, [r3, #6]
 801fc6c:	b29b      	uxth	r3, r3
 801fc6e:	429a      	cmp	r2, r3
 801fc70:	d202      	bcs.n	801fc78 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fc72:	f04f 33ff 	mov.w	r3, #4294967295
 801fc76:	e0ab      	b.n	801fdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801fc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc7a:	2b00      	cmp	r3, #0
 801fc7c:	d009      	beq.n	801fc92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801fc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc80:	88db      	ldrh	r3, [r3, #6]
 801fc82:	b29a      	uxth	r2, r3
 801fc84:	693b      	ldr	r3, [r7, #16]
 801fc86:	889b      	ldrh	r3, [r3, #4]
 801fc88:	b29b      	uxth	r3, r3
 801fc8a:	429a      	cmp	r2, r3
 801fc8c:	d001      	beq.n	801fc92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801fc8e:	2300      	movs	r3, #0
 801fc90:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801fc92:	693b      	ldr	r3, [r7, #16]
 801fc94:	681b      	ldr	r3, [r3, #0]
 801fc96:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801fc98:	693b      	ldr	r3, [r7, #16]
 801fc9a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801fc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc9e:	2b00      	cmp	r3, #0
 801fca0:	d193      	bne.n	801fbca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801fca2:	e000      	b.n	801fca6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801fca4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801fca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	d12d      	bne.n	801fd08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801fcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	d01c      	beq.n	801fcec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801fcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fcb4:	88db      	ldrh	r3, [r3, #6]
 801fcb6:	b29a      	uxth	r2, r3
 801fcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fcba:	889b      	ldrh	r3, [r3, #4]
 801fcbc:	b29b      	uxth	r3, r3
 801fcbe:	429a      	cmp	r2, r3
 801fcc0:	d906      	bls.n	801fcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801fcc2:	4b45      	ldr	r3, [pc, #276]	; (801fdd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fcc4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801fcc8:	4944      	ldr	r1, [pc, #272]	; (801fddc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801fcca:	4845      	ldr	r0, [pc, #276]	; (801fde0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fccc:	f001 f87e 	bl	8020dcc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801fcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fcd2:	68ba      	ldr	r2, [r7, #8]
 801fcd4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801fcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fcd8:	88db      	ldrh	r3, [r3, #6]
 801fcda:	b29a      	uxth	r2, r3
 801fcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fcde:	889b      	ldrh	r3, [r3, #4]
 801fce0:	b29b      	uxth	r3, r3
 801fce2:	429a      	cmp	r2, r3
 801fce4:	d010      	beq.n	801fd08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801fce6:	2300      	movs	r3, #0
 801fce8:	623b      	str	r3, [r7, #32]
 801fcea:	e00d      	b.n	801fd08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801fcec:	68fb      	ldr	r3, [r7, #12]
 801fcee:	685b      	ldr	r3, [r3, #4]
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	d006      	beq.n	801fd02 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801fcf4:	4b38      	ldr	r3, [pc, #224]	; (801fdd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fcf6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801fcfa:	493a      	ldr	r1, [pc, #232]	; (801fde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801fcfc:	4838      	ldr	r0, [pc, #224]	; (801fde0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fcfe:	f001 f865 	bl	8020dcc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	68ba      	ldr	r2, [r7, #8]
 801fd06:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	d105      	bne.n	801fd1a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801fd0e:	68fb      	ldr	r3, [r7, #12]
 801fd10:	7f9b      	ldrb	r3, [r3, #30]
 801fd12:	f003 0301 	and.w	r3, r3, #1
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	d059      	beq.n	801fdce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801fd1a:	6a3b      	ldr	r3, [r7, #32]
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	d04f      	beq.n	801fdc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801fd20:	68fb      	ldr	r3, [r7, #12]
 801fd22:	685b      	ldr	r3, [r3, #4]
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	d006      	beq.n	801fd36 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801fd28:	68fb      	ldr	r3, [r7, #12]
 801fd2a:	685b      	ldr	r3, [r3, #4]
 801fd2c:	685b      	ldr	r3, [r3, #4]
 801fd2e:	889b      	ldrh	r3, [r3, #4]
 801fd30:	b29b      	uxth	r3, r3
 801fd32:	2b00      	cmp	r3, #0
 801fd34:	d002      	beq.n	801fd3c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801fd36:	2300      	movs	r3, #0
 801fd38:	623b      	str	r3, [r7, #32]
 801fd3a:	e041      	b.n	801fdc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801fd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd3e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801fd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd42:	681b      	ldr	r3, [r3, #0]
 801fd44:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801fd46:	e012      	b.n	801fd6e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801fd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd4a:	685b      	ldr	r3, [r3, #4]
 801fd4c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801fd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd50:	88db      	ldrh	r3, [r3, #6]
 801fd52:	b29a      	uxth	r2, r3
 801fd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd56:	889b      	ldrh	r3, [r3, #4]
 801fd58:	b29b      	uxth	r3, r3
 801fd5a:	429a      	cmp	r2, r3
 801fd5c:	d002      	beq.n	801fd64 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801fd5e:	2300      	movs	r3, #0
 801fd60:	623b      	str	r3, [r7, #32]
            break;
 801fd62:	e007      	b.n	801fd74 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801fd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd66:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd6a:	681b      	ldr	r3, [r3, #0]
 801fd6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801fd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	d1e9      	bne.n	801fd48 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801fd74:	6a3b      	ldr	r3, [r7, #32]
 801fd76:	2b00      	cmp	r3, #0
 801fd78:	d022      	beq.n	801fdc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801fd7a:	68fb      	ldr	r3, [r7, #12]
 801fd7c:	685b      	ldr	r3, [r3, #4]
 801fd7e:	2b00      	cmp	r3, #0
 801fd80:	d106      	bne.n	801fd90 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801fd82:	4b15      	ldr	r3, [pc, #84]	; (801fdd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fd84:	f240 12df 	movw	r2, #479	; 0x1df
 801fd88:	4917      	ldr	r1, [pc, #92]	; (801fde8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801fd8a:	4815      	ldr	r0, [pc, #84]	; (801fde0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fd8c:	f001 f81e 	bl	8020dcc <iprintf>
          LWIP_ASSERT("sanity check",
 801fd90:	68fb      	ldr	r3, [r7, #12]
 801fd92:	685b      	ldr	r3, [r3, #4]
 801fd94:	685b      	ldr	r3, [r3, #4]
 801fd96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fd98:	429a      	cmp	r2, r3
 801fd9a:	d106      	bne.n	801fdaa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801fd9c:	4b0e      	ldr	r3, [pc, #56]	; (801fdd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fd9e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801fda2:	4911      	ldr	r1, [pc, #68]	; (801fde8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801fda4:	480e      	ldr	r0, [pc, #56]	; (801fde0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fda6:	f001 f811 	bl	8020dcc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801fdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdac:	681b      	ldr	r3, [r3, #0]
 801fdae:	2b00      	cmp	r3, #0
 801fdb0:	d006      	beq.n	801fdc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801fdb2:	4b09      	ldr	r3, [pc, #36]	; (801fdd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fdb4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801fdb8:	490c      	ldr	r1, [pc, #48]	; (801fdec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801fdba:	4809      	ldr	r0, [pc, #36]	; (801fde0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fdbc:	f001 f806 	bl	8020dcc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801fdc0:	6a3b      	ldr	r3, [r7, #32]
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	bf14      	ite	ne
 801fdc6:	2301      	movne	r3, #1
 801fdc8:	2300      	moveq	r3, #0
 801fdca:	b2db      	uxtb	r3, r3
 801fdcc:	e000      	b.n	801fdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801fdce:	2300      	movs	r3, #0
}
 801fdd0:	4618      	mov	r0, r3
 801fdd2:	3730      	adds	r7, #48	; 0x30
 801fdd4:	46bd      	mov	sp, r7
 801fdd6:	bd80      	pop	{r7, pc}
 801fdd8:	0802605c 	.word	0x0802605c
 801fddc:	08026140 	.word	0x08026140
 801fde0:	080260a4 	.word	0x080260a4
 801fde4:	08026160 	.word	0x08026160
 801fde8:	08026198 	.word	0x08026198
 801fdec:	080261a8 	.word	0x080261a8

0801fdf0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801fdf0:	b580      	push	{r7, lr}
 801fdf2:	b08e      	sub	sp, #56	; 0x38
 801fdf4:	af00      	add	r7, sp, #0
 801fdf6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	685b      	ldr	r3, [r3, #4]
 801fdfc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801fdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe00:	781b      	ldrb	r3, [r3, #0]
 801fe02:	f003 030f 	and.w	r3, r3, #15
 801fe06:	b2db      	uxtb	r3, r3
 801fe08:	009b      	lsls	r3, r3, #2
 801fe0a:	b2db      	uxtb	r3, r3
 801fe0c:	2b14      	cmp	r3, #20
 801fe0e:	f040 8167 	bne.w	80200e0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801fe12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe14:	88db      	ldrh	r3, [r3, #6]
 801fe16:	b29b      	uxth	r3, r3
 801fe18:	4618      	mov	r0, r3
 801fe1a:	f7f2 fa1f 	bl	801225c <lwip_htons>
 801fe1e:	4603      	mov	r3, r0
 801fe20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fe24:	b29b      	uxth	r3, r3
 801fe26:	00db      	lsls	r3, r3, #3
 801fe28:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801fe2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe2c:	885b      	ldrh	r3, [r3, #2]
 801fe2e:	b29b      	uxth	r3, r3
 801fe30:	4618      	mov	r0, r3
 801fe32:	f7f2 fa13 	bl	801225c <lwip_htons>
 801fe36:	4603      	mov	r3, r0
 801fe38:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801fe3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe3c:	781b      	ldrb	r3, [r3, #0]
 801fe3e:	f003 030f 	and.w	r3, r3, #15
 801fe42:	b2db      	uxtb	r3, r3
 801fe44:	009b      	lsls	r3, r3, #2
 801fe46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801fe4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fe4e:	b29b      	uxth	r3, r3
 801fe50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801fe52:	429a      	cmp	r2, r3
 801fe54:	f0c0 8146 	bcc.w	80200e4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801fe58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fe5c:	b29b      	uxth	r3, r3
 801fe5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801fe60:	1ad3      	subs	r3, r2, r3
 801fe62:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801fe64:	6878      	ldr	r0, [r7, #4]
 801fe66:	f7f4 fe15 	bl	8014a94 <pbuf_clen>
 801fe6a:	4603      	mov	r3, r0
 801fe6c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801fe6e:	4b9f      	ldr	r3, [pc, #636]	; (80200ec <ip4_reass+0x2fc>)
 801fe70:	881b      	ldrh	r3, [r3, #0]
 801fe72:	461a      	mov	r2, r3
 801fe74:	8c3b      	ldrh	r3, [r7, #32]
 801fe76:	4413      	add	r3, r2
 801fe78:	2b0a      	cmp	r3, #10
 801fe7a:	dd10      	ble.n	801fe9e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801fe7c:	8c3b      	ldrh	r3, [r7, #32]
 801fe7e:	4619      	mov	r1, r3
 801fe80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801fe82:	f7ff fd81 	bl	801f988 <ip_reass_remove_oldest_datagram>
 801fe86:	4603      	mov	r3, r0
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	f000 812d 	beq.w	80200e8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801fe8e:	4b97      	ldr	r3, [pc, #604]	; (80200ec <ip4_reass+0x2fc>)
 801fe90:	881b      	ldrh	r3, [r3, #0]
 801fe92:	461a      	mov	r2, r3
 801fe94:	8c3b      	ldrh	r3, [r7, #32]
 801fe96:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801fe98:	2b0a      	cmp	r3, #10
 801fe9a:	f300 8125 	bgt.w	80200e8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801fe9e:	4b94      	ldr	r3, [pc, #592]	; (80200f0 <ip4_reass+0x300>)
 801fea0:	681b      	ldr	r3, [r3, #0]
 801fea2:	633b      	str	r3, [r7, #48]	; 0x30
 801fea4:	e015      	b.n	801fed2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801fea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fea8:	695a      	ldr	r2, [r3, #20]
 801feaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801feac:	68db      	ldr	r3, [r3, #12]
 801feae:	429a      	cmp	r2, r3
 801feb0:	d10c      	bne.n	801fecc <ip4_reass+0xdc>
 801feb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801feb4:	699a      	ldr	r2, [r3, #24]
 801feb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801feb8:	691b      	ldr	r3, [r3, #16]
 801feba:	429a      	cmp	r2, r3
 801febc:	d106      	bne.n	801fecc <ip4_reass+0xdc>
 801febe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fec0:	899a      	ldrh	r2, [r3, #12]
 801fec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fec4:	889b      	ldrh	r3, [r3, #4]
 801fec6:	b29b      	uxth	r3, r3
 801fec8:	429a      	cmp	r2, r3
 801feca:	d006      	beq.n	801feda <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801fecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fece:	681b      	ldr	r3, [r3, #0]
 801fed0:	633b      	str	r3, [r7, #48]	; 0x30
 801fed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	d1e6      	bne.n	801fea6 <ip4_reass+0xb6>
 801fed8:	e000      	b.n	801fedc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801feda:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801fedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d109      	bne.n	801fef6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801fee2:	8c3b      	ldrh	r3, [r7, #32]
 801fee4:	4619      	mov	r1, r3
 801fee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801fee8:	f7ff fdb0 	bl	801fa4c <ip_reass_enqueue_new_datagram>
 801feec:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801feee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	d11c      	bne.n	801ff2e <ip4_reass+0x13e>
      goto nullreturn;
 801fef4:	e109      	b.n	802010a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801fef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fef8:	88db      	ldrh	r3, [r3, #6]
 801fefa:	b29b      	uxth	r3, r3
 801fefc:	4618      	mov	r0, r3
 801fefe:	f7f2 f9ad 	bl	801225c <lwip_htons>
 801ff02:	4603      	mov	r3, r0
 801ff04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ff08:	2b00      	cmp	r3, #0
 801ff0a:	d110      	bne.n	801ff2e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ff0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff0e:	89db      	ldrh	r3, [r3, #14]
 801ff10:	4618      	mov	r0, r3
 801ff12:	f7f2 f9a3 	bl	801225c <lwip_htons>
 801ff16:	4603      	mov	r3, r0
 801ff18:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ff1c:	2b00      	cmp	r3, #0
 801ff1e:	d006      	beq.n	801ff2e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ff20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff22:	3308      	adds	r3, #8
 801ff24:	2214      	movs	r2, #20
 801ff26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ff28:	4618      	mov	r0, r3
 801ff2a:	f000 fe65 	bl	8020bf8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ff2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ff30:	88db      	ldrh	r3, [r3, #6]
 801ff32:	b29b      	uxth	r3, r3
 801ff34:	f003 0320 	and.w	r3, r3, #32
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	bf0c      	ite	eq
 801ff3c:	2301      	moveq	r3, #1
 801ff3e:	2300      	movne	r3, #0
 801ff40:	b2db      	uxtb	r3, r3
 801ff42:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ff44:	69fb      	ldr	r3, [r7, #28]
 801ff46:	2b00      	cmp	r3, #0
 801ff48:	d00e      	beq.n	801ff68 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ff4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ff4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ff4e:	4413      	add	r3, r2
 801ff50:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ff52:	8b7a      	ldrh	r2, [r7, #26]
 801ff54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ff56:	429a      	cmp	r2, r3
 801ff58:	f0c0 80a0 	bcc.w	802009c <ip4_reass+0x2ac>
 801ff5c:	8b7b      	ldrh	r3, [r7, #26]
 801ff5e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801ff62:	4293      	cmp	r3, r2
 801ff64:	f200 809a 	bhi.w	802009c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ff68:	69fa      	ldr	r2, [r7, #28]
 801ff6a:	6879      	ldr	r1, [r7, #4]
 801ff6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ff6e:	f7ff fdd5 	bl	801fb1c <ip_reass_chain_frag_into_datagram_and_validate>
 801ff72:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ff74:	697b      	ldr	r3, [r7, #20]
 801ff76:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff7a:	f000 8091 	beq.w	80200a0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ff7e:	4b5b      	ldr	r3, [pc, #364]	; (80200ec <ip4_reass+0x2fc>)
 801ff80:	881a      	ldrh	r2, [r3, #0]
 801ff82:	8c3b      	ldrh	r3, [r7, #32]
 801ff84:	4413      	add	r3, r2
 801ff86:	b29a      	uxth	r2, r3
 801ff88:	4b58      	ldr	r3, [pc, #352]	; (80200ec <ip4_reass+0x2fc>)
 801ff8a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801ff8c:	69fb      	ldr	r3, [r7, #28]
 801ff8e:	2b00      	cmp	r3, #0
 801ff90:	d00d      	beq.n	801ffae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ff92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ff94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ff96:	4413      	add	r3, r2
 801ff98:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ff9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff9c:	8a7a      	ldrh	r2, [r7, #18]
 801ff9e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ffa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffa2:	7f9b      	ldrb	r3, [r3, #30]
 801ffa4:	f043 0301 	orr.w	r3, r3, #1
 801ffa8:	b2da      	uxtb	r2, r3
 801ffaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801ffae:	697b      	ldr	r3, [r7, #20]
 801ffb0:	2b01      	cmp	r3, #1
 801ffb2:	d171      	bne.n	8020098 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ffb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffb6:	8b9b      	ldrh	r3, [r3, #28]
 801ffb8:	3314      	adds	r3, #20
 801ffba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ffbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffbe:	685b      	ldr	r3, [r3, #4]
 801ffc0:	685b      	ldr	r3, [r3, #4]
 801ffc2:	681b      	ldr	r3, [r3, #0]
 801ffc4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801ffc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffc8:	685b      	ldr	r3, [r3, #4]
 801ffca:	685b      	ldr	r3, [r3, #4]
 801ffcc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ffce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffd0:	3308      	adds	r3, #8
 801ffd2:	2214      	movs	r2, #20
 801ffd4:	4619      	mov	r1, r3
 801ffd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ffd8:	f000 fe0e 	bl	8020bf8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801ffdc:	8a3b      	ldrh	r3, [r7, #16]
 801ffde:	4618      	mov	r0, r3
 801ffe0:	f7f2 f93c 	bl	801225c <lwip_htons>
 801ffe4:	4603      	mov	r3, r0
 801ffe6:	461a      	mov	r2, r3
 801ffe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801ffec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffee:	2200      	movs	r2, #0
 801fff0:	719a      	strb	r2, [r3, #6]
 801fff2:	2200      	movs	r2, #0
 801fff4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801fff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fff8:	2200      	movs	r2, #0
 801fffa:	729a      	strb	r2, [r3, #10]
 801fffc:	2200      	movs	r2, #0
 801fffe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8020000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020002:	685b      	ldr	r3, [r3, #4]
 8020004:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8020006:	e00d      	b.n	8020024 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8020008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802000a:	685b      	ldr	r3, [r3, #4]
 802000c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802000e:	2114      	movs	r1, #20
 8020010:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8020012:	f7f4 fc2b 	bl	801486c <pbuf_remove_header>
      pbuf_cat(p, r);
 8020016:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020018:	6878      	ldr	r0, [r7, #4]
 802001a:	f7f4 fd7b 	bl	8014b14 <pbuf_cat>
      r = iprh->next_pbuf;
 802001e:	68fb      	ldr	r3, [r7, #12]
 8020020:	681b      	ldr	r3, [r3, #0]
 8020022:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8020024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020026:	2b00      	cmp	r3, #0
 8020028:	d1ee      	bne.n	8020008 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802002a:	4b31      	ldr	r3, [pc, #196]	; (80200f0 <ip4_reass+0x300>)
 802002c:	681b      	ldr	r3, [r3, #0]
 802002e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020030:	429a      	cmp	r2, r3
 8020032:	d102      	bne.n	802003a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8020034:	2300      	movs	r3, #0
 8020036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020038:	e010      	b.n	802005c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802003a:	4b2d      	ldr	r3, [pc, #180]	; (80200f0 <ip4_reass+0x300>)
 802003c:	681b      	ldr	r3, [r3, #0]
 802003e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020040:	e007      	b.n	8020052 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8020042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020044:	681b      	ldr	r3, [r3, #0]
 8020046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020048:	429a      	cmp	r2, r3
 802004a:	d006      	beq.n	802005a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802004c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802004e:	681b      	ldr	r3, [r3, #0]
 8020050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020054:	2b00      	cmp	r3, #0
 8020056:	d1f4      	bne.n	8020042 <ip4_reass+0x252>
 8020058:	e000      	b.n	802005c <ip4_reass+0x26c>
          break;
 802005a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 802005c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802005e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020060:	f7ff fd2e 	bl	801fac0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8020064:	6878      	ldr	r0, [r7, #4]
 8020066:	f7f4 fd15 	bl	8014a94 <pbuf_clen>
 802006a:	4603      	mov	r3, r0
 802006c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802006e:	4b1f      	ldr	r3, [pc, #124]	; (80200ec <ip4_reass+0x2fc>)
 8020070:	881b      	ldrh	r3, [r3, #0]
 8020072:	8c3a      	ldrh	r2, [r7, #32]
 8020074:	429a      	cmp	r2, r3
 8020076:	d906      	bls.n	8020086 <ip4_reass+0x296>
 8020078:	4b1e      	ldr	r3, [pc, #120]	; (80200f4 <ip4_reass+0x304>)
 802007a:	f240 229b 	movw	r2, #667	; 0x29b
 802007e:	491e      	ldr	r1, [pc, #120]	; (80200f8 <ip4_reass+0x308>)
 8020080:	481e      	ldr	r0, [pc, #120]	; (80200fc <ip4_reass+0x30c>)
 8020082:	f000 fea3 	bl	8020dcc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8020086:	4b19      	ldr	r3, [pc, #100]	; (80200ec <ip4_reass+0x2fc>)
 8020088:	881a      	ldrh	r2, [r3, #0]
 802008a:	8c3b      	ldrh	r3, [r7, #32]
 802008c:	1ad3      	subs	r3, r2, r3
 802008e:	b29a      	uxth	r2, r3
 8020090:	4b16      	ldr	r3, [pc, #88]	; (80200ec <ip4_reass+0x2fc>)
 8020092:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	e03c      	b.n	8020112 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8020098:	2300      	movs	r3, #0
 802009a:	e03a      	b.n	8020112 <ip4_reass+0x322>
      goto nullreturn_ipr;
 802009c:	bf00      	nop
 802009e:	e000      	b.n	80200a2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80200a0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80200a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	d106      	bne.n	80200b6 <ip4_reass+0x2c6>
 80200a8:	4b12      	ldr	r3, [pc, #72]	; (80200f4 <ip4_reass+0x304>)
 80200aa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80200ae:	4914      	ldr	r1, [pc, #80]	; (8020100 <ip4_reass+0x310>)
 80200b0:	4812      	ldr	r0, [pc, #72]	; (80200fc <ip4_reass+0x30c>)
 80200b2:	f000 fe8b 	bl	8020dcc <iprintf>
  if (ipr->p == NULL) {
 80200b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200b8:	685b      	ldr	r3, [r3, #4]
 80200ba:	2b00      	cmp	r3, #0
 80200bc:	d124      	bne.n	8020108 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80200be:	4b0c      	ldr	r3, [pc, #48]	; (80200f0 <ip4_reass+0x300>)
 80200c0:	681b      	ldr	r3, [r3, #0]
 80200c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80200c4:	429a      	cmp	r2, r3
 80200c6:	d006      	beq.n	80200d6 <ip4_reass+0x2e6>
 80200c8:	4b0a      	ldr	r3, [pc, #40]	; (80200f4 <ip4_reass+0x304>)
 80200ca:	f240 22ab 	movw	r2, #683	; 0x2ab
 80200ce:	490d      	ldr	r1, [pc, #52]	; (8020104 <ip4_reass+0x314>)
 80200d0:	480a      	ldr	r0, [pc, #40]	; (80200fc <ip4_reass+0x30c>)
 80200d2:	f000 fe7b 	bl	8020dcc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80200d6:	2100      	movs	r1, #0
 80200d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80200da:	f7ff fcf1 	bl	801fac0 <ip_reass_dequeue_datagram>
 80200de:	e014      	b.n	802010a <ip4_reass+0x31a>
    goto nullreturn;
 80200e0:	bf00      	nop
 80200e2:	e012      	b.n	802010a <ip4_reass+0x31a>
    goto nullreturn;
 80200e4:	bf00      	nop
 80200e6:	e010      	b.n	802010a <ip4_reass+0x31a>
      goto nullreturn;
 80200e8:	bf00      	nop
 80200ea:	e00e      	b.n	802010a <ip4_reass+0x31a>
 80200ec:	20005830 	.word	0x20005830
 80200f0:	2000582c 	.word	0x2000582c
 80200f4:	0802605c 	.word	0x0802605c
 80200f8:	080261cc 	.word	0x080261cc
 80200fc:	080260a4 	.word	0x080260a4
 8020100:	080261e8 	.word	0x080261e8
 8020104:	080261f4 	.word	0x080261f4
  }

nullreturn:
 8020108:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802010a:	6878      	ldr	r0, [r7, #4]
 802010c:	f7f4 fc34 	bl	8014978 <pbuf_free>
  return NULL;
 8020110:	2300      	movs	r3, #0
}
 8020112:	4618      	mov	r0, r3
 8020114:	3738      	adds	r7, #56	; 0x38
 8020116:	46bd      	mov	sp, r7
 8020118:	bd80      	pop	{r7, pc}
 802011a:	bf00      	nop

0802011c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 802011c:	b580      	push	{r7, lr}
 802011e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8020120:	2005      	movs	r0, #5
 8020122:	f7f3 fd27 	bl	8013b74 <memp_malloc>
 8020126:	4603      	mov	r3, r0
}
 8020128:	4618      	mov	r0, r3
 802012a:	bd80      	pop	{r7, pc}

0802012c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 802012c:	b580      	push	{r7, lr}
 802012e:	b082      	sub	sp, #8
 8020130:	af00      	add	r7, sp, #0
 8020132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	2b00      	cmp	r3, #0
 8020138:	d106      	bne.n	8020148 <ip_frag_free_pbuf_custom_ref+0x1c>
 802013a:	4b07      	ldr	r3, [pc, #28]	; (8020158 <ip_frag_free_pbuf_custom_ref+0x2c>)
 802013c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8020140:	4906      	ldr	r1, [pc, #24]	; (802015c <ip_frag_free_pbuf_custom_ref+0x30>)
 8020142:	4807      	ldr	r0, [pc, #28]	; (8020160 <ip_frag_free_pbuf_custom_ref+0x34>)
 8020144:	f000 fe42 	bl	8020dcc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8020148:	6879      	ldr	r1, [r7, #4]
 802014a:	2005      	movs	r0, #5
 802014c:	f7f3 fd64 	bl	8013c18 <memp_free>
}
 8020150:	bf00      	nop
 8020152:	3708      	adds	r7, #8
 8020154:	46bd      	mov	sp, r7
 8020156:	bd80      	pop	{r7, pc}
 8020158:	0802605c 	.word	0x0802605c
 802015c:	08026214 	.word	0x08026214
 8020160:	080260a4 	.word	0x080260a4

08020164 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8020164:	b580      	push	{r7, lr}
 8020166:	b084      	sub	sp, #16
 8020168:	af00      	add	r7, sp, #0
 802016a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8020170:	68fb      	ldr	r3, [r7, #12]
 8020172:	2b00      	cmp	r3, #0
 8020174:	d106      	bne.n	8020184 <ipfrag_free_pbuf_custom+0x20>
 8020176:	4b11      	ldr	r3, [pc, #68]	; (80201bc <ipfrag_free_pbuf_custom+0x58>)
 8020178:	f240 22ce 	movw	r2, #718	; 0x2ce
 802017c:	4910      	ldr	r1, [pc, #64]	; (80201c0 <ipfrag_free_pbuf_custom+0x5c>)
 802017e:	4811      	ldr	r0, [pc, #68]	; (80201c4 <ipfrag_free_pbuf_custom+0x60>)
 8020180:	f000 fe24 	bl	8020dcc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8020184:	68fa      	ldr	r2, [r7, #12]
 8020186:	687b      	ldr	r3, [r7, #4]
 8020188:	429a      	cmp	r2, r3
 802018a:	d006      	beq.n	802019a <ipfrag_free_pbuf_custom+0x36>
 802018c:	4b0b      	ldr	r3, [pc, #44]	; (80201bc <ipfrag_free_pbuf_custom+0x58>)
 802018e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8020192:	490d      	ldr	r1, [pc, #52]	; (80201c8 <ipfrag_free_pbuf_custom+0x64>)
 8020194:	480b      	ldr	r0, [pc, #44]	; (80201c4 <ipfrag_free_pbuf_custom+0x60>)
 8020196:	f000 fe19 	bl	8020dcc <iprintf>
  if (pcr->original != NULL) {
 802019a:	68fb      	ldr	r3, [r7, #12]
 802019c:	695b      	ldr	r3, [r3, #20]
 802019e:	2b00      	cmp	r3, #0
 80201a0:	d004      	beq.n	80201ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80201a2:	68fb      	ldr	r3, [r7, #12]
 80201a4:	695b      	ldr	r3, [r3, #20]
 80201a6:	4618      	mov	r0, r3
 80201a8:	f7f4 fbe6 	bl	8014978 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80201ac:	68f8      	ldr	r0, [r7, #12]
 80201ae:	f7ff ffbd 	bl	802012c <ip_frag_free_pbuf_custom_ref>
}
 80201b2:	bf00      	nop
 80201b4:	3710      	adds	r7, #16
 80201b6:	46bd      	mov	sp, r7
 80201b8:	bd80      	pop	{r7, pc}
 80201ba:	bf00      	nop
 80201bc:	0802605c 	.word	0x0802605c
 80201c0:	08026220 	.word	0x08026220
 80201c4:	080260a4 	.word	0x080260a4
 80201c8:	0802622c 	.word	0x0802622c

080201cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80201cc:	b580      	push	{r7, lr}
 80201ce:	b094      	sub	sp, #80	; 0x50
 80201d0:	af02      	add	r7, sp, #8
 80201d2:	60f8      	str	r0, [r7, #12]
 80201d4:	60b9      	str	r1, [r7, #8]
 80201d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80201d8:	2300      	movs	r3, #0
 80201da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80201de:	68bb      	ldr	r3, [r7, #8]
 80201e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80201e2:	3b14      	subs	r3, #20
 80201e4:	2b00      	cmp	r3, #0
 80201e6:	da00      	bge.n	80201ea <ip4_frag+0x1e>
 80201e8:	3307      	adds	r3, #7
 80201ea:	10db      	asrs	r3, r3, #3
 80201ec:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80201ee:	2314      	movs	r3, #20
 80201f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80201f2:	68fb      	ldr	r3, [r7, #12]
 80201f4:	685b      	ldr	r3, [r3, #4]
 80201f6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80201f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80201fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80201fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201fe:	781b      	ldrb	r3, [r3, #0]
 8020200:	f003 030f 	and.w	r3, r3, #15
 8020204:	b2db      	uxtb	r3, r3
 8020206:	009b      	lsls	r3, r3, #2
 8020208:	b2db      	uxtb	r3, r3
 802020a:	2b14      	cmp	r3, #20
 802020c:	d002      	beq.n	8020214 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 802020e:	f06f 0305 	mvn.w	r3, #5
 8020212:	e110      	b.n	8020436 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8020214:	68fb      	ldr	r3, [r7, #12]
 8020216:	895b      	ldrh	r3, [r3, #10]
 8020218:	2b13      	cmp	r3, #19
 802021a:	d809      	bhi.n	8020230 <ip4_frag+0x64>
 802021c:	4b88      	ldr	r3, [pc, #544]	; (8020440 <ip4_frag+0x274>)
 802021e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8020222:	4988      	ldr	r1, [pc, #544]	; (8020444 <ip4_frag+0x278>)
 8020224:	4888      	ldr	r0, [pc, #544]	; (8020448 <ip4_frag+0x27c>)
 8020226:	f000 fdd1 	bl	8020dcc <iprintf>
 802022a:	f06f 0305 	mvn.w	r3, #5
 802022e:	e102      	b.n	8020436 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8020230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020232:	88db      	ldrh	r3, [r3, #6]
 8020234:	b29b      	uxth	r3, r3
 8020236:	4618      	mov	r0, r3
 8020238:	f7f2 f810 	bl	801225c <lwip_htons>
 802023c:	4603      	mov	r3, r0
 802023e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8020240:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020242:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020246:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802024a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802024c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020250:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8020252:	68fb      	ldr	r3, [r7, #12]
 8020254:	891b      	ldrh	r3, [r3, #8]
 8020256:	3b14      	subs	r3, #20
 8020258:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 802025c:	e0e1      	b.n	8020422 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802025e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020260:	00db      	lsls	r3, r3, #3
 8020262:	b29b      	uxth	r3, r3
 8020264:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020268:	4293      	cmp	r3, r2
 802026a:	bf28      	it	cs
 802026c:	4613      	movcs	r3, r2
 802026e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8020270:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020274:	2114      	movs	r1, #20
 8020276:	200e      	movs	r0, #14
 8020278:	f7f4 f89a 	bl	80143b0 <pbuf_alloc>
 802027c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802027e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020280:	2b00      	cmp	r3, #0
 8020282:	f000 80d5 	beq.w	8020430 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8020286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020288:	895b      	ldrh	r3, [r3, #10]
 802028a:	2b13      	cmp	r3, #19
 802028c:	d806      	bhi.n	802029c <ip4_frag+0xd0>
 802028e:	4b6c      	ldr	r3, [pc, #432]	; (8020440 <ip4_frag+0x274>)
 8020290:	f44f 7249 	mov.w	r2, #804	; 0x324
 8020294:	496d      	ldr	r1, [pc, #436]	; (802044c <ip4_frag+0x280>)
 8020296:	486c      	ldr	r0, [pc, #432]	; (8020448 <ip4_frag+0x27c>)
 8020298:	f000 fd98 	bl	8020dcc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 802029c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802029e:	685b      	ldr	r3, [r3, #4]
 80202a0:	2214      	movs	r2, #20
 80202a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80202a4:	4618      	mov	r0, r3
 80202a6:	f000 fca7 	bl	8020bf8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80202aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202ac:	685b      	ldr	r3, [r3, #4]
 80202ae:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80202b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80202b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80202b6:	e064      	b.n	8020382 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80202b8:	68fb      	ldr	r3, [r7, #12]
 80202ba:	895a      	ldrh	r2, [r3, #10]
 80202bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80202be:	1ad3      	subs	r3, r2, r3
 80202c0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80202c2:	68fb      	ldr	r3, [r7, #12]
 80202c4:	895b      	ldrh	r3, [r3, #10]
 80202c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80202c8:	429a      	cmp	r2, r3
 80202ca:	d906      	bls.n	80202da <ip4_frag+0x10e>
 80202cc:	4b5c      	ldr	r3, [pc, #368]	; (8020440 <ip4_frag+0x274>)
 80202ce:	f240 322d 	movw	r2, #813	; 0x32d
 80202d2:	495f      	ldr	r1, [pc, #380]	; (8020450 <ip4_frag+0x284>)
 80202d4:	485c      	ldr	r0, [pc, #368]	; (8020448 <ip4_frag+0x27c>)
 80202d6:	f000 fd79 	bl	8020dcc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80202da:	8bfa      	ldrh	r2, [r7, #30]
 80202dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80202e0:	4293      	cmp	r3, r2
 80202e2:	bf28      	it	cs
 80202e4:	4613      	movcs	r3, r2
 80202e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80202ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80202ee:	2b00      	cmp	r3, #0
 80202f0:	d105      	bne.n	80202fe <ip4_frag+0x132>
        poff = 0;
 80202f2:	2300      	movs	r3, #0
 80202f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80202f6:	68fb      	ldr	r3, [r7, #12]
 80202f8:	681b      	ldr	r3, [r3, #0]
 80202fa:	60fb      	str	r3, [r7, #12]
        continue;
 80202fc:	e041      	b.n	8020382 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80202fe:	f7ff ff0d 	bl	802011c <ip_frag_alloc_pbuf_custom_ref>
 8020302:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8020304:	69bb      	ldr	r3, [r7, #24]
 8020306:	2b00      	cmp	r3, #0
 8020308:	d103      	bne.n	8020312 <ip4_frag+0x146>
        pbuf_free(rambuf);
 802030a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802030c:	f7f4 fb34 	bl	8014978 <pbuf_free>
        goto memerr;
 8020310:	e08f      	b.n	8020432 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8020312:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8020314:	68fb      	ldr	r3, [r7, #12]
 8020316:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8020318:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802031a:	4413      	add	r3, r2
 802031c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8020320:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8020324:	9201      	str	r2, [sp, #4]
 8020326:	9300      	str	r3, [sp, #0]
 8020328:	4603      	mov	r3, r0
 802032a:	2241      	movs	r2, #65	; 0x41
 802032c:	2000      	movs	r0, #0
 802032e:	f7f4 f969 	bl	8014604 <pbuf_alloced_custom>
 8020332:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8020334:	697b      	ldr	r3, [r7, #20]
 8020336:	2b00      	cmp	r3, #0
 8020338:	d106      	bne.n	8020348 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 802033a:	69b8      	ldr	r0, [r7, #24]
 802033c:	f7ff fef6 	bl	802012c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8020340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020342:	f7f4 fb19 	bl	8014978 <pbuf_free>
        goto memerr;
 8020346:	e074      	b.n	8020432 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8020348:	68f8      	ldr	r0, [r7, #12]
 802034a:	f7f4 fbbb 	bl	8014ac4 <pbuf_ref>
      pcr->original = p;
 802034e:	69bb      	ldr	r3, [r7, #24]
 8020350:	68fa      	ldr	r2, [r7, #12]
 8020352:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020354:	69bb      	ldr	r3, [r7, #24]
 8020356:	4a3f      	ldr	r2, [pc, #252]	; (8020454 <ip4_frag+0x288>)
 8020358:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802035a:	6979      	ldr	r1, [r7, #20]
 802035c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802035e:	f7f4 fbd9 	bl	8014b14 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8020362:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8020366:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802036a:	1ad3      	subs	r3, r2, r3
 802036c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8020370:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020374:	2b00      	cmp	r3, #0
 8020376:	d004      	beq.n	8020382 <ip4_frag+0x1b6>
        poff = 0;
 8020378:	2300      	movs	r3, #0
 802037a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 802037c:	68fb      	ldr	r3, [r7, #12]
 802037e:	681b      	ldr	r3, [r3, #0]
 8020380:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8020382:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020386:	2b00      	cmp	r3, #0
 8020388:	d196      	bne.n	80202b8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 802038a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 802038c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8020390:	4413      	add	r3, r2
 8020392:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8020394:	68bb      	ldr	r3, [r7, #8]
 8020396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020398:	f1a3 0213 	sub.w	r2, r3, #19
 802039c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80203a0:	429a      	cmp	r2, r3
 80203a2:	bfcc      	ite	gt
 80203a4:	2301      	movgt	r3, #1
 80203a6:	2300      	movle	r3, #0
 80203a8:	b2db      	uxtb	r3, r3
 80203aa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80203ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80203b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80203b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80203b6:	6a3b      	ldr	r3, [r7, #32]
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	d002      	beq.n	80203c2 <ip4_frag+0x1f6>
 80203bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203be:	2b00      	cmp	r3, #0
 80203c0:	d003      	beq.n	80203ca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80203c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80203c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80203c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80203ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80203cc:	4618      	mov	r0, r3
 80203ce:	f7f1 ff45 	bl	801225c <lwip_htons>
 80203d2:	4603      	mov	r3, r0
 80203d4:	461a      	mov	r2, r3
 80203d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203d8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80203da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80203dc:	3314      	adds	r3, #20
 80203de:	b29b      	uxth	r3, r3
 80203e0:	4618      	mov	r0, r3
 80203e2:	f7f1 ff3b 	bl	801225c <lwip_htons>
 80203e6:	4603      	mov	r3, r0
 80203e8:	461a      	mov	r2, r3
 80203ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203ec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80203ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203f0:	2200      	movs	r2, #0
 80203f2:	729a      	strb	r2, [r3, #10]
 80203f4:	2200      	movs	r2, #0
 80203f6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80203f8:	68bb      	ldr	r3, [r7, #8]
 80203fa:	695b      	ldr	r3, [r3, #20]
 80203fc:	687a      	ldr	r2, [r7, #4]
 80203fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020400:	68b8      	ldr	r0, [r7, #8]
 8020402:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8020404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020406:	f7f4 fab7 	bl	8014978 <pbuf_free>
    left = (u16_t)(left - fragsize);
 802040a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802040e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8020410:	1ad3      	subs	r3, r2, r3
 8020412:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8020416:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 802041a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802041c:	4413      	add	r3, r2
 802041e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8020422:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020426:	2b00      	cmp	r3, #0
 8020428:	f47f af19 	bne.w	802025e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802042c:	2300      	movs	r3, #0
 802042e:	e002      	b.n	8020436 <ip4_frag+0x26a>
      goto memerr;
 8020430:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8020432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020436:	4618      	mov	r0, r3
 8020438:	3748      	adds	r7, #72	; 0x48
 802043a:	46bd      	mov	sp, r7
 802043c:	bd80      	pop	{r7, pc}
 802043e:	bf00      	nop
 8020440:	0802605c 	.word	0x0802605c
 8020444:	08026238 	.word	0x08026238
 8020448:	080260a4 	.word	0x080260a4
 802044c:	08026254 	.word	0x08026254
 8020450:	08026274 	.word	0x08026274
 8020454:	08020165 	.word	0x08020165

08020458 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8020458:	b580      	push	{r7, lr}
 802045a:	b086      	sub	sp, #24
 802045c:	af00      	add	r7, sp, #0
 802045e:	6078      	str	r0, [r7, #4]
 8020460:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8020462:	230e      	movs	r3, #14
 8020464:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	895b      	ldrh	r3, [r3, #10]
 802046a:	2b0e      	cmp	r3, #14
 802046c:	d96e      	bls.n	802054c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	7bdb      	ldrb	r3, [r3, #15]
 8020472:	2b00      	cmp	r3, #0
 8020474:	d106      	bne.n	8020484 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8020476:	683b      	ldr	r3, [r7, #0]
 8020478:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802047c:	3301      	adds	r3, #1
 802047e:	b2da      	uxtb	r2, r3
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	685b      	ldr	r3, [r3, #4]
 8020488:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 802048a:	693b      	ldr	r3, [r7, #16]
 802048c:	7b1a      	ldrb	r2, [r3, #12]
 802048e:	7b5b      	ldrb	r3, [r3, #13]
 8020490:	021b      	lsls	r3, r3, #8
 8020492:	4313      	orrs	r3, r2
 8020494:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8020496:	693b      	ldr	r3, [r7, #16]
 8020498:	781b      	ldrb	r3, [r3, #0]
 802049a:	f003 0301 	and.w	r3, r3, #1
 802049e:	2b00      	cmp	r3, #0
 80204a0:	d023      	beq.n	80204ea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80204a2:	693b      	ldr	r3, [r7, #16]
 80204a4:	781b      	ldrb	r3, [r3, #0]
 80204a6:	2b01      	cmp	r3, #1
 80204a8:	d10f      	bne.n	80204ca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80204aa:	693b      	ldr	r3, [r7, #16]
 80204ac:	785b      	ldrb	r3, [r3, #1]
 80204ae:	2b00      	cmp	r3, #0
 80204b0:	d11b      	bne.n	80204ea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80204b2:	693b      	ldr	r3, [r7, #16]
 80204b4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80204b6:	2b5e      	cmp	r3, #94	; 0x5e
 80204b8:	d117      	bne.n	80204ea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80204ba:	687b      	ldr	r3, [r7, #4]
 80204bc:	7b5b      	ldrb	r3, [r3, #13]
 80204be:	f043 0310 	orr.w	r3, r3, #16
 80204c2:	b2da      	uxtb	r2, r3
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	735a      	strb	r2, [r3, #13]
 80204c8:	e00f      	b.n	80204ea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80204ca:	693b      	ldr	r3, [r7, #16]
 80204cc:	2206      	movs	r2, #6
 80204ce:	4928      	ldr	r1, [pc, #160]	; (8020570 <ethernet_input+0x118>)
 80204d0:	4618      	mov	r0, r3
 80204d2:	f000 fb83 	bl	8020bdc <memcmp>
 80204d6:	4603      	mov	r3, r0
 80204d8:	2b00      	cmp	r3, #0
 80204da:	d106      	bne.n	80204ea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	7b5b      	ldrb	r3, [r3, #13]
 80204e0:	f043 0308 	orr.w	r3, r3, #8
 80204e4:	b2da      	uxtb	r2, r3
 80204e6:	687b      	ldr	r3, [r7, #4]
 80204e8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80204ea:	89fb      	ldrh	r3, [r7, #14]
 80204ec:	2b08      	cmp	r3, #8
 80204ee:	d003      	beq.n	80204f8 <ethernet_input+0xa0>
 80204f0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80204f4:	d014      	beq.n	8020520 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80204f6:	e032      	b.n	802055e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80204f8:	683b      	ldr	r3, [r7, #0]
 80204fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80204fe:	f003 0308 	and.w	r3, r3, #8
 8020502:	2b00      	cmp	r3, #0
 8020504:	d024      	beq.n	8020550 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020506:	8afb      	ldrh	r3, [r7, #22]
 8020508:	4619      	mov	r1, r3
 802050a:	6878      	ldr	r0, [r7, #4]
 802050c:	f7f4 f9ae 	bl	801486c <pbuf_remove_header>
 8020510:	4603      	mov	r3, r0
 8020512:	2b00      	cmp	r3, #0
 8020514:	d11e      	bne.n	8020554 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8020516:	6839      	ldr	r1, [r7, #0]
 8020518:	6878      	ldr	r0, [r7, #4]
 802051a:	f7fe fddf 	bl	801f0dc <ip4_input>
      break;
 802051e:	e013      	b.n	8020548 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020520:	683b      	ldr	r3, [r7, #0]
 8020522:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020526:	f003 0308 	and.w	r3, r3, #8
 802052a:	2b00      	cmp	r3, #0
 802052c:	d014      	beq.n	8020558 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802052e:	8afb      	ldrh	r3, [r7, #22]
 8020530:	4619      	mov	r1, r3
 8020532:	6878      	ldr	r0, [r7, #4]
 8020534:	f7f4 f99a 	bl	801486c <pbuf_remove_header>
 8020538:	4603      	mov	r3, r0
 802053a:	2b00      	cmp	r3, #0
 802053c:	d10e      	bne.n	802055c <ethernet_input+0x104>
        etharp_input(p, netif);
 802053e:	6839      	ldr	r1, [r7, #0]
 8020540:	6878      	ldr	r0, [r7, #4]
 8020542:	f7fd ff7b 	bl	801e43c <etharp_input>
      break;
 8020546:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8020548:	2300      	movs	r3, #0
 802054a:	e00c      	b.n	8020566 <ethernet_input+0x10e>
    goto free_and_return;
 802054c:	bf00      	nop
 802054e:	e006      	b.n	802055e <ethernet_input+0x106>
        goto free_and_return;
 8020550:	bf00      	nop
 8020552:	e004      	b.n	802055e <ethernet_input+0x106>
        goto free_and_return;
 8020554:	bf00      	nop
 8020556:	e002      	b.n	802055e <ethernet_input+0x106>
        goto free_and_return;
 8020558:	bf00      	nop
 802055a:	e000      	b.n	802055e <ethernet_input+0x106>
        goto free_and_return;
 802055c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802055e:	6878      	ldr	r0, [r7, #4]
 8020560:	f7f4 fa0a 	bl	8014978 <pbuf_free>
  return ERR_OK;
 8020564:	2300      	movs	r3, #0
}
 8020566:	4618      	mov	r0, r3
 8020568:	3718      	adds	r7, #24
 802056a:	46bd      	mov	sp, r7
 802056c:	bd80      	pop	{r7, pc}
 802056e:	bf00      	nop
 8020570:	0802668c 	.word	0x0802668c

08020574 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8020574:	b580      	push	{r7, lr}
 8020576:	b086      	sub	sp, #24
 8020578:	af00      	add	r7, sp, #0
 802057a:	60f8      	str	r0, [r7, #12]
 802057c:	60b9      	str	r1, [r7, #8]
 802057e:	607a      	str	r2, [r7, #4]
 8020580:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8020582:	8c3b      	ldrh	r3, [r7, #32]
 8020584:	4618      	mov	r0, r3
 8020586:	f7f1 fe69 	bl	801225c <lwip_htons>
 802058a:	4603      	mov	r3, r0
 802058c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802058e:	210e      	movs	r1, #14
 8020590:	68b8      	ldr	r0, [r7, #8]
 8020592:	f7f4 f95b 	bl	801484c <pbuf_add_header>
 8020596:	4603      	mov	r3, r0
 8020598:	2b00      	cmp	r3, #0
 802059a:	d125      	bne.n	80205e8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 802059c:	68bb      	ldr	r3, [r7, #8]
 802059e:	685b      	ldr	r3, [r3, #4]
 80205a0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80205a2:	693b      	ldr	r3, [r7, #16]
 80205a4:	8afa      	ldrh	r2, [r7, #22]
 80205a6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80205a8:	693b      	ldr	r3, [r7, #16]
 80205aa:	2206      	movs	r2, #6
 80205ac:	6839      	ldr	r1, [r7, #0]
 80205ae:	4618      	mov	r0, r3
 80205b0:	f000 fb22 	bl	8020bf8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80205b4:	693b      	ldr	r3, [r7, #16]
 80205b6:	3306      	adds	r3, #6
 80205b8:	2206      	movs	r2, #6
 80205ba:	6879      	ldr	r1, [r7, #4]
 80205bc:	4618      	mov	r0, r3
 80205be:	f000 fb1b 	bl	8020bf8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80205c2:	68fb      	ldr	r3, [r7, #12]
 80205c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80205c8:	2b06      	cmp	r3, #6
 80205ca:	d006      	beq.n	80205da <ethernet_output+0x66>
 80205cc:	4b0a      	ldr	r3, [pc, #40]	; (80205f8 <ethernet_output+0x84>)
 80205ce:	f44f 7299 	mov.w	r2, #306	; 0x132
 80205d2:	490a      	ldr	r1, [pc, #40]	; (80205fc <ethernet_output+0x88>)
 80205d4:	480a      	ldr	r0, [pc, #40]	; (8020600 <ethernet_output+0x8c>)
 80205d6:	f000 fbf9 	bl	8020dcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80205da:	68fb      	ldr	r3, [r7, #12]
 80205dc:	699b      	ldr	r3, [r3, #24]
 80205de:	68b9      	ldr	r1, [r7, #8]
 80205e0:	68f8      	ldr	r0, [r7, #12]
 80205e2:	4798      	blx	r3
 80205e4:	4603      	mov	r3, r0
 80205e6:	e002      	b.n	80205ee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80205e8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80205ea:	f06f 0301 	mvn.w	r3, #1
}
 80205ee:	4618      	mov	r0, r3
 80205f0:	3718      	adds	r7, #24
 80205f2:	46bd      	mov	sp, r7
 80205f4:	bd80      	pop	{r7, pc}
 80205f6:	bf00      	nop
 80205f8:	08026284 	.word	0x08026284
 80205fc:	080262bc 	.word	0x080262bc
 8020600:	080262f0 	.word	0x080262f0

08020604 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8020604:	b580      	push	{r7, lr}
 8020606:	b082      	sub	sp, #8
 8020608:	af00      	add	r7, sp, #0
 802060a:	6078      	str	r0, [r7, #4]
 802060c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 802060e:	683b      	ldr	r3, [r7, #0]
 8020610:	2200      	movs	r2, #0
 8020612:	2104      	movs	r1, #4
 8020614:	4618      	mov	r0, r3
 8020616:	f7eb fb7f 	bl	800bd18 <osMessageQueueNew>
 802061a:	4602      	mov	r2, r0
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8020620:	687b      	ldr	r3, [r7, #4]
 8020622:	681b      	ldr	r3, [r3, #0]
 8020624:	2b00      	cmp	r3, #0
 8020626:	d102      	bne.n	802062e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8020628:	f04f 33ff 	mov.w	r3, #4294967295
 802062c:	e000      	b.n	8020630 <sys_mbox_new+0x2c>

  return ERR_OK;
 802062e:	2300      	movs	r3, #0
}
 8020630:	4618      	mov	r0, r3
 8020632:	3708      	adds	r7, #8
 8020634:	46bd      	mov	sp, r7
 8020636:	bd80      	pop	{r7, pc}

08020638 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8020638:	b580      	push	{r7, lr}
 802063a:	b082      	sub	sp, #8
 802063c:	af00      	add	r7, sp, #0
 802063e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	681b      	ldr	r3, [r3, #0]
 8020644:	4618      	mov	r0, r3
 8020646:	f7eb fc99 	bl	800bf7c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 802064a:	687b      	ldr	r3, [r7, #4]
 802064c:	681b      	ldr	r3, [r3, #0]
 802064e:	4618      	mov	r0, r3
 8020650:	f7eb fcd6 	bl	800c000 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8020654:	bf00      	nop
 8020656:	3708      	adds	r7, #8
 8020658:	46bd      	mov	sp, r7
 802065a:	bd80      	pop	{r7, pc}

0802065c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 802065c:	b580      	push	{r7, lr}
 802065e:	b084      	sub	sp, #16
 8020660:	af00      	add	r7, sp, #0
 8020662:	6078      	str	r0, [r7, #4]
 8020664:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8020666:	687b      	ldr	r3, [r7, #4]
 8020668:	6818      	ldr	r0, [r3, #0]
 802066a:	4639      	mov	r1, r7
 802066c:	2300      	movs	r3, #0
 802066e:	2200      	movs	r2, #0
 8020670:	f7eb fbc6 	bl	800be00 <osMessageQueuePut>
 8020674:	4603      	mov	r3, r0
 8020676:	2b00      	cmp	r3, #0
 8020678:	d102      	bne.n	8020680 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 802067a:	2300      	movs	r3, #0
 802067c:	73fb      	strb	r3, [r7, #15]
 802067e:	e001      	b.n	8020684 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8020680:	23ff      	movs	r3, #255	; 0xff
 8020682:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8020684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020688:	4618      	mov	r0, r3
 802068a:	3710      	adds	r7, #16
 802068c:	46bd      	mov	sp, r7
 802068e:	bd80      	pop	{r7, pc}

08020690 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8020690:	b580      	push	{r7, lr}
 8020692:	b086      	sub	sp, #24
 8020694:	af00      	add	r7, sp, #0
 8020696:	60f8      	str	r0, [r7, #12]
 8020698:	60b9      	str	r1, [r7, #8]
 802069a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 802069c:	f7ea fdf6 	bl	800b28c <osKernelGetTickCount>
 80206a0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80206a2:	687b      	ldr	r3, [r7, #4]
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	d013      	beq.n	80206d0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80206a8:	68fb      	ldr	r3, [r7, #12]
 80206aa:	6818      	ldr	r0, [r3, #0]
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	2200      	movs	r2, #0
 80206b0:	68b9      	ldr	r1, [r7, #8]
 80206b2:	f7eb fc05 	bl	800bec0 <osMessageQueueGet>
 80206b6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80206b8:	693b      	ldr	r3, [r7, #16]
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	d105      	bne.n	80206ca <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80206be:	f7ea fde5 	bl	800b28c <osKernelGetTickCount>
 80206c2:	4602      	mov	r2, r0
 80206c4:	697b      	ldr	r3, [r7, #20]
 80206c6:	1ad3      	subs	r3, r2, r3
 80206c8:	e00f      	b.n	80206ea <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80206ca:	f04f 33ff 	mov.w	r3, #4294967295
 80206ce:	e00c      	b.n	80206ea <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80206d0:	68fb      	ldr	r3, [r7, #12]
 80206d2:	6818      	ldr	r0, [r3, #0]
 80206d4:	f04f 33ff 	mov.w	r3, #4294967295
 80206d8:	2200      	movs	r2, #0
 80206da:	68b9      	ldr	r1, [r7, #8]
 80206dc:	f7eb fbf0 	bl	800bec0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80206e0:	f7ea fdd4 	bl	800b28c <osKernelGetTickCount>
 80206e4:	4602      	mov	r2, r0
 80206e6:	697b      	ldr	r3, [r7, #20]
 80206e8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80206ea:	4618      	mov	r0, r3
 80206ec:	3718      	adds	r7, #24
 80206ee:	46bd      	mov	sp, r7
 80206f0:	bd80      	pop	{r7, pc}

080206f2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80206f2:	b580      	push	{r7, lr}
 80206f4:	b082      	sub	sp, #8
 80206f6:	af00      	add	r7, sp, #0
 80206f8:	6078      	str	r0, [r7, #4]
 80206fa:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	6818      	ldr	r0, [r3, #0]
 8020700:	2300      	movs	r3, #0
 8020702:	2200      	movs	r2, #0
 8020704:	6839      	ldr	r1, [r7, #0]
 8020706:	f7eb fbdb 	bl	800bec0 <osMessageQueueGet>
 802070a:	4603      	mov	r3, r0
 802070c:	2b00      	cmp	r3, #0
 802070e:	d101      	bne.n	8020714 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8020710:	2300      	movs	r3, #0
 8020712:	e001      	b.n	8020718 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8020714:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8020718:	4618      	mov	r0, r3
 802071a:	3708      	adds	r7, #8
 802071c:	46bd      	mov	sp, r7
 802071e:	bd80      	pop	{r7, pc}

08020720 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8020720:	b480      	push	{r7}
 8020722:	b083      	sub	sp, #12
 8020724:	af00      	add	r7, sp, #0
 8020726:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8020728:	687b      	ldr	r3, [r7, #4]
 802072a:	681b      	ldr	r3, [r3, #0]
 802072c:	2b00      	cmp	r3, #0
 802072e:	d101      	bne.n	8020734 <sys_mbox_valid+0x14>
    return 0;
 8020730:	2300      	movs	r3, #0
 8020732:	e000      	b.n	8020736 <sys_mbox_valid+0x16>
  else
    return 1;
 8020734:	2301      	movs	r3, #1
}
 8020736:	4618      	mov	r0, r3
 8020738:	370c      	adds	r7, #12
 802073a:	46bd      	mov	sp, r7
 802073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020740:	4770      	bx	lr

08020742 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8020742:	b480      	push	{r7}
 8020744:	b083      	sub	sp, #12
 8020746:	af00      	add	r7, sp, #0
 8020748:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 802074a:	687b      	ldr	r3, [r7, #4]
 802074c:	2200      	movs	r2, #0
 802074e:	601a      	str	r2, [r3, #0]
}
 8020750:	bf00      	nop
 8020752:	370c      	adds	r7, #12
 8020754:	46bd      	mov	sp, r7
 8020756:	f85d 7b04 	ldr.w	r7, [sp], #4
 802075a:	4770      	bx	lr

0802075c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 802075c:	b580      	push	{r7, lr}
 802075e:	b082      	sub	sp, #8
 8020760:	af00      	add	r7, sp, #0
 8020762:	6078      	str	r0, [r7, #4]
 8020764:	460b      	mov	r3, r1
 8020766:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8020768:	78fb      	ldrb	r3, [r7, #3]
 802076a:	2200      	movs	r2, #0
 802076c:	4619      	mov	r1, r3
 802076e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8020772:	f7eb f98e 	bl	800ba92 <osSemaphoreNew>
 8020776:	4602      	mov	r2, r0
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 802077c:	687b      	ldr	r3, [r7, #4]
 802077e:	681b      	ldr	r3, [r3, #0]
 8020780:	2b00      	cmp	r3, #0
 8020782:	d102      	bne.n	802078a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8020784:	f04f 33ff 	mov.w	r3, #4294967295
 8020788:	e009      	b.n	802079e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 802078a:	78fb      	ldrb	r3, [r7, #3]
 802078c:	2b00      	cmp	r3, #0
 802078e:	d105      	bne.n	802079c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8020790:	687b      	ldr	r3, [r7, #4]
 8020792:	681b      	ldr	r3, [r3, #0]
 8020794:	2100      	movs	r1, #0
 8020796:	4618      	mov	r0, r3
 8020798:	f7eb fa04 	bl	800bba4 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 802079c:	2300      	movs	r3, #0
}
 802079e:	4618      	mov	r0, r3
 80207a0:	3708      	adds	r7, #8
 80207a2:	46bd      	mov	sp, r7
 80207a4:	bd80      	pop	{r7, pc}

080207a6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80207a6:	b580      	push	{r7, lr}
 80207a8:	b084      	sub	sp, #16
 80207aa:	af00      	add	r7, sp, #0
 80207ac:	6078      	str	r0, [r7, #4]
 80207ae:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80207b0:	f7ea fd6c 	bl	800b28c <osKernelGetTickCount>
 80207b4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80207b6:	683b      	ldr	r3, [r7, #0]
 80207b8:	2b00      	cmp	r3, #0
 80207ba:	d011      	beq.n	80207e0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80207bc:	687b      	ldr	r3, [r7, #4]
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	6839      	ldr	r1, [r7, #0]
 80207c2:	4618      	mov	r0, r3
 80207c4:	f7eb f9ee 	bl	800bba4 <osSemaphoreAcquire>
 80207c8:	4603      	mov	r3, r0
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	d105      	bne.n	80207da <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80207ce:	f7ea fd5d 	bl	800b28c <osKernelGetTickCount>
 80207d2:	4602      	mov	r2, r0
 80207d4:	68fb      	ldr	r3, [r7, #12]
 80207d6:	1ad3      	subs	r3, r2, r3
 80207d8:	e012      	b.n	8020800 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80207da:	f04f 33ff 	mov.w	r3, #4294967295
 80207de:	e00f      	b.n	8020800 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80207e0:	bf00      	nop
 80207e2:	687b      	ldr	r3, [r7, #4]
 80207e4:	681b      	ldr	r3, [r3, #0]
 80207e6:	f04f 31ff 	mov.w	r1, #4294967295
 80207ea:	4618      	mov	r0, r3
 80207ec:	f7eb f9da 	bl	800bba4 <osSemaphoreAcquire>
 80207f0:	4603      	mov	r3, r0
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d1f5      	bne.n	80207e2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80207f6:	f7ea fd49 	bl	800b28c <osKernelGetTickCount>
 80207fa:	4602      	mov	r2, r0
 80207fc:	68fb      	ldr	r3, [r7, #12]
 80207fe:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8020800:	4618      	mov	r0, r3
 8020802:	3710      	adds	r7, #16
 8020804:	46bd      	mov	sp, r7
 8020806:	bd80      	pop	{r7, pc}

08020808 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8020808:	b580      	push	{r7, lr}
 802080a:	b082      	sub	sp, #8
 802080c:	af00      	add	r7, sp, #0
 802080e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	681b      	ldr	r3, [r3, #0]
 8020814:	4618      	mov	r0, r3
 8020816:	f7eb fa17 	bl	800bc48 <osSemaphoreRelease>
}
 802081a:	bf00      	nop
 802081c:	3708      	adds	r7, #8
 802081e:	46bd      	mov	sp, r7
 8020820:	bd80      	pop	{r7, pc}

08020822 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8020822:	b580      	push	{r7, lr}
 8020824:	b082      	sub	sp, #8
 8020826:	af00      	add	r7, sp, #0
 8020828:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 802082a:	687b      	ldr	r3, [r7, #4]
 802082c:	681b      	ldr	r3, [r3, #0]
 802082e:	4618      	mov	r0, r3
 8020830:	f7eb fa4e 	bl	800bcd0 <osSemaphoreDelete>
}
 8020834:	bf00      	nop
 8020836:	3708      	adds	r7, #8
 8020838:	46bd      	mov	sp, r7
 802083a:	bd80      	pop	{r7, pc}

0802083c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 802083c:	b480      	push	{r7}
 802083e:	b083      	sub	sp, #12
 8020840:	af00      	add	r7, sp, #0
 8020842:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8020844:	687b      	ldr	r3, [r7, #4]
 8020846:	681b      	ldr	r3, [r3, #0]
 8020848:	2b00      	cmp	r3, #0
 802084a:	d101      	bne.n	8020850 <sys_sem_valid+0x14>
    return 0;
 802084c:	2300      	movs	r3, #0
 802084e:	e000      	b.n	8020852 <sys_sem_valid+0x16>
  else
    return 1;
 8020850:	2301      	movs	r3, #1
}
 8020852:	4618      	mov	r0, r3
 8020854:	370c      	adds	r7, #12
 8020856:	46bd      	mov	sp, r7
 8020858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802085c:	4770      	bx	lr

0802085e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 802085e:	b480      	push	{r7}
 8020860:	b083      	sub	sp, #12
 8020862:	af00      	add	r7, sp, #0
 8020864:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8020866:	687b      	ldr	r3, [r7, #4]
 8020868:	2200      	movs	r2, #0
 802086a:	601a      	str	r2, [r3, #0]
}
 802086c:	bf00      	nop
 802086e:	370c      	adds	r7, #12
 8020870:	46bd      	mov	sp, r7
 8020872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020876:	4770      	bx	lr

08020878 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8020878:	b580      	push	{r7, lr}
 802087a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 802087c:	2000      	movs	r0, #0
 802087e:	f7ea fffa 	bl	800b876 <osMutexNew>
 8020882:	4603      	mov	r3, r0
 8020884:	4a01      	ldr	r2, [pc, #4]	; (802088c <sys_init+0x14>)
 8020886:	6013      	str	r3, [r2, #0]
#endif
}
 8020888:	bf00      	nop
 802088a:	bd80      	pop	{r7, pc}
 802088c:	20016e04 	.word	0x20016e04

08020890 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8020890:	b580      	push	{r7, lr}
 8020892:	b082      	sub	sp, #8
 8020894:	af00      	add	r7, sp, #0
 8020896:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8020898:	2000      	movs	r0, #0
 802089a:	f7ea ffec 	bl	800b876 <osMutexNew>
 802089e:	4602      	mov	r2, r0
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80208a4:	687b      	ldr	r3, [r7, #4]
 80208a6:	681b      	ldr	r3, [r3, #0]
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	d102      	bne.n	80208b2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80208ac:	f04f 33ff 	mov.w	r3, #4294967295
 80208b0:	e000      	b.n	80208b4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80208b2:	2300      	movs	r3, #0
}
 80208b4:	4618      	mov	r0, r3
 80208b6:	3708      	adds	r7, #8
 80208b8:	46bd      	mov	sp, r7
 80208ba:	bd80      	pop	{r7, pc}

080208bc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80208bc:	b580      	push	{r7, lr}
 80208be:	b082      	sub	sp, #8
 80208c0:	af00      	add	r7, sp, #0
 80208c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	681b      	ldr	r3, [r3, #0]
 80208c8:	f04f 31ff 	mov.w	r1, #4294967295
 80208cc:	4618      	mov	r0, r3
 80208ce:	f7eb f858 	bl	800b982 <osMutexAcquire>
#endif
}
 80208d2:	bf00      	nop
 80208d4:	3708      	adds	r7, #8
 80208d6:	46bd      	mov	sp, r7
 80208d8:	bd80      	pop	{r7, pc}

080208da <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80208da:	b580      	push	{r7, lr}
 80208dc:	b082      	sub	sp, #8
 80208de:	af00      	add	r7, sp, #0
 80208e0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80208e2:	687b      	ldr	r3, [r7, #4]
 80208e4:	681b      	ldr	r3, [r3, #0]
 80208e6:	4618      	mov	r0, r3
 80208e8:	f7eb f896 	bl	800ba18 <osMutexRelease>
}
 80208ec:	bf00      	nop
 80208ee:	3708      	adds	r7, #8
 80208f0:	46bd      	mov	sp, r7
 80208f2:	bd80      	pop	{r7, pc}

080208f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80208f4:	b580      	push	{r7, lr}
 80208f6:	b08e      	sub	sp, #56	; 0x38
 80208f8:	af00      	add	r7, sp, #0
 80208fa:	60f8      	str	r0, [r7, #12]
 80208fc:	60b9      	str	r1, [r7, #8]
 80208fe:	607a      	str	r2, [r7, #4]
 8020900:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8020902:	f107 0314 	add.w	r3, r7, #20
 8020906:	2224      	movs	r2, #36	; 0x24
 8020908:	2100      	movs	r1, #0
 802090a:	4618      	mov	r0, r3
 802090c:	f000 f99c 	bl	8020c48 <memset>
 8020910:	68fb      	ldr	r3, [r7, #12]
 8020912:	617b      	str	r3, [r7, #20]
 8020914:	683b      	ldr	r3, [r7, #0]
 8020916:	62bb      	str	r3, [r7, #40]	; 0x28
 8020918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802091a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 802091c:	f107 0314 	add.w	r3, r7, #20
 8020920:	461a      	mov	r2, r3
 8020922:	6879      	ldr	r1, [r7, #4]
 8020924:	68b8      	ldr	r0, [r7, #8]
 8020926:	f7ea fcc6 	bl	800b2b6 <osThreadNew>
 802092a:	4603      	mov	r3, r0
#endif
}
 802092c:	4618      	mov	r0, r3
 802092e:	3738      	adds	r7, #56	; 0x38
 8020930:	46bd      	mov	sp, r7
 8020932:	bd80      	pop	{r7, pc}

08020934 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8020934:	b580      	push	{r7, lr}
 8020936:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8020938:	4b04      	ldr	r3, [pc, #16]	; (802094c <sys_arch_protect+0x18>)
 802093a:	681b      	ldr	r3, [r3, #0]
 802093c:	f04f 31ff 	mov.w	r1, #4294967295
 8020940:	4618      	mov	r0, r3
 8020942:	f7eb f81e 	bl	800b982 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8020946:	2301      	movs	r3, #1
}
 8020948:	4618      	mov	r0, r3
 802094a:	bd80      	pop	{r7, pc}
 802094c:	20016e04 	.word	0x20016e04

08020950 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8020950:	b580      	push	{r7, lr}
 8020952:	b082      	sub	sp, #8
 8020954:	af00      	add	r7, sp, #0
 8020956:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8020958:	4b04      	ldr	r3, [pc, #16]	; (802096c <sys_arch_unprotect+0x1c>)
 802095a:	681b      	ldr	r3, [r3, #0]
 802095c:	4618      	mov	r0, r3
 802095e:	f7eb f85b 	bl	800ba18 <osMutexRelease>
}
 8020962:	bf00      	nop
 8020964:	3708      	adds	r7, #8
 8020966:	46bd      	mov	sp, r7
 8020968:	bd80      	pop	{r7, pc}
 802096a:	bf00      	nop
 802096c:	20016e04 	.word	0x20016e04

08020970 <calloc>:
 8020970:	4b02      	ldr	r3, [pc, #8]	; (802097c <calloc+0xc>)
 8020972:	460a      	mov	r2, r1
 8020974:	4601      	mov	r1, r0
 8020976:	6818      	ldr	r0, [r3, #0]
 8020978:	f000 b96e 	b.w	8020c58 <_calloc_r>
 802097c:	20000504 	.word	0x20000504

08020980 <std>:
 8020980:	2300      	movs	r3, #0
 8020982:	b510      	push	{r4, lr}
 8020984:	4604      	mov	r4, r0
 8020986:	e9c0 3300 	strd	r3, r3, [r0]
 802098a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802098e:	6083      	str	r3, [r0, #8]
 8020990:	8181      	strh	r1, [r0, #12]
 8020992:	6643      	str	r3, [r0, #100]	; 0x64
 8020994:	81c2      	strh	r2, [r0, #14]
 8020996:	6183      	str	r3, [r0, #24]
 8020998:	4619      	mov	r1, r3
 802099a:	2208      	movs	r2, #8
 802099c:	305c      	adds	r0, #92	; 0x5c
 802099e:	f000 f953 	bl	8020c48 <memset>
 80209a2:	4b05      	ldr	r3, [pc, #20]	; (80209b8 <std+0x38>)
 80209a4:	6263      	str	r3, [r4, #36]	; 0x24
 80209a6:	4b05      	ldr	r3, [pc, #20]	; (80209bc <std+0x3c>)
 80209a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80209aa:	4b05      	ldr	r3, [pc, #20]	; (80209c0 <std+0x40>)
 80209ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80209ae:	4b05      	ldr	r3, [pc, #20]	; (80209c4 <std+0x44>)
 80209b0:	6224      	str	r4, [r4, #32]
 80209b2:	6323      	str	r3, [r4, #48]	; 0x30
 80209b4:	bd10      	pop	{r4, pc}
 80209b6:	bf00      	nop
 80209b8:	08021125 	.word	0x08021125
 80209bc:	08021147 	.word	0x08021147
 80209c0:	0802117f 	.word	0x0802117f
 80209c4:	080211a3 	.word	0x080211a3

080209c8 <_cleanup_r>:
 80209c8:	4901      	ldr	r1, [pc, #4]	; (80209d0 <_cleanup_r+0x8>)
 80209ca:	f000 b8af 	b.w	8020b2c <_fwalk_reent>
 80209ce:	bf00      	nop
 80209d0:	08021535 	.word	0x08021535

080209d4 <__sfmoreglue>:
 80209d4:	b570      	push	{r4, r5, r6, lr}
 80209d6:	1e4a      	subs	r2, r1, #1
 80209d8:	2568      	movs	r5, #104	; 0x68
 80209da:	4355      	muls	r5, r2
 80209dc:	460e      	mov	r6, r1
 80209de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80209e2:	f000 f999 	bl	8020d18 <_malloc_r>
 80209e6:	4604      	mov	r4, r0
 80209e8:	b140      	cbz	r0, 80209fc <__sfmoreglue+0x28>
 80209ea:	2100      	movs	r1, #0
 80209ec:	e9c0 1600 	strd	r1, r6, [r0]
 80209f0:	300c      	adds	r0, #12
 80209f2:	60a0      	str	r0, [r4, #8]
 80209f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80209f8:	f000 f926 	bl	8020c48 <memset>
 80209fc:	4620      	mov	r0, r4
 80209fe:	bd70      	pop	{r4, r5, r6, pc}

08020a00 <__sfp_lock_acquire>:
 8020a00:	4801      	ldr	r0, [pc, #4]	; (8020a08 <__sfp_lock_acquire+0x8>)
 8020a02:	f000 b8d8 	b.w	8020bb6 <__retarget_lock_acquire_recursive>
 8020a06:	bf00      	nop
 8020a08:	20016e10 	.word	0x20016e10

08020a0c <__sfp_lock_release>:
 8020a0c:	4801      	ldr	r0, [pc, #4]	; (8020a14 <__sfp_lock_release+0x8>)
 8020a0e:	f000 b8d3 	b.w	8020bb8 <__retarget_lock_release_recursive>
 8020a12:	bf00      	nop
 8020a14:	20016e10 	.word	0x20016e10

08020a18 <__sinit_lock_acquire>:
 8020a18:	4801      	ldr	r0, [pc, #4]	; (8020a20 <__sinit_lock_acquire+0x8>)
 8020a1a:	f000 b8cc 	b.w	8020bb6 <__retarget_lock_acquire_recursive>
 8020a1e:	bf00      	nop
 8020a20:	20016e0b 	.word	0x20016e0b

08020a24 <__sinit_lock_release>:
 8020a24:	4801      	ldr	r0, [pc, #4]	; (8020a2c <__sinit_lock_release+0x8>)
 8020a26:	f000 b8c7 	b.w	8020bb8 <__retarget_lock_release_recursive>
 8020a2a:	bf00      	nop
 8020a2c:	20016e0b 	.word	0x20016e0b

08020a30 <__sinit>:
 8020a30:	b510      	push	{r4, lr}
 8020a32:	4604      	mov	r4, r0
 8020a34:	f7ff fff0 	bl	8020a18 <__sinit_lock_acquire>
 8020a38:	69a3      	ldr	r3, [r4, #24]
 8020a3a:	b11b      	cbz	r3, 8020a44 <__sinit+0x14>
 8020a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a40:	f7ff bff0 	b.w	8020a24 <__sinit_lock_release>
 8020a44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020a48:	6523      	str	r3, [r4, #80]	; 0x50
 8020a4a:	4b13      	ldr	r3, [pc, #76]	; (8020a98 <__sinit+0x68>)
 8020a4c:	4a13      	ldr	r2, [pc, #76]	; (8020a9c <__sinit+0x6c>)
 8020a4e:	681b      	ldr	r3, [r3, #0]
 8020a50:	62a2      	str	r2, [r4, #40]	; 0x28
 8020a52:	42a3      	cmp	r3, r4
 8020a54:	bf04      	itt	eq
 8020a56:	2301      	moveq	r3, #1
 8020a58:	61a3      	streq	r3, [r4, #24]
 8020a5a:	4620      	mov	r0, r4
 8020a5c:	f000 f820 	bl	8020aa0 <__sfp>
 8020a60:	6060      	str	r0, [r4, #4]
 8020a62:	4620      	mov	r0, r4
 8020a64:	f000 f81c 	bl	8020aa0 <__sfp>
 8020a68:	60a0      	str	r0, [r4, #8]
 8020a6a:	4620      	mov	r0, r4
 8020a6c:	f000 f818 	bl	8020aa0 <__sfp>
 8020a70:	2200      	movs	r2, #0
 8020a72:	60e0      	str	r0, [r4, #12]
 8020a74:	2104      	movs	r1, #4
 8020a76:	6860      	ldr	r0, [r4, #4]
 8020a78:	f7ff ff82 	bl	8020980 <std>
 8020a7c:	68a0      	ldr	r0, [r4, #8]
 8020a7e:	2201      	movs	r2, #1
 8020a80:	2109      	movs	r1, #9
 8020a82:	f7ff ff7d 	bl	8020980 <std>
 8020a86:	68e0      	ldr	r0, [r4, #12]
 8020a88:	2202      	movs	r2, #2
 8020a8a:	2112      	movs	r1, #18
 8020a8c:	f7ff ff78 	bl	8020980 <std>
 8020a90:	2301      	movs	r3, #1
 8020a92:	61a3      	str	r3, [r4, #24]
 8020a94:	e7d2      	b.n	8020a3c <__sinit+0xc>
 8020a96:	bf00      	nop
 8020a98:	080267fc 	.word	0x080267fc
 8020a9c:	080209c9 	.word	0x080209c9

08020aa0 <__sfp>:
 8020aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020aa2:	4607      	mov	r7, r0
 8020aa4:	f7ff ffac 	bl	8020a00 <__sfp_lock_acquire>
 8020aa8:	4b1e      	ldr	r3, [pc, #120]	; (8020b24 <__sfp+0x84>)
 8020aaa:	681e      	ldr	r6, [r3, #0]
 8020aac:	69b3      	ldr	r3, [r6, #24]
 8020aae:	b913      	cbnz	r3, 8020ab6 <__sfp+0x16>
 8020ab0:	4630      	mov	r0, r6
 8020ab2:	f7ff ffbd 	bl	8020a30 <__sinit>
 8020ab6:	3648      	adds	r6, #72	; 0x48
 8020ab8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020abc:	3b01      	subs	r3, #1
 8020abe:	d503      	bpl.n	8020ac8 <__sfp+0x28>
 8020ac0:	6833      	ldr	r3, [r6, #0]
 8020ac2:	b30b      	cbz	r3, 8020b08 <__sfp+0x68>
 8020ac4:	6836      	ldr	r6, [r6, #0]
 8020ac6:	e7f7      	b.n	8020ab8 <__sfp+0x18>
 8020ac8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020acc:	b9d5      	cbnz	r5, 8020b04 <__sfp+0x64>
 8020ace:	4b16      	ldr	r3, [pc, #88]	; (8020b28 <__sfp+0x88>)
 8020ad0:	60e3      	str	r3, [r4, #12]
 8020ad2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020ad6:	6665      	str	r5, [r4, #100]	; 0x64
 8020ad8:	f000 f86c 	bl	8020bb4 <__retarget_lock_init_recursive>
 8020adc:	f7ff ff96 	bl	8020a0c <__sfp_lock_release>
 8020ae0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020ae4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020ae8:	6025      	str	r5, [r4, #0]
 8020aea:	61a5      	str	r5, [r4, #24]
 8020aec:	2208      	movs	r2, #8
 8020aee:	4629      	mov	r1, r5
 8020af0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020af4:	f000 f8a8 	bl	8020c48 <memset>
 8020af8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020afc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020b00:	4620      	mov	r0, r4
 8020b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b04:	3468      	adds	r4, #104	; 0x68
 8020b06:	e7d9      	b.n	8020abc <__sfp+0x1c>
 8020b08:	2104      	movs	r1, #4
 8020b0a:	4638      	mov	r0, r7
 8020b0c:	f7ff ff62 	bl	80209d4 <__sfmoreglue>
 8020b10:	4604      	mov	r4, r0
 8020b12:	6030      	str	r0, [r6, #0]
 8020b14:	2800      	cmp	r0, #0
 8020b16:	d1d5      	bne.n	8020ac4 <__sfp+0x24>
 8020b18:	f7ff ff78 	bl	8020a0c <__sfp_lock_release>
 8020b1c:	230c      	movs	r3, #12
 8020b1e:	603b      	str	r3, [r7, #0]
 8020b20:	e7ee      	b.n	8020b00 <__sfp+0x60>
 8020b22:	bf00      	nop
 8020b24:	080267fc 	.word	0x080267fc
 8020b28:	ffff0001 	.word	0xffff0001

08020b2c <_fwalk_reent>:
 8020b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020b30:	4606      	mov	r6, r0
 8020b32:	4688      	mov	r8, r1
 8020b34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020b38:	2700      	movs	r7, #0
 8020b3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020b3e:	f1b9 0901 	subs.w	r9, r9, #1
 8020b42:	d505      	bpl.n	8020b50 <_fwalk_reent+0x24>
 8020b44:	6824      	ldr	r4, [r4, #0]
 8020b46:	2c00      	cmp	r4, #0
 8020b48:	d1f7      	bne.n	8020b3a <_fwalk_reent+0xe>
 8020b4a:	4638      	mov	r0, r7
 8020b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020b50:	89ab      	ldrh	r3, [r5, #12]
 8020b52:	2b01      	cmp	r3, #1
 8020b54:	d907      	bls.n	8020b66 <_fwalk_reent+0x3a>
 8020b56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020b5a:	3301      	adds	r3, #1
 8020b5c:	d003      	beq.n	8020b66 <_fwalk_reent+0x3a>
 8020b5e:	4629      	mov	r1, r5
 8020b60:	4630      	mov	r0, r6
 8020b62:	47c0      	blx	r8
 8020b64:	4307      	orrs	r7, r0
 8020b66:	3568      	adds	r5, #104	; 0x68
 8020b68:	e7e9      	b.n	8020b3e <_fwalk_reent+0x12>
	...

08020b6c <__libc_init_array>:
 8020b6c:	b570      	push	{r4, r5, r6, lr}
 8020b6e:	4d0d      	ldr	r5, [pc, #52]	; (8020ba4 <__libc_init_array+0x38>)
 8020b70:	4c0d      	ldr	r4, [pc, #52]	; (8020ba8 <__libc_init_array+0x3c>)
 8020b72:	1b64      	subs	r4, r4, r5
 8020b74:	10a4      	asrs	r4, r4, #2
 8020b76:	2600      	movs	r6, #0
 8020b78:	42a6      	cmp	r6, r4
 8020b7a:	d109      	bne.n	8020b90 <__libc_init_array+0x24>
 8020b7c:	4d0b      	ldr	r5, [pc, #44]	; (8020bac <__libc_init_array+0x40>)
 8020b7e:	4c0c      	ldr	r4, [pc, #48]	; (8020bb0 <__libc_init_array+0x44>)
 8020b80:	f001 fb02 	bl	8022188 <_init>
 8020b84:	1b64      	subs	r4, r4, r5
 8020b86:	10a4      	asrs	r4, r4, #2
 8020b88:	2600      	movs	r6, #0
 8020b8a:	42a6      	cmp	r6, r4
 8020b8c:	d105      	bne.n	8020b9a <__libc_init_array+0x2e>
 8020b8e:	bd70      	pop	{r4, r5, r6, pc}
 8020b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8020b94:	4798      	blx	r3
 8020b96:	3601      	adds	r6, #1
 8020b98:	e7ee      	b.n	8020b78 <__libc_init_array+0xc>
 8020b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8020b9e:	4798      	blx	r3
 8020ba0:	3601      	adds	r6, #1
 8020ba2:	e7f2      	b.n	8020b8a <__libc_init_array+0x1e>
 8020ba4:	080268f0 	.word	0x080268f0
 8020ba8:	080268f0 	.word	0x080268f0
 8020bac:	080268f0 	.word	0x080268f0
 8020bb0:	080268f4 	.word	0x080268f4

08020bb4 <__retarget_lock_init_recursive>:
 8020bb4:	4770      	bx	lr

08020bb6 <__retarget_lock_acquire_recursive>:
 8020bb6:	4770      	bx	lr

08020bb8 <__retarget_lock_release_recursive>:
 8020bb8:	4770      	bx	lr
	...

08020bbc <malloc>:
 8020bbc:	4b02      	ldr	r3, [pc, #8]	; (8020bc8 <malloc+0xc>)
 8020bbe:	4601      	mov	r1, r0
 8020bc0:	6818      	ldr	r0, [r3, #0]
 8020bc2:	f000 b8a9 	b.w	8020d18 <_malloc_r>
 8020bc6:	bf00      	nop
 8020bc8:	20000504 	.word	0x20000504

08020bcc <free>:
 8020bcc:	4b02      	ldr	r3, [pc, #8]	; (8020bd8 <free+0xc>)
 8020bce:	4601      	mov	r1, r0
 8020bd0:	6818      	ldr	r0, [r3, #0]
 8020bd2:	f000 b851 	b.w	8020c78 <_free_r>
 8020bd6:	bf00      	nop
 8020bd8:	20000504 	.word	0x20000504

08020bdc <memcmp>:
 8020bdc:	b530      	push	{r4, r5, lr}
 8020bde:	3901      	subs	r1, #1
 8020be0:	2400      	movs	r4, #0
 8020be2:	42a2      	cmp	r2, r4
 8020be4:	d101      	bne.n	8020bea <memcmp+0xe>
 8020be6:	2000      	movs	r0, #0
 8020be8:	e005      	b.n	8020bf6 <memcmp+0x1a>
 8020bea:	5d03      	ldrb	r3, [r0, r4]
 8020bec:	3401      	adds	r4, #1
 8020bee:	5d0d      	ldrb	r5, [r1, r4]
 8020bf0:	42ab      	cmp	r3, r5
 8020bf2:	d0f6      	beq.n	8020be2 <memcmp+0x6>
 8020bf4:	1b58      	subs	r0, r3, r5
 8020bf6:	bd30      	pop	{r4, r5, pc}

08020bf8 <memcpy>:
 8020bf8:	440a      	add	r2, r1
 8020bfa:	4291      	cmp	r1, r2
 8020bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c00:	d100      	bne.n	8020c04 <memcpy+0xc>
 8020c02:	4770      	bx	lr
 8020c04:	b510      	push	{r4, lr}
 8020c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020c0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020c0e:	4291      	cmp	r1, r2
 8020c10:	d1f9      	bne.n	8020c06 <memcpy+0xe>
 8020c12:	bd10      	pop	{r4, pc}

08020c14 <memmove>:
 8020c14:	4288      	cmp	r0, r1
 8020c16:	b510      	push	{r4, lr}
 8020c18:	eb01 0402 	add.w	r4, r1, r2
 8020c1c:	d902      	bls.n	8020c24 <memmove+0x10>
 8020c1e:	4284      	cmp	r4, r0
 8020c20:	4623      	mov	r3, r4
 8020c22:	d807      	bhi.n	8020c34 <memmove+0x20>
 8020c24:	1e43      	subs	r3, r0, #1
 8020c26:	42a1      	cmp	r1, r4
 8020c28:	d008      	beq.n	8020c3c <memmove+0x28>
 8020c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020c2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020c32:	e7f8      	b.n	8020c26 <memmove+0x12>
 8020c34:	4402      	add	r2, r0
 8020c36:	4601      	mov	r1, r0
 8020c38:	428a      	cmp	r2, r1
 8020c3a:	d100      	bne.n	8020c3e <memmove+0x2a>
 8020c3c:	bd10      	pop	{r4, pc}
 8020c3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020c42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020c46:	e7f7      	b.n	8020c38 <memmove+0x24>

08020c48 <memset>:
 8020c48:	4402      	add	r2, r0
 8020c4a:	4603      	mov	r3, r0
 8020c4c:	4293      	cmp	r3, r2
 8020c4e:	d100      	bne.n	8020c52 <memset+0xa>
 8020c50:	4770      	bx	lr
 8020c52:	f803 1b01 	strb.w	r1, [r3], #1
 8020c56:	e7f9      	b.n	8020c4c <memset+0x4>

08020c58 <_calloc_r>:
 8020c58:	b513      	push	{r0, r1, r4, lr}
 8020c5a:	434a      	muls	r2, r1
 8020c5c:	4611      	mov	r1, r2
 8020c5e:	9201      	str	r2, [sp, #4]
 8020c60:	f000 f85a 	bl	8020d18 <_malloc_r>
 8020c64:	4604      	mov	r4, r0
 8020c66:	b118      	cbz	r0, 8020c70 <_calloc_r+0x18>
 8020c68:	9a01      	ldr	r2, [sp, #4]
 8020c6a:	2100      	movs	r1, #0
 8020c6c:	f7ff ffec 	bl	8020c48 <memset>
 8020c70:	4620      	mov	r0, r4
 8020c72:	b002      	add	sp, #8
 8020c74:	bd10      	pop	{r4, pc}
	...

08020c78 <_free_r>:
 8020c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020c7a:	2900      	cmp	r1, #0
 8020c7c:	d048      	beq.n	8020d10 <_free_r+0x98>
 8020c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020c82:	9001      	str	r0, [sp, #4]
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	f1a1 0404 	sub.w	r4, r1, #4
 8020c8a:	bfb8      	it	lt
 8020c8c:	18e4      	addlt	r4, r4, r3
 8020c8e:	f000 fd27 	bl	80216e0 <__malloc_lock>
 8020c92:	4a20      	ldr	r2, [pc, #128]	; (8020d14 <_free_r+0x9c>)
 8020c94:	9801      	ldr	r0, [sp, #4]
 8020c96:	6813      	ldr	r3, [r2, #0]
 8020c98:	4615      	mov	r5, r2
 8020c9a:	b933      	cbnz	r3, 8020caa <_free_r+0x32>
 8020c9c:	6063      	str	r3, [r4, #4]
 8020c9e:	6014      	str	r4, [r2, #0]
 8020ca0:	b003      	add	sp, #12
 8020ca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020ca6:	f000 bd21 	b.w	80216ec <__malloc_unlock>
 8020caa:	42a3      	cmp	r3, r4
 8020cac:	d90b      	bls.n	8020cc6 <_free_r+0x4e>
 8020cae:	6821      	ldr	r1, [r4, #0]
 8020cb0:	1862      	adds	r2, r4, r1
 8020cb2:	4293      	cmp	r3, r2
 8020cb4:	bf04      	itt	eq
 8020cb6:	681a      	ldreq	r2, [r3, #0]
 8020cb8:	685b      	ldreq	r3, [r3, #4]
 8020cba:	6063      	str	r3, [r4, #4]
 8020cbc:	bf04      	itt	eq
 8020cbe:	1852      	addeq	r2, r2, r1
 8020cc0:	6022      	streq	r2, [r4, #0]
 8020cc2:	602c      	str	r4, [r5, #0]
 8020cc4:	e7ec      	b.n	8020ca0 <_free_r+0x28>
 8020cc6:	461a      	mov	r2, r3
 8020cc8:	685b      	ldr	r3, [r3, #4]
 8020cca:	b10b      	cbz	r3, 8020cd0 <_free_r+0x58>
 8020ccc:	42a3      	cmp	r3, r4
 8020cce:	d9fa      	bls.n	8020cc6 <_free_r+0x4e>
 8020cd0:	6811      	ldr	r1, [r2, #0]
 8020cd2:	1855      	adds	r5, r2, r1
 8020cd4:	42a5      	cmp	r5, r4
 8020cd6:	d10b      	bne.n	8020cf0 <_free_r+0x78>
 8020cd8:	6824      	ldr	r4, [r4, #0]
 8020cda:	4421      	add	r1, r4
 8020cdc:	1854      	adds	r4, r2, r1
 8020cde:	42a3      	cmp	r3, r4
 8020ce0:	6011      	str	r1, [r2, #0]
 8020ce2:	d1dd      	bne.n	8020ca0 <_free_r+0x28>
 8020ce4:	681c      	ldr	r4, [r3, #0]
 8020ce6:	685b      	ldr	r3, [r3, #4]
 8020ce8:	6053      	str	r3, [r2, #4]
 8020cea:	4421      	add	r1, r4
 8020cec:	6011      	str	r1, [r2, #0]
 8020cee:	e7d7      	b.n	8020ca0 <_free_r+0x28>
 8020cf0:	d902      	bls.n	8020cf8 <_free_r+0x80>
 8020cf2:	230c      	movs	r3, #12
 8020cf4:	6003      	str	r3, [r0, #0]
 8020cf6:	e7d3      	b.n	8020ca0 <_free_r+0x28>
 8020cf8:	6825      	ldr	r5, [r4, #0]
 8020cfa:	1961      	adds	r1, r4, r5
 8020cfc:	428b      	cmp	r3, r1
 8020cfe:	bf04      	itt	eq
 8020d00:	6819      	ldreq	r1, [r3, #0]
 8020d02:	685b      	ldreq	r3, [r3, #4]
 8020d04:	6063      	str	r3, [r4, #4]
 8020d06:	bf04      	itt	eq
 8020d08:	1949      	addeq	r1, r1, r5
 8020d0a:	6021      	streq	r1, [r4, #0]
 8020d0c:	6054      	str	r4, [r2, #4]
 8020d0e:	e7c7      	b.n	8020ca0 <_free_r+0x28>
 8020d10:	b003      	add	sp, #12
 8020d12:	bd30      	pop	{r4, r5, pc}
 8020d14:	20005834 	.word	0x20005834

08020d18 <_malloc_r>:
 8020d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d1a:	1ccd      	adds	r5, r1, #3
 8020d1c:	f025 0503 	bic.w	r5, r5, #3
 8020d20:	3508      	adds	r5, #8
 8020d22:	2d0c      	cmp	r5, #12
 8020d24:	bf38      	it	cc
 8020d26:	250c      	movcc	r5, #12
 8020d28:	2d00      	cmp	r5, #0
 8020d2a:	4606      	mov	r6, r0
 8020d2c:	db01      	blt.n	8020d32 <_malloc_r+0x1a>
 8020d2e:	42a9      	cmp	r1, r5
 8020d30:	d903      	bls.n	8020d3a <_malloc_r+0x22>
 8020d32:	230c      	movs	r3, #12
 8020d34:	6033      	str	r3, [r6, #0]
 8020d36:	2000      	movs	r0, #0
 8020d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020d3a:	f000 fcd1 	bl	80216e0 <__malloc_lock>
 8020d3e:	4921      	ldr	r1, [pc, #132]	; (8020dc4 <_malloc_r+0xac>)
 8020d40:	680a      	ldr	r2, [r1, #0]
 8020d42:	4614      	mov	r4, r2
 8020d44:	b99c      	cbnz	r4, 8020d6e <_malloc_r+0x56>
 8020d46:	4f20      	ldr	r7, [pc, #128]	; (8020dc8 <_malloc_r+0xb0>)
 8020d48:	683b      	ldr	r3, [r7, #0]
 8020d4a:	b923      	cbnz	r3, 8020d56 <_malloc_r+0x3e>
 8020d4c:	4621      	mov	r1, r4
 8020d4e:	4630      	mov	r0, r6
 8020d50:	f000 f9b8 	bl	80210c4 <_sbrk_r>
 8020d54:	6038      	str	r0, [r7, #0]
 8020d56:	4629      	mov	r1, r5
 8020d58:	4630      	mov	r0, r6
 8020d5a:	f000 f9b3 	bl	80210c4 <_sbrk_r>
 8020d5e:	1c43      	adds	r3, r0, #1
 8020d60:	d123      	bne.n	8020daa <_malloc_r+0x92>
 8020d62:	230c      	movs	r3, #12
 8020d64:	6033      	str	r3, [r6, #0]
 8020d66:	4630      	mov	r0, r6
 8020d68:	f000 fcc0 	bl	80216ec <__malloc_unlock>
 8020d6c:	e7e3      	b.n	8020d36 <_malloc_r+0x1e>
 8020d6e:	6823      	ldr	r3, [r4, #0]
 8020d70:	1b5b      	subs	r3, r3, r5
 8020d72:	d417      	bmi.n	8020da4 <_malloc_r+0x8c>
 8020d74:	2b0b      	cmp	r3, #11
 8020d76:	d903      	bls.n	8020d80 <_malloc_r+0x68>
 8020d78:	6023      	str	r3, [r4, #0]
 8020d7a:	441c      	add	r4, r3
 8020d7c:	6025      	str	r5, [r4, #0]
 8020d7e:	e004      	b.n	8020d8a <_malloc_r+0x72>
 8020d80:	6863      	ldr	r3, [r4, #4]
 8020d82:	42a2      	cmp	r2, r4
 8020d84:	bf0c      	ite	eq
 8020d86:	600b      	streq	r3, [r1, #0]
 8020d88:	6053      	strne	r3, [r2, #4]
 8020d8a:	4630      	mov	r0, r6
 8020d8c:	f000 fcae 	bl	80216ec <__malloc_unlock>
 8020d90:	f104 000b 	add.w	r0, r4, #11
 8020d94:	1d23      	adds	r3, r4, #4
 8020d96:	f020 0007 	bic.w	r0, r0, #7
 8020d9a:	1ac2      	subs	r2, r0, r3
 8020d9c:	d0cc      	beq.n	8020d38 <_malloc_r+0x20>
 8020d9e:	1a1b      	subs	r3, r3, r0
 8020da0:	50a3      	str	r3, [r4, r2]
 8020da2:	e7c9      	b.n	8020d38 <_malloc_r+0x20>
 8020da4:	4622      	mov	r2, r4
 8020da6:	6864      	ldr	r4, [r4, #4]
 8020da8:	e7cc      	b.n	8020d44 <_malloc_r+0x2c>
 8020daa:	1cc4      	adds	r4, r0, #3
 8020dac:	f024 0403 	bic.w	r4, r4, #3
 8020db0:	42a0      	cmp	r0, r4
 8020db2:	d0e3      	beq.n	8020d7c <_malloc_r+0x64>
 8020db4:	1a21      	subs	r1, r4, r0
 8020db6:	4630      	mov	r0, r6
 8020db8:	f000 f984 	bl	80210c4 <_sbrk_r>
 8020dbc:	3001      	adds	r0, #1
 8020dbe:	d1dd      	bne.n	8020d7c <_malloc_r+0x64>
 8020dc0:	e7cf      	b.n	8020d62 <_malloc_r+0x4a>
 8020dc2:	bf00      	nop
 8020dc4:	20005834 	.word	0x20005834
 8020dc8:	20005838 	.word	0x20005838

08020dcc <iprintf>:
 8020dcc:	b40f      	push	{r0, r1, r2, r3}
 8020dce:	4b0a      	ldr	r3, [pc, #40]	; (8020df8 <iprintf+0x2c>)
 8020dd0:	b513      	push	{r0, r1, r4, lr}
 8020dd2:	681c      	ldr	r4, [r3, #0]
 8020dd4:	b124      	cbz	r4, 8020de0 <iprintf+0x14>
 8020dd6:	69a3      	ldr	r3, [r4, #24]
 8020dd8:	b913      	cbnz	r3, 8020de0 <iprintf+0x14>
 8020dda:	4620      	mov	r0, r4
 8020ddc:	f7ff fe28 	bl	8020a30 <__sinit>
 8020de0:	ab05      	add	r3, sp, #20
 8020de2:	9a04      	ldr	r2, [sp, #16]
 8020de4:	68a1      	ldr	r1, [r4, #8]
 8020de6:	9301      	str	r3, [sp, #4]
 8020de8:	4620      	mov	r0, r4
 8020dea:	f000 fe0b 	bl	8021a04 <_vfiprintf_r>
 8020dee:	b002      	add	sp, #8
 8020df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020df4:	b004      	add	sp, #16
 8020df6:	4770      	bx	lr
 8020df8:	20000504 	.word	0x20000504

08020dfc <putchar>:
 8020dfc:	4b09      	ldr	r3, [pc, #36]	; (8020e24 <putchar+0x28>)
 8020dfe:	b513      	push	{r0, r1, r4, lr}
 8020e00:	681c      	ldr	r4, [r3, #0]
 8020e02:	4601      	mov	r1, r0
 8020e04:	b134      	cbz	r4, 8020e14 <putchar+0x18>
 8020e06:	69a3      	ldr	r3, [r4, #24]
 8020e08:	b923      	cbnz	r3, 8020e14 <putchar+0x18>
 8020e0a:	9001      	str	r0, [sp, #4]
 8020e0c:	4620      	mov	r0, r4
 8020e0e:	f7ff fe0f 	bl	8020a30 <__sinit>
 8020e12:	9901      	ldr	r1, [sp, #4]
 8020e14:	68a2      	ldr	r2, [r4, #8]
 8020e16:	4620      	mov	r0, r4
 8020e18:	b002      	add	sp, #8
 8020e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020e1e:	f001 b8b5 	b.w	8021f8c <_putc_r>
 8020e22:	bf00      	nop
 8020e24:	20000504 	.word	0x20000504

08020e28 <_puts_r>:
 8020e28:	b570      	push	{r4, r5, r6, lr}
 8020e2a:	460e      	mov	r6, r1
 8020e2c:	4605      	mov	r5, r0
 8020e2e:	b118      	cbz	r0, 8020e38 <_puts_r+0x10>
 8020e30:	6983      	ldr	r3, [r0, #24]
 8020e32:	b90b      	cbnz	r3, 8020e38 <_puts_r+0x10>
 8020e34:	f7ff fdfc 	bl	8020a30 <__sinit>
 8020e38:	69ab      	ldr	r3, [r5, #24]
 8020e3a:	68ac      	ldr	r4, [r5, #8]
 8020e3c:	b913      	cbnz	r3, 8020e44 <_puts_r+0x1c>
 8020e3e:	4628      	mov	r0, r5
 8020e40:	f7ff fdf6 	bl	8020a30 <__sinit>
 8020e44:	4b2c      	ldr	r3, [pc, #176]	; (8020ef8 <_puts_r+0xd0>)
 8020e46:	429c      	cmp	r4, r3
 8020e48:	d120      	bne.n	8020e8c <_puts_r+0x64>
 8020e4a:	686c      	ldr	r4, [r5, #4]
 8020e4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020e4e:	07db      	lsls	r3, r3, #31
 8020e50:	d405      	bmi.n	8020e5e <_puts_r+0x36>
 8020e52:	89a3      	ldrh	r3, [r4, #12]
 8020e54:	0598      	lsls	r0, r3, #22
 8020e56:	d402      	bmi.n	8020e5e <_puts_r+0x36>
 8020e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020e5a:	f7ff feac 	bl	8020bb6 <__retarget_lock_acquire_recursive>
 8020e5e:	89a3      	ldrh	r3, [r4, #12]
 8020e60:	0719      	lsls	r1, r3, #28
 8020e62:	d51d      	bpl.n	8020ea0 <_puts_r+0x78>
 8020e64:	6923      	ldr	r3, [r4, #16]
 8020e66:	b1db      	cbz	r3, 8020ea0 <_puts_r+0x78>
 8020e68:	3e01      	subs	r6, #1
 8020e6a:	68a3      	ldr	r3, [r4, #8]
 8020e6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020e70:	3b01      	subs	r3, #1
 8020e72:	60a3      	str	r3, [r4, #8]
 8020e74:	bb39      	cbnz	r1, 8020ec6 <_puts_r+0x9e>
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	da38      	bge.n	8020eec <_puts_r+0xc4>
 8020e7a:	4622      	mov	r2, r4
 8020e7c:	210a      	movs	r1, #10
 8020e7e:	4628      	mov	r0, r5
 8020e80:	f000 f9d2 	bl	8021228 <__swbuf_r>
 8020e84:	3001      	adds	r0, #1
 8020e86:	d011      	beq.n	8020eac <_puts_r+0x84>
 8020e88:	250a      	movs	r5, #10
 8020e8a:	e011      	b.n	8020eb0 <_puts_r+0x88>
 8020e8c:	4b1b      	ldr	r3, [pc, #108]	; (8020efc <_puts_r+0xd4>)
 8020e8e:	429c      	cmp	r4, r3
 8020e90:	d101      	bne.n	8020e96 <_puts_r+0x6e>
 8020e92:	68ac      	ldr	r4, [r5, #8]
 8020e94:	e7da      	b.n	8020e4c <_puts_r+0x24>
 8020e96:	4b1a      	ldr	r3, [pc, #104]	; (8020f00 <_puts_r+0xd8>)
 8020e98:	429c      	cmp	r4, r3
 8020e9a:	bf08      	it	eq
 8020e9c:	68ec      	ldreq	r4, [r5, #12]
 8020e9e:	e7d5      	b.n	8020e4c <_puts_r+0x24>
 8020ea0:	4621      	mov	r1, r4
 8020ea2:	4628      	mov	r0, r5
 8020ea4:	f000 fa24 	bl	80212f0 <__swsetup_r>
 8020ea8:	2800      	cmp	r0, #0
 8020eaa:	d0dd      	beq.n	8020e68 <_puts_r+0x40>
 8020eac:	f04f 35ff 	mov.w	r5, #4294967295
 8020eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020eb2:	07da      	lsls	r2, r3, #31
 8020eb4:	d405      	bmi.n	8020ec2 <_puts_r+0x9a>
 8020eb6:	89a3      	ldrh	r3, [r4, #12]
 8020eb8:	059b      	lsls	r3, r3, #22
 8020eba:	d402      	bmi.n	8020ec2 <_puts_r+0x9a>
 8020ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020ebe:	f7ff fe7b 	bl	8020bb8 <__retarget_lock_release_recursive>
 8020ec2:	4628      	mov	r0, r5
 8020ec4:	bd70      	pop	{r4, r5, r6, pc}
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	da04      	bge.n	8020ed4 <_puts_r+0xac>
 8020eca:	69a2      	ldr	r2, [r4, #24]
 8020ecc:	429a      	cmp	r2, r3
 8020ece:	dc06      	bgt.n	8020ede <_puts_r+0xb6>
 8020ed0:	290a      	cmp	r1, #10
 8020ed2:	d004      	beq.n	8020ede <_puts_r+0xb6>
 8020ed4:	6823      	ldr	r3, [r4, #0]
 8020ed6:	1c5a      	adds	r2, r3, #1
 8020ed8:	6022      	str	r2, [r4, #0]
 8020eda:	7019      	strb	r1, [r3, #0]
 8020edc:	e7c5      	b.n	8020e6a <_puts_r+0x42>
 8020ede:	4622      	mov	r2, r4
 8020ee0:	4628      	mov	r0, r5
 8020ee2:	f000 f9a1 	bl	8021228 <__swbuf_r>
 8020ee6:	3001      	adds	r0, #1
 8020ee8:	d1bf      	bne.n	8020e6a <_puts_r+0x42>
 8020eea:	e7df      	b.n	8020eac <_puts_r+0x84>
 8020eec:	6823      	ldr	r3, [r4, #0]
 8020eee:	250a      	movs	r5, #10
 8020ef0:	1c5a      	adds	r2, r3, #1
 8020ef2:	6022      	str	r2, [r4, #0]
 8020ef4:	701d      	strb	r5, [r3, #0]
 8020ef6:	e7db      	b.n	8020eb0 <_puts_r+0x88>
 8020ef8:	080267bc 	.word	0x080267bc
 8020efc:	080267dc 	.word	0x080267dc
 8020f00:	0802679c 	.word	0x0802679c

08020f04 <puts>:
 8020f04:	4b02      	ldr	r3, [pc, #8]	; (8020f10 <puts+0xc>)
 8020f06:	4601      	mov	r1, r0
 8020f08:	6818      	ldr	r0, [r3, #0]
 8020f0a:	f7ff bf8d 	b.w	8020e28 <_puts_r>
 8020f0e:	bf00      	nop
 8020f10:	20000504 	.word	0x20000504

08020f14 <srand>:
 8020f14:	b538      	push	{r3, r4, r5, lr}
 8020f16:	4b10      	ldr	r3, [pc, #64]	; (8020f58 <srand+0x44>)
 8020f18:	681d      	ldr	r5, [r3, #0]
 8020f1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020f1c:	4604      	mov	r4, r0
 8020f1e:	b9b3      	cbnz	r3, 8020f4e <srand+0x3a>
 8020f20:	2018      	movs	r0, #24
 8020f22:	f7ff fe4b 	bl	8020bbc <malloc>
 8020f26:	4602      	mov	r2, r0
 8020f28:	63a8      	str	r0, [r5, #56]	; 0x38
 8020f2a:	b920      	cbnz	r0, 8020f36 <srand+0x22>
 8020f2c:	4b0b      	ldr	r3, [pc, #44]	; (8020f5c <srand+0x48>)
 8020f2e:	480c      	ldr	r0, [pc, #48]	; (8020f60 <srand+0x4c>)
 8020f30:	2142      	movs	r1, #66	; 0x42
 8020f32:	f000 fa4b 	bl	80213cc <__assert_func>
 8020f36:	490b      	ldr	r1, [pc, #44]	; (8020f64 <srand+0x50>)
 8020f38:	4b0b      	ldr	r3, [pc, #44]	; (8020f68 <srand+0x54>)
 8020f3a:	e9c0 1300 	strd	r1, r3, [r0]
 8020f3e:	4b0b      	ldr	r3, [pc, #44]	; (8020f6c <srand+0x58>)
 8020f40:	6083      	str	r3, [r0, #8]
 8020f42:	230b      	movs	r3, #11
 8020f44:	8183      	strh	r3, [r0, #12]
 8020f46:	2100      	movs	r1, #0
 8020f48:	2001      	movs	r0, #1
 8020f4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020f4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020f50:	2200      	movs	r2, #0
 8020f52:	611c      	str	r4, [r3, #16]
 8020f54:	615a      	str	r2, [r3, #20]
 8020f56:	bd38      	pop	{r3, r4, r5, pc}
 8020f58:	20000504 	.word	0x20000504
 8020f5c:	08026800 	.word	0x08026800
 8020f60:	08026817 	.word	0x08026817
 8020f64:	abcd330e 	.word	0xabcd330e
 8020f68:	e66d1234 	.word	0xe66d1234
 8020f6c:	0005deec 	.word	0x0005deec

08020f70 <rand>:
 8020f70:	4b17      	ldr	r3, [pc, #92]	; (8020fd0 <rand+0x60>)
 8020f72:	b510      	push	{r4, lr}
 8020f74:	681c      	ldr	r4, [r3, #0]
 8020f76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020f78:	b9b3      	cbnz	r3, 8020fa8 <rand+0x38>
 8020f7a:	2018      	movs	r0, #24
 8020f7c:	f7ff fe1e 	bl	8020bbc <malloc>
 8020f80:	63a0      	str	r0, [r4, #56]	; 0x38
 8020f82:	b928      	cbnz	r0, 8020f90 <rand+0x20>
 8020f84:	4602      	mov	r2, r0
 8020f86:	4b13      	ldr	r3, [pc, #76]	; (8020fd4 <rand+0x64>)
 8020f88:	4813      	ldr	r0, [pc, #76]	; (8020fd8 <rand+0x68>)
 8020f8a:	214e      	movs	r1, #78	; 0x4e
 8020f8c:	f000 fa1e 	bl	80213cc <__assert_func>
 8020f90:	4a12      	ldr	r2, [pc, #72]	; (8020fdc <rand+0x6c>)
 8020f92:	4b13      	ldr	r3, [pc, #76]	; (8020fe0 <rand+0x70>)
 8020f94:	e9c0 2300 	strd	r2, r3, [r0]
 8020f98:	4b12      	ldr	r3, [pc, #72]	; (8020fe4 <rand+0x74>)
 8020f9a:	6083      	str	r3, [r0, #8]
 8020f9c:	230b      	movs	r3, #11
 8020f9e:	8183      	strh	r3, [r0, #12]
 8020fa0:	2201      	movs	r2, #1
 8020fa2:	2300      	movs	r3, #0
 8020fa4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020fa8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020faa:	480f      	ldr	r0, [pc, #60]	; (8020fe8 <rand+0x78>)
 8020fac:	690a      	ldr	r2, [r1, #16]
 8020fae:	694b      	ldr	r3, [r1, #20]
 8020fb0:	4c0e      	ldr	r4, [pc, #56]	; (8020fec <rand+0x7c>)
 8020fb2:	4350      	muls	r0, r2
 8020fb4:	fb04 0003 	mla	r0, r4, r3, r0
 8020fb8:	fba2 3404 	umull	r3, r4, r2, r4
 8020fbc:	1c5a      	adds	r2, r3, #1
 8020fbe:	4404      	add	r4, r0
 8020fc0:	f144 0000 	adc.w	r0, r4, #0
 8020fc4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8020fc8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020fcc:	bd10      	pop	{r4, pc}
 8020fce:	bf00      	nop
 8020fd0:	20000504 	.word	0x20000504
 8020fd4:	08026800 	.word	0x08026800
 8020fd8:	08026817 	.word	0x08026817
 8020fdc:	abcd330e 	.word	0xabcd330e
 8020fe0:	e66d1234 	.word	0xe66d1234
 8020fe4:	0005deec 	.word	0x0005deec
 8020fe8:	5851f42d 	.word	0x5851f42d
 8020fec:	4c957f2d 	.word	0x4c957f2d

08020ff0 <cleanup_glue>:
 8020ff0:	b538      	push	{r3, r4, r5, lr}
 8020ff2:	460c      	mov	r4, r1
 8020ff4:	6809      	ldr	r1, [r1, #0]
 8020ff6:	4605      	mov	r5, r0
 8020ff8:	b109      	cbz	r1, 8020ffe <cleanup_glue+0xe>
 8020ffa:	f7ff fff9 	bl	8020ff0 <cleanup_glue>
 8020ffe:	4621      	mov	r1, r4
 8021000:	4628      	mov	r0, r5
 8021002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021006:	f7ff be37 	b.w	8020c78 <_free_r>
	...

0802100c <_reclaim_reent>:
 802100c:	4b2c      	ldr	r3, [pc, #176]	; (80210c0 <_reclaim_reent+0xb4>)
 802100e:	681b      	ldr	r3, [r3, #0]
 8021010:	4283      	cmp	r3, r0
 8021012:	b570      	push	{r4, r5, r6, lr}
 8021014:	4604      	mov	r4, r0
 8021016:	d051      	beq.n	80210bc <_reclaim_reent+0xb0>
 8021018:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802101a:	b143      	cbz	r3, 802102e <_reclaim_reent+0x22>
 802101c:	68db      	ldr	r3, [r3, #12]
 802101e:	2b00      	cmp	r3, #0
 8021020:	d14a      	bne.n	80210b8 <_reclaim_reent+0xac>
 8021022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021024:	6819      	ldr	r1, [r3, #0]
 8021026:	b111      	cbz	r1, 802102e <_reclaim_reent+0x22>
 8021028:	4620      	mov	r0, r4
 802102a:	f7ff fe25 	bl	8020c78 <_free_r>
 802102e:	6961      	ldr	r1, [r4, #20]
 8021030:	b111      	cbz	r1, 8021038 <_reclaim_reent+0x2c>
 8021032:	4620      	mov	r0, r4
 8021034:	f7ff fe20 	bl	8020c78 <_free_r>
 8021038:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802103a:	b111      	cbz	r1, 8021042 <_reclaim_reent+0x36>
 802103c:	4620      	mov	r0, r4
 802103e:	f7ff fe1b 	bl	8020c78 <_free_r>
 8021042:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021044:	b111      	cbz	r1, 802104c <_reclaim_reent+0x40>
 8021046:	4620      	mov	r0, r4
 8021048:	f7ff fe16 	bl	8020c78 <_free_r>
 802104c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802104e:	b111      	cbz	r1, 8021056 <_reclaim_reent+0x4a>
 8021050:	4620      	mov	r0, r4
 8021052:	f7ff fe11 	bl	8020c78 <_free_r>
 8021056:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021058:	b111      	cbz	r1, 8021060 <_reclaim_reent+0x54>
 802105a:	4620      	mov	r0, r4
 802105c:	f7ff fe0c 	bl	8020c78 <_free_r>
 8021060:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8021062:	b111      	cbz	r1, 802106a <_reclaim_reent+0x5e>
 8021064:	4620      	mov	r0, r4
 8021066:	f7ff fe07 	bl	8020c78 <_free_r>
 802106a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802106c:	b111      	cbz	r1, 8021074 <_reclaim_reent+0x68>
 802106e:	4620      	mov	r0, r4
 8021070:	f7ff fe02 	bl	8020c78 <_free_r>
 8021074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021076:	b111      	cbz	r1, 802107e <_reclaim_reent+0x72>
 8021078:	4620      	mov	r0, r4
 802107a:	f7ff fdfd 	bl	8020c78 <_free_r>
 802107e:	69a3      	ldr	r3, [r4, #24]
 8021080:	b1e3      	cbz	r3, 80210bc <_reclaim_reent+0xb0>
 8021082:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021084:	4620      	mov	r0, r4
 8021086:	4798      	blx	r3
 8021088:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802108a:	b1b9      	cbz	r1, 80210bc <_reclaim_reent+0xb0>
 802108c:	4620      	mov	r0, r4
 802108e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021092:	f7ff bfad 	b.w	8020ff0 <cleanup_glue>
 8021096:	5949      	ldr	r1, [r1, r5]
 8021098:	b941      	cbnz	r1, 80210ac <_reclaim_reent+0xa0>
 802109a:	3504      	adds	r5, #4
 802109c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802109e:	2d80      	cmp	r5, #128	; 0x80
 80210a0:	68d9      	ldr	r1, [r3, #12]
 80210a2:	d1f8      	bne.n	8021096 <_reclaim_reent+0x8a>
 80210a4:	4620      	mov	r0, r4
 80210a6:	f7ff fde7 	bl	8020c78 <_free_r>
 80210aa:	e7ba      	b.n	8021022 <_reclaim_reent+0x16>
 80210ac:	680e      	ldr	r6, [r1, #0]
 80210ae:	4620      	mov	r0, r4
 80210b0:	f7ff fde2 	bl	8020c78 <_free_r>
 80210b4:	4631      	mov	r1, r6
 80210b6:	e7ef      	b.n	8021098 <_reclaim_reent+0x8c>
 80210b8:	2500      	movs	r5, #0
 80210ba:	e7ef      	b.n	802109c <_reclaim_reent+0x90>
 80210bc:	bd70      	pop	{r4, r5, r6, pc}
 80210be:	bf00      	nop
 80210c0:	20000504 	.word	0x20000504

080210c4 <_sbrk_r>:
 80210c4:	b538      	push	{r3, r4, r5, lr}
 80210c6:	4d06      	ldr	r5, [pc, #24]	; (80210e0 <_sbrk_r+0x1c>)
 80210c8:	2300      	movs	r3, #0
 80210ca:	4604      	mov	r4, r0
 80210cc:	4608      	mov	r0, r1
 80210ce:	602b      	str	r3, [r5, #0]
 80210d0:	f7e0 fc34 	bl	800193c <_sbrk>
 80210d4:	1c43      	adds	r3, r0, #1
 80210d6:	d102      	bne.n	80210de <_sbrk_r+0x1a>
 80210d8:	682b      	ldr	r3, [r5, #0]
 80210da:	b103      	cbz	r3, 80210de <_sbrk_r+0x1a>
 80210dc:	6023      	str	r3, [r4, #0]
 80210de:	bd38      	pop	{r3, r4, r5, pc}
 80210e0:	20016e00 	.word	0x20016e00

080210e4 <siprintf>:
 80210e4:	b40e      	push	{r1, r2, r3}
 80210e6:	b500      	push	{lr}
 80210e8:	b09c      	sub	sp, #112	; 0x70
 80210ea:	ab1d      	add	r3, sp, #116	; 0x74
 80210ec:	9002      	str	r0, [sp, #8]
 80210ee:	9006      	str	r0, [sp, #24]
 80210f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80210f4:	4809      	ldr	r0, [pc, #36]	; (802111c <siprintf+0x38>)
 80210f6:	9107      	str	r1, [sp, #28]
 80210f8:	9104      	str	r1, [sp, #16]
 80210fa:	4909      	ldr	r1, [pc, #36]	; (8021120 <siprintf+0x3c>)
 80210fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8021100:	9105      	str	r1, [sp, #20]
 8021102:	6800      	ldr	r0, [r0, #0]
 8021104:	9301      	str	r3, [sp, #4]
 8021106:	a902      	add	r1, sp, #8
 8021108:	f000 fb52 	bl	80217b0 <_svfiprintf_r>
 802110c:	9b02      	ldr	r3, [sp, #8]
 802110e:	2200      	movs	r2, #0
 8021110:	701a      	strb	r2, [r3, #0]
 8021112:	b01c      	add	sp, #112	; 0x70
 8021114:	f85d eb04 	ldr.w	lr, [sp], #4
 8021118:	b003      	add	sp, #12
 802111a:	4770      	bx	lr
 802111c:	20000504 	.word	0x20000504
 8021120:	ffff0208 	.word	0xffff0208

08021124 <__sread>:
 8021124:	b510      	push	{r4, lr}
 8021126:	460c      	mov	r4, r1
 8021128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802112c:	f000 ff76 	bl	802201c <_read_r>
 8021130:	2800      	cmp	r0, #0
 8021132:	bfab      	itete	ge
 8021134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021136:	89a3      	ldrhlt	r3, [r4, #12]
 8021138:	181b      	addge	r3, r3, r0
 802113a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802113e:	bfac      	ite	ge
 8021140:	6563      	strge	r3, [r4, #84]	; 0x54
 8021142:	81a3      	strhlt	r3, [r4, #12]
 8021144:	bd10      	pop	{r4, pc}

08021146 <__swrite>:
 8021146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802114a:	461f      	mov	r7, r3
 802114c:	898b      	ldrh	r3, [r1, #12]
 802114e:	05db      	lsls	r3, r3, #23
 8021150:	4605      	mov	r5, r0
 8021152:	460c      	mov	r4, r1
 8021154:	4616      	mov	r6, r2
 8021156:	d505      	bpl.n	8021164 <__swrite+0x1e>
 8021158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802115c:	2302      	movs	r3, #2
 802115e:	2200      	movs	r2, #0
 8021160:	f000 fa48 	bl	80215f4 <_lseek_r>
 8021164:	89a3      	ldrh	r3, [r4, #12]
 8021166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802116a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802116e:	81a3      	strh	r3, [r4, #12]
 8021170:	4632      	mov	r2, r6
 8021172:	463b      	mov	r3, r7
 8021174:	4628      	mov	r0, r5
 8021176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802117a:	f000 b8a7 	b.w	80212cc <_write_r>

0802117e <__sseek>:
 802117e:	b510      	push	{r4, lr}
 8021180:	460c      	mov	r4, r1
 8021182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021186:	f000 fa35 	bl	80215f4 <_lseek_r>
 802118a:	1c43      	adds	r3, r0, #1
 802118c:	89a3      	ldrh	r3, [r4, #12]
 802118e:	bf15      	itete	ne
 8021190:	6560      	strne	r0, [r4, #84]	; 0x54
 8021192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802119a:	81a3      	strheq	r3, [r4, #12]
 802119c:	bf18      	it	ne
 802119e:	81a3      	strhne	r3, [r4, #12]
 80211a0:	bd10      	pop	{r4, pc}

080211a2 <__sclose>:
 80211a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80211a6:	f000 b92f 	b.w	8021408 <_close_r>

080211aa <strchr>:
 80211aa:	b2c9      	uxtb	r1, r1
 80211ac:	4603      	mov	r3, r0
 80211ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80211b2:	b11a      	cbz	r2, 80211bc <strchr+0x12>
 80211b4:	428a      	cmp	r2, r1
 80211b6:	d1f9      	bne.n	80211ac <strchr+0x2>
 80211b8:	4618      	mov	r0, r3
 80211ba:	4770      	bx	lr
 80211bc:	2900      	cmp	r1, #0
 80211be:	bf18      	it	ne
 80211c0:	2300      	movne	r3, #0
 80211c2:	e7f9      	b.n	80211b8 <strchr+0xe>

080211c4 <strstr>:
 80211c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80211c6:	780c      	ldrb	r4, [r1, #0]
 80211c8:	b164      	cbz	r4, 80211e4 <strstr+0x20>
 80211ca:	4603      	mov	r3, r0
 80211cc:	781a      	ldrb	r2, [r3, #0]
 80211ce:	4618      	mov	r0, r3
 80211d0:	1c5e      	adds	r6, r3, #1
 80211d2:	b90a      	cbnz	r2, 80211d8 <strstr+0x14>
 80211d4:	4610      	mov	r0, r2
 80211d6:	e005      	b.n	80211e4 <strstr+0x20>
 80211d8:	4294      	cmp	r4, r2
 80211da:	d108      	bne.n	80211ee <strstr+0x2a>
 80211dc:	460d      	mov	r5, r1
 80211de:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80211e2:	b902      	cbnz	r2, 80211e6 <strstr+0x22>
 80211e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80211e6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80211ea:	4297      	cmp	r7, r2
 80211ec:	d0f7      	beq.n	80211de <strstr+0x1a>
 80211ee:	4633      	mov	r3, r6
 80211f0:	e7ec      	b.n	80211cc <strstr+0x8>
	...

080211f4 <time>:
 80211f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80211f6:	4b0b      	ldr	r3, [pc, #44]	; (8021224 <time+0x30>)
 80211f8:	2200      	movs	r2, #0
 80211fa:	4669      	mov	r1, sp
 80211fc:	4604      	mov	r4, r0
 80211fe:	6818      	ldr	r0, [r3, #0]
 8021200:	f000 f9e6 	bl	80215d0 <_gettimeofday_r>
 8021204:	2800      	cmp	r0, #0
 8021206:	bfbe      	ittt	lt
 8021208:	f04f 32ff 	movlt.w	r2, #4294967295
 802120c:	f04f 33ff 	movlt.w	r3, #4294967295
 8021210:	e9cd 2300 	strdlt	r2, r3, [sp]
 8021214:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021218:	b10c      	cbz	r4, 802121e <time+0x2a>
 802121a:	e9c4 0100 	strd	r0, r1, [r4]
 802121e:	b004      	add	sp, #16
 8021220:	bd10      	pop	{r4, pc}
 8021222:	bf00      	nop
 8021224:	20000504 	.word	0x20000504

08021228 <__swbuf_r>:
 8021228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802122a:	460e      	mov	r6, r1
 802122c:	4614      	mov	r4, r2
 802122e:	4605      	mov	r5, r0
 8021230:	b118      	cbz	r0, 802123a <__swbuf_r+0x12>
 8021232:	6983      	ldr	r3, [r0, #24]
 8021234:	b90b      	cbnz	r3, 802123a <__swbuf_r+0x12>
 8021236:	f7ff fbfb 	bl	8020a30 <__sinit>
 802123a:	4b21      	ldr	r3, [pc, #132]	; (80212c0 <__swbuf_r+0x98>)
 802123c:	429c      	cmp	r4, r3
 802123e:	d12b      	bne.n	8021298 <__swbuf_r+0x70>
 8021240:	686c      	ldr	r4, [r5, #4]
 8021242:	69a3      	ldr	r3, [r4, #24]
 8021244:	60a3      	str	r3, [r4, #8]
 8021246:	89a3      	ldrh	r3, [r4, #12]
 8021248:	071a      	lsls	r2, r3, #28
 802124a:	d52f      	bpl.n	80212ac <__swbuf_r+0x84>
 802124c:	6923      	ldr	r3, [r4, #16]
 802124e:	b36b      	cbz	r3, 80212ac <__swbuf_r+0x84>
 8021250:	6923      	ldr	r3, [r4, #16]
 8021252:	6820      	ldr	r0, [r4, #0]
 8021254:	1ac0      	subs	r0, r0, r3
 8021256:	6963      	ldr	r3, [r4, #20]
 8021258:	b2f6      	uxtb	r6, r6
 802125a:	4283      	cmp	r3, r0
 802125c:	4637      	mov	r7, r6
 802125e:	dc04      	bgt.n	802126a <__swbuf_r+0x42>
 8021260:	4621      	mov	r1, r4
 8021262:	4628      	mov	r0, r5
 8021264:	f000 f966 	bl	8021534 <_fflush_r>
 8021268:	bb30      	cbnz	r0, 80212b8 <__swbuf_r+0x90>
 802126a:	68a3      	ldr	r3, [r4, #8]
 802126c:	3b01      	subs	r3, #1
 802126e:	60a3      	str	r3, [r4, #8]
 8021270:	6823      	ldr	r3, [r4, #0]
 8021272:	1c5a      	adds	r2, r3, #1
 8021274:	6022      	str	r2, [r4, #0]
 8021276:	701e      	strb	r6, [r3, #0]
 8021278:	6963      	ldr	r3, [r4, #20]
 802127a:	3001      	adds	r0, #1
 802127c:	4283      	cmp	r3, r0
 802127e:	d004      	beq.n	802128a <__swbuf_r+0x62>
 8021280:	89a3      	ldrh	r3, [r4, #12]
 8021282:	07db      	lsls	r3, r3, #31
 8021284:	d506      	bpl.n	8021294 <__swbuf_r+0x6c>
 8021286:	2e0a      	cmp	r6, #10
 8021288:	d104      	bne.n	8021294 <__swbuf_r+0x6c>
 802128a:	4621      	mov	r1, r4
 802128c:	4628      	mov	r0, r5
 802128e:	f000 f951 	bl	8021534 <_fflush_r>
 8021292:	b988      	cbnz	r0, 80212b8 <__swbuf_r+0x90>
 8021294:	4638      	mov	r0, r7
 8021296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021298:	4b0a      	ldr	r3, [pc, #40]	; (80212c4 <__swbuf_r+0x9c>)
 802129a:	429c      	cmp	r4, r3
 802129c:	d101      	bne.n	80212a2 <__swbuf_r+0x7a>
 802129e:	68ac      	ldr	r4, [r5, #8]
 80212a0:	e7cf      	b.n	8021242 <__swbuf_r+0x1a>
 80212a2:	4b09      	ldr	r3, [pc, #36]	; (80212c8 <__swbuf_r+0xa0>)
 80212a4:	429c      	cmp	r4, r3
 80212a6:	bf08      	it	eq
 80212a8:	68ec      	ldreq	r4, [r5, #12]
 80212aa:	e7ca      	b.n	8021242 <__swbuf_r+0x1a>
 80212ac:	4621      	mov	r1, r4
 80212ae:	4628      	mov	r0, r5
 80212b0:	f000 f81e 	bl	80212f0 <__swsetup_r>
 80212b4:	2800      	cmp	r0, #0
 80212b6:	d0cb      	beq.n	8021250 <__swbuf_r+0x28>
 80212b8:	f04f 37ff 	mov.w	r7, #4294967295
 80212bc:	e7ea      	b.n	8021294 <__swbuf_r+0x6c>
 80212be:	bf00      	nop
 80212c0:	080267bc 	.word	0x080267bc
 80212c4:	080267dc 	.word	0x080267dc
 80212c8:	0802679c 	.word	0x0802679c

080212cc <_write_r>:
 80212cc:	b538      	push	{r3, r4, r5, lr}
 80212ce:	4d07      	ldr	r5, [pc, #28]	; (80212ec <_write_r+0x20>)
 80212d0:	4604      	mov	r4, r0
 80212d2:	4608      	mov	r0, r1
 80212d4:	4611      	mov	r1, r2
 80212d6:	2200      	movs	r2, #0
 80212d8:	602a      	str	r2, [r5, #0]
 80212da:	461a      	mov	r2, r3
 80212dc:	f7df fd1c 	bl	8000d18 <_write>
 80212e0:	1c43      	adds	r3, r0, #1
 80212e2:	d102      	bne.n	80212ea <_write_r+0x1e>
 80212e4:	682b      	ldr	r3, [r5, #0]
 80212e6:	b103      	cbz	r3, 80212ea <_write_r+0x1e>
 80212e8:	6023      	str	r3, [r4, #0]
 80212ea:	bd38      	pop	{r3, r4, r5, pc}
 80212ec:	20016e00 	.word	0x20016e00

080212f0 <__swsetup_r>:
 80212f0:	4b32      	ldr	r3, [pc, #200]	; (80213bc <__swsetup_r+0xcc>)
 80212f2:	b570      	push	{r4, r5, r6, lr}
 80212f4:	681d      	ldr	r5, [r3, #0]
 80212f6:	4606      	mov	r6, r0
 80212f8:	460c      	mov	r4, r1
 80212fa:	b125      	cbz	r5, 8021306 <__swsetup_r+0x16>
 80212fc:	69ab      	ldr	r3, [r5, #24]
 80212fe:	b913      	cbnz	r3, 8021306 <__swsetup_r+0x16>
 8021300:	4628      	mov	r0, r5
 8021302:	f7ff fb95 	bl	8020a30 <__sinit>
 8021306:	4b2e      	ldr	r3, [pc, #184]	; (80213c0 <__swsetup_r+0xd0>)
 8021308:	429c      	cmp	r4, r3
 802130a:	d10f      	bne.n	802132c <__swsetup_r+0x3c>
 802130c:	686c      	ldr	r4, [r5, #4]
 802130e:	89a3      	ldrh	r3, [r4, #12]
 8021310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021314:	0719      	lsls	r1, r3, #28
 8021316:	d42c      	bmi.n	8021372 <__swsetup_r+0x82>
 8021318:	06dd      	lsls	r5, r3, #27
 802131a:	d411      	bmi.n	8021340 <__swsetup_r+0x50>
 802131c:	2309      	movs	r3, #9
 802131e:	6033      	str	r3, [r6, #0]
 8021320:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021324:	81a3      	strh	r3, [r4, #12]
 8021326:	f04f 30ff 	mov.w	r0, #4294967295
 802132a:	e03e      	b.n	80213aa <__swsetup_r+0xba>
 802132c:	4b25      	ldr	r3, [pc, #148]	; (80213c4 <__swsetup_r+0xd4>)
 802132e:	429c      	cmp	r4, r3
 8021330:	d101      	bne.n	8021336 <__swsetup_r+0x46>
 8021332:	68ac      	ldr	r4, [r5, #8]
 8021334:	e7eb      	b.n	802130e <__swsetup_r+0x1e>
 8021336:	4b24      	ldr	r3, [pc, #144]	; (80213c8 <__swsetup_r+0xd8>)
 8021338:	429c      	cmp	r4, r3
 802133a:	bf08      	it	eq
 802133c:	68ec      	ldreq	r4, [r5, #12]
 802133e:	e7e6      	b.n	802130e <__swsetup_r+0x1e>
 8021340:	0758      	lsls	r0, r3, #29
 8021342:	d512      	bpl.n	802136a <__swsetup_r+0x7a>
 8021344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021346:	b141      	cbz	r1, 802135a <__swsetup_r+0x6a>
 8021348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802134c:	4299      	cmp	r1, r3
 802134e:	d002      	beq.n	8021356 <__swsetup_r+0x66>
 8021350:	4630      	mov	r0, r6
 8021352:	f7ff fc91 	bl	8020c78 <_free_r>
 8021356:	2300      	movs	r3, #0
 8021358:	6363      	str	r3, [r4, #52]	; 0x34
 802135a:	89a3      	ldrh	r3, [r4, #12]
 802135c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021360:	81a3      	strh	r3, [r4, #12]
 8021362:	2300      	movs	r3, #0
 8021364:	6063      	str	r3, [r4, #4]
 8021366:	6923      	ldr	r3, [r4, #16]
 8021368:	6023      	str	r3, [r4, #0]
 802136a:	89a3      	ldrh	r3, [r4, #12]
 802136c:	f043 0308 	orr.w	r3, r3, #8
 8021370:	81a3      	strh	r3, [r4, #12]
 8021372:	6923      	ldr	r3, [r4, #16]
 8021374:	b94b      	cbnz	r3, 802138a <__swsetup_r+0x9a>
 8021376:	89a3      	ldrh	r3, [r4, #12]
 8021378:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802137c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021380:	d003      	beq.n	802138a <__swsetup_r+0x9a>
 8021382:	4621      	mov	r1, r4
 8021384:	4630      	mov	r0, r6
 8021386:	f000 f96b 	bl	8021660 <__smakebuf_r>
 802138a:	89a0      	ldrh	r0, [r4, #12]
 802138c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021390:	f010 0301 	ands.w	r3, r0, #1
 8021394:	d00a      	beq.n	80213ac <__swsetup_r+0xbc>
 8021396:	2300      	movs	r3, #0
 8021398:	60a3      	str	r3, [r4, #8]
 802139a:	6963      	ldr	r3, [r4, #20]
 802139c:	425b      	negs	r3, r3
 802139e:	61a3      	str	r3, [r4, #24]
 80213a0:	6923      	ldr	r3, [r4, #16]
 80213a2:	b943      	cbnz	r3, 80213b6 <__swsetup_r+0xc6>
 80213a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80213a8:	d1ba      	bne.n	8021320 <__swsetup_r+0x30>
 80213aa:	bd70      	pop	{r4, r5, r6, pc}
 80213ac:	0781      	lsls	r1, r0, #30
 80213ae:	bf58      	it	pl
 80213b0:	6963      	ldrpl	r3, [r4, #20]
 80213b2:	60a3      	str	r3, [r4, #8]
 80213b4:	e7f4      	b.n	80213a0 <__swsetup_r+0xb0>
 80213b6:	2000      	movs	r0, #0
 80213b8:	e7f7      	b.n	80213aa <__swsetup_r+0xba>
 80213ba:	bf00      	nop
 80213bc:	20000504 	.word	0x20000504
 80213c0:	080267bc 	.word	0x080267bc
 80213c4:	080267dc 	.word	0x080267dc
 80213c8:	0802679c 	.word	0x0802679c

080213cc <__assert_func>:
 80213cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80213ce:	4614      	mov	r4, r2
 80213d0:	461a      	mov	r2, r3
 80213d2:	4b09      	ldr	r3, [pc, #36]	; (80213f8 <__assert_func+0x2c>)
 80213d4:	681b      	ldr	r3, [r3, #0]
 80213d6:	4605      	mov	r5, r0
 80213d8:	68d8      	ldr	r0, [r3, #12]
 80213da:	b14c      	cbz	r4, 80213f0 <__assert_func+0x24>
 80213dc:	4b07      	ldr	r3, [pc, #28]	; (80213fc <__assert_func+0x30>)
 80213de:	9100      	str	r1, [sp, #0]
 80213e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80213e4:	4906      	ldr	r1, [pc, #24]	; (8021400 <__assert_func+0x34>)
 80213e6:	462b      	mov	r3, r5
 80213e8:	f000 f8e0 	bl	80215ac <fiprintf>
 80213ec:	f000 fe28 	bl	8022040 <abort>
 80213f0:	4b04      	ldr	r3, [pc, #16]	; (8021404 <__assert_func+0x38>)
 80213f2:	461c      	mov	r4, r3
 80213f4:	e7f3      	b.n	80213de <__assert_func+0x12>
 80213f6:	bf00      	nop
 80213f8:	20000504 	.word	0x20000504
 80213fc:	08026876 	.word	0x08026876
 8021400:	08026883 	.word	0x08026883
 8021404:	080268b1 	.word	0x080268b1

08021408 <_close_r>:
 8021408:	b538      	push	{r3, r4, r5, lr}
 802140a:	4d06      	ldr	r5, [pc, #24]	; (8021424 <_close_r+0x1c>)
 802140c:	2300      	movs	r3, #0
 802140e:	4604      	mov	r4, r0
 8021410:	4608      	mov	r0, r1
 8021412:	602b      	str	r3, [r5, #0]
 8021414:	f7e0 fa5d 	bl	80018d2 <_close>
 8021418:	1c43      	adds	r3, r0, #1
 802141a:	d102      	bne.n	8021422 <_close_r+0x1a>
 802141c:	682b      	ldr	r3, [r5, #0]
 802141e:	b103      	cbz	r3, 8021422 <_close_r+0x1a>
 8021420:	6023      	str	r3, [r4, #0]
 8021422:	bd38      	pop	{r3, r4, r5, pc}
 8021424:	20016e00 	.word	0x20016e00

08021428 <__sflush_r>:
 8021428:	898a      	ldrh	r2, [r1, #12]
 802142a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802142e:	4605      	mov	r5, r0
 8021430:	0710      	lsls	r0, r2, #28
 8021432:	460c      	mov	r4, r1
 8021434:	d458      	bmi.n	80214e8 <__sflush_r+0xc0>
 8021436:	684b      	ldr	r3, [r1, #4]
 8021438:	2b00      	cmp	r3, #0
 802143a:	dc05      	bgt.n	8021448 <__sflush_r+0x20>
 802143c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802143e:	2b00      	cmp	r3, #0
 8021440:	dc02      	bgt.n	8021448 <__sflush_r+0x20>
 8021442:	2000      	movs	r0, #0
 8021444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802144a:	2e00      	cmp	r6, #0
 802144c:	d0f9      	beq.n	8021442 <__sflush_r+0x1a>
 802144e:	2300      	movs	r3, #0
 8021450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021454:	682f      	ldr	r7, [r5, #0]
 8021456:	602b      	str	r3, [r5, #0]
 8021458:	d032      	beq.n	80214c0 <__sflush_r+0x98>
 802145a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802145c:	89a3      	ldrh	r3, [r4, #12]
 802145e:	075a      	lsls	r2, r3, #29
 8021460:	d505      	bpl.n	802146e <__sflush_r+0x46>
 8021462:	6863      	ldr	r3, [r4, #4]
 8021464:	1ac0      	subs	r0, r0, r3
 8021466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021468:	b10b      	cbz	r3, 802146e <__sflush_r+0x46>
 802146a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802146c:	1ac0      	subs	r0, r0, r3
 802146e:	2300      	movs	r3, #0
 8021470:	4602      	mov	r2, r0
 8021472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021474:	6a21      	ldr	r1, [r4, #32]
 8021476:	4628      	mov	r0, r5
 8021478:	47b0      	blx	r6
 802147a:	1c43      	adds	r3, r0, #1
 802147c:	89a3      	ldrh	r3, [r4, #12]
 802147e:	d106      	bne.n	802148e <__sflush_r+0x66>
 8021480:	6829      	ldr	r1, [r5, #0]
 8021482:	291d      	cmp	r1, #29
 8021484:	d82c      	bhi.n	80214e0 <__sflush_r+0xb8>
 8021486:	4a2a      	ldr	r2, [pc, #168]	; (8021530 <__sflush_r+0x108>)
 8021488:	40ca      	lsrs	r2, r1
 802148a:	07d6      	lsls	r6, r2, #31
 802148c:	d528      	bpl.n	80214e0 <__sflush_r+0xb8>
 802148e:	2200      	movs	r2, #0
 8021490:	6062      	str	r2, [r4, #4]
 8021492:	04d9      	lsls	r1, r3, #19
 8021494:	6922      	ldr	r2, [r4, #16]
 8021496:	6022      	str	r2, [r4, #0]
 8021498:	d504      	bpl.n	80214a4 <__sflush_r+0x7c>
 802149a:	1c42      	adds	r2, r0, #1
 802149c:	d101      	bne.n	80214a2 <__sflush_r+0x7a>
 802149e:	682b      	ldr	r3, [r5, #0]
 80214a0:	b903      	cbnz	r3, 80214a4 <__sflush_r+0x7c>
 80214a2:	6560      	str	r0, [r4, #84]	; 0x54
 80214a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80214a6:	602f      	str	r7, [r5, #0]
 80214a8:	2900      	cmp	r1, #0
 80214aa:	d0ca      	beq.n	8021442 <__sflush_r+0x1a>
 80214ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80214b0:	4299      	cmp	r1, r3
 80214b2:	d002      	beq.n	80214ba <__sflush_r+0x92>
 80214b4:	4628      	mov	r0, r5
 80214b6:	f7ff fbdf 	bl	8020c78 <_free_r>
 80214ba:	2000      	movs	r0, #0
 80214bc:	6360      	str	r0, [r4, #52]	; 0x34
 80214be:	e7c1      	b.n	8021444 <__sflush_r+0x1c>
 80214c0:	6a21      	ldr	r1, [r4, #32]
 80214c2:	2301      	movs	r3, #1
 80214c4:	4628      	mov	r0, r5
 80214c6:	47b0      	blx	r6
 80214c8:	1c41      	adds	r1, r0, #1
 80214ca:	d1c7      	bne.n	802145c <__sflush_r+0x34>
 80214cc:	682b      	ldr	r3, [r5, #0]
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	d0c4      	beq.n	802145c <__sflush_r+0x34>
 80214d2:	2b1d      	cmp	r3, #29
 80214d4:	d001      	beq.n	80214da <__sflush_r+0xb2>
 80214d6:	2b16      	cmp	r3, #22
 80214d8:	d101      	bne.n	80214de <__sflush_r+0xb6>
 80214da:	602f      	str	r7, [r5, #0]
 80214dc:	e7b1      	b.n	8021442 <__sflush_r+0x1a>
 80214de:	89a3      	ldrh	r3, [r4, #12]
 80214e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80214e4:	81a3      	strh	r3, [r4, #12]
 80214e6:	e7ad      	b.n	8021444 <__sflush_r+0x1c>
 80214e8:	690f      	ldr	r7, [r1, #16]
 80214ea:	2f00      	cmp	r7, #0
 80214ec:	d0a9      	beq.n	8021442 <__sflush_r+0x1a>
 80214ee:	0793      	lsls	r3, r2, #30
 80214f0:	680e      	ldr	r6, [r1, #0]
 80214f2:	bf08      	it	eq
 80214f4:	694b      	ldreq	r3, [r1, #20]
 80214f6:	600f      	str	r7, [r1, #0]
 80214f8:	bf18      	it	ne
 80214fa:	2300      	movne	r3, #0
 80214fc:	eba6 0807 	sub.w	r8, r6, r7
 8021500:	608b      	str	r3, [r1, #8]
 8021502:	f1b8 0f00 	cmp.w	r8, #0
 8021506:	dd9c      	ble.n	8021442 <__sflush_r+0x1a>
 8021508:	6a21      	ldr	r1, [r4, #32]
 802150a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802150c:	4643      	mov	r3, r8
 802150e:	463a      	mov	r2, r7
 8021510:	4628      	mov	r0, r5
 8021512:	47b0      	blx	r6
 8021514:	2800      	cmp	r0, #0
 8021516:	dc06      	bgt.n	8021526 <__sflush_r+0xfe>
 8021518:	89a3      	ldrh	r3, [r4, #12]
 802151a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802151e:	81a3      	strh	r3, [r4, #12]
 8021520:	f04f 30ff 	mov.w	r0, #4294967295
 8021524:	e78e      	b.n	8021444 <__sflush_r+0x1c>
 8021526:	4407      	add	r7, r0
 8021528:	eba8 0800 	sub.w	r8, r8, r0
 802152c:	e7e9      	b.n	8021502 <__sflush_r+0xda>
 802152e:	bf00      	nop
 8021530:	20400001 	.word	0x20400001

08021534 <_fflush_r>:
 8021534:	b538      	push	{r3, r4, r5, lr}
 8021536:	690b      	ldr	r3, [r1, #16]
 8021538:	4605      	mov	r5, r0
 802153a:	460c      	mov	r4, r1
 802153c:	b913      	cbnz	r3, 8021544 <_fflush_r+0x10>
 802153e:	2500      	movs	r5, #0
 8021540:	4628      	mov	r0, r5
 8021542:	bd38      	pop	{r3, r4, r5, pc}
 8021544:	b118      	cbz	r0, 802154e <_fflush_r+0x1a>
 8021546:	6983      	ldr	r3, [r0, #24]
 8021548:	b90b      	cbnz	r3, 802154e <_fflush_r+0x1a>
 802154a:	f7ff fa71 	bl	8020a30 <__sinit>
 802154e:	4b14      	ldr	r3, [pc, #80]	; (80215a0 <_fflush_r+0x6c>)
 8021550:	429c      	cmp	r4, r3
 8021552:	d11b      	bne.n	802158c <_fflush_r+0x58>
 8021554:	686c      	ldr	r4, [r5, #4]
 8021556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802155a:	2b00      	cmp	r3, #0
 802155c:	d0ef      	beq.n	802153e <_fflush_r+0xa>
 802155e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021560:	07d0      	lsls	r0, r2, #31
 8021562:	d404      	bmi.n	802156e <_fflush_r+0x3a>
 8021564:	0599      	lsls	r1, r3, #22
 8021566:	d402      	bmi.n	802156e <_fflush_r+0x3a>
 8021568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802156a:	f7ff fb24 	bl	8020bb6 <__retarget_lock_acquire_recursive>
 802156e:	4628      	mov	r0, r5
 8021570:	4621      	mov	r1, r4
 8021572:	f7ff ff59 	bl	8021428 <__sflush_r>
 8021576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021578:	07da      	lsls	r2, r3, #31
 802157a:	4605      	mov	r5, r0
 802157c:	d4e0      	bmi.n	8021540 <_fflush_r+0xc>
 802157e:	89a3      	ldrh	r3, [r4, #12]
 8021580:	059b      	lsls	r3, r3, #22
 8021582:	d4dd      	bmi.n	8021540 <_fflush_r+0xc>
 8021584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021586:	f7ff fb17 	bl	8020bb8 <__retarget_lock_release_recursive>
 802158a:	e7d9      	b.n	8021540 <_fflush_r+0xc>
 802158c:	4b05      	ldr	r3, [pc, #20]	; (80215a4 <_fflush_r+0x70>)
 802158e:	429c      	cmp	r4, r3
 8021590:	d101      	bne.n	8021596 <_fflush_r+0x62>
 8021592:	68ac      	ldr	r4, [r5, #8]
 8021594:	e7df      	b.n	8021556 <_fflush_r+0x22>
 8021596:	4b04      	ldr	r3, [pc, #16]	; (80215a8 <_fflush_r+0x74>)
 8021598:	429c      	cmp	r4, r3
 802159a:	bf08      	it	eq
 802159c:	68ec      	ldreq	r4, [r5, #12]
 802159e:	e7da      	b.n	8021556 <_fflush_r+0x22>
 80215a0:	080267bc 	.word	0x080267bc
 80215a4:	080267dc 	.word	0x080267dc
 80215a8:	0802679c 	.word	0x0802679c

080215ac <fiprintf>:
 80215ac:	b40e      	push	{r1, r2, r3}
 80215ae:	b503      	push	{r0, r1, lr}
 80215b0:	4601      	mov	r1, r0
 80215b2:	ab03      	add	r3, sp, #12
 80215b4:	4805      	ldr	r0, [pc, #20]	; (80215cc <fiprintf+0x20>)
 80215b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80215ba:	6800      	ldr	r0, [r0, #0]
 80215bc:	9301      	str	r3, [sp, #4]
 80215be:	f000 fa21 	bl	8021a04 <_vfiprintf_r>
 80215c2:	b002      	add	sp, #8
 80215c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80215c8:	b003      	add	sp, #12
 80215ca:	4770      	bx	lr
 80215cc:	20000504 	.word	0x20000504

080215d0 <_gettimeofday_r>:
 80215d0:	b538      	push	{r3, r4, r5, lr}
 80215d2:	4d07      	ldr	r5, [pc, #28]	; (80215f0 <_gettimeofday_r+0x20>)
 80215d4:	2300      	movs	r3, #0
 80215d6:	4604      	mov	r4, r0
 80215d8:	4608      	mov	r0, r1
 80215da:	4611      	mov	r1, r2
 80215dc:	602b      	str	r3, [r5, #0]
 80215de:	f000 fdcb 	bl	8022178 <_gettimeofday>
 80215e2:	1c43      	adds	r3, r0, #1
 80215e4:	d102      	bne.n	80215ec <_gettimeofday_r+0x1c>
 80215e6:	682b      	ldr	r3, [r5, #0]
 80215e8:	b103      	cbz	r3, 80215ec <_gettimeofday_r+0x1c>
 80215ea:	6023      	str	r3, [r4, #0]
 80215ec:	bd38      	pop	{r3, r4, r5, pc}
 80215ee:	bf00      	nop
 80215f0:	20016e00 	.word	0x20016e00

080215f4 <_lseek_r>:
 80215f4:	b538      	push	{r3, r4, r5, lr}
 80215f6:	4d07      	ldr	r5, [pc, #28]	; (8021614 <_lseek_r+0x20>)
 80215f8:	4604      	mov	r4, r0
 80215fa:	4608      	mov	r0, r1
 80215fc:	4611      	mov	r1, r2
 80215fe:	2200      	movs	r2, #0
 8021600:	602a      	str	r2, [r5, #0]
 8021602:	461a      	mov	r2, r3
 8021604:	f7e0 f98c 	bl	8001920 <_lseek>
 8021608:	1c43      	adds	r3, r0, #1
 802160a:	d102      	bne.n	8021612 <_lseek_r+0x1e>
 802160c:	682b      	ldr	r3, [r5, #0]
 802160e:	b103      	cbz	r3, 8021612 <_lseek_r+0x1e>
 8021610:	6023      	str	r3, [r4, #0]
 8021612:	bd38      	pop	{r3, r4, r5, pc}
 8021614:	20016e00 	.word	0x20016e00

08021618 <__swhatbuf_r>:
 8021618:	b570      	push	{r4, r5, r6, lr}
 802161a:	460e      	mov	r6, r1
 802161c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021620:	2900      	cmp	r1, #0
 8021622:	b096      	sub	sp, #88	; 0x58
 8021624:	4614      	mov	r4, r2
 8021626:	461d      	mov	r5, r3
 8021628:	da07      	bge.n	802163a <__swhatbuf_r+0x22>
 802162a:	2300      	movs	r3, #0
 802162c:	602b      	str	r3, [r5, #0]
 802162e:	89b3      	ldrh	r3, [r6, #12]
 8021630:	061a      	lsls	r2, r3, #24
 8021632:	d410      	bmi.n	8021656 <__swhatbuf_r+0x3e>
 8021634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021638:	e00e      	b.n	8021658 <__swhatbuf_r+0x40>
 802163a:	466a      	mov	r2, sp
 802163c:	f000 fd08 	bl	8022050 <_fstat_r>
 8021640:	2800      	cmp	r0, #0
 8021642:	dbf2      	blt.n	802162a <__swhatbuf_r+0x12>
 8021644:	9a01      	ldr	r2, [sp, #4]
 8021646:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802164a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802164e:	425a      	negs	r2, r3
 8021650:	415a      	adcs	r2, r3
 8021652:	602a      	str	r2, [r5, #0]
 8021654:	e7ee      	b.n	8021634 <__swhatbuf_r+0x1c>
 8021656:	2340      	movs	r3, #64	; 0x40
 8021658:	2000      	movs	r0, #0
 802165a:	6023      	str	r3, [r4, #0]
 802165c:	b016      	add	sp, #88	; 0x58
 802165e:	bd70      	pop	{r4, r5, r6, pc}

08021660 <__smakebuf_r>:
 8021660:	898b      	ldrh	r3, [r1, #12]
 8021662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021664:	079d      	lsls	r5, r3, #30
 8021666:	4606      	mov	r6, r0
 8021668:	460c      	mov	r4, r1
 802166a:	d507      	bpl.n	802167c <__smakebuf_r+0x1c>
 802166c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021670:	6023      	str	r3, [r4, #0]
 8021672:	6123      	str	r3, [r4, #16]
 8021674:	2301      	movs	r3, #1
 8021676:	6163      	str	r3, [r4, #20]
 8021678:	b002      	add	sp, #8
 802167a:	bd70      	pop	{r4, r5, r6, pc}
 802167c:	ab01      	add	r3, sp, #4
 802167e:	466a      	mov	r2, sp
 8021680:	f7ff ffca 	bl	8021618 <__swhatbuf_r>
 8021684:	9900      	ldr	r1, [sp, #0]
 8021686:	4605      	mov	r5, r0
 8021688:	4630      	mov	r0, r6
 802168a:	f7ff fb45 	bl	8020d18 <_malloc_r>
 802168e:	b948      	cbnz	r0, 80216a4 <__smakebuf_r+0x44>
 8021690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021694:	059a      	lsls	r2, r3, #22
 8021696:	d4ef      	bmi.n	8021678 <__smakebuf_r+0x18>
 8021698:	f023 0303 	bic.w	r3, r3, #3
 802169c:	f043 0302 	orr.w	r3, r3, #2
 80216a0:	81a3      	strh	r3, [r4, #12]
 80216a2:	e7e3      	b.n	802166c <__smakebuf_r+0xc>
 80216a4:	4b0d      	ldr	r3, [pc, #52]	; (80216dc <__smakebuf_r+0x7c>)
 80216a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80216a8:	89a3      	ldrh	r3, [r4, #12]
 80216aa:	6020      	str	r0, [r4, #0]
 80216ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80216b0:	81a3      	strh	r3, [r4, #12]
 80216b2:	9b00      	ldr	r3, [sp, #0]
 80216b4:	6163      	str	r3, [r4, #20]
 80216b6:	9b01      	ldr	r3, [sp, #4]
 80216b8:	6120      	str	r0, [r4, #16]
 80216ba:	b15b      	cbz	r3, 80216d4 <__smakebuf_r+0x74>
 80216bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80216c0:	4630      	mov	r0, r6
 80216c2:	f000 fcd7 	bl	8022074 <_isatty_r>
 80216c6:	b128      	cbz	r0, 80216d4 <__smakebuf_r+0x74>
 80216c8:	89a3      	ldrh	r3, [r4, #12]
 80216ca:	f023 0303 	bic.w	r3, r3, #3
 80216ce:	f043 0301 	orr.w	r3, r3, #1
 80216d2:	81a3      	strh	r3, [r4, #12]
 80216d4:	89a0      	ldrh	r0, [r4, #12]
 80216d6:	4305      	orrs	r5, r0
 80216d8:	81a5      	strh	r5, [r4, #12]
 80216da:	e7cd      	b.n	8021678 <__smakebuf_r+0x18>
 80216dc:	080209c9 	.word	0x080209c9

080216e0 <__malloc_lock>:
 80216e0:	4801      	ldr	r0, [pc, #4]	; (80216e8 <__malloc_lock+0x8>)
 80216e2:	f7ff ba68 	b.w	8020bb6 <__retarget_lock_acquire_recursive>
 80216e6:	bf00      	nop
 80216e8:	20016e0c 	.word	0x20016e0c

080216ec <__malloc_unlock>:
 80216ec:	4801      	ldr	r0, [pc, #4]	; (80216f4 <__malloc_unlock+0x8>)
 80216ee:	f7ff ba63 	b.w	8020bb8 <__retarget_lock_release_recursive>
 80216f2:	bf00      	nop
 80216f4:	20016e0c 	.word	0x20016e0c

080216f8 <__ssputs_r>:
 80216f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80216fc:	688e      	ldr	r6, [r1, #8]
 80216fe:	429e      	cmp	r6, r3
 8021700:	4682      	mov	sl, r0
 8021702:	460c      	mov	r4, r1
 8021704:	4690      	mov	r8, r2
 8021706:	461f      	mov	r7, r3
 8021708:	d838      	bhi.n	802177c <__ssputs_r+0x84>
 802170a:	898a      	ldrh	r2, [r1, #12]
 802170c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021710:	d032      	beq.n	8021778 <__ssputs_r+0x80>
 8021712:	6825      	ldr	r5, [r4, #0]
 8021714:	6909      	ldr	r1, [r1, #16]
 8021716:	eba5 0901 	sub.w	r9, r5, r1
 802171a:	6965      	ldr	r5, [r4, #20]
 802171c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021720:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021724:	3301      	adds	r3, #1
 8021726:	444b      	add	r3, r9
 8021728:	106d      	asrs	r5, r5, #1
 802172a:	429d      	cmp	r5, r3
 802172c:	bf38      	it	cc
 802172e:	461d      	movcc	r5, r3
 8021730:	0553      	lsls	r3, r2, #21
 8021732:	d531      	bpl.n	8021798 <__ssputs_r+0xa0>
 8021734:	4629      	mov	r1, r5
 8021736:	f7ff faef 	bl	8020d18 <_malloc_r>
 802173a:	4606      	mov	r6, r0
 802173c:	b950      	cbnz	r0, 8021754 <__ssputs_r+0x5c>
 802173e:	230c      	movs	r3, #12
 8021740:	f8ca 3000 	str.w	r3, [sl]
 8021744:	89a3      	ldrh	r3, [r4, #12]
 8021746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802174a:	81a3      	strh	r3, [r4, #12]
 802174c:	f04f 30ff 	mov.w	r0, #4294967295
 8021750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021754:	6921      	ldr	r1, [r4, #16]
 8021756:	464a      	mov	r2, r9
 8021758:	f7ff fa4e 	bl	8020bf8 <memcpy>
 802175c:	89a3      	ldrh	r3, [r4, #12]
 802175e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021766:	81a3      	strh	r3, [r4, #12]
 8021768:	6126      	str	r6, [r4, #16]
 802176a:	6165      	str	r5, [r4, #20]
 802176c:	444e      	add	r6, r9
 802176e:	eba5 0509 	sub.w	r5, r5, r9
 8021772:	6026      	str	r6, [r4, #0]
 8021774:	60a5      	str	r5, [r4, #8]
 8021776:	463e      	mov	r6, r7
 8021778:	42be      	cmp	r6, r7
 802177a:	d900      	bls.n	802177e <__ssputs_r+0x86>
 802177c:	463e      	mov	r6, r7
 802177e:	4632      	mov	r2, r6
 8021780:	6820      	ldr	r0, [r4, #0]
 8021782:	4641      	mov	r1, r8
 8021784:	f7ff fa46 	bl	8020c14 <memmove>
 8021788:	68a3      	ldr	r3, [r4, #8]
 802178a:	6822      	ldr	r2, [r4, #0]
 802178c:	1b9b      	subs	r3, r3, r6
 802178e:	4432      	add	r2, r6
 8021790:	60a3      	str	r3, [r4, #8]
 8021792:	6022      	str	r2, [r4, #0]
 8021794:	2000      	movs	r0, #0
 8021796:	e7db      	b.n	8021750 <__ssputs_r+0x58>
 8021798:	462a      	mov	r2, r5
 802179a:	f000 fc7b 	bl	8022094 <_realloc_r>
 802179e:	4606      	mov	r6, r0
 80217a0:	2800      	cmp	r0, #0
 80217a2:	d1e1      	bne.n	8021768 <__ssputs_r+0x70>
 80217a4:	6921      	ldr	r1, [r4, #16]
 80217a6:	4650      	mov	r0, sl
 80217a8:	f7ff fa66 	bl	8020c78 <_free_r>
 80217ac:	e7c7      	b.n	802173e <__ssputs_r+0x46>
	...

080217b0 <_svfiprintf_r>:
 80217b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217b4:	4698      	mov	r8, r3
 80217b6:	898b      	ldrh	r3, [r1, #12]
 80217b8:	061b      	lsls	r3, r3, #24
 80217ba:	b09d      	sub	sp, #116	; 0x74
 80217bc:	4607      	mov	r7, r0
 80217be:	460d      	mov	r5, r1
 80217c0:	4614      	mov	r4, r2
 80217c2:	d50e      	bpl.n	80217e2 <_svfiprintf_r+0x32>
 80217c4:	690b      	ldr	r3, [r1, #16]
 80217c6:	b963      	cbnz	r3, 80217e2 <_svfiprintf_r+0x32>
 80217c8:	2140      	movs	r1, #64	; 0x40
 80217ca:	f7ff faa5 	bl	8020d18 <_malloc_r>
 80217ce:	6028      	str	r0, [r5, #0]
 80217d0:	6128      	str	r0, [r5, #16]
 80217d2:	b920      	cbnz	r0, 80217de <_svfiprintf_r+0x2e>
 80217d4:	230c      	movs	r3, #12
 80217d6:	603b      	str	r3, [r7, #0]
 80217d8:	f04f 30ff 	mov.w	r0, #4294967295
 80217dc:	e0d1      	b.n	8021982 <_svfiprintf_r+0x1d2>
 80217de:	2340      	movs	r3, #64	; 0x40
 80217e0:	616b      	str	r3, [r5, #20]
 80217e2:	2300      	movs	r3, #0
 80217e4:	9309      	str	r3, [sp, #36]	; 0x24
 80217e6:	2320      	movs	r3, #32
 80217e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80217ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80217f0:	2330      	movs	r3, #48	; 0x30
 80217f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802199c <_svfiprintf_r+0x1ec>
 80217f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80217fa:	f04f 0901 	mov.w	r9, #1
 80217fe:	4623      	mov	r3, r4
 8021800:	469a      	mov	sl, r3
 8021802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021806:	b10a      	cbz	r2, 802180c <_svfiprintf_r+0x5c>
 8021808:	2a25      	cmp	r2, #37	; 0x25
 802180a:	d1f9      	bne.n	8021800 <_svfiprintf_r+0x50>
 802180c:	ebba 0b04 	subs.w	fp, sl, r4
 8021810:	d00b      	beq.n	802182a <_svfiprintf_r+0x7a>
 8021812:	465b      	mov	r3, fp
 8021814:	4622      	mov	r2, r4
 8021816:	4629      	mov	r1, r5
 8021818:	4638      	mov	r0, r7
 802181a:	f7ff ff6d 	bl	80216f8 <__ssputs_r>
 802181e:	3001      	adds	r0, #1
 8021820:	f000 80aa 	beq.w	8021978 <_svfiprintf_r+0x1c8>
 8021824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021826:	445a      	add	r2, fp
 8021828:	9209      	str	r2, [sp, #36]	; 0x24
 802182a:	f89a 3000 	ldrb.w	r3, [sl]
 802182e:	2b00      	cmp	r3, #0
 8021830:	f000 80a2 	beq.w	8021978 <_svfiprintf_r+0x1c8>
 8021834:	2300      	movs	r3, #0
 8021836:	f04f 32ff 	mov.w	r2, #4294967295
 802183a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802183e:	f10a 0a01 	add.w	sl, sl, #1
 8021842:	9304      	str	r3, [sp, #16]
 8021844:	9307      	str	r3, [sp, #28]
 8021846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802184a:	931a      	str	r3, [sp, #104]	; 0x68
 802184c:	4654      	mov	r4, sl
 802184e:	2205      	movs	r2, #5
 8021850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021854:	4851      	ldr	r0, [pc, #324]	; (802199c <_svfiprintf_r+0x1ec>)
 8021856:	f7de fcc3 	bl	80001e0 <memchr>
 802185a:	9a04      	ldr	r2, [sp, #16]
 802185c:	b9d8      	cbnz	r0, 8021896 <_svfiprintf_r+0xe6>
 802185e:	06d0      	lsls	r0, r2, #27
 8021860:	bf44      	itt	mi
 8021862:	2320      	movmi	r3, #32
 8021864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021868:	0711      	lsls	r1, r2, #28
 802186a:	bf44      	itt	mi
 802186c:	232b      	movmi	r3, #43	; 0x2b
 802186e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021872:	f89a 3000 	ldrb.w	r3, [sl]
 8021876:	2b2a      	cmp	r3, #42	; 0x2a
 8021878:	d015      	beq.n	80218a6 <_svfiprintf_r+0xf6>
 802187a:	9a07      	ldr	r2, [sp, #28]
 802187c:	4654      	mov	r4, sl
 802187e:	2000      	movs	r0, #0
 8021880:	f04f 0c0a 	mov.w	ip, #10
 8021884:	4621      	mov	r1, r4
 8021886:	f811 3b01 	ldrb.w	r3, [r1], #1
 802188a:	3b30      	subs	r3, #48	; 0x30
 802188c:	2b09      	cmp	r3, #9
 802188e:	d94e      	bls.n	802192e <_svfiprintf_r+0x17e>
 8021890:	b1b0      	cbz	r0, 80218c0 <_svfiprintf_r+0x110>
 8021892:	9207      	str	r2, [sp, #28]
 8021894:	e014      	b.n	80218c0 <_svfiprintf_r+0x110>
 8021896:	eba0 0308 	sub.w	r3, r0, r8
 802189a:	fa09 f303 	lsl.w	r3, r9, r3
 802189e:	4313      	orrs	r3, r2
 80218a0:	9304      	str	r3, [sp, #16]
 80218a2:	46a2      	mov	sl, r4
 80218a4:	e7d2      	b.n	802184c <_svfiprintf_r+0x9c>
 80218a6:	9b03      	ldr	r3, [sp, #12]
 80218a8:	1d19      	adds	r1, r3, #4
 80218aa:	681b      	ldr	r3, [r3, #0]
 80218ac:	9103      	str	r1, [sp, #12]
 80218ae:	2b00      	cmp	r3, #0
 80218b0:	bfbb      	ittet	lt
 80218b2:	425b      	neglt	r3, r3
 80218b4:	f042 0202 	orrlt.w	r2, r2, #2
 80218b8:	9307      	strge	r3, [sp, #28]
 80218ba:	9307      	strlt	r3, [sp, #28]
 80218bc:	bfb8      	it	lt
 80218be:	9204      	strlt	r2, [sp, #16]
 80218c0:	7823      	ldrb	r3, [r4, #0]
 80218c2:	2b2e      	cmp	r3, #46	; 0x2e
 80218c4:	d10c      	bne.n	80218e0 <_svfiprintf_r+0x130>
 80218c6:	7863      	ldrb	r3, [r4, #1]
 80218c8:	2b2a      	cmp	r3, #42	; 0x2a
 80218ca:	d135      	bne.n	8021938 <_svfiprintf_r+0x188>
 80218cc:	9b03      	ldr	r3, [sp, #12]
 80218ce:	1d1a      	adds	r2, r3, #4
 80218d0:	681b      	ldr	r3, [r3, #0]
 80218d2:	9203      	str	r2, [sp, #12]
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	bfb8      	it	lt
 80218d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80218dc:	3402      	adds	r4, #2
 80218de:	9305      	str	r3, [sp, #20]
 80218e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80219ac <_svfiprintf_r+0x1fc>
 80218e4:	7821      	ldrb	r1, [r4, #0]
 80218e6:	2203      	movs	r2, #3
 80218e8:	4650      	mov	r0, sl
 80218ea:	f7de fc79 	bl	80001e0 <memchr>
 80218ee:	b140      	cbz	r0, 8021902 <_svfiprintf_r+0x152>
 80218f0:	2340      	movs	r3, #64	; 0x40
 80218f2:	eba0 000a 	sub.w	r0, r0, sl
 80218f6:	fa03 f000 	lsl.w	r0, r3, r0
 80218fa:	9b04      	ldr	r3, [sp, #16]
 80218fc:	4303      	orrs	r3, r0
 80218fe:	3401      	adds	r4, #1
 8021900:	9304      	str	r3, [sp, #16]
 8021902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021906:	4826      	ldr	r0, [pc, #152]	; (80219a0 <_svfiprintf_r+0x1f0>)
 8021908:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802190c:	2206      	movs	r2, #6
 802190e:	f7de fc67 	bl	80001e0 <memchr>
 8021912:	2800      	cmp	r0, #0
 8021914:	d038      	beq.n	8021988 <_svfiprintf_r+0x1d8>
 8021916:	4b23      	ldr	r3, [pc, #140]	; (80219a4 <_svfiprintf_r+0x1f4>)
 8021918:	bb1b      	cbnz	r3, 8021962 <_svfiprintf_r+0x1b2>
 802191a:	9b03      	ldr	r3, [sp, #12]
 802191c:	3307      	adds	r3, #7
 802191e:	f023 0307 	bic.w	r3, r3, #7
 8021922:	3308      	adds	r3, #8
 8021924:	9303      	str	r3, [sp, #12]
 8021926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021928:	4433      	add	r3, r6
 802192a:	9309      	str	r3, [sp, #36]	; 0x24
 802192c:	e767      	b.n	80217fe <_svfiprintf_r+0x4e>
 802192e:	fb0c 3202 	mla	r2, ip, r2, r3
 8021932:	460c      	mov	r4, r1
 8021934:	2001      	movs	r0, #1
 8021936:	e7a5      	b.n	8021884 <_svfiprintf_r+0xd4>
 8021938:	2300      	movs	r3, #0
 802193a:	3401      	adds	r4, #1
 802193c:	9305      	str	r3, [sp, #20]
 802193e:	4619      	mov	r1, r3
 8021940:	f04f 0c0a 	mov.w	ip, #10
 8021944:	4620      	mov	r0, r4
 8021946:	f810 2b01 	ldrb.w	r2, [r0], #1
 802194a:	3a30      	subs	r2, #48	; 0x30
 802194c:	2a09      	cmp	r2, #9
 802194e:	d903      	bls.n	8021958 <_svfiprintf_r+0x1a8>
 8021950:	2b00      	cmp	r3, #0
 8021952:	d0c5      	beq.n	80218e0 <_svfiprintf_r+0x130>
 8021954:	9105      	str	r1, [sp, #20]
 8021956:	e7c3      	b.n	80218e0 <_svfiprintf_r+0x130>
 8021958:	fb0c 2101 	mla	r1, ip, r1, r2
 802195c:	4604      	mov	r4, r0
 802195e:	2301      	movs	r3, #1
 8021960:	e7f0      	b.n	8021944 <_svfiprintf_r+0x194>
 8021962:	ab03      	add	r3, sp, #12
 8021964:	9300      	str	r3, [sp, #0]
 8021966:	462a      	mov	r2, r5
 8021968:	4b0f      	ldr	r3, [pc, #60]	; (80219a8 <_svfiprintf_r+0x1f8>)
 802196a:	a904      	add	r1, sp, #16
 802196c:	4638      	mov	r0, r7
 802196e:	f3af 8000 	nop.w
 8021972:	1c42      	adds	r2, r0, #1
 8021974:	4606      	mov	r6, r0
 8021976:	d1d6      	bne.n	8021926 <_svfiprintf_r+0x176>
 8021978:	89ab      	ldrh	r3, [r5, #12]
 802197a:	065b      	lsls	r3, r3, #25
 802197c:	f53f af2c 	bmi.w	80217d8 <_svfiprintf_r+0x28>
 8021980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021982:	b01d      	add	sp, #116	; 0x74
 8021984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021988:	ab03      	add	r3, sp, #12
 802198a:	9300      	str	r3, [sp, #0]
 802198c:	462a      	mov	r2, r5
 802198e:	4b06      	ldr	r3, [pc, #24]	; (80219a8 <_svfiprintf_r+0x1f8>)
 8021990:	a904      	add	r1, sp, #16
 8021992:	4638      	mov	r0, r7
 8021994:	f000 f9d4 	bl	8021d40 <_printf_i>
 8021998:	e7eb      	b.n	8021972 <_svfiprintf_r+0x1c2>
 802199a:	bf00      	nop
 802199c:	080268b2 	.word	0x080268b2
 80219a0:	080268bc 	.word	0x080268bc
 80219a4:	00000000 	.word	0x00000000
 80219a8:	080216f9 	.word	0x080216f9
 80219ac:	080268b8 	.word	0x080268b8

080219b0 <__sfputc_r>:
 80219b0:	6893      	ldr	r3, [r2, #8]
 80219b2:	3b01      	subs	r3, #1
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	b410      	push	{r4}
 80219b8:	6093      	str	r3, [r2, #8]
 80219ba:	da08      	bge.n	80219ce <__sfputc_r+0x1e>
 80219bc:	6994      	ldr	r4, [r2, #24]
 80219be:	42a3      	cmp	r3, r4
 80219c0:	db01      	blt.n	80219c6 <__sfputc_r+0x16>
 80219c2:	290a      	cmp	r1, #10
 80219c4:	d103      	bne.n	80219ce <__sfputc_r+0x1e>
 80219c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80219ca:	f7ff bc2d 	b.w	8021228 <__swbuf_r>
 80219ce:	6813      	ldr	r3, [r2, #0]
 80219d0:	1c58      	adds	r0, r3, #1
 80219d2:	6010      	str	r0, [r2, #0]
 80219d4:	7019      	strb	r1, [r3, #0]
 80219d6:	4608      	mov	r0, r1
 80219d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80219dc:	4770      	bx	lr

080219de <__sfputs_r>:
 80219de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80219e0:	4606      	mov	r6, r0
 80219e2:	460f      	mov	r7, r1
 80219e4:	4614      	mov	r4, r2
 80219e6:	18d5      	adds	r5, r2, r3
 80219e8:	42ac      	cmp	r4, r5
 80219ea:	d101      	bne.n	80219f0 <__sfputs_r+0x12>
 80219ec:	2000      	movs	r0, #0
 80219ee:	e007      	b.n	8021a00 <__sfputs_r+0x22>
 80219f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80219f4:	463a      	mov	r2, r7
 80219f6:	4630      	mov	r0, r6
 80219f8:	f7ff ffda 	bl	80219b0 <__sfputc_r>
 80219fc:	1c43      	adds	r3, r0, #1
 80219fe:	d1f3      	bne.n	80219e8 <__sfputs_r+0xa>
 8021a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021a04 <_vfiprintf_r>:
 8021a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a08:	460d      	mov	r5, r1
 8021a0a:	b09d      	sub	sp, #116	; 0x74
 8021a0c:	4614      	mov	r4, r2
 8021a0e:	4698      	mov	r8, r3
 8021a10:	4606      	mov	r6, r0
 8021a12:	b118      	cbz	r0, 8021a1c <_vfiprintf_r+0x18>
 8021a14:	6983      	ldr	r3, [r0, #24]
 8021a16:	b90b      	cbnz	r3, 8021a1c <_vfiprintf_r+0x18>
 8021a18:	f7ff f80a 	bl	8020a30 <__sinit>
 8021a1c:	4b89      	ldr	r3, [pc, #548]	; (8021c44 <_vfiprintf_r+0x240>)
 8021a1e:	429d      	cmp	r5, r3
 8021a20:	d11b      	bne.n	8021a5a <_vfiprintf_r+0x56>
 8021a22:	6875      	ldr	r5, [r6, #4]
 8021a24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021a26:	07d9      	lsls	r1, r3, #31
 8021a28:	d405      	bmi.n	8021a36 <_vfiprintf_r+0x32>
 8021a2a:	89ab      	ldrh	r3, [r5, #12]
 8021a2c:	059a      	lsls	r2, r3, #22
 8021a2e:	d402      	bmi.n	8021a36 <_vfiprintf_r+0x32>
 8021a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021a32:	f7ff f8c0 	bl	8020bb6 <__retarget_lock_acquire_recursive>
 8021a36:	89ab      	ldrh	r3, [r5, #12]
 8021a38:	071b      	lsls	r3, r3, #28
 8021a3a:	d501      	bpl.n	8021a40 <_vfiprintf_r+0x3c>
 8021a3c:	692b      	ldr	r3, [r5, #16]
 8021a3e:	b9eb      	cbnz	r3, 8021a7c <_vfiprintf_r+0x78>
 8021a40:	4629      	mov	r1, r5
 8021a42:	4630      	mov	r0, r6
 8021a44:	f7ff fc54 	bl	80212f0 <__swsetup_r>
 8021a48:	b1c0      	cbz	r0, 8021a7c <_vfiprintf_r+0x78>
 8021a4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021a4c:	07dc      	lsls	r4, r3, #31
 8021a4e:	d50e      	bpl.n	8021a6e <_vfiprintf_r+0x6a>
 8021a50:	f04f 30ff 	mov.w	r0, #4294967295
 8021a54:	b01d      	add	sp, #116	; 0x74
 8021a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a5a:	4b7b      	ldr	r3, [pc, #492]	; (8021c48 <_vfiprintf_r+0x244>)
 8021a5c:	429d      	cmp	r5, r3
 8021a5e:	d101      	bne.n	8021a64 <_vfiprintf_r+0x60>
 8021a60:	68b5      	ldr	r5, [r6, #8]
 8021a62:	e7df      	b.n	8021a24 <_vfiprintf_r+0x20>
 8021a64:	4b79      	ldr	r3, [pc, #484]	; (8021c4c <_vfiprintf_r+0x248>)
 8021a66:	429d      	cmp	r5, r3
 8021a68:	bf08      	it	eq
 8021a6a:	68f5      	ldreq	r5, [r6, #12]
 8021a6c:	e7da      	b.n	8021a24 <_vfiprintf_r+0x20>
 8021a6e:	89ab      	ldrh	r3, [r5, #12]
 8021a70:	0598      	lsls	r0, r3, #22
 8021a72:	d4ed      	bmi.n	8021a50 <_vfiprintf_r+0x4c>
 8021a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021a76:	f7ff f89f 	bl	8020bb8 <__retarget_lock_release_recursive>
 8021a7a:	e7e9      	b.n	8021a50 <_vfiprintf_r+0x4c>
 8021a7c:	2300      	movs	r3, #0
 8021a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8021a80:	2320      	movs	r3, #32
 8021a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021a86:	f8cd 800c 	str.w	r8, [sp, #12]
 8021a8a:	2330      	movs	r3, #48	; 0x30
 8021a8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021c50 <_vfiprintf_r+0x24c>
 8021a90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021a94:	f04f 0901 	mov.w	r9, #1
 8021a98:	4623      	mov	r3, r4
 8021a9a:	469a      	mov	sl, r3
 8021a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021aa0:	b10a      	cbz	r2, 8021aa6 <_vfiprintf_r+0xa2>
 8021aa2:	2a25      	cmp	r2, #37	; 0x25
 8021aa4:	d1f9      	bne.n	8021a9a <_vfiprintf_r+0x96>
 8021aa6:	ebba 0b04 	subs.w	fp, sl, r4
 8021aaa:	d00b      	beq.n	8021ac4 <_vfiprintf_r+0xc0>
 8021aac:	465b      	mov	r3, fp
 8021aae:	4622      	mov	r2, r4
 8021ab0:	4629      	mov	r1, r5
 8021ab2:	4630      	mov	r0, r6
 8021ab4:	f7ff ff93 	bl	80219de <__sfputs_r>
 8021ab8:	3001      	adds	r0, #1
 8021aba:	f000 80aa 	beq.w	8021c12 <_vfiprintf_r+0x20e>
 8021abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ac0:	445a      	add	r2, fp
 8021ac2:	9209      	str	r2, [sp, #36]	; 0x24
 8021ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8021ac8:	2b00      	cmp	r3, #0
 8021aca:	f000 80a2 	beq.w	8021c12 <_vfiprintf_r+0x20e>
 8021ace:	2300      	movs	r3, #0
 8021ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8021ad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021ad8:	f10a 0a01 	add.w	sl, sl, #1
 8021adc:	9304      	str	r3, [sp, #16]
 8021ade:	9307      	str	r3, [sp, #28]
 8021ae0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021ae4:	931a      	str	r3, [sp, #104]	; 0x68
 8021ae6:	4654      	mov	r4, sl
 8021ae8:	2205      	movs	r2, #5
 8021aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021aee:	4858      	ldr	r0, [pc, #352]	; (8021c50 <_vfiprintf_r+0x24c>)
 8021af0:	f7de fb76 	bl	80001e0 <memchr>
 8021af4:	9a04      	ldr	r2, [sp, #16]
 8021af6:	b9d8      	cbnz	r0, 8021b30 <_vfiprintf_r+0x12c>
 8021af8:	06d1      	lsls	r1, r2, #27
 8021afa:	bf44      	itt	mi
 8021afc:	2320      	movmi	r3, #32
 8021afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021b02:	0713      	lsls	r3, r2, #28
 8021b04:	bf44      	itt	mi
 8021b06:	232b      	movmi	r3, #43	; 0x2b
 8021b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8021b10:	2b2a      	cmp	r3, #42	; 0x2a
 8021b12:	d015      	beq.n	8021b40 <_vfiprintf_r+0x13c>
 8021b14:	9a07      	ldr	r2, [sp, #28]
 8021b16:	4654      	mov	r4, sl
 8021b18:	2000      	movs	r0, #0
 8021b1a:	f04f 0c0a 	mov.w	ip, #10
 8021b1e:	4621      	mov	r1, r4
 8021b20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021b24:	3b30      	subs	r3, #48	; 0x30
 8021b26:	2b09      	cmp	r3, #9
 8021b28:	d94e      	bls.n	8021bc8 <_vfiprintf_r+0x1c4>
 8021b2a:	b1b0      	cbz	r0, 8021b5a <_vfiprintf_r+0x156>
 8021b2c:	9207      	str	r2, [sp, #28]
 8021b2e:	e014      	b.n	8021b5a <_vfiprintf_r+0x156>
 8021b30:	eba0 0308 	sub.w	r3, r0, r8
 8021b34:	fa09 f303 	lsl.w	r3, r9, r3
 8021b38:	4313      	orrs	r3, r2
 8021b3a:	9304      	str	r3, [sp, #16]
 8021b3c:	46a2      	mov	sl, r4
 8021b3e:	e7d2      	b.n	8021ae6 <_vfiprintf_r+0xe2>
 8021b40:	9b03      	ldr	r3, [sp, #12]
 8021b42:	1d19      	adds	r1, r3, #4
 8021b44:	681b      	ldr	r3, [r3, #0]
 8021b46:	9103      	str	r1, [sp, #12]
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	bfbb      	ittet	lt
 8021b4c:	425b      	neglt	r3, r3
 8021b4e:	f042 0202 	orrlt.w	r2, r2, #2
 8021b52:	9307      	strge	r3, [sp, #28]
 8021b54:	9307      	strlt	r3, [sp, #28]
 8021b56:	bfb8      	it	lt
 8021b58:	9204      	strlt	r2, [sp, #16]
 8021b5a:	7823      	ldrb	r3, [r4, #0]
 8021b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8021b5e:	d10c      	bne.n	8021b7a <_vfiprintf_r+0x176>
 8021b60:	7863      	ldrb	r3, [r4, #1]
 8021b62:	2b2a      	cmp	r3, #42	; 0x2a
 8021b64:	d135      	bne.n	8021bd2 <_vfiprintf_r+0x1ce>
 8021b66:	9b03      	ldr	r3, [sp, #12]
 8021b68:	1d1a      	adds	r2, r3, #4
 8021b6a:	681b      	ldr	r3, [r3, #0]
 8021b6c:	9203      	str	r2, [sp, #12]
 8021b6e:	2b00      	cmp	r3, #0
 8021b70:	bfb8      	it	lt
 8021b72:	f04f 33ff 	movlt.w	r3, #4294967295
 8021b76:	3402      	adds	r4, #2
 8021b78:	9305      	str	r3, [sp, #20]
 8021b7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021c60 <_vfiprintf_r+0x25c>
 8021b7e:	7821      	ldrb	r1, [r4, #0]
 8021b80:	2203      	movs	r2, #3
 8021b82:	4650      	mov	r0, sl
 8021b84:	f7de fb2c 	bl	80001e0 <memchr>
 8021b88:	b140      	cbz	r0, 8021b9c <_vfiprintf_r+0x198>
 8021b8a:	2340      	movs	r3, #64	; 0x40
 8021b8c:	eba0 000a 	sub.w	r0, r0, sl
 8021b90:	fa03 f000 	lsl.w	r0, r3, r0
 8021b94:	9b04      	ldr	r3, [sp, #16]
 8021b96:	4303      	orrs	r3, r0
 8021b98:	3401      	adds	r4, #1
 8021b9a:	9304      	str	r3, [sp, #16]
 8021b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021ba0:	482c      	ldr	r0, [pc, #176]	; (8021c54 <_vfiprintf_r+0x250>)
 8021ba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021ba6:	2206      	movs	r2, #6
 8021ba8:	f7de fb1a 	bl	80001e0 <memchr>
 8021bac:	2800      	cmp	r0, #0
 8021bae:	d03f      	beq.n	8021c30 <_vfiprintf_r+0x22c>
 8021bb0:	4b29      	ldr	r3, [pc, #164]	; (8021c58 <_vfiprintf_r+0x254>)
 8021bb2:	bb1b      	cbnz	r3, 8021bfc <_vfiprintf_r+0x1f8>
 8021bb4:	9b03      	ldr	r3, [sp, #12]
 8021bb6:	3307      	adds	r3, #7
 8021bb8:	f023 0307 	bic.w	r3, r3, #7
 8021bbc:	3308      	adds	r3, #8
 8021bbe:	9303      	str	r3, [sp, #12]
 8021bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021bc2:	443b      	add	r3, r7
 8021bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8021bc6:	e767      	b.n	8021a98 <_vfiprintf_r+0x94>
 8021bc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8021bcc:	460c      	mov	r4, r1
 8021bce:	2001      	movs	r0, #1
 8021bd0:	e7a5      	b.n	8021b1e <_vfiprintf_r+0x11a>
 8021bd2:	2300      	movs	r3, #0
 8021bd4:	3401      	adds	r4, #1
 8021bd6:	9305      	str	r3, [sp, #20]
 8021bd8:	4619      	mov	r1, r3
 8021bda:	f04f 0c0a 	mov.w	ip, #10
 8021bde:	4620      	mov	r0, r4
 8021be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021be4:	3a30      	subs	r2, #48	; 0x30
 8021be6:	2a09      	cmp	r2, #9
 8021be8:	d903      	bls.n	8021bf2 <_vfiprintf_r+0x1ee>
 8021bea:	2b00      	cmp	r3, #0
 8021bec:	d0c5      	beq.n	8021b7a <_vfiprintf_r+0x176>
 8021bee:	9105      	str	r1, [sp, #20]
 8021bf0:	e7c3      	b.n	8021b7a <_vfiprintf_r+0x176>
 8021bf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8021bf6:	4604      	mov	r4, r0
 8021bf8:	2301      	movs	r3, #1
 8021bfa:	e7f0      	b.n	8021bde <_vfiprintf_r+0x1da>
 8021bfc:	ab03      	add	r3, sp, #12
 8021bfe:	9300      	str	r3, [sp, #0]
 8021c00:	462a      	mov	r2, r5
 8021c02:	4b16      	ldr	r3, [pc, #88]	; (8021c5c <_vfiprintf_r+0x258>)
 8021c04:	a904      	add	r1, sp, #16
 8021c06:	4630      	mov	r0, r6
 8021c08:	f3af 8000 	nop.w
 8021c0c:	4607      	mov	r7, r0
 8021c0e:	1c78      	adds	r0, r7, #1
 8021c10:	d1d6      	bne.n	8021bc0 <_vfiprintf_r+0x1bc>
 8021c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021c14:	07d9      	lsls	r1, r3, #31
 8021c16:	d405      	bmi.n	8021c24 <_vfiprintf_r+0x220>
 8021c18:	89ab      	ldrh	r3, [r5, #12]
 8021c1a:	059a      	lsls	r2, r3, #22
 8021c1c:	d402      	bmi.n	8021c24 <_vfiprintf_r+0x220>
 8021c1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021c20:	f7fe ffca 	bl	8020bb8 <__retarget_lock_release_recursive>
 8021c24:	89ab      	ldrh	r3, [r5, #12]
 8021c26:	065b      	lsls	r3, r3, #25
 8021c28:	f53f af12 	bmi.w	8021a50 <_vfiprintf_r+0x4c>
 8021c2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021c2e:	e711      	b.n	8021a54 <_vfiprintf_r+0x50>
 8021c30:	ab03      	add	r3, sp, #12
 8021c32:	9300      	str	r3, [sp, #0]
 8021c34:	462a      	mov	r2, r5
 8021c36:	4b09      	ldr	r3, [pc, #36]	; (8021c5c <_vfiprintf_r+0x258>)
 8021c38:	a904      	add	r1, sp, #16
 8021c3a:	4630      	mov	r0, r6
 8021c3c:	f000 f880 	bl	8021d40 <_printf_i>
 8021c40:	e7e4      	b.n	8021c0c <_vfiprintf_r+0x208>
 8021c42:	bf00      	nop
 8021c44:	080267bc 	.word	0x080267bc
 8021c48:	080267dc 	.word	0x080267dc
 8021c4c:	0802679c 	.word	0x0802679c
 8021c50:	080268b2 	.word	0x080268b2
 8021c54:	080268bc 	.word	0x080268bc
 8021c58:	00000000 	.word	0x00000000
 8021c5c:	080219df 	.word	0x080219df
 8021c60:	080268b8 	.word	0x080268b8

08021c64 <_printf_common>:
 8021c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c68:	4616      	mov	r6, r2
 8021c6a:	4699      	mov	r9, r3
 8021c6c:	688a      	ldr	r2, [r1, #8]
 8021c6e:	690b      	ldr	r3, [r1, #16]
 8021c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021c74:	4293      	cmp	r3, r2
 8021c76:	bfb8      	it	lt
 8021c78:	4613      	movlt	r3, r2
 8021c7a:	6033      	str	r3, [r6, #0]
 8021c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021c80:	4607      	mov	r7, r0
 8021c82:	460c      	mov	r4, r1
 8021c84:	b10a      	cbz	r2, 8021c8a <_printf_common+0x26>
 8021c86:	3301      	adds	r3, #1
 8021c88:	6033      	str	r3, [r6, #0]
 8021c8a:	6823      	ldr	r3, [r4, #0]
 8021c8c:	0699      	lsls	r1, r3, #26
 8021c8e:	bf42      	ittt	mi
 8021c90:	6833      	ldrmi	r3, [r6, #0]
 8021c92:	3302      	addmi	r3, #2
 8021c94:	6033      	strmi	r3, [r6, #0]
 8021c96:	6825      	ldr	r5, [r4, #0]
 8021c98:	f015 0506 	ands.w	r5, r5, #6
 8021c9c:	d106      	bne.n	8021cac <_printf_common+0x48>
 8021c9e:	f104 0a19 	add.w	sl, r4, #25
 8021ca2:	68e3      	ldr	r3, [r4, #12]
 8021ca4:	6832      	ldr	r2, [r6, #0]
 8021ca6:	1a9b      	subs	r3, r3, r2
 8021ca8:	42ab      	cmp	r3, r5
 8021caa:	dc26      	bgt.n	8021cfa <_printf_common+0x96>
 8021cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021cb0:	1e13      	subs	r3, r2, #0
 8021cb2:	6822      	ldr	r2, [r4, #0]
 8021cb4:	bf18      	it	ne
 8021cb6:	2301      	movne	r3, #1
 8021cb8:	0692      	lsls	r2, r2, #26
 8021cba:	d42b      	bmi.n	8021d14 <_printf_common+0xb0>
 8021cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021cc0:	4649      	mov	r1, r9
 8021cc2:	4638      	mov	r0, r7
 8021cc4:	47c0      	blx	r8
 8021cc6:	3001      	adds	r0, #1
 8021cc8:	d01e      	beq.n	8021d08 <_printf_common+0xa4>
 8021cca:	6823      	ldr	r3, [r4, #0]
 8021ccc:	68e5      	ldr	r5, [r4, #12]
 8021cce:	6832      	ldr	r2, [r6, #0]
 8021cd0:	f003 0306 	and.w	r3, r3, #6
 8021cd4:	2b04      	cmp	r3, #4
 8021cd6:	bf08      	it	eq
 8021cd8:	1aad      	subeq	r5, r5, r2
 8021cda:	68a3      	ldr	r3, [r4, #8]
 8021cdc:	6922      	ldr	r2, [r4, #16]
 8021cde:	bf0c      	ite	eq
 8021ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021ce4:	2500      	movne	r5, #0
 8021ce6:	4293      	cmp	r3, r2
 8021ce8:	bfc4      	itt	gt
 8021cea:	1a9b      	subgt	r3, r3, r2
 8021cec:	18ed      	addgt	r5, r5, r3
 8021cee:	2600      	movs	r6, #0
 8021cf0:	341a      	adds	r4, #26
 8021cf2:	42b5      	cmp	r5, r6
 8021cf4:	d11a      	bne.n	8021d2c <_printf_common+0xc8>
 8021cf6:	2000      	movs	r0, #0
 8021cf8:	e008      	b.n	8021d0c <_printf_common+0xa8>
 8021cfa:	2301      	movs	r3, #1
 8021cfc:	4652      	mov	r2, sl
 8021cfe:	4649      	mov	r1, r9
 8021d00:	4638      	mov	r0, r7
 8021d02:	47c0      	blx	r8
 8021d04:	3001      	adds	r0, #1
 8021d06:	d103      	bne.n	8021d10 <_printf_common+0xac>
 8021d08:	f04f 30ff 	mov.w	r0, #4294967295
 8021d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d10:	3501      	adds	r5, #1
 8021d12:	e7c6      	b.n	8021ca2 <_printf_common+0x3e>
 8021d14:	18e1      	adds	r1, r4, r3
 8021d16:	1c5a      	adds	r2, r3, #1
 8021d18:	2030      	movs	r0, #48	; 0x30
 8021d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021d1e:	4422      	add	r2, r4
 8021d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021d24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021d28:	3302      	adds	r3, #2
 8021d2a:	e7c7      	b.n	8021cbc <_printf_common+0x58>
 8021d2c:	2301      	movs	r3, #1
 8021d2e:	4622      	mov	r2, r4
 8021d30:	4649      	mov	r1, r9
 8021d32:	4638      	mov	r0, r7
 8021d34:	47c0      	blx	r8
 8021d36:	3001      	adds	r0, #1
 8021d38:	d0e6      	beq.n	8021d08 <_printf_common+0xa4>
 8021d3a:	3601      	adds	r6, #1
 8021d3c:	e7d9      	b.n	8021cf2 <_printf_common+0x8e>
	...

08021d40 <_printf_i>:
 8021d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021d44:	460c      	mov	r4, r1
 8021d46:	4691      	mov	r9, r2
 8021d48:	7e27      	ldrb	r7, [r4, #24]
 8021d4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021d4c:	2f78      	cmp	r7, #120	; 0x78
 8021d4e:	4680      	mov	r8, r0
 8021d50:	469a      	mov	sl, r3
 8021d52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021d56:	d807      	bhi.n	8021d68 <_printf_i+0x28>
 8021d58:	2f62      	cmp	r7, #98	; 0x62
 8021d5a:	d80a      	bhi.n	8021d72 <_printf_i+0x32>
 8021d5c:	2f00      	cmp	r7, #0
 8021d5e:	f000 80d8 	beq.w	8021f12 <_printf_i+0x1d2>
 8021d62:	2f58      	cmp	r7, #88	; 0x58
 8021d64:	f000 80a3 	beq.w	8021eae <_printf_i+0x16e>
 8021d68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021d70:	e03a      	b.n	8021de8 <_printf_i+0xa8>
 8021d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021d76:	2b15      	cmp	r3, #21
 8021d78:	d8f6      	bhi.n	8021d68 <_printf_i+0x28>
 8021d7a:	a001      	add	r0, pc, #4	; (adr r0, 8021d80 <_printf_i+0x40>)
 8021d7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8021d80:	08021dd9 	.word	0x08021dd9
 8021d84:	08021ded 	.word	0x08021ded
 8021d88:	08021d69 	.word	0x08021d69
 8021d8c:	08021d69 	.word	0x08021d69
 8021d90:	08021d69 	.word	0x08021d69
 8021d94:	08021d69 	.word	0x08021d69
 8021d98:	08021ded 	.word	0x08021ded
 8021d9c:	08021d69 	.word	0x08021d69
 8021da0:	08021d69 	.word	0x08021d69
 8021da4:	08021d69 	.word	0x08021d69
 8021da8:	08021d69 	.word	0x08021d69
 8021dac:	08021ef9 	.word	0x08021ef9
 8021db0:	08021e1d 	.word	0x08021e1d
 8021db4:	08021edb 	.word	0x08021edb
 8021db8:	08021d69 	.word	0x08021d69
 8021dbc:	08021d69 	.word	0x08021d69
 8021dc0:	08021f1b 	.word	0x08021f1b
 8021dc4:	08021d69 	.word	0x08021d69
 8021dc8:	08021e1d 	.word	0x08021e1d
 8021dcc:	08021d69 	.word	0x08021d69
 8021dd0:	08021d69 	.word	0x08021d69
 8021dd4:	08021ee3 	.word	0x08021ee3
 8021dd8:	680b      	ldr	r3, [r1, #0]
 8021dda:	1d1a      	adds	r2, r3, #4
 8021ddc:	681b      	ldr	r3, [r3, #0]
 8021dde:	600a      	str	r2, [r1, #0]
 8021de0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021de8:	2301      	movs	r3, #1
 8021dea:	e0a3      	b.n	8021f34 <_printf_i+0x1f4>
 8021dec:	6825      	ldr	r5, [r4, #0]
 8021dee:	6808      	ldr	r0, [r1, #0]
 8021df0:	062e      	lsls	r6, r5, #24
 8021df2:	f100 0304 	add.w	r3, r0, #4
 8021df6:	d50a      	bpl.n	8021e0e <_printf_i+0xce>
 8021df8:	6805      	ldr	r5, [r0, #0]
 8021dfa:	600b      	str	r3, [r1, #0]
 8021dfc:	2d00      	cmp	r5, #0
 8021dfe:	da03      	bge.n	8021e08 <_printf_i+0xc8>
 8021e00:	232d      	movs	r3, #45	; 0x2d
 8021e02:	426d      	negs	r5, r5
 8021e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021e08:	485e      	ldr	r0, [pc, #376]	; (8021f84 <_printf_i+0x244>)
 8021e0a:	230a      	movs	r3, #10
 8021e0c:	e019      	b.n	8021e42 <_printf_i+0x102>
 8021e0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8021e12:	6805      	ldr	r5, [r0, #0]
 8021e14:	600b      	str	r3, [r1, #0]
 8021e16:	bf18      	it	ne
 8021e18:	b22d      	sxthne	r5, r5
 8021e1a:	e7ef      	b.n	8021dfc <_printf_i+0xbc>
 8021e1c:	680b      	ldr	r3, [r1, #0]
 8021e1e:	6825      	ldr	r5, [r4, #0]
 8021e20:	1d18      	adds	r0, r3, #4
 8021e22:	6008      	str	r0, [r1, #0]
 8021e24:	0628      	lsls	r0, r5, #24
 8021e26:	d501      	bpl.n	8021e2c <_printf_i+0xec>
 8021e28:	681d      	ldr	r5, [r3, #0]
 8021e2a:	e002      	b.n	8021e32 <_printf_i+0xf2>
 8021e2c:	0669      	lsls	r1, r5, #25
 8021e2e:	d5fb      	bpl.n	8021e28 <_printf_i+0xe8>
 8021e30:	881d      	ldrh	r5, [r3, #0]
 8021e32:	4854      	ldr	r0, [pc, #336]	; (8021f84 <_printf_i+0x244>)
 8021e34:	2f6f      	cmp	r7, #111	; 0x6f
 8021e36:	bf0c      	ite	eq
 8021e38:	2308      	moveq	r3, #8
 8021e3a:	230a      	movne	r3, #10
 8021e3c:	2100      	movs	r1, #0
 8021e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021e42:	6866      	ldr	r6, [r4, #4]
 8021e44:	60a6      	str	r6, [r4, #8]
 8021e46:	2e00      	cmp	r6, #0
 8021e48:	bfa2      	ittt	ge
 8021e4a:	6821      	ldrge	r1, [r4, #0]
 8021e4c:	f021 0104 	bicge.w	r1, r1, #4
 8021e50:	6021      	strge	r1, [r4, #0]
 8021e52:	b90d      	cbnz	r5, 8021e58 <_printf_i+0x118>
 8021e54:	2e00      	cmp	r6, #0
 8021e56:	d04d      	beq.n	8021ef4 <_printf_i+0x1b4>
 8021e58:	4616      	mov	r6, r2
 8021e5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8021e5e:	fb03 5711 	mls	r7, r3, r1, r5
 8021e62:	5dc7      	ldrb	r7, [r0, r7]
 8021e64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021e68:	462f      	mov	r7, r5
 8021e6a:	42bb      	cmp	r3, r7
 8021e6c:	460d      	mov	r5, r1
 8021e6e:	d9f4      	bls.n	8021e5a <_printf_i+0x11a>
 8021e70:	2b08      	cmp	r3, #8
 8021e72:	d10b      	bne.n	8021e8c <_printf_i+0x14c>
 8021e74:	6823      	ldr	r3, [r4, #0]
 8021e76:	07df      	lsls	r7, r3, #31
 8021e78:	d508      	bpl.n	8021e8c <_printf_i+0x14c>
 8021e7a:	6923      	ldr	r3, [r4, #16]
 8021e7c:	6861      	ldr	r1, [r4, #4]
 8021e7e:	4299      	cmp	r1, r3
 8021e80:	bfde      	ittt	le
 8021e82:	2330      	movle	r3, #48	; 0x30
 8021e84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021e88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8021e8c:	1b92      	subs	r2, r2, r6
 8021e8e:	6122      	str	r2, [r4, #16]
 8021e90:	f8cd a000 	str.w	sl, [sp]
 8021e94:	464b      	mov	r3, r9
 8021e96:	aa03      	add	r2, sp, #12
 8021e98:	4621      	mov	r1, r4
 8021e9a:	4640      	mov	r0, r8
 8021e9c:	f7ff fee2 	bl	8021c64 <_printf_common>
 8021ea0:	3001      	adds	r0, #1
 8021ea2:	d14c      	bne.n	8021f3e <_printf_i+0x1fe>
 8021ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8021ea8:	b004      	add	sp, #16
 8021eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021eae:	4835      	ldr	r0, [pc, #212]	; (8021f84 <_printf_i+0x244>)
 8021eb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8021eb4:	6823      	ldr	r3, [r4, #0]
 8021eb6:	680e      	ldr	r6, [r1, #0]
 8021eb8:	061f      	lsls	r7, r3, #24
 8021eba:	f856 5b04 	ldr.w	r5, [r6], #4
 8021ebe:	600e      	str	r6, [r1, #0]
 8021ec0:	d514      	bpl.n	8021eec <_printf_i+0x1ac>
 8021ec2:	07d9      	lsls	r1, r3, #31
 8021ec4:	bf44      	itt	mi
 8021ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8021eca:	6023      	strmi	r3, [r4, #0]
 8021ecc:	b91d      	cbnz	r5, 8021ed6 <_printf_i+0x196>
 8021ece:	6823      	ldr	r3, [r4, #0]
 8021ed0:	f023 0320 	bic.w	r3, r3, #32
 8021ed4:	6023      	str	r3, [r4, #0]
 8021ed6:	2310      	movs	r3, #16
 8021ed8:	e7b0      	b.n	8021e3c <_printf_i+0xfc>
 8021eda:	6823      	ldr	r3, [r4, #0]
 8021edc:	f043 0320 	orr.w	r3, r3, #32
 8021ee0:	6023      	str	r3, [r4, #0]
 8021ee2:	2378      	movs	r3, #120	; 0x78
 8021ee4:	4828      	ldr	r0, [pc, #160]	; (8021f88 <_printf_i+0x248>)
 8021ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021eea:	e7e3      	b.n	8021eb4 <_printf_i+0x174>
 8021eec:	065e      	lsls	r6, r3, #25
 8021eee:	bf48      	it	mi
 8021ef0:	b2ad      	uxthmi	r5, r5
 8021ef2:	e7e6      	b.n	8021ec2 <_printf_i+0x182>
 8021ef4:	4616      	mov	r6, r2
 8021ef6:	e7bb      	b.n	8021e70 <_printf_i+0x130>
 8021ef8:	680b      	ldr	r3, [r1, #0]
 8021efa:	6826      	ldr	r6, [r4, #0]
 8021efc:	6960      	ldr	r0, [r4, #20]
 8021efe:	1d1d      	adds	r5, r3, #4
 8021f00:	600d      	str	r5, [r1, #0]
 8021f02:	0635      	lsls	r5, r6, #24
 8021f04:	681b      	ldr	r3, [r3, #0]
 8021f06:	d501      	bpl.n	8021f0c <_printf_i+0x1cc>
 8021f08:	6018      	str	r0, [r3, #0]
 8021f0a:	e002      	b.n	8021f12 <_printf_i+0x1d2>
 8021f0c:	0671      	lsls	r1, r6, #25
 8021f0e:	d5fb      	bpl.n	8021f08 <_printf_i+0x1c8>
 8021f10:	8018      	strh	r0, [r3, #0]
 8021f12:	2300      	movs	r3, #0
 8021f14:	6123      	str	r3, [r4, #16]
 8021f16:	4616      	mov	r6, r2
 8021f18:	e7ba      	b.n	8021e90 <_printf_i+0x150>
 8021f1a:	680b      	ldr	r3, [r1, #0]
 8021f1c:	1d1a      	adds	r2, r3, #4
 8021f1e:	600a      	str	r2, [r1, #0]
 8021f20:	681e      	ldr	r6, [r3, #0]
 8021f22:	6862      	ldr	r2, [r4, #4]
 8021f24:	2100      	movs	r1, #0
 8021f26:	4630      	mov	r0, r6
 8021f28:	f7de f95a 	bl	80001e0 <memchr>
 8021f2c:	b108      	cbz	r0, 8021f32 <_printf_i+0x1f2>
 8021f2e:	1b80      	subs	r0, r0, r6
 8021f30:	6060      	str	r0, [r4, #4]
 8021f32:	6863      	ldr	r3, [r4, #4]
 8021f34:	6123      	str	r3, [r4, #16]
 8021f36:	2300      	movs	r3, #0
 8021f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021f3c:	e7a8      	b.n	8021e90 <_printf_i+0x150>
 8021f3e:	6923      	ldr	r3, [r4, #16]
 8021f40:	4632      	mov	r2, r6
 8021f42:	4649      	mov	r1, r9
 8021f44:	4640      	mov	r0, r8
 8021f46:	47d0      	blx	sl
 8021f48:	3001      	adds	r0, #1
 8021f4a:	d0ab      	beq.n	8021ea4 <_printf_i+0x164>
 8021f4c:	6823      	ldr	r3, [r4, #0]
 8021f4e:	079b      	lsls	r3, r3, #30
 8021f50:	d413      	bmi.n	8021f7a <_printf_i+0x23a>
 8021f52:	68e0      	ldr	r0, [r4, #12]
 8021f54:	9b03      	ldr	r3, [sp, #12]
 8021f56:	4298      	cmp	r0, r3
 8021f58:	bfb8      	it	lt
 8021f5a:	4618      	movlt	r0, r3
 8021f5c:	e7a4      	b.n	8021ea8 <_printf_i+0x168>
 8021f5e:	2301      	movs	r3, #1
 8021f60:	4632      	mov	r2, r6
 8021f62:	4649      	mov	r1, r9
 8021f64:	4640      	mov	r0, r8
 8021f66:	47d0      	blx	sl
 8021f68:	3001      	adds	r0, #1
 8021f6a:	d09b      	beq.n	8021ea4 <_printf_i+0x164>
 8021f6c:	3501      	adds	r5, #1
 8021f6e:	68e3      	ldr	r3, [r4, #12]
 8021f70:	9903      	ldr	r1, [sp, #12]
 8021f72:	1a5b      	subs	r3, r3, r1
 8021f74:	42ab      	cmp	r3, r5
 8021f76:	dcf2      	bgt.n	8021f5e <_printf_i+0x21e>
 8021f78:	e7eb      	b.n	8021f52 <_printf_i+0x212>
 8021f7a:	2500      	movs	r5, #0
 8021f7c:	f104 0619 	add.w	r6, r4, #25
 8021f80:	e7f5      	b.n	8021f6e <_printf_i+0x22e>
 8021f82:	bf00      	nop
 8021f84:	080268c3 	.word	0x080268c3
 8021f88:	080268d4 	.word	0x080268d4

08021f8c <_putc_r>:
 8021f8c:	b570      	push	{r4, r5, r6, lr}
 8021f8e:	460d      	mov	r5, r1
 8021f90:	4614      	mov	r4, r2
 8021f92:	4606      	mov	r6, r0
 8021f94:	b118      	cbz	r0, 8021f9e <_putc_r+0x12>
 8021f96:	6983      	ldr	r3, [r0, #24]
 8021f98:	b90b      	cbnz	r3, 8021f9e <_putc_r+0x12>
 8021f9a:	f7fe fd49 	bl	8020a30 <__sinit>
 8021f9e:	4b1c      	ldr	r3, [pc, #112]	; (8022010 <_putc_r+0x84>)
 8021fa0:	429c      	cmp	r4, r3
 8021fa2:	d124      	bne.n	8021fee <_putc_r+0x62>
 8021fa4:	6874      	ldr	r4, [r6, #4]
 8021fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021fa8:	07d8      	lsls	r0, r3, #31
 8021faa:	d405      	bmi.n	8021fb8 <_putc_r+0x2c>
 8021fac:	89a3      	ldrh	r3, [r4, #12]
 8021fae:	0599      	lsls	r1, r3, #22
 8021fb0:	d402      	bmi.n	8021fb8 <_putc_r+0x2c>
 8021fb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021fb4:	f7fe fdff 	bl	8020bb6 <__retarget_lock_acquire_recursive>
 8021fb8:	68a3      	ldr	r3, [r4, #8]
 8021fba:	3b01      	subs	r3, #1
 8021fbc:	2b00      	cmp	r3, #0
 8021fbe:	60a3      	str	r3, [r4, #8]
 8021fc0:	da05      	bge.n	8021fce <_putc_r+0x42>
 8021fc2:	69a2      	ldr	r2, [r4, #24]
 8021fc4:	4293      	cmp	r3, r2
 8021fc6:	db1c      	blt.n	8022002 <_putc_r+0x76>
 8021fc8:	b2eb      	uxtb	r3, r5
 8021fca:	2b0a      	cmp	r3, #10
 8021fcc:	d019      	beq.n	8022002 <_putc_r+0x76>
 8021fce:	6823      	ldr	r3, [r4, #0]
 8021fd0:	1c5a      	adds	r2, r3, #1
 8021fd2:	6022      	str	r2, [r4, #0]
 8021fd4:	701d      	strb	r5, [r3, #0]
 8021fd6:	b2ed      	uxtb	r5, r5
 8021fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021fda:	07da      	lsls	r2, r3, #31
 8021fdc:	d405      	bmi.n	8021fea <_putc_r+0x5e>
 8021fde:	89a3      	ldrh	r3, [r4, #12]
 8021fe0:	059b      	lsls	r3, r3, #22
 8021fe2:	d402      	bmi.n	8021fea <_putc_r+0x5e>
 8021fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021fe6:	f7fe fde7 	bl	8020bb8 <__retarget_lock_release_recursive>
 8021fea:	4628      	mov	r0, r5
 8021fec:	bd70      	pop	{r4, r5, r6, pc}
 8021fee:	4b09      	ldr	r3, [pc, #36]	; (8022014 <_putc_r+0x88>)
 8021ff0:	429c      	cmp	r4, r3
 8021ff2:	d101      	bne.n	8021ff8 <_putc_r+0x6c>
 8021ff4:	68b4      	ldr	r4, [r6, #8]
 8021ff6:	e7d6      	b.n	8021fa6 <_putc_r+0x1a>
 8021ff8:	4b07      	ldr	r3, [pc, #28]	; (8022018 <_putc_r+0x8c>)
 8021ffa:	429c      	cmp	r4, r3
 8021ffc:	bf08      	it	eq
 8021ffe:	68f4      	ldreq	r4, [r6, #12]
 8022000:	e7d1      	b.n	8021fa6 <_putc_r+0x1a>
 8022002:	4629      	mov	r1, r5
 8022004:	4622      	mov	r2, r4
 8022006:	4630      	mov	r0, r6
 8022008:	f7ff f90e 	bl	8021228 <__swbuf_r>
 802200c:	4605      	mov	r5, r0
 802200e:	e7e3      	b.n	8021fd8 <_putc_r+0x4c>
 8022010:	080267bc 	.word	0x080267bc
 8022014:	080267dc 	.word	0x080267dc
 8022018:	0802679c 	.word	0x0802679c

0802201c <_read_r>:
 802201c:	b538      	push	{r3, r4, r5, lr}
 802201e:	4d07      	ldr	r5, [pc, #28]	; (802203c <_read_r+0x20>)
 8022020:	4604      	mov	r4, r0
 8022022:	4608      	mov	r0, r1
 8022024:	4611      	mov	r1, r2
 8022026:	2200      	movs	r2, #0
 8022028:	602a      	str	r2, [r5, #0]
 802202a:	461a      	mov	r2, r3
 802202c:	f7df fc34 	bl	8001898 <_read>
 8022030:	1c43      	adds	r3, r0, #1
 8022032:	d102      	bne.n	802203a <_read_r+0x1e>
 8022034:	682b      	ldr	r3, [r5, #0]
 8022036:	b103      	cbz	r3, 802203a <_read_r+0x1e>
 8022038:	6023      	str	r3, [r4, #0]
 802203a:	bd38      	pop	{r3, r4, r5, pc}
 802203c:	20016e00 	.word	0x20016e00

08022040 <abort>:
 8022040:	b508      	push	{r3, lr}
 8022042:	2006      	movs	r0, #6
 8022044:	f000 f874 	bl	8022130 <raise>
 8022048:	2001      	movs	r0, #1
 802204a:	f7df fc1b 	bl	8001884 <_exit>
	...

08022050 <_fstat_r>:
 8022050:	b538      	push	{r3, r4, r5, lr}
 8022052:	4d07      	ldr	r5, [pc, #28]	; (8022070 <_fstat_r+0x20>)
 8022054:	2300      	movs	r3, #0
 8022056:	4604      	mov	r4, r0
 8022058:	4608      	mov	r0, r1
 802205a:	4611      	mov	r1, r2
 802205c:	602b      	str	r3, [r5, #0]
 802205e:	f7df fc44 	bl	80018ea <_fstat>
 8022062:	1c43      	adds	r3, r0, #1
 8022064:	d102      	bne.n	802206c <_fstat_r+0x1c>
 8022066:	682b      	ldr	r3, [r5, #0]
 8022068:	b103      	cbz	r3, 802206c <_fstat_r+0x1c>
 802206a:	6023      	str	r3, [r4, #0]
 802206c:	bd38      	pop	{r3, r4, r5, pc}
 802206e:	bf00      	nop
 8022070:	20016e00 	.word	0x20016e00

08022074 <_isatty_r>:
 8022074:	b538      	push	{r3, r4, r5, lr}
 8022076:	4d06      	ldr	r5, [pc, #24]	; (8022090 <_isatty_r+0x1c>)
 8022078:	2300      	movs	r3, #0
 802207a:	4604      	mov	r4, r0
 802207c:	4608      	mov	r0, r1
 802207e:	602b      	str	r3, [r5, #0]
 8022080:	f7df fc43 	bl	800190a <_isatty>
 8022084:	1c43      	adds	r3, r0, #1
 8022086:	d102      	bne.n	802208e <_isatty_r+0x1a>
 8022088:	682b      	ldr	r3, [r5, #0]
 802208a:	b103      	cbz	r3, 802208e <_isatty_r+0x1a>
 802208c:	6023      	str	r3, [r4, #0]
 802208e:	bd38      	pop	{r3, r4, r5, pc}
 8022090:	20016e00 	.word	0x20016e00

08022094 <_realloc_r>:
 8022094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022096:	4607      	mov	r7, r0
 8022098:	4614      	mov	r4, r2
 802209a:	460e      	mov	r6, r1
 802209c:	b921      	cbnz	r1, 80220a8 <_realloc_r+0x14>
 802209e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80220a2:	4611      	mov	r1, r2
 80220a4:	f7fe be38 	b.w	8020d18 <_malloc_r>
 80220a8:	b922      	cbnz	r2, 80220b4 <_realloc_r+0x20>
 80220aa:	f7fe fde5 	bl	8020c78 <_free_r>
 80220ae:	4625      	mov	r5, r4
 80220b0:	4628      	mov	r0, r5
 80220b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80220b4:	f000 f858 	bl	8022168 <_malloc_usable_size_r>
 80220b8:	42a0      	cmp	r0, r4
 80220ba:	d20f      	bcs.n	80220dc <_realloc_r+0x48>
 80220bc:	4621      	mov	r1, r4
 80220be:	4638      	mov	r0, r7
 80220c0:	f7fe fe2a 	bl	8020d18 <_malloc_r>
 80220c4:	4605      	mov	r5, r0
 80220c6:	2800      	cmp	r0, #0
 80220c8:	d0f2      	beq.n	80220b0 <_realloc_r+0x1c>
 80220ca:	4631      	mov	r1, r6
 80220cc:	4622      	mov	r2, r4
 80220ce:	f7fe fd93 	bl	8020bf8 <memcpy>
 80220d2:	4631      	mov	r1, r6
 80220d4:	4638      	mov	r0, r7
 80220d6:	f7fe fdcf 	bl	8020c78 <_free_r>
 80220da:	e7e9      	b.n	80220b0 <_realloc_r+0x1c>
 80220dc:	4635      	mov	r5, r6
 80220de:	e7e7      	b.n	80220b0 <_realloc_r+0x1c>

080220e0 <_raise_r>:
 80220e0:	291f      	cmp	r1, #31
 80220e2:	b538      	push	{r3, r4, r5, lr}
 80220e4:	4604      	mov	r4, r0
 80220e6:	460d      	mov	r5, r1
 80220e8:	d904      	bls.n	80220f4 <_raise_r+0x14>
 80220ea:	2316      	movs	r3, #22
 80220ec:	6003      	str	r3, [r0, #0]
 80220ee:	f04f 30ff 	mov.w	r0, #4294967295
 80220f2:	bd38      	pop	{r3, r4, r5, pc}
 80220f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80220f6:	b112      	cbz	r2, 80220fe <_raise_r+0x1e>
 80220f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80220fc:	b94b      	cbnz	r3, 8022112 <_raise_r+0x32>
 80220fe:	4620      	mov	r0, r4
 8022100:	f000 f830 	bl	8022164 <_getpid_r>
 8022104:	462a      	mov	r2, r5
 8022106:	4601      	mov	r1, r0
 8022108:	4620      	mov	r0, r4
 802210a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802210e:	f000 b817 	b.w	8022140 <_kill_r>
 8022112:	2b01      	cmp	r3, #1
 8022114:	d00a      	beq.n	802212c <_raise_r+0x4c>
 8022116:	1c59      	adds	r1, r3, #1
 8022118:	d103      	bne.n	8022122 <_raise_r+0x42>
 802211a:	2316      	movs	r3, #22
 802211c:	6003      	str	r3, [r0, #0]
 802211e:	2001      	movs	r0, #1
 8022120:	e7e7      	b.n	80220f2 <_raise_r+0x12>
 8022122:	2400      	movs	r4, #0
 8022124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022128:	4628      	mov	r0, r5
 802212a:	4798      	blx	r3
 802212c:	2000      	movs	r0, #0
 802212e:	e7e0      	b.n	80220f2 <_raise_r+0x12>

08022130 <raise>:
 8022130:	4b02      	ldr	r3, [pc, #8]	; (802213c <raise+0xc>)
 8022132:	4601      	mov	r1, r0
 8022134:	6818      	ldr	r0, [r3, #0]
 8022136:	f7ff bfd3 	b.w	80220e0 <_raise_r>
 802213a:	bf00      	nop
 802213c:	20000504 	.word	0x20000504

08022140 <_kill_r>:
 8022140:	b538      	push	{r3, r4, r5, lr}
 8022142:	4d07      	ldr	r5, [pc, #28]	; (8022160 <_kill_r+0x20>)
 8022144:	2300      	movs	r3, #0
 8022146:	4604      	mov	r4, r0
 8022148:	4608      	mov	r0, r1
 802214a:	4611      	mov	r1, r2
 802214c:	602b      	str	r3, [r5, #0]
 802214e:	f7df fb87 	bl	8001860 <_kill>
 8022152:	1c43      	adds	r3, r0, #1
 8022154:	d102      	bne.n	802215c <_kill_r+0x1c>
 8022156:	682b      	ldr	r3, [r5, #0]
 8022158:	b103      	cbz	r3, 802215c <_kill_r+0x1c>
 802215a:	6023      	str	r3, [r4, #0]
 802215c:	bd38      	pop	{r3, r4, r5, pc}
 802215e:	bf00      	nop
 8022160:	20016e00 	.word	0x20016e00

08022164 <_getpid_r>:
 8022164:	f7df bb74 	b.w	8001850 <_getpid>

08022168 <_malloc_usable_size_r>:
 8022168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802216c:	1f18      	subs	r0, r3, #4
 802216e:	2b00      	cmp	r3, #0
 8022170:	bfbc      	itt	lt
 8022172:	580b      	ldrlt	r3, [r1, r0]
 8022174:	18c0      	addlt	r0, r0, r3
 8022176:	4770      	bx	lr

08022178 <_gettimeofday>:
 8022178:	4b02      	ldr	r3, [pc, #8]	; (8022184 <_gettimeofday+0xc>)
 802217a:	2258      	movs	r2, #88	; 0x58
 802217c:	601a      	str	r2, [r3, #0]
 802217e:	f04f 30ff 	mov.w	r0, #4294967295
 8022182:	4770      	bx	lr
 8022184:	20016e00 	.word	0x20016e00

08022188 <_init>:
 8022188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802218a:	bf00      	nop
 802218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802218e:	bc08      	pop	{r3}
 8022190:	469e      	mov	lr, r3
 8022192:	4770      	bx	lr

08022194 <_fini>:
 8022194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022196:	bf00      	nop
 8022198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802219a:	bc08      	pop	{r3}
 802219c:	469e      	mov	lr, r3
 802219e:	4770      	bx	lr
