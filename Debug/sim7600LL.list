
sim7600LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020a74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d14  08020c04  08020c04  00030c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025918  08025918  000403b0  2**0
                  CONTENTS
  4 .ARM          00000008  08025918  08025918  00035918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025920  08025920  000403b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025920  08025920  00035920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025924  08025924  00035924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  08025928  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000403b0  2**0
                  CONTENTS
 10 .bss          00016844  200003b0  200003b0  000403b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20016bf4  20016bf4  000403b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000403b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005b504  00000000  00000000  000403e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ab56  00000000  00000000  0009b8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f38  00000000  00000000  000a6440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002d60  00000000  00000000  000a9378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001745c  00000000  00000000  000ac0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045912  00000000  00000000  000c3534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102417  00000000  00000000  00108e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0020b25d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cf98  00000000  00000000  0020b2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00218248  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0021826c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003b0 	.word	0x200003b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08020bec 	.word	0x08020bec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003b4 	.word	0x200003b4
 80001cc:	08020bec 	.word	0x08020bec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <__NVIC_GetPriorityGrouping+0x18>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	0a1b      	lsrs	r3, r3, #8
 8000582:	f003 0307 	and.w	r3, r3, #7
}
 8000586:	4618      	mov	r0, r3
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db0b      	blt.n	80005be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f003 021f 	and.w	r2, r3, #31
 80005ac:	4907      	ldr	r1, [pc, #28]	; (80005cc <__NVIC_EnableIRQ+0x38>)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	095b      	lsrs	r3, r3, #5
 80005b4:	2001      	movs	r0, #1
 80005b6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db0a      	blt.n	80005fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	490c      	ldr	r1, [pc, #48]	; (800061c <__NVIC_SetPriority+0x4c>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	0112      	lsls	r2, r2, #4
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	440b      	add	r3, r1
 80005f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f8:	e00a      	b.n	8000610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4908      	ldr	r1, [pc, #32]	; (8000620 <__NVIC_SetPriority+0x50>)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	3b04      	subs	r3, #4
 8000608:	0112      	lsls	r2, r2, #4
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	440b      	add	r3, r1
 800060e:	761a      	strb	r2, [r3, #24]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000e100 	.word	0xe000e100
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000624:	b480      	push	{r7}
 8000626:	b089      	sub	sp, #36	; 0x24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	f1c3 0307 	rsb	r3, r3, #7
 800063e:	2b04      	cmp	r3, #4
 8000640:	bf28      	it	cs
 8000642:	2304      	movcs	r3, #4
 8000644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3304      	adds	r3, #4
 800064a:	2b06      	cmp	r3, #6
 800064c:	d902      	bls.n	8000654 <NVIC_EncodePriority+0x30>
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	3b03      	subs	r3, #3
 8000652:	e000      	b.n	8000656 <NVIC_EncodePriority+0x32>
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000658:	f04f 32ff 	mov.w	r2, #4294967295
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	43da      	mvns	r2, r3
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	401a      	ands	r2, r3
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800066c:	f04f 31ff 	mov.w	r1, #4294967295
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	43d9      	mvns	r1, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	4313      	orrs	r3, r2
         );
}
 800067e:	4618      	mov	r0, r3
 8000680:	3724      	adds	r7, #36	; 0x24
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000692:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000696:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d013      	beq.n	80006ca <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006a6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006aa:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d00b      	beq.n	80006ca <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006b2:	e000      	b.n	80006b6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006b4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0f9      	beq.n	80006b4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006ca:	687b      	ldr	r3, [r7, #4]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80006e4:	4a0d      	ldr	r2, [pc, #52]	; (800071c <LL_DMA_SetDataTransferDirection+0x44>)
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4413      	add	r3, r2
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80006f8:	4908      	ldr	r1, [pc, #32]	; (800071c <LL_DMA_SetDataTransferDirection+0x44>)
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	440b      	add	r3, r1
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	440b      	add	r3, r1
 8000706:	4619      	mov	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4313      	orrs	r3, r2
 800070c:	600b      	str	r3, [r1, #0]
}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	0802536c 	.word	0x0802536c

08000720 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <LL_DMA_SetMode+0x44>)
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	4413      	add	r3, r2
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000740:	4908      	ldr	r1, [pc, #32]	; (8000764 <LL_DMA_SetMode+0x44>)
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	440b      	add	r3, r1
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	440b      	add	r3, r1
 800074e:	4619      	mov	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4313      	orrs	r3, r2
 8000754:	600b      	str	r3, [r1, #0]
}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	0802536c 	.word	0x0802536c

08000768 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <LL_DMA_SetPeriphIncMode+0x44>)
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	4413      	add	r3, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4413      	add	r3, r2
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000788:	4908      	ldr	r1, [pc, #32]	; (80007ac <LL_DMA_SetPeriphIncMode+0x44>)
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	440b      	add	r3, r1
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	440b      	add	r3, r1
 8000796:	4619      	mov	r1, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4313      	orrs	r3, r2
 800079c:	600b      	str	r3, [r1, #0]
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	0802536c 	.word	0x0802536c

080007b0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <LL_DMA_SetMemoryIncMode+0x44>)
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	4413      	add	r3, r2
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80007d0:	4908      	ldr	r1, [pc, #32]	; (80007f4 <LL_DMA_SetMemoryIncMode+0x44>)
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	440b      	add	r3, r1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	440b      	add	r3, r1
 80007de:	4619      	mov	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	600b      	str	r3, [r1, #0]
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	0802536c 	.word	0x0802536c

080007f8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <LL_DMA_SetPeriphSize+0x44>)
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	4413      	add	r3, r2
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000818:	4908      	ldr	r1, [pc, #32]	; (800083c <LL_DMA_SetPeriphSize+0x44>)
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	440b      	add	r3, r1
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	440b      	add	r3, r1
 8000826:	4619      	mov	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4313      	orrs	r3, r2
 800082c:	600b      	str	r3, [r1, #0]
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	0802536c 	.word	0x0802536c

08000840 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <LL_DMA_SetMemorySize+0x44>)
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	4413      	add	r3, r2
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000860:	4908      	ldr	r1, [pc, #32]	; (8000884 <LL_DMA_SetMemorySize+0x44>)
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	440b      	add	r3, r1
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	440b      	add	r3, r1
 800086e:	4619      	mov	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4313      	orrs	r3, r2
 8000874:	600b      	str	r3, [r1, #0]
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	0802536c 	.word	0x0802536c

08000888 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	4413      	add	r3, r2
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80008a8:	4908      	ldr	r1, [pc, #32]	; (80008cc <LL_DMA_SetStreamPriorityLevel+0x44>)
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	440b      	add	r3, r1
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	440b      	add	r3, r1
 80008b6:	4619      	mov	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	600b      	str	r3, [r1, #0]
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	0802536c 	.word	0x0802536c

080008d0 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <LL_DMA_SetChannelSelection+0x44>)
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4413      	add	r3, r2
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80008f0:	4908      	ldr	r1, [pc, #32]	; (8000914 <LL_DMA_SetChannelSelection+0x44>)
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	440b      	add	r3, r1
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	440b      	add	r3, r1
 80008fe:	4619      	mov	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4313      	orrs	r3, r2
 8000904:	600b      	str	r3, [r1, #0]
}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	0802536c 	.word	0x0802536c

08000918 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000922:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <LL_DMA_DisableFifoMode+0x3c>)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	4413      	add	r3, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4908      	ldr	r1, [pc, #32]	; (8000954 <LL_DMA_DisableFifoMode+0x3c>)
 8000934:	683a      	ldr	r2, [r7, #0]
 8000936:	440a      	add	r2, r1
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	4611      	mov	r1, r2
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	440a      	add	r2, r1
 8000940:	f023 0304 	bic.w	r3, r3, #4
 8000944:	6153      	str	r3, [r2, #20]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	0802536c 	.word	0x0802536c

08000958 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <LL_RCC_HSE_Enable+0x1c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <LL_RCC_HSE_Enable+0x1c>)
 8000962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <LL_RCC_HSE_IsReady+0x24>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000988:	bf0c      	ite	eq
 800098a:	2301      	moveq	r3, #1
 800098c:	2300      	movne	r3, #0
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <LL_RCC_SetSysClkSource+0x24>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f023 0203 	bic.w	r2, r3, #3
 80009b0:	4904      	ldr	r1, [pc, #16]	; (80009c4 <LL_RCC_SetSysClkSource+0x24>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	608b      	str	r3, [r1, #8]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	40023800 	.word	0x40023800

080009c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <LL_RCC_GetSysClkSource+0x18>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f003 030c 	and.w	r3, r3, #12
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <LL_RCC_SetAHBPrescaler+0x24>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009f4:	4904      	ldr	r1, [pc, #16]	; (8000a08 <LL_RCC_SetAHBPrescaler+0x24>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	608b      	str	r3, [r1, #8]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	40023800 	.word	0x40023800

08000a0c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000a1c:	4904      	ldr	r1, [pc, #16]	; (8000a30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	608b      	str	r3, [r1, #8]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40023800 	.word	0x40023800

08000a34 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000a44:	4904      	ldr	r1, [pc, #16]	; (8000a58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	608b      	str	r3, [r1, #8]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	40023800 	.word	0x40023800

08000a5c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <LL_RCC_PLL_Enable+0x1c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <LL_RCC_PLL_Enable+0x1c>)
 8000a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <LL_RCC_PLL_IsReady+0x24>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000a8c:	bf0c      	ite	eq
 8000a8e:	2301      	moveq	r3, #1
 8000a90:	2300      	movne	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	68f9      	ldr	r1, [r7, #12]
 8000abc:	68ba      	ldr	r2, [r7, #8]
 8000abe:	4311      	orrs	r1, r2
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	0192      	lsls	r2, r2, #6
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ad4:	4904      	ldr	r1, [pc, #16]	; (8000ae8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	ffbf8000 	.word	0xffbf8000

08000af0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800

08000b20 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b2c:	4907      	ldr	r1, [pc, #28]	; (8000b4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40023800 	.word	0x40023800

08000b50 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <LL_FLASH_SetLatency+0x24>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f023 0207 	bic.w	r2, r3, #7
 8000b60:	4904      	ldr	r1, [pc, #16]	; (8000b74 <LL_FLASH_SetLatency+0x24>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	600b      	str	r3, [r1, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	40023c00 	.word	0x40023c00

08000b78 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <LL_FLASH_GetLatency+0x18>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0307 	and.w	r3, r3, #7
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023c00 	.word	0x40023c00

08000b94 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000ba4:	4904      	ldr	r1, [pc, #16]	; (8000bb8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	600b      	str	r3, [r1, #0]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40007000 	.word	0x40007000

08000bbc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	60da      	str	r2, [r3, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	615a      	str	r2, [r3, #20]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	691b      	ldr	r3, [r3, #16]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	619a      	str	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SimStt_Timer_Callback>:
//debug
osTimerId_t SttCheckTimerID; //timer for check sim status
#define STT_CHECK_TIMER_INTERVAL 10 //ms
int oldSimStt = -1;
void SimStt_Timer_Callback(void *argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if(Sim_STT != oldSimStt)
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <SimStt_Timer_Callback+0x40>)
 8000c46:	f7ff ffdf 	bl	8000c08 <LL_GPIO_ReadInputPort>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <SimStt_Timer_Callback+0x44>)
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d00d      	beq.n	8000c74 <SimStt_Timer_Callback+0x38>
  {
    oldSimStt = Sim_STT;
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <SimStt_Timer_Callback+0x40>)
 8000c5a:	f7ff ffd5 	bl	8000c08 <LL_GPIO_ReadInputPort>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <SimStt_Timer_Callback+0x44>)
 8000c66:	6013      	str	r3, [r2, #0]
    LOG_WRITE("sim status %d\n", oldSimStt);
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SimStt_Timer_Callback+0x44>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <SimStt_Timer_Callback+0x48>)
 8000c70:	f01e fe3c 	bl	801f8ec <iprintf>
  }
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	20000000 	.word	0x20000000
 8000c84:	08020d34 	.word	0x08020d34

08000c88 <_write>:
/* USER CODE BEGIN PFP */
char* DeviceID = "123456781234567812345678";

#if DEBUG_LOG
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e009      	b.n	8000cae <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	60ba      	str	r2, [r7, #8]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fcf1 	bl	800068a <ITM_SendChar>
    for (int i = 0; i < len; i++)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3301      	adds	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	dbf1      	blt.n	8000c9a <_write+0x12>
    }
    return len;
 8000cb6:	687b      	ldr	r3, [r7, #4]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <configureTimerForRunTimeStats>:
#endif

volatile unsigned long ulHighFrequencyTimerTicks;

void configureTimerForRunTimeStats(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  ulHighFrequencyTimerTicks = 0;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <configureTimerForRunTimeStats+0x14>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim8);
 8000cca:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <configureTimerForRunTimeStats+0x18>)
 8000ccc:	f002 fc5a 	bl	8003584 <HAL_TIM_Base_Start_IT>
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200056b4 	.word	0x200056b4
 8000cd8:	20005660 	.word	0x20005660

08000cdc <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void) {
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ulHighFrequencyTimerTicks;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <getRunTimeCounterValue+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200056b4 	.word	0x200056b4

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 fe0e 	bl	8001918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f89c 	bl	8000e38 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(30000); //wait for debug
 8000d00:	f247 5030 	movw	r0, #30000	; 0x7530
 8000d04:	f000 fe4a 	bl	800199c <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d08:	f000 fa50 	bl	80011ac <MX_GPIO_Init>
  MX_SPI3_Init();
 8000d0c:	f000 f8de 	bl	8000ecc <MX_SPI3_Init>
  MX_DMA_Init();
 8000d10:	f000 fa34 	bl	800117c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d14:	f000 f9ae 	bl	8001074 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d18:	f000 f90e 	bl	8000f38 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000d1c:	f000 f95a 	bl	8000fd4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000d20:	482d      	ldr	r0, [pc, #180]	; (8000dd8 <main+0xe4>)
 8000d22:	f002 fbc7 	bl	80034b4 <HAL_TIM_Base_Start>
  configureTimerForRunTimeStats();
 8000d26:	f7ff ffcb 	bl	8000cc0 <configureTimerForRunTimeStats>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d2a:	f008 fff3 	bl	8009d14 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of InitBinSem */
  InitBinSemHandle = osSemaphoreNew(1, 1, &InitBinSem_attributes);
 8000d2e:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <main+0xe8>)
 8000d30:	2101      	movs	r1, #1
 8000d32:	2001      	movs	r0, #1
 8000d34:	f009 fc3b 	bl	800a5ae <osSemaphoreNew>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	4a29      	ldr	r2, [pc, #164]	; (8000de0 <main+0xec>)
 8000d3c:	6013      	str	r3, [r2, #0]

  /* creation of InitCountSem */
  InitCountSemHandle = osSemaphoreNew(2, 2, &InitCountSem_attributes);
 8000d3e:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <main+0xf0>)
 8000d40:	2102      	movs	r1, #2
 8000d42:	2002      	movs	r0, #2
 8000d44:	f009 fc33 	bl	800a5ae <osSemaphoreNew>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4a27      	ldr	r2, [pc, #156]	; (8000de8 <main+0xf4>)
 8000d4c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  SimATBinSem = osSemaphoreNew(1, 1, &SimATBinSem_attributes);
 8000d4e:	4a27      	ldr	r2, [pc, #156]	; (8000dec <main+0xf8>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	2001      	movs	r0, #1
 8000d54:	f009 fc2b 	bl	800a5ae <osSemaphoreNew>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4a25      	ldr	r2, [pc, #148]	; (8000df0 <main+0xfc>)
 8000d5c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of InitTimerPeriodic */
  InitTimerPeriodicHandle = osTimerNew(CallbackTimerPeriodic, osTimerPeriodic, NULL, &InitTimerPeriodic_attributes);
 8000d5e:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <main+0x100>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	2101      	movs	r1, #1
 8000d64:	4824      	ldr	r0, [pc, #144]	; (8000df8 <main+0x104>)
 8000d66:	f009 f8f7 	bl	8009f58 <osTimerNew>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <main+0x108>)
 8000d6e:	6013      	str	r3, [r2, #0]

  /* creation of InitTimerOnce */
  InitTimerOnceHandle = osTimerNew(CallbackTimerOnce, osTimerOnce, NULL, &InitTimerOnce_attributes);
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <main+0x10c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	4823      	ldr	r0, [pc, #140]	; (8000e04 <main+0x110>)
 8000d78:	f009 f8ee 	bl	8009f58 <osTimerNew>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <main+0x114>)
 8000d80:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  TCPTimerOnceID = osTimerNew(TCP_Timer_Callback, osTimerOnce, NULL, NULL);
 8000d82:	2300      	movs	r3, #0
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	4820      	ldr	r0, [pc, #128]	; (8000e0c <main+0x118>)
 8000d8a:	f009 f8e5 	bl	8009f58 <osTimerNew>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <main+0x11c>)
 8000d92:	6013      	str	r3, [r2, #0]
  SttCheckTimerID = osTimerNew(SimStt_Timer_Callback, osTimerPeriodic, NULL, NULL);
 8000d94:	2300      	movs	r3, #0
 8000d96:	2200      	movs	r2, #0
 8000d98:	2101      	movs	r1, #1
 8000d9a:	481e      	ldr	r0, [pc, #120]	; (8000e14 <main+0x120>)
 8000d9c:	f009 f8dc 	bl	8009f58 <osTimerNew>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <main+0x124>)
 8000da4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of InitQueue */
  InitQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &InitQueue_attributes);
 8000da6:	4a1d      	ldr	r2, [pc, #116]	; (8000e1c <main+0x128>)
 8000da8:	2102      	movs	r1, #2
 8000daa:	2010      	movs	r0, #16
 8000dac:	f009 fd42 	bl	800a834 <osMessageQueueNew>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <main+0x12c>)
 8000db4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000db6:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <main+0x130>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	481b      	ldr	r0, [pc, #108]	; (8000e28 <main+0x134>)
 8000dbc:	f009 f809 	bl	8009dd2 <osThreadNew>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <main+0x138>)
 8000dc4:	6013      	str	r3, [r2, #0]
  
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of InitEvent */
  InitEventHandle = osEventFlagsNew(&InitEvent_attributes);
 8000dc6:	481a      	ldr	r0, [pc, #104]	; (8000e30 <main+0x13c>)
 8000dc8:	f009 f9a7 	bl	800a11a <osEventFlagsNew>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <main+0x140>)
 8000dd0:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dd2:	f008 ffc3 	bl	8009d5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <main+0xe2>
 8000dd8:	20005744 	.word	0x20005744
 8000ddc:	080253d0 	.word	0x080253d0
 8000de0:	20005730 	.word	0x20005730
 8000de4:	080253e0 	.word	0x080253e0
 8000de8:	2000572c 	.word	0x2000572c
 8000dec:	08025518 	.word	0x08025518
 8000df0:	200056b8 	.word	0x200056b8
 8000df4:	080253b0 	.word	0x080253b0
 8000df8:	08001455 	.word	0x08001455
 8000dfc:	200056bc 	.word	0x200056bc
 8000e00:	080253c0 	.word	0x080253c0
 8000e04:	08001469 	.word	0x08001469
 8000e08:	200056c0 	.word	0x200056c0
 8000e0c:	08009019 	.word	0x08009019
 8000e10:	200056a8 	.word	0x200056a8
 8000e14:	08000c3d 	.word	0x08000c3d
 8000e18:	20005790 	.word	0x20005790
 8000e1c:	08025398 	.word	0x08025398
 8000e20:	200056ac 	.word	0x200056ac
 8000e24:	08025374 	.word	0x08025374
 8000e28:	080012e1 	.word	0x080012e1
 8000e2c:	2000565c 	.word	0x2000565c
 8000e30:	080253f0 	.word	0x080253f0
 8000e34:	20005654 	.word	0x20005654

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000e3c:	2005      	movs	r0, #5
 8000e3e:	f7ff fe87 	bl	8000b50 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000e42:	bf00      	nop
 8000e44:	f7ff fe98 	bl	8000b78 <LL_FLASH_GetLatency>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b05      	cmp	r3, #5
 8000e4c:	d1fa      	bne.n	8000e44 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000e4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e52:	f7ff fe9f 	bl	8000b94 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000e56:	f7ff fd7f 	bl	8000958 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff fd8c 	bl	8000978 <LL_RCC_HSE_IsReady>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d1fa      	bne.n	8000e5c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000e66:	2300      	movs	r3, #0
 8000e68:	22a8      	movs	r2, #168	; 0xa8
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e70:	f7ff fe18 	bl	8000aa4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000e74:	f7ff fdf2 	bl	8000a5c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000e78:	bf00      	nop
 8000e7a:	f7ff fdff 	bl	8000a7c <LL_RCC_PLL_IsReady>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d1fa      	bne.n	8000e7a <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fdad 	bl	80009e4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000e8a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000e8e:	f7ff fdbd 	bl	8000a0c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000e92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e96:	f7ff fdcd 	bl	8000a34 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f7ff fd80 	bl	80009a0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ea0:	bf00      	nop
 8000ea2:	f7ff fd91 	bl	80009c8 <LL_RCC_GetSysClkSource>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d1fa      	bne.n	8000ea2 <SystemClock_Config+0x6a>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <SystemClock_Config+0x90>)
 8000eae:	f003 fc97 	bl	80047e0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 fbaa 	bl	800160c <HAL_InitTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ebe:	f000 faef 	bl	80014a0 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	0a037a00 	.word	0x0a037a00

08000ecc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000ed2:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <MX_SPI3_Init+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000edc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000f18:	220a      	movs	r2, #10
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_SPI3_Init+0x64>)
 8000f1e:	f002 f9f1 	bl	8003304 <HAL_SPI_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000f28:	f000 faba 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200056c8 	.word	0x200056c8
 8000f34:	40003c00 	.word	0x40003c00

08000f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f5e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7e:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f80:	f002 fa49 	bl	8003416 <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f8a:	f000 fa89 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f9c:	f002 fc6a 	bl	8003874 <HAL_TIM_ConfigClockSource>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fa6:	f000 fa7b 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000fb8:	f002 fe86 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fc2:	f000 fa6d 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20005744 	.word	0x20005744

08000fd4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <MX_TIM8_Init+0x98>)
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <MX_TIM8_Init+0x9c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_TIM8_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_TIM8_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_TIM8_Init+0x98>)
 8001004:	f240 628f 	movw	r2, #1679	; 0x68f
 8001008:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_TIM8_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_TIM8_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_TIM8_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <MX_TIM8_Init+0x98>)
 800101e:	f002 f9fa 	bl	8003416 <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001028:	f000 fa3a 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	4619      	mov	r1, r3
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <MX_TIM8_Init+0x98>)
 800103a:	f002 fc1b 	bl	8003874 <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001044:	f000 fa2c 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_TIM8_Init+0x98>)
 8001056:	f002 fe37 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001060:	f000 fa1e 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20005660 	.word	0x20005660
 8001070:	40010400 	.word	0x40010400

08001074 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]
 800108a:	615a      	str	r2, [r3, #20]
 800108c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800109e:	2010      	movs	r0, #16
 80010a0:	f7ff fd3e 	bl	8000b20 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fd23 	bl	8000af0 <LL_AHB1_GRP1_EnableClock>
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  PA11   ------> USART1_CTS
  PA12   ------> USART1_RTS
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80010aa:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80010ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010b0:	2302      	movs	r3, #2
 80010b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80010c0:	2307      	movs	r3, #7
 80010c2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4829      	ldr	r0, [pc, #164]	; (8001170 <MX_USART1_UART_Init+0xfc>)
 80010ca:	f002 ff92 	bl	8003ff2 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 80010ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010d2:	2102      	movs	r1, #2
 80010d4:	4827      	ldr	r0, [pc, #156]	; (8001174 <MX_USART1_UART_Init+0x100>)
 80010d6:	f7ff fbfb 	bl	80008d0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80010da:	2200      	movs	r2, #0
 80010dc:	2102      	movs	r1, #2
 80010de:	4825      	ldr	r0, [pc, #148]	; (8001174 <MX_USART1_UART_Init+0x100>)
 80010e0:	f7ff fafa 	bl	80006d8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_VERYHIGH);
 80010e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010e8:	2102      	movs	r1, #2
 80010ea:	4822      	ldr	r0, [pc, #136]	; (8001174 <MX_USART1_UART_Init+0x100>)
 80010ec:	f7ff fbcc 	bl	8000888 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 80010f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f4:	2102      	movs	r1, #2
 80010f6:	481f      	ldr	r0, [pc, #124]	; (8001174 <MX_USART1_UART_Init+0x100>)
 80010f8:	f7ff fb12 	bl	8000720 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2102      	movs	r1, #2
 8001100:	481c      	ldr	r0, [pc, #112]	; (8001174 <MX_USART1_UART_Init+0x100>)
 8001102:	f7ff fb31 	bl	8000768 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8001106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800110a:	2102      	movs	r1, #2
 800110c:	4819      	ldr	r0, [pc, #100]	; (8001174 <MX_USART1_UART_Init+0x100>)
 800110e:	f7ff fb4f 	bl	80007b0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 8001112:	2200      	movs	r2, #0
 8001114:	2102      	movs	r1, #2
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <MX_USART1_UART_Init+0x100>)
 8001118:	f7ff fb6e 	bl	80007f8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 800111c:	2200      	movs	r2, #0
 800111e:	2102      	movs	r1, #2
 8001120:	4814      	ldr	r0, [pc, #80]	; (8001174 <MX_USART1_UART_Init+0x100>)
 8001122:	f7ff fb8d 	bl	8000840 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 8001126:	2102      	movs	r1, #2
 8001128:	4812      	ldr	r0, [pc, #72]	; (8001174 <MX_USART1_UART_Init+0x100>)
 800112a:	f7ff fbf5 	bl	8000918 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800112e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001132:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 800113c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001142:	230c      	movs	r3, #12
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_RTS_CTS;
 8001146:	f44f 7340 	mov.w	r3, #768	; 0x300
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4808      	ldr	r0, [pc, #32]	; (8001178 <MX_USART1_UART_Init+0x104>)
 8001158:	f003 fac2 	bl	80046e0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800115c:	4806      	ldr	r0, [pc, #24]	; (8001178 <MX_USART1_UART_Init+0x104>)
 800115e:	f7ff fd3d 	bl	8000bdc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_USART1_UART_Init+0x104>)
 8001164:	f7ff fd2a 	bl	8000bbc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3738      	adds	r7, #56	; 0x38
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40020000 	.word	0x40020000
 8001174:	40026400 	.word	0x40026400
 8001178:	40011000 	.word	0x40011000

0800117c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001180:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001184:	f7ff fcb4 	bl	8000af0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001188:	f7ff f9f6 	bl	8000578 <__NVIC_GetPriorityGrouping>
 800118c:	4603      	mov	r3, r0
 800118e:	2200      	movs	r2, #0
 8001190:	2105      	movs	r1, #5
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fa46 	bl	8000624 <NVIC_EncodePriority>
 8001198:	4603      	mov	r3, r0
 800119a:	4619      	mov	r1, r3
 800119c:	203a      	movs	r0, #58	; 0x3a
 800119e:	f7ff fa17 	bl	80005d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011a2:	203a      	movs	r0, #58	; 0x3a
 80011a4:	f7ff f9f6 	bl	8000594 <__NVIC_EnableIRQ>

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80011c2:	2010      	movs	r0, #16
 80011c4:	f7ff fc94 	bl	8000af0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80011c8:	2080      	movs	r0, #128	; 0x80
 80011ca:	f7ff fc91 	bl	8000af0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011ce:	2004      	movs	r0, #4
 80011d0:	f7ff fc8e 	bl	8000af0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7ff fc8b 	bl	8000af0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011da:	2002      	movs	r0, #2
 80011dc:	f7ff fc88 	bl	8000af0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	481b      	ldr	r0, [pc, #108]	; (8001250 <MX_GPIO_Init+0xa4>)
 80011e4:	f7ff fd1c 	bl	8000c20 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13);
 80011e8:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 80011ec:	4819      	ldr	r0, [pc, #100]	; (8001254 <MX_GPIO_Init+0xa8>)
 80011ee:	f7ff fd17 	bl	8000c20 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_9;
 80011f2:	f44f 7301 	mov.w	r3, #516	; 0x204
 80011f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <MX_GPIO_Init+0xa8>)
 8001206:	f002 fef4 	bl	8003ff2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800120a:	2340      	movs	r3, #64	; 0x40
 800120c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800120e:	2301      	movs	r3, #1
 8001210:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	463b      	mov	r3, r7
 8001220:	4619      	mov	r1, r3
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <MX_GPIO_Init+0xa4>)
 8001224:	f002 fee5 	bl	8003ff2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13;
 8001228:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 800122c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800122e:	2301      	movs	r3, #1
 8001230:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123e:	463b      	mov	r3, r7
 8001240:	4619      	mov	r1, r3
 8001242:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_GPIO_Init+0xa8>)
 8001244:	f002 fed5 	bl	8003ff2 <LL_GPIO_Init>

}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40020000 	.word	0x40020000
 8001254:	40021000 	.word	0x40021000

08001258 <StartConfigSimTask>:

/* USER CODE BEGIN 4 */

void StartConfigSimTask(void *argument)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	(void*) argument;
  //debug
  osTimerStart(SttCheckTimerID, STT_CHECK_TIMER_INTERVAL);
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <StartConfigSimTask+0x20>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	210a      	movs	r1, #10
 8001266:	4618      	mov	r0, r3
 8001268:	f008 fef2 	bl	800a050 <osTimerStart>

  sim7600_fullConfigTask();
 800126c:	f006 fb88 	bl	8007980 <sim7600_fullConfigTask>
//    RSA2048_Pubkey_Encrypt(NULL, 0, input, strlen(input), output);
//    AES_Encrypt_Packet(output, 250);
//    AES_Decrypt_Packet(output, 256);
//    osDelay(1000);
//  }
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20005790 	.word	0x20005790

0800127c <StartConnectSimTask>:

void StartConnectSimTask(void *argument)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	(void*) argument;
  sim7600_connectTask();
 8001284:	f006 fc6a 	bl	8007b5c <sim7600_connectTask>
//	for(;;) {
//		osDelay(100);
//	}
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <StartSendSimTask>:

void StartSendSimTask(void *argument)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  sim7600_sendTask();
 8001298:	f006 fe0e 	bl	8007eb8 <sim7600_sendTask>
//	for(;;) {
//			osDelay(100);
//		}
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <StartRecvSimTask>:
void StartRecvSimTask(void *argument)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  sim7600_recvTask();
 80012ac:	f006 fe50 	bl	8007f50 <sim7600_recvTask>
//	for(;;) {
//			osDelay(100);
//		}
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <StartConnectEthTask>:

void StartConnectEthTask(void *argument)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  (void*) argument;
  ethConnectTask();
 80012c0:	f004 fe42 	bl	8005f48 <ethConnectTask>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <StartSendEthTask>:

void StartSendEthTask(void *argument)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  (void*) argument;
  ethSendTask();
 80012d4:	f004 fcec 	bl	8005cb0 <ethSendTask>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80012e8:	f008 f850 	bl	800938c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  if (netif_is_link_up(&gnetif) == 0)
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <StartDefaultTask+0xec>)
 80012ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d13d      	bne.n	8001378 <StartDefaultTask+0x98>
  {
    //start with sim7600
    LOG_WRITE("sim7600 mode\n");
 80012fc:	4834      	ldr	r0, [pc, #208]	; (80013d0 <StartDefaultTask+0xf0>)
 80012fe:	f01e fb7b 	bl	801f9f8 <puts>

    ConfigSimEventID = osEventFlagsNew(&ConfigSimEvent_attributes);
 8001302:	4834      	ldr	r0, [pc, #208]	; (80013d4 <StartDefaultTask+0xf4>)
 8001304:	f008 ff09 	bl	800a11a <osEventFlagsNew>
 8001308:	4603      	mov	r3, r0
 800130a:	4a33      	ldr	r2, [pc, #204]	; (80013d8 <StartDefaultTask+0xf8>)
 800130c:	6013      	str	r3, [r2, #0]
    ConnectSimEventID = osEventFlagsNew(&ConnectSimEvent_attributes);
 800130e:	4833      	ldr	r0, [pc, #204]	; (80013dc <StartDefaultTask+0xfc>)
 8001310:	f008 ff03 	bl	800a11a <osEventFlagsNew>
 8001314:	4603      	mov	r3, r0
 8001316:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <StartDefaultTask+0x100>)
 8001318:	6013      	str	r3, [r2, #0]
    SendSimEventID = osEventFlagsNew(&SendSimEvent_attributes);
 800131a:	4832      	ldr	r0, [pc, #200]	; (80013e4 <StartDefaultTask+0x104>)
 800131c:	f008 fefd 	bl	800a11a <osEventFlagsNew>
 8001320:	4603      	mov	r3, r0
 8001322:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <StartDefaultTask+0x108>)
 8001324:	6013      	str	r3, [r2, #0]

    SendSimQueueID = osMessageQueueNew(5, sizeof(sendSimPack), &SendSimQueue_attributes);
 8001326:	4a31      	ldr	r2, [pc, #196]	; (80013ec <StartDefaultTask+0x10c>)
 8001328:	211c      	movs	r1, #28
 800132a:	2005      	movs	r0, #5
 800132c:	f009 fa82 	bl	800a834 <osMessageQueueNew>
 8001330:	4603      	mov	r3, r0
 8001332:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <StartDefaultTask+0x110>)
 8001334:	6013      	str	r3, [r2, #0]

    configSimTaskHandle = osThreadNew(StartConfigSimTask, NULL, &configSimTask_attributes);
 8001336:	4a2f      	ldr	r2, [pc, #188]	; (80013f4 <StartDefaultTask+0x114>)
 8001338:	2100      	movs	r1, #0
 800133a:	482f      	ldr	r0, [pc, #188]	; (80013f8 <StartDefaultTask+0x118>)
 800133c:	f008 fd49 	bl	8009dd2 <osThreadNew>
 8001340:	4603      	mov	r3, r0
 8001342:	4a2e      	ldr	r2, [pc, #184]	; (80013fc <StartDefaultTask+0x11c>)
 8001344:	6013      	str	r3, [r2, #0]
    connectSimTaskHandle = osThreadNew(StartConnectSimTask, NULL, &connectSimTask_attributes);
 8001346:	4a2e      	ldr	r2, [pc, #184]	; (8001400 <StartDefaultTask+0x120>)
 8001348:	2100      	movs	r1, #0
 800134a:	482e      	ldr	r0, [pc, #184]	; (8001404 <StartDefaultTask+0x124>)
 800134c:	f008 fd41 	bl	8009dd2 <osThreadNew>
 8001350:	4603      	mov	r3, r0
 8001352:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <StartDefaultTask+0x128>)
 8001354:	6013      	str	r3, [r2, #0]
    sendSimTaskHandle = osThreadNew(StartSendSimTask, NULL, &sendSimTask_attributes);
 8001356:	4a2d      	ldr	r2, [pc, #180]	; (800140c <StartDefaultTask+0x12c>)
 8001358:	2100      	movs	r1, #0
 800135a:	482d      	ldr	r0, [pc, #180]	; (8001410 <StartDefaultTask+0x130>)
 800135c:	f008 fd39 	bl	8009dd2 <osThreadNew>
 8001360:	4603      	mov	r3, r0
 8001362:	4a2c      	ldr	r2, [pc, #176]	; (8001414 <StartDefaultTask+0x134>)
 8001364:	6013      	str	r3, [r2, #0]
    recvSimTaskHandle = osThreadNew(StartRecvSimTask, NULL, &recvSimTask_attributes);
 8001366:	4a2c      	ldr	r2, [pc, #176]	; (8001418 <StartDefaultTask+0x138>)
 8001368:	2100      	movs	r1, #0
 800136a:	482c      	ldr	r0, [pc, #176]	; (800141c <StartDefaultTask+0x13c>)
 800136c:	f008 fd31 	bl	8009dd2 <osThreadNew>
 8001370:	4603      	mov	r3, r0
 8001372:	4a2b      	ldr	r2, [pc, #172]	; (8001420 <StartDefaultTask+0x140>)
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e020      	b.n	80013ba <StartDefaultTask+0xda>
  }
  else
  {
    //start with ETH
    LOG_WRITE("eth mode\n");
 8001378:	482a      	ldr	r0, [pc, #168]	; (8001424 <StartDefaultTask+0x144>)
 800137a:	f01e fb3d 	bl	801f9f8 <puts>
//    while(MX_LWIP_checkIsystem_ip_addr() == 0)
//        {
//        	osDelay(1000);
//        }

    ConnectEthEventID = osEventFlagsNew(&ConnectEthEvent_attributes);
 800137e:	482a      	ldr	r0, [pc, #168]	; (8001428 <StartDefaultTask+0x148>)
 8001380:	f008 fecb 	bl	800a11a <osEventFlagsNew>
 8001384:	4603      	mov	r3, r0
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <StartDefaultTask+0x14c>)
 8001388:	6013      	str	r3, [r2, #0]

    SendEthQueueID = osMessageQueueNew(5, sizeof(sendEthPack), &SendEthQueue_attributes);
 800138a:	4a29      	ldr	r2, [pc, #164]	; (8001430 <StartDefaultTask+0x150>)
 800138c:	2114      	movs	r1, #20
 800138e:	2005      	movs	r0, #5
 8001390:	f009 fa50 	bl	800a834 <osMessageQueueNew>
 8001394:	4603      	mov	r3, r0
 8001396:	4a27      	ldr	r2, [pc, #156]	; (8001434 <StartDefaultTask+0x154>)
 8001398:	6013      	str	r3, [r2, #0]

    connectEthTaskId = osThreadNew(StartConnectEthTask, NULL, &connectEthTask_attributes);
 800139a:	4a27      	ldr	r2, [pc, #156]	; (8001438 <StartDefaultTask+0x158>)
 800139c:	2100      	movs	r1, #0
 800139e:	4827      	ldr	r0, [pc, #156]	; (800143c <StartDefaultTask+0x15c>)
 80013a0:	f008 fd17 	bl	8009dd2 <osThreadNew>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a26      	ldr	r2, [pc, #152]	; (8001440 <StartDefaultTask+0x160>)
 80013a8:	6013      	str	r3, [r2, #0]
    sendEthTaskId = osThreadNew(StartSendEthTask, NULL, &sendEthTask_attributes);
 80013aa:	4a26      	ldr	r2, [pc, #152]	; (8001444 <StartDefaultTask+0x164>)
 80013ac:	2100      	movs	r1, #0
 80013ae:	4826      	ldr	r0, [pc, #152]	; (8001448 <StartDefaultTask+0x168>)
 80013b0:	f008 fd0f 	bl	8009dd2 <osThreadNew>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a25      	ldr	r2, [pc, #148]	; (800144c <StartDefaultTask+0x16c>)
 80013b8:	6013      	str	r3, [r2, #0]
  }

  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 80013ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013be:	f008 fd9a 	bl	8009ef6 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80013c2:	2140      	movs	r1, #64	; 0x40
 80013c4:	4822      	ldr	r0, [pc, #136]	; (8001450 <StartDefaultTask+0x170>)
 80013c6:	f001 ff31 	bl	800322c <HAL_GPIO_TogglePin>
    osDelay(1000);
 80013ca:	e7f6      	b.n	80013ba <StartDefaultTask+0xda>
 80013cc:	20010240 	.word	0x20010240
 80013d0:	08020d60 	.word	0x08020d60
 80013d4:	080254d8 	.word	0x080254d8
 80013d8:	20005734 	.word	0x20005734
 80013dc:	080254e8 	.word	0x080254e8
 80013e0:	20005738 	.word	0x20005738
 80013e4:	080254f8 	.word	0x080254f8
 80013e8:	200056c4 	.word	0x200056c4
 80013ec:	08025528 	.word	0x08025528
 80013f0:	20005740 	.word	0x20005740
 80013f4:	08025400 	.word	0x08025400
 80013f8:	08001259 	.word	0x08001259
 80013fc:	200056b0 	.word	0x200056b0
 8001400:	08025424 	.word	0x08025424
 8001404:	0800127d 	.word	0x0800127d
 8001408:	20005720 	.word	0x20005720
 800140c:	08025448 	.word	0x08025448
 8001410:	08001291 	.word	0x08001291
 8001414:	20005794 	.word	0x20005794
 8001418:	0802546c 	.word	0x0802546c
 800141c:	080012a5 	.word	0x080012a5
 8001420:	20005728 	.word	0x20005728
 8001424:	08020d70 	.word	0x08020d70
 8001428:	08025508 	.word	0x08025508
 800142c:	20005798 	.word	0x20005798
 8001430:	08025540 	.word	0x08025540
 8001434:	20005658 	.word	0x20005658
 8001438:	08025490 	.word	0x08025490
 800143c:	080012b9 	.word	0x080012b9
 8001440:	2000578c 	.word	0x2000578c
 8001444:	080254b4 	.word	0x080254b4
 8001448:	080012cd 	.word	0x080012cd
 800144c:	20005724 	.word	0x20005724
 8001450:	40020000 	.word	0x40020000

08001454 <CallbackTimerPeriodic>:
  /* USER CODE END 5 */
}

/* CallbackTimerPeriodic function */
void CallbackTimerPeriodic(void *argument)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerPeriodic */

  /* USER CODE END CallbackTimerPeriodic */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <CallbackTimerOnce>:

/* CallbackTimerOnce function */
void CallbackTimerOnce(void *argument)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerOnce */

  /* USER CODE END CallbackTimerOnce */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800148e:	f000 fa65 	bl	800195c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40010000 	.word	0x40010000

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <Error_Handler+0x8>
	...

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_MspInit+0x54>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a11      	ldr	r2, [pc, #68]	; (8001500 <HAL_MspInit+0x54>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_MspInit+0x54>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_MspInit+0x54>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_MspInit+0x54>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_MspInit+0x54>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	210f      	movs	r1, #15
 80014ee:	f06f 0001 	mvn.w	r0, #1
 80014f2:	f000 fb2f 	bl	8001b54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_SPI_MspInit+0x84>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d12c      	bne.n	8001580 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_SPI_MspInit+0x88>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_SPI_MspInit+0x88>)
 8001530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_SPI_MspInit+0x88>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_SPI_MspInit+0x88>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a10      	ldr	r2, [pc, #64]	; (800158c <HAL_SPI_MspInit+0x88>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_SPI_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800155e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001570:	2306      	movs	r3, #6
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_SPI_MspInit+0x8c>)
 800157c:	f001 fcba 	bl	8002ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40003c00 	.word	0x40003c00
 800158c:	40023800 	.word	0x40023800
 8001590:	40020800 	.word	0x40020800

08001594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a4:	d10e      	bne.n	80015c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_TIM_Base_MspInit+0x70>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <HAL_TIM_Base_MspInit+0x70>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_TIM_Base_MspInit+0x70>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80015c2:	e01a      	b.n	80015fa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM8)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <HAL_TIM_Base_MspInit+0x74>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d115      	bne.n	80015fa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_TIM_Base_MspInit+0x70>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <HAL_TIM_Base_MspInit+0x70>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_TIM_Base_MspInit+0x70>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2105      	movs	r1, #5
 80015ee:	202c      	movs	r0, #44	; 0x2c
 80015f0:	f000 fab0 	bl	8001b54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80015f4:	202c      	movs	r0, #44	; 0x2c
 80015f6:	f000 fac9 	bl	8001b8c <HAL_NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	2019      	movs	r0, #25
 8001622:	f000 fa97 	bl	8001b54 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001626:	2019      	movs	r0, #25
 8001628:	f000 fab0 	bl	8001b8c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HAL_InitTick+0xa4>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_InitTick+0xa4>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6453      	str	r3, [r2, #68]	; 0x44
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <HAL_InitTick+0xa4>)
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001648:	f107 0210 	add.w	r2, r7, #16
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f001 fe24 	bl	80032a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001658:	f001 fe0e 	bl	8003278 <HAL_RCC_GetPCLK2Freq>
 800165c:	4603      	mov	r3, r0
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <HAL_InitTick+0xa8>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0c9b      	lsrs	r3, r3, #18
 800166c:	3b01      	subs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_InitTick+0xac>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <HAL_InitTick+0xb0>)
 8001674:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_InitTick+0xac>)
 8001678:	f240 32e7 	movw	r2, #999	; 0x3e7
 800167c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_InitTick+0xac>)
 8001680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001682:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_InitTick+0xac>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_InitTick+0xac>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <HAL_InitTick+0xac>)
 8001692:	f001 fec0 	bl	8003416 <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d104      	bne.n	80016a6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800169c:	4806      	ldr	r0, [pc, #24]	; (80016b8 <HAL_InitTick+0xac>)
 800169e:	f001 ff71 	bl	8003584 <HAL_TIM_Base_Start_IT>
 80016a2:	4603      	mov	r3, r0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3730      	adds	r7, #48	; 0x30
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	2000579c 	.word	0x2000579c
 80016bc:	40010000 	.word	0x40010000

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <NMI_Handler+0x4>

080016c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <MemManage_Handler+0x4>

080016d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <UsageFault_Handler+0x4>

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016f2:	f001 ffb7 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000579c 	.word	0x2000579c

08001700 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	ulHighFrequencyTimerTicks++;
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	4a03      	ldr	r2, [pc, #12]	; (8001718 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800170c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <TIM8_UP_TIM13_IRQHandler+0x1c>)
 8001710:	f001 ffa8 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200056b4 	.word	0x200056b4
 800171c:	20005660 	.word	0x20005660

08001720 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <ETH_IRQHandler+0x10>)
 8001736:	f000 fe1b 	bl	8002370 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20011b54 	.word	0x20011b54

08001744 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	return 1;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_kill>:

int _kill(int pid, int sig)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <_kill+0x20>)
 8001760:	2216      	movs	r2, #22
 8001762:	601a      	str	r2, [r3, #0]
	return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	20016be0 	.word	0x20016be0

08001778 <_exit>:

void _exit (int status)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ffe5 	bl	8001754 <_kill>
	while (1) {}		/* Make sure we hang here */
 800178a:	e7fe      	b.n	800178a <_exit+0x12>

0800178c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e00a      	b.n	80017b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800179e:	f3af 8000 	nop.w
 80017a2:	4601      	mov	r1, r0
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	60ba      	str	r2, [r7, #8]
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dbf0      	blt.n	800179e <_read+0x12>
	}

return len;
 80017bc:	687b      	ldr	r3, [r7, #4]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	return -1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ee:	605a      	str	r2, [r3, #4]
	return 0;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_isatty>:

int _isatty(int file)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
	return 1;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
	return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001838:	4a14      	ldr	r2, [pc, #80]	; (800188c <_sbrk+0x5c>)
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <_sbrk+0x60>)
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <_sbrk+0x64>)
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <_sbrk+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	429a      	cmp	r2, r3
 800185e:	d205      	bcs.n	800186c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <_sbrk+0x6c>)
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a06      	ldr	r2, [pc, #24]	; (8001894 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	20020000 	.word	0x20020000
 8001890:	00000400 	.word	0x00000400
 8001894:	200003cc 	.word	0x200003cc
 8001898:	20016bf8 	.word	0x20016bf8
 800189c:	20016be0 	.word	0x20016be0

080018a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <SystemInit+0x20>)
 80018a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <SystemInit+0x20>)
 80018ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c8:	480d      	ldr	r0, [pc, #52]	; (8001900 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ca:	490e      	ldr	r1, [pc, #56]	; (8001904 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d0:	e002      	b.n	80018d8 <LoopCopyDataInit>

080018d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d6:	3304      	adds	r3, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018dc:	d3f9      	bcc.n	80018d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018e0:	4c0b      	ldr	r4, [pc, #44]	; (8001910 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e4:	e001      	b.n	80018ea <LoopFillZerobss>

080018e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e8:	3204      	adds	r2, #4

080018ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ec:	d3fb      	bcc.n	80018e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ee:	f7ff ffd7 	bl	80018a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f2:	f01d fecb 	bl	801f68c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f6:	f7ff f9fd 	bl	8000cf4 <main>
  bx  lr    
 80018fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001904:	200003b0 	.word	0x200003b0
  ldr r2, =_sidata
 8001908:	08025928 	.word	0x08025928
  ldr r2, =_sbss
 800190c:	200003b0 	.word	0x200003b0
  ldr r4, =_ebss
 8001910:	20016bf4 	.word	0x20016bf4

08001914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC_IRQHandler>
	...

08001918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <HAL_Init+0x40>)
 8001922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_Init+0x40>)
 800192e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_Init+0x40>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001940:	2003      	movs	r0, #3
 8001942:	f000 f8fc 	bl	8001b3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001946:	200f      	movs	r0, #15
 8001948:	f7ff fe60 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800194c:	f7ff fdae 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023c00 	.word	0x40023c00

0800195c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x20>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x24>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_IncTick+0x24>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	2000000c 	.word	0x2000000c
 8001980:	200057e4 	.word	0x200057e4

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	200057e4 	.word	0x200057e4

0800199c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff ffee 	bl	8001984 <HAL_GetTick>
 80019a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d005      	beq.n	80019c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_Delay+0x44>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019c2:	bf00      	nop
 80019c4:	f7ff ffde 	bl	8001984 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d8f7      	bhi.n	80019c4 <HAL_Delay+0x28>
  {
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000000c 	.word	0x2000000c

080019e4 <__NVIC_SetPriorityGrouping>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff4c 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b66:	f7ff ff61 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001b6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	6978      	ldr	r0, [r7, #20]
 8001b72:	f7ff ffb1 	bl	8001ad8 <NVIC_EncodePriority>
 8001b76:	4602      	mov	r2, r0
 8001b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff80 	bl	8001a84 <__NVIC_SetPriority>
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff54 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001bb8:	4baa      	ldr	r3, [pc, #680]	; (8001e64 <HAL_ETH_Init+0x2bc>)
 8001bba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e183      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f007 fc46 	bl	8009474 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	4b9e      	ldr	r3, [pc, #632]	; (8001e68 <HAL_ETH_Init+0x2c0>)
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	4a9d      	ldr	r2, [pc, #628]	; (8001e68 <HAL_ETH_Init+0x2c0>)
 8001bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf8:	4b9b      	ldr	r3, [pc, #620]	; (8001e68 <HAL_ETH_Init+0x2c0>)
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c04:	4b99      	ldr	r3, [pc, #612]	; (8001e6c <HAL_ETH_Init+0x2c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a98      	ldr	r2, [pc, #608]	; (8001e6c <HAL_ETH_Init+0x2c4>)
 8001c0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c0e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c10:	4b96      	ldr	r3, [pc, #600]	; (8001e6c <HAL_ETH_Init+0x2c4>)
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4994      	ldr	r1, [pc, #592]	; (8001e6c <HAL_ETH_Init+0x2c4>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c34:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c36:	f7ff fea5 	bl	8001984 <HAL_GetTick>
 8001c3a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001c3c:	e011      	b.n	8001c62 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001c3e:	f7ff fea1 	bl	8001984 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c4c:	d909      	bls.n	8001c62 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2203      	movs	r2, #3
 8001c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e139      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e4      	bne.n	8001c3e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f023 031c 	bic.w	r3, r3, #28
 8001c82:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c84:	f001 faec 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8001c88:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4a78      	ldr	r2, [pc, #480]	; (8001e70 <HAL_ETH_Init+0x2c8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d908      	bls.n	8001ca4 <HAL_ETH_Init+0xfc>
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4a77      	ldr	r2, [pc, #476]	; (8001e74 <HAL_ETH_Init+0x2cc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d804      	bhi.n	8001ca4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e027      	b.n	8001cf4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	4a73      	ldr	r2, [pc, #460]	; (8001e74 <HAL_ETH_Init+0x2cc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d908      	bls.n	8001cbe <HAL_ETH_Init+0x116>
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	4a6d      	ldr	r2, [pc, #436]	; (8001e64 <HAL_ETH_Init+0x2bc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d204      	bcs.n	8001cbe <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f043 030c 	orr.w	r3, r3, #12
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	e01a      	b.n	8001cf4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4a68      	ldr	r2, [pc, #416]	; (8001e64 <HAL_ETH_Init+0x2bc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d303      	bcc.n	8001cce <HAL_ETH_Init+0x126>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4a6b      	ldr	r2, [pc, #428]	; (8001e78 <HAL_ETH_Init+0x2d0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d911      	bls.n	8001cf2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4a69      	ldr	r2, [pc, #420]	; (8001e78 <HAL_ETH_Init+0x2d0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d908      	bls.n	8001ce8 <HAL_ETH_Init+0x140>
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4a68      	ldr	r2, [pc, #416]	; (8001e7c <HAL_ETH_Init+0x2d4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d804      	bhi.n	8001ce8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e005      	b.n	8001cf4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f043 0310 	orr.w	r3, r3, #16
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	e000      	b.n	8001cf4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001cf2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001cfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d00:	2100      	movs	r1, #0
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fc17 	bl	8002536 <HAL_ETH_WritePHYRegister>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00b      	beq.n	8001d26 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001d12:	6939      	ldr	r1, [r7, #16]
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fdcd 	bl	80028b4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0d7      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001d26:	20ff      	movs	r0, #255	; 0xff
 8001d28:	f7ff fe38 	bl	800199c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80a5 	beq.w	8001e80 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d36:	f7ff fe25 	bl	8001984 <HAL_GetTick>
 8001d3a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	461a      	mov	r2, r3
 8001d42:	2101      	movs	r1, #1
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fb8e 	bl	8002466 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001d4a:	f7ff fe1b 	bl	8001984 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d90f      	bls.n	8001d7c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001d60:	6939      	ldr	r1, [r7, #16]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fda6 	bl	80028b4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0ac      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0da      	beq.n	8001d3c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001d86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fbd2 	bl	8002536 <HAL_ETH_WritePHYRegister>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d9c:	6939      	ldr	r1, [r7, #16]
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fd88 	bl	80028b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001dac:	2301      	movs	r3, #1
 8001dae:	e092      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001db0:	f7ff fde8 	bl	8001984 <HAL_GetTick>
 8001db4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fb51 	bl	8002466 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001dc4:	f7ff fdde 	bl	8001984 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d90f      	bls.n	8001df6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001dda:	6939      	ldr	r1, [r7, #16]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fd69 	bl	80028b4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e06f      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0da      	beq.n	8001db6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	461a      	mov	r2, r3
 8001e06:	2110      	movs	r1, #16
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fb2c 	bl	8002466 <HAL_ETH_ReadPHYRegister>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00b      	beq.n	8001e2c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e18:	6939      	ldr	r1, [r7, #16]
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fd4a 	bl	80028b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e054      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d004      	beq.n	8001e40 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	e002      	b.n	8001e46 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	e035      	b.n	8001ec4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	e030      	b.n	8001ec4 <HAL_ETH_Init+0x31c>
 8001e62:	bf00      	nop
 8001e64:	03938700 	.word	0x03938700
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	01312cff 	.word	0x01312cff
 8001e74:	02160ebf 	.word	0x02160ebf
 8001e78:	05f5e0ff 	.word	0x05f5e0ff
 8001e7c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001e90:	4313      	orrs	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	2100      	movs	r1, #0
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fb4c 	bl	8002536 <HAL_ETH_WritePHYRegister>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ea8:	6939      	ldr	r1, [r7, #16]
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fd02 	bl	80028b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e00c      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001ebc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ec0:	f7ff fd6c 	bl	800199c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001ec4:	6939      	ldr	r1, [r7, #16]
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fcf4 	bl	80028b4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop

08001ee0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_ETH_DMATxDescListInit+0x20>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e052      	b.n	8001fa6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e030      	b.n	8001f7e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	015b      	lsls	r3, r3, #5
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	4413      	add	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f2c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d208      	bcs.n	8001f72 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3301      	adds	r3, #1
 8001f64:	015b      	lsls	r3, r3, #5
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	4413      	add	r3, r2
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	e002      	b.n	8001f78 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3ca      	bcc.n	8001f1c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f90:	3310      	adds	r3, #16
 8001f92:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	371c      	adds	r7, #28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b087      	sub	sp, #28
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ETH_DMARxDescListInit+0x20>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e056      	b.n	8002080 <HAL_ETH_DMARxDescListInit+0xce>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e034      	b.n	8002058 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	015b      	lsls	r3, r3, #5
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ffe:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002006:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	461a      	mov	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3b01      	subs	r3, #1
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	429a      	cmp	r2, r3
 8002038:	d208      	bcs.n	800204c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	015b      	lsls	r3, r3, #5
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	4413      	add	r3, r2
 8002044:	461a      	mov	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	e002      	b.n	8002052 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d3c6      	bcc.n	8001fee <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	330c      	adds	r3, #12
 800206c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_ETH_TransmitFrame+0x24>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e0cd      	b.n	800224c <HAL_ETH_TransmitFrame+0x1c0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0b8      	b.n	800224c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	da09      	bge.n	80020f8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2212      	movs	r2, #18
 80020e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0a9      	b.n	800224c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80020fe:	4293      	cmp	r3, r2
 8002100:	d915      	bls.n	800212e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	4a54      	ldr	r2, [pc, #336]	; (8002258 <HAL_ETH_TransmitFrame+0x1cc>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0a9b      	lsrs	r3, r3, #10
 800210c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4b51      	ldr	r3, [pc, #324]	; (8002258 <HAL_ETH_TransmitFrame+0x1cc>)
 8002112:	fba3 1302 	umull	r1, r3, r3, r2
 8002116:	0a9b      	lsrs	r3, r3, #10
 8002118:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e001      	b.n	8002132 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800212e:	2301      	movs	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d11c      	bne.n	8002172 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002146:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002152:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002162:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	461a      	mov	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002170:	e04b      	b.n	800220a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	e044      	b.n	8002202 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002186:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d107      	bne.n	800219e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800219c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80021a6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d116      	bne.n	80021e0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80021c0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_ETH_TransmitFrame+0x1d0>)
 80021c6:	fb02 f203 	mul.w	r2, r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80021d2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80021de:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021ee:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	461a      	mov	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	3301      	adds	r3, #1
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	429a      	cmp	r2, r3
 8002208:	d3b6      	bcc.n	8002178 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002212:	3314      	adds	r3, #20
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00d      	beq.n	800223a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002226:	3314      	adds	r3, #20
 8002228:	2204      	movs	r2, #4
 800222a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	3304      	adds	r3, #4
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	ac02b00b 	.word	0xac02b00b
 800225c:	fffffa0c 	.word	0xfffffa0c

08002260 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002276:	2302      	movs	r3, #2
 8002278:	e074      	b.n	8002364 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2202      	movs	r2, #2
 8002286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800228a:	e05a      	b.n	8002342 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a0:	d10d      	bne.n	80022be <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	461a      	mov	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
 80022bc:	e041      	b.n	8002342 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	461a      	mov	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
 80022e2:	e02e      	b.n	8002342 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d103      	bne.n	8002306 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002312:	1f1a      	subs	r2, r3, #4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	461a      	mov	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e010      	b.n	8002364 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db02      	blt.n	8002352 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b03      	cmp	r3, #3
 8002350:	d99c      	bls.n	800228c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002380:	3314      	adds	r3, #20
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d112      	bne.n	80023b2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f007 f91f 	bl	80095d0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239a:	3314      	adds	r3, #20
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023b0:	e01b      	b.n	80023ea <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ba:	3314      	adds	r3, #20
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d111      	bne.n	80023ea <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f839 	bl	800243e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	3314      	adds	r3, #20
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f2:	3314      	adds	r3, #20
 80023f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023f8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002402:	3314      	adds	r3, #20
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800240e:	d112      	bne.n	8002436 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f81e 	bl	8002452 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241e:	3314      	adds	r3, #20
 8002420:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002424:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	460b      	mov	r3, r1
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b82      	cmp	r3, #130	; 0x82
 8002486:	d101      	bne.n	800248c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002488:	2302      	movs	r3, #2
 800248a:	e050      	b.n	800252e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2282      	movs	r2, #130	; 0x82
 8002490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f003 031c 	and.w	r3, r3, #28
 80024a2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8a1b      	ldrh	r3, [r3, #16]
 80024a8:	02db      	lsls	r3, r3, #11
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80024b2:	897b      	ldrh	r3, [r7, #10]
 80024b4:	019b      	lsls	r3, r3, #6
 80024b6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f023 0302 	bic.w	r3, r3, #2
 80024c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80024d8:	f7ff fa54 	bl	8001984 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024de:	e015      	b.n	800250c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80024e0:	f7ff fa50 	bl	8001984 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ee:	d309      	bcc.n	8002504 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e014      	b.n	800252e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e4      	bne.n	80024e0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	460b      	mov	r3, r1
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b42      	cmp	r3, #66	; 0x42
 8002556:	d101      	bne.n	800255c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
 800255a:	e04e      	b.n	80025fa <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2242      	movs	r2, #66	; 0x42
 8002560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 031c 	and.w	r3, r3, #28
 8002572:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8a1b      	ldrh	r3, [r3, #16]
 8002578:	02db      	lsls	r3, r3, #11
 800257a:	b29b      	uxth	r3, r3
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002582:	897b      	ldrh	r3, [r7, #10]
 8002584:	019b      	lsls	r3, r3, #6
 8002586:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f043 0302 	orr.w	r3, r3, #2
 8002596:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80025b2:	f7ff f9e7 	bl	8001984 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025b8:	e015      	b.n	80025e6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80025ba:	f7ff f9e3 	bl	8001984 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c8:	d309      	bcc.n	80025de <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e00d      	b.n	80025fa <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e4      	bne.n	80025ba <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_ETH_Start+0x16>
 8002614:	2302      	movs	r3, #2
 8002616:	e01f      	b.n	8002658 <HAL_ETH_Start+0x56>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fb45 	bl	8002cb8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fb7c 	bl	8002d2c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fc13 	bl	8002e60 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fbb0 	bl	8002da0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fbdd 	bl	8002e00 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_ETH_Stop+0x16>
 8002672:	2302      	movs	r3, #2
 8002674:	e01f      	b.n	80026b6 <HAL_ETH_Stop+0x56>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2202      	movs	r2, #2
 8002682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fba2 	bl	8002dd0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fbcf 	bl	8002e30 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fb67 	bl	8002d66 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fbe1 	bl	8002e60 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fb27 	bl	8002cf2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_ETH_ConfigMAC+0x1c>
 80026d8:	2302      	movs	r3, #2
 80026da:	e0e4      	b.n	80028a6 <HAL_ETH_ConfigMAC+0x1e6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80b1 	beq.w	8002856 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4b6c      	ldr	r3, [pc, #432]	; (80028b0 <HAL_ETH_ConfigMAC+0x1f0>)
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800270c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002712:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002718:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800271e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002724:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800272a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002730:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002736:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800273c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002742:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002748:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800274e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002766:	2001      	movs	r0, #1
 8002768:	f7ff f918 	bl	800199c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800277c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002782:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002788:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800278e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002794:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800279a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80027a6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80027a8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80027b2:	2001      	movs	r0, #1
 80027b4:	f7ff f8f2 	bl	800199c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027c8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027d2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	f64f 7341 	movw	r3, #65345	; 0xff41
 80027e2:	4013      	ands	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80027f0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80027f6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80027fc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002802:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002808:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002820:	2001      	movs	r0, #1
 8002822:	f7ff f8bb 	bl	800199c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002846:	2001      	movs	r0, #1
 8002848:	f7ff f8a8 	bl	800199c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	61da      	str	r2, [r3, #28]
 8002854:	e01e      	b.n	8002894 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002864:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002886:	2001      	movs	r0, #1
 8002888:	f7ff f888 	bl	800199c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	ff20810f 	.word	0xff20810f

080028b4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b0b0      	sub	sp, #192	; 0xc0
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028d0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80028e2:	2300      	movs	r3, #0
 80028e4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80028fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028fe:	663b      	str	r3, [r7, #96]	; 0x60
 8002900:	e001      	b.n	8002906 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002910:	2300      	movs	r3, #0
 8002912:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002920:	2340      	movs	r3, #64	; 0x40
 8002922:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800292a:	2300      	movs	r3, #0
 800292c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800294e:	2300      	movs	r3, #0
 8002950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002972:	2300      	movs	r3, #0
 8002974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002978:	2300      	movs	r3, #0
 800297a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002988:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800298c:	4bac      	ldr	r3, [pc, #688]	; (8002c40 <ETH_MACDMAConfig+0x38c>)
 800298e:	4013      	ands	r3, r2
 8002990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002994:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002998:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800299a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800299c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800299e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80029a0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80029a6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80029a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80029aa:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80029ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80029ae:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80029b4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80029b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80029b8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80029ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80029bc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80029be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80029c0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80029c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80029c4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80029c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80029c8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80029ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029dc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7fe ffd7 	bl	800199c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029f6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80029f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80029fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80029fc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80029fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002a00:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002a06:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002a0c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002a0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002a12:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002a18:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002a1c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002a24:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a26:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7fe ffb2 	bl	800199c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a40:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a4a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002a54:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a64:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002a68:	4013      	ands	r3, r2
 8002a6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002a6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a72:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002a74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002a78:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002a7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002a7e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002a80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002a84:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002a8a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002a8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002a90:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002a92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aa4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f7fe ff73 	bl	800199c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002abe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002ac0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002ac4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f7fe ff5e 	bl	800199c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ae8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002af8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002afc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002b0e:	2304      	movs	r3, #4
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b22:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b28:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b32:	2300      	movs	r3, #0
 8002b34:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b3e:	3318      	adds	r3, #24
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <ETH_MACDMAConfig+0x390>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002b52:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002b54:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002b56:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002b58:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002b5a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002b5c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002b5e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002b60:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002b62:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002b64:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002b66:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002b68:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002b6a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002b6e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002b72:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002b74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b86:	3318      	adds	r3, #24
 8002b88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b8c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b96:	3318      	adds	r3, #24
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f7fe fefc 	bl	800199c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bac:	3318      	adds	r3, #24
 8002bae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bb2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002bb8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002bbc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002bc0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002bc4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002bca:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002bce:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bdc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7fe fed5 	bl	800199c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bfa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bfe:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d10f      	bne.n	8002c28 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c10:	331c      	adds	r3, #28
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c24:	331c      	adds	r3, #28
 8002c26:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2100      	movs	r1, #0
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f809 	bl	8002c48 <ETH_MACAddressConfig>
}
 8002c36:	bf00      	nop
 8002c38:	37c0      	adds	r7, #192	; 0xc0
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	ff20810f 	.word	0xff20810f
 8002c44:	f8de3f23 	.word	0xf8de3f23

08002c48 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3305      	adds	r3, #5
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	3204      	adds	r2, #4
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <ETH_MACAddressConfig+0x68>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3303      	adds	r3, #3
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	061a      	lsls	r2, r3, #24
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3301      	adds	r3, #1
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	7812      	ldrb	r2, [r2, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <ETH_MACAddressConfig+0x6c>)
 8002c9a:	4413      	add	r3, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	6013      	str	r3, [r2, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40028040 	.word	0x40028040
 8002cb4:	40028044 	.word	0x40028044

08002cb8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0208 	orr.w	r2, r2, #8
 8002cd2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f000 f8e9 	bl	8002eb4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	601a      	str	r2, [r3, #0]
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0208 	bic.w	r2, r2, #8
 8002d0c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002d16:	2001      	movs	r0, #1
 8002d18:	f000 f8cc 	bl	8002eb4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0204 	orr.w	r2, r2, #4
 8002d46:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002d50:	2001      	movs	r0, #1
 8002d52:	f000 f8af 	bl	8002eb4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0204 	bic.w	r2, r2, #4
 8002d80:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f000 f892 	bl	8002eb4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	601a      	str	r2, [r3, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db0:	3318      	adds	r3, #24
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	601a      	str	r2, [r3, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de0:	3318      	adds	r3, #24
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df0:	3318      	adds	r3, #24
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e10:	3318      	adds	r3, #24
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0202 	orr.w	r2, r2, #2
 8002e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e20:	3318      	adds	r3, #24
 8002e22:	601a      	str	r2, [r3, #0]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e40:	3318      	adds	r3, #24
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0202 	bic.w	r2, r2, #2
 8002e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e50:	3318      	adds	r3, #24
 8002e52:	601a      	str	r2, [r3, #0]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e74:	3318      	adds	r3, #24
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e84:	3318      	adds	r3, #24
 8002e86:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e90:	3318      	adds	r3, #24
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f000 f80c 	bl	8002eb4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	601a      	str	r2, [r3, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <ETH_Delay+0x38>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <ETH_Delay+0x3c>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	0a5b      	lsrs	r3, r3, #9
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002ed0:	bf00      	nop
  } 
  while (Delay --);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1e5a      	subs	r2, r3, #1
 8002ed6:	60fa      	str	r2, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f9      	bne.n	8002ed0 <ETH_Delay+0x1c>
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000008 	.word	0x20000008
 8002ef0:	10624dd3 	.word	0x10624dd3

08002ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	; 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e16b      	b.n	80031e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f10:	2201      	movs	r2, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f040 815a 	bne.w	80031e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d005      	beq.n	8002f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d130      	bne.n	8002fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 0201 	and.w	r2, r3, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d017      	beq.n	8002fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d123      	bne.n	8003038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	08da      	lsrs	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3208      	adds	r2, #8
 8002ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	08da      	lsrs	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3208      	adds	r2, #8
 8003032:	69b9      	ldr	r1, [r7, #24]
 8003034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80b4 	beq.w	80031e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	4b60      	ldr	r3, [pc, #384]	; (8003200 <HAL_GPIO_Init+0x30c>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	4a5f      	ldr	r2, [pc, #380]	; (8003200 <HAL_GPIO_Init+0x30c>)
 8003084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003088:	6453      	str	r3, [r2, #68]	; 0x44
 800308a:	4b5d      	ldr	r3, [pc, #372]	; (8003200 <HAL_GPIO_Init+0x30c>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003096:	4a5b      	ldr	r2, [pc, #364]	; (8003204 <HAL_GPIO_Init+0x310>)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	220f      	movs	r2, #15
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_GPIO_Init+0x314>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02b      	beq.n	800311a <HAL_GPIO_Init+0x226>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a51      	ldr	r2, [pc, #324]	; (800320c <HAL_GPIO_Init+0x318>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d025      	beq.n	8003116 <HAL_GPIO_Init+0x222>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a50      	ldr	r2, [pc, #320]	; (8003210 <HAL_GPIO_Init+0x31c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01f      	beq.n	8003112 <HAL_GPIO_Init+0x21e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4f      	ldr	r2, [pc, #316]	; (8003214 <HAL_GPIO_Init+0x320>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d019      	beq.n	800310e <HAL_GPIO_Init+0x21a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4e      	ldr	r2, [pc, #312]	; (8003218 <HAL_GPIO_Init+0x324>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_GPIO_Init+0x216>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4d      	ldr	r2, [pc, #308]	; (800321c <HAL_GPIO_Init+0x328>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00d      	beq.n	8003106 <HAL_GPIO_Init+0x212>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4c      	ldr	r2, [pc, #304]	; (8003220 <HAL_GPIO_Init+0x32c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d007      	beq.n	8003102 <HAL_GPIO_Init+0x20e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4b      	ldr	r2, [pc, #300]	; (8003224 <HAL_GPIO_Init+0x330>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_GPIO_Init+0x20a>
 80030fa:	2307      	movs	r3, #7
 80030fc:	e00e      	b.n	800311c <HAL_GPIO_Init+0x228>
 80030fe:	2308      	movs	r3, #8
 8003100:	e00c      	b.n	800311c <HAL_GPIO_Init+0x228>
 8003102:	2306      	movs	r3, #6
 8003104:	e00a      	b.n	800311c <HAL_GPIO_Init+0x228>
 8003106:	2305      	movs	r3, #5
 8003108:	e008      	b.n	800311c <HAL_GPIO_Init+0x228>
 800310a:	2304      	movs	r3, #4
 800310c:	e006      	b.n	800311c <HAL_GPIO_Init+0x228>
 800310e:	2303      	movs	r3, #3
 8003110:	e004      	b.n	800311c <HAL_GPIO_Init+0x228>
 8003112:	2302      	movs	r3, #2
 8003114:	e002      	b.n	800311c <HAL_GPIO_Init+0x228>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_GPIO_Init+0x228>
 800311a:	2300      	movs	r3, #0
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	f002 0203 	and.w	r2, r2, #3
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	4093      	lsls	r3, r2
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800312c:	4935      	ldr	r1, [pc, #212]	; (8003204 <HAL_GPIO_Init+0x310>)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	3302      	adds	r3, #2
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800313a:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_GPIO_Init+0x334>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800315e:	4a32      	ldr	r2, [pc, #200]	; (8003228 <HAL_GPIO_Init+0x334>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003164:	4b30      	ldr	r3, [pc, #192]	; (8003228 <HAL_GPIO_Init+0x334>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003188:	4a27      	ldr	r2, [pc, #156]	; (8003228 <HAL_GPIO_Init+0x334>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_GPIO_Init+0x334>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b2:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <HAL_GPIO_Init+0x334>)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_GPIO_Init+0x334>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031dc:	4a12      	ldr	r2, [pc, #72]	; (8003228 <HAL_GPIO_Init+0x334>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3301      	adds	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	f67f ae90 	bls.w	8002f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	40013800 	.word	0x40013800
 8003208:	40020000 	.word	0x40020000
 800320c:	40020400 	.word	0x40020400
 8003210:	40020800 	.word	0x40020800
 8003214:	40020c00 	.word	0x40020c00
 8003218:	40021000 	.word	0x40021000
 800321c:	40021400 	.word	0x40021400
 8003220:	40021800 	.word	0x40021800
 8003224:	40021c00 	.word	0x40021c00
 8003228:	40013c00 	.word	0x40013c00

0800322c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4013      	ands	r3, r2
 8003244:	041a      	lsls	r2, r3, #16
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	43d9      	mvns	r1, r3
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	400b      	ands	r3, r1
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	619a      	str	r2, [r3, #24]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000008 	.word	0x20000008

08003278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800327c:	f7ff fff0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0b5b      	lsrs	r3, r3, #13
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	; (800329c <HAL_RCC_GetPCLK2Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	08025568 	.word	0x08025568

080032a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	220f      	movs	r2, #15
 80032ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032b0:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_RCC_GetClockConfig+0x5c>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0203 	and.w	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_RCC_GetClockConfig+0x5c>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <HAL_RCC_GetClockConfig+0x5c>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_GetClockConfig+0x5c>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	08db      	lsrs	r3, r3, #3
 80032da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032e2:	4b07      	ldr	r3, [pc, #28]	; (8003300 <HAL_RCC_GetClockConfig+0x60>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0207 	and.w	r2, r3, #7
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	601a      	str	r2, [r3, #0]
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	40023c00 	.word	0x40023c00

08003304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e07b      	b.n	800340e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003326:	d009      	beq.n	800333c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
 800332e:	e005      	b.n	800333c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fe f8d4 	bl	8001504 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003372:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	ea42 0103 	orr.w	r1, r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	f003 0104 	and.w	r1, r3, #4
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	f003 0210 	and.w	r2, r3, #16
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e041      	b.n	80034ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fe f8a9 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f000 fafd 	bl	8003a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d001      	beq.n	80034cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e046      	b.n	800355a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a23      	ldr	r2, [pc, #140]	; (8003568 <HAL_TIM_Base_Start+0xb4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d022      	beq.n	8003524 <HAL_TIM_Base_Start+0x70>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d01d      	beq.n	8003524 <HAL_TIM_Base_Start+0x70>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1f      	ldr	r2, [pc, #124]	; (800356c <HAL_TIM_Base_Start+0xb8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d018      	beq.n	8003524 <HAL_TIM_Base_Start+0x70>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1e      	ldr	r2, [pc, #120]	; (8003570 <HAL_TIM_Base_Start+0xbc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <HAL_TIM_Base_Start+0x70>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1c      	ldr	r2, [pc, #112]	; (8003574 <HAL_TIM_Base_Start+0xc0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00e      	beq.n	8003524 <HAL_TIM_Base_Start+0x70>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <HAL_TIM_Base_Start+0xc4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_TIM_Base_Start+0x70>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_TIM_Base_Start+0xc8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_TIM_Base_Start+0x70>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_TIM_Base_Start+0xcc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d111      	bne.n	8003548 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b06      	cmp	r3, #6
 8003534:	d010      	beq.n	8003558 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0201 	orr.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003546:	e007      	b.n	8003558 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40010000 	.word	0x40010000
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40010400 	.word	0x40010400
 800357c:	40014000 	.word	0x40014000
 8003580:	40001800 	.word	0x40001800

08003584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d001      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e04e      	b.n	800363a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_TIM_Base_Start_IT+0xc4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d022      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x80>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c6:	d01d      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x80>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1f      	ldr	r2, [pc, #124]	; (800364c <HAL_TIM_Base_Start_IT+0xc8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d018      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x80>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <HAL_TIM_Base_Start_IT+0xcc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x80>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <HAL_TIM_Base_Start_IT+0xd0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00e      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x80>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1b      	ldr	r2, [pc, #108]	; (8003658 <HAL_TIM_Base_Start_IT+0xd4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x80>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a19      	ldr	r2, [pc, #100]	; (800365c <HAL_TIM_Base_Start_IT+0xd8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x80>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a18      	ldr	r2, [pc, #96]	; (8003660 <HAL_TIM_Base_Start_IT+0xdc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d111      	bne.n	8003628 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b06      	cmp	r3, #6
 8003614:	d010      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	e007      	b.n	8003638 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40010400 	.word	0x40010400
 800365c:	40014000 	.word	0x40014000
 8003660:	40001800 	.word	0x40001800

08003664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	d122      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b02      	cmp	r3, #2
 8003686:	d11b      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0202 	mvn.w	r2, #2
 8003690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f9b5 	bl	8003a16 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f9a7 	bl	8003a02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f9b8 	bl	8003a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d122      	bne.n	8003714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d11b      	bne.n	8003714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0204 	mvn.w	r2, #4
 80036e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f98b 	bl	8003a16 <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f97d 	bl	8003a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f98e 	bl	8003a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b08      	cmp	r3, #8
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0208 	mvn.w	r2, #8
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2204      	movs	r2, #4
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f961 	bl	8003a16 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f953 	bl	8003a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f964 	bl	8003a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b10      	cmp	r3, #16
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b10      	cmp	r3, #16
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0210 	mvn.w	r2, #16
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2208      	movs	r2, #8
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f937 	bl	8003a16 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f929 	bl	8003a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f93a 	bl	8003a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0201 	mvn.w	r2, #1
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fe4a 	bl	800147c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d107      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fae0 	bl	8003dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d10e      	bne.n	8003840 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d107      	bne.n	8003840 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f8ff 	bl	8003a3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b20      	cmp	r3, #32
 800384c:	d10e      	bne.n	800386c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b20      	cmp	r3, #32
 800385a:	d107      	bne.n	800386c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0220 	mvn.w	r2, #32
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 faaa 	bl	8003dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_TIM_ConfigClockSource+0x1c>
 800388c:	2302      	movs	r3, #2
 800388e:	e0b4      	b.n	80039fa <HAL_TIM_ConfigClockSource+0x186>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c8:	d03e      	beq.n	8003948 <HAL_TIM_ConfigClockSource+0xd4>
 80038ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ce:	f200 8087 	bhi.w	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d6:	f000 8086 	beq.w	80039e6 <HAL_TIM_ConfigClockSource+0x172>
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d87f      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b70      	cmp	r3, #112	; 0x70
 80038e2:	d01a      	beq.n	800391a <HAL_TIM_ConfigClockSource+0xa6>
 80038e4:	2b70      	cmp	r3, #112	; 0x70
 80038e6:	d87b      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b60      	cmp	r3, #96	; 0x60
 80038ea:	d050      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x11a>
 80038ec:	2b60      	cmp	r3, #96	; 0x60
 80038ee:	d877      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b50      	cmp	r3, #80	; 0x50
 80038f2:	d03c      	beq.n	800396e <HAL_TIM_ConfigClockSource+0xfa>
 80038f4:	2b50      	cmp	r3, #80	; 0x50
 80038f6:	d873      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d058      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x13a>
 80038fc:	2b40      	cmp	r3, #64	; 0x40
 80038fe:	d86f      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b30      	cmp	r3, #48	; 0x30
 8003902:	d064      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15a>
 8003904:	2b30      	cmp	r3, #48	; 0x30
 8003906:	d86b      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b20      	cmp	r3, #32
 800390a:	d060      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15a>
 800390c:	2b20      	cmp	r3, #32
 800390e:	d867      	bhi.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05c      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15a>
 8003914:	2b10      	cmp	r3, #16
 8003916:	d05a      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x15a>
 8003918:	e062      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6899      	ldr	r1, [r3, #8]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f000 f9ad 	bl	8003c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800393c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	609a      	str	r2, [r3, #8]
      break;
 8003946:	e04f      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6899      	ldr	r1, [r3, #8]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f000 f996 	bl	8003c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800396a:	609a      	str	r2, [r3, #8]
      break;
 800396c:	e03c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	461a      	mov	r2, r3
 800397c:	f000 f90a 	bl	8003b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2150      	movs	r1, #80	; 0x50
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f963 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 800398c:	e02c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	461a      	mov	r2, r3
 800399c:	f000 f929 	bl	8003bf2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2160      	movs	r1, #96	; 0x60
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f953 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 80039ac:	e01c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f000 f8ea 	bl	8003b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2140      	movs	r1, #64	; 0x40
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 f943 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 80039cc:	e00c      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f000 f93a 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 80039de:	e003      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e000      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a40      	ldr	r2, [pc, #256]	; (8003b68 <TIM_Base_SetConfig+0x114>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a72:	d00f      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a3d      	ldr	r2, [pc, #244]	; (8003b6c <TIM_Base_SetConfig+0x118>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a3c      	ldr	r2, [pc, #240]	; (8003b70 <TIM_Base_SetConfig+0x11c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a3b      	ldr	r2, [pc, #236]	; (8003b74 <TIM_Base_SetConfig+0x120>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a3a      	ldr	r2, [pc, #232]	; (8003b78 <TIM_Base_SetConfig+0x124>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d108      	bne.n	8003aa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2f      	ldr	r2, [pc, #188]	; (8003b68 <TIM_Base_SetConfig+0x114>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d02b      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab4:	d027      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <TIM_Base_SetConfig+0x118>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d023      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2b      	ldr	r2, [pc, #172]	; (8003b70 <TIM_Base_SetConfig+0x11c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01f      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <TIM_Base_SetConfig+0x120>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01b      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a29      	ldr	r2, [pc, #164]	; (8003b78 <TIM_Base_SetConfig+0x124>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d017      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a28      	ldr	r2, [pc, #160]	; (8003b7c <TIM_Base_SetConfig+0x128>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a27      	ldr	r2, [pc, #156]	; (8003b80 <TIM_Base_SetConfig+0x12c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00f      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a26      	ldr	r2, [pc, #152]	; (8003b84 <TIM_Base_SetConfig+0x130>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <TIM_Base_SetConfig+0x134>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a24      	ldr	r2, [pc, #144]	; (8003b8c <TIM_Base_SetConfig+0x138>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a23      	ldr	r2, [pc, #140]	; (8003b90 <TIM_Base_SetConfig+0x13c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <TIM_Base_SetConfig+0x114>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_Base_SetConfig+0xf8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a0c      	ldr	r2, [pc, #48]	; (8003b78 <TIM_Base_SetConfig+0x124>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d103      	bne.n	8003b54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	615a      	str	r2, [r3, #20]
}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800
 8003b74:	40000c00 	.word	0x40000c00
 8003b78:	40010400 	.word	0x40010400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800
 8003b88:	40001800 	.word	0x40001800
 8003b8c:	40001c00 	.word	0x40001c00
 8003b90:	40002000 	.word	0x40002000

08003b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f023 0201 	bic.w	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f023 030a 	bic.w	r3, r3, #10
 8003bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b087      	sub	sp, #28
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f023 0210 	bic.w	r2, r3, #16
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	031b      	lsls	r3, r3, #12
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f043 0307 	orr.w	r3, r3, #7
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	021a      	lsls	r2, r3, #8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	609a      	str	r2, [r3, #8]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e05a      	b.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a21      	ldr	r2, [pc, #132]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d022      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2c:	d01d      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d018      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d10c      	bne.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40001800 	.word	0x40001800

08003dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_GPIO_SetPinMode>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	fab3 f383 	clz	r3, r3
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	2103      	movs	r1, #3
 8003e10:	fa01 f303 	lsl.w	r3, r1, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	401a      	ands	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	61bb      	str	r3, [r7, #24]
  return result;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	3724      	adds	r7, #36	; 0x24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <LL_GPIO_SetPinOutputType>:
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	605a      	str	r2, [r3, #4]
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <LL_GPIO_SetPinSpeed>:
{
 8003e76:	b480      	push	{r7}
 8003e78:	b089      	sub	sp, #36	; 0x24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	fa93 f3a3 	rbit	r3, r3
 8003e90:	613b      	str	r3, [r7, #16]
  return result;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	fab3 f383 	clz	r3, r3
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	2103      	movs	r1, #3
 8003e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	61bb      	str	r3, [r7, #24]
  return result;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	fab3 f383 	clz	r3, r3
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	609a      	str	r2, [r3, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	3724      	adds	r7, #36	; 0x24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_GPIO_SetPinPull>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b089      	sub	sp, #36	; 0x24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	613b      	str	r3, [r7, #16]
  return result;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	fab3 f383 	clz	r3, r3
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2103      	movs	r1, #3
 8003efc:	fa01 f303 	lsl.w	r3, r1, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	401a      	ands	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	fa93 f3a3 	rbit	r3, r3
 8003f0e:	61bb      	str	r3, [r7, #24]
  return result;
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	fab3 f383 	clz	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	431a      	orrs	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	60da      	str	r2, [r3, #12]
}
 8003f26:	bf00      	nop
 8003f28:	3724      	adds	r7, #36	; 0x24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <LL_GPIO_SetAFPin_0_7>:
{
 8003f32:	b480      	push	{r7}
 8003f34:	b089      	sub	sp, #36	; 0x24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1a      	ldr	r2, [r3, #32]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	fa93 f3a3 	rbit	r3, r3
 8003f4c:	613b      	str	r3, [r7, #16]
  return result;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	fab3 f383 	clz	r3, r3
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	210f      	movs	r1, #15
 8003f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	401a      	ands	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	61bb      	str	r3, [r7, #24]
  return result;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	fab3 f383 	clz	r3, r3
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	621a      	str	r2, [r3, #32]
}
 8003f84:	bf00      	nop
 8003f86:	3724      	adds	r7, #36	; 0x24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_GPIO_SetAFPin_8_15>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	613b      	str	r3, [r7, #16]
  return result;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	210f      	movs	r1, #15
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	401a      	ands	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	61bb      	str	r3, [r7, #24]
  return result;
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	fab3 f383 	clz	r3, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003fe6:	bf00      	nop
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b088      	sub	sp, #32
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004000:	2300      	movs	r3, #0
 8004002:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	613b      	str	r3, [r7, #16]
  return result;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	fab3 f383 	clz	r3, r3
 8004018:	b2db      	uxtb	r3, r3
 800401a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800401c:	e050      	b.n	80040c0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2101      	movs	r1, #1
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d042      	beq.n	80040ba <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d003      	beq.n	8004044 <LL_GPIO_Init+0x52>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d10d      	bne.n	8004060 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	461a      	mov	r2, r3
 800404a:	69b9      	ldr	r1, [r7, #24]
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff12 	bl	8003e76 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	461a      	mov	r2, r3
 8004058:	69b9      	ldr	r1, [r7, #24]
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fef3 	bl	8003e46 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	461a      	mov	r2, r3
 8004066:	69b9      	ldr	r1, [r7, #24]
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ff33 	bl	8003ed4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d11a      	bne.n	80040ac <LL_GPIO_Init+0xba>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	60bb      	str	r3, [r7, #8]
  return result;
 8004082:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004084:	fab3 f383 	clz	r3, r3
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b07      	cmp	r3, #7
 800408c:	d807      	bhi.n	800409e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	461a      	mov	r2, r3
 8004094:	69b9      	ldr	r1, [r7, #24]
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ff4b 	bl	8003f32 <LL_GPIO_SetAFPin_0_7>
 800409c:	e006      	b.n	80040ac <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	461a      	mov	r2, r3
 80040a4:	69b9      	ldr	r1, [r7, #24]
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ff72 	bl	8003f90 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	461a      	mov	r2, r3
 80040b2:	69b9      	ldr	r1, [r7, #24]
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff fe97 	bl	8003de8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3301      	adds	r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1a7      	bne.n	800401e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <LL_RCC_GetSysClkSource>:
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80040dc:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <LL_RCC_GetSysClkSource+0x18>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 030c 	and.w	r3, r3, #12
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800

080040f4 <LL_RCC_GetAHBPrescaler>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <LL_RCC_GetAHBPrescaler+0x18>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800

08004110 <LL_RCC_GetAPB1Prescaler>:
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800

0800412c <LL_RCC_GetAPB2Prescaler>:
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800

08004148 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <LL_RCC_PLL_GetMainSource+0x18>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800

08004164 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <LL_RCC_PLL_GetN+0x18>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	099b      	lsrs	r3, r3, #6
 800416e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004172:	4618      	mov	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40023800 	.word	0x40023800

08004180 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <LL_RCC_PLL_GetP+0x18>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800

0800419c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <LL_RCC_PLL_GetDivider+0x18>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800

080041b8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80041c0:	f000 f820 	bl	8004204 <RCC_GetSystemClockFreq>
 80041c4:	4602      	mov	r2, r0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f840 	bl	8004254 <RCC_GetHCLKClockFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f84e 	bl	8004280 <RCC_GetPCLK1ClockFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f85a 	bl	80042a8 <RCC_GetPCLK2ClockFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60da      	str	r2, [r3, #12]
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800420e:	f7ff ff63 	bl	80040d8 <LL_RCC_GetSysClkSource>
 8004212:	4603      	mov	r3, r0
 8004214:	2b08      	cmp	r3, #8
 8004216:	d00c      	beq.n	8004232 <RCC_GetSystemClockFreq+0x2e>
 8004218:	2b08      	cmp	r3, #8
 800421a:	d80f      	bhi.n	800423c <RCC_GetSystemClockFreq+0x38>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <RCC_GetSystemClockFreq+0x22>
 8004220:	2b04      	cmp	r3, #4
 8004222:	d003      	beq.n	800422c <RCC_GetSystemClockFreq+0x28>
 8004224:	e00a      	b.n	800423c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <RCC_GetSystemClockFreq+0x48>)
 8004228:	607b      	str	r3, [r7, #4]
      break;
 800422a:	e00a      	b.n	8004242 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800422c:	4b08      	ldr	r3, [pc, #32]	; (8004250 <RCC_GetSystemClockFreq+0x4c>)
 800422e:	607b      	str	r3, [r7, #4]
      break;
 8004230:	e007      	b.n	8004242 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004232:	2008      	movs	r0, #8
 8004234:	f000 f84c 	bl	80042d0 <RCC_PLL_GetFreqDomain_SYS>
 8004238:	6078      	str	r0, [r7, #4]
      break;
 800423a:	e002      	b.n	8004242 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <RCC_GetSystemClockFreq+0x48>)
 800423e:	607b      	str	r3, [r7, #4]
      break;
 8004240:	bf00      	nop
  }

  return frequency;
 8004242:	687b      	ldr	r3, [r7, #4]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	00f42400 	.word	0x00f42400
 8004250:	007a1200 	.word	0x007a1200

08004254 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800425c:	f7ff ff4a 	bl	80040f4 <LL_RCC_GetAHBPrescaler>
 8004260:	4603      	mov	r3, r0
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <RCC_GetHCLKClockFreq+0x28>)
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	40d3      	lsrs	r3, r2
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	08025558 	.word	0x08025558

08004280 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004288:	f7ff ff42 	bl	8004110 <LL_RCC_GetAPB1Prescaler>
 800428c:	4603      	mov	r3, r0
 800428e:	0a9b      	lsrs	r3, r3, #10
 8004290:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <RCC_GetPCLK1ClockFreq+0x24>)
 8004292:	5cd3      	ldrb	r3, [r2, r3]
 8004294:	461a      	mov	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	40d3      	lsrs	r3, r2
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	08025568 	.word	0x08025568

080042a8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80042b0:	f7ff ff3c 	bl	800412c <LL_RCC_GetAPB2Prescaler>
 80042b4:	4603      	mov	r3, r0
 80042b6:	0b5b      	lsrs	r3, r3, #13
 80042b8:	4a04      	ldr	r2, [pc, #16]	; (80042cc <RCC_GetPCLK2ClockFreq+0x24>)
 80042ba:	5cd3      	ldrb	r3, [r2, r3]
 80042bc:	461a      	mov	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	40d3      	lsrs	r3, r2
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	08025568 	.word	0x08025568

080042d0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80042d0:	b590      	push	{r4, r7, lr}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80042e4:	f7ff ff30 	bl	8004148 <LL_RCC_PLL_GetMainSource>
 80042e8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f6:	d003      	beq.n	8004300 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80042f8:	e005      	b.n	8004306 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80042fc:	617b      	str	r3, [r7, #20]
      break;
 80042fe:	e005      	b.n	800430c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004302:	617b      	str	r3, [r7, #20]
      break;
 8004304:	e002      	b.n	800430c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004308:	617b      	str	r3, [r7, #20]
      break;
 800430a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b08      	cmp	r3, #8
 8004310:	d113      	bne.n	800433a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004312:	f7ff ff43 	bl	800419c <LL_RCC_PLL_GetDivider>
 8004316:	4602      	mov	r2, r0
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	fbb3 f4f2 	udiv	r4, r3, r2
 800431e:	f7ff ff21 	bl	8004164 <LL_RCC_PLL_GetN>
 8004322:	4603      	mov	r3, r0
 8004324:	fb03 f404 	mul.w	r4, r3, r4
 8004328:	f7ff ff2a 	bl	8004180 <LL_RCC_PLL_GetP>
 800432c:	4603      	mov	r3, r0
 800432e:	0c1b      	lsrs	r3, r3, #16
 8004330:	3301      	adds	r3, #1
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	fbb4 f3f3 	udiv	r3, r4, r3
 8004338:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800433a:	693b      	ldr	r3, [r7, #16]
}
 800433c:	4618      	mov	r0, r3
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd90      	pop	{r4, r7, pc}
 8004344:	00f42400 	.word	0x00f42400
 8004348:	007a1200 	.word	0x007a1200

0800434c <LL_USART_IsEnabled>:
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800435c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_USART_SetStopBitsLength>:
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	611a      	str	r2, [r3, #16]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <LL_USART_SetHWFlowCtrl>:
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	615a      	str	r2, [r3, #20]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <LL_USART_SetBaudRate>:
{
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	b09f      	sub	sp, #124	; 0x7c
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6778      	str	r0, [r7, #116]	; 0x74
 80043ca:	6739      	str	r1, [r7, #112]	; 0x70
 80043cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043ce:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80043d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d6:	f040 80bc 	bne.w	8004552 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80043da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043dc:	461c      	mov	r4, r3
 80043de:	f04f 0500 	mov.w	r5, #0
 80043e2:	4622      	mov	r2, r4
 80043e4:	462b      	mov	r3, r5
 80043e6:	eb12 0a02 	adds.w	sl, r2, r2
 80043ea:	eb43 0b03 	adc.w	fp, r3, r3
 80043ee:	4652      	mov	r2, sl
 80043f0:	465b      	mov	r3, fp
 80043f2:	1912      	adds	r2, r2, r4
 80043f4:	eb45 0303 	adc.w	r3, r5, r3
 80043f8:	f04f 0000 	mov.w	r0, #0
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	00d9      	lsls	r1, r3, #3
 8004402:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004406:	00d0      	lsls	r0, r2, #3
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	1911      	adds	r1, r2, r4
 800440e:	6639      	str	r1, [r7, #96]	; 0x60
 8004410:	416b      	adcs	r3, r5
 8004412:	667b      	str	r3, [r7, #100]	; 0x64
 8004414:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004416:	461a      	mov	r2, r3
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	1891      	adds	r1, r2, r2
 800441e:	6339      	str	r1, [r7, #48]	; 0x30
 8004420:	415b      	adcs	r3, r3
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
 8004424:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004428:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800442c:	f7fb ff28 	bl	8000280 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4ba9      	ldr	r3, [pc, #676]	; (80046dc <LL_USART_SetBaudRate+0x31c>)
 8004436:	fba3 2302 	umull	r2, r3, r3, r2
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	b29b      	uxth	r3, r3
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	b29e      	uxth	r6, r3
 8004442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004444:	461c      	mov	r4, r3
 8004446:	f04f 0500 	mov.w	r5, #0
 800444a:	4622      	mov	r2, r4
 800444c:	462b      	mov	r3, r5
 800444e:	1891      	adds	r1, r2, r2
 8004450:	62b9      	str	r1, [r7, #40]	; 0x28
 8004452:	415b      	adcs	r3, r3
 8004454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004456:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800445a:	1912      	adds	r2, r2, r4
 800445c:	eb45 0303 	adc.w	r3, r5, r3
 8004460:	f04f 0000 	mov.w	r0, #0
 8004464:	f04f 0100 	mov.w	r1, #0
 8004468:	00d9      	lsls	r1, r3, #3
 800446a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800446e:	00d0      	lsls	r0, r2, #3
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	1911      	adds	r1, r2, r4
 8004476:	65b9      	str	r1, [r7, #88]	; 0x58
 8004478:	416b      	adcs	r3, r5
 800447a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800447c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800447e:	461a      	mov	r2, r3
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	1891      	adds	r1, r2, r2
 8004486:	6239      	str	r1, [r7, #32]
 8004488:	415b      	adcs	r3, r3
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
 800448c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004490:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004494:	f7fb fef4 	bl	8000280 <__aeabi_uldivmod>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4b8f      	ldr	r3, [pc, #572]	; (80046dc <LL_USART_SetBaudRate+0x31c>)
 800449e:	fba3 1302 	umull	r1, r3, r3, r2
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	2164      	movs	r1, #100	; 0x64
 80044a6:	fb01 f303 	mul.w	r3, r1, r3
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	3332      	adds	r3, #50	; 0x32
 80044b0:	4a8a      	ldr	r2, [pc, #552]	; (80046dc <LL_USART_SetBaudRate+0x31c>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	4433      	add	r3, r6
 80044c6:	b29e      	uxth	r6, r3
 80044c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ca:	4618      	mov	r0, r3
 80044cc:	f04f 0100 	mov.w	r1, #0
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	1894      	adds	r4, r2, r2
 80044d6:	61bc      	str	r4, [r7, #24]
 80044d8:	415b      	adcs	r3, r3
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044e0:	1812      	adds	r2, r2, r0
 80044e2:	eb41 0303 	adc.w	r3, r1, r3
 80044e6:	f04f 0400 	mov.w	r4, #0
 80044ea:	f04f 0500 	mov.w	r5, #0
 80044ee:	00dd      	lsls	r5, r3, #3
 80044f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044f4:	00d4      	lsls	r4, r2, #3
 80044f6:	4622      	mov	r2, r4
 80044f8:	462b      	mov	r3, r5
 80044fa:	1814      	adds	r4, r2, r0
 80044fc:	653c      	str	r4, [r7, #80]	; 0x50
 80044fe:	414b      	adcs	r3, r1
 8004500:	657b      	str	r3, [r7, #84]	; 0x54
 8004502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004504:	461a      	mov	r2, r3
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	1891      	adds	r1, r2, r2
 800450c:	6139      	str	r1, [r7, #16]
 800450e:	415b      	adcs	r3, r3
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004516:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800451a:	f7fb feb1 	bl	8000280 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4b6e      	ldr	r3, [pc, #440]	; (80046dc <LL_USART_SetBaudRate+0x31c>)
 8004524:	fba3 1302 	umull	r1, r3, r3, r2
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	2164      	movs	r1, #100	; 0x64
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	3332      	adds	r3, #50	; 0x32
 8004536:	4a69      	ldr	r2, [pc, #420]	; (80046dc <LL_USART_SetBaudRate+0x31c>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	b29b      	uxth	r3, r3
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	b29b      	uxth	r3, r3
 8004546:	4433      	add	r3, r6
 8004548:	b29b      	uxth	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800454e:	609a      	str	r2, [r3, #8]
}
 8004550:	e0be      	b.n	80046d0 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004554:	461c      	mov	r4, r3
 8004556:	f04f 0500 	mov.w	r5, #0
 800455a:	4622      	mov	r2, r4
 800455c:	462b      	mov	r3, r5
 800455e:	eb12 0802 	adds.w	r8, r2, r2
 8004562:	eb43 0903 	adc.w	r9, r3, r3
 8004566:	4642      	mov	r2, r8
 8004568:	464b      	mov	r3, r9
 800456a:	1912      	adds	r2, r2, r4
 800456c:	eb45 0303 	adc.w	r3, r5, r3
 8004570:	f04f 0000 	mov.w	r0, #0
 8004574:	f04f 0100 	mov.w	r1, #0
 8004578:	00d9      	lsls	r1, r3, #3
 800457a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800457e:	00d0      	lsls	r0, r2, #3
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	1911      	adds	r1, r2, r4
 8004586:	64b9      	str	r1, [r7, #72]	; 0x48
 8004588:	416b      	adcs	r3, r5
 800458a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800458c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800458e:	4618      	mov	r0, r3
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	008b      	lsls	r3, r1, #2
 800459e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045a2:	0082      	lsls	r2, r0, #2
 80045a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80045a8:	f7fb fe6a 	bl	8000280 <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4b4a      	ldr	r3, [pc, #296]	; (80046dc <LL_USART_SetBaudRate+0x31c>)
 80045b2:	fba3 2302 	umull	r2, r3, r3, r2
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	b29e      	uxth	r6, r3
 80045be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c0:	4618      	mov	r0, r3
 80045c2:	f04f 0100 	mov.w	r1, #0
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	1894      	adds	r4, r2, r2
 80045cc:	60bc      	str	r4, [r7, #8]
 80045ce:	415b      	adcs	r3, r3
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045d6:	1812      	adds	r2, r2, r0
 80045d8:	eb41 0303 	adc.w	r3, r1, r3
 80045dc:	f04f 0400 	mov.w	r4, #0
 80045e0:	f04f 0500 	mov.w	r5, #0
 80045e4:	00dd      	lsls	r5, r3, #3
 80045e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045ea:	00d4      	lsls	r4, r2, #3
 80045ec:	4622      	mov	r2, r4
 80045ee:	462b      	mov	r3, r5
 80045f0:	1814      	adds	r4, r2, r0
 80045f2:	643c      	str	r4, [r7, #64]	; 0x40
 80045f4:	414b      	adcs	r3, r1
 80045f6:	647b      	str	r3, [r7, #68]	; 0x44
 80045f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045fa:	4618      	mov	r0, r3
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	008b      	lsls	r3, r1, #2
 800460a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800460e:	0082      	lsls	r2, r0, #2
 8004610:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004614:	f7fb fe34 	bl	8000280 <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4b2f      	ldr	r3, [pc, #188]	; (80046dc <LL_USART_SetBaudRate+0x31c>)
 800461e:	fba3 1302 	umull	r1, r3, r3, r2
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	2164      	movs	r1, #100	; 0x64
 8004626:	fb01 f303 	mul.w	r3, r1, r3
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	3332      	adds	r3, #50	; 0x32
 8004630:	4a2a      	ldr	r2, [pc, #168]	; (80046dc <LL_USART_SetBaudRate+0x31c>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	b29b      	uxth	r3, r3
 800463a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800463e:	b29b      	uxth	r3, r3
 8004640:	4433      	add	r3, r6
 8004642:	b29e      	uxth	r6, r3
 8004644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004646:	4618      	mov	r0, r3
 8004648:	f04f 0100 	mov.w	r1, #0
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	1894      	adds	r4, r2, r2
 8004652:	603c      	str	r4, [r7, #0]
 8004654:	415b      	adcs	r3, r3
 8004656:	607b      	str	r3, [r7, #4]
 8004658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800465c:	1812      	adds	r2, r2, r0
 800465e:	eb41 0303 	adc.w	r3, r1, r3
 8004662:	f04f 0400 	mov.w	r4, #0
 8004666:	f04f 0500 	mov.w	r5, #0
 800466a:	00dd      	lsls	r5, r3, #3
 800466c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004670:	00d4      	lsls	r4, r2, #3
 8004672:	4622      	mov	r2, r4
 8004674:	462b      	mov	r3, r5
 8004676:	1814      	adds	r4, r2, r0
 8004678:	63bc      	str	r4, [r7, #56]	; 0x38
 800467a:	414b      	adcs	r3, r1
 800467c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800467e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004680:	4618      	mov	r0, r3
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	008b      	lsls	r3, r1, #2
 8004690:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004694:	0082      	lsls	r2, r0, #2
 8004696:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800469a:	f7fb fdf1 	bl	8000280 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <LL_USART_SetBaudRate+0x31c>)
 80046a4:	fba3 1302 	umull	r1, r3, r3, r2
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	2164      	movs	r1, #100	; 0x64
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	3332      	adds	r3, #50	; 0x32
 80046b6:	4a09      	ldr	r2, [pc, #36]	; (80046dc <LL_USART_SetBaudRate+0x31c>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	4433      	add	r3, r6
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ce:	609a      	str	r2, [r3, #8]
}
 80046d0:	bf00      	nop
 80046d2:	377c      	adds	r7, #124	; 0x7c
 80046d4:	46bd      	mov	sp, r7
 80046d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046da:	bf00      	nop
 80046dc:	51eb851f 	.word	0x51eb851f

080046e0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff fe2a 	bl	800434c <LL_USART_IsEnabled>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d15e      	bne.n	80047bc <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004706:	f023 030c 	bic.w	r3, r3, #12
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	6851      	ldr	r1, [r2, #4]
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	68d2      	ldr	r2, [r2, #12]
 8004712:	4311      	orrs	r1, r2
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	6912      	ldr	r2, [r2, #16]
 8004718:	4311      	orrs	r1, r2
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	6992      	ldr	r2, [r2, #24]
 800471e:	430a      	orrs	r2, r1
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	4619      	mov	r1, r3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff fe21 	bl	8004374 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff fe2e 	bl	800439a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800473e:	f107 0308 	add.w	r3, r7, #8
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fd38 	bl	80041b8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <LL_USART_Init+0xe8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d102      	bne.n	8004756 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e021      	b.n	800479a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <LL_USART_Init+0xec>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d102      	bne.n	8004764 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	e01a      	b.n	800479a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a1a      	ldr	r2, [pc, #104]	; (80047d0 <LL_USART_Init+0xf0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d102      	bne.n	8004772 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	e013      	b.n	800479a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <LL_USART_Init+0xf4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d102      	bne.n	8004780 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	e00c      	b.n	800479a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <LL_USART_Init+0xf8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d102      	bne.n	800478e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	e005      	b.n	800479a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a12      	ldr	r2, [pc, #72]	; (80047dc <LL_USART_Init+0xfc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d101      	bne.n	800479a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00d      	beq.n	80047bc <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69b9      	ldr	r1, [r7, #24]
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff fe02 	bl	80043c0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80047bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40011000 	.word	0x40011000
 80047cc:	40004400 	.word	0x40004400
 80047d0:	40004800 	.word	0x40004800
 80047d4:	40011400 	.word	0x40011400
 80047d8:	40004c00 	.word	0x40004c00
 80047dc:	40005000 	.word	0x40005000

080047e0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80047e8:	4a04      	ldr	r2, [pc, #16]	; (80047fc <LL_SetSystemCoreClock+0x1c>)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6013      	str	r3, [r2, #0]
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000008 	.word	0x20000008

08004800 <AES_Generate_Rand_Key>:
#include <AES_128.h>

uint8_t AES128key[AES128_KEY_LEN];

//generate new key for new connect
void AES_Generate_Rand_Key() {
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
	int i;
	srand(time(NULL));
 8004806:	2000      	movs	r0, #0
 8004808:	f01b fa6e 	bl	801fce8 <time>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4613      	mov	r3, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f01b f8f8 	bl	801fa08 <srand>
	for(i = 0; i < AES128_KEY_LEN; i++) {
 8004818:	2300      	movs	r3, #0
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	e00b      	b.n	8004836 <AES_Generate_Rand_Key+0x36>
		AES128key[i] = (uint8_t)rand();
 800481e:	f01b f921 	bl	801fa64 <rand>
 8004822:	4603      	mov	r3, r0
 8004824:	b2d9      	uxtb	r1, r3
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <AES_Generate_Rand_Key+0x48>)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	460a      	mov	r2, r1
 800482e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < AES128_KEY_LEN; i++) {
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3301      	adds	r3, #1
 8004834:	607b      	str	r3, [r7, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b0f      	cmp	r3, #15
 800483a:	ddf0      	ble.n	800481e <AES_Generate_Rand_Key+0x1e>
	}
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	200057e8 	.word	0x200057e8

0800484c <AES_Get_Key>:

uint8_t* AES_Get_Key() {return AES128key;}
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
 8004850:	4b02      	ldr	r3, [pc, #8]	; (800485c <AES_Get_Key+0x10>)
 8004852:	4618      	mov	r0, r3
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	200057e8 	.word	0x200057e8

08004860 <KeyExpansionCore>:
   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

void KeyExpansionCore(uint8_t* in, uint8_t i)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
	// Rotate left
	uint32_t* q = (uint32_t*)in; //uint8_t* q =in;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60fb      	str	r3, [r7, #12]
	*q = (*q >> 8) | ((*q & 0xff) << 24);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	ea4f 2233 	mov.w	r2, r3, ror #8
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	601a      	str	r2, [r3, #0]
	// s-box four bytes
	in[0] = s_box[in[0]];	 in[1] = s_box[in[1]];
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <KeyExpansionCore+0x80>)
 8004884:	5c9a      	ldrb	r2, [r3, r2]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3301      	adds	r3, #1
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	4619      	mov	r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3301      	adds	r3, #1
 8004896:	4a12      	ldr	r2, [pc, #72]	; (80048e0 <KeyExpansionCore+0x80>)
 8004898:	5c52      	ldrb	r2, [r2, r1]
 800489a:	701a      	strb	r2, [r3, #0]
	in[2] = s_box[in[2]];	 in[3] = s_box[in[3]];
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3302      	adds	r3, #2
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3302      	adds	r3, #2
 80048a8:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <KeyExpansionCore+0x80>)
 80048aa:	5c52      	ldrb	r2, [r2, r1]
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3303      	adds	r3, #3
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	4619      	mov	r1, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3303      	adds	r3, #3
 80048ba:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <KeyExpansionCore+0x80>)
 80048bc:	5c52      	ldrb	r2, [r2, r1]
 80048be:	701a      	strb	r2, [r3, #0]
	// Rcon
	in[0] ^= rcon[i];
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	781a      	ldrb	r2, [r3, #0]
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	4907      	ldr	r1, [pc, #28]	; (80048e4 <KeyExpansionCore+0x84>)
 80048c8:	5ccb      	ldrb	r3, [r1, r3]
 80048ca:	4053      	eors	r3, r2
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	701a      	strb	r2, [r3, #0]
}
 80048d2:	bf00      	nop
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	2000003c 	.word	0x2000003c
 80048e4:	20000010 	.word	0x20000010

080048e8 <KeyExpansion>:

void KeyExpansion(uint8_t* inputKey, uint8_t* expandedKeys)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	// The first 16 bytes are the original key:
	for (int i = 0; i < 16; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	e00a      	b.n	800490e <KeyExpansion+0x26>
		expandedKeys[i] = inputKey[i];
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	441a      	add	r2, r3
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	6839      	ldr	r1, [r7, #0]
 8004902:	440b      	add	r3, r1
 8004904:	7812      	ldrb	r2, [r2, #0]
 8004906:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	3301      	adds	r3, #1
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b0f      	cmp	r3, #15
 8004912:	ddf1      	ble.n	80048f8 <KeyExpansion+0x10>
	//Variables:
	int bytesGenerated = 16; // We've generated 16 bytes so far
 8004914:	2310      	movs	r3, #16
 8004916:	61bb      	str	r3, [r7, #24]
	int rconIteration = 0;  // Rcon Iteration begins at 1
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
	uint8_t temp[4]; // Temporary storage for core

	while (bytesGenerated < 176)
 800491c:	e042      	b.n	80049a4 <KeyExpansion+0xbc>
	{
		// Read 4 bytes for the core
		for (int i = 0; i < 4; i++)
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	e00f      	b.n	8004944 <KeyExpansion+0x5c>
			temp[i] = expandedKeys[i + bytesGenerated - 4];
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	4413      	add	r3, r2
 800492a:	3b04      	subs	r3, #4
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	4413      	add	r3, r2
 8004930:	7819      	ldrb	r1, [r3, #0]
 8004932:	f107 0208 	add.w	r2, r7, #8
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4413      	add	r3, r2
 800493a:	460a      	mov	r2, r1
 800493c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	3301      	adds	r3, #1
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b03      	cmp	r3, #3
 8004948:	ddec      	ble.n	8004924 <KeyExpansion+0x3c>
		//Perform the core once for each 16 byte key:
		if (bytesGenerated % 16 == 0)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <KeyExpansion+0x82>
		{
			KeyExpansionCore(temp, rconIteration);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff ff7e 	bl	8004860 <KeyExpansionCore>
			rconIteration++;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	3301      	adds	r3, #1
 8004968:	617b      	str	r3, [r7, #20]
		}
		//XOR temp with [bytesGenerates-16], and store in expandedKeys:
		for (uint8_t a = 0; a < 4; a++)
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
 800496e:	e016      	b.n	800499e <KeyExpansion+0xb6>
		{
			expandedKeys[bytesGenerated] =
				expandedKeys[bytesGenerated - 16] ^ temp[a];
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	3b10      	subs	r3, #16
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	4413      	add	r3, r2
 8004978:	7819      	ldrb	r1, [r3, #0]
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	f107 0220 	add.w	r2, r7, #32
 8004980:	4413      	add	r3, r2
 8004982:	f813 2c18 	ldrb.w	r2, [r3, #-24]
			expandedKeys[bytesGenerated] =
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	6838      	ldr	r0, [r7, #0]
 800498a:	4403      	add	r3, r0
 800498c:	404a      	eors	r2, r1
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
			bytesGenerated++;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	3301      	adds	r3, #1
 8004996:	61bb      	str	r3, [r7, #24]
		for (uint8_t a = 0; a < 4; a++)
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	3301      	adds	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d9e5      	bls.n	8004970 <KeyExpansion+0x88>
	while (bytesGenerated < 176)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2baf      	cmp	r3, #175	; 0xaf
 80049a8:	ddb9      	ble.n	800491e <KeyExpansion+0x36>
		}
	}
}
 80049aa:	bf00      	nop
 80049ac:	bf00      	nop
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <InvSubBytes>:
{
	for (int i = 0; i < 16; i++)
		state[i] = s_box[state[i]];
}
void InvSubBytes(uint8_t* state)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 16; i++)
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e00d      	b.n	80049de <InvSubBytes+0x2a>
		state[i] = Invs_box[state[i]];
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4413      	add	r3, r2
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	4619      	mov	r1, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	4a08      	ldr	r2, [pc, #32]	; (80049f4 <InvSubBytes+0x40>)
 80049d4:	5c52      	ldrb	r2, [r2, r1]
 80049d6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3301      	adds	r3, #1
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b0f      	cmp	r3, #15
 80049e2:	ddee      	ble.n	80049c2 <InvSubBytes+0xe>
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	2000013c 	.word	0x2000013c

080049f8 <InvShiftRows>:
		temp[i] = state[SR_box[i]];
	for (int i = 0; i < 16; i++)
		state[i] = temp[i];
}
void InvShiftRows(uint8_t* state)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b089      	sub	sp, #36	; 0x24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	uint8_t temp[16];
	for (int i = 0; i < 16; i++)
 8004a00:	2300      	movs	r3, #0
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	e010      	b.n	8004a28 <InvShiftRows+0x30>
		temp[i] = state[InvSR_box[i]];
 8004a06:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <InvShiftRows+0x68>)
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4413      	add	r3, r2
 8004a14:	7819      	ldrb	r1, [r3, #0]
 8004a16:	f107 0208 	add.w	r2, r7, #8
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	460a      	mov	r2, r1
 8004a20:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3301      	adds	r3, #1
 8004a26:	61fb      	str	r3, [r7, #28]
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b0f      	cmp	r3, #15
 8004a2c:	ddeb      	ble.n	8004a06 <InvShiftRows+0xe>
	for (int i = 0; i < 16; i++)
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	e00b      	b.n	8004a4c <InvShiftRows+0x54>
		state[i] = temp[i];
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f107 0108 	add.w	r1, r7, #8
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	440a      	add	r2, r1
 8004a42:	7812      	ldrb	r2, [r2, #0]
 8004a44:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	ddf0      	ble.n	8004a34 <InvShiftRows+0x3c>
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	3724      	adds	r7, #36	; 0x24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	2000001c 	.word	0x2000001c

08004a64 <mulGF>:

uint8_t mulGF(uint8_t i, uint8_t Mix) // multiple in GF 2^8
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	460a      	mov	r2, r1
 8004a6e:	71fb      	strb	r3, [r7, #7]
 8004a70:	4613      	mov	r3, r2
 8004a72:	71bb      	strb	r3, [r7, #6]
	uint16_t a = i;
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	81fb      	strh	r3, [r7, #14]
	if (Mix == 1)  return a;						  //mul 1  0001
 8004a78:	79bb      	ldrb	r3, [r7, #6]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d102      	bne.n	8004a84 <mulGF+0x20>
 8004a7e:	89fb      	ldrh	r3, [r7, #14]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	e076      	b.n	8004b72 <mulGF+0x10e>
	if (Mix == 3)  a = (i << 1) ^ i;				  //mul 3  0011
 8004a84:	79bb      	ldrb	r3, [r7, #6]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d107      	bne.n	8004a9a <mulGF+0x36>
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	b21a      	sxth	r2, r3
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	b21b      	sxth	r3, r3
 8004a94:	4053      	eors	r3, r2
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	81fb      	strh	r3, [r7, #14]
	if (Mix == 2)  a = (i << 1);					  //mul 2  0010
 8004a9a:	79bb      	ldrb	r3, [r7, #6]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d103      	bne.n	8004aa8 <mulGF+0x44>
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	81fb      	strh	r3, [r7, #14]
	if (Mix == 9)  a = (i << 3) ^ i;				  //mul 9  1001
 8004aa8:	79bb      	ldrb	r3, [r7, #6]
 8004aaa:	2b09      	cmp	r3, #9
 8004aac:	d107      	bne.n	8004abe <mulGF+0x5a>
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	b21a      	sxth	r2, r3
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	b21b      	sxth	r3, r3
 8004ab8:	4053      	eors	r3, r2
 8004aba:	b21b      	sxth	r3, r3
 8004abc:	81fb      	strh	r3, [r7, #14]
	if (Mix == 11) a = (i << 3) ^ (i << 1) ^ i;		  //mul 11 1011
 8004abe:	79bb      	ldrb	r3, [r7, #6]
 8004ac0:	2b0b      	cmp	r3, #11
 8004ac2:	d10c      	bne.n	8004ade <mulGF+0x7a>
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	b21a      	sxth	r2, r3
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	b21b      	sxth	r3, r3
 8004ad0:	4053      	eors	r3, r2
 8004ad2:	b21a      	sxth	r2, r3
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	b21b      	sxth	r3, r3
 8004ad8:	4053      	eors	r3, r2
 8004ada:	b21b      	sxth	r3, r3
 8004adc:	81fb      	strh	r3, [r7, #14]
	if (Mix == 13) a = (i << 3) ^ (i << 2) ^ i;		  //mul 13 1101
 8004ade:	79bb      	ldrb	r3, [r7, #6]
 8004ae0:	2b0d      	cmp	r3, #13
 8004ae2:	d10c      	bne.n	8004afe <mulGF+0x9a>
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	b21a      	sxth	r2, r3
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	b21b      	sxth	r3, r3
 8004af0:	4053      	eors	r3, r2
 8004af2:	b21a      	sxth	r2, r3
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	b21b      	sxth	r3, r3
 8004af8:	4053      	eors	r3, r2
 8004afa:	b21b      	sxth	r3, r3
 8004afc:	81fb      	strh	r3, [r7, #14]
	if (Mix == 14) a = (i << 3) ^ (i << 2) ^ (i << 1);//mul 14 1110
 8004afe:	79bb      	ldrb	r3, [r7, #6]
 8004b00:	2b0e      	cmp	r3, #14
 8004b02:	d10d      	bne.n	8004b20 <mulGF+0xbc>
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	b21a      	sxth	r2, r3
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	b21b      	sxth	r3, r3
 8004b10:	4053      	eors	r3, r2
 8004b12:	b21a      	sxth	r2, r3
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	b21b      	sxth	r3, r3
 8004b1a:	4053      	eors	r3, r2
 8004b1c:	b21b      	sxth	r3, r3
 8004b1e:	81fb      	strh	r3, [r7, #14]
	int k = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60bb      	str	r3, [r7, #8]
	while (a > 0xff)
 8004b24:	e020      	b.n	8004b68 <mulGF+0x104>
	{
		k = a / 0x100; // 1 0000  0000
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	0a1b      	lsrs	r3, r3, #8
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	60bb      	str	r3, [r7, #8]
		if (k >= 4) k = 4;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	dd01      	ble.n	8004b38 <mulGF+0xd4>
 8004b34:	2304      	movs	r3, #4
 8004b36:	60bb      	str	r3, [r7, #8]
		if (k >= 2 && k < 4) k = 2;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	dd04      	ble.n	8004b48 <mulGF+0xe4>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	dc01      	bgt.n	8004b48 <mulGF+0xe4>
 8004b44:	2302      	movs	r3, #2
 8004b46:	60bb      	str	r3, [r7, #8]
		a ^= (k * 0x11B); // 1 0001 1011: x^8 + x^4 + x^3 + x + 1
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	00d2      	lsls	r2, r2, #3
 8004b50:	441a      	add	r2, r3
 8004b52:	00d2      	lsls	r2, r2, #3
 8004b54:	1ad2      	subs	r2, r2, r3
 8004b56:	0092      	lsls	r2, r2, #2
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	b21a      	sxth	r2, r3
 8004b5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b62:	4053      	eors	r3, r2
 8004b64:	b21b      	sxth	r3, r3
 8004b66:	81fb      	strh	r3, [r7, #14]
	while (a > 0xff)
 8004b68:	89fb      	ldrh	r3, [r7, #14]
 8004b6a:	2bff      	cmp	r3, #255	; 0xff
 8004b6c:	d8db      	bhi.n	8004b26 <mulGF+0xc2>
	}
	return a;
 8004b6e:	89fb      	ldrh	r3, [r7, #14]
 8004b70:	b2db      	uxtb	r3, r3
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <InvMixColumns>:
	}
	for (int i = 0; i < 16; i++)
		state[i] = temp[i];
}
void InvMixColumns(uint8_t* state)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	; 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	uint8_t temp[16];
	uint8_t n = 0, k = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < 16; i++)
 8004b94:	2300      	movs	r3, #0
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b98:	e055      	b.n	8004c46 <InvMixColumns+0xc6>
	{
		if (i == 4) { n = 4;  k = 0; }
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d105      	bne.n	8004bac <InvMixColumns+0x2c>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if (i == 8) { n = 8;  k = 0; }
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d105      	bne.n	8004bbe <InvMixColumns+0x3e>
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if (i == 12) { n = 12; k = 0; }
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	2b0c      	cmp	r3, #12
 8004bc2:	d105      	bne.n	8004bd0 <InvMixColumns+0x50>
 8004bc4:	230c      	movs	r3, #12
 8004bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		uint8_t tempXor[4];
		for (int j = 0; j < 4; j++)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd4:	e01c      	b.n	8004c10 <InvMixColumns+0x90>
		{
			tempXor[j] = mulGF(state[j + n], InvMix[j + k * 4]);
 8004bd6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	4413      	add	r3, r2
 8004bde:	461a      	mov	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4413      	add	r3, r2
 8004be4:	7818      	ldrb	r0, [r3, #0]
 8004be6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bea:	009a      	lsls	r2, r3, #2
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	4413      	add	r3, r2
 8004bf0:	4a22      	ldr	r2, [pc, #136]	; (8004c7c <InvMixColumns+0xfc>)
 8004bf2:	5cd3      	ldrb	r3, [r2, r3]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	f7ff ff35 	bl	8004a64 <mulGF>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f107 020c 	add.w	r2, r7, #12
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	4413      	add	r3, r2
 8004c06:	460a      	mov	r2, r1
 8004c08:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++)
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	dddf      	ble.n	8004bd6 <InvMixColumns+0x56>
		}
		temp[i] = tempXor[0] ^ tempXor[1] ^ tempXor[2] ^ tempXor[3];
 8004c16:	7b3a      	ldrb	r2, [r7, #12]
 8004c18:	7b7b      	ldrb	r3, [r7, #13]
 8004c1a:	4053      	eors	r3, r2
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	7bbb      	ldrb	r3, [r7, #14]
 8004c20:	4053      	eors	r3, r2
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	4053      	eors	r3, r2
 8004c28:	b2d9      	uxtb	r1, r3
 8004c2a:	f107 0210 	add.w	r2, r7, #16
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	4413      	add	r3, r2
 8004c32:	460a      	mov	r2, r1
 8004c34:	701a      	strb	r2, [r3, #0]
		k++;
 8004c36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < 16; i++)
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	3301      	adds	r3, #1
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	2b0f      	cmp	r3, #15
 8004c4a:	dda6      	ble.n	8004b9a <InvMixColumns+0x1a>
	}
	for (int i = 0; i < 16; i++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	623b      	str	r3, [r7, #32]
 8004c50:	e00b      	b.n	8004c6a <InvMixColumns+0xea>
		state[i] = temp[i];
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	4413      	add	r3, r2
 8004c58:	f107 0110 	add.w	r1, r7, #16
 8004c5c:	6a3a      	ldr	r2, [r7, #32]
 8004c5e:	440a      	add	r2, r1
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	3301      	adds	r3, #1
 8004c68:	623b      	str	r3, [r7, #32]
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	2b0f      	cmp	r3, #15
 8004c6e:	ddf0      	ble.n	8004c52 <InvMixColumns+0xd2>
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	3730      	adds	r7, #48	; 0x30
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2000002c 	.word	0x2000002c

08004c80 <AddRoundKey>:
void AddRoundKey(uint8_t* state, uint8_t* roundKey)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 16; i++)
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	e010      	b.n	8004cb2 <AddRoundKey+0x32>
		state[i] ^= roundKey[i];
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4413      	add	r3, r2
 8004c96:	7819      	ldrb	r1, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	781a      	ldrb	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4403      	add	r3, r0
 8004ca6:	404a      	eors	r2, r1
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b0f      	cmp	r3, #15
 8004cb6:	ddeb      	ble.n	8004c90 <AddRoundKey+0x10>
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <AES_Decrypt_Block_Overwrite>:
	for (int i = 0; i < 16; i++)
		decrypted_cipher[i] = state[i];
}

void AES_Decrypt_Block_Overwrite(uint8_t* cipher, uint8_t* key)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b0b0      	sub	sp, #192	; 0xc0
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
	//trick exchange first and last two bytes
	uint8_t tmp = cipher[0];
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	cipher[0] = cipher[1];
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	785a      	ldrb	r2, [r3, #1]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	701a      	strb	r2, [r3, #0]
	cipher[1] = tmp;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8004ce8:	701a      	strb	r2, [r3, #0]
	tmp = cipher[14];
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	7b9b      	ldrb	r3, [r3, #14]
 8004cee:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	cipher[14] = cipher[15];
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	330e      	adds	r3, #14
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	7bd2      	ldrb	r2, [r2, #15]
 8004cfa:	701a      	strb	r2, [r3, #0]
	cipher[15] = tmp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	330f      	adds	r3, #15
 8004d00:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8004d04:	701a      	strb	r2, [r3, #0]

	//Expand the key
	uint8_t expandedKey[176];
	KeyExpansion(key, expandedKey);
 8004d06:	f107 0308 	add.w	r3, r7, #8
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6838      	ldr	r0, [r7, #0]
 8004d0e:	f7ff fdeb 	bl	80048e8 <KeyExpansion>

	AddRoundKey(cipher, expandedKey + 160);
 8004d12:	f107 0308 	add.w	r3, r7, #8
 8004d16:	33a0      	adds	r3, #160	; 0xa0
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ffb0 	bl	8004c80 <AddRoundKey>

	for (int i = 8; i >= 0; i--)
 8004d20:	2308      	movs	r3, #8
 8004d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d26:	e019      	b.n	8004d5c <AES_Decrypt_Block_Overwrite+0x96>
	{
		InvShiftRows(cipher);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff fe65 	bl	80049f8 <InvShiftRows>
		InvSubBytes(cipher);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fe40 	bl	80049b4 <InvSubBytes>
		AddRoundKey(cipher, expandedKey + (16 * (i + 1)));
 8004d34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d38:	3301      	adds	r3, #1
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f107 0308 	add.w	r3, r7, #8
 8004d42:	4413      	add	r3, r2
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff ff9a 	bl	8004c80 <AddRoundKey>
		InvMixColumns(cipher);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ff17 	bl	8004b80 <InvMixColumns>
	for (int i = 8; i >= 0; i--)
 8004d52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d56:	3b01      	subs	r3, #1
 8004d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	dae1      	bge.n	8004d28 <AES_Decrypt_Block_Overwrite+0x62>
	}
	//Final Round
	InvShiftRows(cipher);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff fe47 	bl	80049f8 <InvShiftRows>
	InvSubBytes(cipher);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff fe22 	bl	80049b4 <InvSubBytes>
	AddRoundKey(cipher, expandedKey);
 8004d70:	f107 0308 	add.w	r3, r7, #8
 8004d74:	4619      	mov	r1, r3
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff ff82 	bl	8004c80 <AddRoundKey>
}
 8004d7c:	bf00      	nop
 8004d7e:	37c0      	adds	r7, #192	; 0xc0
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <AES_Decrypt_Packet>:
	}
	return newLen;
}

//overwrite, make sure data memory size is multiple of a block size. return decrypted packet len, fail return -1
int AES_Decrypt_Packet(uint8_t *data, int len) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
	if(len % 16 != 0) return - 1;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <AES_Decrypt_Packet+0x1a>
 8004d98:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9c:	e019      	b.n	8004dd2 <AES_Decrypt_Packet+0x4e>
	int i;
	int blockNum = len / 16;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	da00      	bge.n	8004da6 <AES_Decrypt_Packet+0x22>
 8004da4:	330f      	adds	r3, #15
 8004da6:	111b      	asrs	r3, r3, #4
 8004da8:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < blockNum; i++) {
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e00b      	b.n	8004dc8 <AES_Decrypt_Packet+0x44>
		AES_Decrypt_Block_Overwrite(data + i*16, AES128key);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	461a      	mov	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4413      	add	r3, r2
 8004dba:	4908      	ldr	r1, [pc, #32]	; (8004ddc <AES_Decrypt_Packet+0x58>)
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff ff82 	bl	8004cc6 <AES_Decrypt_Block_Overwrite>
	for(i = 0; i < blockNum; i++) {
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	dbef      	blt.n	8004db0 <AES_Decrypt_Packet+0x2c>
	}
	return len;
 8004dd0:	683b      	ldr	r3, [r7, #0]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200057e8 	.word	0x200057e8

08004de0 <AES_Decrypt_Packet_Key>:

//overwrite, own key, make sure data memory size is multiple of a block size. return decrypted packet len, fail return -1
int AES_Decrypt_Packet_Key(uint8_t *data, int len, uint8_t *key) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
	if(len % 16 != 0) return - 1;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <AES_Decrypt_Packet_Key+0x1c>
 8004df6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfa:	e019      	b.n	8004e30 <AES_Decrypt_Packet_Key+0x50>
	int i;
	int blockNum = len / 16;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da00      	bge.n	8004e04 <AES_Decrypt_Packet_Key+0x24>
 8004e02:	330f      	adds	r3, #15
 8004e04:	111b      	asrs	r3, r3, #4
 8004e06:	613b      	str	r3, [r7, #16]
	for(i = 0; i < blockNum; i++) {
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e00b      	b.n	8004e26 <AES_Decrypt_Packet_Key+0x46>
		AES_Decrypt_Block_Overwrite(data + i*16, key);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	461a      	mov	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff ff53 	bl	8004cc6 <AES_Decrypt_Block_Overwrite>
	for(i = 0; i < blockNum; i++) {
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	3301      	adds	r3, #1
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	dbef      	blt.n	8004e0e <AES_Decrypt_Packet_Key+0x2e>
	}
	return len;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <bn_decode>:
static bn_t bn_sub_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits);
static bn_t bn_add_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits);
static uint32_t bn_digit_bits(bn_t a);

void bn_decode(bn_t *bn, uint32_t digits, uint8_t *hexarr, uint32_t size)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b089      	sub	sp, #36	; 0x24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
    bn_t t;
    int j;
    uint32_t i, u;
    for(i=0,j=size-1; i<digits && j>=0; i++) {
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	e024      	b.n	8004e9c <bn_decode+0x64>
        t = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	e010      	b.n	8004e7e <bn_decode+0x46>
            t |= ((bn_t)hexarr[j]) << u;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4413      	add	r3, r2
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61fb      	str	r3, [r7, #28]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	61bb      	str	r3, [r7, #24]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	db02      	blt.n	8004e8a <bn_decode+0x52>
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b1f      	cmp	r3, #31
 8004e88:	d9e8      	bls.n	8004e5c <bn_decode+0x24>
        }
        bn[i] = t;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	601a      	str	r2, [r3, #0]
    for(i=0,j=size-1; i<digits && j>=0; i++) {
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d20c      	bcs.n	8004ebe <bn_decode+0x86>
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	dad3      	bge.n	8004e52 <bn_decode+0x1a>
    }

    for(; i<digits; i++) {
 8004eaa:	e008      	b.n	8004ebe <bn_decode+0x86>
        bn[i] = 0;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
    for(; i<digits; i++) {
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d3f2      	bcc.n	8004eac <bn_decode+0x74>
    }
}
 8004ec6:	bf00      	nop
 8004ec8:	bf00      	nop
 8004eca:	3724      	adds	r7, #36	; 0x24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <bn_encode>:

void bn_encode(uint8_t *hexarr, uint32_t size, bn_t *bn, uint32_t digits)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	; 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
    bn_t t;
    int j;
    uint32_t i, u;

    for(i=0,j=size-1; i<digits && j>=0; i++) {
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	e020      	b.n	8004f30 <bn_encode+0x5c>
        t = bn[i];
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	613b      	str	r3, [r7, #16]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	e00e      	b.n	8004f1e <bn_encode+0x4a>
            hexarr[j] = (uint8_t)(t >> u);
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	fa22 f103 	lsr.w	r1, r2, r3
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	b2ca      	uxtb	r2, r1
 8004f10:	701a      	strb	r2, [r3, #0]
        for(u=0; j>=0 && u<BN_DIGIT_BITS; j--, u+=8) {
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	db02      	blt.n	8004f2a <bn_encode+0x56>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b1f      	cmp	r3, #31
 8004f28:	d9ea      	bls.n	8004f00 <bn_encode+0x2c>
    for(i=0,j=size-1; i<digits && j>=0; i++) {
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d20b      	bcs.n	8004f50 <bn_encode+0x7c>
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	dad7      	bge.n	8004eee <bn_encode+0x1a>
        }
    }

    for(; j>=0; j--) {
 8004f3e:	e007      	b.n	8004f50 <bn_encode+0x7c>
        hexarr[j] = 0;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	2200      	movs	r2, #0
 8004f48:	701a      	strb	r2, [r3, #0]
    for(; j>=0; j--) {
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	daf4      	bge.n	8004f40 <bn_encode+0x6c>
    }
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	3724      	adds	r7, #36	; 0x24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <bn_assign>:

void bn_assign(bn_t *a, bn_t *b, uint32_t digits)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for(i=0; i<digits; i++) {
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	e00c      	b.n	8004f90 <bn_assign+0x2c>
        a[i] = b[i];
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	441a      	add	r2, r3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	440b      	add	r3, r1
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	601a      	str	r2, [r3, #0]
    for(i=0; i<digits; i++) {
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d3ee      	bcc.n	8004f76 <bn_assign+0x12>
    }
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <bn_assign_zero>:

void bn_assign_zero(bn_t *a, uint32_t digits)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i=0; i<digits; i++) {
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e008      	b.n	8004fc8 <bn_assign_zero+0x22>
        a[i] = 0;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
    for(i=0; i<digits; i++) {
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d3f2      	bcc.n	8004fb6 <bn_assign_zero+0x10>
    }
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <bn_sub>:

    return carry;
}

bn_t bn_sub(bn_t *a, bn_t *b, bn_t *c, uint32_t digits)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b089      	sub	sp, #36	; 0x24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	603b      	str	r3, [r7, #0]
    bn_t ai, borrow;
    uint32_t i;

    borrow = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61bb      	str	r3, [r7, #24]
    for(i=0; i<digits; i++) {
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	e033      	b.n	800505e <bn_sub+0x80>
        if((ai = b[i] - borrow) > (BN_MAX_DIGIT - borrow)) {
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	43db      	mvns	r3, r3
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	429a      	cmp	r2, r3
 800500e:	d907      	bls.n	8005020 <bn_sub+0x42>
            ai = BN_MAX_DIGIT - c[i];
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	4413      	add	r3, r2
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	43db      	mvns	r3, r3
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	e015      	b.n	800504c <bn_sub+0x6e>
        } else if((ai -= c[i]) > (BN_MAX_DIGIT - c[i])) {
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	4413      	add	r3, r2
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	4413      	add	r3, r2
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	43db      	mvns	r3, r3
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	429a      	cmp	r2, r3
 8005040:	d902      	bls.n	8005048 <bn_sub+0x6a>
            borrow = 1;
 8005042:	2301      	movs	r3, #1
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	e001      	b.n	800504c <bn_sub+0x6e>
        } else {
            borrow = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	61bb      	str	r3, [r7, #24]
        }
        a[i] = ai;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	601a      	str	r2, [r3, #0]
    for(i=0; i<digits; i++) {
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	3301      	adds	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d3c7      	bcc.n	8004ff6 <bn_sub+0x18>
    }

    return borrow;
 8005066:	69bb      	ldr	r3, [r7, #24]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3724      	adds	r7, #36	; 0x24
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <bn_mul>:

void bn_mul(bn_t *a, bn_t *b, bn_t *c, uint32_t digits)
{
 8005074:	b590      	push	{r4, r7, lr}
 8005076:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800507a:	af02      	add	r7, sp, #8
 800507c:	f107 040c 	add.w	r4, r7, #12
 8005080:	6020      	str	r0, [r4, #0]
 8005082:	f107 0008 	add.w	r0, r7, #8
 8005086:	6001      	str	r1, [r0, #0]
 8005088:	1d39      	adds	r1, r7, #4
 800508a:	600a      	str	r2, [r1, #0]
 800508c:	463a      	mov	r2, r7
 800508e:	6013      	str	r3, [r2, #0]
    bn_t t[2*BN_MAX_DIGITS];
    uint32_t bdigits, cdigits, i;

    bn_assign_zero(t, 2*digits);
 8005090:	463b      	mov	r3, r7
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	005a      	lsls	r2, r3, #1
 8005096:	f107 0314 	add.w	r3, r7, #20
 800509a:	4611      	mov	r1, r2
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ff82 	bl	8004fa6 <bn_assign_zero>
    bdigits = bn_digits(b, digits);
 80050a2:	463a      	mov	r2, r7
 80050a4:	f107 0308 	add.w	r3, r7, #8
 80050a8:	6811      	ldr	r1, [r2, #0]
 80050aa:	6818      	ldr	r0, [r3, #0]
 80050ac:	f000 fbbf 	bl	800582e <bn_digits>
 80050b0:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
    cdigits = bn_digits(c, digits);
 80050b4:	463a      	mov	r2, r7
 80050b6:	1d3b      	adds	r3, r7, #4
 80050b8:	6811      	ldr	r1, [r2, #0]
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	f000 fbb7 	bl	800582e <bn_digits>
 80050c0:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

    for(i=0; i<bdigits; i++) {
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80050ca:	e033      	b.n	8005134 <bn_mul+0xc0>
        t[i+cdigits] += bn_add_digit_mul(&t[i], &t[i], b[i], c, cdigits);
 80050cc:	f107 0214 	add.w	r2, r7, #20
 80050d0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	18d0      	adds	r0, r2, r3
 80050d8:	f107 0214 	add.w	r2, r7, #20
 80050dc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	18d1      	adds	r1, r2, r3
 80050e4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	f107 0208 	add.w	r2, r7, #8
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	4413      	add	r3, r2
 80050f2:	681c      	ldr	r4, [r3, #0]
 80050f4:	1d3b      	adds	r3, r7, #4
 80050f6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80050fa:	9200      	str	r2, [sp, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4622      	mov	r2, r4
 8005100:	f000 fbb5 	bl	800586e <bn_add_digit_mul>
 8005104:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8005108:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800510c:	441a      	add	r2, r3
 800510e:	f107 0314 	add.w	r3, r7, #20
 8005112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005116:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 800511a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800511e:	440a      	add	r2, r1
 8005120:	18c1      	adds	r1, r0, r3
 8005122:	f107 0314 	add.w	r3, r7, #20
 8005126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i=0; i<bdigits; i++) {
 800512a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800512e:	3301      	adds	r3, #1
 8005130:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8005134:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8005138:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800513c:	429a      	cmp	r2, r3
 800513e:	d3c5      	bcc.n	80050cc <bn_mul+0x58>
    }

    bn_assign(a, t, 2*digits);
 8005140:	463b      	mov	r3, r7
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	005a      	lsls	r2, r3, #1
 8005146:	f107 0114 	add.w	r1, r7, #20
 800514a:	f107 030c 	add.w	r3, r7, #12
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	f7ff ff08 	bl	8004f64 <bn_assign>

    // Clear potentially sensitive information
    memset((uint8_t *)t, 0, sizeof(t));
 8005154:	f107 0314 	add.w	r3, r7, #20
 8005158:	f44f 7202 	mov.w	r2, #520	; 0x208
 800515c:	2100      	movs	r1, #0
 800515e:	4618      	mov	r0, r3
 8005160:	f01a fb02 	bl	801f768 <memset>
}
 8005164:	bf00      	nop
 8005166:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800516a:	46bd      	mov	sp, r7
 800516c:	bd90      	pop	{r4, r7, pc}

0800516e <bn_div>:

void bn_div(bn_t *a, bn_t *b, bn_t *c, uint32_t cdigits, bn_t *d, uint32_t ddigits)
{
 800516e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005170:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 8005174:	af02      	add	r7, sp, #8
 8005176:	f107 060c 	add.w	r6, r7, #12
 800517a:	6030      	str	r0, [r6, #0]
 800517c:	f107 0008 	add.w	r0, r7, #8
 8005180:	6001      	str	r1, [r0, #0]
 8005182:	1d39      	adds	r1, r7, #4
 8005184:	600a      	str	r2, [r1, #0]
 8005186:	463a      	mov	r2, r7
 8005188:	6013      	str	r3, [r2, #0]
    dbn_t tmp;
    bn_t ai, t, cc[2*BN_MAX_DIGITS+1], dd[BN_MAX_DIGITS];
    int i;
    uint32_t dddigits, shift;

    dddigits = bn_digits(d, ddigits);
 800518a:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 800518e:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8005192:	f000 fb4c 	bl	800582e <bn_digits>
 8005196:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
    if(dddigits == 0)
 800519a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 813a 	beq.w	8005418 <bn_div+0x2aa>
        return;

    shift = BN_DIGIT_BITS - bn_digit_bits(d[dddigits-1]);
 80051a4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80051a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051ac:	3b01      	subs	r3, #1
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 80051b4:	4413      	add	r3, r2
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fc38 	bl	8005a2e <bn_digit_bits>
 80051be:	4603      	mov	r3, r0
 80051c0:	f1c3 0320 	rsb	r3, r3, #32
 80051c4:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    bn_assign_zero(cc, dddigits);
 80051c8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80051cc:	f8d7 1334 	ldr.w	r1, [r7, #820]	; 0x334
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fee8 	bl	8004fa6 <bn_assign_zero>
    cc[cdigits] = bn_shift_l(cc, c, shift, cdigits);
 80051d6:	463b      	mov	r3, r7
 80051d8:	1d39      	adds	r1, r7, #4
 80051da:	f507 708a 	add.w	r0, r7, #276	; 0x114
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80051e4:	6809      	ldr	r1, [r1, #0]
 80051e6:	f000 f91c 	bl	8005422 <bn_shift_l>
 80051ea:	4601      	mov	r1, r0
 80051ec:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80051f0:	463a      	mov	r2, r7
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    bn_shift_l(dd, d, shift, dddigits);
 80051f8:	f107 0010 	add.w	r0, r7, #16
 80051fc:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005200:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005204:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8005208:	f000 f90b 	bl	8005422 <bn_shift_l>
    t = dd[dddigits-1];
 800520c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005210:	1e5a      	subs	r2, r3, #1
 8005212:	f107 0310 	add.w	r3, r7, #16
 8005216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521a:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

    bn_assign_zero(a, cdigits);
 800521e:	463a      	mov	r2, r7
 8005220:	f107 030c 	add.w	r3, r7, #12
 8005224:	6811      	ldr	r1, [r2, #0]
 8005226:	6818      	ldr	r0, [r3, #0]
 8005228:	f7ff febd 	bl	8004fa6 <bn_assign_zero>
    i = cdigits - dddigits;
 800522c:	463b      	mov	r3, r7
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
    for(; i>=0; i--) {
 800523a:	e0c5      	b.n	80053c8 <bn_div+0x25a>
        if(t == BN_MAX_DIGIT) {
 800523c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d10b      	bne.n	800525e <bn_div+0xf0>
            ai = cc[i+dddigits];
 8005246:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 800524a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800524e:	441a      	add	r2, r3
 8005250:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005258:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800525c:	e036      	b.n	80052cc <bn_div+0x15e>
        } else {
            tmp = cc[i+dddigits-1];
 800525e:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005262:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005266:	4413      	add	r3, r2
 8005268:	1e5a      	subs	r2, r3, #1
 800526a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800526e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005272:	461a      	mov	r2, r3
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
            tmp += (dbn_t)cc[i+dddigits] << BN_DIGIT_BITS;
 800527c:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005280:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005284:	441a      	add	r2, r3
 8005286:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800528a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528e:	4618      	mov	r0, r3
 8005290:	f04f 0100 	mov.w	r1, #0
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	0003      	movs	r3, r0
 800529e:	2200      	movs	r2, #0
 80052a0:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 80052a4:	1884      	adds	r4, r0, r2
 80052a6:	eb41 0503 	adc.w	r5, r1, r3
 80052aa:	e9c7 45c8 	strd	r4, r5, [r7, #800]	; 0x320
            ai = tmp / (t + 1);
 80052ae:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80052b2:	3301      	adds	r3, #1
 80052b4:	461a      	mov	r2, r3
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 80052be:	f7fa ffdf 	bl	8000280 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4613      	mov	r3, r2
 80052c8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
        }

        cc[i+dddigits] -= bn_sub_digit_mul(&cc[i], &cc[i], ai, dd, dddigits);
 80052cc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80052d0:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	18d0      	adds	r0, r2, r3
 80052d8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80052dc:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	18d1      	adds	r1, r2, r3
 80052e4:	f107 0210 	add.w	r2, r7, #16
 80052e8:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	4613      	mov	r3, r2
 80052f0:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 80052f4:	f000 fb2a 	bl	800594c <bn_sub_digit_mul>
 80052f8:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 80052fc:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005300:	441a      	add	r2, r3
 8005302:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800530a:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 800530e:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8005312:	440a      	add	r2, r1
 8005314:	1a19      	subs	r1, r3, r0
 8005316:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800531a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // printf("cc[%d]: %08X\n", i, cc[i+dddigits]);
        while(cc[i+dddigits] || (bn_cmp(&cc[i], dd, dddigits) >= 0)) {
 800531e:	e029      	b.n	8005374 <bn_div+0x206>
            ai++;
 8005320:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8005324:	3301      	adds	r3, #1
 8005326:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
            cc[i+dddigits] -= bn_sub(&cc[i], &cc[i], dd, dddigits);
 800532a:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800532e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	18d0      	adds	r0, r2, r3
 8005336:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800533a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	18d1      	adds	r1, r2, r3
 8005342:	f107 0210 	add.w	r2, r7, #16
 8005346:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800534a:	f7ff fe48 	bl	8004fde <bn_sub>
 800534e:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005352:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8005356:	441a      	add	r2, r3
 8005358:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800535c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005360:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 8005364:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8005368:	440a      	add	r2, r1
 800536a:	1a19      	subs	r1, r3, r0
 800536c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        while(cc[i+dddigits] || (bn_cmp(&cc[i], dd, dddigits) >= 0)) {
 8005374:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005378:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800537c:	441a      	add	r2, r3
 800537e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1ca      	bne.n	8005320 <bn_div+0x1b2>
 800538a:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800538e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	f107 0110 	add.w	r1, r7, #16
 800539a:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fa11 	bl	80057c6 <bn_cmp>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	daba      	bge.n	8005320 <bn_div+0x1b2>
        }
        a[i] = ai;
 80053aa:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	f107 020c 	add.w	r2, r7, #12
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	4413      	add	r3, r2
 80053b8:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 80053bc:	601a      	str	r2, [r3, #0]
    for(; i>=0; i--) {
 80053be:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80053c2:	3b01      	subs	r3, #1
 80053c4:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 80053c8:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f6bf af35 	bge.w	800523c <bn_div+0xce>
        // printf("ai[%d]: %08X\n", i, ai);
    }

    bn_assign_zero(b, ddigits);
 80053d2:	f107 0308 	add.w	r3, r7, #8
 80053d6:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	f7ff fde3 	bl	8004fa6 <bn_assign_zero>
    bn_shift_r(b, cc, shift, dddigits);
 80053e0:	f507 718a 	add.w	r1, r7, #276	; 0x114
 80053e4:	f107 0008 	add.w	r0, r7, #8
 80053e8:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80053ec:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80053f0:	6800      	ldr	r0, [r0, #0]
 80053f2:	f000 f854 	bl	800549e <bn_shift_r>

    // Clear potentially sensitive information
    memset((uint8_t *)cc, 0, sizeof(cc));
 80053f6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80053fa:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80053fe:	2100      	movs	r1, #0
 8005400:	4618      	mov	r0, r3
 8005402:	f01a f9b1 	bl	801f768 <memset>
    memset((uint8_t *)dd, 0, sizeof(dd));
 8005406:	f107 0310 	add.w	r3, r7, #16
 800540a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f01a f9a9 	bl	801f768 <memset>
 8005416:	e000      	b.n	800541a <bn_div+0x2ac>
        return;
 8005418:	bf00      	nop
}
 800541a:	f507 7751 	add.w	r7, r7, #836	; 0x344
 800541e:	46bd      	mov	sp, r7
 8005420:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005422 <bn_shift_l>:

bn_t bn_shift_l(bn_t *a, bn_t *b, uint32_t c, uint32_t digits)
{
 8005422:	b480      	push	{r7}
 8005424:	b089      	sub	sp, #36	; 0x24
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	603b      	str	r3, [r7, #0]
    bn_t bi, carry;
    uint32_t i, t;

    if(c >= BN_DIGIT_BITS)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b1f      	cmp	r3, #31
 8005434:	d901      	bls.n	800543a <bn_shift_l+0x18>
        return 0;
 8005436:	2300      	movs	r3, #0
 8005438:	e02b      	b.n	8005492 <bn_shift_l+0x70>

    t = BN_DIGIT_BITS - c;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f1c3 0320 	rsb	r3, r3, #32
 8005440:	617b      	str	r3, [r7, #20]
    carry = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
    for(i=0; i<digits; i++) {
 8005446:	2300      	movs	r3, #0
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	e01d      	b.n	8005488 <bn_shift_l+0x66>
        bi = b[i];
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	4413      	add	r3, r2
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	613b      	str	r3, [r7, #16]
        a[i] = (bi << c) | carry;
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	fa02 f103 	lsl.w	r1, r2, r3
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	430a      	orrs	r2, r1
 800546c:	601a      	str	r2, [r3, #0]
        carry = c ? (bi >> t) : 0;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <bn_shift_l+0x5c>
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
 800547c:	e000      	b.n	8005480 <bn_shift_l+0x5e>
 800547e:	2300      	movs	r3, #0
 8005480:	61fb      	str	r3, [r7, #28]
    for(i=0; i<digits; i++) {
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	3301      	adds	r3, #1
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d3dd      	bcc.n	800544c <bn_shift_l+0x2a>
    }

    return carry;
 8005490:	69fb      	ldr	r3, [r7, #28]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3724      	adds	r7, #36	; 0x24
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <bn_shift_r>:

bn_t bn_shift_r(bn_t *a, bn_t *b, uint32_t c, uint32_t digits)
{
 800549e:	b480      	push	{r7}
 80054a0:	b089      	sub	sp, #36	; 0x24
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	603b      	str	r3, [r7, #0]
    bn_t bi, carry;
    int i;
    uint32_t t;

    if(c >= BN_DIGIT_BITS)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b1f      	cmp	r3, #31
 80054b0:	d901      	bls.n	80054b6 <bn_shift_r+0x18>
        return 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e02b      	b.n	800550e <bn_shift_r+0x70>

    t = BN_DIGIT_BITS - c;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f1c3 0320 	rsb	r3, r3, #32
 80054bc:	617b      	str	r3, [r7, #20]
    carry = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
    i = digits - 1;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	61bb      	str	r3, [r7, #24]
    for(; i>=0; i--) {
 80054c8:	e01d      	b.n	8005506 <bn_shift_r+0x68>
        bi = b[i];
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	613b      	str	r3, [r7, #16]
        a[i] = (bi >> c) | carry;
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	fa22 f103 	lsr.w	r1, r2, r3
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	601a      	str	r2, [r3, #0]
        carry = c ? (bi << t) : 0;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <bn_shift_r+0x5e>
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	e000      	b.n	80054fe <bn_shift_r+0x60>
 80054fc:	2300      	movs	r3, #0
 80054fe:	61fb      	str	r3, [r7, #28]
    for(; i>=0; i--) {
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	3b01      	subs	r3, #1
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	dade      	bge.n	80054ca <bn_shift_r+0x2c>
    }

    return carry;
 800550c:	69fb      	ldr	r3, [r7, #28]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3724      	adds	r7, #36	; 0x24
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <bn_mod>:

void bn_mod(bn_t *a, bn_t *b, uint32_t bdigits, bn_t *c, uint32_t cdigits)
{
 800551a:	b590      	push	{r4, r7, lr}
 800551c:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8005520:	af02      	add	r7, sp, #8
 8005522:	f107 040c 	add.w	r4, r7, #12
 8005526:	6020      	str	r0, [r4, #0]
 8005528:	f107 0008 	add.w	r0, r7, #8
 800552c:	6001      	str	r1, [r0, #0]
 800552e:	1d39      	adds	r1, r7, #4
 8005530:	600a      	str	r2, [r1, #0]
 8005532:	463a      	mov	r2, r7
 8005534:	6013      	str	r3, [r2, #0]
    bn_t t[2*BN_MAX_DIGITS] = {0};
 8005536:	f107 0310 	add.w	r3, r7, #16
 800553a:	4618      	mov	r0, r3
 800553c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005540:	461a      	mov	r2, r3
 8005542:	2100      	movs	r1, #0
 8005544:	f01a f910 	bl	801f768 <memset>

    bn_div(t, a, b, bdigits, c, cdigits);
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	f107 0208 	add.w	r2, r7, #8
 800554e:	f107 010c 	add.w	r1, r7, #12
 8005552:	f107 0410 	add.w	r4, r7, #16
 8005556:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 800555a:	9001      	str	r0, [sp, #4]
 800555c:	4638      	mov	r0, r7
 800555e:	6800      	ldr	r0, [r0, #0]
 8005560:	9000      	str	r0, [sp, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	6809      	ldr	r1, [r1, #0]
 8005568:	4620      	mov	r0, r4
 800556a:	f7ff fe00 	bl	800516e <bn_div>

    // Clear potentially sensitive information
    memset((uint8_t *)t, 0, sizeof(t));
 800556e:	f107 0310 	add.w	r3, r7, #16
 8005572:	f44f 7202 	mov.w	r2, #520	; 0x208
 8005576:	2100      	movs	r1, #0
 8005578:	4618      	mov	r0, r3
 800557a:	f01a f8f5 	bl	801f768 <memset>
}
 800557e:	bf00      	nop
 8005580:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8005584:	46bd      	mov	sp, r7
 8005586:	bd90      	pop	{r4, r7, pc}

08005588 <bn_mod_mul>:

void bn_mod_mul(bn_t *a, bn_t *b, bn_t *c, bn_t *d, uint32_t digits)
{
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800558e:	af02      	add	r7, sp, #8
 8005590:	f107 040c 	add.w	r4, r7, #12
 8005594:	6020      	str	r0, [r4, #0]
 8005596:	f107 0008 	add.w	r0, r7, #8
 800559a:	6001      	str	r1, [r0, #0]
 800559c:	1d39      	adds	r1, r7, #4
 800559e:	600a      	str	r2, [r1, #0]
 80055a0:	463a      	mov	r2, r7
 80055a2:	6013      	str	r3, [r2, #0]
    bn_t t[2*BN_MAX_DIGITS];

    bn_mul(t, b, c, digits);
 80055a4:	1d3a      	adds	r2, r7, #4
 80055a6:	f107 0108 	add.w	r1, r7, #8
 80055aa:	f107 0010 	add.w	r0, r7, #16
 80055ae:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	6809      	ldr	r1, [r1, #0]
 80055b6:	f7ff fd5d 	bl	8005074 <bn_mul>
    bn_mod(a, t, 2*digits, d, digits);
 80055ba:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80055be:	005c      	lsls	r4, r3, #1
 80055c0:	463b      	mov	r3, r7
 80055c2:	f107 0110 	add.w	r1, r7, #16
 80055c6:	f107 000c 	add.w	r0, r7, #12
 80055ca:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 80055ce:	9200      	str	r2, [sp, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4622      	mov	r2, r4
 80055d4:	6800      	ldr	r0, [r0, #0]
 80055d6:	f7ff ffa0 	bl	800551a <bn_mod>

    // Clear potentially sensitive information
    memset((uint8_t *)t, 0, sizeof(t));
 80055da:	f107 0310 	add.w	r3, r7, #16
 80055de:	f44f 7202 	mov.w	r2, #520	; 0x208
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f01a f8bf 	bl	801f768 <memset>
}
 80055ea:	bf00      	nop
 80055ec:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd90      	pop	{r4, r7, pc}

080055f4 <bn_mod_exp>:

void bn_mod_exp(bn_t *a, bn_t *b, bn_t *c, uint32_t cdigits, bn_t *d, uint32_t ddigits)
{
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
 80055fa:	af02      	add	r7, sp, #8
 80055fc:	f107 040c 	add.w	r4, r7, #12
 8005600:	6020      	str	r0, [r4, #0]
 8005602:	f107 0008 	add.w	r0, r7, #8
 8005606:	6001      	str	r1, [r0, #0]
 8005608:	1d39      	adds	r1, r7, #4
 800560a:	600a      	str	r2, [r1, #0]
 800560c:	463a      	mov	r2, r7
 800560e:	6013      	str	r3, [r2, #0]
    bn_t bpower[3][BN_MAX_DIGITS], ci, t[BN_MAX_DIGITS];
    int i;
    uint32_t ci_bits, j, s;

    bn_assign(bpower[0], b, ddigits);
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8005618:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 800561c:	6819      	ldr	r1, [r3, #0]
 800561e:	f7ff fca1 	bl	8004f64 <bn_assign>
    bn_mod_mul(bpower[1], bpower[0], b, d, ddigits);
 8005622:	f107 0208 	add.w	r2, r7, #8
 8005626:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800562a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800562e:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8005632:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	f7ff ffa3 	bl	8005588 <bn_mod_mul>
    bn_mod_mul(bpower[2], bpower[1], b, d, ddigits);
 8005642:	f107 0208 	add.w	r2, r7, #8
 8005646:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800564a:	f503 7182 	add.w	r1, r3, #260	; 0x104
 800564e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005652:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8005656:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	f7ff ff91 	bl	8005588 <bn_mod_mul>

    BN_ASSIGN_DIGIT(t, 1, ddigits);
 8005666:	f107 0314 	add.w	r3, r7, #20
 800566a:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff fc99 	bl	8004fa6 <bn_assign_zero>
 8005674:	f107 0314 	add.w	r3, r7, #20
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]

    cdigits = bn_digits(c, cdigits);
 800567c:	463c      	mov	r4, r7
 800567e:	463a      	mov	r2, r7
 8005680:	1d3b      	adds	r3, r7, #4
 8005682:	6811      	ldr	r1, [r2, #0]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	f000 f8d2 	bl	800582e <bn_digits>
 800568a:	6020      	str	r0, [r4, #0]
    i = cdigits - 1;
 800568c:	463b      	mov	r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3b01      	subs	r3, #1
 8005692:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
    for(; i>=0; i--) {
 8005696:	e074      	b.n	8005782 <bn_mod_exp+0x18e>
        ci = c[i];
 8005698:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	1d3a      	adds	r2, r7, #4
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	4413      	add	r3, r2
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
        ci_bits = BN_DIGIT_BITS;
 80056aa:	2320      	movs	r3, #32
 80056ac:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

        if(i == (int)(cdigits - 1)) {
 80056b0:	463b      	mov	r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	461a      	mov	r2, r3
 80056b8:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10f      	bne.n	80056e0 <bn_mod_exp+0xec>
            while(!DIGIT_2MSB(ci)) {
 80056c0:	e009      	b.n	80056d6 <bn_mod_exp+0xe2>
                ci <<= 2;
 80056c2:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
                ci_bits -= 2;
 80056cc:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80056d0:	3b02      	subs	r3, #2
 80056d2:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
            while(!DIGIT_2MSB(ci)) {
 80056d6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80056da:	0f9b      	lsrs	r3, r3, #30
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <bn_mod_exp+0xce>
            }
        }

        for(j=0; j<ci_bits; j+=2) {
 80056e0:	2300      	movs	r3, #0
 80056e2:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80056e6:	e041      	b.n	800576c <bn_mod_exp+0x178>
            bn_mod_mul(t, t, t, d, ddigits);
 80056e8:	f107 0214 	add.w	r2, r7, #20
 80056ec:	f107 0114 	add.w	r1, r7, #20
 80056f0:	f107 0014 	add.w	r0, r7, #20
 80056f4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80056fe:	f7ff ff43 	bl	8005588 <bn_mod_mul>
            bn_mod_mul(t, t, t, d, ddigits);
 8005702:	f107 0214 	add.w	r2, r7, #20
 8005706:	f107 0114 	add.w	r1, r7, #20
 800570a:	f107 0014 	add.w	r0, r7, #20
 800570e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8005718:	f7ff ff36 	bl	8005588 <bn_mod_mul>
            if((s = DIGIT_2MSB(ci)) != 0) {
 800571c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8005720:	0f9b      	lsrs	r3, r3, #30
 8005722:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8005726:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800572a:	2b00      	cmp	r3, #0
 800572c:	d014      	beq.n	8005758 <bn_mod_exp+0x164>
                bn_mod_mul(t, t, bpower[s-1], d, ddigits);
 800572e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8005732:	1e5a      	subs	r2, r3, #1
 8005734:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8005738:	4613      	mov	r3, r2
 800573a:	019b      	lsls	r3, r3, #6
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	18ca      	adds	r2, r1, r3
 8005742:	f107 0114 	add.w	r1, r7, #20
 8005746:	f107 0014 	add.w	r0, r7, #20
 800574a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8005754:	f7ff ff18 	bl	8005588 <bn_mod_mul>
            }
            ci <<= 2;
 8005758:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
        for(j=0; j<ci_bits; j+=2) {
 8005762:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8005766:	3302      	adds	r3, #2
 8005768:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 800576c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8005770:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8005774:	429a      	cmp	r2, r3
 8005776:	d3b7      	bcc.n	80056e8 <bn_mod_exp+0xf4>
    for(; i>=0; i--) {
 8005778:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800577c:	3b01      	subs	r3, #1
 800577e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8005782:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8005786:	2b00      	cmp	r3, #0
 8005788:	da86      	bge.n	8005698 <bn_mod_exp+0xa4>
        }
    }

    bn_assign(a, t, ddigits);
 800578a:	f107 0114 	add.w	r1, r7, #20
 800578e:	f107 030c 	add.w	r3, r7, #12
 8005792:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	f7ff fbe4 	bl	8004f64 <bn_assign>

    // Clear potentially sensitive information
    memset((uint8_t *)bpower, 0, sizeof(bpower));
 800579c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80057a0:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f019 ffde 	bl	801f768 <memset>
    memset((uint8_t *)t, 0, sizeof(t));
 80057ac:	f107 0314 	add.w	r3, r7, #20
 80057b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80057b4:	2100      	movs	r1, #0
 80057b6:	4618      	mov	r0, r3
 80057b8:	f019 ffd6 	bl	801f768 <memset>
}
 80057bc:	bf00      	nop
 80057be:	f207 473c 	addw	r7, r7, #1084	; 0x43c
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd90      	pop	{r4, r7, pc}

080057c6 <bn_cmp>:

int bn_cmp(bn_t *a, bn_t *b, uint32_t digits)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b087      	sub	sp, #28
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
    int i;
    for(i=digits-1; i>=0; i--) {
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	e01f      	b.n	800581a <bn_cmp+0x54>
        if(a[i] > b[i])     return 1;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4413      	add	r3, r2
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	440b      	add	r3, r1
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d901      	bls.n	80057f6 <bn_cmp+0x30>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e015      	b.n	8005822 <bn_cmp+0x5c>
        if(a[i] < b[i])     return -1;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	440b      	add	r3, r1
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d202      	bcs.n	8005814 <bn_cmp+0x4e>
 800580e:	f04f 33ff 	mov.w	r3, #4294967295
 8005812:	e006      	b.n	8005822 <bn_cmp+0x5c>
    for(i=digits-1; i>=0; i--) {
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	3b01      	subs	r3, #1
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	dadc      	bge.n	80057da <bn_cmp+0x14>
    }

    return 0;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <bn_digits>:

uint32_t bn_digits(bn_t *a, uint32_t digits)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
    int i;
    for(i=digits-1; i>=0; i--) {
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	3b01      	subs	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e009      	b.n	8005854 <bn_digits+0x26>
        if(a[i])    break;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	4413      	add	r3, r2
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <bn_digits+0x2e>
    for(i=digits-1; i>=0; i--) {
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3b01      	subs	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	daf2      	bge.n	8005840 <bn_digits+0x12>
 800585a:	e000      	b.n	800585e <bn_digits+0x30>
        if(a[i])    break;
 800585c:	bf00      	nop
    }

    return (i + 1);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3301      	adds	r3, #1
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <bn_add_digit_mul>:

static bn_t bn_add_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits)
{
 800586e:	b4b0      	push	{r4, r5, r7}
 8005870:	b08b      	sub	sp, #44	; 0x2c
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
 800587a:	603b      	str	r3, [r7, #0]
    dbn_t result;
    bn_t carry, rh, rl;
    uint32_t i;

    if(c == 0)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <bn_add_digit_mul+0x18>
        return 0;
 8005882:	2300      	movs	r3, #0
 8005884:	e05d      	b.n	8005942 <bn_add_digit_mul+0xd4>

    carry = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 800588a:	2300      	movs	r3, #0
 800588c:	623b      	str	r3, [r7, #32]
 800588e:	e053      	b.n	8005938 <bn_add_digit_mul+0xca>
        result = (dbn_t)c * d[i];
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4618      	mov	r0, r3
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	4413      	add	r3, r2
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	fb02 f501 	mul.w	r5, r2, r1
 80058ac:	fb00 f403 	mul.w	r4, r0, r3
 80058b0:	442c      	add	r4, r5
 80058b2:	fba0 2302 	umull	r2, r3, r0, r2
 80058b6:	18e1      	adds	r1, r4, r3
 80058b8:	460b      	mov	r3, r1
 80058ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80058be:	e9c7 2306 	strd	r2, r3, [r7, #24]
        rl = result & BN_MAX_DIGIT;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	617b      	str	r3, [r7, #20]
        rh = (result >> BN_DIGIT_BITS) & BN_MAX_DIGIT;
 80058c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	000a      	movs	r2, r1
 80058d4:	2300      	movs	r3, #0
 80058d6:	4613      	mov	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
        if((a[i] = b[i] + carry) < carry) {
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	4413      	add	r3, r2
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ee:	440a      	add	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d902      	bls.n	8005900 <bn_add_digit_mul+0x92>
            carry = 1;
 80058fa:	2301      	movs	r3, #1
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
 80058fe:	e001      	b.n	8005904 <bn_add_digit_mul+0x96>
        } else {
            carry = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if((a[i] += rl) < rl) {
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	6819      	ldr	r1, [r3, #0]
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	440a      	add	r2, r1
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	429a      	cmp	r2, r3
 8005922:	d902      	bls.n	800592a <bn_add_digit_mul+0xbc>
            carry++;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	3301      	adds	r3, #1
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
        }
        carry += rh;
 800592a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	4413      	add	r3, r2
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	3301      	adds	r3, #1
 8005936:	623b      	str	r3, [r7, #32]
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	429a      	cmp	r2, r3
 800593e:	d3a7      	bcc.n	8005890 <bn_add_digit_mul+0x22>
    }

    return carry;
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005942:	4618      	mov	r0, r3
 8005944:	372c      	adds	r7, #44	; 0x2c
 8005946:	46bd      	mov	sp, r7
 8005948:	bcb0      	pop	{r4, r5, r7}
 800594a:	4770      	bx	lr

0800594c <bn_sub_digit_mul>:

static bn_t bn_sub_digit_mul(bn_t *a, bn_t *b, bn_t c, bn_t *d, uint32_t digits)
{
 800594c:	b4b0      	push	{r4, r5, r7}
 800594e:	b08b      	sub	sp, #44	; 0x2c
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	603b      	str	r3, [r7, #0]
    dbn_t result;
    bn_t borrow, rh, rl;
    uint32_t i;

    if(c == 0)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <bn_sub_digit_mul+0x18>
        return 0;
 8005960:	2300      	movs	r3, #0
 8005962:	e05f      	b.n	8005a24 <bn_sub_digit_mul+0xd8>

    borrow = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 8005968:	2300      	movs	r3, #0
 800596a:	623b      	str	r3, [r7, #32]
 800596c:	e055      	b.n	8005a1a <bn_sub_digit_mul+0xce>
        result = (dbn_t)c * d[i];
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4618      	mov	r0, r3
 8005972:	f04f 0100 	mov.w	r1, #0
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	4413      	add	r3, r2
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	fb02 f501 	mul.w	r5, r2, r1
 800598a:	fb00 f403 	mul.w	r4, r0, r3
 800598e:	442c      	add	r4, r5
 8005990:	fba0 2302 	umull	r2, r3, r0, r2
 8005994:	18e1      	adds	r1, r4, r3
 8005996:	460b      	mov	r3, r1
 8005998:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800599c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        rl = result & BN_MAX_DIGIT;
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	617b      	str	r3, [r7, #20]
        rh = (result >> BN_DIGIT_BITS) & BN_MAX_DIGIT;
 80059a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	000a      	movs	r2, r1
 80059b2:	2300      	movs	r3, #0
 80059b4:	4613      	mov	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
        if((a[i] = b[i] - borrow) > (BN_MAX_DIGIT - borrow)) {
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	4413      	add	r3, r2
 80059c0:	6819      	ldr	r1, [r3, #0]
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059cc:	1a8a      	subs	r2, r1, r2
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	43db      	mvns	r3, r3
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d902      	bls.n	80059e0 <bn_sub_digit_mul+0x94>
            borrow = 1;
 80059da:	2301      	movs	r3, #1
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
 80059de:	e001      	b.n	80059e4 <bn_sub_digit_mul+0x98>
        } else {
            borrow = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if((a[i] -= rl) > (BN_MAX_DIGIT - rl)) {
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	6819      	ldr	r1, [r3, #0]
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	1a8a      	subs	r2, r1, r2
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	43db      	mvns	r3, r3
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d902      	bls.n	8005a0c <bn_sub_digit_mul+0xc0>
            borrow++;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	3301      	adds	r3, #1
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        borrow += rh;
 8005a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4413      	add	r3, r2
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=0; i<digits; i++) {
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	3301      	adds	r3, #1
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d3a5      	bcc.n	800596e <bn_sub_digit_mul+0x22>
    }

    return borrow;
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	372c      	adds	r7, #44	; 0x2c
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bcb0      	pop	{r4, r5, r7}
 8005a2c:	4770      	bx	lr

08005a2e <bn_digit_bits>:

static uint32_t bn_digit_bits(bn_t a)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for(i=0; i<BN_DIGIT_BITS; i++) {
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e008      	b.n	8005a4e <bn_digit_bits+0x20>
        if(a == 0)  break;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <bn_digit_bits+0x28>
        a >>= 1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	607b      	str	r3, [r7, #4]
    for(i=0; i<BN_DIGIT_BITS; i++) {
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b1f      	cmp	r3, #31
 8005a52:	d9f3      	bls.n	8005a3c <bn_digit_bits+0xe>
 8005a54:	e000      	b.n	8005a58 <bn_digit_bits+0x2a>
        if(a == 0)  break;
 8005a56:	bf00      	nop
    }

    return i;
 8005a58:	68fb      	ldr	r3, [r7, #12]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <savePosDma>:
DMA_POS_Struct dma_pos_array[DMA_POS_LOG_LEN];

unsigned int curOrderDmaPos = 0;

void savePosDma(int oldPos, int newPos, int returnTmp)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
    int index = curOrderDmaPos % DMA_POS_LOG_LEN;
 8005a74:	4b18      	ldr	r3, [pc, #96]	; (8005ad8 <savePosDma+0x70>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	4b18      	ldr	r3, [pc, #96]	; (8005adc <savePosDma+0x74>)
 8005a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	2164      	movs	r1, #100	; 0x64
 8005a82:	fb01 f303 	mul.w	r3, r1, r3
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]
	dma_pos_array[index].order = curOrderDmaPos;
 8005a8a:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <savePosDma+0x70>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4914      	ldr	r1, [pc, #80]	; (8005ae0 <savePosDma+0x78>)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	440b      	add	r3, r1
 8005a96:	601a      	str	r2, [r3, #0]
    dma_pos_array[index].old_pos = oldPos;
 8005a98:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <savePosDma+0x78>)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	601a      	str	r2, [r3, #0]
    dma_pos_array[index].new_pos = newPos;
 8005aa6:	4a0e      	ldr	r2, [pc, #56]	; (8005ae0 <savePosDma+0x78>)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	4413      	add	r3, r2
 8005aae:	3308      	adds	r3, #8
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	601a      	str	r2, [r3, #0]
    dma_pos_array[index].return_Tmp = returnTmp;
 8005ab4:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <savePosDma+0x78>)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	4413      	add	r3, r2
 8005abc:	330c      	adds	r3, #12
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
    curOrderDmaPos++;
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <savePosDma+0x70>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	4a03      	ldr	r2, [pc, #12]	; (8005ad8 <savePosDma+0x70>)
 8005aca:	6013      	str	r3, [r2, #0]
}
 8005acc:	bf00      	nop
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	200003d0 	.word	0x200003d0
 8005adc:	51eb851f 	.word	0x51eb851f
 8005ae0:	200057f8 	.word	0x200057f8

08005ae4 <udp_receive_callback>:

extern struct netif gnetif;

//udp
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
    LOG_WRITE("recv udp\n");
 8005af2:	480f      	ldr	r0, [pc, #60]	; (8005b30 <udp_receive_callback+0x4c>)
 8005af4:	f019 ff80 	bl	801f9f8 <puts>
    UDP_Packet_Analyze(p->payload, p->len);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	895b      	ldrh	r3, [r3, #10]
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f003 f984 	bl	8008e10 <UDP_Packet_Analyze>

    /* Free receive pbuf */
    if (pbuf_free(p) != ERR_OK)
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f00d fcc5 	bl	8013498 <pbuf_free>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <udp_receive_callback+0x42>
    {
        LOG_WRITE("recv udp pcb error\n");
 8005b14:	4807      	ldr	r0, [pc, #28]	; (8005b34 <udp_receive_callback+0x50>)
 8005b16:	f019 ff6f 	bl	801f9f8 <puts>
        osEventFlagsSet(ConnectEthEventID, 1 << errorEthEnum);
 8005b1a:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <udp_receive_callback+0x54>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2108      	movs	r1, #8
 8005b20:	4618      	mov	r0, r3
 8005b22:	f004 fb39 	bl	800a198 <osEventFlagsSet>
    }
}
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	08020d7c 	.word	0x08020d7c
 8005b34:	08020d88 	.word	0x08020d88
 8005b38:	20005798 	.word	0x20005798

08005b3c <udp_client_connect>:

void udp_client_connect(ip_addr_t serverIpAddr, uint16_t sererPort)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
    static bool bUdpFirstTime = true;
    err_t err;
    bool bUdpConnectErr = true;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
    LOG_WRITE("udp connect %d %d\n", bUdpFirstTime, upcb);
 8005b4c:	4b24      	ldr	r3, [pc, #144]	; (8005be0 <udp_client_connect+0xa4>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	4619      	mov	r1, r3
 8005b52:	4b24      	ldr	r3, [pc, #144]	; (8005be4 <udp_client_connect+0xa8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	4823      	ldr	r0, [pc, #140]	; (8005be8 <udp_client_connect+0xac>)
 8005b5a:	f019 fec7 	bl	801f8ec <iprintf>
    if (bUdpFirstTime) /* First time - Create a new UDP control block  */
 8005b5e:	4b20      	ldr	r3, [pc, #128]	; (8005be0 <udp_client_connect+0xa4>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <udp_client_connect+0x3e>
    {
        upcb = udp_new();
 8005b66:	f014 ff9b 	bl	801aaa0 <udp_new>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <udp_client_connect+0xa8>)
 8005b70:	601a      	str	r2, [r3, #0]
        bUdpFirstTime = false;
 8005b72:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <udp_client_connect+0xa4>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	e008      	b.n	8005b8c <udp_client_connect+0x50>
    }
    else 
    {
        if (upcb != NULL)
 8005b7a:	4b1a      	ldr	r3, [pc, #104]	; (8005be4 <udp_client_connect+0xa8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <udp_client_connect+0x50>
            udp_disconnect(upcb);
 8005b82:	4b18      	ldr	r3, [pc, #96]	; (8005be4 <udp_client_connect+0xa8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f014 ff00 	bl	801a98c <udp_disconnect>
    }

    if (upcb != NULL)
 8005b8c:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <udp_client_connect+0xa8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d015      	beq.n	8005bc0 <udp_client_connect+0x84>
    {
        /* configure destination IP address and port */
        err = udp_connect(upcb, &serverIpAddr, sererPort);
 8005b94:	4b13      	ldr	r3, [pc, #76]	; (8005be4 <udp_client_connect+0xa8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	887a      	ldrh	r2, [r7, #2]
 8005b9a:	1d39      	adds	r1, r7, #4
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f014 fe87 	bl	801a8b0 <udp_connect>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	73bb      	strb	r3, [r7, #14]

        if (err == ERR_OK)
 8005ba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d108      	bne.n	8005bc0 <udp_client_connect+0x84>
        {
            /* Set a receive callback for the upcb */
            udp_recv(upcb, udp_receive_callback, NULL);
 8005bae:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <udp_client_connect+0xa8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	490d      	ldr	r1, [pc, #52]	; (8005bec <udp_client_connect+0xb0>)
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f014 ff10 	bl	801a9dc <udp_recv>

            bUdpConnectErr = false;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (bUdpConnectErr)
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d008      	beq.n	8005bd8 <udp_client_connect+0x9c>
    {
        LOG_WRITE("create new udp pcb error\n");
 8005bc6:	480a      	ldr	r0, [pc, #40]	; (8005bf0 <udp_client_connect+0xb4>)
 8005bc8:	f019 ff16 	bl	801f9f8 <puts>
        osEventFlagsSet(ConnectEthEventID, 1 << errorEthEnum);
 8005bcc:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <udp_client_connect+0xb8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2108      	movs	r1, #8
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f004 fae0 	bl	800a198 <osEventFlagsSet>
    }
}
 8005bd8:	bf00      	nop
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	2000023c 	.word	0x2000023c
 8005be4:	20005e3c 	.word	0x20005e3c
 8005be8:	08020d9c 	.word	0x08020d9c
 8005bec:	08005ae5 	.word	0x08005ae5
 8005bf0:	08020db0 	.word	0x08020db0
 8005bf4:	20005798 	.word	0x20005798

08005bf8 <udp_client_send>:

void udp_client_send(uint8_t *data, int len)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
    LOG_WRITE("udp send %d %p\n", ethConnectStatus, upcb);
 8005c02:	4b26      	ldr	r3, [pc, #152]	; (8005c9c <udp_client_send+0xa4>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a26      	ldr	r2, [pc, #152]	; (8005ca0 <udp_client_send+0xa8>)
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4825      	ldr	r0, [pc, #148]	; (8005ca4 <udp_client_send+0xac>)
 8005c0e:	f019 fe6d 	bl	801f8ec <iprintf>

    if (ethConnectStatus != 2 || upcb == NULL)
 8005c12:	4b22      	ldr	r3, [pc, #136]	; (8005c9c <udp_client_send+0xa4>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d13b      	bne.n	8005c92 <udp_client_send+0x9a>
 8005c1a:	4b21      	ldr	r3, [pc, #132]	; (8005ca0 <udp_client_send+0xa8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d037      	beq.n	8005c92 <udp_client_send+0x9a>
        return;

    bool bUdpSendErr = true;
 8005c22:	2301      	movs	r3, #1
 8005c24:	73fb      	strb	r3, [r7, #15]
    struct pbuf *p;

    /* allocate pbuf from pool*/
    p = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_POOL);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005c2e:	4619      	mov	r1, r3
 8005c30:	2036      	movs	r0, #54	; 0x36
 8005c32:	f00d f94d 	bl	8012ed0 <pbuf_alloc>
 8005c36:	60b8      	str	r0, [r7, #8]

    if (p != NULL)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01c      	beq.n	8005c78 <udp_client_send+0x80>
    {
        /* copy data to pbuf */
        if (pbuf_take(p, data, len) == ERR_OK)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	6879      	ldr	r1, [r7, #4]
 8005c46:	68b8      	ldr	r0, [r7, #8]
 8005c48:	f00d feda 	bl	8013a00 <pbuf_take>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <udp_client_send+0x70>
        {
            /* send udp data */
            if (udp_send(upcb, p) == ERR_OK)
 8005c52:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <udp_client_send+0xa8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f014 fbb7 	bl	801a3cc <udp_send>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <udp_client_send+0x70>
            {
                bUdpSendErr = false;
 8005c64:	2300      	movs	r3, #0
 8005c66:	73fb      	strb	r3, [r7, #15]
            }
        }
        /* free pbuf */
        if (pbuf_free(p) != ERR_OK)
 8005c68:	68b8      	ldr	r0, [r7, #8]
 8005c6a:	f00d fc15 	bl	8013498 <pbuf_free>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <udp_client_send+0x80>
        {
            bUdpSendErr = true;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (bUdpSendErr)
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <udp_client_send+0x9c>
    {
        LOG_WRITE("send udp pcb error\n");
 8005c7e:	480a      	ldr	r0, [pc, #40]	; (8005ca8 <udp_client_send+0xb0>)
 8005c80:	f019 feba 	bl	801f9f8 <puts>
        osEventFlagsSet(ConnectEthEventID, 1 << errorEthEnum);
 8005c84:	4b09      	ldr	r3, [pc, #36]	; (8005cac <udp_client_send+0xb4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2108      	movs	r1, #8
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f004 fa84 	bl	800a198 <osEventFlagsSet>
 8005c90:	e000      	b.n	8005c94 <udp_client_send+0x9c>
        return;
 8005c92:	bf00      	nop
    }
}
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200003d4 	.word	0x200003d4
 8005ca0:	20005e3c 	.word	0x20005e3c
 8005ca4:	08020dcc 	.word	0x08020dcc
 8005ca8:	08020ddc 	.word	0x08020ddc
 8005cac:	20005798 	.word	0x20005798

08005cb0 <ethSendTask>:

//tcp
void ethSendTask()
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08c      	sub	sp, #48	; 0x30
 8005cb4:	af02      	add	r7, sp, #8
    osStatus_t sendStt;
    err_t err;
    //wait until have packet
    for (;;)
    {
        sendStt = osMessageQueueGet(SendEthQueueID, &sendMsgObj, NULL, osWaitForever);
 8005cb6:	4b28      	ldr	r3, [pc, #160]	; (8005d58 <ethSendTask+0xa8>)
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	f107 0108 	add.w	r1, r7, #8
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f004 fe8a 	bl	800a9dc <osMessageQueueGet>
 8005cc8:	6238      	str	r0, [r7, #32]
        LOG_WRITE("eth send task %d %d\n", ethConnectStatus, sendMsgObj.type);
 8005cca:	4b24      	ldr	r3, [pc, #144]	; (8005d5c <ethSendTask+0xac>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	7b3a      	ldrb	r2, [r7, #12]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4823      	ldr	r0, [pc, #140]	; (8005d60 <ethSendTask+0xb0>)
 8005cd4:	f019 fe0a 	bl	801f8ec <iprintf>
        if (ethConnectStatus == 0 || sendStt != osOK)
 8005cd8:	4b20      	ldr	r3, [pc, #128]	; (8005d5c <ethSendTask+0xac>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d038      	beq.n	8005d52 <ethSendTask+0xa2>
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d135      	bne.n	8005d52 <ethSendTask+0xa2>
            continue;
        if (sendMsgObj.type == 1)
 8005ce6:	7b3b      	ldrb	r3, [r7, #12]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d128      	bne.n	8005d3e <ethSendTask+0x8e>
        {
            int nWritten = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
            size_t len;
            while (nWritten < sendMsgObj.len)
 8005cf0:	e020      	b.n	8005d34 <ethSendTask+0x84>
            {
                err = netconn_write_partly(
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <ethSendTask+0xb4>)
 8005cf4:	6818      	ldr	r0, [r3, #0]
                    conn,                                      //connection
                    (const void *)(sendMsgObj.ptr + nWritten), //buffer pointer
 8005cf6:	693a      	ldr	r2, [r7, #16]
                err = netconn_write_partly(
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                    (const void *)(sendMsgObj.ptr + nWritten), //buffer pointer
 8005cfa:	18d1      	adds	r1, r2, r3
                    (sendMsgObj.len - nWritten),               //buffer length
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	1ad3      	subs	r3, r2, r3
                err = netconn_write_partly(
 8005d02:	461a      	mov	r2, r3
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	2304      	movs	r3, #4
 8005d0a:	f009 f865 	bl	800edd8 <netconn_write_partly>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	77fb      	strb	r3, [r7, #31]
                    NETCONN_DONTBLOCK,                         //no copy
                    (size_t *)&len);                           //written len
                if (err == ERR_OK)
 8005d12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d105      	bne.n	8005d26 <ethSendTask+0x76>
                {
                    nWritten += (int)len;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	4413      	add	r3, r2
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
 8005d24:	e006      	b.n	8005d34 <ethSendTask+0x84>
                }
                else
                {
                    //re-connect
                    osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum);
 8005d26:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <ethSendTask+0xb8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f004 fa33 	bl	800a198 <osEventFlagsSet>
                    break;
 8005d32:	e00f      	b.n	8005d54 <ethSendTask+0xa4>
            while (nWritten < sendMsgObj.len)
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	dbda      	blt.n	8005cf2 <ethSendTask+0x42>
 8005d3c:	e7bb      	b.n	8005cb6 <ethSendTask+0x6>
                }
            }
        }
        else if (sendMsgObj.type == 2)
 8005d3e:	7b3b      	ldrb	r3, [r7, #12]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d1b8      	bne.n	8005cb6 <ethSendTask+0x6>
        {
            udp_client_send(sendMsgObj.ptr, sendMsgObj.len);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff ff54 	bl	8005bf8 <udp_client_send>
 8005d50:	e7b1      	b.n	8005cb6 <ethSendTask+0x6>
            continue;
 8005d52:	bf00      	nop
        sendStt = osMessageQueueGet(SendEthQueueID, &sendMsgObj, NULL, osWaitForever);
 8005d54:	e7af      	b.n	8005cb6 <ethSendTask+0x6>
 8005d56:	bf00      	nop
 8005d58:	20005658 	.word	0x20005658
 8005d5c:	200003d4 	.word	0x200003d4
 8005d60:	08020df0 	.word	0x08020df0
 8005d64:	20005e38 	.word	0x20005e38
 8005d68:	20005798 	.word	0x20005798

08005d6c <ethConnectRelease>:
        }
    }
}

void ethConnectRelease()
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
    //release tcp/udp stack
    ethConnectStatus = 0;
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <ethConnectRelease+0x30>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
    TCP_UDP_Stack_Release();
 8005d76:	f003 f939 	bl	8008fec <TCP_UDP_Stack_Release>

    netconn_close(conn);  //close session
 8005d7a:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <ethConnectRelease+0x34>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f009 f92c 	bl	800efdc <netconn_close>
    netconn_delete(conn); //free memory
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <ethConnectRelease+0x34>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f008 fddb 	bl	800e944 <netconn_delete>
    osDelay(RECONNECT_INTERVAR_ETH);
 8005d8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8005d92:	f004 f8b0 	bl	8009ef6 <osDelay>
}
 8005d96:	bf00      	nop
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	200003d4 	.word	0x200003d4
 8005da0:	20005e38 	.word	0x20005e38

08005da4 <ethConnectTcpUdp>:

//return 0 ~ success, -1 ~ fail
int ethConnectTcpUdp()
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
    ip_addr_t server_addr; //server address
    err_t err;
 
    int tryDhcp = 5;
 8005daa:	2305      	movs	r3, #5
 8005dac:	613b      	str	r3, [r7, #16]
    while (MX_LWIP_checkIsystem_ip_addr() == 0)
 8005dae:	e00b      	b.n	8005dc8 <ethConnectTcpUdp+0x24>
    {
        osDelay(1000);
 8005db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005db4:	f004 f89f 	bl	8009ef6 <osDelay>
        if(tryDhcp-- < 0)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1e5a      	subs	r2, r3, #1
 8005dbc:	613a      	str	r2, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	da02      	bge.n	8005dc8 <ethConnectTcpUdp+0x24>
        {
            //error connect
            return -1;
 8005dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc6:	e06c      	b.n	8005ea2 <ethConnectTcpUdp+0xfe>
    while (MX_LWIP_checkIsystem_ip_addr() == 0)
 8005dc8:	f003 fab6 	bl	8009338 <MX_LWIP_checkIsystem_ip_addr>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0ee      	beq.n	8005db0 <ethConnectTcpUdp+0xc>
        }
    }

    //debug
    uint8_t* ipLWIP = MX_LWIP_getIP();
 8005dd2:	f003 fac9 	bl	8009368 <MX_LWIP_getIP>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	60bb      	str	r3, [r7, #8]
    if(ipLWIP != NULL)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d012      	beq.n	8005e06 <ethConnectTcpUdp+0x62>
    {
        LOG_WRITE(">>> ip: %d %d %d %d\n", ipLWIP[0], ipLWIP[1], ipLWIP[2], ipLWIP[3]);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	4619      	mov	r1, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	3301      	adds	r3, #1
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	3302      	adds	r3, #2
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	3303      	adds	r3, #3
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	4603      	mov	r3, r0
 8005e00:	482a      	ldr	r0, [pc, #168]	; (8005eac <ethConnectTcpUdp+0x108>)
 8005e02:	f019 fd73 	bl	801f8ec <iprintf>
    }

    conn = netconn_new(NETCONN_TCP); //new tcp netconn
 8005e06:	2200      	movs	r2, #0
 8005e08:	2100      	movs	r1, #0
 8005e0a:	2010      	movs	r0, #16
 8005e0c:	f008 fcfc 	bl	800e808 <netconn_new_with_proto_and_callback>
 8005e10:	4603      	mov	r3, r0
 8005e12:	4a27      	ldr	r2, [pc, #156]	; (8005eb0 <ethConnectTcpUdp+0x10c>)
 8005e14:	6013      	str	r3, [r2, #0]

    if (conn != NULL)
 8005e16:	4b26      	ldr	r3, [pc, #152]	; (8005eb0 <ethConnectTcpUdp+0x10c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d03c      	beq.n	8005e98 <ethConnectTcpUdp+0xf4>
    {
        int tryGetIp = 5;
 8005e1e:	2305      	movs	r3, #5
 8005e20:	60fb      	str	r3, [r7, #12]
        while (tryGetIp--)
 8005e22:	e00a      	b.n	8005e3a <ethConnectTcpUdp+0x96>
        {
            err = netconn_gethostbyname(serverDomain, &server_addr);
 8005e24:	1d3b      	adds	r3, r7, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4822      	ldr	r0, [pc, #136]	; (8005eb4 <ethConnectTcpUdp+0x110>)
 8005e2a:	f009 f8ff 	bl	800f02c <netconn_gethostbyname>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	75fb      	strb	r3, [r7, #23]
            if (err == ERR_OK)
 8005e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <ethConnectTcpUdp+0xa2>
        while (tryGetIp--)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1e5a      	subs	r2, r3, #1
 8005e3e:	60fa      	str	r2, [r7, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1ef      	bne.n	8005e24 <ethConnectTcpUdp+0x80>
 8005e44:	e000      	b.n	8005e48 <ethConnectTcpUdp+0xa4>
            {
                break;
 8005e46:	bf00      	nop
            }
        }

        if (err == ERR_OK)
 8005e48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <ethConnectTcpUdp+0xc2>
            err = netconn_connect(conn, &server_addr, serverPort); //connect to the server
 8005e50:	4b17      	ldr	r3, [pc, #92]	; (8005eb0 <ethConnectTcpUdp+0x10c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <ethConnectTcpUdp+0x114>)
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	b292      	uxth	r2, r2
 8005e5a:	1d39      	adds	r1, r7, #4
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f008 fd8d 	bl	800e97c <netconn_connect>
 8005e62:	4603      	mov	r3, r0
 8005e64:	75fb      	strb	r3, [r7, #23]

        if (err == ERR_OK)
 8005e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d117      	bne.n	8005e9e <ethConnectTcpUdp+0xfa>
        {
            ethConnectStatus = 1; //done TCP
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <ethConnectTcpUdp+0x118>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
            udp_client_connect(server_addr, serverPort);
 8005e74:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <ethConnectTcpUdp+0x114>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fe5d 	bl	8005b3c <udp_client_connect>
            TCP_UDP_Stack_Init(ConnectEthEventID, doneTLSEthEnum, reConEthEnum, true);
 8005e82:	4b0f      	ldr	r3, [pc, #60]	; (8005ec0 <ethConnectTcpUdp+0x11c>)
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	2301      	movs	r3, #1
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2102      	movs	r1, #2
 8005e8c:	f003 f828 	bl	8008ee0 <TCP_UDP_Stack_Init>
            TCP_Request(); //request rsa pub key
 8005e90:	f003 f962 	bl	8009158 <TCP_Request>

            return 0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	e004      	b.n	8005ea2 <ethConnectTcpUdp+0xfe>
        }
    }
    else
    {
        LOG_WRITE("create new tcp conn error\n");
 8005e98:	480a      	ldr	r0, [pc, #40]	; (8005ec4 <ethConnectTcpUdp+0x120>)
 8005e9a:	f019 fdad 	bl	801f9f8 <puts>
    }
    return -1;
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295

}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	08020e08 	.word	0x08020e08
 8005eb0:	20005e38 	.word	0x20005e38
 8005eb4:	20000244 	.word	0x20000244
 8005eb8:	200002a8 	.word	0x200002a8
 8005ebc:	200003d4 	.word	0x200003d4
 8005ec0:	20005798 	.word	0x20005798
 8005ec4:	08020e20 	.word	0x08020e20

08005ec8 <ethRecv>:

//receive data, put in loop
void ethRecv()
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
    struct netbuf *buf;
    void *data;
    u16_t len; //buffer length

    err_t err = netconn_recv(conn, &buf);
 8005ece:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <ethRecv+0x74>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f107 0208 	add.w	r2, r7, #8
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f008 ff03 	bl	800ece4 <netconn_recv>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]

    LOG_WRITE("net conn recv %d\n", err);
 8005ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4815      	ldr	r0, [pc, #84]	; (8005f40 <ethRecv+0x78>)
 8005eea:	f019 fcff 	bl	801f8ec <iprintf>

    if (err == ERR_OK)
 8005eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d117      	bne.n	8005f26 <ethRecv+0x5e>
    {
        do
        {
            netbuf_data(buf, &data, &len); //receive data pointer & length
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	1cba      	adds	r2, r7, #2
 8005efa:	1d39      	adds	r1, r7, #4
 8005efc:	4618      	mov	r0, r3
 8005efe:	f00a fd0b 	bl	8010918 <netbuf_data>
            TCP_Packet_Analyze(data, len);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	887a      	ldrh	r2, [r7, #2]
 8005f06:	4611      	mov	r1, r2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f002 fef1 	bl	8008cf0 <TCP_Packet_Analyze>
        } while (netbuf_next(buf) >= 0); //check buffer empty
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f00a fd4b 	bl	80109ac <netbuf_next>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	daec      	bge.n	8005ef6 <ethRecv+0x2e>
        netbuf_delete(buf);              //clear buffer
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f00a fcda 	bl	80108d8 <netbuf_delete>
    }
    else
    {
        osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum);
    }
}
 8005f24:	e005      	b.n	8005f32 <ethRecv+0x6a>
        osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum);
 8005f26:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <ethRecv+0x7c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f004 f933 	bl	800a198 <osEventFlagsSet>
}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20005e38 	.word	0x20005e38
 8005f40:	08020e3c 	.word	0x08020e3c
 8005f44:	20005798 	.word	0x20005798

08005f48 <ethConnectTask>:
int countethConnectTask = 0;
void ethConnectTask()
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
    //first time
    if(ethConnectTcpUdp() != 0)
 8005f4e:	f7ff ff29 	bl	8005da4 <ethConnectTcpUdp>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <ethConnectTask+0x1c>
    {
        osEventFlagsSet(ConnectEthEventID, 1 << reConEthEnum); //to re connect
 8005f58:	4b1e      	ldr	r3, [pc, #120]	; (8005fd4 <ethConnectTask+0x8c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f004 f91a 	bl	800a198 <osEventFlagsSet>
    }

    LOG_WRITE("connectEthTask\n");
 8005f64:	481c      	ldr	r0, [pc, #112]	; (8005fd8 <ethConnectTask+0x90>)
 8005f66:	f019 fd47 	bl	801f9f8 <puts>
    int connectEthFlag;
    for (;;)
    {
        connectEthFlag = osEventFlagsWait(ConnectEthEventID, 0xFF, osFlagsWaitAny, 0);
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <ethConnectTask+0x8c>)
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2200      	movs	r2, #0
 8005f72:	21ff      	movs	r1, #255	; 0xff
 8005f74:	f004 f986 	bl	800a284 <osEventFlagsWait>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	607b      	str	r3, [r7, #4]
        countethConnectTask++;
 8005f7c:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <ethConnectTask+0x94>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <ethConnectTask+0x94>)
 8005f84:	6013      	str	r3, [r2, #0]
        // LOG_WRITE("connectEthFlag %d\n", connectEthFlag);
        if (connectEthFlag & (1 << errorEthEnum))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <ethConnectTask+0x50>
        {
            LOG_WRITE("conEthFlag err\n");
 8005f90:	4813      	ldr	r0, [pc, #76]	; (8005fe0 <ethConnectTask+0x98>)
 8005f92:	f019 fd31 	bl	801f9f8 <puts>
 8005f96:	e01a      	b.n	8005fce <ethConnectTask+0x86>
            //reboot stm32 by watch-dog
        }
        else if (connectEthFlag & (1 << reConEthEnum))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00d      	beq.n	8005fbe <ethConnectTask+0x76>
        {
            ethConnectRelease();
 8005fa2:	f7ff fee3 	bl	8005d6c <ethConnectRelease>
            if(ethConnectTcpUdp() != 0)
 8005fa6:	f7ff fefd 	bl	8005da4 <ethConnectTcpUdp>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00e      	beq.n	8005fce <ethConnectTask+0x86>
            {
                osEventFlagsSet(ConnectEthEventID, 1 << errConEthEnum); //to re connect
 8005fb0:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <ethConnectTask+0x8c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2102      	movs	r1, #2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f004 f8ee 	bl	800a198 <osEventFlagsSet>
                continue;
 8005fbc:	e009      	b.n	8005fd2 <ethConnectTask+0x8a>
            }
        }
        else if (connectEthFlag & (1 << doneTLSEthEnum))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <ethConnectTask+0x86>
        {
            ethConnectStatus = 2;
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <ethConnectTask+0x9c>)
 8005fca:	2202      	movs	r2, #2
 8005fcc:	601a      	str	r2, [r3, #0]
        }
        
        //recv data
        ethRecv();
 8005fce:	f7ff ff7b 	bl	8005ec8 <ethRecv>
        connectEthFlag = osEventFlagsWait(ConnectEthEventID, 0xFF, osFlagsWaitAny, 0);
 8005fd2:	e7ca      	b.n	8005f6a <ethConnectTask+0x22>
 8005fd4:	20005798 	.word	0x20005798
 8005fd8:	08020e50 	.word	0x08020e50
 8005fdc:	200003d8 	.word	0x200003d8
 8005fe0:	08020e60 	.word	0x08020e60
 8005fe4:	200003d4 	.word	0x200003d4

08005fe8 <ethSendIP>:
    }
}

bool ethSendIP(int type, uint8_t *data, int len)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
    if (type != 1 && type != 2)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d004      	beq.n	8006004 <ethSendIP+0x1c>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d001      	beq.n	8006004 <ethSendIP+0x1c>
    {
        return false;
 8006000:	2300      	movs	r3, #0
 8006002:	e019      	b.n	8006038 <ethSendIP+0x50>
    }
    LOG_WRITE("eth send %d\n", type);
 8006004:	68f9      	ldr	r1, [r7, #12]
 8006006:	480e      	ldr	r0, [pc, #56]	; (8006040 <ethSendIP+0x58>)
 8006008:	f019 fc70 	bl	801f8ec <iprintf>
    sendEthPack sendMsgObj;
    sendMsgObj.ptr = data;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	61bb      	str	r3, [r7, #24]
    sendMsgObj.len = len;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	61fb      	str	r3, [r7, #28]
    sendMsgObj.type = type;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	753b      	strb	r3, [r7, #20]
    osStatus_t sendMsgStt = osMessageQueuePut(SendEthQueueID, &sendMsgObj, 0U, 0U);
 800601a:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <ethSendIP+0x5c>)
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	f107 0110 	add.w	r1, r7, #16
 8006022:	2300      	movs	r3, #0
 8006024:	2200      	movs	r2, #0
 8006026:	f004 fc79 	bl	800a91c <osMessageQueuePut>
 800602a:	6278      	str	r0, [r7, #36]	; 0x24

    return (sendMsgStt == osOK);
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	bf0c      	ite	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	2300      	movne	r3, #0
 8006036:	b2db      	uxtb	r3, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	3728      	adds	r7, #40	; 0x28
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	08020e70 	.word	0x08020e70
 8006044:	20005658 	.word	0x20005658

08006048 <md5hash>:
#include "md5.h"

uint8_t md5sum[MD5_LEN];

uint8_t* md5hash(uint8_t *initial_msg, int initial_len) {
 8006048:	b580      	push	{r7, lr}
 800604a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800604e:	af00      	add	r7, sp, #0
 8006050:	1d3b      	adds	r3, r7, #4
 8006052:	6018      	str	r0, [r3, #0]
 8006054:	463b      	mov	r3, r7
 8006056:	6019      	str	r1, [r3, #0]
    uint32_t *h0, *h1, *h2, *h3;
    h0 = (uint32_t*)md5sum;
 8006058:	4bb1      	ldr	r3, [pc, #708]	; (8006320 <md5hash+0x2d8>)
 800605a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    h1 = (uint32_t*)(md5sum + 4);
 800605e:	4bb1      	ldr	r3, [pc, #708]	; (8006324 <md5hash+0x2dc>)
 8006060:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    h2 = (uint32_t*)(md5sum + 8);
 8006064:	4bb0      	ldr	r3, [pc, #704]	; (8006328 <md5hash+0x2e0>)
 8006066:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    h3 = (uint32_t*)(md5sum + 12);
 800606a:	4bb0      	ldr	r3, [pc, #704]	; (800632c <md5hash+0x2e4>)
 800606c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

    // Message (to prepare)
    uint8_t *msg = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 
    // Note: All variables are unsigned 32 bit and wrap modulo 2^32 when calculating
 
    // r specifies the per-round shift amounts
 
    uint32_t r[] = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
 8006076:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800607a:	4aad      	ldr	r2, [pc, #692]	; (8006330 <md5hash+0x2e8>)
 800607c:	4618      	mov	r0, r3
 800607e:	4611      	mov	r1, r2
 8006080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006084:	461a      	mov	r2, r3
 8006086:	f019 fb47 	bl	801f718 <memcpy>
                    5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
                    4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
                    6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};

    // Use binary integer part of the sines of integers (in radians) as constants// Initialize variables:
    uint32_t k[] = {
 800608a:	f107 0310 	add.w	r3, r7, #16
 800608e:	4aa9      	ldr	r2, [pc, #676]	; (8006334 <md5hash+0x2ec>)
 8006090:	4618      	mov	r0, r3
 8006092:	4611      	mov	r1, r2
 8006094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006098:	461a      	mov	r2, r3
 800609a:	f019 fb3d 	bl	801f718 <memcpy>
        0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
        0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
        0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
        0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391};
 
    *h0 = 0x67452301;
 800609e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80060a2:	4aa5      	ldr	r2, [pc, #660]	; (8006338 <md5hash+0x2f0>)
 80060a4:	601a      	str	r2, [r3, #0]
    *h1 = 0xefcdab89;
 80060a6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80060aa:	4aa4      	ldr	r2, [pc, #656]	; (800633c <md5hash+0x2f4>)
 80060ac:	601a      	str	r2, [r3, #0]
    *h2 = 0x98badcfe;
 80060ae:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80060b2:	4aa3      	ldr	r2, [pc, #652]	; (8006340 <md5hash+0x2f8>)
 80060b4:	601a      	str	r2, [r3, #0]
    *h3 = 0x10325476;
 80060b6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80060ba:	4aa2      	ldr	r2, [pc, #648]	; (8006344 <md5hash+0x2fc>)
 80060bc:	601a      	str	r2, [r3, #0]
 
    // Pre-processing: padding with zeros
    //append "0" bit until message length in bit ≡ 448 (mod 512)
    //append length mod (2 pow 64) to message
 
    int new_len = ((((initial_len + 8) / 64) + 1) * 64) - 8;
 80060be:	463b      	mov	r3, r7
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3308      	adds	r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	da00      	bge.n	80060ca <md5hash+0x82>
 80060c8:	333f      	adds	r3, #63	; 0x3f
 80060ca:	119b      	asrs	r3, r3, #6
 80060cc:	3301      	adds	r3, #1
 80060ce:	019b      	lsls	r3, r3, #6
 80060d0:	3b08      	subs	r3, #8
 80060d2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 
    msg = calloc(new_len + 64, 1); // also appends "0" bits 
 80060d6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80060da:	3340      	adds	r3, #64	; 0x40
 80060dc:	2101      	movs	r1, #1
 80060de:	4618      	mov	r0, r3
 80060e0:	f019 f9d6 	bl	801f490 <calloc>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
                                   // (we alloc also 64 extra bytes...)
    memcpy(msg, initial_msg, initial_len);
 80060ea:	463b      	mov	r3, r7
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	1d3b      	adds	r3, r7, #4
 80060f0:	6819      	ldr	r1, [r3, #0]
 80060f2:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80060f6:	f019 fb0f 	bl	801f718 <memcpy>
    msg[initial_len] = 128; // write the "1" bit
 80060fa:	463b      	mov	r3, r7
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8006102:	4413      	add	r3, r2
 8006104:	2280      	movs	r2, #128	; 0x80
 8006106:	701a      	strb	r2, [r3, #0]
 
    uint32_t bits_len = 8*initial_len; // note, we append the len
 8006108:	463b      	mov	r3, r7
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	461a      	mov	r2, r3
 8006110:	f107 030c 	add.w	r3, r7, #12
 8006114:	601a      	str	r2, [r3, #0]
    memcpy(msg + new_len, &bits_len, 4);           // in bits at the end of the buffer
 8006116:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800611a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800611e:	4413      	add	r3, r2
 8006120:	f107 020c 	add.w	r2, r7, #12
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	601a      	str	r2, [r3, #0]
 
    // Process the message in successive 512-bit chunks:
    //for each 512-bit chunk of message:
    int offset;
    for(offset=0; offset<new_len; offset += (512/8)) {
 8006128:	2300      	movs	r3, #0
 800612a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800612e:	e0e5      	b.n	80062fc <md5hash+0x2b4>
 
        // break chunk into sixteen 32-bit words w[j], 0 ≤ j ≤ 15
        uint32_t *w = (uint32_t *) (msg + offset);
 8006130:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8006134:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8006138:	4413      	add	r3, r2
 800613a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 
        // Initialize hash value for this chunk:
        uint32_t a = *h0;
 800613e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
        uint32_t b = *h1;
 8006148:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
        uint32_t c = *h2;
 8006152:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        uint32_t d = *h3;
 800615c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 
        // Main loop:
        uint32_t i;
        for(i = 0; i<64; i++) {
 8006166:	2300      	movs	r3, #0
 8006168:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800616c:	e098      	b.n	80062a0 <md5hash+0x258>
            uint32_t f, g;

                if (i < 16) {
 800616e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006172:	2b0f      	cmp	r3, #15
 8006174:	d812      	bhi.n	800619c <md5hash+0x154>
                f = (b & c) | ((~b) & d);
 8006176:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800617a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800617e:	401a      	ands	r2, r3
 8006180:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006184:	43d9      	mvns	r1, r3
 8006186:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800618a:	400b      	ands	r3, r1
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = i;
 8006192:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006196:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 800619a:	e049      	b.n	8006230 <md5hash+0x1e8>
            } else if (i < 32) {
 800619c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80061a0:	2b1f      	cmp	r3, #31
 80061a2:	d818      	bhi.n	80061d6 <md5hash+0x18e>
                f = (d & b) | ((~d) & c);
 80061a4:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80061a8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80061ac:	401a      	ands	r2, r3
 80061ae:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80061b2:	43d9      	mvns	r1, r3
 80061b4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80061b8:	400b      	ands	r3, r1
 80061ba:	4313      	orrs	r3, r2
 80061bc:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = (5*i + 1) % 16;
 80061c0:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	3301      	adds	r3, #1
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80061d4:	e02c      	b.n	8006230 <md5hash+0x1e8>
            } else if (i < 48) {
 80061d6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80061da:	2b2f      	cmp	r3, #47	; 0x2f
 80061dc:	d814      	bhi.n	8006208 <md5hash+0x1c0>
                f = b ^ c ^ d;
 80061de:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80061e2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80061e6:	4053      	eors	r3, r2
 80061e8:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80061ec:	4053      	eors	r3, r2
 80061ee:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = (3*i + 5) % 16;          
 80061f2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	3305      	adds	r3, #5
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8006206:	e013      	b.n	8006230 <md5hash+0x1e8>
            } else {
                f = c ^ (b | (~d));
 8006208:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800620c:	43da      	mvns	r2, r3
 800620e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006212:	4313      	orrs	r3, r2
 8006214:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8006218:	4053      	eors	r3, r2
 800621a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                g = (7*i) % 16;
 800621e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006222:	4613      	mov	r3, r2
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	1a9b      	subs	r3, r3, r2
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
            }

            uint32_t temp = d;
 8006230:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006234:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
            d = c;
 8006238:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800623c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
            c = b;
 8006240:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006244:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
            // printf("rotateLeft(%x + %x + %x + %x, %d)\n", a, f, k[i], w[g], r[i]);
            b = b + LEFTROTATE((a + f + k[i] + w[g]), r[i]);
 8006248:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800624c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8006250:	441a      	add	r2, r3
 8006252:	f107 0310 	add.w	r3, r7, #16
 8006256:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800625a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800625e:	441a      	add	r2, r3
 8006260:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800626a:	440b      	add	r3, r1
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	441a      	add	r2, r3
 8006270:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006274:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8006278:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800627c:	f1c3 0320 	rsb	r3, r3, #32
 8006280:	fa62 f303 	ror.w	r3, r2, r3
 8006284:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006288:	4413      	add	r3, r2
 800628a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
            a = temp;
 800628e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006292:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
        for(i = 0; i<64; i++) {
 8006296:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800629a:	3301      	adds	r3, #1
 800629c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80062a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80062a4:	2b3f      	cmp	r3, #63	; 0x3f
 80062a6:	f67f af62 	bls.w	800616e <md5hash+0x126>
        }
 
        // Add this chunk's hash to result so far:
        *h0 += a;
 80062aa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80062b4:	441a      	add	r2, r3
 80062b6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80062ba:	601a      	str	r2, [r3, #0]
        *h1 += b;
 80062bc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80062c6:	441a      	add	r2, r3
 80062c8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80062cc:	601a      	str	r2, [r3, #0]
        *h2 += c;
 80062ce:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80062d8:	441a      	add	r2, r3
 80062da:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80062de:	601a      	str	r2, [r3, #0]
        *h3 += d;
 80062e0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80062ea:	441a      	add	r2, r3
 80062ec:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80062f0:	601a      	str	r2, [r3, #0]
    for(offset=0; offset<new_len; offset += (512/8)) {
 80062f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80062f6:	3340      	adds	r3, #64	; 0x40
 80062f8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80062fc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8006300:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8006304:	429a      	cmp	r2, r3
 8006306:	f6ff af13 	blt.w	8006130 <md5hash+0xe8>
    }
 
    // cleanup
    free(msg);
 800630a:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800630e:	f019 f9ed 	bl	801f6ec <free>

    return md5sum;
 8006312:	4b03      	ldr	r3, [pc, #12]	; (8006320 <md5hash+0x2d8>)
 8006314:	4618      	mov	r0, r3
 8006316:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20005e40 	.word	0x20005e40
 8006324:	20005e44 	.word	0x20005e44
 8006328:	20005e48 	.word	0x20005e48
 800632c:	20005e4c 	.word	0x20005e4c
 8006330:	08020e80 	.word	0x08020e80
 8006334:	08020f80 	.word	0x08020f80
 8006338:	67452301 	.word	0x67452301
 800633c:	efcdab89 	.word	0xefcdab89
 8006340:	98badcfe 	.word	0x98badcfe
 8006344:	10325476 	.word	0x10325476

08006348 <generate_rand>:
int rsa_public_decrypt (uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk);
int rsa_private_encrypt(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_sk_t *sk);
int rsa_private_decrypt(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_sk_t *sk);

void generate_rand(uint8_t *block, uint32_t block_len)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i=0; i<block_len; i++) {
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	e013      	b.n	8006380 <generate_rand+0x38>
        srand ((unsigned)time(NULL));
 8006358:	2000      	movs	r0, #0
 800635a:	f019 fcc5 	bl	801fce8 <time>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4613      	mov	r3, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f019 fb4f 	bl	801fa08 <srand>
        block[i] = rand();
 800636a:	f019 fb7b 	bl	801fa64 <rand>
 800636e:	4601      	mov	r1, r0
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	b2ca      	uxtb	r2, r1
 8006378:	701a      	strb	r2, [r3, #0]
    for(i=0; i<block_len; i++) {
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3301      	adds	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d3e7      	bcc.n	8006358 <generate_rand+0x10>
    }
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <rsa_public_encrypt>:
static int public_block_operation(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk);
static int private_block_operation(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_sk_t *sk);

uint8_t pkcs_block[RSA_MAX_MODULUS_LEN];
int rsa_public_encrypt(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	; 0x28
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
    int status;
    uint8_t byte;// pkcs_block[RSA_MAX_MODULUS_LEN];
    uint32_t i, modulus_len;

    modulus_len = (pk->bits + 7) / 8;
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3307      	adds	r3, #7
 80063a8:	08db      	lsrs	r3, r3, #3
 80063aa:	61bb      	str	r3, [r7, #24]
    if(in_len + 11 > modulus_len) {
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	330b      	adds	r3, #11
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d202      	bcs.n	80063bc <rsa_public_encrypt+0x28>
        return ERR_WRONG_LEN;
 80063b6:	f241 0302 	movw	r3, #4098	; 0x1002
 80063ba:	e041      	b.n	8006440 <rsa_public_encrypt+0xac>
    }

    pkcs_block[0] = 0;
 80063bc:	4b22      	ldr	r3, [pc, #136]	; (8006448 <rsa_public_encrypt+0xb4>)
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
    pkcs_block[1] = 2;
 80063c2:	4b21      	ldr	r3, [pc, #132]	; (8006448 <rsa_public_encrypt+0xb4>)
 80063c4:	2202      	movs	r2, #2
 80063c6:	705a      	strb	r2, [r3, #1]
    for(i=2; i<modulus_len-in_len-1; i++) {
 80063c8:	2302      	movs	r3, #2
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	e011      	b.n	80063f2 <rsa_public_encrypt+0x5e>
        do {
            generate_rand(&byte, 1);
 80063ce:	f107 0313 	add.w	r3, r7, #19
 80063d2:	2101      	movs	r1, #1
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff ffb7 	bl	8006348 <generate_rand>
        } while(byte == 0);
 80063da:	7cfb      	ldrb	r3, [r7, #19]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f6      	beq.n	80063ce <rsa_public_encrypt+0x3a>
        pkcs_block[i] = byte;
 80063e0:	7cf9      	ldrb	r1, [r7, #19]
 80063e2:	4a19      	ldr	r2, [pc, #100]	; (8006448 <rsa_public_encrypt+0xb4>)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	460a      	mov	r2, r1
 80063ea:	701a      	strb	r2, [r3, #0]
    for(i=2; i<modulus_len-in_len-1; i++) {
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d3e6      	bcc.n	80063ce <rsa_public_encrypt+0x3a>
    }

    pkcs_block[i++] = 0;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	61fa      	str	r2, [r7, #28]
 8006406:	4a10      	ldr	r2, [pc, #64]	; (8006448 <rsa_public_encrypt+0xb4>)
 8006408:	2100      	movs	r1, #0
 800640a:	54d1      	strb	r1, [r2, r3]

    memcpy((uint8_t *)&pkcs_block[i], (uint8_t *)in, in_len);
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	4a0e      	ldr	r2, [pc, #56]	; (8006448 <rsa_public_encrypt+0xb4>)
 8006410:	4413      	add	r3, r2
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	4618      	mov	r0, r3
 8006418:	f019 f97e 	bl	801f718 <memcpy>
    status = public_block_operation(out, out_len, pkcs_block, modulus_len, pk);
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	4a09      	ldr	r2, [pc, #36]	; (8006448 <rsa_public_encrypt+0xb4>)
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f810 	bl	800644c <public_block_operation>
 800642c:	6178      	str	r0, [r7, #20]

    // Clear potentially sensitive information
    byte = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	74fb      	strb	r3, [r7, #19]
    memset((uint8_t *)pkcs_block, 0, sizeof(pkcs_block));
 8006432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006436:	2100      	movs	r1, #0
 8006438:	4803      	ldr	r0, [pc, #12]	; (8006448 <rsa_public_encrypt+0xb4>)
 800643a:	f019 f995 	bl	801f768 <memset>

    return status;
 800643e:	697b      	ldr	r3, [r7, #20]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3720      	adds	r7, #32
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	20005f54 	.word	0x20005f54

0800644c <public_block_operation>:

    return status;
}
bn_t c[BN_MAX_DIGITS], e[BN_MAX_DIGITS], m[BN_MAX_DIGITS], n[BN_MAX_DIGITS];
static int public_block_operation(uint8_t *out, uint32_t *out_len, uint8_t *in, uint32_t in_len, rsa_pk_t *pk)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af02      	add	r7, sp, #8
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
    uint32_t edigits, ndigits;

    bn_decode(m, BN_MAX_DIGITS, in, in_len);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	2141      	movs	r1, #65	; 0x41
 8006460:	4828      	ldr	r0, [pc, #160]	; (8006504 <public_block_operation+0xb8>)
 8006462:	f7fe fce9 	bl	8004e38 <bn_decode>
    bn_decode(n, BN_MAX_DIGITS, pk->modulus, RSA_MAX_MODULUS_LEN);
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	1d1a      	adds	r2, r3, #4
 800646a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800646e:	2141      	movs	r1, #65	; 0x41
 8006470:	4825      	ldr	r0, [pc, #148]	; (8006508 <public_block_operation+0xbc>)
 8006472:	f7fe fce1 	bl	8004e38 <bn_decode>
    bn_decode(e, BN_MAX_DIGITS, pk->exponent, RSA_MAX_MODULUS_LEN);
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800647c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006480:	2141      	movs	r1, #65	; 0x41
 8006482:	4822      	ldr	r0, [pc, #136]	; (800650c <public_block_operation+0xc0>)
 8006484:	f7fe fcd8 	bl	8004e38 <bn_decode>

    ndigits = bn_digits(n, BN_MAX_DIGITS);
 8006488:	2141      	movs	r1, #65	; 0x41
 800648a:	481f      	ldr	r0, [pc, #124]	; (8006508 <public_block_operation+0xbc>)
 800648c:	f7ff f9cf 	bl	800582e <bn_digits>
 8006490:	6178      	str	r0, [r7, #20]
    edigits = bn_digits(e, BN_MAX_DIGITS);
 8006492:	2141      	movs	r1, #65	; 0x41
 8006494:	481d      	ldr	r0, [pc, #116]	; (800650c <public_block_operation+0xc0>)
 8006496:	f7ff f9ca 	bl	800582e <bn_digits>
 800649a:	6138      	str	r0, [r7, #16]

    if(bn_cmp(m, n, ndigits) >= 0) {
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	491a      	ldr	r1, [pc, #104]	; (8006508 <public_block_operation+0xbc>)
 80064a0:	4818      	ldr	r0, [pc, #96]	; (8006504 <public_block_operation+0xb8>)
 80064a2:	f7ff f990 	bl	80057c6 <bn_cmp>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	db02      	blt.n	80064b2 <public_block_operation+0x66>
        return ERR_WRONG_DATA;
 80064ac:	f241 0301 	movw	r3, #4097	; 0x1001
 80064b0:	e023      	b.n	80064fa <public_block_operation+0xae>
    }

    bn_mod_exp(c, m, e, edigits, n, ndigits);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	4b14      	ldr	r3, [pc, #80]	; (8006508 <public_block_operation+0xbc>)
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4a13      	ldr	r2, [pc, #76]	; (800650c <public_block_operation+0xc0>)
 80064be:	4911      	ldr	r1, [pc, #68]	; (8006504 <public_block_operation+0xb8>)
 80064c0:	4813      	ldr	r0, [pc, #76]	; (8006510 <public_block_operation+0xc4>)
 80064c2:	f7ff f897 	bl	80055f4 <bn_mod_exp>

    *out_len = (pk->bits + 7) / 8;
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3307      	adds	r3, #7
 80064cc:	08da      	lsrs	r2, r3, #3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	601a      	str	r2, [r3, #0]
    bn_encode(out, *out_len, c, ndigits);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	6819      	ldr	r1, [r3, #0]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	4a0d      	ldr	r2, [pc, #52]	; (8006510 <public_block_operation+0xc4>)
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7fe fcfa 	bl	8004ed4 <bn_encode>

    // Clear potentially sensitive information
    memset((uint8_t *)c, 0, sizeof(c));
 80064e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80064e4:	2100      	movs	r1, #0
 80064e6:	480a      	ldr	r0, [pc, #40]	; (8006510 <public_block_operation+0xc4>)
 80064e8:	f019 f93e 	bl	801f768 <memset>
    memset((uint8_t *)m, 0, sizeof(m));
 80064ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80064f0:	2100      	movs	r1, #0
 80064f2:	4804      	ldr	r0, [pc, #16]	; (8006504 <public_block_operation+0xb8>)
 80064f4:	f019 f938 	bl	801f768 <memset>

    return 0;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	2000625c 	.word	0x2000625c
 8006508:	20005e50 	.word	0x20005e50
 800650c:	20006158 	.word	0x20006158
 8006510:	20006054 	.word	0x20006054

08006514 <RSA2048_Pubkey_Encrypt>:
    return 0;
}

rsa_pk_t pk = {0};
//return output len when success
int RSA2048_Pubkey_Encrypt(uint8_t* pubkey, int pubkeyLen, uint8_t* input, int inputLen, uint8_t* output) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]


    //exchange pubkey
    uint8_t tmp = pubkey[0];
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	75fb      	strb	r3, [r7, #23]
    pubkey[0] = pubkey[1];
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	785a      	ldrb	r2, [r3, #1]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	701a      	strb	r2, [r3, #0]
    pubkey[1] = tmp;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3301      	adds	r3, #1
 8006534:	7dfa      	ldrb	r2, [r7, #23]
 8006536:	701a      	strb	r2, [r3, #0]

    tmp = pubkey[pubkeyLen - 2];
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	3b02      	subs	r3, #2
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	75fb      	strb	r3, [r7, #23]
    pubkey[pubkeyLen - 2] = pubkey[pubkeyLen - 1];
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	3b01      	subs	r3, #1
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	441a      	add	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	3b02      	subs	r3, #2
 8006550:	68f9      	ldr	r1, [r7, #12]
 8006552:	440b      	add	r3, r1
 8006554:	7812      	ldrb	r2, [r2, #0]
 8006556:	701a      	strb	r2, [r3, #0]
    pubkey[pubkeyLen - 1]  = tmp;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	3b01      	subs	r3, #1
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	7dfa      	ldrb	r2, [r7, #23]
 8006562:	701a      	strb	r2, [r3, #0]

    pk.bits = KEY_M_BITS;
 8006564:	4b25      	ldr	r3, [pc, #148]	; (80065fc <RSA2048_Pubkey_Encrypt+0xe8>)
 8006566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800656a:	601a      	str	r2, [r3, #0]
    memcpy(&pk.modulus         [RSA_MAX_MODULUS_LEN- pubkeyLen],  pubkey,  pubkeyLen);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006572:	4a22      	ldr	r2, [pc, #136]	; (80065fc <RSA2048_Pubkey_Encrypt+0xe8>)
 8006574:	4413      	add	r3, r2
 8006576:	3304      	adds	r3, #4
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	4618      	mov	r0, r3
 800657e:	f019 f8cb 	bl	801f718 <memcpy>
    // memcpy(&pk.modulus         [0],  key_m,  256);
    memcpy(&pk.exponent        [RSA_MAX_MODULUS_LEN-sizeof(key_e) ],  key_e,  sizeof(key_e ));
 8006582:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <RSA2048_Pubkey_Encrypt+0xe8>)
 8006584:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <RSA2048_Pubkey_Encrypt+0xec>)
 8006586:	f203 2301 	addw	r3, r3, #513	; 0x201
 800658a:	8811      	ldrh	r1, [r2, #0]
 800658c:	7892      	ldrb	r2, [r2, #2]
 800658e:	8019      	strh	r1, [r3, #0]
 8006590:	709a      	strb	r2, [r3, #2]

    uint32_t outputLen;
    
    if(rsa_public_encrypt(output, &outputLen, (uint8_t*)input, inputLen, &pk) == 0) {
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	f107 0110 	add.w	r1, r7, #16
 8006598:	4a18      	ldr	r2, [pc, #96]	; (80065fc <RSA2048_Pubkey_Encrypt+0xe8>)
 800659a:	9200      	str	r2, [sp, #0]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6a38      	ldr	r0, [r7, #32]
 80065a0:	f7ff fef8 	bl	8006394 <rsa_public_encrypt>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d122      	bne.n	80065f0 <RSA2048_Pubkey_Encrypt+0xdc>
        //trick exchange first and last two bytes
    	tmp = output[0]; output[0] = output[1]; output[1] = tmp;
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	75fb      	strb	r3, [r7, #23]
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	785a      	ldrb	r2, [r3, #1]
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	3301      	adds	r3, #1
 80065bc:	7dfa      	ldrb	r2, [r7, #23]
 80065be:	701a      	strb	r2, [r3, #0]
        tmp = output[outputLen - 2]; output[outputLen - 2] = output[outputLen - 1]; output[outputLen - 1] = tmp;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	3b02      	subs	r3, #2
 80065c4:	6a3a      	ldr	r2, [r7, #32]
 80065c6:	4413      	add	r3, r2
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	75fb      	strb	r3, [r7, #23]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	6a3a      	ldr	r2, [r7, #32]
 80065d2:	441a      	add	r2, r3
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	3b02      	subs	r3, #2
 80065d8:	6a39      	ldr	r1, [r7, #32]
 80065da:	440b      	add	r3, r1
 80065dc:	7812      	ldrb	r2, [r2, #0]
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	6a3a      	ldr	r2, [r7, #32]
 80065e6:	4413      	add	r3, r2
 80065e8:	7dfa      	ldrb	r2, [r7, #23]
 80065ea:	701a      	strb	r2, [r3, #0]
        return outputLen;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	e001      	b.n	80065f4 <RSA2048_Pubkey_Encrypt+0xe0>
    }

    return -1;
 80065f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	200003dc 	.word	0x200003dc
 8006600:	20000240 	.word	0x20000240

08006604 <LL_DMA_EnableStream>:
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800660e:	4a0c      	ldr	r2, [pc, #48]	; (8006640 <LL_DMA_EnableStream+0x3c>)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	4413      	add	r3, r2
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4413      	add	r3, r2
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4908      	ldr	r1, [pc, #32]	; (8006640 <LL_DMA_EnableStream+0x3c>)
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	440a      	add	r2, r1
 8006624:	7812      	ldrb	r2, [r2, #0]
 8006626:	4611      	mov	r1, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	440a      	add	r2, r1
 800662c:	f043 0301 	orr.w	r3, r3, #1
 8006630:	6013      	str	r3, [r2, #0]
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	08025570 	.word	0x08025570

08006644 <LL_DMA_DisableStream>:
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800664e:	4a0c      	ldr	r2, [pc, #48]	; (8006680 <LL_DMA_DisableStream+0x3c>)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	4413      	add	r3, r2
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4413      	add	r3, r2
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4908      	ldr	r1, [pc, #32]	; (8006680 <LL_DMA_DisableStream+0x3c>)
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	440a      	add	r2, r1
 8006664:	7812      	ldrb	r2, [r2, #0]
 8006666:	4611      	mov	r1, r2
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	440a      	add	r2, r1
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	6013      	str	r3, [r2, #0]
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	08025570 	.word	0x08025570

08006684 <LL_DMA_IsEnabledStream>:
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 800668e:	4a0a      	ldr	r2, [pc, #40]	; (80066b8 <LL_DMA_IsEnabledStream+0x34>)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	4413      	add	r3, r2
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4413      	add	r3, r2
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	bf0c      	ite	eq
 80066a6:	2301      	moveq	r3, #1
 80066a8:	2300      	movne	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	08025570 	.word	0x08025570

080066bc <LL_DMA_SetDataTransferDirection>:
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80066c8:	4a0d      	ldr	r2, [pc, #52]	; (8006700 <LL_DMA_SetDataTransferDirection+0x44>)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4413      	add	r3, r2
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066dc:	4908      	ldr	r1, [pc, #32]	; (8006700 <LL_DMA_SetDataTransferDirection+0x44>)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	440b      	add	r3, r1
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	4619      	mov	r1, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	440b      	add	r3, r1
 80066ea:	4619      	mov	r1, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	600b      	str	r3, [r1, #0]
}
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	08025570 	.word	0x08025570

08006704 <LL_DMA_SetMode>:
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8006710:	4a0d      	ldr	r2, [pc, #52]	; (8006748 <LL_DMA_SetMode+0x44>)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	4413      	add	r3, r2
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4413      	add	r3, r2
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8006724:	4908      	ldr	r1, [pc, #32]	; (8006748 <LL_DMA_SetMode+0x44>)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	440b      	add	r3, r1
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	4619      	mov	r1, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	440b      	add	r3, r1
 8006732:	4619      	mov	r1, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4313      	orrs	r3, r2
 8006738:	600b      	str	r3, [r1, #0]
}
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	08025570 	.word	0x08025570

0800674c <LL_DMA_SetPeriphIncMode>:
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8006758:	4a0d      	ldr	r2, [pc, #52]	; (8006790 <LL_DMA_SetPeriphIncMode+0x44>)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	4413      	add	r3, r2
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4413      	add	r3, r2
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800676c:	4908      	ldr	r1, [pc, #32]	; (8006790 <LL_DMA_SetPeriphIncMode+0x44>)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	440b      	add	r3, r1
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	4619      	mov	r1, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	440b      	add	r3, r1
 800677a:	4619      	mov	r1, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4313      	orrs	r3, r2
 8006780:	600b      	str	r3, [r1, #0]
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	08025570 	.word	0x08025570

08006794 <LL_DMA_SetMemoryIncMode>:
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80067a0:	4a0d      	ldr	r2, [pc, #52]	; (80067d8 <LL_DMA_SetMemoryIncMode+0x44>)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4413      	add	r3, r2
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80067b4:	4908      	ldr	r1, [pc, #32]	; (80067d8 <LL_DMA_SetMemoryIncMode+0x44>)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	440b      	add	r3, r1
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	4619      	mov	r1, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	440b      	add	r3, r1
 80067c2:	4619      	mov	r1, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	600b      	str	r3, [r1, #0]
}
 80067ca:	bf00      	nop
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	08025570 	.word	0x08025570

080067dc <LL_DMA_SetPeriphSize>:
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80067e8:	4a0d      	ldr	r2, [pc, #52]	; (8006820 <LL_DMA_SetPeriphSize+0x44>)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	4413      	add	r3, r2
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	461a      	mov	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80067fc:	4908      	ldr	r1, [pc, #32]	; (8006820 <LL_DMA_SetPeriphSize+0x44>)
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	440b      	add	r3, r1
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	4619      	mov	r1, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	440b      	add	r3, r1
 800680a:	4619      	mov	r1, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4313      	orrs	r3, r2
 8006810:	600b      	str	r3, [r1, #0]
}
 8006812:	bf00      	nop
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	08025570 	.word	0x08025570

08006824 <LL_DMA_SetMemorySize>:
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8006830:	4a0d      	ldr	r2, [pc, #52]	; (8006868 <LL_DMA_SetMemorySize+0x44>)
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4413      	add	r3, r2
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8006844:	4908      	ldr	r1, [pc, #32]	; (8006868 <LL_DMA_SetMemorySize+0x44>)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	440b      	add	r3, r1
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	4619      	mov	r1, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	440b      	add	r3, r1
 8006852:	4619      	mov	r1, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4313      	orrs	r3, r2
 8006858:	600b      	str	r3, [r1, #0]
}
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	08025570 	.word	0x08025570

0800686c <LL_DMA_SetStreamPriorityLevel>:
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8006878:	4a0d      	ldr	r2, [pc, #52]	; (80068b0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4413      	add	r3, r2
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4413      	add	r3, r2
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800688c:	4908      	ldr	r1, [pc, #32]	; (80068b0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	440b      	add	r3, r1
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	4619      	mov	r1, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	440b      	add	r3, r1
 800689a:	4619      	mov	r1, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4313      	orrs	r3, r2
 80068a0:	600b      	str	r3, [r1, #0]
}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	08025570 	.word	0x08025570

080068b4 <LL_DMA_SetDataLength>:
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80068c0:	4a0d      	ldr	r2, [pc, #52]	; (80068f8 <LL_DMA_SetDataLength+0x44>)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4413      	add	r3, r2
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	0c1b      	lsrs	r3, r3, #16
 80068d2:	041b      	lsls	r3, r3, #16
 80068d4:	4908      	ldr	r1, [pc, #32]	; (80068f8 <LL_DMA_SetDataLength+0x44>)
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	440a      	add	r2, r1
 80068da:	7812      	ldrb	r2, [r2, #0]
 80068dc:	4611      	mov	r1, r2
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	440a      	add	r2, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	604b      	str	r3, [r1, #4]
}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	08025570 	.word	0x08025570

080068fc <LL_DMA_GetDataLength>:
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8006906:	4a07      	ldr	r2, [pc, #28]	; (8006924 <LL_DMA_GetDataLength+0x28>)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	4413      	add	r3, r2
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4413      	add	r3, r2
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	b29b      	uxth	r3, r3
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	08025570 	.word	0x08025570

08006928 <LL_DMA_SetChannelSelection>:
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8006934:	4a0d      	ldr	r2, [pc, #52]	; (800696c <LL_DMA_SetChannelSelection+0x44>)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4413      	add	r3, r2
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006948:	4908      	ldr	r1, [pc, #32]	; (800696c <LL_DMA_SetChannelSelection+0x44>)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	440b      	add	r3, r1
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	4619      	mov	r1, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	440b      	add	r3, r1
 8006956:	4619      	mov	r1, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4313      	orrs	r3, r2
 800695c:	600b      	str	r3, [r1, #0]
}
 800695e:	bf00      	nop
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	08025570 	.word	0x08025570

08006970 <LL_DMA_DisableFifoMode>:
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800697a:	4a0c      	ldr	r2, [pc, #48]	; (80069ac <LL_DMA_DisableFifoMode+0x3c>)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	4413      	add	r3, r2
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4413      	add	r3, r2
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	4908      	ldr	r1, [pc, #32]	; (80069ac <LL_DMA_DisableFifoMode+0x3c>)
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	440a      	add	r2, r1
 8006990:	7812      	ldrb	r2, [r2, #0]
 8006992:	4611      	mov	r1, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	440a      	add	r2, r1
 8006998:	f023 0304 	bic.w	r3, r3, #4
 800699c:	6153      	str	r3, [r2, #20]
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	08025570 	.word	0x08025570

080069b0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80069bc:	4a07      	ldr	r2, [pc, #28]	; (80069dc <LL_DMA_SetMemoryAddress+0x2c>)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	4413      	add	r3, r2
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	461a      	mov	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60d3      	str	r3, [r2, #12]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	08025570 	.word	0x08025570

080069e0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80069ec:	4a07      	ldr	r2, [pc, #28]	; (8006a0c <LL_DMA_SetPeriphAddress+0x2c>)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	461a      	mov	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	461a      	mov	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6093      	str	r3, [r2, #8]
}
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	08025570 	.word	0x08025570

08006a10 <LL_AHB1_GRP1_EnableClock>:
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006a18:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a1c:	4907      	ldr	r1, [pc, #28]	; (8006a3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
}
 8006a30:	bf00      	nop
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	40023800 	.word	0x40023800

08006a40 <LL_APB2_GRP1_EnableClock>:
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006a48:	4b08      	ldr	r3, [pc, #32]	; (8006a6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8006a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a4c:	4907      	ldr	r1, [pc, #28]	; (8006a6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8006a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
}
 8006a60:	bf00      	nop
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	40023800 	.word	0x40023800

08006a70 <LL_USART_Enable>:
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	60da      	str	r2, [r3, #12]
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <LL_USART_Disable>:
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60da      	str	r2, [r3, #12]
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <LL_USART_IsEnabled>:
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <LL_USART_SetBaudRate>:
{
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	b09f      	sub	sp, #124	; 0x7c
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6778      	str	r0, [r7, #116]	; 0x74
 8006ae2:	6739      	str	r1, [r7, #112]	; 0x70
 8006ae4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ae6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aee:	f040 80bc 	bne.w	8006c6a <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006af4:	461c      	mov	r4, r3
 8006af6:	f04f 0500 	mov.w	r5, #0
 8006afa:	4622      	mov	r2, r4
 8006afc:	462b      	mov	r3, r5
 8006afe:	eb12 0a02 	adds.w	sl, r2, r2
 8006b02:	eb43 0b03 	adc.w	fp, r3, r3
 8006b06:	4652      	mov	r2, sl
 8006b08:	465b      	mov	r3, fp
 8006b0a:	1912      	adds	r2, r2, r4
 8006b0c:	eb45 0303 	adc.w	r3, r5, r3
 8006b10:	f04f 0000 	mov.w	r0, #0
 8006b14:	f04f 0100 	mov.w	r1, #0
 8006b18:	00d9      	lsls	r1, r3, #3
 8006b1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b1e:	00d0      	lsls	r0, r2, #3
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	1911      	adds	r1, r2, r4
 8006b26:	6639      	str	r1, [r7, #96]	; 0x60
 8006b28:	416b      	adcs	r3, r5
 8006b2a:	667b      	str	r3, [r7, #100]	; 0x64
 8006b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	1891      	adds	r1, r2, r2
 8006b36:	6339      	str	r1, [r7, #48]	; 0x30
 8006b38:	415b      	adcs	r3, r3
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006b40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b44:	f7f9 fb9c 	bl	8000280 <__aeabi_uldivmod>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4ba9      	ldr	r3, [pc, #676]	; (8006df4 <LL_USART_SetBaudRate+0x31c>)
 8006b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	b29e      	uxth	r6, r3
 8006b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b5c:	461c      	mov	r4, r3
 8006b5e:	f04f 0500 	mov.w	r5, #0
 8006b62:	4622      	mov	r2, r4
 8006b64:	462b      	mov	r3, r5
 8006b66:	1891      	adds	r1, r2, r2
 8006b68:	62b9      	str	r1, [r7, #40]	; 0x28
 8006b6a:	415b      	adcs	r3, r3
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b72:	1912      	adds	r2, r2, r4
 8006b74:	eb45 0303 	adc.w	r3, r5, r3
 8006b78:	f04f 0000 	mov.w	r0, #0
 8006b7c:	f04f 0100 	mov.w	r1, #0
 8006b80:	00d9      	lsls	r1, r3, #3
 8006b82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b86:	00d0      	lsls	r0, r2, #3
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	1911      	adds	r1, r2, r4
 8006b8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b90:	416b      	adcs	r3, r5
 8006b92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b96:	461a      	mov	r2, r3
 8006b98:	f04f 0300 	mov.w	r3, #0
 8006b9c:	1891      	adds	r1, r2, r2
 8006b9e:	6239      	str	r1, [r7, #32]
 8006ba0:	415b      	adcs	r3, r3
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ba8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006bac:	f7f9 fb68 	bl	8000280 <__aeabi_uldivmod>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4b8f      	ldr	r3, [pc, #572]	; (8006df4 <LL_USART_SetBaudRate+0x31c>)
 8006bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	2164      	movs	r1, #100	; 0x64
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	3332      	adds	r3, #50	; 0x32
 8006bc8:	4a8a      	ldr	r2, [pc, #552]	; (8006df4 <LL_USART_SetBaudRate+0x31c>)
 8006bca:	fba2 2303 	umull	r2, r3, r2, r3
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	4433      	add	r3, r6
 8006bde:	b29e      	uxth	r6, r3
 8006be0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006be2:	4618      	mov	r0, r3
 8006be4:	f04f 0100 	mov.w	r1, #0
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	1894      	adds	r4, r2, r2
 8006bee:	61bc      	str	r4, [r7, #24]
 8006bf0:	415b      	adcs	r3, r3
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bf8:	1812      	adds	r2, r2, r0
 8006bfa:	eb41 0303 	adc.w	r3, r1, r3
 8006bfe:	f04f 0400 	mov.w	r4, #0
 8006c02:	f04f 0500 	mov.w	r5, #0
 8006c06:	00dd      	lsls	r5, r3, #3
 8006c08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c0c:	00d4      	lsls	r4, r2, #3
 8006c0e:	4622      	mov	r2, r4
 8006c10:	462b      	mov	r3, r5
 8006c12:	1814      	adds	r4, r2, r0
 8006c14:	653c      	str	r4, [r7, #80]	; 0x50
 8006c16:	414b      	adcs	r3, r1
 8006c18:	657b      	str	r3, [r7, #84]	; 0x54
 8006c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f04f 0300 	mov.w	r3, #0
 8006c22:	1891      	adds	r1, r2, r2
 8006c24:	6139      	str	r1, [r7, #16]
 8006c26:	415b      	adcs	r3, r3
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c32:	f7f9 fb25 	bl	8000280 <__aeabi_uldivmod>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4b6e      	ldr	r3, [pc, #440]	; (8006df4 <LL_USART_SetBaudRate+0x31c>)
 8006c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	2164      	movs	r1, #100	; 0x64
 8006c44:	fb01 f303 	mul.w	r3, r1, r3
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	3332      	adds	r3, #50	; 0x32
 8006c4e:	4a69      	ldr	r2, [pc, #420]	; (8006df4 <LL_USART_SetBaudRate+0x31c>)
 8006c50:	fba2 2303 	umull	r2, r3, r2, r3
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	4433      	add	r3, r6
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	461a      	mov	r2, r3
 8006c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c66:	609a      	str	r2, [r3, #8]
}
 8006c68:	e0be      	b.n	8006de8 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c6c:	461c      	mov	r4, r3
 8006c6e:	f04f 0500 	mov.w	r5, #0
 8006c72:	4622      	mov	r2, r4
 8006c74:	462b      	mov	r3, r5
 8006c76:	eb12 0802 	adds.w	r8, r2, r2
 8006c7a:	eb43 0903 	adc.w	r9, r3, r3
 8006c7e:	4642      	mov	r2, r8
 8006c80:	464b      	mov	r3, r9
 8006c82:	1912      	adds	r2, r2, r4
 8006c84:	eb45 0303 	adc.w	r3, r5, r3
 8006c88:	f04f 0000 	mov.w	r0, #0
 8006c8c:	f04f 0100 	mov.w	r1, #0
 8006c90:	00d9      	lsls	r1, r3, #3
 8006c92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c96:	00d0      	lsls	r0, r2, #3
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	1911      	adds	r1, r2, r4
 8006c9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ca0:	416b      	adcs	r3, r5
 8006ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f04f 0100 	mov.w	r1, #0
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	008b      	lsls	r3, r1, #2
 8006cb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006cba:	0082      	lsls	r2, r0, #2
 8006cbc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006cc0:	f7f9 fade 	bl	8000280 <__aeabi_uldivmod>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4b4a      	ldr	r3, [pc, #296]	; (8006df4 <LL_USART_SetBaudRate+0x31c>)
 8006cca:	fba3 2302 	umull	r2, r3, r3, r2
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	011b      	lsls	r3, r3, #4
 8006cd4:	b29e      	uxth	r6, r3
 8006cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f04f 0100 	mov.w	r1, #0
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	1894      	adds	r4, r2, r2
 8006ce4:	60bc      	str	r4, [r7, #8]
 8006ce6:	415b      	adcs	r3, r3
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cee:	1812      	adds	r2, r2, r0
 8006cf0:	eb41 0303 	adc.w	r3, r1, r3
 8006cf4:	f04f 0400 	mov.w	r4, #0
 8006cf8:	f04f 0500 	mov.w	r5, #0
 8006cfc:	00dd      	lsls	r5, r3, #3
 8006cfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d02:	00d4      	lsls	r4, r2, #3
 8006d04:	4622      	mov	r2, r4
 8006d06:	462b      	mov	r3, r5
 8006d08:	1814      	adds	r4, r2, r0
 8006d0a:	643c      	str	r4, [r7, #64]	; 0x40
 8006d0c:	414b      	adcs	r3, r1
 8006d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d12:	4618      	mov	r0, r3
 8006d14:	f04f 0100 	mov.w	r1, #0
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	008b      	lsls	r3, r1, #2
 8006d22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d26:	0082      	lsls	r2, r0, #2
 8006d28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d2c:	f7f9 faa8 	bl	8000280 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4b2f      	ldr	r3, [pc, #188]	; (8006df4 <LL_USART_SetBaudRate+0x31c>)
 8006d36:	fba3 1302 	umull	r1, r3, r3, r2
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	2164      	movs	r1, #100	; 0x64
 8006d3e:	fb01 f303 	mul.w	r3, r1, r3
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	3332      	adds	r3, #50	; 0x32
 8006d48:	4a2a      	ldr	r2, [pc, #168]	; (8006df4 <LL_USART_SetBaudRate+0x31c>)
 8006d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	4433      	add	r3, r6
 8006d5a:	b29e      	uxth	r6, r3
 8006d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f04f 0100 	mov.w	r1, #0
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	1894      	adds	r4, r2, r2
 8006d6a:	603c      	str	r4, [r7, #0]
 8006d6c:	415b      	adcs	r3, r3
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d74:	1812      	adds	r2, r2, r0
 8006d76:	eb41 0303 	adc.w	r3, r1, r3
 8006d7a:	f04f 0400 	mov.w	r4, #0
 8006d7e:	f04f 0500 	mov.w	r5, #0
 8006d82:	00dd      	lsls	r5, r3, #3
 8006d84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d88:	00d4      	lsls	r4, r2, #3
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	1814      	adds	r4, r2, r0
 8006d90:	63bc      	str	r4, [r7, #56]	; 0x38
 8006d92:	414b      	adcs	r3, r1
 8006d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f04f 0100 	mov.w	r1, #0
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	008b      	lsls	r3, r1, #2
 8006da8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dac:	0082      	lsls	r2, r0, #2
 8006dae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006db2:	f7f9 fa65 	bl	8000280 <__aeabi_uldivmod>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4b0e      	ldr	r3, [pc, #56]	; (8006df4 <LL_USART_SetBaudRate+0x31c>)
 8006dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	2164      	movs	r1, #100	; 0x64
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	3332      	adds	r3, #50	; 0x32
 8006dce:	4a09      	ldr	r2, [pc, #36]	; (8006df4 <LL_USART_SetBaudRate+0x31c>)
 8006dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	4433      	add	r3, r6
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006de6:	609a      	str	r2, [r3, #8]
}
 8006de8:	bf00      	nop
 8006dea:	377c      	adds	r7, #124	; 0x7c
 8006dec:	46bd      	mov	sp, r7
 8006dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df2:	bf00      	nop
 8006df4:	51eb851f 	.word	0x51eb851f

08006df8 <LL_USART_ConfigAsyncMode>:
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	615a      	str	r2, [r3, #20]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b40      	cmp	r3, #64	; 0x40
 8006e36:	bf0c      	ite	eq
 8006e38:	2301      	moveq	r3, #1
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5a:	2b80      	cmp	r3, #128	; 0x80
 8006e5c:	bf0c      	ite	eq
 8006e5e:	2301      	moveq	r3, #1
 8006e60:	2300      	movne	r3, #0
 8006e62:	b2db      	uxtb	r3, r3
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b089      	sub	sp, #36	; 0x24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3314      	adds	r3, #20
 8006e7c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3314      	adds	r3, #20
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	61ba      	str	r2, [r7, #24]
 8006e96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6979      	ldr	r1, [r7, #20]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e7      	bne.n	8006e78 <LL_USART_EnableDMAReq_RX+0x8>
}
 8006ea8:	bf00      	nop
 8006eaa:	bf00      	nop
 8006eac:	3724      	adds	r7, #36	; 0x24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8006ec2:	78fa      	ldrb	r2, [r7, #3]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	605a      	str	r2, [r3, #4]
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <LL_GPIO_ReadInputPort>:
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <LL_GPIO_SetOutputPin>:
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	619a      	str	r2, [r3, #24]
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	041a      	lsls	r2, r3, #16
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	619a      	str	r2, [r3, #24]
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <sim7600_powerON>:
int sim7600DisconnectTime = 0;

bool bSim7600IsRunning = false;

void sim7600_powerON()
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
  LOG_WRITE("powerOn\n");  
 8006f2e:	4823      	ldr	r0, [pc, #140]	; (8006fbc <sim7600_powerON+0x94>)
 8006f30:	f018 fd62 	bl	801f9f8 <puts>
  Sim_PWR(0);
 8006f34:	2101      	movs	r1, #1
 8006f36:	4822      	ldr	r0, [pc, #136]	; (8006fc0 <sim7600_powerON+0x98>)
 8006f38:	f7ff ffe6 	bl	8006f08 <LL_GPIO_ResetOutputPin>
  osDelay(500);
 8006f3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f40:	f002 ffd9 	bl	8009ef6 <osDelay>
  Sim_PWR(1);
 8006f44:	2101      	movs	r1, #1
 8006f46:	481e      	ldr	r0, [pc, #120]	; (8006fc0 <sim7600_powerON+0x98>)
 8006f48:	f7ff ffd0 	bl	8006eec <LL_GPIO_SetOutputPin>
  osDelay(500);
 8006f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f50:	f002 ffd1 	bl	8009ef6 <osDelay>
  Sim_PWR(0);
 8006f54:	2101      	movs	r1, #1
 8006f56:	481a      	ldr	r0, [pc, #104]	; (8006fc0 <sim7600_powerON+0x98>)
 8006f58:	f7ff ffd6 	bl	8006f08 <LL_GPIO_ResetOutputPin>
  osDelay(1000); //margin
 8006f5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f60:	f002 ffc9 	bl	8009ef6 <osDelay>

  //wait until sim_status == 1;, time-out 60s
  int try = 6000;
 8006f64:	f241 7370 	movw	r3, #6000	; 0x1770
 8006f68:	607b      	str	r3, [r7, #4]
  int count = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	603b      	str	r3, [r7, #0]
  while (try--)
 8006f6e:	e013      	b.n	8006f98 <sim7600_powerON+0x70>
  {
    if (Sim_STT > 0)
 8006f70:	4813      	ldr	r0, [pc, #76]	; (8006fc0 <sim7600_powerON+0x98>)
 8006f72:	f7ff ffaf 	bl	8006ed4 <LL_GPIO_ReadInputPort>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <sim7600_powerON+0x60>
      count++;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	603b      	str	r3, [r7, #0]
 8006f86:	e001      	b.n	8006f8c <sim7600_powerON+0x64>
    else
      count = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	603b      	str	r3, [r7, #0]
    if(count > 10)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b0a      	cmp	r3, #10
 8006f90:	dc08      	bgt.n	8006fa4 <sim7600_powerON+0x7c>
      break;
    osDelay(10);
 8006f92:	200a      	movs	r0, #10
 8006f94:	f002 ffaf 	bl	8009ef6 <osDelay>
  while (try--)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	1e5a      	subs	r2, r3, #1
 8006f9c:	607a      	str	r2, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e6      	bne.n	8006f70 <sim7600_powerON+0x48>
 8006fa2:	e000      	b.n	8006fa6 <sim7600_powerON+0x7e>
      break;
 8006fa4:	bf00      	nop
  }
  osDelay(20000); //max time
 8006fa6:	f644 6020 	movw	r0, #20000	; 0x4e20
 8006faa:	f002 ffa4 	bl	8009ef6 <osDelay>

  bSim7600IsRunning = true;
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <sim7600_powerON+0x9c>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	701a      	strb	r2, [r3, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	08021080 	.word	0x08021080
 8006fc0:	40021000 	.word	0x40021000
 8006fc4:	200005fc 	.word	0x200005fc

08006fc8 <sim7600_powerOFF>:

void sim7600_powerOFF()
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
  bSim7600IsRunning = false;
 8006fce:	4b23      	ldr	r3, [pc, #140]	; (800705c <sim7600_powerOFF+0x94>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	701a      	strb	r2, [r3, #0]

  LOG_WRITE("powerOff\n");  
 8006fd4:	4822      	ldr	r0, [pc, #136]	; (8007060 <sim7600_powerOFF+0x98>)
 8006fd6:	f018 fd0f 	bl	801f9f8 <puts>
  Sim_PWR(0);
 8006fda:	2101      	movs	r1, #1
 8006fdc:	4821      	ldr	r0, [pc, #132]	; (8007064 <sim7600_powerOFF+0x9c>)
 8006fde:	f7ff ff93 	bl	8006f08 <LL_GPIO_ResetOutputPin>
  osDelay(500);
 8006fe2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006fe6:	f002 ff86 	bl	8009ef6 <osDelay>
  Sim_PWR(1);
 8006fea:	2101      	movs	r1, #1
 8006fec:	481d      	ldr	r0, [pc, #116]	; (8007064 <sim7600_powerOFF+0x9c>)
 8006fee:	f7ff ff7d 	bl	8006eec <LL_GPIO_SetOutputPin>
  osDelay(4000);
 8006ff2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006ff6:	f002 ff7e 	bl	8009ef6 <osDelay>
  Sim_PWR(0);
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	4819      	ldr	r0, [pc, #100]	; (8007064 <sim7600_powerOFF+0x9c>)
 8006ffe:	f7ff ff83 	bl	8006f08 <LL_GPIO_ResetOutputPin>
  osDelay(1000); //margin
 8007002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007006:	f002 ff76 	bl	8009ef6 <osDelay>

  //wait until sim_status == 0;, time-out 60s
  int try = 6000;
 800700a:	f241 7370 	movw	r3, #6000	; 0x1770
 800700e:	607b      	str	r3, [r7, #4]
  int count = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	603b      	str	r3, [r7, #0]
  while (try--)
 8007014:	e013      	b.n	800703e <sim7600_powerOFF+0x76>
  {
    if (Sim_STT == 0)
 8007016:	4813      	ldr	r0, [pc, #76]	; (8007064 <sim7600_powerOFF+0x9c>)
 8007018:	f7ff ff5c 	bl	8006ed4 <LL_GPIO_ReadInputPort>
 800701c:	4603      	mov	r3, r0
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <sim7600_powerOFF+0x66>
      count++;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	3301      	adds	r3, #1
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	e001      	b.n	8007032 <sim7600_powerOFF+0x6a>
    else
      count = 0;
 800702e:	2300      	movs	r3, #0
 8007030:	603b      	str	r3, [r7, #0]
    if(count > 10) //remove noise
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b0a      	cmp	r3, #10
 8007036:	dc08      	bgt.n	800704a <sim7600_powerOFF+0x82>
      break;
    osDelay(10);
 8007038:	200a      	movs	r0, #10
 800703a:	f002 ff5c 	bl	8009ef6 <osDelay>
  while (try--)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	1e5a      	subs	r2, r3, #1
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e6      	bne.n	8007016 <sim7600_powerOFF+0x4e>
 8007048:	e000      	b.n	800704c <sim7600_powerOFF+0x84>
      break;
 800704a:	bf00      	nop
  }
  osDelay(30000); //max time
 800704c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007050:	f002 ff51 	bl	8009ef6 <osDelay>
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	200005fc 	.word	0x200005fc
 8007060:	08021088 	.word	0x08021088
 8007064:	40021000 	.word	0x40021000

08007068 <sim7600_reset>:

void sim7600_reset()
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0

  LOG_WRITE("reset\n");  
 800706c:	480e      	ldr	r0, [pc, #56]	; (80070a8 <sim7600_reset+0x40>)
 800706e:	f018 fcc3 	bl	801f9f8 <puts>

  Sim_RST(0);
 8007072:	2102      	movs	r1, #2
 8007074:	480d      	ldr	r0, [pc, #52]	; (80070ac <sim7600_reset+0x44>)
 8007076:	f7ff ff47 	bl	8006f08 <LL_GPIO_ResetOutputPin>
  osDelay(500);
 800707a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800707e:	f002 ff3a 	bl	8009ef6 <osDelay>
  Sim_RST(1);
 8007082:	2102      	movs	r1, #2
 8007084:	4809      	ldr	r0, [pc, #36]	; (80070ac <sim7600_reset+0x44>)
 8007086:	f7ff ff31 	bl	8006eec <LL_GPIO_SetOutputPin>
  osDelay(400);
 800708a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800708e:	f002 ff32 	bl	8009ef6 <osDelay>
  Sim_RST(0);
 8007092:	2102      	movs	r1, #2
 8007094:	4805      	ldr	r0, [pc, #20]	; (80070ac <sim7600_reset+0x44>)
 8007096:	f7ff ff37 	bl	8006f08 <LL_GPIO_ResetOutputPin>
  osDelay(30000);
 800709a:	f247 5030 	movw	r0, #30000	; 0x7530
 800709e:	f002 ff2a 	bl	8009ef6 <osDelay>
}
 80070a2:	bf00      	nop
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	08021094 	.word	0x08021094
 80070ac:	40021000 	.word	0x40021000

080070b0 <sim7600_gpio_init>:

void sim7600_gpio_init()
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
  LOG_WRITE("gpioInit\n");  
 80070b6:	4824      	ldr	r0, [pc, #144]	; (8007148 <sim7600_gpio_init+0x98>)
 80070b8:	f018 fc9e 	bl	801f9f8 <puts>

  //gpio init
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070bc:	463b      	mov	r3, r7
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	605a      	str	r2, [r3, #4]
 80070c4:	609a      	str	r2, [r3, #8]
 80070c6:	60da      	str	r2, [r3, #12]
 80070c8:	611a      	str	r2, [r3, #16]
 80070ca:	615a      	str	r2, [r3, #20]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80070cc:	2010      	movs	r0, #16
 80070ce:	f7ff fc9f 	bl	8006a10 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80070d2:	2001      	movs	r0, #1
 80070d4:	f7ff fc9c 	bl	8006a10 <LL_AHB1_GRP1_EnableClock>

  //set default state at begin (high or low depend on hardware / circuit)
  LL_GPIO_ResetOutputPin(pwrSIM_GPIO_Port, pwrSIM_Pin | rstSIM_Pin);
 80070d8:	2103      	movs	r1, #3
 80070da:	481c      	ldr	r0, [pc, #112]	; (800714c <sim7600_gpio_init+0x9c>)
 80070dc:	f7ff ff14 	bl	8006f08 <LL_GPIO_ResetOutputPin>

  GPIO_InitStruct.Pin = pwrSIM_Pin | rstSIM_Pin;
 80070e0:	2303      	movs	r3, #3
 80070e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80070e4:	2301      	movs	r3, #1
 80070e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80070e8:	2300      	movs	r3, #0
 80070ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80070f0:	2301      	movs	r3, #1
 80070f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(pwrSIM_GPIO_Port, &GPIO_InitStruct);
 80070f4:	463b      	mov	r3, r7
 80070f6:	4619      	mov	r1, r3
 80070f8:	4814      	ldr	r0, [pc, #80]	; (800714c <sim7600_gpio_init+0x9c>)
 80070fa:	f7fc ff7a 	bl	8003ff2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = sttSIM_Pin; //status pin
 80070fe:	2304      	movs	r3, #4
 8007100:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007102:	2300      	movs	r3, #0
 8007104:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN; //need pull down to read exactly value from (sim_status -> TXS0108EPWR)
 8007106:	2302      	movs	r3, #2
 8007108:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(sttSIM_GPIO_Port, &GPIO_InitStruct);
 800710a:	463b      	mov	r3, r7
 800710c:	4619      	mov	r1, r3
 800710e:	480f      	ldr	r0, [pc, #60]	; (800714c <sim7600_gpio_init+0x9c>)
 8007110:	f7fc ff6f 	bl	8003ff2 <LL_GPIO_Init>

  LL_GPIO_ResetOutputPin(CTS_SIM_GPIO_Port, CTS_SIM_Pin);
 8007114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007118:	480d      	ldr	r0, [pc, #52]	; (8007150 <sim7600_gpio_init+0xa0>)
 800711a:	f7ff fef5 	bl	8006f08 <LL_GPIO_ResetOutputPin>
  GPIO_InitStruct.Pin = CTS_SIM_Pin;
 800711e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007122:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007124:	2301      	movs	r3, #1
 8007126:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007128:	2303      	movs	r3, #3
 800712a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007130:	2302      	movs	r3, #2
 8007132:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CTS_SIM_GPIO_Port, &GPIO_InitStruct);
 8007134:	463b      	mov	r3, r7
 8007136:	4619      	mov	r1, r3
 8007138:	4805      	ldr	r0, [pc, #20]	; (8007150 <sim7600_gpio_init+0xa0>)
 800713a:	f7fc ff5a 	bl	8003ff2 <LL_GPIO_Init>
}
 800713e:	bf00      	nop
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	0802109c 	.word	0x0802109c
 800714c:	40021000 	.word	0x40021000
 8007150:	40020000 	.word	0x40020000

08007154 <sim7600_init>:

//initialize UART, DMA, GPIO for stm32-sim7600 to connect Internet + gps (full) or just use jps (mini)
void sim7600_init(bool isMini)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b090      	sub	sp, #64	; 0x40
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	71fb      	strb	r3, [r7, #7]
  LOG_WRITE("simInit\n");
 800715e:	4864      	ldr	r0, [pc, #400]	; (80072f0 <sim7600_init+0x19c>)
 8007160:	f018 fc4a 	bl	801f9f8 <puts>
  sim_dma_buff_size = 15000;
 8007164:	4b63      	ldr	r3, [pc, #396]	; (80072f4 <sim7600_init+0x1a0>)
 8007166:	f643 2298 	movw	r2, #15000	; 0x3a98
 800716a:	601a      	str	r2, [r3, #0]
  //   sim_dma_buff_size = SIM_BUFF_SIZE_FULL;
  //   sim_dma_buff = (uint8_t *)malloc(SIM_BUFF_SIZE_FULL); //circle buffer
  //   sim_buff = (uint8_t *)malloc(SIM_BUFF_SIZE_FULL + 1); //real data received (+1 bytes for '\0' end of string)
  // }

  sim7600_gpio_init();
 800716c:	f7ff ffa0 	bl	80070b0 <sim7600_gpio_init>

  LL_USART_Disable(USART1);
 8007170:	4861      	ldr	r0, [pc, #388]	; (80072f8 <sim7600_init+0x1a4>)
 8007172:	f7ff fc8d 	bl	8006a90 <LL_USART_Disable>
  while (LL_USART_IsEnabled(USART1)); //waite until En bit == 0
 8007176:	bf00      	nop
 8007178:	485f      	ldr	r0, [pc, #380]	; (80072f8 <sim7600_init+0x1a4>)
 800717a:	f7ff fc99 	bl	8006ab0 <LL_USART_IsEnabled>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1f9      	bne.n	8007178 <sim7600_init+0x24>
  
  //disable DMA
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 8007184:	2102      	movs	r1, #2
 8007186:	485d      	ldr	r0, [pc, #372]	; (80072fc <sim7600_init+0x1a8>)
 8007188:	f7ff fa5c 	bl	8006644 <LL_DMA_DisableStream>
  while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 800718c:	bf00      	nop
 800718e:	2102      	movs	r1, #2
 8007190:	485a      	ldr	r0, [pc, #360]	; (80072fc <sim7600_init+0x1a8>)
 8007192:	f7ff fa77 	bl	8006684 <LL_DMA_IsEnabledStream>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f8      	bne.n	800718e <sim7600_init+0x3a>
    ; //wait until En bit == 0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800719c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	605a      	str	r2, [r3, #4]
 80071a6:	609a      	str	r2, [r3, #8]
 80071a8:	60da      	str	r2, [r3, #12]
 80071aa:	611a      	str	r2, [r3, #16]
 80071ac:	615a      	str	r2, [r3, #20]
  //uart1 + DMA2 stream 2, channel 2 init
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80071ae:	f107 030c 	add.w	r3, r7, #12
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	605a      	str	r2, [r3, #4]
 80071b8:	609a      	str	r2, [r3, #8]
 80071ba:	60da      	str	r2, [r3, #12]
 80071bc:	611a      	str	r2, [r3, #16]
 80071be:	615a      	str	r2, [r3, #20]
 80071c0:	619a      	str	r2, [r3, #24]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80071c2:	2010      	movs	r0, #16
 80071c4:	f7ff fc3c 	bl	8006a40 <LL_APB2_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80071c8:	2001      	movs	r0, #1
 80071ca:	f7ff fc21 	bl	8006a10 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80071ce:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80071d2:	f7ff fc1d 	bl	8006a10 <LL_AHB1_GRP1_EnableClock>
       * PA10   ------> USART1_RX
       * PA11   ------> USART1_CTS
       * PA12   ------> USART1_RTS
       */
  // GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10 |LL_GPIO_PIN_11|LL_GPIO_PIN_12;
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10 |LL_GPIO_PIN_11; //debug
 80071d6:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80071da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80071dc:	2302      	movs	r3, #2
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80071e0:	2303      	movs	r3, #3
 80071e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80071e4:	2300      	movs	r3, #0
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80071e8:	2300      	movs	r3, #0
 80071ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7; // AF_7 ~ USART1..3 see at datasheet (Figure.. Selecting an alternate function...)
 80071ec:	2307      	movs	r3, #7
 80071ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071f4:	4619      	mov	r1, r3
 80071f6:	4842      	ldr	r0, [pc, #264]	; (8007300 <sim7600_init+0x1ac>)
 80071f8:	f7fc fefb 	bl	8003ff2 <LL_GPIO_Init>

  /* USART1 RX DMA 2 stream 2 channel 4 Init */

  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 80071fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007200:	2102      	movs	r1, #2
 8007202:	483e      	ldr	r0, [pc, #248]	; (80072fc <sim7600_init+0x1a8>)
 8007204:	f7ff fb90 	bl	8006928 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8007208:	2200      	movs	r2, #0
 800720a:	2102      	movs	r1, #2
 800720c:	483b      	ldr	r0, [pc, #236]	; (80072fc <sim7600_init+0x1a8>)
 800720e:	f7ff fa55 	bl	80066bc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_HIGH);
 8007212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007216:	2102      	movs	r1, #2
 8007218:	4838      	ldr	r0, [pc, #224]	; (80072fc <sim7600_init+0x1a8>)
 800721a:	f7ff fb27 	bl	800686c <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 800721e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007222:	2102      	movs	r1, #2
 8007224:	4835      	ldr	r0, [pc, #212]	; (80072fc <sim7600_init+0x1a8>)
 8007226:	f7ff fa6d 	bl	8006704 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 800722a:	2200      	movs	r2, #0
 800722c:	2102      	movs	r1, #2
 800722e:	4833      	ldr	r0, [pc, #204]	; (80072fc <sim7600_init+0x1a8>)
 8007230:	f7ff fa8c 	bl	800674c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8007234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007238:	2102      	movs	r1, #2
 800723a:	4830      	ldr	r0, [pc, #192]	; (80072fc <sim7600_init+0x1a8>)
 800723c:	f7ff faaa 	bl	8006794 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 8007240:	2200      	movs	r2, #0
 8007242:	2102      	movs	r1, #2
 8007244:	482d      	ldr	r0, [pc, #180]	; (80072fc <sim7600_init+0x1a8>)
 8007246:	f7ff fac9 	bl	80067dc <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 800724a:	2200      	movs	r2, #0
 800724c:	2102      	movs	r1, #2
 800724e:	482b      	ldr	r0, [pc, #172]	; (80072fc <sim7600_init+0x1a8>)
 8007250:	f7ff fae8 	bl	8006824 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 8007254:	2102      	movs	r1, #2
 8007256:	4829      	ldr	r0, [pc, #164]	; (80072fc <sim7600_init+0x1a8>)
 8007258:	f7ff fb8a 	bl	8006970 <LL_DMA_DisableFifoMode>
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 800725c:	4a29      	ldr	r2, [pc, #164]	; (8007304 <sim7600_init+0x1b0>)
 800725e:	2102      	movs	r1, #2
 8007260:	4826      	ldr	r0, [pc, #152]	; (80072fc <sim7600_init+0x1a8>)
 8007262:	f7ff fbbd 	bl	80069e0 <LL_DMA_SetPeriphAddress>

  //set uart rx buffer receive
  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)sim_dma_buff);
 8007266:	4b28      	ldr	r3, [pc, #160]	; (8007308 <sim7600_init+0x1b4>)
 8007268:	461a      	mov	r2, r3
 800726a:	2102      	movs	r1, #2
 800726c:	4823      	ldr	r0, [pc, #140]	; (80072fc <sim7600_init+0x1a8>)
 800726e:	f7ff fb9f 	bl	80069b0 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, sim_dma_buff_size);
 8007272:	4b20      	ldr	r3, [pc, #128]	; (80072f4 <sim7600_init+0x1a0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	2102      	movs	r1, #2
 800727a:	4820      	ldr	r0, [pc, #128]	; (80072fc <sim7600_init+0x1a8>)
 800727c:	f7ff fb1a 	bl	80068b4 <LL_DMA_SetDataLength>

  /* USART configuration */
  USART_InitStruct.BaudRate = SIM7600_BAUDRATE_DEFAULT;
 8007280:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007284:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007286:	2300      	movs	r3, #0
 8007288:	613b      	str	r3, [r7, #16]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800728e:	2300      	movs	r3, #0
 8007290:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007292:	230c      	movs	r3, #12
 8007294:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_CTS;
 8007296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800729a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800729c:	2300      	movs	r3, #0
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
  LL_USART_Init(USART1, &USART_InitStruct);
 80072a0:	f107 030c 	add.w	r3, r7, #12
 80072a4:	4619      	mov	r1, r3
 80072a6:	4814      	ldr	r0, [pc, #80]	; (80072f8 <sim7600_init+0x1a4>)
 80072a8:	f7fd fa1a 	bl	80046e0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80072ac:	4812      	ldr	r0, [pc, #72]	; (80072f8 <sim7600_init+0x1a4>)
 80072ae:	f7ff fda3 	bl	8006df8 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART1);
 80072b2:	4811      	ldr	r0, [pc, #68]	; (80072f8 <sim7600_init+0x1a4>)
 80072b4:	f7ff fddc 	bl	8006e70 <LL_USART_EnableDMAReq_RX>

  /* Enable USART and DMA */
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 80072b8:	2102      	movs	r1, #2
 80072ba:	4810      	ldr	r0, [pc, #64]	; (80072fc <sim7600_init+0x1a8>)
 80072bc:	f7ff f9a2 	bl	8006604 <LL_DMA_EnableStream>
  LL_USART_Enable(USART1);
 80072c0:	480d      	ldr	r0, [pc, #52]	; (80072f8 <sim7600_init+0x1a4>)
 80072c2:	f7ff fbd5 	bl	8006a70 <LL_USART_Enable>

  //wait until USART DMA is ready
  while (!LL_USART_IsEnabled(USART1) || !LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 80072c6:	bf00      	nop
 80072c8:	480b      	ldr	r0, [pc, #44]	; (80072f8 <sim7600_init+0x1a4>)
 80072ca:	f7ff fbf1 	bl	8006ab0 <LL_USART_IsEnabled>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0f9      	beq.n	80072c8 <sim7600_init+0x174>
 80072d4:	2102      	movs	r1, #2
 80072d6:	4809      	ldr	r0, [pc, #36]	; (80072fc <sim7600_init+0x1a8>)
 80072d8:	f7ff f9d4 	bl	8006684 <LL_DMA_IsEnabledStream>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0f2      	beq.n	80072c8 <sim7600_init+0x174>

  //power off to debug (don't need to plug out sim7600)
//  sim7600_powerOFF();

  //power on sim7600
  sim7600_powerON();
 80072e2:	f7ff fe21 	bl	8006f28 <sim7600_powerON>
}
 80072e6:	bf00      	nop
 80072e8:	3740      	adds	r7, #64	; 0x40
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	080210a8 	.word	0x080210a8
 80072f4:	20006364 	.word	0x20006364
 80072f8:	40011000 	.word	0x40011000
 80072fc:	40026400 	.word	0x40026400
 8007300:	40020000 	.word	0x40020000
 8007304:	40011004 	.word	0x40011004
 8007308:	20009e10 	.word	0x20009e10

0800730c <sim7600_update_response>:

void sim7600_update_response(const char *_res1, const char *_res2)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  LOG_WRITE("UpdateRes\n");
 8007316:	4812      	ldr	r0, [pc, #72]	; (8007360 <sim7600_update_response+0x54>)
 8007318:	f018 fb6e 	bl	801f9f8 <puts>
  if (_res1 != NULL && strlen(_res1) > 0)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <sim7600_update_response+0x26>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <sim7600_update_response+0x26>
    res1 = _res1;
 800732a:	4a0e      	ldr	r2, [pc, #56]	; (8007364 <sim7600_update_response+0x58>)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	e002      	b.n	8007338 <sim7600_update_response+0x2c>
  else
    res1 = NULL;
 8007332:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <sim7600_update_response+0x58>)
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

  if (_res2 != NULL && strlen(_res2) > 0)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d007      	beq.n	800734e <sim7600_update_response+0x42>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <sim7600_update_response+0x42>
    res2 = _res2;
 8007346:	4a08      	ldr	r2, [pc, #32]	; (8007368 <sim7600_update_response+0x5c>)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	e003      	b.n	8007356 <sim7600_update_response+0x4a>
  else
    res2 = NULL;
 800734e:	4b06      	ldr	r3, [pc, #24]	; (8007368 <sim7600_update_response+0x5c>)
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	080210b0 	.word	0x080210b0
 8007364:	2000636c 	.word	0x2000636c
 8007368:	20006360 	.word	0x20006360

0800736c <sim7600_usart_send_string>:

void sim7600_usart_send_string(const char *str)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  LOG_WRITE("sendStr\n");
 8007374:	480a      	ldr	r0, [pc, #40]	; (80073a0 <sim7600_usart_send_string+0x34>)
 8007376:	f018 fb3f 	bl	801f9f8 <puts>
  if(str != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <sim7600_usart_send_string+0x2c>
  {
    int tmpLen = strlen(str);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7f8 ff25 	bl	80001d0 <strlen>
 8007386:	4603      	mov	r3, r0
 8007388:	60fb      	str	r3, [r7, #12]
    if(tmpLen > 0)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	dd03      	ble.n	8007398 <sim7600_usart_send_string+0x2c>
      sim7600_usart_send_byte(str, tmpLen);
 8007390:	68f9      	ldr	r1, [r7, #12]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f806 	bl	80073a4 <sim7600_usart_send_byte>
  }
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	080210bc 	.word	0x080210bc

080073a4 <sim7600_usart_send_byte>:
// __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
// {
//   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
// }
void sim7600_usart_send_byte(const void *data, int len)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  LOG_WRITE("sendBytes\n");
 80073ae:	4814      	ldr	r0, [pc, #80]	; (8007400 <sim7600_usart_send_byte+0x5c>)
 80073b0:	f018 fb22 	bl	801f9f8 <puts>
  const uint8_t *d = (uint8_t*)data;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	60fb      	str	r3, [r7, #12]

  for (; len > 0; --len, ++d)
 80073b8:	e012      	b.n	80073e0 <sim7600_usart_send_byte+0x3c>
  {
    LL_USART_TransmitData8(USART1, *d);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	4810      	ldr	r0, [pc, #64]	; (8007404 <sim7600_usart_send_byte+0x60>)
 80073c2:	f7ff fd78 	bl	8006eb6 <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TXE(USART1))
 80073c6:	bf00      	nop
 80073c8:	480e      	ldr	r0, [pc, #56]	; (8007404 <sim7600_usart_send_byte+0x60>)
 80073ca:	f7ff fd3e 	bl	8006e4a <LL_USART_IsActiveFlag_TXE>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d0f9      	beq.n	80073c8 <sim7600_usart_send_byte+0x24>
  for (; len > 0; --len, ++d)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	603b      	str	r3, [r7, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3301      	adds	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	dce9      	bgt.n	80073ba <sim7600_usart_send_byte+0x16>
      ;
  }
  while (!LL_USART_IsActiveFlag_TC(USART1))
 80073e6:	bf00      	nop
 80073e8:	4806      	ldr	r0, [pc, #24]	; (8007404 <sim7600_usart_send_byte+0x60>)
 80073ea:	f7ff fd1b 	bl	8006e24 <LL_USART_IsActiveFlag_TC>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0f9      	beq.n	80073e8 <sim7600_usart_send_byte+0x44>
    ;
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	080210c4 	.word	0x080210c4
 8007404:	40011000 	.word	0x40011000

08007408 <sim7600_send_cmd>:

//send direct AT cmd, return 0: fail, 1,2: response 1,2
int sim7600_send_cmd(const char *cmd, const char *response1, const char *response2, int timeout)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	603b      	str	r3, [r7, #0]
  LOG_WRITE("sendCMD\n");
 8007416:	481a      	ldr	r0, [pc, #104]	; (8007480 <sim7600_send_cmd+0x78>)
 8007418:	f018 faee 	bl	801f9f8 <puts>
  uint32_t sendSimFlag = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	617b      	str	r3, [r7, #20]
  sim7600_update_response(response1, response2);
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f7ff ff72 	bl	800730c <sim7600_update_response>
  sim7600_usart_send_string(cmd);
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f7ff ff9f 	bl	800736c <sim7600_usart_send_string>
  cmdSendStatus = 1;
 800742e:	4b15      	ldr	r3, [pc, #84]	; (8007484 <sim7600_send_cmd+0x7c>)
 8007430:	2201      	movs	r2, #1
 8007432:	601a      	str	r2, [r3, #0]
  sendSimFlag = osEventFlagsWait(SendSimEventID, 3, osFlagsWaitAny, timeout); //500ms receive max 100 bytes with baud = 115200
 8007434:	4b14      	ldr	r3, [pc, #80]	; (8007488 <sim7600_send_cmd+0x80>)
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	2103      	movs	r1, #3
 800743e:	f002 ff21 	bl	800a284 <osEventFlagsWait>
 8007442:	6178      	str	r0, [r7, #20]
  cmdSendStatus = 0;
 8007444:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <sim7600_send_cmd+0x7c>)
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
  if(sendSimFlag == 1U || sendSimFlag == 2U)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d002      	beq.n	8007456 <sim7600_send_cmd+0x4e>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d101      	bne.n	800745a <sim7600_send_cmd+0x52>
  {
    return sendSimFlag;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	e00d      	b.n	8007476 <sim7600_send_cmd+0x6e>
  }
  else if(sendSimFlag != osFlagsErrorTimeout)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f113 0f02 	cmn.w	r3, #2
 8007460:	d008      	beq.n	8007474 <sim7600_send_cmd+0x6c>
  {
    LOG_WRITE("sim send cmd eror\n");
 8007462:	480a      	ldr	r0, [pc, #40]	; (800748c <sim7600_send_cmd+0x84>)
 8007464:	f018 fac8 	bl	801f9f8 <puts>
    osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 8007468:	4b09      	ldr	r3, [pc, #36]	; (8007490 <sim7600_send_cmd+0x88>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2104      	movs	r1, #4
 800746e:	4618      	mov	r0, r3
 8007470:	f002 fe92 	bl	800a198 <osEventFlagsSet>
  }
  return 0;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	080210d0 	.word	0x080210d0
 8007484:	200005e8 	.word	0x200005e8
 8007488:	200056c4 	.word	0x200056c4
 800748c:	080210d8 	.word	0x080210d8
 8007490:	20005734 	.word	0x20005734

08007494 <sim7600_AT>:

//push AT cmd to queue, return 0: fail, 1,2: response 1,2
int sim7600_AT(const char *cmd, const char *response1, const char *response2, int timeout, int try)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08e      	sub	sp, #56	; 0x38
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
  LOG_WRITE("simAT\n");
 80074a2:	483c      	ldr	r0, [pc, #240]	; (8007594 <sim7600_AT+0x100>)
 80074a4:	f018 faa8 	bl	801f9f8 <puts>
  sendSimPack sendMsgObj;
  osStatus_t sendMsgStt;
  uint32_t sendMsgFlag = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	637b      	str	r3, [r7, #52]	; 0x34

  osEventFlagsId_t SimATEventID = osEventFlagsNew(NULL);
 80074ac:	2000      	movs	r0, #0
 80074ae:	f002 fe34 	bl	800a11a <osEventFlagsNew>
 80074b2:	6338      	str	r0, [r7, #48]	; 0x30
  if (SimATEventID == NULL)
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <sim7600_AT+0x3c>
  {
    LOG_WRITE("SimATEventID eror\n");
 80074ba:	4837      	ldr	r0, [pc, #220]	; (8007598 <sim7600_AT+0x104>)
 80074bc:	f018 fa9c 	bl	801f9f8 <puts>
    osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 80074c0:	4b36      	ldr	r3, [pc, #216]	; (800759c <sim7600_AT+0x108>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2104      	movs	r1, #4
 80074c6:	4618      	mov	r0, r3
 80074c8:	f002 fe66 	bl	800a198 <osEventFlagsSet>
    return 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e05c      	b.n	800758a <sim7600_AT+0xf6>
  }

  //put data
  sendMsgObj.EventID = SimATEventID;
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	613b      	str	r3, [r7, #16]
  sendMsgObj.ptr = cmd;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	61bb      	str	r3, [r7, #24]
  sendMsgObj.res1 = response1;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	623b      	str	r3, [r7, #32]
  sendMsgObj.res2 = response2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
  sendMsgObj.timeout = timeout;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sendMsgObj.type = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	753b      	strb	r3, [r7, #20]
  while (try-- > 0)
 80074e8:	e046      	b.n	8007578 <sim7600_AT+0xe4>
  {
    sendMsgStt = osMessageQueuePut(SendSimQueueID, &sendMsgObj, 0U, 0U);
 80074ea:	4b2d      	ldr	r3, [pc, #180]	; (80075a0 <sim7600_AT+0x10c>)
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	f107 0110 	add.w	r1, r7, #16
 80074f2:	2300      	movs	r3, #0
 80074f4:	2200      	movs	r2, #0
 80074f6:	f003 fa11 	bl	800a91c <osMessageQueuePut>
 80074fa:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (sendMsgStt == osOK)
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d120      	bne.n	8007544 <sim7600_AT+0xb0>
    {
      sendMsgFlag = osEventFlagsWait(SimATEventID, 3, osFlagsWaitAny, timeout + 100); //+100 margin
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	3364      	adds	r3, #100	; 0x64
 8007506:	2200      	movs	r2, #0
 8007508:	2103      	movs	r1, #3
 800750a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800750c:	f002 feba 	bl	800a284 <osEventFlagsWait>
 8007510:	6378      	str	r0, [r7, #52]	; 0x34
      if (sendMsgFlag == 1 || sendMsgFlag == 2) 
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	2b01      	cmp	r3, #1
 8007516:	d002      	beq.n	800751e <sim7600_AT+0x8a>
 8007518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751a:	2b02      	cmp	r3, #2
 800751c:	d104      	bne.n	8007528 <sim7600_AT+0x94>
      {
        osEventFlagsDelete(SimATEventID);
 800751e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007520:	f002 ff16 	bl	800a350 <osEventFlagsDelete>
        return sendMsgFlag;
 8007524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007526:	e030      	b.n	800758a <sim7600_AT+0xf6>
      }
      else if(sendMsgFlag != osFlagsErrorTimeout) //flag error
 8007528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752a:	f113 0f02 	cmn.w	r3, #2
 800752e:	d023      	beq.n	8007578 <sim7600_AT+0xe4>
      {
        LOG_WRITE("SendSimQueueID eror1\n");
 8007530:	481c      	ldr	r0, [pc, #112]	; (80075a4 <sim7600_AT+0x110>)
 8007532:	f018 fa61 	bl	801f9f8 <puts>
        osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 8007536:	4b19      	ldr	r3, [pc, #100]	; (800759c <sim7600_AT+0x108>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2104      	movs	r1, #4
 800753c:	4618      	mov	r0, r3
 800753e:	f002 fe2b 	bl	800a198 <osEventFlagsSet>
        break;
 8007542:	e01e      	b.n	8007582 <sim7600_AT+0xee>
      }
    }
    else if(sendMsgStt == osErrorTimeout || sendMsgStt == osErrorResource)
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	f113 0f02 	cmn.w	r3, #2
 800754a:	d003      	beq.n	8007554 <sim7600_AT+0xc0>
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	f113 0f03 	cmn.w	r3, #3
 8007552:	d107      	bne.n	8007564 <sim7600_AT+0xd0>
    {
      if(try > 0)
 8007554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	dd0e      	ble.n	8007578 <sim7600_AT+0xe4>
        osDelay(timeout);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	4618      	mov	r0, r3
 800755e:	f002 fcca 	bl	8009ef6 <osDelay>
      if(try > 0)
 8007562:	e009      	b.n	8007578 <sim7600_AT+0xe4>
    }
    else //msg queue error
    {
      LOG_WRITE("SendSimQueueID error2\n");
 8007564:	4810      	ldr	r0, [pc, #64]	; (80075a8 <sim7600_AT+0x114>)
 8007566:	f018 fa47 	bl	801f9f8 <puts>
      osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart + reset
 800756a:	4b0c      	ldr	r3, [pc, #48]	; (800759c <sim7600_AT+0x108>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2104      	movs	r1, #4
 8007570:	4618      	mov	r0, r3
 8007572:	f002 fe11 	bl	800a198 <osEventFlagsSet>
      break;
 8007576:	e004      	b.n	8007582 <sim7600_AT+0xee>
  while (try-- > 0)
 8007578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800757a:	1e5a      	subs	r2, r3, #1
 800757c:	643a      	str	r2, [r7, #64]	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	dcb3      	bgt.n	80074ea <sim7600_AT+0x56>
    }
  }
  osEventFlagsDelete(SimATEventID);
 8007582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007584:	f002 fee4 	bl	800a350 <osEventFlagsDelete>
  return 0; //fail
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3738      	adds	r7, #56	; 0x38
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	080210ec 	.word	0x080210ec
 8007598:	080210f4 	.word	0x080210f4
 800759c:	20005734 	.word	0x20005734
 80075a0:	20005740 	.word	0x20005740
 80075a4:	08021108 	.word	0x08021108
 80075a8:	08021120 	.word	0x08021120

080075ac <sim7600_AT_notify_error>:

//send AT and set simError flag if error, return false if send error
int sim7600_AT_notify_error(const char *cmd, const char *response1, const char *response2, int timeout, int try)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
  LOG_WRITE("simATnotify\n");
 80075ba:	480e      	ldr	r0, [pc, #56]	; (80075f4 <sim7600_AT_notify_error+0x48>)
 80075bc:	f018 fa1c 	bl	801f9f8 <puts>
  int tmpFlag = sim7600_AT(cmd, response1, response2, timeout, try);
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7ff ff62 	bl	8007494 <sim7600_AT>
 80075d0:	6178      	str	r0, [r7, #20]
  if (tmpFlag == 0) //error
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d108      	bne.n	80075ea <sim7600_AT_notify_error+0x3e>
  {
    //set bit simError in ConfigSimEventID to restart and re config
    LOG_WRITE("sim7600_AT_notify error\n");
 80075d8:	4807      	ldr	r0, [pc, #28]	; (80075f8 <sim7600_AT_notify_error+0x4c>)
 80075da:	f018 fa0d 	bl	801f9f8 <puts>
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 80075de:	4b07      	ldr	r3, [pc, #28]	; (80075fc <sim7600_AT_notify_error+0x50>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2104      	movs	r1, #4
 80075e4:	4618      	mov	r0, r3
 80075e6:	f002 fdd7 	bl	800a198 <osEventFlagsSet>
  }
  return tmpFlag;
 80075ea:	697b      	ldr	r3, [r7, #20]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	08021138 	.word	0x08021138
 80075f8:	08021144 	.word	0x08021144
 80075fc:	20005734 	.word	0x20005734

08007600 <sim7600_send_packet_ip>:
//debug
uint32_t waitTimecmdSendStatus2;

//send packet, type:1 - TCP , type:2 - UDP; return true: send successful, false: fail
bool sim7600_send_packet_ip(int type, const uint8_t *data, int data_length)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	; 0x28
 8007604:	af02      	add	r7, sp, #8
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  LOG_WRITE("sendIP %d\n", type);
 800760c:	68f9      	ldr	r1, [r7, #12]
 800760e:	4858      	ldr	r0, [pc, #352]	; (8007770 <sim7600_send_packet_ip+0x170>)
 8007610:	f018 f96c 	bl	801f8ec <iprintf>
  //can send udp when sim7600ConnectStatus  == 2 and tcp when sim7600ConnectStatus >= 1;
  char *sim7600_cmd_buff; //default null
  if (type == 2 && sim7600ConnectStatus == 2)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d11f      	bne.n	800765a <sim7600_send_packet_ip+0x5a>
 800761a:	4b56      	ldr	r3, [pc, #344]	; (8007774 <sim7600_send_packet_ip+0x174>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d11b      	bne.n	800765a <sim7600_send_packet_ip+0x5a>
  { 
    // udp
    if (serverDomain != NULL)
    {
      int tmpLen = strlen(serverDomain);
 8007622:	4855      	ldr	r0, [pc, #340]	; (8007778 <sim7600_send_packet_ip+0x178>)
 8007624:	f7f8 fdd4 	bl	80001d0 <strlen>
 8007628:	4603      	mov	r3, r0
 800762a:	617b      	str	r3, [r7, #20]
      if (tmpLen > 0)
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2b00      	cmp	r3, #0
 8007630:	dd2a      	ble.n	8007688 <sim7600_send_packet_ip+0x88>
      {
        sim7600_cmd_buff = (char *)malloc(tmpLen + 35);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	3323      	adds	r3, #35	; 0x23
 8007636:	4618      	mov	r0, r3
 8007638:	f018 f850 	bl	801f6dc <malloc>
 800763c:	4603      	mov	r3, r0
 800763e:	61fb      	str	r3, [r7, #28]
        if (sim7600_cmd_buff != NULL)
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d020      	beq.n	8007688 <sim7600_send_packet_ip+0x88>
          sprintf(sim7600_cmd_buff, "AT+CIPSEND=1,%d,\"%s\",%d\r", data_length, serverDomain, serverPort);
 8007646:	4b4d      	ldr	r3, [pc, #308]	; (800777c <sim7600_send_packet_ip+0x17c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4b4a      	ldr	r3, [pc, #296]	; (8007778 <sim7600_send_packet_ip+0x178>)
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	494b      	ldr	r1, [pc, #300]	; (8007780 <sim7600_send_packet_ip+0x180>)
 8007652:	69f8      	ldr	r0, [r7, #28]
 8007654:	f018 fac0 	bl	801fbd8 <siprintf>
    if (serverDomain != NULL)
 8007658:	e016      	b.n	8007688 <sim7600_send_packet_ip+0x88>
      }
    }
  }
  else if (type == 1 && sim7600ConnectStatus >= 1)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d111      	bne.n	8007684 <sim7600_send_packet_ip+0x84>
 8007660:	4b44      	ldr	r3, [pc, #272]	; (8007774 <sim7600_send_packet_ip+0x174>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	dd0d      	ble.n	8007684 <sim7600_send_packet_ip+0x84>
  { 
    //tcp
    sim7600_cmd_buff = (char*)malloc(25);
 8007668:	2019      	movs	r0, #25
 800766a:	f018 f837 	bl	801f6dc <malloc>
 800766e:	4603      	mov	r3, r0
 8007670:	61fb      	str	r3, [r7, #28]
    if(sim7600_cmd_buff != NULL)
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d008      	beq.n	800768a <sim7600_send_packet_ip+0x8a>
      sprintf(sim7600_cmd_buff, "AT+CIPSEND=0,%d\r", data_length);
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	4942      	ldr	r1, [pc, #264]	; (8007784 <sim7600_send_packet_ip+0x184>)
 800767c:	69f8      	ldr	r0, [r7, #28]
 800767e:	f018 faab 	bl	801fbd8 <siprintf>
    if(sim7600_cmd_buff != NULL)
 8007682:	e002      	b.n	800768a <sim7600_send_packet_ip+0x8a>
  }
  else
  {
    return false;
 8007684:	2300      	movs	r3, #0
 8007686:	e06e      	b.n	8007766 <sim7600_send_packet_ip+0x166>
    if (serverDomain != NULL)
 8007688:	bf00      	nop
  }

  if (sim7600_cmd_buff == NULL) //can't allocate memory
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10a      	bne.n	80076a6 <sim7600_send_packet_ip+0xa6>
  {
    LOG_WRITE("sim7600_send_packet_ip allocate error\n");
 8007690:	483d      	ldr	r0, [pc, #244]	; (8007788 <sim7600_send_packet_ip+0x188>)
 8007692:	f018 f9b1 	bl	801f9f8 <puts>
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8007696:	4b3d      	ldr	r3, [pc, #244]	; (800778c <sim7600_send_packet_ip+0x18c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2104      	movs	r1, #4
 800769c:	4618      	mov	r0, r3
 800769e:	f002 fd7b 	bl	800a198 <osEventFlagsSet>
    return false;
 80076a2:	2300      	movs	r3, #0
 80076a4:	e05f      	b.n	8007766 <sim7600_send_packet_ip+0x166>
  }

  sim7600_usart_send_string(sim7600_cmd_buff);
 80076a6:	69f8      	ldr	r0, [r7, #28]
 80076a8:	f7ff fe60 	bl	800736c <sim7600_usart_send_string>
  free(sim7600_cmd_buff);
 80076ac:	69f8      	ldr	r0, [r7, #28]
 80076ae:	f018 f81d 	bl	801f6ec <free>
  // sim7600_update_response(">",""); //not necessaary, see sim7600_handle_received to know detail, at line cmdSendStatus == 2
  cmdSendStatus = 2; // -> ipSendStatus
 80076b2:	4b37      	ldr	r3, [pc, #220]	; (8007790 <sim7600_send_packet_ip+0x190>)
 80076b4:	2202      	movs	r2, #2
 80076b6:	601a      	str	r2, [r3, #0]

  //debug
  uint32_t tmpCNT = TIM2->CNT;
 80076b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	613b      	str	r3, [r7, #16]

  uint32_t sendSimFlag = osEventFlagsWait(SendSimEventID, 1U, osFlagsWaitAll, 500); //500ms receive max 100 bytes with baud = 115200
 80076c0:	4b34      	ldr	r3, [pc, #208]	; (8007794 <sim7600_send_packet_ip+0x194>)
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80076c8:	2201      	movs	r2, #1
 80076ca:	2101      	movs	r1, #1
 80076cc:	f002 fdda 	bl	800a284 <osEventFlagsWait>
 80076d0:	61b8      	str	r0, [r7, #24]

  //debug
  waitTimecmdSendStatus2 = (TIM2->CNT - tmpCNT) >> 1;
 80076d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	085b      	lsrs	r3, r3, #1
 80076de:	4a2e      	ldr	r2, [pc, #184]	; (8007798 <sim7600_send_packet_ip+0x198>)
 80076e0:	6013      	str	r3, [r2, #0]

  if (sendSimFlag == 1U)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d113      	bne.n	8007710 <sim7600_send_packet_ip+0x110>
  { //recevied >
    sim7600_update_response("+CIPSEND", "+CIPERROR");
 80076e8:	492c      	ldr	r1, [pc, #176]	; (800779c <sim7600_send_packet_ip+0x19c>)
 80076ea:	482d      	ldr	r0, [pc, #180]	; (80077a0 <sim7600_send_packet_ip+0x1a0>)
 80076ec:	f7ff fe0e 	bl	800730c <sim7600_update_response>
    sim7600_usart_send_byte(data, data_length);
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	68b8      	ldr	r0, [r7, #8]
 80076f4:	f7ff fe56 	bl	80073a4 <sim7600_usart_send_byte>
    cmdSendStatus = 1; // -> ipSendStatus
 80076f8:	4b25      	ldr	r3, [pc, #148]	; (8007790 <sim7600_send_packet_ip+0x190>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	601a      	str	r2, [r3, #0]
    sendSimFlag = osEventFlagsWait(SendSimEventID, 3U, osFlagsWaitAny, 5000);
 80076fe:	4b25      	ldr	r3, [pc, #148]	; (8007794 <sim7600_send_packet_ip+0x194>)
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	f241 3388 	movw	r3, #5000	; 0x1388
 8007706:	2200      	movs	r2, #0
 8007708:	2103      	movs	r1, #3
 800770a:	f002 fdbb 	bl	800a284 <osEventFlagsWait>
 800770e:	61b8      	str	r0, [r7, #24]
  }
  cmdSendStatus = 0; // reset
 8007710:	4b1f      	ldr	r3, [pc, #124]	; (8007790 <sim7600_send_packet_ip+0x190>)
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
  if(sendSimFlag == 1U) //send success full
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d104      	bne.n	8007726 <sim7600_send_packet_ip+0x126>
  {
    send_ip_error_count = 0;
 800771c:	4b21      	ldr	r3, [pc, #132]	; (80077a4 <sim7600_send_packet_ip+0x1a4>)
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
    return true;
 8007722:	2301      	movs	r3, #1
 8007724:	e01f      	b.n	8007766 <sim7600_send_packet_ip+0x166>
  }
  else if(sendSimFlag == 2U)
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	2b02      	cmp	r3, #2
 800772a:	d112      	bne.n	8007752 <sim7600_send_packet_ip+0x152>
  {
    send_ip_error_count++;
 800772c:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <sim7600_send_packet_ip+0x1a4>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3301      	adds	r3, #1
 8007732:	4a1c      	ldr	r2, [pc, #112]	; (80077a4 <sim7600_send_packet_ip+0x1a4>)
 8007734:	6013      	str	r3, [r2, #0]
    if(send_ip_error_count >= SEND_IP_ERROR_COUNT_MAX)
 8007736:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <sim7600_send_packet_ip+0x1a4>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b04      	cmp	r3, #4
 800773c:	dd12      	ble.n	8007764 <sim7600_send_packet_ip+0x164>
    {
      send_ip_error_count = 0;
 800773e:	4b19      	ldr	r3, [pc, #100]	; (80077a4 <sim7600_send_packet_ip+0x1a4>)
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
      osEventFlagsSet(ConnectSimEventID, 1 << ipCloseEnum); //re-CONNECT
 8007744:	4b18      	ldr	r3, [pc, #96]	; (80077a8 <sim7600_send_packet_ip+0x1a8>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2110      	movs	r1, #16
 800774a:	4618      	mov	r0, r3
 800774c:	f002 fd24 	bl	800a198 <osEventFlagsSet>
 8007750:	e008      	b.n	8007764 <sim7600_send_packet_ip+0x164>
    }
  }
  else //don't recv response -> something wrong
  {
    LOG_WRITE("sendSimFlag error\n");
 8007752:	4816      	ldr	r0, [pc, #88]	; (80077ac <sim7600_send_packet_ip+0x1ac>)
 8007754:	f018 f950 	bl	801f9f8 <puts>
    osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart, reset
 8007758:	4b0c      	ldr	r3, [pc, #48]	; (800778c <sim7600_send_packet_ip+0x18c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2104      	movs	r1, #4
 800775e:	4618      	mov	r0, r3
 8007760:	f002 fd1a 	bl	800a198 <osEventFlagsSet>
  }
  return false;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	0802115c 	.word	0x0802115c
 8007774:	200005f0 	.word	0x200005f0
 8007778:	20000244 	.word	0x20000244
 800777c:	200002a8 	.word	0x200002a8
 8007780:	08021168 	.word	0x08021168
 8007784:	08021184 	.word	0x08021184
 8007788:	08021198 	.word	0x08021198
 800778c:	20005734 	.word	0x20005734
 8007790:	200005e8 	.word	0x200005e8
 8007794:	200056c4 	.word	0x200056c4
 8007798:	20006368 	.word	0x20006368
 800779c:	080211c0 	.word	0x080211c0
 80077a0:	080211cc 	.word	0x080211cc
 80077a4:	200005ec 	.word	0x200005ec
 80077a8:	20005738 	.word	0x20005738
 80077ac:	080211d8 	.word	0x080211d8

080077b0 <sim7600_IP>:

//send IP packet by put to send sim queue. type: 2-udp, 1-tcp
bool sim7600_IP(int type, uint8_t *data, int len)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08c      	sub	sp, #48	; 0x30
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  LOG_WRITE("simIP %d\n", type);;
 80077bc:	68f9      	ldr	r1, [r7, #12]
 80077be:	4812      	ldr	r0, [pc, #72]	; (8007808 <sim7600_IP+0x58>)
 80077c0:	f018 f894 	bl	801f8ec <iprintf>
  if(type != 1 && type != 2)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d004      	beq.n	80077d4 <sim7600_IP+0x24>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d001      	beq.n	80077d4 <sim7600_IP+0x24>
  {
    return false;
 80077d0:	2300      	movs	r3, #0
 80077d2:	e015      	b.n	8007800 <sim7600_IP+0x50>
  }
  sendSimPack sendMsgObj;
  sendMsgObj.ptr = data;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	61bb      	str	r3, [r7, #24]
  sendMsgObj.len = len;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	61fb      	str	r3, [r7, #28]
  sendMsgObj.type = type;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	753b      	strb	r3, [r7, #20]
  osStatus_t sendMsgStt = osMessageQueuePut(SendSimQueueID, &sendMsgObj, 0U, 0U);
 80077e2:	4b0a      	ldr	r3, [pc, #40]	; (800780c <sim7600_IP+0x5c>)
 80077e4:	6818      	ldr	r0, [r3, #0]
 80077e6:	f107 0110 	add.w	r1, r7, #16
 80077ea:	2300      	movs	r3, #0
 80077ec:	2200      	movs	r2, #0
 80077ee:	f003 f895 	bl	800a91c <osMessageQueuePut>
 80077f2:	62f8      	str	r0, [r7, #44]	; 0x2c

  return (sendMsgStt == osOK);
 80077f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	bf0c      	ite	eq
 80077fa:	2301      	moveq	r3, #1
 80077fc:	2300      	movne	r3, #0
 80077fe:	b2db      	uxtb	r3, r3
}
 8007800:	4618      	mov	r0, r3
 8007802:	3730      	adds	r7, #48	; 0x30
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	080211ec 	.word	0x080211ec
 800780c:	20005740 	.word	0x20005740

08007810 <sim7600_fullConfig>:
  return true;
}

//full config for internet
bool sim7600_fullConfig()
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08a      	sub	sp, #40	; 0x28
 8007814:	af02      	add	r7, sp, #8
  LOG_WRITE("fullConfig\n");
 8007816:	484d      	ldr	r0, [pc, #308]	; (800794c <sim7600_fullConfig+0x13c>)
 8007818:	f018 f8ee 	bl	801f9f8 <puts>
  char sim7600_cmd_buff[25];
  //change to main baudrate permantly
  // sprintf(sim7600_cmd_buff, "AT+IPR=%d\r\n", SIM7600_BAUDRATE_MAIN); //temporarily
  sprintf(sim7600_cmd_buff, "AT+IPREX=%d\r\n", SIM7600_BAUDRATE_MAIN); //permantly, prevent receive "...SMS DONE..." after reboot/power-up
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	4a4c      	ldr	r2, [pc, #304]	; (8007950 <sim7600_fullConfig+0x140>)
 8007820:	494c      	ldr	r1, [pc, #304]	; (8007954 <sim7600_fullConfig+0x144>)
 8007822:	4618      	mov	r0, r3
 8007824:	f018 f9d8 	bl	801fbd8 <siprintf>
  sim7600_AT(sim7600_cmd_buff, "OK", NULL, 500, 2);              //don't check for the first config
 8007828:	1d38      	adds	r0, r7, #4
 800782a:	2302      	movs	r3, #2
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007832:	2200      	movs	r2, #0
 8007834:	4948      	ldr	r1, [pc, #288]	; (8007958 <sim7600_fullConfig+0x148>)
 8007836:	f7ff fe2d 	bl	8007494 <sim7600_AT>
  sim7600_change_baud(SIM7600_BAUDRATE_MAIN);
 800783a:	4845      	ldr	r0, [pc, #276]	; (8007950 <sim7600_fullConfig+0x140>)
 800783c:	f000 ff28 	bl	8008690 <sim7600_change_baud>
  if (!sim7600_AT(sim7600_cmd_buff, "OK", NULL, 500, 2))
 8007840:	1d38      	adds	r0, r7, #4
 8007842:	2302      	movs	r3, #2
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800784a:	2200      	movs	r2, #0
 800784c:	4942      	ldr	r1, [pc, #264]	; (8007958 <sim7600_fullConfig+0x148>)
 800784e:	f7ff fe21 	bl	8007494 <sim7600_AT>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <sim7600_fullConfig+0x4c>
    return false;
 8007858:	2300      	movs	r3, #0
 800785a:	e073      	b.n	8007944 <sim7600_fullConfig+0x134>
  //echo cmd off
  if (!sim7600_AT("ATE0\r\n", "OK", NULL, 500, 2))
 800785c:	2302      	movs	r3, #2
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007864:	2200      	movs	r2, #0
 8007866:	493c      	ldr	r1, [pc, #240]	; (8007958 <sim7600_fullConfig+0x148>)
 8007868:	483c      	ldr	r0, [pc, #240]	; (800795c <sim7600_fullConfig+0x14c>)
 800786a:	f7ff fe13 	bl	8007494 <sim7600_AT>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <sim7600_fullConfig+0x68>
    return false;
 8007874:	2300      	movs	r3, #0
 8007876:	e065      	b.n	8007944 <sim7600_fullConfig+0x134>
  restartSimstatus = 0; //reset
 8007878:	4b39      	ldr	r3, [pc, #228]	; (8007960 <sim7600_fullConfig+0x150>)
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]

  //flow control AT+IFC=2,2 (sim_RTS, sim_CTS respectively)
  if (!sim7600_AT("AT+IFC=2,2\r\n", "OK", NULL, 500, 2))
 800787e:	2302      	movs	r3, #2
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007886:	2200      	movs	r2, #0
 8007888:	4933      	ldr	r1, [pc, #204]	; (8007958 <sim7600_fullConfig+0x148>)
 800788a:	4836      	ldr	r0, [pc, #216]	; (8007964 <sim7600_fullConfig+0x154>)
 800788c:	f7ff fe02 	bl	8007494 <sim7600_AT>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <sim7600_fullConfig+0x8a>
    return false;
 8007896:	2300      	movs	r3, #0
 8007898:	e054      	b.n	8007944 <sim7600_fullConfig+0x134>

  //check sim
  if (!sim7600_AT("at+ciccid\r\n", "OK", NULL, 500, 2))
 800789a:	2302      	movs	r3, #2
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80078a2:	2200      	movs	r2, #0
 80078a4:	492c      	ldr	r1, [pc, #176]	; (8007958 <sim7600_fullConfig+0x148>)
 80078a6:	4830      	ldr	r0, [pc, #192]	; (8007968 <sim7600_fullConfig+0x158>)
 80078a8:	f7ff fdf4 	bl	8007494 <sim7600_AT>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <sim7600_fullConfig+0xa6>
    return false;
 80078b2:	2300      	movs	r3, #0
 80078b4:	e046      	b.n	8007944 <sim7600_fullConfig+0x134>
  if (!sim7600_AT("at+csq\r\n", "OK", NULL, 500, 2))
 80078b6:	2302      	movs	r3, #2
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80078be:	2200      	movs	r2, #0
 80078c0:	4925      	ldr	r1, [pc, #148]	; (8007958 <sim7600_fullConfig+0x148>)
 80078c2:	482a      	ldr	r0, [pc, #168]	; (800796c <sim7600_fullConfig+0x15c>)
 80078c4:	f7ff fde6 	bl	8007494 <sim7600_AT>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <sim7600_fullConfig+0xc2>
    return false;
 80078ce:	2300      	movs	r3, #0
 80078d0:	e038      	b.n	8007944 <sim7600_fullConfig+0x134>

  // set timeout value for AT+NETOPEN/AT+CIPOPEN/AT+CIPSEND
  //AT+CIPTIMEOUT=10000,10000,5000 ~ 10s, 10s, 5s
  if (!sim7600_AT("AT+CIPTIMEOUT=10000,10000,5000\r\n", "OK", NULL, 500, 2))
 80078d2:	2302      	movs	r3, #2
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80078da:	2200      	movs	r2, #0
 80078dc:	491e      	ldr	r1, [pc, #120]	; (8007958 <sim7600_fullConfig+0x148>)
 80078de:	4824      	ldr	r0, [pc, #144]	; (8007970 <sim7600_fullConfig+0x160>)
 80078e0:	f7ff fdd8 	bl	8007494 <sim7600_AT>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <sim7600_fullConfig+0xde>
    return false;
 80078ea:	2300      	movs	r3, #0
 80078ec:	e02a      	b.n	8007944 <sim7600_fullConfig+0x134>
  //10 times retranmission IP packet, no(0) delay to output data received
  //ack=0, 1:error result code with string values
  //1:add data header, the format is â€œ+RECEIVE,<link num>,<data length>â€�
  //< AsyncMode > = 0
  //minimum retransmission timeout value for TCP connection in ms : 500
  if (!sim7600_AT("AT+CIPCCFG=10,0,0,1,1,0,500\r\n", "OK", NULL, 500, 2))
 80078ee:	2302      	movs	r3, #2
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80078f6:	2200      	movs	r2, #0
 80078f8:	4917      	ldr	r1, [pc, #92]	; (8007958 <sim7600_fullConfig+0x148>)
 80078fa:	481e      	ldr	r0, [pc, #120]	; (8007974 <sim7600_fullConfig+0x164>)
 80078fc:	f7ff fdca 	bl	8007494 <sim7600_AT>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <sim7600_fullConfig+0xfa>
    return false;
 8007906:	2300      	movs	r3, #0
 8007908:	e01c      	b.n	8007944 <sim7600_fullConfig+0x134>

  //display header when receive â€œ+RECEIVE,<link num>,<data length>â€�
  //AT+CIPHEAD=1 : \r\nOK\r\n
  if (!sim7600_AT("AT+CIPHEAD=1\r\n", "OK", NULL, 500, 2))
 800790a:	2302      	movs	r3, #2
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007912:	2200      	movs	r2, #0
 8007914:	4910      	ldr	r1, [pc, #64]	; (8007958 <sim7600_fullConfig+0x148>)
 8007916:	4818      	ldr	r0, [pc, #96]	; (8007978 <sim7600_fullConfig+0x168>)
 8007918:	f7ff fdbc 	bl	8007494 <sim7600_AT>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <sim7600_fullConfig+0x116>
    return false;
 8007922:	2300      	movs	r3, #0
 8007924:	e00e      	b.n	8007944 <sim7600_fullConfig+0x134>

  //don't display remote IP (server ip)
  //AT+CIPSRIP=0 : \r\nOK\r\n
  if (!sim7600_AT("AT+CIPSRIP=0\r\n", "OK", NULL, 500, 2))
 8007926:	2302      	movs	r3, #2
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800792e:	2200      	movs	r2, #0
 8007930:	4909      	ldr	r1, [pc, #36]	; (8007958 <sim7600_fullConfig+0x148>)
 8007932:	4812      	ldr	r0, [pc, #72]	; (800797c <sim7600_fullConfig+0x16c>)
 8007934:	f7ff fdae 	bl	8007494 <sim7600_AT>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <sim7600_fullConfig+0x132>
    return false;
 800793e:	2300      	movs	r3, #0
 8007940:	e000      	b.n	8007944 <sim7600_fullConfig+0x134>

  return true;
 8007942:	2301      	movs	r3, #1
}
 8007944:	4618      	mov	r0, r3
 8007946:	3720      	adds	r7, #32
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	080211f8 	.word	0x080211f8
 8007950:	002dc6c0 	.word	0x002dc6c0
 8007954:	08021204 	.word	0x08021204
 8007958:	08021214 	.word	0x08021214
 800795c:	08021218 	.word	0x08021218
 8007960:	200005e4 	.word	0x200005e4
 8007964:	08021220 	.word	0x08021220
 8007968:	08021230 	.word	0x08021230
 800796c:	0802123c 	.word	0x0802123c
 8007970:	08021248 	.word	0x08021248
 8007974:	0802126c 	.word	0x0802126c
 8007978:	0802128c 	.word	0x0802128c
 800797c:	0802129c 	.word	0x0802129c

08007980 <sim7600_fullConfigTask>:

void sim7600_fullConfigTask()
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af02      	add	r7, sp, #8
  //     }
  //   }
  // }


  LOG_WRITE("fullConfigTask\n");
 8007986:	4864      	ldr	r0, [pc, #400]	; (8007b18 <sim7600_fullConfigTask+0x198>)
 8007988:	f018 f836 	bl	801f9f8 <puts>
  //first config
  sim7600_init(false);
 800798c:	2000      	movs	r0, #0
 800798e:	f7ff fbe1 	bl	8007154 <sim7600_init>
    LOG_WRITE("sim7600_fullConfigTask error0\n");
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart sim7600 and reset stm32
  }
  else
  {
    if (sim7600_fullConfig())
 8007992:	f7ff ff3d 	bl	8007810 <sim7600_fullConfig>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00c      	beq.n	80079b6 <sim7600_fullConfigTask+0x36>
    {
      //set event to invoke connect task open net and open socket tcp, udp
      osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 800799c:	4b5f      	ldr	r3, [pc, #380]	; (8007b1c <sim7600_fullConfigTask+0x19c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2102      	movs	r1, #2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f002 fbf8 	bl	800a198 <osEventFlagsSet>
      osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 80079a8:	4b5c      	ldr	r3, [pc, #368]	; (8007b1c <sim7600_fullConfigTask+0x19c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2101      	movs	r1, #1
 80079ae:	4618      	mov	r0, r3
 80079b0:	f002 fbf2 	bl	800a198 <osEventFlagsSet>
 80079b4:	e008      	b.n	80079c8 <sim7600_fullConfigTask+0x48>
      // osThreadFlagsSet(connectSimTaskHandle, 1 << reConEnum);
    }
    else
    { //error
      LOG_WRITE("sim7600_fullConfigTask error1\n");
 80079b6:	485a      	ldr	r0, [pc, #360]	; (8007b20 <sim7600_fullConfigTask+0x1a0>)
 80079b8:	f018 f81e 	bl	801f9f8 <puts>
      //set bit simError in ConfigSimEventID to restart and re-config
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 80079bc:	4b59      	ldr	r3, [pc, #356]	; (8007b24 <sim7600_fullConfigTask+0x1a4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2104      	movs	r1, #4
 80079c2:	4618      	mov	r0, r3
 80079c4:	f002 fbe8 	bl	800a198 <osEventFlagsSet>
  }
  ////
  int configSimFlag;
  for (;;)
  {
    configSimFlag = osEventFlagsWait(ConfigSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 80079c8:	4b56      	ldr	r3, [pc, #344]	; (8007b24 <sim7600_fullConfigTask+0x1a4>)
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	f04f 33ff 	mov.w	r3, #4294967295
 80079d0:	2202      	movs	r2, #2
 80079d2:	21ff      	movs	r1, #255	; 0xff
 80079d4:	f002 fc56 	bl	800a284 <osEventFlagsWait>
 80079d8:	4603      	mov	r3, r0
 80079da:	607b      	str	r3, [r7, #4]
    LOG_WRITE("configSimFlag %d\n", configSimFlag);
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4852      	ldr	r0, [pc, #328]	; (8007b28 <sim7600_fullConfigTask+0x1a8>)
 80079e0:	f017 ff84 	bl	801f8ec <iprintf>
    if(configSimFlag < 0) //error 0xFFFFFFF...U
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	da0c      	bge.n	8007a04 <sim7600_fullConfigTask+0x84>
    {
      LOG_WRITE("configSimFlag errorFlag\n");
 80079ea:	4850      	ldr	r0, [pc, #320]	; (8007b2c <sim7600_fullConfigTask+0x1ac>)
 80079ec:	f018 f804 	bl	801f9f8 <puts>
      LOG_WRITE("sim7600_fullConfigTask error2\n");
 80079f0:	484f      	ldr	r0, [pc, #316]	; (8007b30 <sim7600_fullConfigTask+0x1b0>)
 80079f2:	f018 f801 	bl	801f9f8 <puts>
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 80079f6:	4b4b      	ldr	r3, [pc, #300]	; (8007b24 <sim7600_fullConfigTask+0x1a4>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2104      	movs	r1, #4
 80079fc:	4618      	mov	r0, r3
 80079fe:	f002 fbcb 	bl	800a198 <osEventFlagsSet>
 8007a02:	e7e1      	b.n	80079c8 <sim7600_fullConfigTask+0x48>
    }
    //analyze follow priority
    else if (configSimFlag & (1 << simErrorEnum))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d026      	beq.n	8007a5c <sim7600_fullConfigTask+0xdc>
    {
      LOG_WRITE("configSimFlag simError\n");
 8007a0e:	4849      	ldr	r0, [pc, #292]	; (8007b34 <sim7600_fullConfigTask+0x1b4>)
 8007a10:	f017 fff2 	bl	801f9f8 <puts>
      osEventFlagsClear(ConfigSimEventID, 1 << simErrorEnum);
 8007a14:	4b43      	ldr	r3, [pc, #268]	; (8007b24 <sim7600_fullConfigTask+0x1a4>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2104      	movs	r1, #4
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f002 fc00 	bl	800a220 <osEventFlagsClear>
      //restart then clear all flag, var
      sim7600_restart(); //restart + reset
 8007a20:	f000 fe90 	bl	8008744 <sim7600_restart>
      if (sim7600_fullConfig())
 8007a24:	f7ff fef4 	bl	8007810 <sim7600_fullConfig>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00c      	beq.n	8007a48 <sim7600_fullConfigTask+0xc8>
      {
        //set event to invoke connect task open net and open socket tcp, udp
        osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 8007a2e:	4b3b      	ldr	r3, [pc, #236]	; (8007b1c <sim7600_fullConfigTask+0x19c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2102      	movs	r1, #2
 8007a34:	4618      	mov	r0, r3
 8007a36:	f002 fbaf 	bl	800a198 <osEventFlagsSet>
        osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8007a3a:	4b38      	ldr	r3, [pc, #224]	; (8007b1c <sim7600_fullConfigTask+0x19c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2101      	movs	r1, #1
 8007a40:	4618      	mov	r0, r3
 8007a42:	f002 fba9 	bl	800a198 <osEventFlagsSet>
 8007a46:	e7bf      	b.n	80079c8 <sim7600_fullConfigTask+0x48>
        // osThreadFlagsSet(connectSimTaskHandle, 1 << reConEnum);
      }
      else
      { //error
        LOG_WRITE("sim7600_fullConfigTask error3\n");
 8007a48:	483b      	ldr	r0, [pc, #236]	; (8007b38 <sim7600_fullConfigTask+0x1b8>)
 8007a4a:	f017 ffd5 	bl	801f9f8 <puts>
        //set bit simError in ConfigSimEventID to restart and re config
        osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8007a4e:	4b35      	ldr	r3, [pc, #212]	; (8007b24 <sim7600_fullConfigTask+0x1a4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2104      	movs	r1, #4
 8007a54:	4618      	mov	r0, r3
 8007a56:	f002 fb9f 	bl	800a198 <osEventFlagsSet>
 8007a5a:	e7b5      	b.n	80079c8 <sim7600_fullConfigTask+0x48>
      }
    }
    else if(configSimFlag & (1 << rebootEnum))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f003 0308 	and.w	r3, r3, #8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d024      	beq.n	8007ab0 <sim7600_fullConfigTask+0x130>
    {
      LOG_WRITE("configSimFlag rebootEnum\n");
 8007a66:	4835      	ldr	r0, [pc, #212]	; (8007b3c <sim7600_fullConfigTask+0x1bc>)
 8007a68:	f017 ffc6 	bl	801f9f8 <puts>
      osEventFlagsClear(ConfigSimEventID, 1 << rebootEnum);
 8007a6c:	4b2d      	ldr	r3, [pc, #180]	; (8007b24 <sim7600_fullConfigTask+0x1a4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2108      	movs	r1, #8
 8007a72:	4618      	mov	r0, r3
 8007a74:	f002 fbd4 	bl	800a220 <osEventFlagsClear>
      if (sim7600_fullConfig())
 8007a78:	f7ff feca 	bl	8007810 <sim7600_fullConfig>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00c      	beq.n	8007a9c <sim7600_fullConfigTask+0x11c>
      {
        //set event to invoke connect task open net and open socket tcp, udp
        osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 8007a82:	4b26      	ldr	r3, [pc, #152]	; (8007b1c <sim7600_fullConfigTask+0x19c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2102      	movs	r1, #2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f002 fb85 	bl	800a198 <osEventFlagsSet>
        osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8007a8e:	4b23      	ldr	r3, [pc, #140]	; (8007b1c <sim7600_fullConfigTask+0x19c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2101      	movs	r1, #1
 8007a94:	4618      	mov	r0, r3
 8007a96:	f002 fb7f 	bl	800a198 <osEventFlagsSet>
 8007a9a:	e795      	b.n	80079c8 <sim7600_fullConfigTask+0x48>
        // osThreadFlagsSet(connectSimTaskHandle, 1 << reConEnum);
      }
      else
      { //error
        LOG_WRITE("sim7600_fullConfigTask error4\n");
 8007a9c:	4828      	ldr	r0, [pc, #160]	; (8007b40 <sim7600_fullConfigTask+0x1c0>)
 8007a9e:	f017 ffab 	bl	801f9f8 <puts>
        //set bit simError in ConfigSimEventID to restart and re config
        osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8007aa2:	4b20      	ldr	r3, [pc, #128]	; (8007b24 <sim7600_fullConfigTask+0x1a4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2104      	movs	r1, #4
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f002 fb75 	bl	800a198 <osEventFlagsSet>
 8007aae:	e78b      	b.n	80079c8 <sim7600_fullConfigTask+0x48>
      }
    }
    else if (configSimFlag & (1 << callingEnum))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d012      	beq.n	8007ae0 <sim7600_fullConfigTask+0x160>
    {
      LOG_WRITE("configSimFlag calling\n");
 8007aba:	4822      	ldr	r0, [pc, #136]	; (8007b44 <sim7600_fullConfigTask+0x1c4>)
 8007abc:	f017 ff9c 	bl	801f9f8 <puts>
      osEventFlagsClear(ConfigSimEventID, 1 << callingEnum);
 8007ac0:	4b18      	ldr	r3, [pc, #96]	; (8007b24 <sim7600_fullConfigTask+0x1a4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2102      	movs	r1, #2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f002 fbaa 	bl	800a220 <osEventFlagsClear>
      //send AT+CHUP to end call
      sim7600_AT_notify_error("AT+CHUP", "OK", NULL, 500, 2);
 8007acc:	2302      	movs	r3, #2
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	491c      	ldr	r1, [pc, #112]	; (8007b48 <sim7600_fullConfigTask+0x1c8>)
 8007ad8:	481c      	ldr	r0, [pc, #112]	; (8007b4c <sim7600_fullConfigTask+0x1cc>)
 8007ada:	f7ff fd67 	bl	80075ac <sim7600_AT_notify_error>
 8007ade:	e773      	b.n	80079c8 <sim7600_fullConfigTask+0x48>
    //   //reconnect TCP, UDP
    //   osEventFlagsClear(ConfigSimEventID, 1 << IPerrorEnum);
    //   // osEventFlagsSet(ConnectSimEventID, 1U);
    //   osThreadFlagsSet(connectSimTaskHandle, 1 << reConEnum);
    // }
    else if (configSimFlag & (1 << smsEnum))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d009      	beq.n	8007afe <sim7600_fullConfigTask+0x17e>
    {
      LOG_WRITE("configSimFlag sms\n");
 8007aea:	4819      	ldr	r0, [pc, #100]	; (8007b50 <sim7600_fullConfigTask+0x1d0>)
 8007aec:	f017 ff84 	bl	801f9f8 <puts>
      osEventFlagsClear(ConfigSimEventID, 1 << smsEnum);
 8007af0:	4b0c      	ldr	r3, [pc, #48]	; (8007b24 <sim7600_fullConfigTask+0x1a4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2101      	movs	r1, #1
 8007af6:	4618      	mov	r0, r3
 8007af8:	f002 fb92 	bl	800a220 <osEventFlagsClear>
 8007afc:	e764      	b.n	80079c8 <sim7600_fullConfigTask+0x48>
      //   osEventFlagsSet(ConfigSimEventID, (1 << netErrorEnum));
      // }
    }
    else
    { //something wrong
      LOG_WRITE("configSimFlag sthElse\n");
 8007afe:	4815      	ldr	r0, [pc, #84]	; (8007b54 <sim7600_fullConfigTask+0x1d4>)
 8007b00:	f017 ff7a 	bl	801f9f8 <puts>
      LOG_WRITE("sim7600_fullConfigTask error5\n");
 8007b04:	4814      	ldr	r0, [pc, #80]	; (8007b58 <sim7600_fullConfigTask+0x1d8>)
 8007b06:	f017 ff77 	bl	801f9f8 <puts>
      //set bit simError in ConfigSimEventID to restart and re config
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum));
 8007b0a:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <sim7600_fullConfigTask+0x1a4>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2104      	movs	r1, #4
 8007b10:	4618      	mov	r0, r3
 8007b12:	f002 fb41 	bl	800a198 <osEventFlagsSet>
    configSimFlag = osEventFlagsWait(ConfigSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8007b16:	e757      	b.n	80079c8 <sim7600_fullConfigTask+0x48>
 8007b18:	080212ac 	.word	0x080212ac
 8007b1c:	20005738 	.word	0x20005738
 8007b20:	080212bc 	.word	0x080212bc
 8007b24:	20005734 	.word	0x20005734
 8007b28:	080212dc 	.word	0x080212dc
 8007b2c:	080212f0 	.word	0x080212f0
 8007b30:	08021308 	.word	0x08021308
 8007b34:	08021328 	.word	0x08021328
 8007b38:	08021340 	.word	0x08021340
 8007b3c:	08021360 	.word	0x08021360
 8007b40:	0802137c 	.word	0x0802137c
 8007b44:	0802139c 	.word	0x0802139c
 8007b48:	08021214 	.word	0x08021214
 8007b4c:	080213b4 	.word	0x080213b4
 8007b50:	080213bc 	.word	0x080213bc
 8007b54:	080213d0 	.word	0x080213d0
 8007b58:	080213e8 	.word	0x080213e8

08007b5c <sim7600_connectTask>:
    }
  }
}

void sim7600_connectTask()
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af02      	add	r7, sp, #8
  LOG_WRITE("connectTask\n");
 8007b62:	48b3      	ldr	r0, [pc, #716]	; (8007e30 <sim7600_connectTask+0x2d4>)
 8007b64:	f017 ff48 	bl	801f9f8 <puts>
  int connectSimFlag;
  for (;;)
  {
    // connectSimFlag = osThreadFlagsWait(0xFF, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
    connectSimFlag = osEventFlagsWait(ConnectSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8007b68:	4bb2      	ldr	r3, [pc, #712]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b70:	2202      	movs	r2, #2
 8007b72:	21ff      	movs	r1, #255	; 0xff
 8007b74:	f002 fb86 	bl	800a284 <osEventFlagsWait>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	613b      	str	r3, [r7, #16]
    LOG_WRITE("connectSimFlag %d\n", connectSimFlag);
 8007b7c:	6939      	ldr	r1, [r7, #16]
 8007b7e:	48ae      	ldr	r0, [pc, #696]	; (8007e38 <sim7600_connectTask+0x2dc>)
 8007b80:	f017 feb4 	bl	801f8ec <iprintf>
    if (connectSimFlag < 0) //error 0xFFFFFFF...U
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	da0c      	bge.n	8007ba4 <sim7600_connectTask+0x48>
    {
      LOG_WRITE("connectSimFlag errorFlag\n");
 8007b8a:	48ac      	ldr	r0, [pc, #688]	; (8007e3c <sim7600_connectTask+0x2e0>)
 8007b8c:	f017 ff34 	bl	801f9f8 <puts>
      LOG_WRITE("sim7600_connectTask error0\n");
 8007b90:	48ab      	ldr	r0, [pc, #684]	; (8007e40 <sim7600_connectTask+0x2e4>)
 8007b92:	f017 ff31 	bl	801f9f8 <puts>
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 8007b96:	4bab      	ldr	r3, [pc, #684]	; (8007e44 <sim7600_connectTask+0x2e8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2104      	movs	r1, #4
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f002 fafb 	bl	800a198 <osEventFlagsSet>
 8007ba2:	e7e1      	b.n	8007b68 <sim7600_connectTask+0xc>
    }
    else if (connectSimFlag & (1 << netErrorEnum))
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d041      	beq.n	8007c32 <sim7600_connectTask+0xd6>
    {
      LOG_WRITE("connectSimFlag netError\n");
 8007bae:	48a6      	ldr	r0, [pc, #664]	; (8007e48 <sim7600_connectTask+0x2ec>)
 8007bb0:	f017 ff22 	bl	801f9f8 <puts>
      osEventFlagsClear(ConnectSimEventID, 1 << netErrorEnum);
 8007bb4:	4b9f      	ldr	r3, [pc, #636]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2108      	movs	r1, #8
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f002 fb30 	bl	800a220 <osEventFlagsClear>

      //release tcp/udp stack
      sim7600ConnectStatus = 0;
 8007bc0:	4ba2      	ldr	r3, [pc, #648]	; (8007e4c <sim7600_connectTask+0x2f0>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
      TCP_UDP_Stack_Release();
 8007bc6:	f001 fa11 	bl	8008fec <TCP_UDP_Stack_Release>

      //close IP socket (tcp, udp)
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue; //tcp //+CIPCLOSE: 0,0
 8007bca:	2302      	movs	r3, #2
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	f242 7310 	movw	r3, #10000	; 0x2710
 8007bd2:	4a9f      	ldr	r2, [pc, #636]	; (8007e50 <sim7600_connectTask+0x2f4>)
 8007bd4:	499f      	ldr	r1, [pc, #636]	; (8007e54 <sim7600_connectTask+0x2f8>)
 8007bd6:	48a0      	ldr	r0, [pc, #640]	; (8007e58 <sim7600_connectTask+0x2fc>)
 8007bd8:	f7ff fce8 	bl	80075ac <sim7600_AT_notify_error>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8119 	beq.w	8007e16 <sim7600_connectTask+0x2ba>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue; //udp //+CIPCLOSE: 1,0
 8007be4:	2302      	movs	r3, #2
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	f242 7310 	movw	r3, #10000	; 0x2710
 8007bec:	4a9b      	ldr	r2, [pc, #620]	; (8007e5c <sim7600_connectTask+0x300>)
 8007bee:	4999      	ldr	r1, [pc, #612]	; (8007e54 <sim7600_connectTask+0x2f8>)
 8007bf0:	489b      	ldr	r0, [pc, #620]	; (8007e60 <sim7600_connectTask+0x304>)
 8007bf2:	f7ff fcdb 	bl	80075ac <sim7600_AT_notify_error>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 810e 	beq.w	8007e1a <sim7600_connectTask+0x2be>
      //close net
      if (!sim7600_AT_notify_error("AT+NETCLOSE\r\n", "OK", "+NETCLOSE: 2", 10000, 2)) continue; //+NETCLOSE: 0
 8007bfe:	2302      	movs	r3, #2
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	f242 7310 	movw	r3, #10000	; 0x2710
 8007c06:	4a97      	ldr	r2, [pc, #604]	; (8007e64 <sim7600_connectTask+0x308>)
 8007c08:	4992      	ldr	r1, [pc, #584]	; (8007e54 <sim7600_connectTask+0x2f8>)
 8007c0a:	4897      	ldr	r0, [pc, #604]	; (8007e68 <sim7600_connectTask+0x30c>)
 8007c0c:	f7ff fcce 	bl	80075ac <sim7600_AT_notify_error>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8103 	beq.w	8007e1e <sim7600_connectTask+0x2c2>

      //set flag to open net and tcp/udp again
      osEventFlagsSet(ConnectSimEventID, 1 << openNetEnum);
 8007c18:	4b86      	ldr	r3, [pc, #536]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2102      	movs	r1, #2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f002 faba 	bl	800a198 <osEventFlagsSet>
      osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8007c24:	4b83      	ldr	r3, [pc, #524]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2101      	movs	r1, #1
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f002 fab4 	bl	800a198 <osEventFlagsSet>
 8007c30:	e79a      	b.n	8007b68 <sim7600_connectTask+0xc>
    }
    else if (connectSimFlag & (1 << openNetEnum))
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d014      	beq.n	8007c66 <sim7600_connectTask+0x10a>
    {
      LOG_WRITE("connectSimFlag openNet\n");
 8007c3c:	488b      	ldr	r0, [pc, #556]	; (8007e6c <sim7600_connectTask+0x310>)
 8007c3e:	f017 fedb 	bl	801f9f8 <puts>
      osEventFlagsClear(ConnectSimEventID, 1 << openNetEnum);
 8007c42:	4b7c      	ldr	r3, [pc, #496]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2102      	movs	r1, #2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f002 fae9 	bl	800a220 <osEventFlagsClear>

      //open network
      if (!sim7600_AT_notify_error("AT+NETOPEN\r\n", "OK", NULL, 10000, 2)) continue; //+NETOPEN: 0
 8007c4e:	2302      	movs	r3, #2
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	f242 7310 	movw	r3, #10000	; 0x2710
 8007c56:	2200      	movs	r2, #0
 8007c58:	497e      	ldr	r1, [pc, #504]	; (8007e54 <sim7600_connectTask+0x2f8>)
 8007c5a:	4885      	ldr	r0, [pc, #532]	; (8007e70 <sim7600_connectTask+0x314>)
 8007c5c:	f7ff fca6 	bl	80075ac <sim7600_AT_notify_error>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	e780      	b.n	8007b68 <sim7600_connectTask+0xc>
    }
    else if (connectSimFlag & (1 << ipCloseEnum))
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d033      	beq.n	8007cd8 <sim7600_connectTask+0x17c>
    {
      LOG_WRITE("connectSimFlag ipClose\n");
 8007c70:	4880      	ldr	r0, [pc, #512]	; (8007e74 <sim7600_connectTask+0x318>)
 8007c72:	f017 fec1 	bl	801f9f8 <puts>
      sim7600DisconnectTime++;
 8007c76:	4b80      	ldr	r3, [pc, #512]	; (8007e78 <sim7600_connectTask+0x31c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	4a7e      	ldr	r2, [pc, #504]	; (8007e78 <sim7600_connectTask+0x31c>)
 8007c7e:	6013      	str	r3, [r2, #0]

      osEventFlagsClear(ConnectSimEventID, 1 << ipCloseEnum);
 8007c80:	4b6c      	ldr	r3, [pc, #432]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2110      	movs	r1, #16
 8007c86:	4618      	mov	r0, r3
 8007c88:	f002 faca 	bl	800a220 <osEventFlagsClear>

      //release tcp/udp stack
      sim7600ConnectStatus = 0;
 8007c8c:	4b6f      	ldr	r3, [pc, #444]	; (8007e4c <sim7600_connectTask+0x2f0>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]
      TCP_UDP_Stack_Release();
 8007c92:	f001 f9ab 	bl	8008fec <TCP_UDP_Stack_Release>

      //maybe tcp/udp, one of them is closed, so to make sure before open tcp/udp connect, release all
      //close IP socket (tcp, udp)
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue;
 8007c96:	2302      	movs	r3, #2
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	f242 7310 	movw	r3, #10000	; 0x2710
 8007c9e:	4a6c      	ldr	r2, [pc, #432]	; (8007e50 <sim7600_connectTask+0x2f4>)
 8007ca0:	496c      	ldr	r1, [pc, #432]	; (8007e54 <sim7600_connectTask+0x2f8>)
 8007ca2:	486d      	ldr	r0, [pc, #436]	; (8007e58 <sim7600_connectTask+0x2fc>)
 8007ca4:	f7ff fc82 	bl	80075ac <sim7600_AT_notify_error>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 80b9 	beq.w	8007e22 <sim7600_connectTask+0x2c6>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue;
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	f242 7310 	movw	r3, #10000	; 0x2710
 8007cb8:	4a68      	ldr	r2, [pc, #416]	; (8007e5c <sim7600_connectTask+0x300>)
 8007cba:	4966      	ldr	r1, [pc, #408]	; (8007e54 <sim7600_connectTask+0x2f8>)
 8007cbc:	4868      	ldr	r0, [pc, #416]	; (8007e60 <sim7600_connectTask+0x304>)
 8007cbe:	f7ff fc75 	bl	80075ac <sim7600_AT_notify_error>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 80ae 	beq.w	8007e26 <sim7600_connectTask+0x2ca>

      //then set openCon flag to re-open tcp/udp connect
      osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8007cca:	4b5a      	ldr	r3, [pc, #360]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2101      	movs	r1, #1
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f002 fa61 	bl	800a198 <osEventFlagsSet>
 8007cd6:	e747      	b.n	8007b68 <sim7600_connectTask+0xc>
    }
    else if ((connectSimFlag & (1 << openConEnum)) && sim7600ConnectStatus == 0)
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d05f      	beq.n	8007da2 <sim7600_connectTask+0x246>
 8007ce2:	4b5a      	ldr	r3, [pc, #360]	; (8007e4c <sim7600_connectTask+0x2f0>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d15b      	bne.n	8007da2 <sim7600_connectTask+0x246>
    {
      LOG_WRITE("connectSimFlag openCon\n");
 8007cea:	4864      	ldr	r0, [pc, #400]	; (8007e7c <sim7600_connectTask+0x320>)
 8007cec:	f017 fe84 	bl	801f9f8 <puts>
      sim7600ConnectTime++;
 8007cf0:	4b63      	ldr	r3, [pc, #396]	; (8007e80 <sim7600_connectTask+0x324>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	4a62      	ldr	r2, [pc, #392]	; (8007e80 <sim7600_connectTask+0x324>)
 8007cf8:	6013      	str	r3, [r2, #0]

      osEventFlagsClear(ConnectSimEventID, 1 << openConEnum);
 8007cfa:	4b4e      	ldr	r3, [pc, #312]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4618      	mov	r0, r3
 8007d02:	f002 fa8d 	bl	800a220 <osEventFlagsClear>
      //check connectToHostCount, if > connectToHostCountMax then change serverDomain, serverport
      //open tcp connect
      char *sim7600_cmd_buff;
      if(serverDomain != NULL)
      {
        int tmpLen = strlen(serverDomain);
 8007d06:	485f      	ldr	r0, [pc, #380]	; (8007e84 <sim7600_connectTask+0x328>)
 8007d08:	f7f8 fa62 	bl	80001d0 <strlen>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	60fb      	str	r3, [r7, #12]
        if(tmpLen > 0)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	dd06      	ble.n	8007d24 <sim7600_connectTask+0x1c8>
          sim7600_cmd_buff = (char*)malloc(tmpLen + 35);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3323      	adds	r3, #35	; 0x23
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f017 fcde 	bl	801f6dc <malloc>
 8007d20:	4603      	mov	r3, r0
 8007d22:	617b      	str	r3, [r7, #20]
      }
      if(sim7600_cmd_buff == NULL) //can't allocate mem in heap
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <sim7600_connectTask+0x1e2>
      {
        LOG_WRITE("sim7600_connectTask error1\n");
 8007d2a:	4857      	ldr	r0, [pc, #348]	; (8007e88 <sim7600_connectTask+0x32c>)
 8007d2c:	f017 fe64 	bl	801f9f8 <puts>
        osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart
 8007d30:	4b44      	ldr	r3, [pc, #272]	; (8007e44 <sim7600_connectTask+0x2e8>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2104      	movs	r1, #4
 8007d36:	4618      	mov	r0, r3
 8007d38:	f002 fa2e 	bl	800a198 <osEventFlagsSet>
        continue;
 8007d3c:	e0bb      	b.n	8007eb6 <sim7600_connectTask+0x35a>
      }
      sprintf(sim7600_cmd_buff, "AT+CIPOPEN=0,\"TCP\",\"%s\",%d\r\n", serverDomain, serverPort);
 8007d3e:	4b53      	ldr	r3, [pc, #332]	; (8007e8c <sim7600_connectTask+0x330>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a50      	ldr	r2, [pc, #320]	; (8007e84 <sim7600_connectTask+0x328>)
 8007d44:	4952      	ldr	r1, [pc, #328]	; (8007e90 <sim7600_connectTask+0x334>)
 8007d46:	6978      	ldr	r0, [r7, #20]
 8007d48:	f017 ff46 	bl	801fbd8 <siprintf>
      int tmpResTCP = sim7600_AT_notify_error(sim7600_cmd_buff, "+CIPOPEN: 0,0", "+CIPOPEN: 0", 10000, 2);
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	f242 7310 	movw	r3, #10000	; 0x2710
 8007d54:	4a4f      	ldr	r2, [pc, #316]	; (8007e94 <sim7600_connectTask+0x338>)
 8007d56:	4950      	ldr	r1, [pc, #320]	; (8007e98 <sim7600_connectTask+0x33c>)
 8007d58:	6978      	ldr	r0, [r7, #20]
 8007d5a:	f7ff fc27 	bl	80075ac <sim7600_AT_notify_error>
 8007d5e:	60b8      	str	r0, [r7, #8]
      free(sim7600_cmd_buff);
 8007d60:	6978      	ldr	r0, [r7, #20]
 8007d62:	f017 fcc3 	bl	801f6ec <free>
      if (tmpResTCP == 1) //successful open
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d10c      	bne.n	8007d86 <sim7600_connectTask+0x22a>
      {
        //open tcp success
        sim7600ConnectStatus = 1;
 8007d6c:	4b37      	ldr	r3, [pc, #220]	; (8007e4c <sim7600_connectTask+0x2f0>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
        //init tcp udp stack to start TLS handshake
        TCP_UDP_Stack_Init(ConnectSimEventID, doneTLSEnum, ipCloseEnum, false);
 8007d72:	4b30      	ldr	r3, [pc, #192]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	2300      	movs	r3, #0
 8007d78:	2204      	movs	r2, #4
 8007d7a:	2102      	movs	r1, #2
 8007d7c:	f001 f8b0 	bl	8008ee0 <TCP_UDP_Stack_Init>
        TCP_Request(); //request rsa pub key
 8007d80:	f001 f9ea 	bl	8009158 <TCP_Request>
    {
 8007d84:	e051      	b.n	8007e2a <sim7600_connectTask+0x2ce>
      }
      else if(tmpResTCP == 2) //open fail, re-connect
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d14e      	bne.n	8007e2a <sim7600_connectTask+0x2ce>
      {
        osDelay(RECONNECT_INTERVAL);
 8007d8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d90:	f002 f8b1 	bl	8009ef6 <osDelay>
        osEventFlagsSet(ConnectSimEventID, 1 << openConEnum);
 8007d94:	4b27      	ldr	r3, [pc, #156]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2101      	movs	r1, #1
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f002 f9fc 	bl	800a198 <osEventFlagsSet>
    {
 8007da0:	e043      	b.n	8007e2a <sim7600_connectTask+0x2ce>
      }
    }
    else if ((connectSimFlag & (1 << doneTLSEnum)) && sim7600ConnectStatus == 1)
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d027      	beq.n	8007dfc <sim7600_connectTask+0x2a0>
 8007dac:	4b27      	ldr	r3, [pc, #156]	; (8007e4c <sim7600_connectTask+0x2f0>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d123      	bne.n	8007dfc <sim7600_connectTask+0x2a0>
    {
      LOG_WRITE("connectSimFlag doneTLS\n");
 8007db4:	4839      	ldr	r0, [pc, #228]	; (8007e9c <sim7600_connectTask+0x340>)
 8007db6:	f017 fe1f 	bl	801f9f8 <puts>
      osEventFlagsClear(ConnectSimEventID, 1 << doneTLSEnum);
 8007dba:	4b1e      	ldr	r3, [pc, #120]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2104      	movs	r1, #4
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f002 fa2d 	bl	800a220 <osEventFlagsClear>

      //open UDP connect
      int tmpResUDP = sim7600_AT_notify_error("AT+CIPOPEN=1,\"UDP\",,,8080\r\n", "+CIPOPEN: 1,0", "+CIPOPEN: 1", 10000, 2);
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	f242 7310 	movw	r3, #10000	; 0x2710
 8007dce:	4a34      	ldr	r2, [pc, #208]	; (8007ea0 <sim7600_connectTask+0x344>)
 8007dd0:	4934      	ldr	r1, [pc, #208]	; (8007ea4 <sim7600_connectTask+0x348>)
 8007dd2:	4835      	ldr	r0, [pc, #212]	; (8007ea8 <sim7600_connectTask+0x34c>)
 8007dd4:	f7ff fbea 	bl	80075ac <sim7600_AT_notify_error>
 8007dd8:	6078      	str	r0, [r7, #4]
      if(tmpResUDP == 1) //successful
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d103      	bne.n	8007de8 <sim7600_connectTask+0x28c>
      {
        sim7600ConnectStatus = 2;
 8007de0:	4b1a      	ldr	r3, [pc, #104]	; (8007e4c <sim7600_connectTask+0x2f0>)
 8007de2:	2202      	movs	r2, #2
 8007de4:	601a      	str	r2, [r3, #0]
    {
 8007de6:	e065      	b.n	8007eb4 <sim7600_connectTask+0x358>
        //successful, reset connectToHostCount, change Domain2 <-> Domain1 if neccessary
      }
      else if(tmpResUDP == 2) //open fail
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d162      	bne.n	8007eb4 <sim7600_connectTask+0x358>
      {
        osEventFlagsSet(ConnectSimEventID, 1 << ipCloseEnum);
 8007dee:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <sim7600_connectTask+0x2d8>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2110      	movs	r1, #16
 8007df4:	4618      	mov	r0, r3
 8007df6:	f002 f9cf 	bl	800a198 <osEventFlagsSet>
    {
 8007dfa:	e05b      	b.n	8007eb4 <sim7600_connectTask+0x358>
    //     osEventFlagsSet(ConnectSimEventID, 1 << ipCloseEnum); //re-CONNECT
    //   }
    // }
    else
    { //something wrong
      LOG_WRITE("connectSimFlag sthElse\n");
 8007dfc:	482b      	ldr	r0, [pc, #172]	; (8007eac <sim7600_connectTask+0x350>)
 8007dfe:	f017 fdfb 	bl	801f9f8 <puts>
      LOG_WRITE("sim7600_connectTask error2\n");
 8007e02:	482b      	ldr	r0, [pc, #172]	; (8007eb0 <sim7600_connectTask+0x354>)
 8007e04:	f017 fdf8 	bl	801f9f8 <puts>
      osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //restart
 8007e08:	4b0e      	ldr	r3, [pc, #56]	; (8007e44 <sim7600_connectTask+0x2e8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2104      	movs	r1, #4
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f002 f9c2 	bl	800a198 <osEventFlagsSet>
 8007e14:	e6a8      	b.n	8007b68 <sim7600_connectTask+0xc>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue; //tcp //+CIPCLOSE: 0,0
 8007e16:	bf00      	nop
 8007e18:	e6a6      	b.n	8007b68 <sim7600_connectTask+0xc>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue; //udp //+CIPCLOSE: 1,0
 8007e1a:	bf00      	nop
 8007e1c:	e6a4      	b.n	8007b68 <sim7600_connectTask+0xc>
      if (!sim7600_AT_notify_error("AT+NETCLOSE\r\n", "OK", "+NETCLOSE: 2", 10000, 2)) continue; //+NETCLOSE: 0
 8007e1e:	bf00      	nop
 8007e20:	e6a2      	b.n	8007b68 <sim7600_connectTask+0xc>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=0\r\n", "OK", "+CIPCLOSE: 0,2", 10000, 2)) continue;
 8007e22:	bf00      	nop
 8007e24:	e6a0      	b.n	8007b68 <sim7600_connectTask+0xc>
      if(!sim7600_AT_notify_error("AT+CIPCLOSE=1\r\n", "OK", "+CIPCLOSE: 1,2", 10000, 2)) continue;
 8007e26:	bf00      	nop
 8007e28:	e69e      	b.n	8007b68 <sim7600_connectTask+0xc>
    {
 8007e2a:	bf00      	nop
 8007e2c:	e69c      	b.n	8007b68 <sim7600_connectTask+0xc>
 8007e2e:	bf00      	nop
 8007e30:	08021408 	.word	0x08021408
 8007e34:	20005738 	.word	0x20005738
 8007e38:	08021414 	.word	0x08021414
 8007e3c:	08021428 	.word	0x08021428
 8007e40:	08021444 	.word	0x08021444
 8007e44:	20005734 	.word	0x20005734
 8007e48:	08021460 	.word	0x08021460
 8007e4c:	200005f0 	.word	0x200005f0
 8007e50:	08021478 	.word	0x08021478
 8007e54:	08021214 	.word	0x08021214
 8007e58:	08021488 	.word	0x08021488
 8007e5c:	08021498 	.word	0x08021498
 8007e60:	080214a8 	.word	0x080214a8
 8007e64:	080214b8 	.word	0x080214b8
 8007e68:	080214c8 	.word	0x080214c8
 8007e6c:	080214d8 	.word	0x080214d8
 8007e70:	080214f0 	.word	0x080214f0
 8007e74:	08021500 	.word	0x08021500
 8007e78:	200005f8 	.word	0x200005f8
 8007e7c:	08021518 	.word	0x08021518
 8007e80:	200005f4 	.word	0x200005f4
 8007e84:	20000244 	.word	0x20000244
 8007e88:	08021530 	.word	0x08021530
 8007e8c:	200002a8 	.word	0x200002a8
 8007e90:	0802154c 	.word	0x0802154c
 8007e94:	0802156c 	.word	0x0802156c
 8007e98:	08021578 	.word	0x08021578
 8007e9c:	08021588 	.word	0x08021588
 8007ea0:	080215a0 	.word	0x080215a0
 8007ea4:	080215ac 	.word	0x080215ac
 8007ea8:	080215bc 	.word	0x080215bc
 8007eac:	080215d8 	.word	0x080215d8
 8007eb0:	080215f0 	.word	0x080215f0
    {
 8007eb4:	bf00      	nop
    connectSimFlag = osEventFlagsWait(ConnectSimEventID, 0xFF, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8007eb6:	e657      	b.n	8007b68 <sim7600_connectTask+0xc>

08007eb8 <sim7600_sendTask>:
{
	return true;
}

void sim7600_sendTask()
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08a      	sub	sp, #40	; 0x28
 8007ebc:	af00      	add	r7, sp, #0
  LOG_WRITE("sendTask\n");
 8007ebe:	481f      	ldr	r0, [pc, #124]	; (8007f3c <sim7600_sendTask+0x84>)
 8007ec0:	f017 fd9a 	bl	801f9f8 <puts>
  sendSimPack sendMsgObj;
  osStatus_t sendMsgStt;
  for (;;)
  {
    sendMsgStt = osMessageQueueGet(SendSimQueueID, &sendMsgObj, NULL, osWaitForever); //wait until has msg
 8007ec4:	4b1e      	ldr	r3, [pc, #120]	; (8007f40 <sim7600_sendTask+0x88>)
 8007ec6:	6818      	ldr	r0, [r3, #0]
 8007ec8:	1d39      	adds	r1, r7, #4
 8007eca:	f04f 33ff 	mov.w	r3, #4294967295
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f002 fd84 	bl	800a9dc <osMessageQueueGet>
 8007ed4:	6278      	str	r0, [r7, #36]	; 0x24
    LOG_WRITE("sendMsgStt %d\n", sendMsgStt);
 8007ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ed8:	481a      	ldr	r0, [pc, #104]	; (8007f44 <sim7600_sendTask+0x8c>)
 8007eda:	f017 fd07 	bl	801f8ec <iprintf>
    if (sendMsgStt == osOK && bSim7600IsRunning)
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1ef      	bne.n	8007ec4 <sim7600_sendTask+0xc>
 8007ee4:	4b18      	ldr	r3, [pc, #96]	; (8007f48 <sim7600_sendTask+0x90>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d0eb      	beq.n	8007ec4 <sim7600_sendTask+0xc>
    {
      LOG_WRITE("sendMsgType %d\n", sendMsgObj.type);
 8007eec:	7a3b      	ldrb	r3, [r7, #8]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4816      	ldr	r0, [pc, #88]	; (8007f4c <sim7600_sendTask+0x94>)
 8007ef2:	f017 fcfb 	bl	801f8ec <iprintf>
      //check send msg type
      if (sendMsgObj.type == 0)
 8007ef6:	7a3b      	ldrb	r3, [r7, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d116      	bne.n	8007f2a <sim7600_sendTask+0x72>
      { //normal cmd
        int tmpRes = sim7600_send_cmd(sendMsgObj.ptr, sendMsgObj.res1, sendMsgObj.res2, sendMsgObj.timeout);
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	f7ff fa80 	bl	8007408 <sim7600_send_cmd>
 8007f08:	6238      	str	r0, [r7, #32]
        if (tmpRes == 1 || tmpRes == 2)
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d002      	beq.n	8007f16 <sim7600_sendTask+0x5e>
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d1d6      	bne.n	8007ec4 <sim7600_sendTask+0xc>
        {
          if (sendMsgObj.EventID != NULL) //can't make hard error
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0d3      	beq.n	8007ec4 <sim7600_sendTask+0xc>
            osEventFlagsSet(sendMsgObj.EventID, tmpRes);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a3a      	ldr	r2, [r7, #32]
 8007f20:	4611      	mov	r1, r2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f002 f938 	bl	800a198 <osEventFlagsSet>
 8007f28:	e7cc      	b.n	8007ec4 <sim7600_sendTask+0xc>
        }
      }
      else
      { //send TCP packet
        sim7600_send_packet_ip(sendMsgObj.type, sendMsgObj.ptr, sendMsgObj.len);
 8007f2a:	7a3b      	ldrb	r3, [r7, #8]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4619      	mov	r1, r3
 8007f34:	f7ff fb64 	bl	8007600 <sim7600_send_packet_ip>
    sendMsgStt = osMessageQueueGet(SendSimQueueID, &sendMsgObj, NULL, osWaitForever); //wait until has msg
 8007f38:	e7c4      	b.n	8007ec4 <sim7600_sendTask+0xc>
 8007f3a:	bf00      	nop
 8007f3c:	0802160c 	.word	0x0802160c
 8007f40:	20005740 	.word	0x20005740
 8007f44:	08021618 	.word	0x08021618
 8007f48:	200005fc 	.word	0x200005fc
 8007f4c:	08021628 	.word	0x08021628

08007f50 <sim7600_recvTask>:
    }
  }
}

void sim7600_recvTask()
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  LOG_WRITE("recvTask\n");
 8007f54:	4806      	ldr	r0, [pc, #24]	; (8007f70 <sim7600_recvTask+0x20>)
 8007f56:	f017 fd4f 	bl	801f9f8 <puts>
  for (;;)
  {
    osDelay(RECV_SIM_TASK_INTERVAL);
 8007f5a:	2005      	movs	r0, #5
 8007f5c:	f001 ffcb 	bl	8009ef6 <osDelay>
    if(bSim7600IsRunning)
 8007f60:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <sim7600_recvTask+0x24>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0f8      	beq.n	8007f5a <sim7600_recvTask+0xa>
      sim7600_usart_rx_check();
 8007f68:	f000 f806 	bl	8007f78 <sim7600_usart_rx_check>
    osDelay(RECV_SIM_TASK_INTERVAL);
 8007f6c:	e7f5      	b.n	8007f5a <sim7600_recvTask+0xa>
 8007f6e:	bf00      	nop
 8007f70:	08021638 	.word	0x08021638
 8007f74:	200005fc 	.word	0x200005fc

08007f78 <sim7600_usart_rx_check>:
//global var
int old_pos_dma = 0;
int new_pos_dma = 0;

void sim7600_usart_rx_check()
{
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
  SIM7600_PAUSE_RX();
 8007f7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f82:	485c      	ldr	r0, [pc, #368]	; (80080f4 <sim7600_usart_rx_check+0x17c>)
 8007f84:	f7fe ffb2 	bl	8006eec <LL_GPIO_SetOutputPin>
  
  /* Calculate current position in buffer */
  new_pos_dma = sim_dma_buff_size - (int)(LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2) & 0xFFFF);
 8007f88:	4b5b      	ldr	r3, [pc, #364]	; (80080f8 <sim7600_usart_rx_check+0x180>)
 8007f8a:	681c      	ldr	r4, [r3, #0]
 8007f8c:	2102      	movs	r1, #2
 8007f8e:	485b      	ldr	r0, [pc, #364]	; (80080fc <sim7600_usart_rx_check+0x184>)
 8007f90:	f7fe fcb4 	bl	80068fc <LL_DMA_GetDataLength>
 8007f94:	4603      	mov	r3, r0
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	1ae3      	subs	r3, r4, r3
 8007f9a:	4a59      	ldr	r2, [pc, #356]	; (8008100 <sim7600_usart_rx_check+0x188>)
 8007f9c:	6013      	str	r3, [r2, #0]
  if(new_pos_dma < 0)
 8007f9e:	4b58      	ldr	r3, [pc, #352]	; (8008100 <sim7600_usart_rx_check+0x188>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	da0e      	bge.n	8007fc4 <sim7600_usart_rx_check+0x4c>
  {
    LOG_WRITE("new_pos_dma < 0\n");
 8007fa6:	4857      	ldr	r0, [pc, #348]	; (8008104 <sim7600_usart_rx_check+0x18c>)
 8007fa8:	f017 fd26 	bl	801f9f8 <puts>
    //something wrong
    SIM7600_RESUME_RX();
 8007fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007fb0:	4850      	ldr	r0, [pc, #320]	; (80080f4 <sim7600_usart_rx_check+0x17c>)
 8007fb2:	f7fe ffa9 	bl	8006f08 <LL_GPIO_ResetOutputPin>
    osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 8007fb6:	4b54      	ldr	r3, [pc, #336]	; (8008108 <sim7600_usart_rx_check+0x190>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2104      	movs	r1, #4
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f002 f8eb 	bl	800a198 <osEventFlagsSet>
    return;
 8007fc2:	e093      	b.n	80080ec <sim7600_usart_rx_check+0x174>
  }
  //0 1 2 3 4 5
  if (new_pos_dma != old_pos_dma)
 8007fc4:	4b4e      	ldr	r3, [pc, #312]	; (8008100 <sim7600_usart_rx_check+0x188>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	4b50      	ldr	r3, [pc, #320]	; (800810c <sim7600_usart_rx_check+0x194>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	f000 8088 	beq.w	80080e2 <sim7600_usart_rx_check+0x16a>
  { /* Check change in received data */
    LOG_WRITE("new_pos_dma %d, oldPos %d\n", new_pos_dma, old_pos_dma);
 8007fd2:	4b4b      	ldr	r3, [pc, #300]	; (8008100 <sim7600_usart_rx_check+0x188>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a4d      	ldr	r2, [pc, #308]	; (800810c <sim7600_usart_rx_check+0x194>)
 8007fd8:	6812      	ldr	r2, [r2, #0]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	484c      	ldr	r0, [pc, #304]	; (8008110 <sim7600_usart_rx_check+0x198>)
 8007fde:	f017 fc85 	bl	801f8ec <iprintf>
    if (new_pos_dma > old_pos_dma)
 8007fe2:	4b47      	ldr	r3, [pc, #284]	; (8008100 <sim7600_usart_rx_check+0x188>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	4b49      	ldr	r3, [pc, #292]	; (800810c <sim7600_usart_rx_check+0x194>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	dd12      	ble.n	8008014 <sim7600_usart_rx_check+0x9c>
    { /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      //usart_process_data(&usart_rx_dma_buffer[old_pos_dma], new_pos_dma - old_pos_dma);
      sim_buff_length = new_pos_dma - old_pos_dma;
 8007fee:	4b44      	ldr	r3, [pc, #272]	; (8008100 <sim7600_usart_rx_check+0x188>)
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4b46      	ldr	r3, [pc, #280]	; (800810c <sim7600_usart_rx_check+0x194>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	4a46      	ldr	r2, [pc, #280]	; (8008114 <sim7600_usart_rx_check+0x19c>)
 8007ffa:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buff + old_pos_dma, sim_buff_length);
 8007ffc:	4b43      	ldr	r3, [pc, #268]	; (800810c <sim7600_usart_rx_check+0x194>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	4b45      	ldr	r3, [pc, #276]	; (8008118 <sim7600_usart_rx_check+0x1a0>)
 8008004:	4413      	add	r3, r2
 8008006:	4a43      	ldr	r2, [pc, #268]	; (8008114 <sim7600_usart_rx_check+0x19c>)
 8008008:	6812      	ldr	r2, [r2, #0]
 800800a:	4619      	mov	r1, r3
 800800c:	4843      	ldr	r0, [pc, #268]	; (800811c <sim7600_usart_rx_check+0x1a4>)
 800800e:	f017 fb83 	bl	801f718 <memcpy>
 8008012:	e027      	b.n	8008064 <sim7600_usart_rx_check+0xec>
    }
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      sim_buff_length = sim_dma_buff_size - old_pos_dma; //0 1 2 3 4
 8008014:	4b38      	ldr	r3, [pc, #224]	; (80080f8 <sim7600_usart_rx_check+0x180>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	4b3c      	ldr	r3, [pc, #240]	; (800810c <sim7600_usart_rx_check+0x194>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	4a3d      	ldr	r2, [pc, #244]	; (8008114 <sim7600_usart_rx_check+0x19c>)
 8008020:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buff + old_pos_dma, sim_buff_length);
 8008022:	4b3a      	ldr	r3, [pc, #232]	; (800810c <sim7600_usart_rx_check+0x194>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	4b3b      	ldr	r3, [pc, #236]	; (8008118 <sim7600_usart_rx_check+0x1a0>)
 800802a:	4413      	add	r3, r2
 800802c:	4a39      	ldr	r2, [pc, #228]	; (8008114 <sim7600_usart_rx_check+0x19c>)
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	4619      	mov	r1, r3
 8008032:	483a      	ldr	r0, [pc, #232]	; (800811c <sim7600_usart_rx_check+0x1a4>)
 8008034:	f017 fb70 	bl	801f718 <memcpy>
      /* Check and continue with beginning of buffer */
      if (new_pos_dma > 0)
 8008038:	4b31      	ldr	r3, [pc, #196]	; (8008100 <sim7600_usart_rx_check+0x188>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	dd11      	ble.n	8008064 <sim7600_usart_rx_check+0xec>
      {
        //usart_process_data(&usart_rx_dma_buffer[0], new_pos_dma);
        memcpy(sim_buff + sim_buff_length, sim_dma_buff, new_pos_dma);
 8008040:	4b34      	ldr	r3, [pc, #208]	; (8008114 <sim7600_usart_rx_check+0x19c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	4b35      	ldr	r3, [pc, #212]	; (800811c <sim7600_usart_rx_check+0x1a4>)
 8008048:	4413      	add	r3, r2
 800804a:	4a2d      	ldr	r2, [pc, #180]	; (8008100 <sim7600_usart_rx_check+0x188>)
 800804c:	6812      	ldr	r2, [r2, #0]
 800804e:	4932      	ldr	r1, [pc, #200]	; (8008118 <sim7600_usart_rx_check+0x1a0>)
 8008050:	4618      	mov	r0, r3
 8008052:	f017 fb61 	bl	801f718 <memcpy>
        sim_buff_length += new_pos_dma;
 8008056:	4b2f      	ldr	r3, [pc, #188]	; (8008114 <sim7600_usart_rx_check+0x19c>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4b29      	ldr	r3, [pc, #164]	; (8008100 <sim7600_usart_rx_check+0x188>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4413      	add	r3, r2
 8008060:	4a2c      	ldr	r2, [pc, #176]	; (8008114 <sim7600_usart_rx_check+0x19c>)
 8008062:	6013      	str	r3, [r2, #0]
      }
    }

    //debug /////////////////////////////////////
    uint8_t tmp = sim_buff[10]; sim_buff[10] = 0;
 8008064:	4b2d      	ldr	r3, [pc, #180]	; (800811c <sim7600_usart_rx_check+0x1a4>)
 8008066:	7a9b      	ldrb	r3, [r3, #10]
 8008068:	71fb      	strb	r3, [r7, #7]
 800806a:	4b2c      	ldr	r3, [pc, #176]	; (800811c <sim7600_usart_rx_check+0x1a4>)
 800806c:	2200      	movs	r2, #0
 800806e:	729a      	strb	r2, [r3, #10]
    LOG_WRITE("simbuff %s\n", sim_buff);
 8008070:	492a      	ldr	r1, [pc, #168]	; (800811c <sim7600_usart_rx_check+0x1a4>)
 8008072:	482b      	ldr	r0, [pc, #172]	; (8008120 <sim7600_usart_rx_check+0x1a8>)
 8008074:	f017 fc3a 	bl	801f8ec <iprintf>
    sim_buff[10] = tmp;
 8008078:	4a28      	ldr	r2, [pc, #160]	; (800811c <sim7600_usart_rx_check+0x1a4>)
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	7293      	strb	r3, [r2, #10]
    //////////////////////////////////////////////

    int returnTmp = sim7600_handle_received_data();
 800807e:	f000 f90b 	bl	8008298 <sim7600_handle_received_data>
 8008082:	6038      	str	r0, [r7, #0]
    SIM7600_RESUME_RX();
 8008084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008088:	481a      	ldr	r0, [pc, #104]	; (80080f4 <sim7600_usart_rx_check+0x17c>)
 800808a:	f7fe ff3d 	bl	8006f08 <LL_GPIO_ResetOutputPin>
    LOG_WRITE("returnTmp %d\n", returnTmp);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	4824      	ldr	r0, [pc, #144]	; (8008124 <sim7600_usart_rx_check+0x1ac>)
 8008092:	f017 fc2b 	bl	801f8ec <iprintf>
    if (returnTmp < 0) //something wrong
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	da09      	bge.n	80080b0 <sim7600_usart_rx_check+0x138>
    {
      LOG_WRITE("returnTmp < 0\n");
 800809c:	4822      	ldr	r0, [pc, #136]	; (8008128 <sim7600_usart_rx_check+0x1b0>)
 800809e:	f017 fcab 	bl	801f9f8 <puts>
      //something wrong
      osEventFlagsSet(ConfigSimEventID, (1 << simErrorEnum)); //restart + reset
 80080a2:	4b19      	ldr	r3, [pc, #100]	; (8008108 <sim7600_usart_rx_check+0x190>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2104      	movs	r1, #4
 80080a8:	4618      	mov	r0, r3
 80080aa:	f002 f875 	bl	800a198 <osEventFlagsSet>
      return;
 80080ae:	e01d      	b.n	80080ec <sim7600_usart_rx_check+0x174>
    }

    //debug //////////////////////////////////////
    savePosDma(old_pos_dma, new_pos_dma, returnTmp);
 80080b0:	4b16      	ldr	r3, [pc, #88]	; (800810c <sim7600_usart_rx_check+0x194>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a12      	ldr	r2, [pc, #72]	; (8008100 <sim7600_usart_rx_check+0x188>)
 80080b6:	6811      	ldr	r1, [r2, #0]
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fd fcd4 	bl	8005a68 <savePosDma>
    //////////////////////////////////////////////

    old_pos_dma += returnTmp;
 80080c0:	4b12      	ldr	r3, [pc, #72]	; (800810c <sim7600_usart_rx_check+0x194>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	4413      	add	r3, r2
 80080c8:	4a10      	ldr	r2, [pc, #64]	; (800810c <sim7600_usart_rx_check+0x194>)
 80080ca:	6013      	str	r3, [r2, #0]
    old_pos_dma %= sim_dma_buff_size; // ~ if(old_pos_dma >= sim_dma_buff_size) old_pos_dma -= sim_dma_buff_size;
 80080cc:	4b0f      	ldr	r3, [pc, #60]	; (800810c <sim7600_usart_rx_check+0x194>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a09      	ldr	r2, [pc, #36]	; (80080f8 <sim7600_usart_rx_check+0x180>)
 80080d2:	6812      	ldr	r2, [r2, #0]
 80080d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80080d8:	fb02 f201 	mul.w	r2, r2, r1
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	4a0b      	ldr	r2, [pc, #44]	; (800810c <sim7600_usart_rx_check+0x194>)
 80080e0:	6013      	str	r3, [r2, #0]
  }

  SIM7600_RESUME_RX();
 80080e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080e6:	4803      	ldr	r0, [pc, #12]	; (80080f4 <sim7600_usart_rx_check+0x17c>)
 80080e8:	f7fe ff0e 	bl	8006f08 <LL_GPIO_ResetOutputPin>
}
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd90      	pop	{r4, r7, pc}
 80080f2:	bf00      	nop
 80080f4:	40020000 	.word	0x40020000
 80080f8:	20006364 	.word	0x20006364
 80080fc:	40026400 	.word	0x40026400
 8008100:	20000604 	.word	0x20000604
 8008104:	08021644 	.word	0x08021644
 8008108:	20005734 	.word	0x20005734
 800810c:	20000600 	.word	0x20000600
 8008110:	08021654 	.word	0x08021654
 8008114:	20006370 	.word	0x20006370
 8008118:	20009e10 	.word	0x20009e10
 800811c:	20006374 	.word	0x20006374
 8008120:	08021670 	.word	0x08021670
 8008124:	0802167c 	.word	0x0802167c
 8008128:	0802168c 	.word	0x0802168c

0800812c <check_normal_response>:

//return 0 ~ success + continue, 1~ no success,2 ~ return sim_buff_index
//__STATIC_INLINE  ~ macro
int check_normal_response(uint8_t *posOfSubStr, const char *response, int *_sim_buff_index) //macro
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  LOG_WRITE("chkRes\n");
 8008138:	4808      	ldr	r0, [pc, #32]	; (800815c <check_normal_response+0x30>)
 800813a:	f017 fc5d 	bl	801f9f8 <puts>
  //simple because all data received is string
  *_sim_buff_index = posOfSubStr + strlen(response) - sim_buff; // + 2 for "\r\n"
 800813e:	68b8      	ldr	r0, [r7, #8]
 8008140:	f7f8 f846 	bl	80001d0 <strlen>
 8008144:	4602      	mov	r2, r0
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4413      	add	r3, r2
 800814a:	4a05      	ldr	r2, [pc, #20]	; (8008160 <check_normal_response+0x34>)
 800814c:	1a9a      	subs	r2, r3, r2
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	601a      	str	r2, [r3, #0]
  return 0;
 8008152:	2300      	movs	r3, #0
    //return _sim_buff_index; don't have enough data
  {
    LOG_WRITE("chkIp 2\n");
    return 2;
  }
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	0802169c 	.word	0x0802169c
 8008160:	20006374 	.word	0x20006374

08008164 <check_normal_ip_packet>:

//return 0 ~ success + continue, 1~ no success (error),2 ~ return sim_buff_index (don't have enough data)
int check_normal_ip_packet(uint8_t *posOfSubStrSave, const char *response, int *_sim_buff_index, uint8_t **outputData, int *outputLen)
{
 8008164:	b590      	push	{r4, r7, lr}
 8008166:	b089      	sub	sp, #36	; 0x24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]
  LOG_WRITE("chkIpRes, %d, %x, resLen %d\n", *_sim_buff_index, posOfSubStrSave, strlen(response));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681c      	ldr	r4, [r3, #0]
 8008176:	68b8      	ldr	r0, [r7, #8]
 8008178:	f7f8 f82a 	bl	80001d0 <strlen>
 800817c:	4603      	mov	r3, r0
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4621      	mov	r1, r4
 8008182:	483e      	ldr	r0, [pc, #248]	; (800827c <check_normal_ip_packet+0x118>)
 8008184:	f017 fbb2 	bl	801f8ec <iprintf>
  //check whether have \r\n at buffer
  posOfSubStrSave += strlen(response);                      //point to length of IP packet (right after ",1," or ",0,")
 8008188:	68b8      	ldr	r0, [r7, #8]
 800818a:	f7f8 f821 	bl	80001d0 <strlen>
 800818e:	4602      	mov	r2, r0
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4413      	add	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]
  if(posOfSubStrSave >= (sim_buff + sim_buff_length))
 8008196:	4b3a      	ldr	r3, [pc, #232]	; (8008280 <check_normal_ip_packet+0x11c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	4b39      	ldr	r3, [pc, #228]	; (8008284 <check_normal_ip_packet+0x120>)
 800819e:	4413      	add	r3, r2
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d304      	bcc.n	80081b0 <check_normal_ip_packet+0x4c>
  {
    LOG_WRITE("chkIpRes pos >= (sim_+ sim_b)\n");
 80081a6:	4838      	ldr	r0, [pc, #224]	; (8008288 <check_normal_ip_packet+0x124>)
 80081a8:	f017 fc26 	bl	801f9f8 <puts>
    return 2;
 80081ac:	2302      	movs	r3, #2
 80081ae:	e060      	b.n	8008272 <check_normal_ip_packet+0x10e>
  }
  uint8_t *pointerTo_r_n = strstr(posOfSubStrSave, "\r"); //point to '\r'
 80081b0:	210d      	movs	r1, #13
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f017 fd73 	bl	801fc9e <strchr>
 80081b8:	61b8      	str	r0, [r7, #24]
  //in the worst case ',' after  "+RECEIVE,1" is last character of sim_buff
  // ->  posOfSubStrSave point to sim_buff[sim_buff_length] = '\0' (initialize above) -> pointerTo_r_n == NULL
  if (pointerTo_r_n != NULL && (pointerTo_r_n - posOfSubStrSave) <= 4) //,0,1500\r\n
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d049      	beq.n	8008254 <check_normal_ip_packet+0xf0>
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	dc44      	bgt.n	8008254 <check_normal_ip_packet+0xf0>
  {
    int lengthOfIPPacket = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61fb      	str	r3, [r7, #28]
    while (posOfSubStrSave < pointerTo_r_n)
 80081ce:	e01b      	b.n	8008208 <check_normal_ip_packet+0xa4>
    { //make sure break when meet '\r'
      char numberTmp = (char)(*posOfSubStrSave);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	75fb      	strb	r3, [r7, #23]
      if (numberTmp >= '0' && numberTmp <= '9')
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
 80081d8:	2b2f      	cmp	r3, #47	; 0x2f
 80081da:	d910      	bls.n	80081fe <check_normal_ip_packet+0x9a>
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	2b39      	cmp	r3, #57	; 0x39
 80081e0:	d80d      	bhi.n	80081fe <check_normal_ip_packet+0x9a>
      {
        lengthOfIPPacket = lengthOfIPPacket * 10 + numberTmp - '0';
 80081e2:	69fa      	ldr	r2, [r7, #28]
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	461a      	mov	r2, r3
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	4413      	add	r3, r2
 80081f2:	3b30      	subs	r3, #48	; 0x30
 80081f4:	61fb      	str	r3, [r7, #28]
      else
      { //data maybe bit-error -> restart
        LOG_WRITE("chkIpRes Err1\n");
        return 1;
      }
      posOfSubStrSave++;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3301      	adds	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	e004      	b.n	8008208 <check_normal_ip_packet+0xa4>
        LOG_WRITE("chkIpRes Err1\n");
 80081fe:	4823      	ldr	r0, [pc, #140]	; (800828c <check_normal_ip_packet+0x128>)
 8008200:	f017 fbfa 	bl	801f9f8 <puts>
        return 1;
 8008204:	2301      	movs	r3, #1
 8008206:	e034      	b.n	8008272 <check_normal_ip_packet+0x10e>
    while (posOfSubStrSave < pointerTo_r_n)
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	429a      	cmp	r2, r3
 800820e:	d3df      	bcc.n	80081d0 <check_normal_ip_packet+0x6c>
    }
    posOfSubStrSave += 2;                                                //point to data
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3302      	adds	r3, #2
 8008214:	60fb      	str	r3, [r7, #12]
    if (posOfSubStrSave + lengthOfIPPacket > sim_buff + sim_buff_length) // don't have enough data
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	441a      	add	r2, r3
 800821c:	4b18      	ldr	r3, [pc, #96]	; (8008280 <check_normal_ip_packet+0x11c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4619      	mov	r1, r3
 8008222:	4b18      	ldr	r3, [pc, #96]	; (8008284 <check_normal_ip_packet+0x120>)
 8008224:	440b      	add	r3, r1
 8008226:	429a      	cmp	r2, r3
 8008228:	d901      	bls.n	800822e <check_normal_ip_packet+0xca>
    {
      return 2;
 800822a:	2302      	movs	r3, #2
 800822c:	e021      	b.n	8008272 <check_normal_ip_packet+0x10e>
    }
    //else data is sastified
    *outputData = posOfSubStrSave;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	601a      	str	r2, [r3, #0]
    *outputLen = lengthOfIPPacket;
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	601a      	str	r2, [r3, #0]
    *_sim_buff_index = posOfSubStrSave - sim_buff + lengthOfIPPacket;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4a11      	ldr	r2, [pc, #68]	; (8008284 <check_normal_ip_packet+0x120>)
 800823e:	1a9a      	subs	r2, r3, r2
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	441a      	add	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	601a      	str	r2, [r3, #0]
    LOG_WRITE("ipPacket len %d\n", lengthOfIPPacket);
 8008248:	69f9      	ldr	r1, [r7, #28]
 800824a:	4811      	ldr	r0, [pc, #68]	; (8008290 <check_normal_ip_packet+0x12c>)
 800824c:	f017 fb4e 	bl	801f8ec <iprintf>
    return 0;
 8008250:	2300      	movs	r3, #0
 8008252:	e00e      	b.n	8008272 <check_normal_ip_packet+0x10e>
  }
  else if (posOfSubStrSave + 6 < sim_buff + sim_buff_length) //the worst case: +RECEIVE,1,1500\r\n
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	1d9a      	adds	r2, r3, #6
 8008258:	4b09      	ldr	r3, [pc, #36]	; (8008280 <check_normal_ip_packet+0x11c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4619      	mov	r1, r3
 800825e:	4b09      	ldr	r3, [pc, #36]	; (8008284 <check_normal_ip_packet+0x120>)
 8008260:	440b      	add	r3, r1
 8008262:	429a      	cmp	r2, r3
 8008264:	d204      	bcs.n	8008270 <check_normal_ip_packet+0x10c>
  {
    //data may be error-bit
    LOG_WRITE("chkIpRes Err2\n");
 8008266:	480b      	ldr	r0, [pc, #44]	; (8008294 <check_normal_ip_packet+0x130>)
 8008268:	f017 fbc6 	bl	801f9f8 <puts>
    return 1;
 800826c:	2301      	movs	r3, #1
 800826e:	e000      	b.n	8008272 <check_normal_ip_packet+0x10e>
  }
  else
    return 2; //dont have enough data
 8008270:	2302      	movs	r3, #2
}
 8008272:	4618      	mov	r0, r3
 8008274:	3724      	adds	r7, #36	; 0x24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd90      	pop	{r4, r7, pc}
 800827a:	bf00      	nop
 800827c:	080216a4 	.word	0x080216a4
 8008280:	20006370 	.word	0x20006370
 8008284:	20006374 	.word	0x20006374
 8008288:	080216c4 	.word	0x080216c4
 800828c:	080216e4 	.word	0x080216e4
 8008290:	080216f4 	.word	0x080216f4
 8008294:	08021708 	.word	0x08021708

08008298 <sim7600_handle_received_data>:

// "+CIPERROR",   //6 send IP packet error

 //handle received data, return num of bytes handled
int sim7600_handle_received_data()
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08e      	sub	sp, #56	; 0x38
 800829c:	af02      	add	r7, sp, #8
  LOG_WRITE("simHdlRecv\n");
 800829e:	48a4      	ldr	r0, [pc, #656]	; (8008530 <sim7600_handle_received_data+0x298>)
 80082a0:	f017 fbaa 	bl	801f9f8 <puts>
  //make sure sim_buff is string
  sim_buff[sim_buff_length] = '\0'; //can do this since real size of sim_buff = sim_buff_size + 1, so even sim_buff_length (max) = sim_buff_size, it is still oke
 80082a4:	4ba3      	ldr	r3, [pc, #652]	; (8008534 <sim7600_handle_received_data+0x29c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4aa3      	ldr	r2, [pc, #652]	; (8008538 <sim7600_handle_received_data+0x2a0>)
 80082aa:	2100      	movs	r1, #0
 80082ac:	54d1      	strb	r1, [r2, r3]
  uint8_t *posOfSubStr;
  uint8_t *posOfSubStrSave;
  int sim_buff_index = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
  LOG_WRITE("sim_buff_length %d\n", sim_buff_length);
 80082b2:	4ba0      	ldr	r3, [pc, #640]	; (8008534 <sim7600_handle_received_data+0x29c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4619      	mov	r1, r3
 80082b8:	48a0      	ldr	r0, [pc, #640]	; (800853c <sim7600_handle_received_data+0x2a4>)
 80082ba:	f017 fb17 	bl	801f8ec <iprintf>
  // }

  //can do this, since all data is string
  // if ((strstr(sim_buff, "CPIN: READY") != NULL) &&
  //         (strstr(sim_buff, "SMS DONE") != NULL) && 
  if(strstr(sim_buff, "PB DONE") != NULL)
 80082be:	49a0      	ldr	r1, [pc, #640]	; (8008540 <sim7600_handle_received_data+0x2a8>)
 80082c0:	489d      	ldr	r0, [pc, #628]	; (8008538 <sim7600_handle_received_data+0x2a0>)
 80082c2:	f017 fcf9 	bl	801fcb8 <strstr>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <sim7600_handle_received_data+0x4c>
  {
    LOG_WRITE("sim is rebooted\n");
 80082cc:	489d      	ldr	r0, [pc, #628]	; (8008544 <sim7600_handle_received_data+0x2ac>)
 80082ce:	f017 fb93 	bl	801f9f8 <puts>
    osEventFlagsSet(ConfigSimEventID, 1 << rebootEnum);
 80082d2:	4b9d      	ldr	r3, [pc, #628]	; (8008548 <sim7600_handle_received_data+0x2b0>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2108      	movs	r1, #8
 80082d8:	4618      	mov	r0, r3
 80082da:	f001 ff5d 	bl	800a198 <osEventFlagsSet>
    return sim_buff_length;
 80082de:	4b95      	ldr	r3, [pc, #596]	; (8008534 <sim7600_handle_received_data+0x29c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	e1c1      	b.n	8008668 <sim7600_handle_received_data+0x3d0>
  }

  while (true)
  {
    LOG_WRITE("sim_buff_index %d\n", sim_buff_index);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	4619      	mov	r1, r3
 80082e8:	4898      	ldr	r0, [pc, #608]	; (800854c <sim7600_handle_received_data+0x2b4>)
 80082ea:	f017 faff 	bl	801f8ec <iprintf>
    posOfSubStrSave = NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sim_buff_index == sim_buff_length)
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4b8f      	ldr	r3, [pc, #572]	; (8008534 <sim7600_handle_received_data+0x29c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d102      	bne.n	8008302 <sim7600_handle_received_data+0x6a>
      return sim_buff_length; //reach end of buff
 80082fc:	4b8d      	ldr	r3, [pc, #564]	; (8008534 <sim7600_handle_received_data+0x29c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	e1b2      	b.n	8008668 <sim7600_handle_received_data+0x3d0>
    else if(sim_buff_index > sim_buff_length) //out of index
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4b8b      	ldr	r3, [pc, #556]	; (8008534 <sim7600_handle_received_data+0x29c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	dd05      	ble.n	8008318 <sim7600_handle_received_data+0x80>
    {
      //something wrong
      LOG_WRITE("return sim_buff_index error\n");
 800830c:	4890      	ldr	r0, [pc, #576]	; (8008550 <sim7600_handle_received_data+0x2b8>)
 800830e:	f017 fb73 	bl	801f9f8 <puts>
      return sim_buff_length;
 8008312:	4b88      	ldr	r3, [pc, #544]	; (8008534 <sim7600_handle_received_data+0x29c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	e1a7      	b.n	8008668 <sim7600_handle_received_data+0x3d0>
    }

    int resultCheck = -1;
 8008318:	f04f 33ff 	mov.w	r3, #4294967295
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28
    //first check cmd response
    const char *checkCmdResPtr;
    if (cmdSendStatus == 1)
 800831e:	4b8d      	ldr	r3, [pc, #564]	; (8008554 <sim7600_handle_received_data+0x2bc>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d139      	bne.n	800839a <sim7600_handle_received_data+0x102>
    {
      if (res1 != NULL)
 8008326:	4b8c      	ldr	r3, [pc, #560]	; (8008558 <sim7600_handle_received_data+0x2c0>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d014      	beq.n	8008358 <sim7600_handle_received_data+0xc0>
      {
        posOfSubStr = strstr(sim_buff + sim_buff_index, res1);
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	461a      	mov	r2, r3
 8008332:	4b81      	ldr	r3, [pc, #516]	; (8008538 <sim7600_handle_received_data+0x2a0>)
 8008334:	4413      	add	r3, r2
 8008336:	4a88      	ldr	r2, [pc, #544]	; (8008558 <sim7600_handle_received_data+0x2c0>)
 8008338:	6812      	ldr	r2, [r2, #0]
 800833a:	4611      	mov	r1, r2
 800833c:	4618      	mov	r0, r3
 800833e:	f017 fcbb 	bl	801fcb8 <strstr>
 8008342:	61b8      	str	r0, [r7, #24]
        if (posOfSubStr != NULL)
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d006      	beq.n	8008358 <sim7600_handle_received_data+0xc0>
        {
          posOfSubStrSave = posOfSubStr;
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
          checkCmdResPtr = res1;
 800834e:	4b82      	ldr	r3, [pc, #520]	; (8008558 <sim7600_handle_received_data+0x2c0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	627b      	str	r3, [r7, #36]	; 0x24
          resultCheck = LIST_RESPONSE_SIZE;
 8008354:	2306      	movs	r3, #6
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
      if (res2 != NULL)
 8008358:	4b80      	ldr	r3, [pc, #512]	; (800855c <sim7600_handle_received_data+0x2c4>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d030      	beq.n	80083c2 <sim7600_handle_received_data+0x12a>
      {
        posOfSubStr = strstr(sim_buff + sim_buff_index, res2);
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	461a      	mov	r2, r3
 8008364:	4b74      	ldr	r3, [pc, #464]	; (8008538 <sim7600_handle_received_data+0x2a0>)
 8008366:	4413      	add	r3, r2
 8008368:	4a7c      	ldr	r2, [pc, #496]	; (800855c <sim7600_handle_received_data+0x2c4>)
 800836a:	6812      	ldr	r2, [r2, #0]
 800836c:	4611      	mov	r1, r2
 800836e:	4618      	mov	r0, r3
 8008370:	f017 fca2 	bl	801fcb8 <strstr>
 8008374:	61b8      	str	r0, [r7, #24]
        if (posOfSubStr != NULL && (posOfSubStr < posOfSubStrSave || posOfSubStrSave == NULL))
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d022      	beq.n	80083c2 <sim7600_handle_received_data+0x12a>
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	429a      	cmp	r2, r3
 8008382:	d302      	bcc.n	800838a <sim7600_handle_received_data+0xf2>
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d11b      	bne.n	80083c2 <sim7600_handle_received_data+0x12a>
        {
          posOfSubStrSave = posOfSubStr;
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	62fb      	str	r3, [r7, #44]	; 0x2c
          checkCmdResPtr = res2;
 800838e:	4b73      	ldr	r3, [pc, #460]	; (800855c <sim7600_handle_received_data+0x2c4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
          resultCheck = LIST_RESPONSE_SIZE;
 8008394:	2306      	movs	r3, #6
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28
 8008398:	e013      	b.n	80083c2 <sim7600_handle_received_data+0x12a>
        }
      }
    }
    else if (cmdSendStatus == 2)
 800839a:	4b6e      	ldr	r3, [pc, #440]	; (8008554 <sim7600_handle_received_data+0x2bc>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d10f      	bne.n	80083c2 <sim7600_handle_received_data+0x12a>
    {
      posOfSubStr = strstr(sim_buff + sim_buff_index, ">");
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	461a      	mov	r2, r3
 80083a6:	4b64      	ldr	r3, [pc, #400]	; (8008538 <sim7600_handle_received_data+0x2a0>)
 80083a8:	4413      	add	r3, r2
 80083aa:	213e      	movs	r1, #62	; 0x3e
 80083ac:	4618      	mov	r0, r3
 80083ae:	f017 fc76 	bl	801fc9e <strchr>
 80083b2:	61b8      	str	r0, [r7, #24]
      if (posOfSubStr != NULL)
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <sim7600_handle_received_data+0x12a>
      {
        posOfSubStrSave = posOfSubStr;
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        resultCheck = LIST_RESPONSE_SIZE;
 80083be:	2306      	movs	r3, #6
 80083c0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }

    //check in list
    for (int i = 0; i < LIST_RESPONSE_SIZE; i++)
 80083c2:	2300      	movs	r3, #0
 80083c4:	623b      	str	r3, [r7, #32]
 80083c6:	e01f      	b.n	8008408 <sim7600_handle_received_data+0x170>
    {
      posOfSubStr = strstr(sim_buff + sim_buff_index, listResponse[i]);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	461a      	mov	r2, r3
 80083cc:	4b5a      	ldr	r3, [pc, #360]	; (8008538 <sim7600_handle_received_data+0x2a0>)
 80083ce:	18d0      	adds	r0, r2, r3
 80083d0:	6a3a      	ldr	r2, [r7, #32]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4a61      	ldr	r2, [pc, #388]	; (8008560 <sim7600_handle_received_data+0x2c8>)
 80083dc:	4413      	add	r3, r2
 80083de:	4619      	mov	r1, r3
 80083e0:	f017 fc6a 	bl	801fcb8 <strstr>
 80083e4:	61b8      	str	r0, [r7, #24]
      if (posOfSubStr != NULL && (posOfSubStr < posOfSubStrSave || posOfSubStrSave == NULL))
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00a      	beq.n	8008402 <sim7600_handle_received_data+0x16a>
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d302      	bcc.n	80083fa <sim7600_handle_received_data+0x162>
 80083f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <sim7600_handle_received_data+0x16a>
      {
        posOfSubStrSave = posOfSubStr;
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        resultCheck = i;
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < LIST_RESPONSE_SIZE; i++)
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	3301      	adds	r3, #1
 8008406:	623b      	str	r3, [r7, #32]
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	2b05      	cmp	r3, #5
 800840c:	dddc      	ble.n	80083c8 <sim7600_handle_received_data+0x130>
      }
    }

    LOG_WRITE("resCheck %d, cmdStt %d\n", resultCheck, cmdSendStatus);
 800840e:	4b51      	ldr	r3, [pc, #324]	; (8008554 <sim7600_handle_received_data+0x2bc>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008416:	4853      	ldr	r0, [pc, #332]	; (8008564 <sim7600_handle_received_data+0x2cc>)
 8008418:	f017 fa68 	bl	801f8ec <iprintf>
    int resultTmp = -1;
 800841c:	f04f 33ff 	mov.w	r3, #4294967295
 8008420:	61fb      	str	r3, [r7, #28]
    if (resultCheck < 0) // nothing can find
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	2b00      	cmp	r3, #0
 8008426:	da0a      	bge.n	800843e <sim7600_handle_received_data+0x1a6>
    {
      if((sim_buff_length - sim_buff_index) > 100)
 8008428:	4b42      	ldr	r3, [pc, #264]	; (8008534 <sim7600_handle_received_data+0x29c>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b64      	cmp	r3, #100	; 0x64
 8008432:	f340 8109 	ble.w	8008648 <sim7600_handle_received_data+0x3b0>
      {
        resultTmp = -1;
 8008436:	f04f 33ff 	mov.w	r3, #4294967295
 800843a:	61fb      	str	r3, [r7, #28]
 800843c:	e104      	b.n	8008648 <sim7600_handle_received_data+0x3b0>
      }
    }                          

    else if (resultCheck == 0) //udp received
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	2b00      	cmp	r3, #0
 8008442:	d11d      	bne.n	8008480 <sim7600_handle_received_data+0x1e8>
    {
      uint8_t *udpData;
      int udpDataLen;
      resultTmp = check_normal_ip_packet(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index, &udpData, &udpDataLen);
 8008444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4a44      	ldr	r2, [pc, #272]	; (8008560 <sim7600_handle_received_data+0x2c8>)
 8008450:	1899      	adds	r1, r3, r2
 8008452:	f107 0010 	add.w	r0, r7, #16
 8008456:	f107 0214 	add.w	r2, r7, #20
 800845a:	f107 030c 	add.w	r3, r7, #12
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	4603      	mov	r3, r0
 8008462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008464:	f7ff fe7e 	bl	8008164 <check_normal_ip_packet>
 8008468:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0)
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	2b00      	cmp	r3, #0
 800846e:	f040 80eb 	bne.w	8008648 <sim7600_handle_received_data+0x3b0>
      {
        UDP_Packet_Analyze(udpData, udpDataLen);
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f000 fcc9 	bl	8008e10 <UDP_Packet_Analyze>
 800847e:	e731      	b.n	80082e4 <sim7600_handle_received_data+0x4c>
        continue;
      }
    }
    else if (resultCheck == 1) //1 net error
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	2b01      	cmp	r3, #1
 8008484:	d118      	bne.n	80084b8 <sim7600_handle_received_data+0x220>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8008486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008488:	4613      	mov	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4a33      	ldr	r2, [pc, #204]	; (8008560 <sim7600_handle_received_data+0x2c8>)
 8008492:	4413      	add	r3, r2
 8008494:	f107 0214 	add.w	r2, r7, #20
 8008498:	4619      	mov	r1, r3
 800849a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800849c:	f7ff fe46 	bl	800812c <check_normal_response>
 80084a0:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f040 80cf 	bne.w	8008648 <sim7600_handle_received_data+0x3b0>
      {
        //sim7600 error, handle in a task sim7600 config task
        osEventFlagsSet(ConnectSimEventID, 1 << netErrorEnum);
 80084aa:	4b2f      	ldr	r3, [pc, #188]	; (8008568 <sim7600_handle_received_data+0x2d0>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2108      	movs	r1, #8
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 fe71 	bl	800a198 <osEventFlagsSet>
        continue;
 80084b6:	e0d6      	b.n	8008666 <sim7600_handle_received_data+0x3ce>
      }
    }
    else if (resultCheck == 2) //2 udp/tcp closed , reconnect
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d118      	bne.n	80084f0 <sim7600_handle_received_data+0x258>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 80084be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4a25      	ldr	r2, [pc, #148]	; (8008560 <sim7600_handle_received_data+0x2c8>)
 80084ca:	4413      	add	r3, r2
 80084cc:	f107 0214 	add.w	r2, r7, #20
 80084d0:	4619      	mov	r1, r3
 80084d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084d4:	f7ff fe2a 	bl	800812c <check_normal_response>
 80084d8:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 80b3 	bne.w	8008648 <sim7600_handle_received_data+0x3b0>
      {
        osEventFlagsSet(ConnectSimEventID, 1 << ipCloseEnum); //notify connectTask that need to reconnect
 80084e2:	4b21      	ldr	r3, [pc, #132]	; (8008568 <sim7600_handle_received_data+0x2d0>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2110      	movs	r1, #16
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 fe55 	bl	800a198 <osEventFlagsSet>
        continue;
 80084ee:	e0ba      	b.n	8008666 <sim7600_handle_received_data+0x3ce>
      }
    }
    else if (resultCheck == 3) //3 received TCP packet
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d13a      	bne.n	800856c <sim7600_handle_received_data+0x2d4>
    {
      uint8_t *tcpData;
      int tcpDataLen;
      resultTmp = check_normal_ip_packet(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index, &tcpData, &tcpDataLen);
 80084f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4a17      	ldr	r2, [pc, #92]	; (8008560 <sim7600_handle_received_data+0x2c8>)
 8008502:	1899      	adds	r1, r3, r2
 8008504:	f107 0008 	add.w	r0, r7, #8
 8008508:	f107 0214 	add.w	r2, r7, #20
 800850c:	1d3b      	adds	r3, r7, #4
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	4603      	mov	r3, r0
 8008512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008514:	f7ff fe26 	bl	8008164 <check_normal_ip_packet>
 8008518:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0)
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f040 8093 	bne.w	8008648 <sim7600_handle_received_data+0x3b0>
      {
        TCP_Packet_Analyze(tcpData, tcpDataLen);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	4611      	mov	r1, r2
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fbe1 	bl	8008cf0 <TCP_Packet_Analyze>
 800852e:	e6d9      	b.n	80082e4 <sim7600_handle_received_data+0x4c>
 8008530:	08021718 	.word	0x08021718
 8008534:	20006370 	.word	0x20006370
 8008538:	20006374 	.word	0x20006374
 800853c:	08021724 	.word	0x08021724
 8008540:	08021738 	.word	0x08021738
 8008544:	08021740 	.word	0x08021740
 8008548:	20005734 	.word	0x20005734
 800854c:	08021750 	.word	0x08021750
 8008550:	08021764 	.word	0x08021764
 8008554:	200005e8 	.word	0x200005e8
 8008558:	2000636c 	.word	0x2000636c
 800855c:	20006360 	.word	0x20006360
 8008560:	200002ac 	.word	0x200002ac
 8008564:	08021780 	.word	0x08021780
 8008568:	20005738 	.word	0x20005738
        continue;
      }
    }
    else if (resultCheck == 4) //4 call
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	2b04      	cmp	r3, #4
 8008570:	d117      	bne.n	80085a2 <sim7600_handle_received_data+0x30a>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8008572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008574:	4613      	mov	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4a3c      	ldr	r2, [pc, #240]	; (8008670 <sim7600_handle_received_data+0x3d8>)
 800857e:	4413      	add	r3, r2
 8008580:	f107 0214 	add.w	r2, r7, #20
 8008584:	4619      	mov	r1, r3
 8008586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008588:	f7ff fdd0 	bl	800812c <check_normal_response>
 800858c:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d159      	bne.n	8008648 <sim7600_handle_received_data+0x3b0>
      {
        osEventFlagsSet(ConfigSimEventID, 1 << callingEnum); //notify configTask to hang-up
 8008594:	4b37      	ldr	r3, [pc, #220]	; (8008674 <sim7600_handle_received_data+0x3dc>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2102      	movs	r1, #2
 800859a:	4618      	mov	r0, r3
 800859c:	f001 fdfc 	bl	800a198 <osEventFlagsSet>
        continue;
 80085a0:	e061      	b.n	8008666 <sim7600_handle_received_data+0x3ce>
      }
    }
    else if (resultCheck == 5) //sms
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	2b05      	cmp	r3, #5
 80085a6:	d117      	bne.n	80085d8 <sim7600_handle_received_data+0x340>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 80085a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085aa:	4613      	mov	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4a2f      	ldr	r2, [pc, #188]	; (8008670 <sim7600_handle_received_data+0x3d8>)
 80085b4:	4413      	add	r3, r2
 80085b6:	f107 0214 	add.w	r2, r7, #20
 80085ba:	4619      	mov	r1, r3
 80085bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085be:	f7ff fdb5 	bl	800812c <check_normal_response>
 80085c2:	61f8      	str	r0, [r7, #28]
      if (resultTmp == 0) // success find
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d13e      	bne.n	8008648 <sim7600_handle_received_data+0x3b0>
      {
        osEventFlagsSet(ConfigSimEventID, 1 << smsEnum); //notify configTask to hang up
 80085ca:	4b2a      	ldr	r3, [pc, #168]	; (8008674 <sim7600_handle_received_data+0x3dc>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2101      	movs	r1, #1
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 fde1 	bl	800a198 <osEventFlagsSet>
        continue;
 80085d6:	e046      	b.n	8008666 <sim7600_handle_received_data+0x3ce>
      }
    }
    else //cmd check
    {
      LOG_WRITE("cmdSendStt %d\n", cmdSendStatus);
 80085d8:	4b27      	ldr	r3, [pc, #156]	; (8008678 <sim7600_handle_received_data+0x3e0>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4619      	mov	r1, r3
 80085de:	4827      	ldr	r0, [pc, #156]	; (800867c <sim7600_handle_received_data+0x3e4>)
 80085e0:	f017 f984 	bl	801f8ec <iprintf>
      if (cmdSendStatus == 2)
 80085e4:	4b24      	ldr	r3, [pc, #144]	; (8008678 <sim7600_handle_received_data+0x3e0>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d10b      	bne.n	8008604 <sim7600_handle_received_data+0x36c>
      {                                      //just need '>'
        osEventFlagsSet(SendSimEventID, 1U); //notify to send task
 80085ec:	4b24      	ldr	r3, [pc, #144]	; (8008680 <sim7600_handle_received_data+0x3e8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2101      	movs	r1, #1
 80085f2:	4618      	mov	r0, r3
 80085f4:	f001 fdd0 	bl	800a198 <osEventFlagsSet>
        // osThreadYield();
        //change sim_buff_index
        sim_buff_index = posOfSubStrSave - sim_buff + 1; // + 1 for ">"
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	4a22      	ldr	r2, [pc, #136]	; (8008684 <sim7600_handle_received_data+0x3ec>)
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	3301      	adds	r3, #1
 8008600:	617b      	str	r3, [r7, #20]
        continue;
 8008602:	e030      	b.n	8008666 <sim7600_handle_received_data+0x3ce>
      }
      else if (cmdSendStatus == 1)
 8008604:	4b1c      	ldr	r3, [pc, #112]	; (8008678 <sim7600_handle_received_data+0x3e0>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d11d      	bne.n	8008648 <sim7600_handle_received_data+0x3b0>
      {
        //check whether have \r\n at the end of this response
        resultTmp = check_normal_response(posOfSubStrSave, checkCmdResPtr, &sim_buff_index);
 800860c:	f107 0314 	add.w	r3, r7, #20
 8008610:	461a      	mov	r2, r3
 8008612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008616:	f7ff fd89 	bl	800812c <check_normal_response>
 800861a:	61f8      	str	r0, [r7, #28]
        if (resultTmp == 0)
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d112      	bne.n	8008648 <sim7600_handle_received_data+0x3b0>
        {
          //notify to send task
          if (checkCmdResPtr == res1)
 8008622:	4b19      	ldr	r3, [pc, #100]	; (8008688 <sim7600_handle_received_data+0x3f0>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008628:	429a      	cmp	r2, r3
 800862a:	d106      	bne.n	800863a <sim7600_handle_received_data+0x3a2>
          {
            osEventFlagsSet(SendSimEventID, 1U);
 800862c:	4b14      	ldr	r3, [pc, #80]	; (8008680 <sim7600_handle_received_data+0x3e8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2101      	movs	r1, #1
 8008632:	4618      	mov	r0, r3
 8008634:	f001 fdb0 	bl	800a198 <osEventFlagsSet>
          }
          else
          {
            osEventFlagsSet(SendSimEventID, 2U);
          }
          continue;
 8008638:	e015      	b.n	8008666 <sim7600_handle_received_data+0x3ce>
            osEventFlagsSet(SendSimEventID, 2U);
 800863a:	4b11      	ldr	r3, [pc, #68]	; (8008680 <sim7600_handle_received_data+0x3e8>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2102      	movs	r1, #2
 8008640:	4618      	mov	r0, r3
 8008642:	f001 fda9 	bl	800a198 <osEventFlagsSet>
          continue;
 8008646:	e00e      	b.n	8008666 <sim7600_handle_received_data+0x3ce>
        }
      }
    }

    LOG_WRITE("resultTmp %d\n", resultTmp);
 8008648:	69f9      	ldr	r1, [r7, #28]
 800864a:	4810      	ldr	r0, [pc, #64]	; (800868c <sim7600_handle_received_data+0x3f4>)
 800864c:	f017 f94e 	bl	801f8ec <iprintf>
    //data or net error, need to start
    if (resultTmp == 1)
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d105      	bne.n	8008662 <sim7600_handle_received_data+0x3ca>
    {
      //error need to start
      osEventFlagsSet(ConfigSimEventID, 1 << simErrorEnum); //notify configTask to restart and re config
 8008656:	4b07      	ldr	r3, [pc, #28]	; (8008674 <sim7600_handle_received_data+0x3dc>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2104      	movs	r1, #4
 800865c:	4618      	mov	r0, r3
 800865e:	f001 fd9b 	bl	800a198 <osEventFlagsSet>
    }
    //dont have enough data
    //else if(resultTmp == 2) return sim_buff_index;
    return sim_buff_index;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	e000      	b.n	8008668 <sim7600_handle_received_data+0x3d0>
  {
 8008666:	e63d      	b.n	80082e4 <sim7600_handle_received_data+0x4c>
  //     }
  //   }
  //   break; //if can't find \r\n .. \r\n sastified
  // }
  // return sim_buff_index;
}
 8008668:	4618      	mov	r0, r3
 800866a:	3730      	adds	r7, #48	; 0x30
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	200002ac 	.word	0x200002ac
 8008674:	20005734 	.word	0x20005734
 8008678:	200005e8 	.word	0x200005e8
 800867c:	08021798 	.word	0x08021798
 8008680:	200056c4 	.word	0x200056c4
 8008684:	20006374 	.word	0x20006374
 8008688:	2000636c 	.word	0x2000636c
 800868c:	080217a8 	.word	0x080217a8

08008690 <sim7600_change_baud>:
//   if(checksum == sim7600_check_sum_data(tcpPacket, length - 2)) return true;
//   return false;
// }

void sim7600_change_baud(uint32_t baudrate)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  LOG_WRITE("changeBaud %lu\n", baudrate);
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	4809      	ldr	r0, [pc, #36]	; (80086c0 <sim7600_change_baud+0x30>)
 800869c:	f017 f926 	bl	801f8ec <iprintf>
  LL_USART_Disable(USART1);
 80086a0:	4808      	ldr	r0, [pc, #32]	; (80086c4 <sim7600_change_baud+0x34>)
 80086a2:	f7fe f9f5 	bl	8006a90 <LL_USART_Disable>
  sim7600SetBaudrate(baudrate);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	4907      	ldr	r1, [pc, #28]	; (80086c8 <sim7600_change_baud+0x38>)
 80086ac:	4805      	ldr	r0, [pc, #20]	; (80086c4 <sim7600_change_baud+0x34>)
 80086ae:	f7fe fa13 	bl	8006ad8 <LL_USART_SetBaudRate>
  LL_USART_Enable(USART1);
 80086b2:	4804      	ldr	r0, [pc, #16]	; (80086c4 <sim7600_change_baud+0x34>)
 80086b4:	f7fe f9dc 	bl	8006a70 <LL_USART_Enable>
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	080217b8 	.word	0x080217b8
 80086c4:	40011000 	.word	0x40011000
 80086c8:	0501bd00 	.word	0x0501bd00

080086cc <sim7600_reset_all_state>:
//restart/reset module
//1st use pwr pin
//2nd use rst pin

void sim7600_reset_all_state()
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  connectToHostCount = 0;
 80086d0:	4b13      	ldr	r3, [pc, #76]	; (8008720 <sim7600_reset_all_state+0x54>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]

  sim7600ConnectStatus = 0;
 80086d6:	4b13      	ldr	r3, [pc, #76]	; (8008724 <sim7600_reset_all_state+0x58>)
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]

  //clear event
  osEventFlagsClear(ConfigSimEventID, 0xFF);
 80086dc:	4b12      	ldr	r3, [pc, #72]	; (8008728 <sim7600_reset_all_state+0x5c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	21ff      	movs	r1, #255	; 0xff
 80086e2:	4618      	mov	r0, r3
 80086e4:	f001 fd9c 	bl	800a220 <osEventFlagsClear>
  osEventFlagsClear(ConnectSimEventID, 0xFF);
 80086e8:	4b10      	ldr	r3, [pc, #64]	; (800872c <sim7600_reset_all_state+0x60>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	21ff      	movs	r1, #255	; 0xff
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 fd96 	bl	800a220 <osEventFlagsClear>

  //clear message queue
  osMessageQueueReset(SendSimQueueID);
 80086f4:	4b0e      	ldr	r3, [pc, #56]	; (8008730 <sim7600_reset_all_state+0x64>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f002 f9ed 	bl	800aad8 <osMessageQueueReset>

  cmdSendStatus = 0;
 80086fe:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <sim7600_reset_all_state+0x68>)
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]
  osEventFlagsClear(SendSimEventID, 0xFF);
 8008704:	4b0c      	ldr	r3, [pc, #48]	; (8008738 <sim7600_reset_all_state+0x6c>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	21ff      	movs	r1, #255	; 0xff
 800870a:	4618      	mov	r0, r3
 800870c:	f001 fd88 	bl	800a220 <osEventFlagsClear>

  old_pos_dma = 0;
 8008710:	4b0a      	ldr	r3, [pc, #40]	; (800873c <sim7600_reset_all_state+0x70>)
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
  new_pos_dma = 0;
 8008716:	4b0a      	ldr	r3, [pc, #40]	; (8008740 <sim7600_reset_all_state+0x74>)
 8008718:	2200      	movs	r2, #0
 800871a:	601a      	str	r2, [r3, #0]
}
 800871c:	bf00      	nop
 800871e:	bd80      	pop	{r7, pc}
 8008720:	200005e0 	.word	0x200005e0
 8008724:	200005f0 	.word	0x200005f0
 8008728:	20005734 	.word	0x20005734
 800872c:	20005738 	.word	0x20005738
 8008730:	20005740 	.word	0x20005740
 8008734:	200005e8 	.word	0x200005e8
 8008738:	200056c4 	.word	0x200056c4
 800873c:	20000600 	.word	0x20000600
 8008740:	20000604 	.word	0x20000604

08008744 <sim7600_restart>:

void sim7600_restart()
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  LOG_WRITE("restart\n");
 8008748:	4829      	ldr	r0, [pc, #164]	; (80087f0 <sim7600_restart+0xac>)
 800874a:	f017 f955 	bl	801f9f8 <puts>
  // {
  //   /* code */
  // }
  

  LL_USART_Disable(USART1);
 800874e:	4829      	ldr	r0, [pc, #164]	; (80087f4 <sim7600_restart+0xb0>)
 8008750:	f7fe f99e 	bl	8006a90 <LL_USART_Disable>
  while (LL_USART_IsEnabled(USART1)); //waite until En bit == 0
 8008754:	bf00      	nop
 8008756:	4827      	ldr	r0, [pc, #156]	; (80087f4 <sim7600_restart+0xb0>)
 8008758:	f7fe f9aa 	bl	8006ab0 <LL_USART_IsEnabled>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f9      	bne.n	8008756 <sim7600_restart+0x12>
  
  //disable DMA
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 8008762:	2102      	movs	r1, #2
 8008764:	4824      	ldr	r0, [pc, #144]	; (80087f8 <sim7600_restart+0xb4>)
 8008766:	f7fd ff6d 	bl	8006644 <LL_DMA_DisableStream>
  while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 800876a:	bf00      	nop
 800876c:	2102      	movs	r1, #2
 800876e:	4822      	ldr	r0, [pc, #136]	; (80087f8 <sim7600_restart+0xb4>)
 8008770:	f7fd ff88 	bl	8006684 <LL_DMA_IsEnabledStream>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1f8      	bne.n	800876c <sim7600_restart+0x28>
    ; //wait until En bit == 0

  //reset global var
  sim7600_reset_all_state();
 800877a:	f7ff ffa7 	bl	80086cc <sim7600_reset_all_state>

  if (restartSimstatus < MAX_NUM_RESTART_SIM7600) //0-19
 800877e:	4b1f      	ldr	r3, [pc, #124]	; (80087fc <sim7600_restart+0xb8>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b13      	cmp	r3, #19
 8008784:	dc07      	bgt.n	8008796 <sim7600_restart+0x52>
  {
    //use pwr pin to power off
    sim7600_powerOFF();
 8008786:	f7fe fc1f 	bl	8006fc8 <sim7600_powerOFF>
    restartSimstatus++;
 800878a:	4b1c      	ldr	r3, [pc, #112]	; (80087fc <sim7600_restart+0xb8>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3301      	adds	r3, #1
 8008790:	4a1a      	ldr	r2, [pc, #104]	; (80087fc <sim7600_restart+0xb8>)
 8008792:	6013      	str	r3, [r2, #0]
 8008794:	e013      	b.n	80087be <sim7600_restart+0x7a>
  }
  else if (restartSimstatus < (MAX_NUM_RESTART_SIM7600 + MAX_NUM_RESET_SIM7600)) // 20-21
 8008796:	4b19      	ldr	r3, [pc, #100]	; (80087fc <sim7600_restart+0xb8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b15      	cmp	r3, #21
 800879c:	dc09      	bgt.n	80087b2 <sim7600_restart+0x6e>
  {
    sim7600_reset();
 800879e:	f7fe fc63 	bl	8007068 <sim7600_reset>
    sim7600_powerOFF();
 80087a2:	f7fe fc11 	bl	8006fc8 <sim7600_powerOFF>
    restartSimstatus++;
 80087a6:	4b15      	ldr	r3, [pc, #84]	; (80087fc <sim7600_restart+0xb8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3301      	adds	r3, #1
 80087ac:	4a13      	ldr	r2, [pc, #76]	; (80087fc <sim7600_restart+0xb8>)
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	e005      	b.n	80087be <sim7600_restart+0x7a>
  }
  else // >=22
  {
    //delay to wait
    osDelay(SLEEP_MINUTES_SIM7600 * 60 * 1000); // SLEEP_MINUTES_SIM7600 minutes
 80087b2:	4813      	ldr	r0, [pc, #76]	; (8008800 <sim7600_restart+0xbc>)
 80087b4:	f001 fb9f 	bl	8009ef6 <osDelay>
    restartSimstatus = 0;
 80087b8:	4b10      	ldr	r3, [pc, #64]	; (80087fc <sim7600_restart+0xb8>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
  }

  //reset global var
  sim7600_reset_all_state();
 80087be:	f7ff ff85 	bl	80086cc <sim7600_reset_all_state>

  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 80087c2:	2102      	movs	r1, #2
 80087c4:	480c      	ldr	r0, [pc, #48]	; (80087f8 <sim7600_restart+0xb4>)
 80087c6:	f7fd ff1d 	bl	8006604 <LL_DMA_EnableStream>
  while (!LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2))
 80087ca:	bf00      	nop
 80087cc:	2102      	movs	r1, #2
 80087ce:	480a      	ldr	r0, [pc, #40]	; (80087f8 <sim7600_restart+0xb4>)
 80087d0:	f7fd ff58 	bl	8006684 <LL_DMA_IsEnabledStream>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f8      	beq.n	80087cc <sim7600_restart+0x88>
    ; //wait until En bit == 1

  //change baud rate to default
  sim7600_change_baud(SIM7600_BAUDRATE_DEFAULT); // in this function usart is enable again
 80087da:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80087de:	f7ff ff57 	bl	8008690 <sim7600_change_baud>
  LL_USART_Enable(USART1);
 80087e2:	4804      	ldr	r0, [pc, #16]	; (80087f4 <sim7600_restart+0xb0>)
 80087e4:	f7fe f944 	bl	8006a70 <LL_USART_Enable>

  //power on again
  sim7600_powerON();
 80087e8:	f7fe fb9e 	bl	8006f28 <sim7600_powerON>

  //resume all task
}
 80087ec:	bf00      	nop
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	080217c8 	.word	0x080217c8
 80087f4:	40011000 	.word	0x40011000
 80087f8:	40026400 	.word	0x40026400
 80087fc:	200005e4 	.word	0x200005e4
 8008800:	02932e00 	.word	0x02932e00

08008804 <TCP_UDP_Notify>:
} connectType;

osEventFlagsId_t TCP_UDP_StackEventID;
//notify to ethernet or sim7600 stack
void TCP_UDP_Notify(int flagsEnum)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  LOG_WRITE("tcpUdpNotify %d\n", flagsEnum);
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	4808      	ldr	r0, [pc, #32]	; (8008830 <TCP_UDP_Notify+0x2c>)
 8008810:	f017 f86c 	bl	801f8ec <iprintf>
  osEventFlagsSet(TCP_UDP_StackEventID, 1 << flagsEnum);
 8008814:	4b07      	ldr	r3, [pc, #28]	; (8008834 <TCP_UDP_Notify+0x30>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	2101      	movs	r1, #1
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	fa01 f303 	lsl.w	r3, r1, r3
 8008820:	4619      	mov	r1, r3
 8008822:	4610      	mov	r0, r2
 8008824:	f001 fcb8 	bl	800a198 <osEventFlagsSet>
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	080217e4 	.word	0x080217e4
 8008834:	200101e0 	.word	0x200101e0

08008838 <TCP_UDP_Send>:

//payload : 1-tcp, 2-udp
bool TCP_UDP_Send(int type, uint8_t *data, int len)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
  LOG_WRITE("tcpUdpSend %d\n", type);
 8008844:	68f9      	ldr	r1, [r7, #12]
 8008846:	480c      	ldr	r0, [pc, #48]	; (8008878 <TCP_UDP_Send+0x40>)
 8008848:	f017 f850 	bl	801f8ec <iprintf>
  if (connectType == connectTypeSim7600)
 800884c:	4b0b      	ldr	r3, [pc, #44]	; (800887c <TCP_UDP_Send+0x44>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d106      	bne.n	8008862 <TCP_UDP_Send+0x2a>
  {
    return sim7600_IP(type, data, len);
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	68b9      	ldr	r1, [r7, #8]
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f7fe ffa9 	bl	80077b0 <sim7600_IP>
 800885e:	4603      	mov	r3, r0
 8008860:	e005      	b.n	800886e <TCP_UDP_Send+0x36>
  }
  else
  {
    return ethSendIP(type, data, len);
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	68b9      	ldr	r1, [r7, #8]
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f7fd fbbe 	bl	8005fe8 <ethSendIP>
 800886c:	4603      	mov	r3, r0
  }
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	080217f8 	.word	0x080217f8
 800887c:	200101dc 	.word	0x200101dc

08008880 <AudioPacketHandle>:

MP3Struct *mp3Packet;
bool AudioPacketHandle(uint8_t *data, int len)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  mp3Packet = (MP3Struct*)data;
 800888a:	4a1c      	ldr	r2, [pc, #112]	; (80088fc <AudioPacketHandle+0x7c>)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6013      	str	r3, [r2, #0]

  //decrypt 16B next with old aes key to get new key
  if(AES_Decrypt_Packet(data + 16, 16) > 0)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3310      	adds	r3, #16
 8008894:	2110      	movs	r1, #16
 8008896:	4618      	mov	r0, r3
 8008898:	f7fc fa74 	bl	8004d84 <AES_Decrypt_Packet>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dd24      	ble.n	80088ec <AudioPacketHandle+0x6c>
  {
    //decrypt with mp3 key, from volume
    int lenPacketDecrypt = len - MP3_PACKET_HEADER_LEN_BEFORE_VOLUME;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	3b15      	subs	r3, #21
 80088a6:	60fb      	str	r3, [r7, #12]
    lenPacketDecrypt -=  (lenPacketDecrypt % 16); //make sure it is multiple of 16 aes block len
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	425a      	negs	r2, r3
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	f002 020f 	and.w	r2, r2, #15
 80088b4:	bf58      	it	pl
 80088b6:	4253      	negpl	r3, r2
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	60fb      	str	r3, [r7, #12]
    if(AES_Decrypt_Packet_Key(&(mp3Packet->volume), lenPacketDecrypt, mp3Packet->aesMP3key) > 0)
 80088be:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <AudioPacketHandle+0x7c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f103 0015 	add.w	r0, r3, #21
 80088c6:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <AudioPacketHandle+0x7c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3305      	adds	r3, #5
 80088cc:	461a      	mov	r2, r3
 80088ce:	68f9      	ldr	r1, [r7, #12]
 80088d0:	f7fc fa86 	bl	8004de0 <AES_Decrypt_Packet_Key>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	dd08      	ble.n	80088ec <AudioPacketHandle+0x6c>
    {
      uint8_t vol = mp3Packet->volume;
 80088da:	4b08      	ldr	r3, [pc, #32]	; (80088fc <AudioPacketHandle+0x7c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	7d5b      	ldrb	r3, [r3, #21]
 80088e0:	72fb      	strb	r3, [r7, #11]
      if(vol == 100)
 80088e2:	7afb      	ldrb	r3, [r7, #11]
 80088e4:	2b64      	cmp	r3, #100	; 0x64
 80088e6:	d101      	bne.n	80088ec <AudioPacketHandle+0x6c>
        return true;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e002      	b.n	80088f2 <AudioPacketHandle+0x72>
    }
  }
  //wrong mp3 packet
  LOG_WRITE("mp3 packet error\n");
 80088ec:	4804      	ldr	r0, [pc, #16]	; (8008900 <AudioPacketHandle+0x80>)
 80088ee:	f017 f883 	bl	801f9f8 <puts>
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	200101d0 	.word	0x200101d0
 8008900:	08021808 	.word	0x08021808

08008904 <TCP_Packet_Handle>:

int realPacketLen; //len payload , not including md5
int totalTCPBytes = 0;
void TCP_Packet_Handle()
{
 8008904:	b590      	push	{r4, r7, lr}
 8008906:	b08b      	sub	sp, #44	; 0x2c
 8008908:	af02      	add	r7, sp, #8
  LOG_WRITE("tcpPacketHdl\n");
 800890a:	48a9      	ldr	r0, [pc, #676]	; (8008bb0 <TCP_Packet_Handle+0x2ac>)
 800890c:	f017 f874 	bl	801f9f8 <puts>
  ISError = true;
 8008910:	4ba8      	ldr	r3, [pc, #672]	; (8008bb4 <TCP_Packet_Handle+0x2b0>)
 8008912:	2201      	movs	r2, #1
 8008914:	701a      	strb	r2, [r3, #0]
  PacketTCPStruct *packetTcpHeader = (PacketTCPStruct *)TcpBuff;
 8008916:	4ba8      	ldr	r3, [pc, #672]	; (8008bb8 <TCP_Packet_Handle+0x2b4>)
 8008918:	61bb      	str	r3, [r7, #24]
  totalTCPBytes += packetTcpHeader->len;
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	461a      	mov	r2, r3
 8008922:	4ba6      	ldr	r3, [pc, #664]	; (8008bbc <TCP_Packet_Handle+0x2b8>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4413      	add	r3, r2
 8008928:	4aa4      	ldr	r2, [pc, #656]	; (8008bbc <TCP_Packet_Handle+0x2b8>)
 800892a:	6013      	str	r3, [r2, #0]
  realPacketLen = packetTcpHeader->len - SIZE_OF_MD5;
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	b29b      	uxth	r3, r3
 8008932:	3b10      	subs	r3, #16
 8008934:	4aa2      	ldr	r2, [pc, #648]	; (8008bc0 <TCP_Packet_Handle+0x2bc>)
 8008936:	6013      	str	r3, [r2, #0]
  if (!IsTLSHanshaked)
 8008938:	4ba2      	ldr	r3, [pc, #648]	; (8008bc4 <TCP_Packet_Handle+0x2c0>)
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	f083 0301 	eor.w	r3, r3, #1
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 80ea 	beq.w	8008b1c <TCP_Packet_Handle+0x218>
  {
    if (TCPConnectStatus == 0 && realPacketLen == SIZE_OF_PUBKEY)
 8008948:	4b9f      	ldr	r3, [pc, #636]	; (8008bc8 <TCP_Packet_Handle+0x2c4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f040 80a3 	bne.w	8008a98 <TCP_Packet_Handle+0x194>
 8008952:	4b9b      	ldr	r3, [pc, #620]	; (8008bc0 <TCP_Packet_Handle+0x2bc>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800895a:	f040 809d 	bne.w	8008a98 <TCP_Packet_Handle+0x194>
    {
      //check MD5
      if (CheckMD5(packetTcpHeader))
 800895e:	69b8      	ldr	r0, [r7, #24]
 8008960:	f000 fc06 	bl	8009170 <CheckMD5>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 810e 	beq.w	8008b88 <TCP_Packet_Handle+0x284>
      {
        PacketTCPStruct *rsaPacketHeader = (PacketTCPStruct *)RSA_Packet;
 800896c:	4b97      	ldr	r3, [pc, #604]	; (8008bcc <TCP_Packet_Handle+0x2c8>)
 800896e:	60bb      	str	r3, [r7, #8]

        //copy salt first
        srand(time(0));
 8008970:	2000      	movs	r0, #0
 8008972:	f017 f9b9 	bl	801fce8 <time>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	4613      	mov	r3, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f017 f843 	bl	801fa08 <srand>
        int j;
        for (j = 0; j < saltLen; j++)
 8008982:	2300      	movs	r3, #0
 8008984:	61fb      	str	r3, [r7, #28]
 8008986:	e019      	b.n	80089bc <TCP_Packet_Handle+0xb8>
        {
          rsaPacketHeader->payload[j] = (uint8_t)rand();
 8008988:	f017 f86c 	bl	801fa64 <rand>
 800898c:	4603      	mov	r3, r0
 800898e:	b2d9      	uxtb	r1, r3
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	4413      	add	r3, r2
 8008996:	3312      	adds	r3, #18
 8008998:	460a      	mov	r2, r1
 800899a:	701a      	strb	r2, [r3, #0]
          salt[j] = rsaPacketHeader->payload[j] & 0x7F;
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	3312      	adds	r3, #18
 80089a4:	781a      	ldrb	r2, [r3, #0]
 80089a6:	4b8a      	ldr	r3, [pc, #552]	; (8008bd0 <TCP_Packet_Handle+0x2cc>)
 80089a8:	6819      	ldr	r1, [r3, #0]
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	440b      	add	r3, r1
 80089ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80089b2:	b2d2      	uxtb	r2, r2
 80089b4:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < saltLen; j++)
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	3301      	adds	r3, #1
 80089ba:	61fb      	str	r3, [r7, #28]
 80089bc:	4b85      	ldr	r3, [pc, #532]	; (8008bd4 <TCP_Packet_Handle+0x2d0>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	69fa      	ldr	r2, [r7, #28]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	dbe0      	blt.n	8008988 <TCP_Packet_Handle+0x84>
        }
        //copy next ID
        memcpy(rsaPacketHeader->payload + saltLen, DeviceID, saltLen);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	3312      	adds	r3, #18
 80089ca:	4a82      	ldr	r2, [pc, #520]	; (8008bd4 <TCP_Packet_Handle+0x2d0>)
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	4413      	add	r3, r2
 80089d0:	4a81      	ldr	r2, [pc, #516]	; (8008bd8 <TCP_Packet_Handle+0x2d4>)
 80089d2:	6811      	ldr	r1, [r2, #0]
 80089d4:	4a7f      	ldr	r2, [pc, #508]	; (8008bd4 <TCP_Packet_Handle+0x2d0>)
 80089d6:	6812      	ldr	r2, [r2, #0]
 80089d8:	4618      	mov	r0, r3
 80089da:	f016 fe9d 	bl	801f718 <memcpy>
        //convert text with salt
        ConvertTextWithSalt(rsaPacketHeader->payload, saltLen, saltLen, Add);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f103 0012 	add.w	r0, r3, #18
 80089e4:	4b7b      	ldr	r3, [pc, #492]	; (8008bd4 <TCP_Packet_Handle+0x2d0>)
 80089e6:	6819      	ldr	r1, [r3, #0]
 80089e8:	4b7a      	ldr	r3, [pc, #488]	; (8008bd4 <TCP_Packet_Handle+0x2d0>)
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	2300      	movs	r3, #0
 80089ee:	f000 fc01 	bl	80091f4 <ConvertTextWithSalt>

        //then AES key
        AES_Generate_Rand_Key();
 80089f2:	f7fb ff05 	bl	8004800 <AES_Generate_Rand_Key>
        memcpy(rsaPacketHeader->payload + saltLen + saltLen, AES_Get_Key(), AES128_KEY_LEN);
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f103 0212 	add.w	r2, r3, #18
 80089fc:	4b75      	ldr	r3, [pc, #468]	; (8008bd4 <TCP_Packet_Handle+0x2d0>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	18d4      	adds	r4, r2, r3
 8008a04:	f7fb ff22 	bl	800484c <AES_Get_Key>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2210      	movs	r2, #16
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f016 fe82 	bl	801f718 <memcpy>

        //caculate md5
        uint8_t *md5sum = md5hash(rsaPacketHeader->payload, saltLen + saltLen + AES128_KEY_LEN);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f103 0212 	add.w	r2, r3, #18
 8008a1a:	4b6e      	ldr	r3, [pc, #440]	; (8008bd4 <TCP_Packet_Handle+0x2d0>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	4619      	mov	r1, r3
 8008a24:	4610      	mov	r0, r2
 8008a26:	f7fd fb0f 	bl	8006048 <md5hash>
 8008a2a:	6078      	str	r0, [r7, #4]
        memcpy(rsaPacketHeader->md5, md5sum, MD5_LEN);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3302      	adds	r3, #2
 8008a30:	2210      	movs	r2, #16
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f016 fe6f 	bl	801f718 <memcpy>

        //next encrypt from md5
        if (RSA2048_Pubkey_Encrypt(packetTcpHeader->payload, RSA_MAX_MODULUS_LEN, rsaPacketHeader->md5, SIZE_OF_MD5 + saltLen + saltLen + AES128_KEY_LEN, rsaPacketHeader->md5) > 0)
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	f103 0012 	add.w	r0, r3, #18
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	1c99      	adds	r1, r3, #2
 8008a44:	4b63      	ldr	r3, [pc, #396]	; (8008bd4 <TCP_Packet_Handle+0x2d0>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f103 0210 	add.w	r2, r3, #16
 8008a4c:	4b61      	ldr	r3, [pc, #388]	; (8008bd4 <TCP_Packet_Handle+0x2d0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4413      	add	r3, r2
 8008a52:	f103 0210 	add.w	r2, r3, #16
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	3302      	adds	r3, #2
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	460a      	mov	r2, r1
 8008a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a64:	f7fd fd56 	bl	8006514 <RSA2048_Pubkey_Encrypt>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f340 808c 	ble.w	8008b88 <TCP_Packet_Handle+0x284>
        {
          rsaPacketHeader->len = RSA_BLOCK_LEN;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2200      	movs	r2, #0
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f042 0201 	orr.w	r2, r2, #1
 8008a7c:	705a      	strb	r2, [r3, #1]
          TCPConnectStatus = 1;
 8008a7e:	4b52      	ldr	r3, [pc, #328]	; (8008bc8 <TCP_Packet_Handle+0x2c4>)
 8008a80:	2201      	movs	r2, #1
 8008a82:	601a      	str	r2, [r3, #0]
          TCP_UDP_Send(1, RSA_Packet, RSA_PACKET_LEN);
 8008a84:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008a88:	4950      	ldr	r1, [pc, #320]	; (8008bcc <TCP_Packet_Handle+0x2c8>)
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	f7ff fed4 	bl	8008838 <TCP_UDP_Send>
          ISError = false;
 8008a90:	4b48      	ldr	r3, [pc, #288]	; (8008bb4 <TCP_Packet_Handle+0x2b0>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	701a      	strb	r2, [r3, #0]
      if (CheckMD5(packetTcpHeader))
 8008a96:	e077      	b.n	8008b88 <TCP_Packet_Handle+0x284>
        }
      }
    }
    else if (TCPConnectStatus == 1 && realPacketLen >= AES128_BLOCK_LEN && (realPacketLen % AES128_BLOCK_LEN) == 0)
 8008a98:	4b4b      	ldr	r3, [pc, #300]	; (8008bc8 <TCP_Packet_Handle+0x2c4>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d174      	bne.n	8008b8a <TCP_Packet_Handle+0x286>
 8008aa0:	4b47      	ldr	r3, [pc, #284]	; (8008bc0 <TCP_Packet_Handle+0x2bc>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b0f      	cmp	r3, #15
 8008aa6:	dd70      	ble.n	8008b8a <TCP_Packet_Handle+0x286>
 8008aa8:	4b45      	ldr	r3, [pc, #276]	; (8008bc0 <TCP_Packet_Handle+0x2bc>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 030f 	and.w	r3, r3, #15
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d16a      	bne.n	8008b8a <TCP_Packet_Handle+0x286>
    {
      if (CheckMD5(packetTcpHeader))
 8008ab4:	69b8      	ldr	r0, [r7, #24]
 8008ab6:	f000 fb5b 	bl	8009170 <CheckMD5>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d064      	beq.n	8008b8a <TCP_Packet_Handle+0x286>
      {
        if (AES_Decrypt_Packet(packetTcpHeader->payload, realPacketLen) == realPacketLen)
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	3312      	adds	r3, #18
 8008ac4:	4a3e      	ldr	r2, [pc, #248]	; (8008bc0 <TCP_Packet_Handle+0x2bc>)
 8008ac6:	6812      	ldr	r2, [r2, #0]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fc f95a 	bl	8004d84 <AES_Decrypt_Packet>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	4b3b      	ldr	r3, [pc, #236]	; (8008bc0 <TCP_Packet_Handle+0x2bc>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d157      	bne.n	8008b8a <TCP_Packet_Handle+0x286>
        {
          //check salt ACK
          if (CheckSaltACK(packetTcpHeader->payload, realPacketLen))
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	3312      	adds	r3, #18
 8008ade:	4a38      	ldr	r2, [pc, #224]	; (8008bc0 <TCP_Packet_Handle+0x2bc>)
 8008ae0:	6812      	ldr	r2, [r2, #0]
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 fbf3 	bl	80092d0 <CheckSaltACK>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d04c      	beq.n	8008b8a <TCP_Packet_Handle+0x286>
          {
            TCP_UDP_Notify(TCP_UDP_Flag.Success); //notify connect task success, then to open UDP connect
 8008af0:	4b3a      	ldr	r3, [pc, #232]	; (8008bdc <TCP_Packet_Handle+0x2d8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff fe85 	bl	8008804 <TCP_UDP_Notify>
            TCPConnectStatus = 2;
 8008afa:	4b33      	ldr	r3, [pc, #204]	; (8008bc8 <TCP_Packet_Handle+0x2c4>)
 8008afc:	2202      	movs	r2, #2
 8008afe:	601a      	str	r2, [r3, #0]
            IsTLSHanshaked = true;
 8008b00:	4b30      	ldr	r3, [pc, #192]	; (8008bc4 <TCP_Packet_Handle+0x2c0>)
 8008b02:	2201      	movs	r2, #1
 8008b04:	701a      	strb	r2, [r3, #0]
            //successful, delete timer osTimerStop, reset connectToHostCount, change Domain2 <-> Domain1 if neccessary
            osTimerStart(TCPTimerOnceID, TIMER_INTERVAL);
 8008b06:	4b36      	ldr	r3, [pc, #216]	; (8008be0 <TCP_Packet_Handle+0x2dc>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f242 7110 	movw	r1, #10000	; 0x2710
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 fa9e 	bl	800a050 <osTimerStart>
            ISError = false;
 8008b14:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <TCP_Packet_Handle+0x2b0>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
 8008b1a:	e036      	b.n	8008b8a <TCP_Packet_Handle+0x286>
      }
    }
  }
  else //handle TLS packet
  {
    ISError = false;
 8008b1c:	4b25      	ldr	r3, [pc, #148]	; (8008bb4 <TCP_Packet_Handle+0x2b0>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	701a      	strb	r2, [r3, #0]

    //debug
    int *order = (int*)(TcpBuff + 4);
 8008b22:	4b30      	ldr	r3, [pc, #192]	; (8008be4 <TCP_Packet_Handle+0x2e0>)
 8008b24:	617b      	str	r3, [r7, #20]
    int llen = packetTcpHeader->len + 4; // + 4B len
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	613b      	str	r3, [r7, #16]
    LOG_WRITE("mp3 len:%d\n", llen - 4);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	3b04      	subs	r3, #4
 8008b34:	4619      	mov	r1, r3
 8008b36:	482c      	ldr	r0, [pc, #176]	; (8008be8 <TCP_Packet_Handle+0x2e4>)
 8008b38:	f016 fed8 	bl	801f8ec <iprintf>
    // if(packetTcpHeader->len < 1000)
    // {
    //   LOG_WRITE("error tcp packet len:%d\n", packetTcpHeader->len);
    // }

    if(CheckMD5(packetTcpHeader))
 8008b3c:	69b8      	ldr	r0, [r7, #24]
 8008b3e:	f000 fb17 	bl	8009170 <CheckMD5>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d020      	beq.n	8008b8a <TCP_Packet_Handle+0x286>
    {
      //check payload has at least 16B (1 AES block)
      if(realPacketLen >= AES128_BLOCK_LEN)
 8008b48:	4b1d      	ldr	r3, [pc, #116]	; (8008bc0 <TCP_Packet_Handle+0x2bc>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b0f      	cmp	r3, #15
 8008b4e:	dd1c      	ble.n	8008b8a <TCP_Packet_Handle+0x286>
      {
        //decrype first 16B to check type of packet
        if(AES_Decrypt_Packet(packetTcpHeader->payload, AES128_BLOCK_LEN) > 0)
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	3312      	adds	r3, #18
 8008b54:	2110      	movs	r1, #16
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fc f914 	bl	8004d84 <AES_Decrypt_Packet>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	dd13      	ble.n	8008b8a <TCP_Packet_Handle+0x286>
        {
          uint8_t typeOfPacket = packetTcpHeader->payload[0];
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	7c9b      	ldrb	r3, [r3, #18]
 8008b66:	73fb      	strb	r3, [r7, #15]
          if(typeOfPacket == mp3PacketEnum && realPacketLen > MP3_PACKET_HEADER_LEN)
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d10d      	bne.n	8008b8a <TCP_Packet_Handle+0x286>
 8008b6e:	4b14      	ldr	r3, [pc, #80]	; (8008bc0 <TCP_Packet_Handle+0x2bc>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b28      	cmp	r3, #40	; 0x28
 8008b74:	dd09      	ble.n	8008b8a <TCP_Packet_Handle+0x286>
          {
        	  AudioPacketHandle(packetTcpHeader->payload, realPacketLen);
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	3312      	adds	r3, #18
 8008b7a:	4a11      	ldr	r2, [pc, #68]	; (8008bc0 <TCP_Packet_Handle+0x2bc>)
 8008b7c:	6812      	ldr	r2, [r2, #0]
 8008b7e:	4611      	mov	r1, r2
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff fe7d 	bl	8008880 <AudioPacketHandle>
 8008b86:	e000      	b.n	8008b8a <TCP_Packet_Handle+0x286>
      if (CheckMD5(packetTcpHeader))
 8008b88:	bf00      	nop
        }
      }
    }
  }
  
  if (ISError)
 8008b8a:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <TCP_Packet_Handle+0x2b0>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <TCP_Packet_Handle+0x2a4>
  {
    LOG_WRITE("TCP_Packet_Handle recv error\n");
 8008b92:	4816      	ldr	r0, [pc, #88]	; (8008bec <TCP_Packet_Handle+0x2e8>)
 8008b94:	f016 ff30 	bl	801f9f8 <puts>
    TCP_UDP_Notify(TCP_UDP_Flag.Error);
 8008b98:	4b10      	ldr	r3, [pc, #64]	; (8008bdc <TCP_Packet_Handle+0x2d8>)
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff fe31 	bl	8008804 <TCP_UDP_Notify>
    ISError = false;
 8008ba2:	4b04      	ldr	r3, [pc, #16]	; (8008bb4 <TCP_Packet_Handle+0x2b0>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	701a      	strb	r2, [r3, #0]
  }
}
 8008ba8:	bf00      	nop
 8008baa:	3724      	adds	r7, #36	; 0x24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd90      	pop	{r4, r7, pc}
 8008bb0:	0802181c 	.word	0x0802181c
 8008bb4:	2000060d 	.word	0x2000060d
 8008bb8:	2000d8a8 	.word	0x2000d8a8
 8008bbc:	20000620 	.word	0x20000620
 8008bc0:	20010210 	.word	0x20010210
 8008bc4:	2000060c 	.word	0x2000060c
 8008bc8:	20000608 	.word	0x20000608
 8008bcc:	2000ffc8 	.word	0x2000ffc8
 8008bd0:	2000ffc4 	.word	0x2000ffc4
 8008bd4:	200101d8 	.word	0x200101d8
 8008bd8:	20000004 	.word	0x20000004
 8008bdc:	2000ffb8 	.word	0x2000ffb8
 8008be0:	200056a8 	.word	0x200056a8
 8008be4:	2000d8ac 	.word	0x2000d8ac
 8008be8:	0802182c 	.word	0x0802182c
 8008bec:	08021838 	.word	0x08021838

08008bf0 <HexStringToByteArray>:

//convert hex string to byte array, auto override. return len of byte array if success, else return -1
uint8_t hexStringMap[255];
bool bHexStringMapFrist = true;
int HexStringToByteArray()
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
  //initialize
  if(bHexStringMapFrist)
 8008bf6:	4b3a      	ldr	r3, [pc, #232]	; (8008ce0 <HexStringToByteArray+0xf0>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d040      	beq.n	8008c80 <HexStringToByteArray+0x90>
  {
    bHexStringMapFrist = false;
 8008bfe:	4b38      	ldr	r3, [pc, #224]	; (8008ce0 <HexStringToByteArray+0xf0>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 255; i++)
 8008c04:	2300      	movs	r3, #0
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	e037      	b.n	8008c7a <HexStringToByteArray+0x8a>
    {
      if(i >= '0' && i <= '9')
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b2f      	cmp	r3, #47	; 0x2f
 8008c0e:	dd0c      	ble.n	8008c2a <HexStringToByteArray+0x3a>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b39      	cmp	r3, #57	; 0x39
 8008c14:	dc09      	bgt.n	8008c2a <HexStringToByteArray+0x3a>
      {
        hexStringMap[i] = i - '0';
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	3b30      	subs	r3, #48	; 0x30
 8008c1c:	b2d9      	uxtb	r1, r3
 8008c1e:	4a31      	ldr	r2, [pc, #196]	; (8008ce4 <HexStringToByteArray+0xf4>)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	460a      	mov	r2, r1
 8008c26:	701a      	strb	r2, [r3, #0]
 8008c28:	e024      	b.n	8008c74 <HexStringToByteArray+0x84>
      }
      else if(i >= 'A' && i <= 'F')
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2b40      	cmp	r3, #64	; 0x40
 8008c2e:	dd0c      	ble.n	8008c4a <HexStringToByteArray+0x5a>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b46      	cmp	r3, #70	; 0x46
 8008c34:	dc09      	bgt.n	8008c4a <HexStringToByteArray+0x5a>
      {
        hexStringMap[i] = i - 'A' + 10;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	3b37      	subs	r3, #55	; 0x37
 8008c3c:	b2d9      	uxtb	r1, r3
 8008c3e:	4a29      	ldr	r2, [pc, #164]	; (8008ce4 <HexStringToByteArray+0xf4>)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	460a      	mov	r2, r1
 8008c46:	701a      	strb	r2, [r3, #0]
 8008c48:	e014      	b.n	8008c74 <HexStringToByteArray+0x84>
      }
      else if(i >= 'a' && i <= 'f')
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2b60      	cmp	r3, #96	; 0x60
 8008c4e:	dd0c      	ble.n	8008c6a <HexStringToByteArray+0x7a>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b66      	cmp	r3, #102	; 0x66
 8008c54:	dc09      	bgt.n	8008c6a <HexStringToByteArray+0x7a>
      {
        hexStringMap[i] = i - 'a' + 10;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	3b57      	subs	r3, #87	; 0x57
 8008c5c:	b2d9      	uxtb	r1, r3
 8008c5e:	4a21      	ldr	r2, [pc, #132]	; (8008ce4 <HexStringToByteArray+0xf4>)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	460a      	mov	r2, r1
 8008c66:	701a      	strb	r2, [r3, #0]
 8008c68:	e004      	b.n	8008c74 <HexStringToByteArray+0x84>
      }
      else
      {
        hexStringMap[i] = 0;
 8008c6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ce4 <HexStringToByteArray+0xf4>)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	2200      	movs	r2, #0
 8008c72:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 255; i++)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3301      	adds	r3, #1
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2bfe      	cmp	r3, #254	; 0xfe
 8008c7e:	ddc4      	ble.n	8008c0a <HexStringToByteArray+0x1a>
      }
    }
  }

  int i, j; //i for hex string, j for byte array
  for(i = 0, j = 0; i < TcpBuffOffset; i+=2, j++)
 8008c80:	2300      	movs	r3, #0
 8008c82:	60bb      	str	r3, [r7, #8]
 8008c84:	2300      	movs	r3, #0
 8008c86:	607b      	str	r3, [r7, #4]
 8008c88:	e01e      	b.n	8008cc8 <HexStringToByteArray+0xd8>
  {
    uint8_t tmpByte = (hexStringMap[TcpBuff[i]] << 4) | hexStringMap[TcpBuff[i+1]];
 8008c8a:	4a17      	ldr	r2, [pc, #92]	; (8008ce8 <HexStringToByteArray+0xf8>)
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4413      	add	r3, r2
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	4b13      	ldr	r3, [pc, #76]	; (8008ce4 <HexStringToByteArray+0xf4>)
 8008c96:	5c9b      	ldrb	r3, [r3, r2]
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	b25a      	sxtb	r2, r3
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	4911      	ldr	r1, [pc, #68]	; (8008ce8 <HexStringToByteArray+0xf8>)
 8008ca2:	5ccb      	ldrb	r3, [r1, r3]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <HexStringToByteArray+0xf4>)
 8008ca8:	5c5b      	ldrb	r3, [r3, r1]
 8008caa:	b25b      	sxtb	r3, r3
 8008cac:	4313      	orrs	r3, r2
 8008cae:	b25b      	sxtb	r3, r3
 8008cb0:	70fb      	strb	r3, [r7, #3]
    TcpBuff[j] = tmpByte;
 8008cb2:	4a0d      	ldr	r2, [pc, #52]	; (8008ce8 <HexStringToByteArray+0xf8>)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	78fa      	ldrb	r2, [r7, #3]
 8008cba:	701a      	strb	r2, [r3, #0]
  for(i = 0, j = 0; i < TcpBuffOffset; i+=2, j++)
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	3302      	adds	r3, #2
 8008cc0:	60bb      	str	r3, [r7, #8]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	607b      	str	r3, [r7, #4]
 8008cc8:	4b08      	ldr	r3, [pc, #32]	; (8008cec <HexStringToByteArray+0xfc>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	dbdb      	blt.n	8008c8a <HexStringToByteArray+0x9a>
  }
  return j;
 8008cd2:	687b      	ldr	r3, [r7, #4]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	20000334 	.word	0x20000334
 8008ce4:	200100d0 	.word	0x200100d0
 8008ce8:	2000d8a8 	.word	0x2000d8a8
 8008cec:	20000610 	.word	0x20000610

08008cf0 <TCP_Packet_Analyze>:

//packet string hex
void TCP_Packet_Analyze(uint8_t *recvData, int length)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  int upper = length;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	613b      	str	r3, [r7, #16]
  int offset = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61fb      	str	r3, [r7, #28]
  while (length > 0)
 8008d02:	e078      	b.n	8008df6 <TCP_Packet_Analyze+0x106>
  {
    int eofPackIndx = -1;
 8008d04:	f04f 33ff 	mov.w	r3, #4294967295
 8008d08:	61bb      	str	r3, [r7, #24]

    for (int i = offset; i < upper; i++)
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	617b      	str	r3, [r7, #20]
 8008d0e:	e00b      	b.n	8008d28 <TCP_Packet_Analyze+0x38>
    {
      if (recvData[i] == '#')
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	4413      	add	r3, r2
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b23      	cmp	r3, #35	; 0x23
 8008d1a:	d102      	bne.n	8008d22 <TCP_Packet_Analyze+0x32>
      {
        eofPackIndx = i;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	61bb      	str	r3, [r7, #24]
        break;
 8008d20:	e006      	b.n	8008d30 <TCP_Packet_Analyze+0x40>
    for (int i = offset; i < upper; i++)
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	3301      	adds	r3, #1
 8008d26:	617b      	str	r3, [r7, #20]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	dbef      	blt.n	8008d10 <TCP_Packet_Analyze+0x20>
      }
    }
    if (eofPackIndx == -1) //not find "#"
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d36:	d11c      	bne.n	8008d72 <TCP_Packet_Analyze+0x82>
    {
      if (TcpBuffOffset + length < TCP_BUFF_LEN)
 8008d38:	4b33      	ldr	r3, [pc, #204]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f242 720f 	movw	r2, #9999	; 0x270f
 8008d44:	4293      	cmp	r3, r2
 8008d46:	dc56      	bgt.n	8008df6 <TCP_Packet_Analyze+0x106>
      {
        // System.Buffer.BlockCopy(recvData, offset, Tcpbuff, TcpbuffOffset, length);
        memcpy(TcpBuff + TcpBuffOffset, recvData + offset, length);
 8008d48:	4b2f      	ldr	r3, [pc, #188]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4b2f      	ldr	r3, [pc, #188]	; (8008e0c <TCP_Packet_Analyze+0x11c>)
 8008d50:	18d0      	adds	r0, r2, r3
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	4413      	add	r3, r2
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	f016 fcdc 	bl	801f718 <memcpy>
        TcpBuffOffset += length;
 8008d60:	4b29      	ldr	r3, [pc, #164]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	4413      	add	r3, r2
 8008d68:	4a27      	ldr	r2, [pc, #156]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008d6a:	6013      	str	r3, [r2, #0]
        length = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	e041      	b.n	8008df6 <TCP_Packet_Analyze+0x106>
      }
    }
    else
    {
      int lenTmp = eofPackIndx - offset; // 0 1 2 3 4
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	60fb      	str	r3, [r7, #12]
      if (lenTmp > 0 && TcpBuffOffset + lenTmp < TCP_BUFF_LEN)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dd19      	ble.n	8008db4 <TCP_Packet_Analyze+0xc4>
 8008d80:	4b21      	ldr	r3, [pc, #132]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	f242 720f 	movw	r2, #9999	; 0x270f
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	dc11      	bgt.n	8008db4 <TCP_Packet_Analyze+0xc4>
      {
        // System.Buffer.BlockCopy(recvData, offset, Tcpbuff, TcpbuffOffset, lenTmp);
        memcpy(TcpBuff + TcpBuffOffset, recvData + offset, lenTmp);
 8008d90:	4b1d      	ldr	r3, [pc, #116]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	461a      	mov	r2, r3
 8008d96:	4b1d      	ldr	r3, [pc, #116]	; (8008e0c <TCP_Packet_Analyze+0x11c>)
 8008d98:	18d0      	adds	r0, r2, r3
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	4413      	add	r3, r2
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	4619      	mov	r1, r3
 8008da4:	f016 fcb8 	bl	801f718 <memcpy>
        TcpBuffOffset += lenTmp;
 8008da8:	4b17      	ldr	r3, [pc, #92]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4413      	add	r3, r2
 8008db0:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008db2:	6013      	str	r3, [r2, #0]
      }
      offset = eofPackIndx + 1; //+1 for "#"
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	3301      	adds	r3, #1
 8008db8:	61fb      	str	r3, [r7, #28]
      length -= (lenTmp + 1);     // +1 for "#"
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	603b      	str	r3, [r7, #0]

      //handle tcp packet
      if (TcpBuffOffset % 2 == 0) //byte to hex string -> double length of packet
 8008dc4:	4b10      	ldr	r3, [pc, #64]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10f      	bne.n	8008df0 <TCP_Packet_Analyze+0x100>
      {
        //TcpbuffOffset ~ length of Tcp packet
        //convert hex string to byte array
        TcpBuffOffset = HexStringToByteArray();
 8008dd0:	f7ff ff0e 	bl	8008bf0 <HexStringToByteArray>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4a0c      	ldr	r2, [pc, #48]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008dd8:	6013      	str	r3, [r2, #0]

        //check length field
        int lenOfPacket = (int)(*(uint16_t *)TcpBuff);
 8008dda:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <TCP_Packet_Analyze+0x11c>)
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	60bb      	str	r3, [r7, #8]
        if (lenOfPacket == TcpBuffOffset - 2) //2 byte of length field
 8008de0:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3b02      	subs	r3, #2
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d101      	bne.n	8008df0 <TCP_Packet_Analyze+0x100>
        {
//          curPacketSize = lenOfPacket;s
          TCP_Packet_Handle();
 8008dec:	f7ff fd8a 	bl	8008904 <TCP_Packet_Handle>
        }
      }
      TcpBuffOffset = 0;
 8008df0:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <TCP_Packet_Analyze+0x118>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
  while (length > 0)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dc83      	bgt.n	8008d04 <TCP_Packet_Analyze+0x14>
    }
  }
}
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20000610 	.word	0x20000610
 8008e0c:	2000d8a8 	.word	0x2000d8a8

08008e10 <UDP_Packet_Analyze>:

uint32_t rtt;
int64_t ntpTime = 0, ntpStart; //ntpstart = timer of stm32 when receive ntpTime
void UDP_Packet_Analyze(uint8_t *data, int len)
{
 8008e10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]
  LOG_WRITE("udpPacketAnalyze\n");
 8008e1c:	482b      	ldr	r0, [pc, #172]	; (8008ecc <UDP_Packet_Analyze+0xbc>)
 8008e1e:	f016 fdeb 	bl	801f9f8 <puts>
  //ntp packet
  if (len == 12)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b0c      	cmp	r3, #12
 8008e26:	d14b      	bne.n	8008ec0 <UDP_Packet_Analyze+0xb0>
  {
    NTPStruct2 *ntpPack = (NTPStruct2 *)data;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	60fb      	str	r3, [r7, #12]
    rtt = (TIM_NTP->CNT - ntpPack->clientTime) >> 1; // >> 1 ~ / 2 (since TIM_NTP tick 0.5ms)
 8008e2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	085b      	lsrs	r3, r3, #1
 8008e3a:	4a25      	ldr	r2, [pc, #148]	; (8008ed0 <UDP_Packet_Analyze+0xc0>)
 8008e3c:	6013      	str	r3, [r2, #0]

    //the first time, get as soon as posible
    if (ntpTime == 0)
 8008e3e:	4b25      	ldr	r3, [pc, #148]	; (8008ed4 <UDP_Packet_Analyze+0xc4>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	d119      	bne.n	8008e7c <UDP_Packet_Analyze+0x6c>
    {
      ntpTime = ntpPack->serverTime + rtt / 2;
 8008e48:	68f9      	ldr	r1, [r7, #12]
 8008e4a:	680a      	ldr	r2, [r1, #0]
 8008e4c:	684b      	ldr	r3, [r1, #4]
 8008e4e:	4920      	ldr	r1, [pc, #128]	; (8008ed0 <UDP_Packet_Analyze+0xc0>)
 8008e50:	6809      	ldr	r1, [r1, #0]
 8008e52:	0849      	lsrs	r1, r1, #1
 8008e54:	4608      	mov	r0, r1
 8008e56:	f04f 0100 	mov.w	r1, #0
 8008e5a:	eb12 0800 	adds.w	r8, r2, r0
 8008e5e:	eb43 0901 	adc.w	r9, r3, r1
 8008e62:	4b1c      	ldr	r3, [pc, #112]	; (8008ed4 <UDP_Packet_Analyze+0xc4>)
 8008e64:	e9c3 8900 	strd	r8, r9, [r3]
      ntpStart = TIM_NTP->CNT >> 1; // /2 since TIMER tick 0.5ms
 8008e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6e:	085b      	lsrs	r3, r3, #1
 8008e70:	461a      	mov	r2, r3
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	4918      	ldr	r1, [pc, #96]	; (8008ed8 <UDP_Packet_Analyze+0xc8>)
 8008e78:	e9c1 2300 	strd	r2, r3, [r1]
    }

    //get until enough percious
    if (rtt < RTT_NTP_MAX)
 8008e7c:	4b14      	ldr	r3, [pc, #80]	; (8008ed0 <UDP_Packet_Analyze+0xc0>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b63      	cmp	r3, #99	; 0x63
 8008e82:	d81d      	bhi.n	8008ec0 <UDP_Packet_Analyze+0xb0>
    {
      udpTimerCount++;
 8008e84:	4b15      	ldr	r3, [pc, #84]	; (8008edc <UDP_Packet_Analyze+0xcc>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	4a14      	ldr	r2, [pc, #80]	; (8008edc <UDP_Packet_Analyze+0xcc>)
 8008e8c:	6013      	str	r3, [r2, #0]
      ntpTime = ntpPack->serverTime + rtt / 2;
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	680a      	ldr	r2, [r1, #0]
 8008e92:	684b      	ldr	r3, [r1, #4]
 8008e94:	490e      	ldr	r1, [pc, #56]	; (8008ed0 <UDP_Packet_Analyze+0xc0>)
 8008e96:	6809      	ldr	r1, [r1, #0]
 8008e98:	0849      	lsrs	r1, r1, #1
 8008e9a:	4608      	mov	r0, r1
 8008e9c:	f04f 0100 	mov.w	r1, #0
 8008ea0:	1814      	adds	r4, r2, r0
 8008ea2:	eb43 0501 	adc.w	r5, r3, r1
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <UDP_Packet_Analyze+0xc4>)
 8008ea8:	e9c3 4500 	strd	r4, r5, [r3]
      ntpStart = TIM_NTP->CNT >> 1; // >> 1 ~ /2 since TIMER tick 0.5ms
 8008eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f04f 0300 	mov.w	r3, #0
 8008eba:	4907      	ldr	r1, [pc, #28]	; (8008ed8 <UDP_Packet_Analyze+0xc8>)
 8008ebc:	e9c1 2300 	strd	r2, r3, [r1]
    }
  }
}
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008eca:	bf00      	nop
 8008ecc:	08021858 	.word	0x08021858
 8008ed0:	200101d4 	.word	0x200101d4
 8008ed4:	20000628 	.word	0x20000628
 8008ed8:	200101e8 	.word	0x200101e8
 8008edc:	2000061c 	.word	0x2000061c

08008ee0 <TCP_UDP_Stack_Init>:
//   }
// }

//init after TCP three-way handshake, but before RSA-AES handshake
void TCP_UDP_Stack_Init(osEventFlagsId_t eventID, int successFlag, int errorFlag, bool IsETH)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	70fb      	strb	r3, [r7, #3]
  LOG_WRITE("tcpUdpInit\n");
 8008eee:	482e      	ldr	r0, [pc, #184]	; (8008fa8 <TCP_UDP_Stack_Init+0xc8>)
 8008ef0:	f016 fd82 	bl	801f9f8 <puts>
  //only one time after reboot
  if (salt == NULL)
 8008ef4:	4b2d      	ldr	r3, [pc, #180]	; (8008fac <TCP_UDP_Stack_Init+0xcc>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d118      	bne.n	8008f2e <TCP_UDP_Stack_Init+0x4e>
  {
    saltLen = strlen(DeviceID);
 8008efc:	4b2c      	ldr	r3, [pc, #176]	; (8008fb0 <TCP_UDP_Stack_Init+0xd0>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7f7 f965 	bl	80001d0 <strlen>
 8008f06:	4603      	mov	r3, r0
 8008f08:	461a      	mov	r2, r3
 8008f0a:	4b2a      	ldr	r3, [pc, #168]	; (8008fb4 <TCP_UDP_Stack_Init+0xd4>)
 8008f0c:	601a      	str	r2, [r3, #0]
    if (saltLen > DEVICE_LEN_MAX)
 8008f0e:	4b29      	ldr	r3, [pc, #164]	; (8008fb4 <TCP_UDP_Stack_Init+0xd4>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b32      	cmp	r3, #50	; 0x32
 8008f14:	dd02      	ble.n	8008f1c <TCP_UDP_Stack_Init+0x3c>
      saltLen = DEVICE_LEN_MAX;
 8008f16:	4b27      	ldr	r3, [pc, #156]	; (8008fb4 <TCP_UDP_Stack_Init+0xd4>)
 8008f18:	2232      	movs	r2, #50	; 0x32
 8008f1a:	601a      	str	r2, [r3, #0]
    salt = (uint8_t *)malloc(saltLen);
 8008f1c:	4b25      	ldr	r3, [pc, #148]	; (8008fb4 <TCP_UDP_Stack_Init+0xd4>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f016 fbdb 	bl	801f6dc <malloc>
 8008f26:	4603      	mov	r3, r0
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4b20      	ldr	r3, [pc, #128]	; (8008fac <TCP_UDP_Stack_Init+0xcc>)
 8008f2c:	601a      	str	r2, [r3, #0]
  }

  TCPConnectStatus = 0;
 8008f2e:	4b22      	ldr	r3, [pc, #136]	; (8008fb8 <TCP_UDP_Stack_Init+0xd8>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
  IsTLSHanshaked = false;
 8008f34:	4b21      	ldr	r3, [pc, #132]	; (8008fbc <TCP_UDP_Stack_Init+0xdc>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
  ISError = false;
 8008f3a:	4b21      	ldr	r3, [pc, #132]	; (8008fc0 <TCP_UDP_Stack_Init+0xe0>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	701a      	strb	r2, [r3, #0]

  TcpBuffOffset = 0;
 8008f40:	4b20      	ldr	r3, [pc, #128]	; (8008fc4 <TCP_UDP_Stack_Init+0xe4>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
  bIsPending = false;
 8008f46:	4b20      	ldr	r3, [pc, #128]	; (8008fc8 <TCP_UDP_Stack_Init+0xe8>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	701a      	strb	r2, [r3, #0]
  remainData = 0;
 8008f4c:	4b1f      	ldr	r3, [pc, #124]	; (8008fcc <TCP_UDP_Stack_Init+0xec>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	601a      	str	r2, [r3, #0]

  udpTimerCount = 0;
 8008f52:	4b1f      	ldr	r3, [pc, #124]	; (8008fd0 <TCP_UDP_Stack_Init+0xf0>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]
  tcpTimerCount = 1;
 8008f58:	4b1e      	ldr	r3, [pc, #120]	; (8008fd4 <TCP_UDP_Stack_Init+0xf4>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]
  ntpTime = 0;
 8008f5e:	491e      	ldr	r1, [pc, #120]	; (8008fd8 <TCP_UDP_Stack_Init+0xf8>)
 8008f60:	f04f 0200 	mov.w	r2, #0
 8008f64:	f04f 0300 	mov.w	r3, #0
 8008f68:	e9c1 2300 	strd	r2, r3, [r1]

  if (IsETH)
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <TCP_UDP_Stack_Init+0x9a>
  {
    connectType = connectTypeETH;
 8008f72:	4b1a      	ldr	r3, [pc, #104]	; (8008fdc <TCP_UDP_Stack_Init+0xfc>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	701a      	strb	r2, [r3, #0]
 8008f78:	e002      	b.n	8008f80 <TCP_UDP_Stack_Init+0xa0>
  }
  else
  {
    connectType = connectTypeSim7600;
 8008f7a:	4b18      	ldr	r3, [pc, #96]	; (8008fdc <TCP_UDP_Stack_Init+0xfc>)
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	701a      	strb	r2, [r3, #0]
  }

  TCP_UDP_StackEventID = eventID;
 8008f80:	4a17      	ldr	r2, [pc, #92]	; (8008fe0 <TCP_UDP_Stack_Init+0x100>)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6013      	str	r3, [r2, #0]
  TCP_UDP_Flag.Success = successFlag; //successful TLS handshake
 8008f86:	4a17      	ldr	r2, [pc, #92]	; (8008fe4 <TCP_UDP_Stack_Init+0x104>)
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	6013      	str	r3, [r2, #0]
  TCP_UDP_Flag.Error = errorFlag;
 8008f8c:	4a15      	ldr	r2, [pc, #84]	; (8008fe4 <TCP_UDP_Stack_Init+0x104>)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6093      	str	r3, [r2, #8]

  //send request rsa-pubkey
  //  TCP_UDP_Send(1, Keepalive_Packet, Keepalive_Packet_LEN);

  //init timer time-out tcp connect (max time before recv "ACK"))
  osTimerStart(TCPTimerOnceID, TLS_HANDSHAKE_TIMEOUT);
 8008f92:	4b15      	ldr	r3, [pc, #84]	; (8008fe8 <TCP_UDP_Stack_Init+0x108>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f644 6120 	movw	r1, #20000	; 0x4e20
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 f858 	bl	800a050 <osTimerStart>
}
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	0802186c 	.word	0x0802186c
 8008fac:	2000ffc4 	.word	0x2000ffc4
 8008fb0:	20000004 	.word	0x20000004
 8008fb4:	200101d8 	.word	0x200101d8
 8008fb8:	20000608 	.word	0x20000608
 8008fbc:	2000060c 	.word	0x2000060c
 8008fc0:	2000060d 	.word	0x2000060d
 8008fc4:	20000610 	.word	0x20000610
 8008fc8:	20000614 	.word	0x20000614
 8008fcc:	20000618 	.word	0x20000618
 8008fd0:	2000061c 	.word	0x2000061c
 8008fd4:	20000330 	.word	0x20000330
 8008fd8:	20000628 	.word	0x20000628
 8008fdc:	200101dc 	.word	0x200101dc
 8008fe0:	200101e0 	.word	0x200101e0
 8008fe4:	2000ffb8 	.word	0x2000ffb8
 8008fe8:	200056a8 	.word	0x200056a8

08008fec <TCP_UDP_Stack_Release>:

//stop timer before re-connect
void TCP_UDP_Stack_Release()
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
  LOG_WRITE("tcpUdpRelease\n");
 8008ff0:	4806      	ldr	r0, [pc, #24]	; (800900c <TCP_UDP_Stack_Release+0x20>)
 8008ff2:	f016 fd01 	bl	801f9f8 <puts>
  osTimerStop(TCPTimerOnceID);
 8008ff6:	4b06      	ldr	r3, [pc, #24]	; (8009010 <TCP_UDP_Stack_Release+0x24>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f001 f856 	bl	800a0ac <osTimerStop>
  IsTLSHanshaked = false;
 8009000:	4b04      	ldr	r3, [pc, #16]	; (8009014 <TCP_UDP_Stack_Release+0x28>)
 8009002:	2200      	movs	r2, #0
 8009004:	701a      	strb	r2, [r3, #0]
}
 8009006:	bf00      	nop
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	08021878 	.word	0x08021878
 8009010:	200056a8 	.word	0x200056a8
 8009014:	2000060c 	.word	0x2000060c

08009018 <TCP_Timer_Callback>:

// osTimerStop(TCPTimerOnceID);
//time-out -> recconnect TCP/UDP
void TCP_Timer_Callback(void *argument)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  LOG_WRITE("tcpTimerCallb\n");
 8009020:	4840      	ldr	r0, [pc, #256]	; (8009124 <TCP_Timer_Callback+0x10c>)
 8009022:	f016 fce9 	bl	801f9f8 <puts>
  (void)argument;
  if (!IsTLSHanshaked)
 8009026:	4b40      	ldr	r3, [pc, #256]	; (8009128 <TCP_Timer_Callback+0x110>)
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	f083 0301 	eor.w	r3, r3, #1
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	d005      	beq.n	8009040 <TCP_Timer_Callback+0x28>
  {
    TCP_UDP_Notify(TCP_UDP_Flag.Error);
 8009034:	4b3d      	ldr	r3, [pc, #244]	; (800912c <TCP_Timer_Callback+0x114>)
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff fbe3 	bl	8008804 <TCP_UDP_Notify>
    return;
 800903e:	e06d      	b.n	800911c <TCP_Timer_Callback+0x104>
  }

  if (tcpTimerCount % SEND_STAUS_INTERVAL == 0)
 8009040:	4b3b      	ldr	r3, [pc, #236]	; (8009130 <TCP_Timer_Callback+0x118>)
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	4b3b      	ldr	r3, [pc, #236]	; (8009134 <TCP_Timer_Callback+0x11c>)
 8009046:	fb83 1302 	smull	r1, r3, r3, r2
 800904a:	4413      	add	r3, r2
 800904c:	1159      	asrs	r1, r3, #5
 800904e:	17d3      	asrs	r3, r2, #31
 8009050:	1ac9      	subs	r1, r1, r3
 8009052:	460b      	mov	r3, r1
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	1a5b      	subs	r3, r3, r1
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	1ad1      	subs	r1, r2, r3
 800905c:	2900      	cmp	r1, #0
 800905e:	d113      	bne.n	8009088 <TCP_Timer_Callback+0x70>
  {
    int diffStatus = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	60fb      	str	r3, [r7, #12]
    memcpy(Status_Packet + 2, (uint8_t *)(&diffStatus), 4);
 8009064:	4a34      	ldr	r2, [pc, #208]	; (8009138 <TCP_Timer_Callback+0x120>)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6013      	str	r3, [r2, #0]
    if (TCP_UDP_Send(1, Status_Packet, Status_Packet_LEN))
 800906a:	2306      	movs	r3, #6
 800906c:	461a      	mov	r2, r3
 800906e:	4933      	ldr	r1, [pc, #204]	; (800913c <TCP_Timer_Callback+0x124>)
 8009070:	2001      	movs	r0, #1
 8009072:	f7ff fbe1 	bl	8008838 <TCP_UDP_Send>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d026      	beq.n	80090ca <TCP_Timer_Callback+0xb2>
    {
      tcpTimerCount++;
 800907c:	4b2c      	ldr	r3, [pc, #176]	; (8009130 <TCP_Timer_Callback+0x118>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3301      	adds	r3, #1
 8009082:	4a2b      	ldr	r2, [pc, #172]	; (8009130 <TCP_Timer_Callback+0x118>)
 8009084:	6013      	str	r3, [r2, #0]
 8009086:	e020      	b.n	80090ca <TCP_Timer_Callback+0xb2>
    }
  }
  else if (tcpTimerCount % KEEP_ALIVE_INTERVAL == 0)
 8009088:	4b29      	ldr	r3, [pc, #164]	; (8009130 <TCP_Timer_Callback+0x118>)
 800908a:	6819      	ldr	r1, [r3, #0]
 800908c:	4b2c      	ldr	r3, [pc, #176]	; (8009140 <TCP_Timer_Callback+0x128>)
 800908e:	fb83 3201 	smull	r3, r2, r3, r1
 8009092:	17cb      	asrs	r3, r1, #31
 8009094:	1ad2      	subs	r2, r2, r3
 8009096:	4613      	mov	r3, r2
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	4413      	add	r3, r2
 800909c:	1aca      	subs	r2, r1, r3
 800909e:	2a00      	cmp	r2, #0
 80090a0:	d10e      	bne.n	80090c0 <TCP_Timer_Callback+0xa8>
  {
    if (TCP_UDP_Send(1, Keepalive_Packet, Keepalive_Packet_LEN))
 80090a2:	2303      	movs	r3, #3
 80090a4:	461a      	mov	r2, r3
 80090a6:	4927      	ldr	r1, [pc, #156]	; (8009144 <TCP_Timer_Callback+0x12c>)
 80090a8:	2001      	movs	r0, #1
 80090aa:	f7ff fbc5 	bl	8008838 <TCP_UDP_Send>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00a      	beq.n	80090ca <TCP_Timer_Callback+0xb2>
    {
      tcpTimerCount++;
 80090b4:	4b1e      	ldr	r3, [pc, #120]	; (8009130 <TCP_Timer_Callback+0x118>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3301      	adds	r3, #1
 80090ba:	4a1d      	ldr	r2, [pc, #116]	; (8009130 <TCP_Timer_Callback+0x118>)
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	e004      	b.n	80090ca <TCP_Timer_Callback+0xb2>
    }
  }
  else
    tcpTimerCount++;
 80090c0:	4b1b      	ldr	r3, [pc, #108]	; (8009130 <TCP_Timer_Callback+0x118>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3301      	adds	r3, #1
 80090c6:	4a1a      	ldr	r2, [pc, #104]	; (8009130 <TCP_Timer_Callback+0x118>)
 80090c8:	6013      	str	r3, [r2, #0]

  if (udpTimerCount % NTP_INTERVAL == 0)
 80090ca:	4b1f      	ldr	r3, [pc, #124]	; (8009148 <TCP_Timer_Callback+0x130>)
 80090cc:	6819      	ldr	r1, [r3, #0]
 80090ce:	4b1f      	ldr	r3, [pc, #124]	; (800914c <TCP_Timer_Callback+0x134>)
 80090d0:	fb83 2301 	smull	r2, r3, r3, r1
 80090d4:	115a      	asrs	r2, r3, #5
 80090d6:	17cb      	asrs	r3, r1, #31
 80090d8:	1ad2      	subs	r2, r2, r3
 80090da:	4613      	mov	r3, r2
 80090dc:	011b      	lsls	r3, r3, #4
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	1aca      	subs	r2, r1, r3
 80090e6:	2a00      	cmp	r2, #0
 80090e8:	d10c      	bne.n	8009104 <TCP_Timer_Callback+0xec>
    // memcpy(NTP_Packet, md5Sum, MD5_LEN);
    // //encrypt md5 sum
    // AES_Encrypt_Packet_Key(NTP_Packet, 16, (uint8_t*)ntpAESkey);

    // TCP_UDP_Send(2, NTP_Packet, NTP_PACKET_LEN);
    uint32_t curT = TIM_NTP->CNT;
 80090ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f0:	60bb      	str	r3, [r7, #8]
 80090f2:	68bb      	ldr	r3, [r7, #8]
    memcpy(NTP_Packet, (uint8_t *)(&curT), 4);
 80090f4:	4a16      	ldr	r2, [pc, #88]	; (8009150 <TCP_Timer_Callback+0x138>)
 80090f6:	6013      	str	r3, [r2, #0]
    TCP_UDP_Send(2, NTP_Packet, 4);
 80090f8:	2204      	movs	r2, #4
 80090fa:	4915      	ldr	r1, [pc, #84]	; (8009150 <TCP_Timer_Callback+0x138>)
 80090fc:	2002      	movs	r0, #2
 80090fe:	f7ff fb9b 	bl	8008838 <TCP_UDP_Send>
 8009102:	e004      	b.n	800910e <TCP_Timer_Callback+0xf6>
  }
  else
  {
    udpTimerCount++;
 8009104:	4b10      	ldr	r3, [pc, #64]	; (8009148 <TCP_Timer_Callback+0x130>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3301      	adds	r3, #1
 800910a:	4a0f      	ldr	r2, [pc, #60]	; (8009148 <TCP_Timer_Callback+0x130>)
 800910c:	6013      	str	r3, [r2, #0]
  }
  osTimerStart(TCPTimerOnceID, TIMER_INTERVAL);
 800910e:	4b11      	ldr	r3, [pc, #68]	; (8009154 <TCP_Timer_Callback+0x13c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f242 7110 	movw	r1, #10000	; 0x2710
 8009116:	4618      	mov	r0, r3
 8009118:	f000 ff9a 	bl	800a050 <osTimerStart>
}
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	08021888 	.word	0x08021888
 8009128:	2000060c 	.word	0x2000060c
 800912c:	2000ffb8 	.word	0x2000ffb8
 8009130:	20000330 	.word	0x20000330
 8009134:	88888889 	.word	0x88888889
 8009138:	2000032a 	.word	0x2000032a
 800913c:	20000328 	.word	0x20000328
 8009140:	55555556 	.word	0x55555556
 8009144:	20000324 	.word	0x20000324
 8009148:	2000061c 	.word	0x2000061c
 800914c:	76b981db 	.word	0x76b981db
 8009150:	200101f0 	.word	0x200101f0
 8009154:	200056a8 	.word	0x200056a8

08009158 <TCP_Request>:

//request rsa pub key
void TCP_Request()
{
 8009158:	b580      	push	{r7, lr}
 800915a:	af00      	add	r7, sp, #0
  TCP_UDP_Send(1, Keepalive_Packet, Keepalive_Packet_LEN);
 800915c:	2303      	movs	r3, #3
 800915e:	461a      	mov	r2, r3
 8009160:	4902      	ldr	r1, [pc, #8]	; (800916c <TCP_Request+0x14>)
 8009162:	2001      	movs	r0, #1
 8009164:	f7ff fb68 	bl	8008838 <TCP_UDP_Send>
}
 8009168:	bf00      	nop
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20000324 	.word	0x20000324

08009170 <CheckMD5>:

bool Is_TCP_LTSHanshake_Connected() { return IsTLSHanshaked; }

//with pubkey packet (first packet), not necessary to decrypt md5
bool CheckMD5(PacketTCPStruct *packet)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  LOG_WRITE("chkMD5\n");
 8009178:	481b      	ldr	r0, [pc, #108]	; (80091e8 <CheckMD5+0x78>)
 800917a:	f016 fc3d 	bl	801f9f8 <puts>
  if (TCPConnectStatus != 0) // >=1
 800917e:	4b1b      	ldr	r3, [pc, #108]	; (80091ec <CheckMD5+0x7c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00c      	beq.n	80091a0 <CheckMD5+0x30>
  {
    int res = AES_Decrypt_Packet(packet->md5, SIZE_OF_MD5);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	3302      	adds	r3, #2
 800918a:	2110      	movs	r1, #16
 800918c:	4618      	mov	r0, r3
 800918e:	f7fb fdf9 	bl	8004d84 <AES_Decrypt_Packet>
 8009192:	6138      	str	r0, [r7, #16]
    if (res == -1)
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919a:	d101      	bne.n	80091a0 <CheckMD5+0x30>
      return false;
 800919c:	2300      	movs	r3, #0
 800919e:	e01f      	b.n	80091e0 <CheckMD5+0x70>
  }
  uint8_t *md5Sum = md5hash(packet->payload, realPacketLen);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3312      	adds	r3, #18
 80091a4:	4a12      	ldr	r2, [pc, #72]	; (80091f0 <CheckMD5+0x80>)
 80091a6:	6812      	ldr	r2, [r2, #0]
 80091a8:	4611      	mov	r1, r2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fc ff4c 	bl	8006048 <md5hash>
 80091b0:	60f8      	str	r0, [r7, #12]
  int i;
  for (i = 0; i < SIZE_OF_MD5; i++)
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]
 80091b6:	e00f      	b.n	80091d8 <CheckMD5+0x68>
  {
    if (packet->md5[i] != md5Sum[i])
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	4413      	add	r3, r2
 80091be:	3302      	adds	r3, #2
 80091c0:	781a      	ldrb	r2, [r3, #0]
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	68f9      	ldr	r1, [r7, #12]
 80091c6:	440b      	add	r3, r1
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d001      	beq.n	80091d2 <CheckMD5+0x62>
      return false;
 80091ce:	2300      	movs	r3, #0
 80091d0:	e006      	b.n	80091e0 <CheckMD5+0x70>
  for (i = 0; i < SIZE_OF_MD5; i++)
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	3301      	adds	r3, #1
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	2b0f      	cmp	r3, #15
 80091dc:	ddec      	ble.n	80091b8 <CheckMD5+0x48>
  }
  return true;
 80091de:	2301      	movs	r3, #1
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	08021898 	.word	0x08021898
 80091ec:	20000608 	.word	0x20000608
 80091f0:	20010210 	.word	0x20010210

080091f4 <ConvertTextWithSalt>:

void ConvertTextWithSalt(uint8_t *data, int offset, int len, enum SaltEnum saltType)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	70fb      	strb	r3, [r7, #3]
  LOG_WRITE("convertTextSalt\n");
 8009202:	4830      	ldr	r0, [pc, #192]	; (80092c4 <ConvertTextWithSalt+0xd0>)
 8009204:	f016 fbf8 	bl	801f9f8 <puts>
  if (salt == NULL)
 8009208:	4b2f      	ldr	r3, [pc, #188]	; (80092c8 <ConvertTextWithSalt+0xd4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d055      	beq.n	80092bc <ConvertTextWithSalt+0xc8>
    return; //something wrong ???

  int i = 0, j = 0;
 8009210:	2300      	movs	r3, #0
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	2300      	movs	r3, #0
 8009216:	613b      	str	r3, [r7, #16]
  if (saltType == Add)
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d149      	bne.n	80092b2 <ConvertTextWithSalt+0xbe>
  {
    while (j < len)
 800921e:	e021      	b.n	8009264 <ConvertTextWithSalt+0x70>
    {
      data[j + offset] += salt[i];
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	4413      	add	r3, r2
 8009226:	461a      	mov	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4413      	add	r3, r2
 800922c:	7819      	ldrb	r1, [r3, #0]
 800922e:	4b26      	ldr	r3, [pc, #152]	; (80092c8 <ConvertTextWithSalt+0xd4>)
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	4413      	add	r3, r2
 8009236:	781a      	ldrb	r2, [r3, #0]
 8009238:	6938      	ldr	r0, [r7, #16]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	4403      	add	r3, r0
 800923e:	4618      	mov	r0, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4403      	add	r3, r0
 8009244:	440a      	add	r2, r1
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	701a      	strb	r2, [r3, #0]
      j++;
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	3301      	adds	r3, #1
 800924e:	613b      	str	r3, [r7, #16]
      i++;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	3301      	adds	r3, #1
 8009254:	617b      	str	r3, [r7, #20]
      if (i == saltLen)
 8009256:	4b1d      	ldr	r3, [pc, #116]	; (80092cc <ConvertTextWithSalt+0xd8>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	429a      	cmp	r2, r3
 800925e:	d101      	bne.n	8009264 <ConvertTextWithSalt+0x70>
        i = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	617b      	str	r3, [r7, #20]
    while (j < len)
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	429a      	cmp	r2, r3
 800926a:	dbd9      	blt.n	8009220 <ConvertTextWithSalt+0x2c>
 800926c:	e027      	b.n	80092be <ConvertTextWithSalt+0xca>
  }
  else //sub
  {
    while (j < len)
    {
      data[j + offset] -= salt[i];
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	4413      	add	r3, r2
 8009274:	461a      	mov	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4413      	add	r3, r2
 800927a:	7819      	ldrb	r1, [r3, #0]
 800927c:	4b12      	ldr	r3, [pc, #72]	; (80092c8 <ConvertTextWithSalt+0xd4>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	4413      	add	r3, r2
 8009284:	781a      	ldrb	r2, [r3, #0]
 8009286:	6938      	ldr	r0, [r7, #16]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	4403      	add	r3, r0
 800928c:	4618      	mov	r0, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4403      	add	r3, r0
 8009292:	1a8a      	subs	r2, r1, r2
 8009294:	b2d2      	uxtb	r2, r2
 8009296:	701a      	strb	r2, [r3, #0]
      j++;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	3301      	adds	r3, #1
 800929c:	613b      	str	r3, [r7, #16]
      i++;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	3301      	adds	r3, #1
 80092a2:	617b      	str	r3, [r7, #20]
      if (i == saltLen)
 80092a4:	4b09      	ldr	r3, [pc, #36]	; (80092cc <ConvertTextWithSalt+0xd8>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d101      	bne.n	80092b2 <ConvertTextWithSalt+0xbe>
        i = 0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	617b      	str	r3, [r7, #20]
    while (j < len)
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	dbd9      	blt.n	800926e <ConvertTextWithSalt+0x7a>
 80092ba:	e000      	b.n	80092be <ConvertTextWithSalt+0xca>
    return; //something wrong ???
 80092bc:	bf00      	nop
    }
  }
}
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	080218a0 	.word	0x080218a0
 80092c8:	2000ffc4 	.word	0x2000ffc4
 80092cc:	200101d8 	.word	0x200101d8

080092d0 <CheckSaltACK>:

//check data is the same with salt
bool CheckSaltACK(uint8_t *data, int len)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  LOG_WRITE("chkSaltACK\n");
 80092da:	4814      	ldr	r0, [pc, #80]	; (800932c <CheckSaltACK+0x5c>)
 80092dc:	f016 fb8c 	bl	801f9f8 <puts>
  if (len >= saltLen)
 80092e0:	4b13      	ldr	r3, [pc, #76]	; (8009330 <CheckSaltACK+0x60>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	db1b      	blt.n	8009322 <CheckSaltACK+0x52>
  {
    int i;
    for (i = 0; i < saltLen; i++)
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	e011      	b.n	8009314 <CheckSaltACK+0x44>
    {
      if ((data[i] & 0x7F) != salt[i])
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	4413      	add	r3, r2
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092fc:	4a0d      	ldr	r2, [pc, #52]	; (8009334 <CheckSaltACK+0x64>)
 80092fe:	6811      	ldr	r1, [r2, #0]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	440a      	add	r2, r1
 8009304:	7812      	ldrb	r2, [r2, #0]
 8009306:	4293      	cmp	r3, r2
 8009308:	d001      	beq.n	800930e <CheckSaltACK+0x3e>
        return false;
 800930a:	2300      	movs	r3, #0
 800930c:	e00a      	b.n	8009324 <CheckSaltACK+0x54>
    for (i = 0; i < saltLen; i++)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3301      	adds	r3, #1
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	4b06      	ldr	r3, [pc, #24]	; (8009330 <CheckSaltACK+0x60>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	429a      	cmp	r2, r3
 800931c:	dbe8      	blt.n	80092f0 <CheckSaltACK+0x20>
    }
    return true;
 800931e:	2301      	movs	r3, #1
 8009320:	e000      	b.n	8009324 <CheckSaltACK+0x54>
  }
  return false;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	080218b0 	.word	0x080218b0
 8009330:	200101d8 	.word	0x200101d8
 8009334:	2000ffc4 	.word	0x2000ffc4

08009338 <MX_LWIP_checkIsystem_ip_addr>:
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
int MX_LWIP_checkIsystem_ip_addr()
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0
	if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 800933c:	4b09      	ldr	r3, [pc, #36]	; (8009364 <MX_LWIP_checkIsystem_ip_addr+0x2c>)
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <MX_LWIP_checkIsystem_ip_addr+0x1c>
 8009344:	4b07      	ldr	r3, [pc, #28]	; (8009364 <MX_LWIP_checkIsystem_ip_addr+0x2c>)
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d003      	beq.n	8009354 <MX_LWIP_checkIsystem_ip_addr+0x1c>
 800934c:	4b05      	ldr	r3, [pc, #20]	; (8009364 <MX_LWIP_checkIsystem_ip_addr+0x2c>)
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <MX_LWIP_checkIsystem_ip_addr+0x20>
	{
	   return 0;
 8009354:	2300      	movs	r3, #0
 8009356:	e000      	b.n	800935a <MX_LWIP_checkIsystem_ip_addr+0x22>
	}
	return 1;
 8009358:	2301      	movs	r3, #1
}
 800935a:	4618      	mov	r0, r3
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	20010240 	.word	0x20010240

08009368 <MX_LWIP_getIP>:
// uint8_t ipDHCP[4];
uint8_t *MX_LWIP_getIP()
{
 8009368:	b480      	push	{r7}
 800936a:	af00      	add	r7, sp, #0
  if (gnetif.ip_addr.addr != 0)
 800936c:	4b05      	ldr	r3, [pc, #20]	; (8009384 <MX_LWIP_getIP+0x1c>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <MX_LWIP_getIP+0x10>
  {
    return (uint8_t*)(&gnetif.ip_addr.addr);
 8009374:	4b04      	ldr	r3, [pc, #16]	; (8009388 <MX_LWIP_getIP+0x20>)
 8009376:	e000      	b.n	800937a <MX_LWIP_getIP+0x12>
  }
  else
  {
    return NULL;
 8009378:	2300      	movs	r3, #0
  }
}
 800937a:	4618      	mov	r0, r3
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	20010240 	.word	0x20010240
 8009388:	20010244 	.word	0x20010244

0800938c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009392:	2100      	movs	r1, #0
 8009394:	2000      	movs	r0, #0
 8009396:	f007 fca7 	bl	8010ce8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800939a:	4b2a      	ldr	r3, [pc, #168]	; (8009444 <MX_LWIP_Init+0xb8>)
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80093a0:	4b29      	ldr	r3, [pc, #164]	; (8009448 <MX_LWIP_Init+0xbc>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80093a6:	4b29      	ldr	r3, [pc, #164]	; (800944c <MX_LWIP_Init+0xc0>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80093ac:	4b28      	ldr	r3, [pc, #160]	; (8009450 <MX_LWIP_Init+0xc4>)
 80093ae:	9302      	str	r3, [sp, #8]
 80093b0:	4b28      	ldr	r3, [pc, #160]	; (8009454 <MX_LWIP_Init+0xc8>)
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	2300      	movs	r3, #0
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	4b24      	ldr	r3, [pc, #144]	; (800944c <MX_LWIP_Init+0xc0>)
 80093ba:	4a23      	ldr	r2, [pc, #140]	; (8009448 <MX_LWIP_Init+0xbc>)
 80093bc:	4921      	ldr	r1, [pc, #132]	; (8009444 <MX_LWIP_Init+0xb8>)
 80093be:	4826      	ldr	r0, [pc, #152]	; (8009458 <MX_LWIP_Init+0xcc>)
 80093c0:	f009 f9ec 	bl	801279c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80093c4:	4824      	ldr	r0, [pc, #144]	; (8009458 <MX_LWIP_Init+0xcc>)
 80093c6:	f009 fba3 	bl	8012b10 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80093ca:	4b23      	ldr	r3, [pc, #140]	; (8009458 <MX_LWIP_Init+0xcc>)
 80093cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80093d0:	089b      	lsrs	r3, r3, #2
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80093dc:	481e      	ldr	r0, [pc, #120]	; (8009458 <MX_LWIP_Init+0xcc>)
 80093de:	f009 fba7 	bl	8012b30 <netif_set_up>
 80093e2:	e002      	b.n	80093ea <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80093e4:	481c      	ldr	r0, [pc, #112]	; (8009458 <MX_LWIP_Init+0xcc>)
 80093e6:	f009 fc0f 	bl	8012c08 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80093ea:	491c      	ldr	r1, [pc, #112]	; (800945c <MX_LWIP_Init+0xd0>)
 80093ec:	481a      	ldr	r0, [pc, #104]	; (8009458 <MX_LWIP_Init+0xcc>)
 80093ee:	f009 fca5 	bl	8012d3c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80093f2:	2200      	movs	r2, #0
 80093f4:	2101      	movs	r1, #1
 80093f6:	2001      	movs	r0, #1
 80093f8:	f001 f8d9 	bl	800a5ae <osSemaphoreNew>
 80093fc:	4603      	mov	r3, r0
 80093fe:	4a18      	ldr	r2, [pc, #96]	; (8009460 <MX_LWIP_Init+0xd4>)
 8009400:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8009402:	4b18      	ldr	r3, [pc, #96]	; (8009464 <MX_LWIP_Init+0xd8>)
 8009404:	4a14      	ldr	r2, [pc, #80]	; (8009458 <MX_LWIP_Init+0xcc>)
 8009406:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8009408:	4b15      	ldr	r3, [pc, #84]	; (8009460 <MX_LWIP_Init+0xd4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a15      	ldr	r2, [pc, #84]	; (8009464 <MX_LWIP_Init+0xd8>)
 800940e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8009410:	2224      	movs	r2, #36	; 0x24
 8009412:	2100      	movs	r1, #0
 8009414:	4814      	ldr	r0, [pc, #80]	; (8009468 <MX_LWIP_Init+0xdc>)
 8009416:	f016 f9a7 	bl	801f768 <memset>
  attributes.name = "LinkThr";
 800941a:	4b13      	ldr	r3, [pc, #76]	; (8009468 <MX_LWIP_Init+0xdc>)
 800941c:	4a13      	ldr	r2, [pc, #76]	; (800946c <MX_LWIP_Init+0xe0>)
 800941e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8009420:	4b11      	ldr	r3, [pc, #68]	; (8009468 <MX_LWIP_Init+0xdc>)
 8009422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009426:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8009428:	4b0f      	ldr	r3, [pc, #60]	; (8009468 <MX_LWIP_Init+0xdc>)
 800942a:	2210      	movs	r2, #16
 800942c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800942e:	4a0e      	ldr	r2, [pc, #56]	; (8009468 <MX_LWIP_Init+0xdc>)
 8009430:	490c      	ldr	r1, [pc, #48]	; (8009464 <MX_LWIP_Init+0xd8>)
 8009432:	480f      	ldr	r0, [pc, #60]	; (8009470 <MX_LWIP_Init+0xe4>)
 8009434:	f000 fccd 	bl	8009dd2 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8009438:	4807      	ldr	r0, [pc, #28]	; (8009458 <MX_LWIP_Init+0xcc>)
 800943a:	f011 ff21 	bl	801b280 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800943e:	bf00      	nop
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	20010278 	.word	0x20010278
 8009448:	2001027c 	.word	0x2001027c
 800944c:	20010280 	.word	0x20010280
 8009450:	08010bf9 	.word	0x08010bf9
 8009454:	08009a9d 	.word	0x08009a9d
 8009458:	20010240 	.word	0x20010240
 800945c:	08009b81 	.word	0x08009b81
 8009460:	20000630 	.word	0x20000630
 8009464:	20010214 	.word	0x20010214
 8009468:	2001021c 	.word	0x2001021c
 800946c:	080218bc 	.word	0x080218bc
 8009470:	08009b09 	.word	0x08009b09

08009474 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b08e      	sub	sp, #56	; 0x38
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800947c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009480:	2200      	movs	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	605a      	str	r2, [r3, #4]
 8009486:	609a      	str	r2, [r3, #8]
 8009488:	60da      	str	r2, [r3, #12]
 800948a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a4a      	ldr	r2, [pc, #296]	; (80095bc <HAL_ETH_MspInit+0x148>)
 8009492:	4293      	cmp	r3, r2
 8009494:	f040 808d 	bne.w	80095b2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009498:	2300      	movs	r3, #0
 800949a:	623b      	str	r3, [r7, #32]
 800949c:	4b48      	ldr	r3, [pc, #288]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 800949e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a0:	4a47      	ldr	r2, [pc, #284]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 80094a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80094a6:	6313      	str	r3, [r2, #48]	; 0x30
 80094a8:	4b45      	ldr	r3, [pc, #276]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 80094aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b0:	623b      	str	r3, [r7, #32]
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	2300      	movs	r3, #0
 80094b6:	61fb      	str	r3, [r7, #28]
 80094b8:	4b41      	ldr	r3, [pc, #260]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 80094ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094bc:	4a40      	ldr	r2, [pc, #256]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 80094be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094c2:	6313      	str	r3, [r2, #48]	; 0x30
 80094c4:	4b3e      	ldr	r3, [pc, #248]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 80094c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094cc:	61fb      	str	r3, [r7, #28]
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	2300      	movs	r3, #0
 80094d2:	61bb      	str	r3, [r7, #24]
 80094d4:	4b3a      	ldr	r3, [pc, #232]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 80094d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d8:	4a39      	ldr	r2, [pc, #228]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 80094da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094de:	6313      	str	r3, [r2, #48]	; 0x30
 80094e0:	4b37      	ldr	r3, [pc, #220]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 80094e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094e8:	61bb      	str	r3, [r7, #24]
 80094ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80094ec:	2300      	movs	r3, #0
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	4b33      	ldr	r3, [pc, #204]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 80094f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f4:	4a32      	ldr	r2, [pc, #200]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 80094f6:	f043 0304 	orr.w	r3, r3, #4
 80094fa:	6313      	str	r3, [r2, #48]	; 0x30
 80094fc:	4b30      	ldr	r3, [pc, #192]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 80094fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	617b      	str	r3, [r7, #20]
 8009506:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009508:	2300      	movs	r3, #0
 800950a:	613b      	str	r3, [r7, #16]
 800950c:	4b2c      	ldr	r3, [pc, #176]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 800950e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009510:	4a2b      	ldr	r2, [pc, #172]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 8009512:	f043 0301 	orr.w	r3, r3, #1
 8009516:	6313      	str	r3, [r2, #48]	; 0x30
 8009518:	4b29      	ldr	r3, [pc, #164]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 800951a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009524:	2300      	movs	r3, #0
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	4b25      	ldr	r3, [pc, #148]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 800952a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952c:	4a24      	ldr	r2, [pc, #144]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 800952e:	f043 0302 	orr.w	r3, r3, #2
 8009532:	6313      	str	r3, [r2, #48]	; 0x30
 8009534:	4b22      	ldr	r3, [pc, #136]	; (80095c0 <HAL_ETH_MspInit+0x14c>)
 8009536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	60fb      	str	r3, [r7, #12]
 800953e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009540:	2332      	movs	r3, #50	; 0x32
 8009542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009544:	2302      	movs	r3, #2
 8009546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009548:	2300      	movs	r3, #0
 800954a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800954c:	2303      	movs	r3, #3
 800954e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009550:	230b      	movs	r3, #11
 8009552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009558:	4619      	mov	r1, r3
 800955a:	481a      	ldr	r0, [pc, #104]	; (80095c4 <HAL_ETH_MspInit+0x150>)
 800955c:	f7f9 fcca 	bl	8002ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009560:	2386      	movs	r3, #134	; 0x86
 8009562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009564:	2302      	movs	r3, #2
 8009566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009568:	2300      	movs	r3, #0
 800956a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800956c:	2303      	movs	r3, #3
 800956e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009570:	230b      	movs	r3, #11
 8009572:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009578:	4619      	mov	r1, r3
 800957a:	4813      	ldr	r0, [pc, #76]	; (80095c8 <HAL_ETH_MspInit+0x154>)
 800957c:	f7f9 fcba 	bl	8002ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009580:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009586:	2302      	movs	r3, #2
 8009588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800958a:	2300      	movs	r3, #0
 800958c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800958e:	2303      	movs	r3, #3
 8009590:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009592:	230b      	movs	r3, #11
 8009594:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800959a:	4619      	mov	r1, r3
 800959c:	480b      	ldr	r0, [pc, #44]	; (80095cc <HAL_ETH_MspInit+0x158>)
 800959e:	f7f9 fca9 	bl	8002ef4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80095a2:	2200      	movs	r2, #0
 80095a4:	2105      	movs	r1, #5
 80095a6:	203d      	movs	r0, #61	; 0x3d
 80095a8:	f7f8 fad4 	bl	8001b54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80095ac:	203d      	movs	r0, #61	; 0x3d
 80095ae:	f7f8 faed 	bl	8001b8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80095b2:	bf00      	nop
 80095b4:	3738      	adds	r7, #56	; 0x38
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	40028000 	.word	0x40028000
 80095c0:	40023800 	.word	0x40023800
 80095c4:	40020800 	.word	0x40020800
 80095c8:	40020000 	.word	0x40020000
 80095cc:	40020400 	.word	0x40020400

080095d0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80095d8:	4b04      	ldr	r3, [pc, #16]	; (80095ec <HAL_ETH_RxCpltCallback+0x1c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4618      	mov	r0, r3
 80095de:	f001 f8c1 	bl	800a764 <osSemaphoreRelease>
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20000634 	.word	0x20000634

080095f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b090      	sub	sp, #64	; 0x40
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80095fc:	4b5d      	ldr	r3, [pc, #372]	; (8009774 <low_level_init+0x184>)
 80095fe:	4a5e      	ldr	r2, [pc, #376]	; (8009778 <low_level_init+0x188>)
 8009600:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009602:	4b5c      	ldr	r3, [pc, #368]	; (8009774 <low_level_init+0x184>)
 8009604:	2201      	movs	r2, #1
 8009606:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8009608:	4b5a      	ldr	r3, [pc, #360]	; (8009774 <low_level_init+0x184>)
 800960a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800960e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009610:	4b58      	ldr	r3, [pc, #352]	; (8009774 <low_level_init+0x184>)
 8009612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009616:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8009618:	4b56      	ldr	r3, [pc, #344]	; (8009774 <low_level_init+0x184>)
 800961a:	2201      	movs	r2, #1
 800961c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800961e:	2300      	movs	r3, #0
 8009620:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8009622:	2380      	movs	r3, #128	; 0x80
 8009624:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8009626:	23e1      	movs	r3, #225	; 0xe1
 8009628:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800962a:	2300      	movs	r3, #0
 800962c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800962e:	2300      	movs	r3, #0
 8009630:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8009632:	2300      	movs	r3, #0
 8009634:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8009636:	4a4f      	ldr	r2, [pc, #316]	; (8009774 <low_level_init+0x184>)
 8009638:	f107 030c 	add.w	r3, r7, #12
 800963c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800963e:	4b4d      	ldr	r3, [pc, #308]	; (8009774 <low_level_init+0x184>)
 8009640:	2201      	movs	r2, #1
 8009642:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009644:	4b4b      	ldr	r3, [pc, #300]	; (8009774 <low_level_init+0x184>)
 8009646:	2200      	movs	r2, #0
 8009648:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800964a:	4b4a      	ldr	r3, [pc, #296]	; (8009774 <low_level_init+0x184>)
 800964c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009650:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009652:	4848      	ldr	r0, [pc, #288]	; (8009774 <low_level_init+0x184>)
 8009654:	f7f8 faa8 	bl	8001ba8 <HAL_ETH_Init>
 8009658:	4603      	mov	r3, r0
 800965a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800965e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009662:	2b00      	cmp	r3, #0
 8009664:	d108      	bne.n	8009678 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800966c:	f043 0304 	orr.w	r3, r3, #4
 8009670:	b2da      	uxtb	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009678:	2304      	movs	r3, #4
 800967a:	4a40      	ldr	r2, [pc, #256]	; (800977c <low_level_init+0x18c>)
 800967c:	4940      	ldr	r1, [pc, #256]	; (8009780 <low_level_init+0x190>)
 800967e:	483d      	ldr	r0, [pc, #244]	; (8009774 <low_level_init+0x184>)
 8009680:	f7f8 fc2e 	bl	8001ee0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8009684:	2304      	movs	r3, #4
 8009686:	4a3f      	ldr	r2, [pc, #252]	; (8009784 <low_level_init+0x194>)
 8009688:	493f      	ldr	r1, [pc, #252]	; (8009788 <low_level_init+0x198>)
 800968a:	483a      	ldr	r0, [pc, #232]	; (8009774 <low_level_init+0x184>)
 800968c:	f7f8 fc91 	bl	8001fb2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2206      	movs	r2, #6
 8009694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009698:	4b36      	ldr	r3, [pc, #216]	; (8009774 <low_level_init+0x184>)
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	781a      	ldrb	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80096a4:	4b33      	ldr	r3, [pc, #204]	; (8009774 <low_level_init+0x184>)
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	785a      	ldrb	r2, [r3, #1]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80096b0:	4b30      	ldr	r3, [pc, #192]	; (8009774 <low_level_init+0x184>)
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	789a      	ldrb	r2, [r3, #2]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80096bc:	4b2d      	ldr	r3, [pc, #180]	; (8009774 <low_level_init+0x184>)
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	78da      	ldrb	r2, [r3, #3]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80096c8:	4b2a      	ldr	r3, [pc, #168]	; (8009774 <low_level_init+0x184>)
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	791a      	ldrb	r2, [r3, #4]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80096d4:	4b27      	ldr	r3, [pc, #156]	; (8009774 <low_level_init+0x184>)
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	795a      	ldrb	r2, [r3, #5]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80096e6:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80096ee:	f043 030a 	orr.w	r3, r3, #10
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80096fa:	2200      	movs	r2, #0
 80096fc:	2101      	movs	r1, #1
 80096fe:	2001      	movs	r0, #1
 8009700:	f000 ff55 	bl	800a5ae <osSemaphoreNew>
 8009704:	4603      	mov	r3, r0
 8009706:	4a21      	ldr	r2, [pc, #132]	; (800978c <low_level_init+0x19c>)
 8009708:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800970a:	f107 0314 	add.w	r3, r7, #20
 800970e:	2224      	movs	r2, #36	; 0x24
 8009710:	2100      	movs	r1, #0
 8009712:	4618      	mov	r0, r3
 8009714:	f016 f828 	bl	801f768 <memset>
  attributes.name = "EthIf";
 8009718:	4b1d      	ldr	r3, [pc, #116]	; (8009790 <low_level_init+0x1a0>)
 800971a:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800971c:	f240 2326 	movw	r3, #550	; 0x226
 8009720:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8009722:	2330      	movs	r3, #48	; 0x30
 8009724:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8009726:	f107 0314 	add.w	r3, r7, #20
 800972a:	461a      	mov	r2, r3
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	4819      	ldr	r0, [pc, #100]	; (8009794 <low_level_init+0x1a4>)
 8009730:	f000 fb4f 	bl	8009dd2 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009734:	480f      	ldr	r0, [pc, #60]	; (8009774 <low_level_init+0x184>)
 8009736:	f7f8 ff64 	bl	8002602 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800973a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800973e:	461a      	mov	r2, r3
 8009740:	211d      	movs	r1, #29
 8009742:	480c      	ldr	r0, [pc, #48]	; (8009774 <low_level_init+0x184>)
 8009744:	f7f8 fe8f 	bl	8002466 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	f043 030b 	orr.w	r3, r3, #11
 800974e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009752:	461a      	mov	r2, r3
 8009754:	211d      	movs	r1, #29
 8009756:	4807      	ldr	r0, [pc, #28]	; (8009774 <low_level_init+0x184>)
 8009758:	f7f8 feed 	bl	8002536 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800975c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009760:	461a      	mov	r2, r3
 8009762:	211d      	movs	r1, #29
 8009764:	4803      	ldr	r0, [pc, #12]	; (8009774 <low_level_init+0x184>)
 8009766:	f7f8 fe7e 	bl	8002466 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800976a:	bf00      	nop
 800976c:	3740      	adds	r7, #64	; 0x40
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20011b54 	.word	0x20011b54
 8009778:	40028000 	.word	0x40028000
 800977c:	20011b9c 	.word	0x20011b9c
 8009780:	20010284 	.word	0x20010284
 8009784:	20010304 	.word	0x20010304
 8009788:	20011ad4 	.word	0x20011ad4
 800978c:	20000634 	.word	0x20000634
 8009790:	080218c4 	.word	0x080218c4
 8009794:	08009a3d 	.word	0x08009a3d

08009798 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	; 0x28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80097a2:	4b4b      	ldr	r3, [pc, #300]	; (80098d0 <low_level_output+0x138>)
 80097a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80097ba:	4b45      	ldr	r3, [pc, #276]	; (80098d0 <low_level_output+0x138>)
 80097bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097be:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	623b      	str	r3, [r7, #32]
 80097c8:	e05a      	b.n	8009880 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	da03      	bge.n	80097da <low_level_output+0x42>
      {
        errval = ERR_USE;
 80097d2:	23f8      	movs	r3, #248	; 0xf8
 80097d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80097d8:	e05c      	b.n	8009894 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	895b      	ldrh	r3, [r3, #10]
 80097de:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80097e4:	e02f      	b.n	8009846 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	18d0      	adds	r0, r2, r3
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	18d1      	adds	r1, r2, r3
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80097fa:	3304      	adds	r3, #4
 80097fc:	461a      	mov	r2, r3
 80097fe:	f015 ff8b 	bl	801f718 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	da03      	bge.n	8009818 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009810:	23f8      	movs	r3, #248	; 0xf8
 8009812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009816:	e03d      	b.n	8009894 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	4413      	add	r3, r2
 8009824:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009828:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009834:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009840:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009842:	2300      	movs	r3, #0
 8009844:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	4413      	add	r3, r2
 800984c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009850:	4293      	cmp	r3, r2
 8009852:	d8c8      	bhi.n	80097e6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009854:	69fa      	ldr	r2, [r7, #28]
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	18d0      	adds	r0, r2, r3
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	4413      	add	r3, r2
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	4619      	mov	r1, r3
 8009866:	f015 ff57 	bl	801f718 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4413      	add	r3, r2
 8009878:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	623b      	str	r3, [r7, #32]
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1a1      	bne.n	80097ca <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8009886:	6979      	ldr	r1, [r7, #20]
 8009888:	4811      	ldr	r0, [pc, #68]	; (80098d0 <low_level_output+0x138>)
 800988a:	f7f8 fbff 	bl	800208c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009894:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <low_level_output+0x138>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800989c:	3314      	adds	r3, #20
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00d      	beq.n	80098c4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80098a8:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <low_level_output+0x138>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098b0:	3314      	adds	r3, #20
 80098b2:	2220      	movs	r2, #32
 80098b4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <low_level_output+0x138>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098be:	3304      	adds	r3, #4
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80098c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3728      	adds	r7, #40	; 0x28
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	20011b54 	.word	0x20011b54

080098d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08c      	sub	sp, #48	; 0x30
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80098dc:	2300      	movs	r3, #0
 80098de:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80098f0:	2300      	movs	r3, #0
 80098f2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80098f8:	484f      	ldr	r0, [pc, #316]	; (8009a38 <low_level_input+0x164>)
 80098fa:	f7f8 fcb1 	bl	8002260 <HAL_ETH_GetReceivedFrame_IT>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <low_level_input+0x34>

    return NULL;
 8009904:	2300      	movs	r3, #0
 8009906:	e092      	b.n	8009a2e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009908:	4b4b      	ldr	r3, [pc, #300]	; (8009a38 <low_level_input+0x164>)
 800990a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800990c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800990e:	4b4a      	ldr	r3, [pc, #296]	; (8009a38 <low_level_input+0x164>)
 8009910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009912:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8009914:	89fb      	ldrh	r3, [r7, #14]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d007      	beq.n	800992a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800991a:	89fb      	ldrh	r3, [r7, #14]
 800991c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009920:	4619      	mov	r1, r3
 8009922:	2000      	movs	r0, #0
 8009924:	f009 fad4 	bl	8012ed0 <pbuf_alloc>
 8009928:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	2b00      	cmp	r3, #0
 800992e:	d04b      	beq.n	80099c8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009930:	4b41      	ldr	r3, [pc, #260]	; (8009a38 <low_level_input+0x164>)
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	62bb      	str	r3, [r7, #40]	; 0x28
 800993e:	e040      	b.n	80099c2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	895b      	ldrh	r3, [r3, #10]
 8009944:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800994a:	e021      	b.n	8009990 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	18d0      	adds	r0, r2, r3
 8009954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	18d1      	adds	r1, r2, r3
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009960:	3304      	adds	r3, #4
 8009962:	461a      	mov	r2, r3
 8009964:	f015 fed8 	bl	801f718 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009974:	69fa      	ldr	r2, [r7, #28]
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	4413      	add	r3, r2
 800997a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800997e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009980:	69ba      	ldr	r2, [r7, #24]
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800998a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	4413      	add	r3, r2
 8009996:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800999a:	4293      	cmp	r3, r2
 800999c:	d8d6      	bhi.n	800994c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	18d0      	adds	r0, r2, r3
 80099a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	4413      	add	r3, r2
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	4619      	mov	r1, r3
 80099b0:	f015 feb2 	bl	801f718 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80099b4:	69fa      	ldr	r2, [r7, #28]
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	4413      	add	r3, r2
 80099ba:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80099c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1bb      	bne.n	8009940 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80099c8:	4b1b      	ldr	r3, [pc, #108]	; (8009a38 <low_level_input+0x164>)
 80099ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099cc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80099ce:	2300      	movs	r3, #0
 80099d0:	613b      	str	r3, [r7, #16]
 80099d2:	e00b      	b.n	80099ec <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	3301      	adds	r3, #1
 80099ea:	613b      	str	r3, [r7, #16]
 80099ec:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <low_level_input+0x164>)
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d3ee      	bcc.n	80099d4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80099f6:	4b10      	ldr	r3, [pc, #64]	; (8009a38 <low_level_input+0x164>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80099fc:	4b0e      	ldr	r3, [pc, #56]	; (8009a38 <low_level_input+0x164>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a04:	3314      	adds	r3, #20
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00d      	beq.n	8009a2c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009a10:	4b09      	ldr	r3, [pc, #36]	; (8009a38 <low_level_input+0x164>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a18:	3314      	adds	r3, #20
 8009a1a:	2280      	movs	r2, #128	; 0x80
 8009a1c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009a1e:	4b06      	ldr	r3, [pc, #24]	; (8009a38 <low_level_input+0x164>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a26:	3308      	adds	r3, #8
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3730      	adds	r7, #48	; 0x30
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	20011b54 	.word	0x20011b54

08009a3c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009a48:	4b12      	ldr	r3, [pc, #72]	; (8009a94 <ethernetif_input+0x58>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 fe35 	bl	800a6c0 <osSemaphoreAcquire>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1f5      	bne.n	8009a48 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8009a5c:	480e      	ldr	r0, [pc, #56]	; (8009a98 <ethernetif_input+0x5c>)
 8009a5e:	f015 fcbd 	bl	801f3dc <sys_mutex_lock>
        p = low_level_input( netif );
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f7ff ff36 	bl	80098d4 <low_level_input>
 8009a68:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00a      	beq.n	8009a86 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	68f9      	ldr	r1, [r7, #12]
 8009a76:	68b8      	ldr	r0, [r7, #8]
 8009a78:	4798      	blx	r3
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8009a80:	68b8      	ldr	r0, [r7, #8]
 8009a82:	f009 fd09 	bl	8013498 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8009a86:	4804      	ldr	r0, [pc, #16]	; (8009a98 <ethernetif_input+0x5c>)
 8009a88:	f015 fcb7 	bl	801f3fa <sys_mutex_unlock>
      } while(p!=NULL);
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e4      	bne.n	8009a5c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009a92:	e7d9      	b.n	8009a48 <ethernetif_input+0xc>
 8009a94:	20000634 	.word	0x20000634
 8009a98:	200133ac 	.word	0x200133ac

08009a9c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d106      	bne.n	8009ab8 <ethernetif_init+0x1c>
 8009aaa:	4b0e      	ldr	r3, [pc, #56]	; (8009ae4 <ethernetif_init+0x48>)
 8009aac:	f44f 720c 	mov.w	r2, #560	; 0x230
 8009ab0:	490d      	ldr	r1, [pc, #52]	; (8009ae8 <ethernetif_init+0x4c>)
 8009ab2:	480e      	ldr	r0, [pc, #56]	; (8009aec <ethernetif_init+0x50>)
 8009ab4:	f015 ff1a 	bl	801f8ec <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2273      	movs	r2, #115	; 0x73
 8009abc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2274      	movs	r2, #116	; 0x74
 8009ac4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a09      	ldr	r2, [pc, #36]	; (8009af0 <ethernetif_init+0x54>)
 8009acc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a08      	ldr	r2, [pc, #32]	; (8009af4 <ethernetif_init+0x58>)
 8009ad2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff fd8b 	bl	80095f0 <low_level_init>

  return ERR_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	080218cc 	.word	0x080218cc
 8009ae8:	080218e8 	.word	0x080218e8
 8009aec:	080218f8 	.word	0x080218f8
 8009af0:	0801d1ad 	.word	0x0801d1ad
 8009af4:	08009799 	.word	0x08009799

08009af8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009afc:	f7f7 ff42 	bl	8001984 <HAL_GetTick>
 8009b00:	4603      	mov	r3, r0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8009b18:	f107 0308 	add.w	r3, r7, #8
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	2101      	movs	r1, #1
 8009b20:	4816      	ldr	r0, [pc, #88]	; (8009b7c <ethernetif_set_link+0x74>)
 8009b22:	f7f8 fca0 	bl	8002466 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b36:	f003 0304 	and.w	r3, r3, #4
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d108      	bne.n	8009b50 <ethernetif_set_link+0x48>
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d005      	beq.n	8009b50 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f009 f88f 	bl	8012c6c <netif_set_link_up>
 8009b4e:	e011      	b.n	8009b74 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b58:	089b      	lsrs	r3, r3, #2
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d007      	beq.n	8009b74 <ethernetif_set_link+0x6c>
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d104      	bne.n	8009b74 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f009 f8b4 	bl	8012cdc <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8009b74:	20c8      	movs	r0, #200	; 0xc8
 8009b76:	f000 f9be 	bl	8009ef6 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8009b7a:	e7cd      	b.n	8009b18 <ethernetif_set_link+0x10>
 8009b7c:	20011b54 	.word	0x20011b54

08009b80 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b96:	089b      	lsrs	r3, r3, #2
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d05d      	beq.n	8009c5e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009ba2:	4b34      	ldr	r3, [pc, #208]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d03f      	beq.n	8009c2a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8009baa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009bae:	2100      	movs	r1, #0
 8009bb0:	4830      	ldr	r0, [pc, #192]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009bb2:	f7f8 fcc0 	bl	8002536 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8009bb6:	f7f7 fee5 	bl	8001984 <HAL_GetTick>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8009bbe:	f107 0308 	add.w	r3, r7, #8
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	482b      	ldr	r0, [pc, #172]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009bc8:	f7f8 fc4d 	bl	8002466 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8009bcc:	f7f7 feda 	bl	8001984 <HAL_GetTick>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bda:	d828      	bhi.n	8009c2e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f003 0320 	and.w	r3, r3, #32
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0eb      	beq.n	8009bbe <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8009be6:	f107 0308 	add.w	r3, r7, #8
 8009bea:	461a      	mov	r2, r3
 8009bec:	2110      	movs	r1, #16
 8009bee:	4821      	ldr	r0, [pc, #132]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009bf0:	f7f8 fc39 	bl	8002466 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f003 0304 	and.w	r3, r3, #4
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d004      	beq.n	8009c08 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009bfe:	4b1d      	ldr	r3, [pc, #116]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c04:	60da      	str	r2, [r3, #12]
 8009c06:	e002      	b.n	8009c0e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8009c08:	4b1a      	ldr	r3, [pc, #104]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d003      	beq.n	8009c20 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8009c18:	4b16      	ldr	r3, [pc, #88]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	609a      	str	r2, [r3, #8]
 8009c1e:	e016      	b.n	8009c4e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8009c20:	4b14      	ldr	r3, [pc, #80]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009c22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c26:	609a      	str	r2, [r3, #8]
 8009c28:	e011      	b.n	8009c4e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8009c2a:	bf00      	nop
 8009c2c:	e000      	b.n	8009c30 <ethernetif_update_config+0xb0>
          goto error;
 8009c2e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009c30:	4b10      	ldr	r3, [pc, #64]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	08db      	lsrs	r3, r3, #3
 8009c36:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8009c38:	4b0e      	ldr	r3, [pc, #56]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	085b      	lsrs	r3, r3, #1
 8009c3e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009c40:	4313      	orrs	r3, r2
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	461a      	mov	r2, r3
 8009c46:	2100      	movs	r1, #0
 8009c48:	480a      	ldr	r0, [pc, #40]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009c4a:	f7f8 fc74 	bl	8002536 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4808      	ldr	r0, [pc, #32]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009c52:	f7f8 fd35 	bl	80026c0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8009c56:	4807      	ldr	r0, [pc, #28]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009c58:	f7f8 fcd3 	bl	8002602 <HAL_ETH_Start>
 8009c5c:	e002      	b.n	8009c64 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8009c5e:	4805      	ldr	r0, [pc, #20]	; (8009c74 <ethernetif_update_config+0xf4>)
 8009c60:	f7f8 fcfe 	bl	8002660 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f807 	bl	8009c78 <ethernetif_notify_conn_changed>
}
 8009c6a:	bf00      	nop
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20011b54 	.word	0x20011b54

08009c78 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <__NVIC_SetPriority>:
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	4603      	mov	r3, r0
 8009c94:	6039      	str	r1, [r7, #0]
 8009c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	db0a      	blt.n	8009cb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	490c      	ldr	r1, [pc, #48]	; (8009cd8 <__NVIC_SetPriority+0x4c>)
 8009ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009caa:	0112      	lsls	r2, r2, #4
 8009cac:	b2d2      	uxtb	r2, r2
 8009cae:	440b      	add	r3, r1
 8009cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009cb4:	e00a      	b.n	8009ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	4908      	ldr	r1, [pc, #32]	; (8009cdc <__NVIC_SetPriority+0x50>)
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	f003 030f 	and.w	r3, r3, #15
 8009cc2:	3b04      	subs	r3, #4
 8009cc4:	0112      	lsls	r2, r2, #4
 8009cc6:	b2d2      	uxtb	r2, r2
 8009cc8:	440b      	add	r3, r1
 8009cca:	761a      	strb	r2, [r3, #24]
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	e000e100 	.word	0xe000e100
 8009cdc:	e000ed00 	.word	0xe000ed00

08009ce0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009ce4:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <SysTick_Handler+0x1c>)
 8009ce6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009ce8:	f003 faf0 	bl	800d2cc <xTaskGetSchedulerState>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d001      	beq.n	8009cf6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009cf2:	f004 faf1 	bl	800e2d8 <xPortSysTickHandler>
  }
}
 8009cf6:	bf00      	nop
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	e000e010 	.word	0xe000e010

08009d00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d00:	b580      	push	{r7, lr}
 8009d02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009d04:	2100      	movs	r1, #0
 8009d06:	f06f 0004 	mvn.w	r0, #4
 8009d0a:	f7ff ffbf 	bl	8009c8c <__NVIC_SetPriority>
#endif
}
 8009d0e:	bf00      	nop
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d1a:	f3ef 8305 	mrs	r3, IPSR
 8009d1e:	603b      	str	r3, [r7, #0]
  return(result);
 8009d20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d26:	f06f 0305 	mvn.w	r3, #5
 8009d2a:	607b      	str	r3, [r7, #4]
 8009d2c:	e00c      	b.n	8009d48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d2e:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <osKernelInitialize+0x44>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d105      	bne.n	8009d42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d36:	4b08      	ldr	r3, [pc, #32]	; (8009d58 <osKernelInitialize+0x44>)
 8009d38:	2201      	movs	r2, #1
 8009d3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	607b      	str	r3, [r7, #4]
 8009d40:	e002      	b.n	8009d48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d42:	f04f 33ff 	mov.w	r3, #4294967295
 8009d46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d48:	687b      	ldr	r3, [r7, #4]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	20000638 	.word	0x20000638

08009d5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d62:	f3ef 8305 	mrs	r3, IPSR
 8009d66:	603b      	str	r3, [r7, #0]
  return(result);
 8009d68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d6e:	f06f 0305 	mvn.w	r3, #5
 8009d72:	607b      	str	r3, [r7, #4]
 8009d74:	e010      	b.n	8009d98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d76:	4b0b      	ldr	r3, [pc, #44]	; (8009da4 <osKernelStart+0x48>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d109      	bne.n	8009d92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d7e:	f7ff ffbf 	bl	8009d00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d82:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <osKernelStart+0x48>)
 8009d84:	2202      	movs	r2, #2
 8009d86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d88:	f002 fd66 	bl	800c858 <vTaskStartScheduler>
      stat = osOK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	607b      	str	r3, [r7, #4]
 8009d90:	e002      	b.n	8009d98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009d92:	f04f 33ff 	mov.w	r3, #4294967295
 8009d96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d98:	687b      	ldr	r3, [r7, #4]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000638 	.word	0x20000638

08009da8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dae:	f3ef 8305 	mrs	r3, IPSR
 8009db2:	603b      	str	r3, [r7, #0]
  return(result);
 8009db4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009dba:	f002 fe7b 	bl	800cab4 <xTaskGetTickCountFromISR>
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	e002      	b.n	8009dc8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009dc2:	f002 fe67 	bl	800ca94 <xTaskGetTickCount>
 8009dc6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009dc8:	687b      	ldr	r3, [r7, #4]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b08e      	sub	sp, #56	; 0x38
 8009dd6:	af04      	add	r7, sp, #16
 8009dd8:	60f8      	str	r0, [r7, #12]
 8009dda:	60b9      	str	r1, [r7, #8]
 8009ddc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de2:	f3ef 8305 	mrs	r3, IPSR
 8009de6:	617b      	str	r3, [r7, #20]
  return(result);
 8009de8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d17e      	bne.n	8009eec <osThreadNew+0x11a>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d07b      	beq.n	8009eec <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009df4:	2380      	movs	r3, #128	; 0x80
 8009df6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009df8:	2318      	movs	r3, #24
 8009dfa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009e00:	f04f 33ff 	mov.w	r3, #4294967295
 8009e04:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d045      	beq.n	8009e98 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <osThreadNew+0x48>
        name = attr->name;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d008      	beq.n	8009e40 <osThreadNew+0x6e>
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	2b38      	cmp	r3, #56	; 0x38
 8009e32:	d805      	bhi.n	8009e40 <osThreadNew+0x6e>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <osThreadNew+0x72>
        return (NULL);
 8009e40:	2300      	movs	r3, #0
 8009e42:	e054      	b.n	8009eee <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	089b      	lsrs	r3, r3, #2
 8009e52:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00e      	beq.n	8009e7a <osThreadNew+0xa8>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	2bc3      	cmp	r3, #195	; 0xc3
 8009e62:	d90a      	bls.n	8009e7a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d006      	beq.n	8009e7a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <osThreadNew+0xa8>
        mem = 1;
 8009e74:	2301      	movs	r3, #1
 8009e76:	61bb      	str	r3, [r7, #24]
 8009e78:	e010      	b.n	8009e9c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10c      	bne.n	8009e9c <osThreadNew+0xca>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d108      	bne.n	8009e9c <osThreadNew+0xca>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d104      	bne.n	8009e9c <osThreadNew+0xca>
          mem = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	61bb      	str	r3, [r7, #24]
 8009e96:	e001      	b.n	8009e9c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d110      	bne.n	8009ec4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009eaa:	9202      	str	r2, [sp, #8]
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	6a3a      	ldr	r2, [r7, #32]
 8009eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f002 fadb 	bl	800c474 <xTaskCreateStatic>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	613b      	str	r3, [r7, #16]
 8009ec2:	e013      	b.n	8009eec <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d110      	bne.n	8009eec <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	f107 0310 	add.w	r3, r7, #16
 8009ed2:	9301      	str	r3, [sp, #4]
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f002 fb26 	bl	800c52e <xTaskCreate>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d001      	beq.n	8009eec <osThreadNew+0x11a>
            hTask = NULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009eec:	693b      	ldr	r3, [r7, #16]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3728      	adds	r7, #40	; 0x28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009efe:	f3ef 8305 	mrs	r3, IPSR
 8009f02:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <osDelay+0x1c>
    stat = osErrorISR;
 8009f0a:	f06f 0305 	mvn.w	r3, #5
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	e007      	b.n	8009f22 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f002 fc67 	bl	800c7f0 <vTaskDelay>
    }
  }

  return (stat);
 8009f22:	68fb      	ldr	r3, [r7, #12]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f003 ffd0 	bl	800deda <pvTimerGetTimerID>
 8009f3a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d005      	beq.n	8009f4e <TimerCallback+0x22>
    callb->func (callb->arg);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	6852      	ldr	r2, [r2, #4]
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	4798      	blx	r3
  }
}
 8009f4e:	bf00      	nop
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08c      	sub	sp, #48	; 0x30
 8009f5c:	af02      	add	r7, sp, #8
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	607a      	str	r2, [r7, #4]
 8009f62:	603b      	str	r3, [r7, #0]
 8009f64:	460b      	mov	r3, r1
 8009f66:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f6c:	f3ef 8305 	mrs	r3, IPSR
 8009f70:	613b      	str	r3, [r7, #16]
  return(result);
 8009f72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d163      	bne.n	800a040 <osTimerNew+0xe8>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d060      	beq.n	800a040 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009f7e:	2008      	movs	r0, #8
 8009f80:	f004 fa3a 	bl	800e3f8 <pvPortMalloc>
 8009f84:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d059      	beq.n	800a040 <osTimerNew+0xe8>
      callb->func = func;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009f98:	7afb      	ldrb	r3, [r7, #11]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d102      	bne.n	8009fa4 <osTimerNew+0x4c>
        reload = pdFALSE;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	61fb      	str	r3, [r7, #28]
 8009fa2:	e001      	b.n	8009fa8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fac:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d01c      	beq.n	8009ff2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d002      	beq.n	8009fc6 <osTimerNew+0x6e>
          name = attr->name;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <osTimerNew+0x84>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	2b2b      	cmp	r3, #43	; 0x2b
 8009fd4:	d902      	bls.n	8009fdc <osTimerNew+0x84>
          mem = 1;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	61bb      	str	r3, [r7, #24]
 8009fda:	e00c      	b.n	8009ff6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d108      	bne.n	8009ff6 <osTimerNew+0x9e>
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d104      	bne.n	8009ff6 <osTimerNew+0x9e>
            mem = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61bb      	str	r3, [r7, #24]
 8009ff0:	e001      	b.n	8009ff6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d10c      	bne.n	800a016 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	4b12      	ldr	r3, [pc, #72]	; (800a04c <osTimerNew+0xf4>)
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	69fa      	ldr	r2, [r7, #28]
 800a00a:	2101      	movs	r1, #1
 800a00c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a00e:	f003 fbbc 	bl	800d78a <xTimerCreateStatic>
 800a012:	6238      	str	r0, [r7, #32]
 800a014:	e00b      	b.n	800a02e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d108      	bne.n	800a02e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a01c:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <osTimerNew+0xf4>)
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	69fa      	ldr	r2, [r7, #28]
 800a024:	2101      	movs	r1, #1
 800a026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a028:	f003 fb8e 	bl	800d748 <xTimerCreate>
 800a02c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d105      	bne.n	800a040 <osTimerNew+0xe8>
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <osTimerNew+0xe8>
        vPortFree (callb);
 800a03a:	6978      	ldr	r0, [r7, #20]
 800a03c:	f004 faa8 	bl	800e590 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a040:	6a3b      	ldr	r3, [r7, #32]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3728      	adds	r7, #40	; 0x28
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	08009f2d 	.word	0x08009f2d

0800a050 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af02      	add	r7, sp, #8
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a05e:	f3ef 8305 	mrs	r3, IPSR
 800a062:	60fb      	str	r3, [r7, #12]
  return(result);
 800a064:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <osTimerStart+0x22>
    stat = osErrorISR;
 800a06a:	f06f 0305 	mvn.w	r3, #5
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	e017      	b.n	800a0a2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d103      	bne.n	800a080 <osTimerStart+0x30>
    stat = osErrorParameter;
 800a078:	f06f 0303 	mvn.w	r3, #3
 800a07c:	617b      	str	r3, [r7, #20]
 800a07e:	e010      	b.n	800a0a2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a080:	2300      	movs	r3, #0
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	2300      	movs	r3, #0
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	2104      	movs	r1, #4
 800a08a:	6938      	ldr	r0, [r7, #16]
 800a08c:	f003 fbf6 	bl	800d87c <xTimerGenericCommand>
 800a090:	4603      	mov	r3, r0
 800a092:	2b01      	cmp	r3, #1
 800a094:	d102      	bne.n	800a09c <osTimerStart+0x4c>
      stat = osOK;
 800a096:	2300      	movs	r3, #0
 800a098:	617b      	str	r3, [r7, #20]
 800a09a:	e002      	b.n	800a0a2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a09c:	f06f 0302 	mvn.w	r3, #2
 800a0a0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a0a2:	697b      	ldr	r3, [r7, #20]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b088      	sub	sp, #32
 800a0b0:	af02      	add	r7, sp, #8
 800a0b2:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0b8:	f3ef 8305 	mrs	r3, IPSR
 800a0bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0be:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d003      	beq.n	800a0cc <osTimerStop+0x20>
    stat = osErrorISR;
 800a0c4:	f06f 0305 	mvn.w	r3, #5
 800a0c8:	617b      	str	r3, [r7, #20]
 800a0ca:	e021      	b.n	800a110 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d103      	bne.n	800a0da <osTimerStop+0x2e>
    stat = osErrorParameter;
 800a0d2:	f06f 0303 	mvn.w	r3, #3
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	e01a      	b.n	800a110 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800a0da:	6938      	ldr	r0, [r7, #16]
 800a0dc:	f003 fed4 	bl	800de88 <xTimerIsTimerActive>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d103      	bne.n	800a0ee <osTimerStop+0x42>
      stat = osErrorResource;
 800a0e6:	f06f 0302 	mvn.w	r3, #2
 800a0ea:	617b      	str	r3, [r7, #20]
 800a0ec:	e010      	b.n	800a110 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2103      	movs	r1, #3
 800a0f8:	6938      	ldr	r0, [r7, #16]
 800a0fa:	f003 fbbf 	bl	800d87c <xTimerGenericCommand>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b01      	cmp	r3, #1
 800a102:	d102      	bne.n	800a10a <osTimerStop+0x5e>
        stat = osOK;
 800a104:	2300      	movs	r3, #0
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	e002      	b.n	800a110 <osTimerStop+0x64>
      } else {
        stat = osError;
 800a10a:	f04f 33ff 	mov.w	r3, #4294967295
 800a10e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a110:	697b      	ldr	r3, [r7, #20]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b086      	sub	sp, #24
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800a122:	2300      	movs	r3, #0
 800a124:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a126:	f3ef 8305 	mrs	r3, IPSR
 800a12a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a12c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d12d      	bne.n	800a18e <osEventFlagsNew+0x74>
    mem = -1;
 800a132:	f04f 33ff 	mov.w	r3, #4294967295
 800a136:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d015      	beq.n	800a16a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d006      	beq.n	800a154 <osEventFlagsNew+0x3a>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	2b1f      	cmp	r3, #31
 800a14c:	d902      	bls.n	800a154 <osEventFlagsNew+0x3a>
        mem = 1;
 800a14e:	2301      	movs	r3, #1
 800a150:	613b      	str	r3, [r7, #16]
 800a152:	e00c      	b.n	800a16e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d108      	bne.n	800a16e <osEventFlagsNew+0x54>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d104      	bne.n	800a16e <osEventFlagsNew+0x54>
          mem = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	613b      	str	r3, [r7, #16]
 800a168:	e001      	b.n	800a16e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d106      	bne.n	800a182 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 fd27 	bl	800abcc <xEventGroupCreateStatic>
 800a17e:	6178      	str	r0, [r7, #20]
 800a180:	e005      	b.n	800a18e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d102      	bne.n	800a18e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800a188:	f000 fd57 	bl	800ac3a <xEventGroupCreate>
 800a18c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800a18e:	697b      	ldr	r3, [r7, #20]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3718      	adds	r7, #24
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d004      	beq.n	800a1b6 <osEventFlagsSet+0x1e>
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800a1b6:	f06f 0303 	mvn.w	r3, #3
 800a1ba:	617b      	str	r3, [r7, #20]
 800a1bc:	e028      	b.n	800a210 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1be:	f3ef 8305 	mrs	r3, IPSR
 800a1c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d01d      	beq.n	800a206 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800a1ce:	f107 0308 	add.w	r3, r7, #8
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6938      	ldr	r0, [r7, #16]
 800a1d8:	f000 ff84 	bl	800b0e4 <xEventGroupSetBitsFromISR>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d103      	bne.n	800a1ea <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800a1e2:	f06f 0302 	mvn.w	r3, #2
 800a1e6:	617b      	str	r3, [r7, #20]
 800a1e8:	e012      	b.n	800a210 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00d      	beq.n	800a210 <osEventFlagsSet+0x78>
 800a1f4:	4b09      	ldr	r3, [pc, #36]	; (800a21c <osEventFlagsSet+0x84>)
 800a1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	e004      	b.n	800a210 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6938      	ldr	r0, [r7, #16]
 800a20a:	f000 fe6f 	bl	800aeec <xEventGroupSetBits>
 800a20e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800a210:	697b      	ldr	r3, [r7, #20]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	e000ed04 	.word	0xe000ed04

0800a220 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <osEventFlagsClear+0x1e>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800a23e:	f06f 0303 	mvn.w	r3, #3
 800a242:	617b      	str	r3, [r7, #20]
 800a244:	e019      	b.n	800a27a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a246:	f3ef 8305 	mrs	r3, IPSR
 800a24a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a24c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00e      	beq.n	800a270 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800a252:	6938      	ldr	r0, [r7, #16]
 800a254:	f000 fe26 	bl	800aea4 <xEventGroupGetBitsFromISR>
 800a258:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6938      	ldr	r0, [r7, #16]
 800a25e:	f000 fe0d 	bl	800ae7c <xEventGroupClearBitsFromISR>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d108      	bne.n	800a27a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 800a268:	f06f 0302 	mvn.w	r3, #2
 800a26c:	617b      	str	r3, [r7, #20]
 800a26e:	e004      	b.n	800a27a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6938      	ldr	r0, [r7, #16]
 800a274:	f000 fdca 	bl	800ae0c <xEventGroupClearBits>
 800a278:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800a27a:	697b      	ldr	r3, [r7, #20]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800a284:	b580      	push	{r7, lr}
 800a286:	b08c      	sub	sp, #48	; 0x30
 800a288:	af02      	add	r7, sp, #8
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d004      	beq.n	800a2a6 <osEventFlagsWait+0x22>
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d003      	beq.n	800a2ae <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800a2a6:	f06f 0303 	mvn.w	r3, #3
 800a2aa:	61fb      	str	r3, [r7, #28]
 800a2ac:	e04b      	b.n	800a346 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2ae:	f3ef 8305 	mrs	r3, IPSR
 800a2b2:	617b      	str	r3, [r7, #20]
  return(result);
 800a2b4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d003      	beq.n	800a2c2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800a2ba:	f06f 0305 	mvn.w	r3, #5
 800a2be:	61fb      	str	r3, [r7, #28]
 800a2c0:	e041      	b.n	800a346 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	627b      	str	r3, [r7, #36]	; 0x24
 800a2d0:	e001      	b.n	800a2d6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f003 0302 	and.w	r3, r3, #2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	623b      	str	r3, [r7, #32]
 800a2e4:	e001      	b.n	800a2ea <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f0:	6a3a      	ldr	r2, [r7, #32]
 800a2f2:	68b9      	ldr	r1, [r7, #8]
 800a2f4:	69b8      	ldr	r0, [r7, #24]
 800a2f6:	f000 fcbb 	bl	800ac70 <xEventGroupWaitBits>
 800a2fa:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	2b00      	cmp	r3, #0
 800a304:	d010      	beq.n	800a328 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	4013      	ands	r3, r2
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d019      	beq.n	800a346 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d003      	beq.n	800a320 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800a318:	f06f 0301 	mvn.w	r3, #1
 800a31c:	61fb      	str	r3, [r7, #28]
 800a31e:	e012      	b.n	800a346 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a320:	f06f 0302 	mvn.w	r3, #2
 800a324:	61fb      	str	r3, [r7, #28]
 800a326:	e00e      	b.n	800a346 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	4013      	ands	r3, r2
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d109      	bne.n	800a346 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d003      	beq.n	800a340 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800a338:	f06f 0301 	mvn.w	r3, #1
 800a33c:	61fb      	str	r3, [r7, #28]
 800a33e:	e002      	b.n	800a346 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a340:	f06f 0302 	mvn.w	r3, #2
 800a344:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800a346:	69fb      	ldr	r3, [r7, #28]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3728      	adds	r7, #40	; 0x28
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <osEventFlagsDelete>:

osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id) {
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a35c:	f3ef 8305 	mrs	r3, IPSR
 800a360:	60fb      	str	r3, [r7, #12]
  return(result);
 800a362:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <osEventFlagsDelete+0x20>
    stat = osErrorISR;
 800a368:	f06f 0305 	mvn.w	r3, #5
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	e00b      	b.n	800a388 <osEventFlagsDelete+0x38>
  }
  else if (hEventGroup == NULL) {
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d103      	bne.n	800a37e <osEventFlagsDelete+0x2e>
    stat = osErrorParameter;
 800a376:	f06f 0303 	mvn.w	r3, #3
 800a37a:	617b      	str	r3, [r7, #20]
 800a37c:	e004      	b.n	800a388 <osEventFlagsDelete+0x38>
  }
  else {
    stat = osOK;
 800a37e:	2300      	movs	r3, #0
 800a380:	617b      	str	r3, [r7, #20]
    vEventGroupDelete (hEventGroup);
 800a382:	6938      	ldr	r0, [r7, #16]
 800a384:	f000 fe3d 	bl	800b002 <vEventGroupDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a388:	697b      	ldr	r3, [r7, #20]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <osMutexNew>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a392:	b580      	push	{r7, lr}
 800a394:	b088      	sub	sp, #32
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a39a:	2300      	movs	r3, #0
 800a39c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a39e:	f3ef 8305 	mrs	r3, IPSR
 800a3a2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3a4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d174      	bne.n	800a494 <osMutexNew+0x102>
    if (attr != NULL) {
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d003      	beq.n	800a3b8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	61bb      	str	r3, [r7, #24]
 800a3b6:	e001      	b.n	800a3bc <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <osMutexNew+0x3a>
      rmtx = 1U;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	617b      	str	r3, [r7, #20]
 800a3ca:	e001      	b.n	800a3d0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	f003 0308 	and.w	r3, r3, #8
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d15c      	bne.n	800a494 <osMutexNew+0x102>
      mem = -1;
 800a3da:	f04f 33ff 	mov.w	r3, #4294967295
 800a3de:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d015      	beq.n	800a412 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d006      	beq.n	800a3fc <osMutexNew+0x6a>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	2b4f      	cmp	r3, #79	; 0x4f
 800a3f4:	d902      	bls.n	800a3fc <osMutexNew+0x6a>
          mem = 1;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	613b      	str	r3, [r7, #16]
 800a3fa:	e00c      	b.n	800a416 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d108      	bne.n	800a416 <osMutexNew+0x84>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d104      	bne.n	800a416 <osMutexNew+0x84>
            mem = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	613b      	str	r3, [r7, #16]
 800a410:	e001      	b.n	800a416 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a412:	2300      	movs	r3, #0
 800a414:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d112      	bne.n	800a442 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d007      	beq.n	800a432 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	4619      	mov	r1, r3
 800a428:	2004      	movs	r0, #4
 800a42a:	f001 f892 	bl	800b552 <xQueueCreateMutexStatic>
 800a42e:	61f8      	str	r0, [r7, #28]
 800a430:	e016      	b.n	800a460 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	4619      	mov	r1, r3
 800a438:	2001      	movs	r0, #1
 800a43a:	f001 f88a 	bl	800b552 <xQueueCreateMutexStatic>
 800a43e:	61f8      	str	r0, [r7, #28]
 800a440:	e00e      	b.n	800a460 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10b      	bne.n	800a460 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d004      	beq.n	800a458 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a44e:	2004      	movs	r0, #4
 800a450:	f001 f867 	bl	800b522 <xQueueCreateMutex>
 800a454:	61f8      	str	r0, [r7, #28]
 800a456:	e003      	b.n	800a460 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a458:	2001      	movs	r0, #1
 800a45a:	f001 f862 	bl	800b522 <xQueueCreateMutex>
 800a45e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00c      	beq.n	800a480 <osMutexNew+0xee>
        if (attr != NULL) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d003      	beq.n	800a474 <osMutexNew+0xe2>
          name = attr->name;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	e001      	b.n	800a478 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a474:	2300      	movs	r3, #0
 800a476:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a478:	68f9      	ldr	r1, [r7, #12]
 800a47a:	69f8      	ldr	r0, [r7, #28]
 800a47c:	f001 ff72 	bl	800c364 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d006      	beq.n	800a494 <osMutexNew+0x102>
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d003      	beq.n	800a494 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	f043 0301 	orr.w	r3, r3, #1
 800a492:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a494:	69fb      	ldr	r3, [r7, #28]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3720      	adds	r7, #32
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b086      	sub	sp, #24
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f023 0301 	bic.w	r3, r3, #1
 800a4ae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4bc:	f3ef 8305 	mrs	r3, IPSR
 800a4c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a4c2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d003      	beq.n	800a4d0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a4c8:	f06f 0305 	mvn.w	r3, #5
 800a4cc:	617b      	str	r3, [r7, #20]
 800a4ce:	e02c      	b.n	800a52a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d103      	bne.n	800a4de <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a4d6:	f06f 0303 	mvn.w	r3, #3
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	e025      	b.n	800a52a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d011      	beq.n	800a508 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6938      	ldr	r0, [r7, #16]
 800a4e8:	f001 f882 	bl	800b5f0 <xQueueTakeMutexRecursive>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d01b      	beq.n	800a52a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d003      	beq.n	800a500 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a4f8:	f06f 0301 	mvn.w	r3, #1
 800a4fc:	617b      	str	r3, [r7, #20]
 800a4fe:	e014      	b.n	800a52a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a500:	f06f 0302 	mvn.w	r3, #2
 800a504:	617b      	str	r3, [r7, #20]
 800a506:	e010      	b.n	800a52a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a508:	6839      	ldr	r1, [r7, #0]
 800a50a:	6938      	ldr	r0, [r7, #16]
 800a50c:	f001 fc16 	bl	800bd3c <xQueueSemaphoreTake>
 800a510:	4603      	mov	r3, r0
 800a512:	2b01      	cmp	r3, #1
 800a514:	d009      	beq.n	800a52a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a51c:	f06f 0301 	mvn.w	r3, #1
 800a520:	617b      	str	r3, [r7, #20]
 800a522:	e002      	b.n	800a52a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a524:	f06f 0302 	mvn.w	r3, #2
 800a528:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a52a:	697b      	ldr	r3, [r7, #20]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f023 0301 	bic.w	r3, r3, #1
 800a542:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a550:	f3ef 8305 	mrs	r3, IPSR
 800a554:	60bb      	str	r3, [r7, #8]
  return(result);
 800a556:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a55c:	f06f 0305 	mvn.w	r3, #5
 800a560:	617b      	str	r3, [r7, #20]
 800a562:	e01f      	b.n	800a5a4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d103      	bne.n	800a572 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a56a:	f06f 0303 	mvn.w	r3, #3
 800a56e:	617b      	str	r3, [r7, #20]
 800a570:	e018      	b.n	800a5a4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d009      	beq.n	800a58c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a578:	6938      	ldr	r0, [r7, #16]
 800a57a:	f001 f805 	bl	800b588 <xQueueGiveMutexRecursive>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b01      	cmp	r3, #1
 800a582:	d00f      	beq.n	800a5a4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a584:	f06f 0302 	mvn.w	r3, #2
 800a588:	617b      	str	r3, [r7, #20]
 800a58a:	e00b      	b.n	800a5a4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a58c:	2300      	movs	r3, #0
 800a58e:	2200      	movs	r2, #0
 800a590:	2100      	movs	r1, #0
 800a592:	6938      	ldr	r0, [r7, #16]
 800a594:	f001 f8cc 	bl	800b730 <xQueueGenericSend>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d002      	beq.n	800a5a4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a59e:	f06f 0302 	mvn.w	r3, #2
 800a5a2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a5a4:	697b      	ldr	r3, [r7, #20]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b08a      	sub	sp, #40	; 0x28
 800a5b2:	af02      	add	r7, sp, #8
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5be:	f3ef 8305 	mrs	r3, IPSR
 800a5c2:	613b      	str	r3, [r7, #16]
  return(result);
 800a5c4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d175      	bne.n	800a6b6 <osSemaphoreNew+0x108>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d072      	beq.n	800a6b6 <osSemaphoreNew+0x108>
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d86e      	bhi.n	800a6b6 <osSemaphoreNew+0x108>
    mem = -1;
 800a5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d015      	beq.n	800a610 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d006      	beq.n	800a5fa <osSemaphoreNew+0x4c>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	2b4f      	cmp	r3, #79	; 0x4f
 800a5f2:	d902      	bls.n	800a5fa <osSemaphoreNew+0x4c>
        mem = 1;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	61bb      	str	r3, [r7, #24]
 800a5f8:	e00c      	b.n	800a614 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d108      	bne.n	800a614 <osSemaphoreNew+0x66>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d104      	bne.n	800a614 <osSemaphoreNew+0x66>
          mem = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	61bb      	str	r3, [r7, #24]
 800a60e:	e001      	b.n	800a614 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a610:	2300      	movs	r3, #0
 800a612:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a61a:	d04c      	beq.n	800a6b6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d128      	bne.n	800a674 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d10a      	bne.n	800a63e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	2203      	movs	r2, #3
 800a62e:	9200      	str	r2, [sp, #0]
 800a630:	2200      	movs	r2, #0
 800a632:	2100      	movs	r1, #0
 800a634:	2001      	movs	r0, #1
 800a636:	f000 fe85 	bl	800b344 <xQueueGenericCreateStatic>
 800a63a:	61f8      	str	r0, [r7, #28]
 800a63c:	e005      	b.n	800a64a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a63e:	2203      	movs	r2, #3
 800a640:	2100      	movs	r1, #0
 800a642:	2001      	movs	r0, #1
 800a644:	f000 fef6 	bl	800b434 <xQueueGenericCreate>
 800a648:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d022      	beq.n	800a696 <osSemaphoreNew+0xe8>
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d01f      	beq.n	800a696 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a656:	2300      	movs	r3, #0
 800a658:	2200      	movs	r2, #0
 800a65a:	2100      	movs	r1, #0
 800a65c:	69f8      	ldr	r0, [r7, #28]
 800a65e:	f001 f867 	bl	800b730 <xQueueGenericSend>
 800a662:	4603      	mov	r3, r0
 800a664:	2b01      	cmp	r3, #1
 800a666:	d016      	beq.n	800a696 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a668:	69f8      	ldr	r0, [r7, #28]
 800a66a:	f001 fd2f 	bl	800c0cc <vQueueDelete>
            hSemaphore = NULL;
 800a66e:	2300      	movs	r3, #0
 800a670:	61fb      	str	r3, [r7, #28]
 800a672:	e010      	b.n	800a696 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d108      	bne.n	800a68c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	461a      	mov	r2, r3
 800a680:	68b9      	ldr	r1, [r7, #8]
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 ffea 	bl	800b65c <xQueueCreateCountingSemaphoreStatic>
 800a688:	61f8      	str	r0, [r7, #28]
 800a68a:	e004      	b.n	800a696 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a68c:	68b9      	ldr	r1, [r7, #8]
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f001 f81b 	bl	800b6ca <xQueueCreateCountingSemaphore>
 800a694:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00c      	beq.n	800a6b6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d003      	beq.n	800a6aa <osSemaphoreNew+0xfc>
          name = attr->name;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	617b      	str	r3, [r7, #20]
 800a6a8:	e001      	b.n	800a6ae <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a6ae:	6979      	ldr	r1, [r7, #20]
 800a6b0:	69f8      	ldr	r0, [r7, #28]
 800a6b2:	f001 fe57 	bl	800c364 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a6b6:	69fb      	ldr	r3, [r7, #28]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d103      	bne.n	800a6e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a6d8:	f06f 0303 	mvn.w	r3, #3
 800a6dc:	617b      	str	r3, [r7, #20]
 800a6de:	e039      	b.n	800a754 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6e0:	f3ef 8305 	mrs	r3, IPSR
 800a6e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d022      	beq.n	800a732 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a6f2:	f06f 0303 	mvn.w	r3, #3
 800a6f6:	617b      	str	r3, [r7, #20]
 800a6f8:	e02c      	b.n	800a754 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a6fe:	f107 0308 	add.w	r3, r7, #8
 800a702:	461a      	mov	r2, r3
 800a704:	2100      	movs	r1, #0
 800a706:	6938      	ldr	r0, [r7, #16]
 800a708:	f001 fc24 	bl	800bf54 <xQueueReceiveFromISR>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d003      	beq.n	800a71a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a712:	f06f 0302 	mvn.w	r3, #2
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	e01c      	b.n	800a754 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d019      	beq.n	800a754 <osSemaphoreAcquire+0x94>
 800a720:	4b0f      	ldr	r3, [pc, #60]	; (800a760 <osSemaphoreAcquire+0xa0>)
 800a722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	e010      	b.n	800a754 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a732:	6839      	ldr	r1, [r7, #0]
 800a734:	6938      	ldr	r0, [r7, #16]
 800a736:	f001 fb01 	bl	800bd3c <xQueueSemaphoreTake>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d009      	beq.n	800a754 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d003      	beq.n	800a74e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a746:	f06f 0301 	mvn.w	r3, #1
 800a74a:	617b      	str	r3, [r7, #20]
 800a74c:	e002      	b.n	800a754 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a74e:	f06f 0302 	mvn.w	r3, #2
 800a752:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a754:	697b      	ldr	r3, [r7, #20]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3718      	adds	r7, #24
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	e000ed04 	.word	0xe000ed04

0800a764 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a770:	2300      	movs	r3, #0
 800a772:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d103      	bne.n	800a782 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a77a:	f06f 0303 	mvn.w	r3, #3
 800a77e:	617b      	str	r3, [r7, #20]
 800a780:	e02c      	b.n	800a7dc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a782:	f3ef 8305 	mrs	r3, IPSR
 800a786:	60fb      	str	r3, [r7, #12]
  return(result);
 800a788:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d01a      	beq.n	800a7c4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a78e:	2300      	movs	r3, #0
 800a790:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a792:	f107 0308 	add.w	r3, r7, #8
 800a796:	4619      	mov	r1, r3
 800a798:	6938      	ldr	r0, [r7, #16]
 800a79a:	f001 f962 	bl	800ba62 <xQueueGiveFromISR>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d003      	beq.n	800a7ac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a7a4:	f06f 0302 	mvn.w	r3, #2
 800a7a8:	617b      	str	r3, [r7, #20]
 800a7aa:	e017      	b.n	800a7dc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d014      	beq.n	800a7dc <osSemaphoreRelease+0x78>
 800a7b2:	4b0d      	ldr	r3, [pc, #52]	; (800a7e8 <osSemaphoreRelease+0x84>)
 800a7b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7b8:	601a      	str	r2, [r3, #0]
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	e00b      	b.n	800a7dc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	6938      	ldr	r0, [r7, #16]
 800a7cc:	f000 ffb0 	bl	800b730 <xQueueGenericSend>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d002      	beq.n	800a7dc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a7d6:	f06f 0302 	mvn.w	r3, #2
 800a7da:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a7dc:	697b      	ldr	r3, [r7, #20]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7f8:	f3ef 8305 	mrs	r3, IPSR
 800a7fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a800:	2b00      	cmp	r3, #0
 800a802:	d003      	beq.n	800a80c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a804:	f06f 0305 	mvn.w	r3, #5
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	e00e      	b.n	800a82a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d103      	bne.n	800a81a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a812:	f06f 0303 	mvn.w	r3, #3
 800a816:	617b      	str	r3, [r7, #20]
 800a818:	e007      	b.n	800a82a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a81a:	6938      	ldr	r0, [r7, #16]
 800a81c:	f001 fdcc 	bl	800c3b8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a824:	6938      	ldr	r0, [r7, #16]
 800a826:	f001 fc51 	bl	800c0cc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a82a:	697b      	ldr	r3, [r7, #20]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a834:	b580      	push	{r7, lr}
 800a836:	b08a      	sub	sp, #40	; 0x28
 800a838:	af02      	add	r7, sp, #8
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a840:	2300      	movs	r3, #0
 800a842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a844:	f3ef 8305 	mrs	r3, IPSR
 800a848:	613b      	str	r3, [r7, #16]
  return(result);
 800a84a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d15f      	bne.n	800a910 <osMessageQueueNew+0xdc>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d05c      	beq.n	800a910 <osMessageQueueNew+0xdc>
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d059      	beq.n	800a910 <osMessageQueueNew+0xdc>
    mem = -1;
 800a85c:	f04f 33ff 	mov.w	r3, #4294967295
 800a860:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d029      	beq.n	800a8bc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d012      	beq.n	800a896 <osMessageQueueNew+0x62>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	2b4f      	cmp	r3, #79	; 0x4f
 800a876:	d90e      	bls.n	800a896 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00a      	beq.n	800a896 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	695a      	ldr	r2, [r3, #20]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	68b9      	ldr	r1, [r7, #8]
 800a888:	fb01 f303 	mul.w	r3, r1, r3
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d302      	bcc.n	800a896 <osMessageQueueNew+0x62>
        mem = 1;
 800a890:	2301      	movs	r3, #1
 800a892:	61bb      	str	r3, [r7, #24]
 800a894:	e014      	b.n	800a8c0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d110      	bne.n	800a8c0 <osMessageQueueNew+0x8c>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10c      	bne.n	800a8c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d108      	bne.n	800a8c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d104      	bne.n	800a8c0 <osMessageQueueNew+0x8c>
          mem = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	61bb      	str	r3, [r7, #24]
 800a8ba:	e001      	b.n	800a8c0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d10b      	bne.n	800a8de <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	691a      	ldr	r2, [r3, #16]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	9100      	str	r1, [sp, #0]
 800a8d2:	68b9      	ldr	r1, [r7, #8]
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 fd35 	bl	800b344 <xQueueGenericCreateStatic>
 800a8da:	61f8      	str	r0, [r7, #28]
 800a8dc:	e008      	b.n	800a8f0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d105      	bne.n	800a8f0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	68b9      	ldr	r1, [r7, #8]
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f000 fda3 	bl	800b434 <xQueueGenericCreate>
 800a8ee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00c      	beq.n	800a910 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d003      	beq.n	800a904 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	e001      	b.n	800a908 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a904:	2300      	movs	r3, #0
 800a906:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a908:	6979      	ldr	r1, [r7, #20]
 800a90a:	69f8      	ldr	r0, [r7, #28]
 800a90c:	f001 fd2a 	bl	800c364 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a910:	69fb      	ldr	r3, [r7, #28]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3720      	adds	r7, #32
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
	...

0800a91c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b088      	sub	sp, #32
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	603b      	str	r3, [r7, #0]
 800a928:	4613      	mov	r3, r2
 800a92a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a930:	2300      	movs	r3, #0
 800a932:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a934:	f3ef 8305 	mrs	r3, IPSR
 800a938:	617b      	str	r3, [r7, #20]
  return(result);
 800a93a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d028      	beq.n	800a992 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d005      	beq.n	800a952 <osMessageQueuePut+0x36>
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <osMessageQueuePut+0x36>
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a952:	f06f 0303 	mvn.w	r3, #3
 800a956:	61fb      	str	r3, [r7, #28]
 800a958:	e038      	b.n	800a9cc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a95a:	2300      	movs	r3, #0
 800a95c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a95e:	f107 0210 	add.w	r2, r7, #16
 800a962:	2300      	movs	r3, #0
 800a964:	68b9      	ldr	r1, [r7, #8]
 800a966:	69b8      	ldr	r0, [r7, #24]
 800a968:	f000 ffe0 	bl	800b92c <xQueueGenericSendFromISR>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d003      	beq.n	800a97a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a972:	f06f 0302 	mvn.w	r3, #2
 800a976:	61fb      	str	r3, [r7, #28]
 800a978:	e028      	b.n	800a9cc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d025      	beq.n	800a9cc <osMessageQueuePut+0xb0>
 800a980:	4b15      	ldr	r3, [pc, #84]	; (800a9d8 <osMessageQueuePut+0xbc>)
 800a982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	e01c      	b.n	800a9cc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <osMessageQueuePut+0x82>
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d103      	bne.n	800a9a6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a99e:	f06f 0303 	mvn.w	r3, #3
 800a9a2:	61fb      	str	r3, [r7, #28]
 800a9a4:	e012      	b.n	800a9cc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	68b9      	ldr	r1, [r7, #8]
 800a9ac:	69b8      	ldr	r0, [r7, #24]
 800a9ae:	f000 febf 	bl	800b730 <xQueueGenericSend>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d009      	beq.n	800a9cc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a9be:	f06f 0301 	mvn.w	r3, #1
 800a9c2:	61fb      	str	r3, [r7, #28]
 800a9c4:	e002      	b.n	800a9cc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a9c6:	f06f 0302 	mvn.w	r3, #2
 800a9ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a9cc:	69fb      	ldr	r3, [r7, #28]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3720      	adds	r7, #32
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	e000ed04 	.word	0xe000ed04

0800a9dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b088      	sub	sp, #32
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
 800a9e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9f2:	f3ef 8305 	mrs	r3, IPSR
 800a9f6:	617b      	str	r3, [r7, #20]
  return(result);
 800a9f8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d028      	beq.n	800aa50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d005      	beq.n	800aa10 <osMessageQueueGet+0x34>
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <osMessageQueueGet+0x34>
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d003      	beq.n	800aa18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800aa10:	f06f 0303 	mvn.w	r3, #3
 800aa14:	61fb      	str	r3, [r7, #28]
 800aa16:	e037      	b.n	800aa88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800aa1c:	f107 0310 	add.w	r3, r7, #16
 800aa20:	461a      	mov	r2, r3
 800aa22:	68b9      	ldr	r1, [r7, #8]
 800aa24:	69b8      	ldr	r0, [r7, #24]
 800aa26:	f001 fa95 	bl	800bf54 <xQueueReceiveFromISR>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d003      	beq.n	800aa38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800aa30:	f06f 0302 	mvn.w	r3, #2
 800aa34:	61fb      	str	r3, [r7, #28]
 800aa36:	e027      	b.n	800aa88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d024      	beq.n	800aa88 <osMessageQueueGet+0xac>
 800aa3e:	4b15      	ldr	r3, [pc, #84]	; (800aa94 <osMessageQueueGet+0xb8>)
 800aa40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	e01b      	b.n	800aa88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d002      	beq.n	800aa5c <osMessageQueueGet+0x80>
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d103      	bne.n	800aa64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800aa5c:	f06f 0303 	mvn.w	r3, #3
 800aa60:	61fb      	str	r3, [r7, #28]
 800aa62:	e011      	b.n	800aa88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	68b9      	ldr	r1, [r7, #8]
 800aa68:	69b8      	ldr	r0, [r7, #24]
 800aa6a:	f001 f887 	bl	800bb7c <xQueueReceive>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d009      	beq.n	800aa88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d003      	beq.n	800aa82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800aa7a:	f06f 0301 	mvn.w	r3, #1
 800aa7e:	61fb      	str	r3, [r7, #28]
 800aa80:	e002      	b.n	800aa88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800aa82:	f06f 0302 	mvn.w	r3, #2
 800aa86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aa88:	69fb      	ldr	r3, [r7, #28]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3720      	adds	r7, #32
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	e000ed04 	.word	0xe000ed04

0800aa98 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d102      	bne.n	800aab0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	617b      	str	r3, [r7, #20]
 800aaae:	e00e      	b.n	800aace <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aab0:	f3ef 8305 	mrs	r3, IPSR
 800aab4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aab6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d004      	beq.n	800aac6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800aabc:	6938      	ldr	r0, [r7, #16]
 800aabe:	f001 fae7 	bl	800c090 <uxQueueMessagesWaitingFromISR>
 800aac2:	6178      	str	r0, [r7, #20]
 800aac4:	e003      	b.n	800aace <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800aac6:	6938      	ldr	r0, [r7, #16]
 800aac8:	f001 fac4 	bl	800c054 <uxQueueMessagesWaiting>
 800aacc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800aace:	697b      	ldr	r3, [r7, #20]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aae4:	f3ef 8305 	mrs	r3, IPSR
 800aae8:	60fb      	str	r3, [r7, #12]
  return(result);
 800aaea:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d003      	beq.n	800aaf8 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800aaf0:	f06f 0305 	mvn.w	r3, #5
 800aaf4:	617b      	str	r3, [r7, #20]
 800aaf6:	e00c      	b.n	800ab12 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d103      	bne.n	800ab06 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800aafe:	f06f 0303 	mvn.w	r3, #3
 800ab02:	617b      	str	r3, [r7, #20]
 800ab04:	e005      	b.n	800ab12 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	6938      	ldr	r0, [r7, #16]
 800ab0e:	f000 fbb1 	bl	800b274 <xQueueGenericReset>
  }

  return (stat);
 800ab12:	697b      	ldr	r3, [r7, #20]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <osMessageQueueDelete>:

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b086      	sub	sp, #24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab28:	f3ef 8305 	mrs	r3, IPSR
 800ab2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d003      	beq.n	800ab3c <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800ab34:	f06f 0305 	mvn.w	r3, #5
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	e00e      	b.n	800ab5a <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d103      	bne.n	800ab4a <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800ab42:	f06f 0303 	mvn.w	r3, #3
 800ab46:	617b      	str	r3, [r7, #20]
 800ab48:	e007      	b.n	800ab5a <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800ab4a:	6938      	ldr	r0, [r7, #16]
 800ab4c:	f001 fc34 	bl	800c3b8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800ab54:	6938      	ldr	r0, [r7, #16]
 800ab56:	f001 fab9 	bl	800c0cc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800ab5a:	697b      	ldr	r3, [r7, #20]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3718      	adds	r7, #24
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	4a07      	ldr	r2, [pc, #28]	; (800ab90 <vApplicationGetIdleTaskMemory+0x2c>)
 800ab74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	4a06      	ldr	r2, [pc, #24]	; (800ab94 <vApplicationGetIdleTaskMemory+0x30>)
 800ab7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2280      	movs	r2, #128	; 0x80
 800ab80:	601a      	str	r2, [r3, #0]
}
 800ab82:	bf00      	nop
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	2000063c 	.word	0x2000063c
 800ab94:	20000700 	.word	0x20000700

0800ab98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	4a07      	ldr	r2, [pc, #28]	; (800abc4 <vApplicationGetTimerTaskMemory+0x2c>)
 800aba8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	4a06      	ldr	r2, [pc, #24]	; (800abc8 <vApplicationGetTimerTaskMemory+0x30>)
 800abae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abb6:	601a      	str	r2, [r3, #0]
}
 800abb8:	bf00      	nop
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	20000900 	.word	0x20000900
 800abc8:	200009c4 	.word	0x200009c4

0800abcc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10a      	bne.n	800abf0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800abec:	bf00      	nop
 800abee:	e7fe      	b.n	800abee <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800abf0:	2320      	movs	r3, #32
 800abf2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b20      	cmp	r3, #32
 800abf8:	d00a      	beq.n	800ac10 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	60fb      	str	r3, [r7, #12]
}
 800ac0c:	bf00      	nop
 800ac0e:	e7fe      	b.n	800ac0e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00a      	beq.n	800ac30 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	3304      	adds	r3, #4
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 fa71 	bl	800b10c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800ac30:	697b      	ldr	r3, [r7, #20]
	}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800ac40:	2020      	movs	r0, #32
 800ac42:	f003 fbd9 	bl	800e3f8 <pvPortMalloc>
 800ac46:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00a      	beq.n	800ac64 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3304      	adds	r3, #4
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 fa57 	bl	800b10c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800ac64:	687b      	ldr	r3, [r7, #4]
	}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
	...

0800ac70 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b090      	sub	sp, #64	; 0x40
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
 800ac7c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800ac86:	2300      	movs	r3, #0
 800ac88:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <xEventGroupWaitBits+0x36>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	623b      	str	r3, [r7, #32]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00a      	beq.n	800acc6 <xEventGroupWaitBits+0x56>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	61fb      	str	r3, [r7, #28]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <xEventGroupWaitBits+0x72>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	61bb      	str	r3, [r7, #24]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ace2:	f002 faf3 	bl	800d2cc <xTaskGetSchedulerState>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d102      	bne.n	800acf2 <xEventGroupWaitBits+0x82>
 800acec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <xEventGroupWaitBits+0x86>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e000      	b.n	800acf8 <xEventGroupWaitBits+0x88>
 800acf6:	2300      	movs	r3, #0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	617b      	str	r3, [r7, #20]
}
 800ad0e:	bf00      	nop
 800ad10:	e7fe      	b.n	800ad10 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800ad12:	f001 fe13 	bl	800c93c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800ad16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	68b9      	ldr	r1, [r7, #8]
 800ad20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad22:	f000 f9bd 	bl	800b0a0 <prvTestWaitCondition>
 800ad26:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00e      	beq.n	800ad4c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d028      	beq.n	800ad8e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ad3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	43db      	mvns	r3, r3
 800ad44:	401a      	ands	r2, r3
 800ad46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	e020      	b.n	800ad8e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800ad4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d104      	bne.n	800ad5c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800ad56:	2301      	movs	r3, #1
 800ad58:	633b      	str	r3, [r7, #48]	; 0x30
 800ad5a:	e018      	b.n	800ad8e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d003      	beq.n	800ad6a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad68:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d003      	beq.n	800ad78 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad76:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800ad78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7a:	1d18      	adds	r0, r3, #4
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad80:	4313      	orrs	r3, r2
 800ad82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad84:	4619      	mov	r1, r3
 800ad86:	f002 f805 	bl	800cd94 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800ad8e:	f001 fde3 	bl	800c958 <xTaskResumeAll>
 800ad92:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800ad94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d031      	beq.n	800adfe <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d107      	bne.n	800adb0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800ada0:	4b19      	ldr	r3, [pc, #100]	; (800ae08 <xEventGroupWaitBits+0x198>)
 800ada2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800adb0:	f002 fc02 	bl	800d5b8 <uxTaskResetEventItemValue>
 800adb4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800adb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d11a      	bne.n	800adf6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800adc0:	f003 f9f8 	bl	800e1b4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800adc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	68b9      	ldr	r1, [r7, #8]
 800adce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800add0:	f000 f966 	bl	800b0a0 <prvTestWaitCondition>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d009      	beq.n	800adee <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d006      	beq.n	800adee <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ade0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	43db      	mvns	r3, r3
 800ade8:	401a      	ands	r2, r3
 800adea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adec:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800adee:	2301      	movs	r3, #1
 800adf0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800adf2:	f003 fa0f 	bl	800e214 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800adf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800adfc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800adfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3740      	adds	r7, #64	; 0x40
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	e000ed04 	.word	0xe000ed04

0800ae0c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10a      	bne.n	800ae36 <xEventGroupClearBits+0x2a>
	__asm volatile
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	60fb      	str	r3, [r7, #12]
}
 800ae32:	bf00      	nop
 800ae34:	e7fe      	b.n	800ae34 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00a      	beq.n	800ae56 <xEventGroupClearBits+0x4a>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	60bb      	str	r3, [r7, #8]
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800ae56:	f003 f9ad 	bl	800e1b4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	43db      	mvns	r3, r3
 800ae68:	401a      	ands	r2, r3
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800ae6e:	f003 f9d1 	bl	800e214 <vPortExitCritical>

	return uxReturn;
 800ae72:	693b      	ldr	r3, [r7, #16]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3718      	adds	r7, #24
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800ae86:	2300      	movs	r3, #0
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	4804      	ldr	r0, [pc, #16]	; (800aea0 <xEventGroupClearBitsFromISR+0x24>)
 800ae8e:	f003 f845 	bl	800df1c <xTimerPendFunctionCallFromISR>
 800ae92:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800ae94:	68fb      	ldr	r3, [r7, #12]
	}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	0800b087 	.word	0x0800b087

0800aea4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b089      	sub	sp, #36	; 0x24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aeb0:	f3ef 8211 	mrs	r2, BASEPRI
 800aeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb8:	f383 8811 	msr	BASEPRI, r3
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	60fa      	str	r2, [r7, #12]
 800aec6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aec8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aeca:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	617b      	str	r3, [r7, #20]
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aedc:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800aede:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800aee0:	4618      	mov	r0, r3
 800aee2:	3724      	adds	r7, #36	; 0x24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08e      	sub	sp, #56	; 0x38
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800aef6:	2300      	movs	r3, #0
 800aef8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800aefe:	2300      	movs	r3, #0
 800af00:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10a      	bne.n	800af1e <xEventGroupSetBits+0x32>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	613b      	str	r3, [r7, #16]
}
 800af1a:	bf00      	nop
 800af1c:	e7fe      	b.n	800af1c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00a      	beq.n	800af3e <xEventGroupSetBits+0x52>
	__asm volatile
 800af28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2c:	f383 8811 	msr	BASEPRI, r3
 800af30:	f3bf 8f6f 	isb	sy
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	60fb      	str	r3, [r7, #12]
}
 800af3a:	bf00      	nop
 800af3c:	e7fe      	b.n	800af3c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	3304      	adds	r3, #4
 800af42:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	3308      	adds	r3, #8
 800af48:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800af4a:	f001 fcf7 	bl	800c93c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800af54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	431a      	orrs	r2, r3
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800af60:	e03c      	b.n	800afdc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800af62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800af68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800af6e:	2300      	movs	r3, #0
 800af70:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800af78:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af80:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d108      	bne.n	800af9e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	4013      	ands	r3, r2
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00b      	beq.n	800afb0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800af98:	2301      	movs	r3, #1
 800af9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af9c:	e008      	b.n	800afb0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800af9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	4013      	ands	r3, r2
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d101      	bne.n	800afb0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800afac:	2301      	movs	r3, #1
 800afae:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800afb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d010      	beq.n	800afd8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d003      	beq.n	800afc8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800afc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800afc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800afd0:	4619      	mov	r1, r3
 800afd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800afd4:	f001 ffaa 	bl	800cf2c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800afdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d1be      	bne.n	800af62 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800afe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afea:	43db      	mvns	r3, r3
 800afec:	401a      	ands	r2, r3
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800aff2:	f001 fcb1 	bl	800c958 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	681b      	ldr	r3, [r3, #0]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3738      	adds	r7, #56	; 0x38
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b086      	sub	sp, #24
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	3304      	adds	r3, #4
 800b012:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 800b014:	f001 fc92 	bl	800c93c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800b018:	e017      	b.n	800b04a <vEventGroupDelete+0x48>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	3308      	adds	r3, #8
 800b022:	429a      	cmp	r2, r3
 800b024:	d10a      	bne.n	800b03c <vEventGroupDelete+0x3a>
	__asm volatile
 800b026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	60fb      	str	r3, [r7, #12]
}
 800b038:	bf00      	nop
 800b03a:	e7fe      	b.n	800b03a <vEventGroupDelete+0x38>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800b044:	4618      	mov	r0, r3
 800b046:	f001 ff71 	bl	800cf2c <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1e3      	bne.n	800b01a <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	7f1b      	ldrb	r3, [r3, #28]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d102      	bne.n	800b060 <vEventGroupDelete+0x5e>
			{
				vPortFree( pxEventBits );
 800b05a:	6978      	ldr	r0, [r7, #20]
 800b05c:	f003 fa98 	bl	800e590 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 800b060:	f001 fc7a 	bl	800c958 <xTaskResumeAll>
}
 800b064:	bf00      	nop
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff ff37 	bl	800aeec <xEventGroupSetBits>
}
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b082      	sub	sp, #8
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7ff feba 	bl	800ae0c <xEventGroupClearBits>
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b087      	sub	sp, #28
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d107      	bne.n	800b0c6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00a      	beq.n	800b0d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	617b      	str	r3, [r7, #20]
 800b0c4:	e007      	b.n	800b0d6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d101      	bne.n	800b0d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800b0d6:	697b      	ldr	r3, [r7, #20]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	371c      	adds	r7, #28
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	68f9      	ldr	r1, [r7, #12]
 800b0f6:	4804      	ldr	r0, [pc, #16]	; (800b108 <xEventGroupSetBitsFromISR+0x24>)
 800b0f8:	f002 ff10 	bl	800df1c <xTimerPendFunctionCallFromISR>
 800b0fc:	6178      	str	r0, [r7, #20]

		return xReturn;
 800b0fe:	697b      	ldr	r3, [r7, #20]
	}
 800b100:	4618      	mov	r0, r3
 800b102:	3718      	adds	r7, #24
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	0800b06d 	.word	0x0800b06d

0800b10c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f103 0208 	add.w	r2, r3, #8
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f04f 32ff 	mov.w	r2, #4294967295
 800b124:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f103 0208 	add.w	r2, r3, #8
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f103 0208 	add.w	r2, r3, #8
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b15a:	bf00      	nop
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b166:	b480      	push	{r7}
 800b168:	b085      	sub	sp, #20
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	689a      	ldr	r2, [r3, #8]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	1c5a      	adds	r2, r3, #1
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	601a      	str	r2, [r3, #0]
}
 800b1a2:	bf00      	nop
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c4:	d103      	bne.n	800b1ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	e00c      	b.n	800b1e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	3308      	adds	r3, #8
 800b1d2:	60fb      	str	r3, [r7, #12]
 800b1d4:	e002      	b.n	800b1dc <vListInsert+0x2e>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	60fb      	str	r3, [r7, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d2f6      	bcs.n	800b1d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	1c5a      	adds	r2, r3, #1
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	601a      	str	r2, [r3, #0]
}
 800b214:	bf00      	nop
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	6892      	ldr	r2, [r2, #8]
 800b236:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	6852      	ldr	r2, [r2, #4]
 800b240:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d103      	bne.n	800b254 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689a      	ldr	r2, [r3, #8]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	1e5a      	subs	r2, r3, #1
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10a      	bne.n	800b29e <xQueueGenericReset+0x2a>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	60bb      	str	r3, [r7, #8]
}
 800b29a:	bf00      	nop
 800b29c:	e7fe      	b.n	800b29c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b29e:	f002 ff89 	bl	800e1b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2aa:	68f9      	ldr	r1, [r7, #12]
 800b2ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2ae:	fb01 f303 	mul.w	r3, r1, r3
 800b2b2:	441a      	add	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	68f9      	ldr	r1, [r7, #12]
 800b2d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2d4:	fb01 f303 	mul.w	r3, r1, r3
 800b2d8:	441a      	add	r2, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	22ff      	movs	r2, #255	; 0xff
 800b2e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	22ff      	movs	r2, #255	; 0xff
 800b2ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d114      	bne.n	800b31e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d01a      	beq.n	800b332 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	3310      	adds	r3, #16
 800b300:	4618      	mov	r0, r3
 800b302:	f001 fdaf 	bl	800ce64 <xTaskRemoveFromEventList>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d012      	beq.n	800b332 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b30c:	4b0c      	ldr	r3, [pc, #48]	; (800b340 <xQueueGenericReset+0xcc>)
 800b30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	e009      	b.n	800b332 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3310      	adds	r3, #16
 800b322:	4618      	mov	r0, r3
 800b324:	f7ff fef2 	bl	800b10c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	3324      	adds	r3, #36	; 0x24
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7ff feed 	bl	800b10c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b332:	f002 ff6f 	bl	800e214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b336:	2301      	movs	r3, #1
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	e000ed04 	.word	0xe000ed04

0800b344 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b344:	b580      	push	{r7, lr}
 800b346:	b08e      	sub	sp, #56	; 0x38
 800b348:	af02      	add	r7, sp, #8
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10a      	bne.n	800b36e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b36a:	bf00      	nop
 800b36c:	e7fe      	b.n	800b36c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10a      	bne.n	800b38a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b386:	bf00      	nop
 800b388:	e7fe      	b.n	800b388 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <xQueueGenericCreateStatic+0x52>
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <xQueueGenericCreateStatic+0x56>
 800b396:	2301      	movs	r3, #1
 800b398:	e000      	b.n	800b39c <xQueueGenericCreateStatic+0x58>
 800b39a:	2300      	movs	r3, #0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10a      	bne.n	800b3b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	623b      	str	r3, [r7, #32]
}
 800b3b2:	bf00      	nop
 800b3b4:	e7fe      	b.n	800b3b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <xQueueGenericCreateStatic+0x7e>
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d101      	bne.n	800b3c6 <xQueueGenericCreateStatic+0x82>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e000      	b.n	800b3c8 <xQueueGenericCreateStatic+0x84>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	61fb      	str	r3, [r7, #28]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b3e2:	2350      	movs	r3, #80	; 0x50
 800b3e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	2b50      	cmp	r3, #80	; 0x50
 800b3ea:	d00a      	beq.n	800b402 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	61bb      	str	r3, [r7, #24]
}
 800b3fe:	bf00      	nop
 800b400:	e7fe      	b.n	800b400 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b402:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00d      	beq.n	800b42a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b410:	2201      	movs	r2, #1
 800b412:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b416:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	4613      	mov	r3, r2
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	68b9      	ldr	r1, [r7, #8]
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f000 f83f 	bl	800b4a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3730      	adds	r7, #48	; 0x30
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b434:	b580      	push	{r7, lr}
 800b436:	b08a      	sub	sp, #40	; 0x28
 800b438:	af02      	add	r7, sp, #8
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	4613      	mov	r3, r2
 800b440:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10a      	bne.n	800b45e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44c:	f383 8811 	msr	BASEPRI, r3
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	613b      	str	r3, [r7, #16]
}
 800b45a:	bf00      	nop
 800b45c:	e7fe      	b.n	800b45c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	fb02 f303 	mul.w	r3, r2, r3
 800b466:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	3350      	adds	r3, #80	; 0x50
 800b46c:	4618      	mov	r0, r3
 800b46e:	f002 ffc3 	bl	800e3f8 <pvPortMalloc>
 800b472:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d011      	beq.n	800b49e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	3350      	adds	r3, #80	; 0x50
 800b482:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b48c:	79fa      	ldrb	r2, [r7, #7]
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	4613      	mov	r3, r2
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	68b9      	ldr	r1, [r7, #8]
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f000 f805 	bl	800b4a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b49e:	69bb      	ldr	r3, [r7, #24]
	}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3720      	adds	r7, #32
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
 800b4b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d103      	bne.n	800b4c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	69ba      	ldr	r2, [r7, #24]
 800b4c0:	601a      	str	r2, [r3, #0]
 800b4c2:	e002      	b.n	800b4ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b4d6:	2101      	movs	r1, #1
 800b4d8:	69b8      	ldr	r0, [r7, #24]
 800b4da:	f7ff fecb 	bl	800b274 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	78fa      	ldrb	r2, [r7, #3]
 800b4e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b4e6:	bf00      	nop
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00e      	beq.n	800b51a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b50e:	2300      	movs	r3, #0
 800b510:	2200      	movs	r2, #0
 800b512:	2100      	movs	r1, #0
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 f90b 	bl	800b730 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b51a:	bf00      	nop
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b522:	b580      	push	{r7, lr}
 800b524:	b086      	sub	sp, #24
 800b526:	af00      	add	r7, sp, #0
 800b528:	4603      	mov	r3, r0
 800b52a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b52c:	2301      	movs	r3, #1
 800b52e:	617b      	str	r3, [r7, #20]
 800b530:	2300      	movs	r3, #0
 800b532:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	461a      	mov	r2, r3
 800b538:	6939      	ldr	r1, [r7, #16]
 800b53a:	6978      	ldr	r0, [r7, #20]
 800b53c:	f7ff ff7a 	bl	800b434 <xQueueGenericCreate>
 800b540:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f7ff ffd3 	bl	800b4ee <prvInitialiseMutex>

		return xNewQueue;
 800b548:	68fb      	ldr	r3, [r7, #12]
	}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3718      	adds	r7, #24
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b552:	b580      	push	{r7, lr}
 800b554:	b088      	sub	sp, #32
 800b556:	af02      	add	r7, sp, #8
 800b558:	4603      	mov	r3, r0
 800b55a:	6039      	str	r1, [r7, #0]
 800b55c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b55e:	2301      	movs	r3, #1
 800b560:	617b      	str	r3, [r7, #20]
 800b562:	2300      	movs	r3, #0
 800b564:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b566:	79fb      	ldrb	r3, [r7, #7]
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2200      	movs	r2, #0
 800b56e:	6939      	ldr	r1, [r7, #16]
 800b570:	6978      	ldr	r0, [r7, #20]
 800b572:	f7ff fee7 	bl	800b344 <xQueueGenericCreateStatic>
 800b576:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f7ff ffb8 	bl	800b4ee <prvInitialiseMutex>

		return xNewQueue;
 800b57e:	68fb      	ldr	r3, [r7, #12]
	}
 800b580:	4618      	mov	r0, r3
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b588:	b590      	push	{r4, r7, lr}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10a      	bne.n	800b5b0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	60fb      	str	r3, [r7, #12]
}
 800b5ac:	bf00      	nop
 800b5ae:	e7fe      	b.n	800b5ae <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	689c      	ldr	r4, [r3, #8]
 800b5b4:	f001 fe7a 	bl	800d2ac <xTaskGetCurrentTaskHandle>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	429c      	cmp	r4, r3
 800b5bc:	d111      	bne.n	800b5e2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	1e5a      	subs	r2, r3, #1
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d105      	bne.n	800b5dc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	6938      	ldr	r0, [r7, #16]
 800b5d8:	f000 f8aa 	bl	800b730 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	617b      	str	r3, [r7, #20]
 800b5e0:	e001      	b.n	800b5e6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b5e6:	697b      	ldr	r3, [r7, #20]
	}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	371c      	adds	r7, #28
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd90      	pop	{r4, r7, pc}

0800b5f0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b5f0:	b590      	push	{r4, r7, lr}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10a      	bne.n	800b61a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	60fb      	str	r3, [r7, #12]
}
 800b616:	bf00      	nop
 800b618:	e7fe      	b.n	800b618 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	689c      	ldr	r4, [r3, #8]
 800b61e:	f001 fe45 	bl	800d2ac <xTaskGetCurrentTaskHandle>
 800b622:	4603      	mov	r3, r0
 800b624:	429c      	cmp	r4, r3
 800b626:	d107      	bne.n	800b638 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	1c5a      	adds	r2, r3, #1
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b632:	2301      	movs	r3, #1
 800b634:	617b      	str	r3, [r7, #20]
 800b636:	e00c      	b.n	800b652 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6938      	ldr	r0, [r7, #16]
 800b63c:	f000 fb7e 	bl	800bd3c <xQueueSemaphoreTake>
 800b640:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d004      	beq.n	800b652 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	1c5a      	adds	r2, r3, #1
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b652:	697b      	ldr	r3, [r7, #20]
	}
 800b654:	4618      	mov	r0, r3
 800b656:	371c      	adds	r7, #28
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd90      	pop	{r4, r7, pc}

0800b65c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08a      	sub	sp, #40	; 0x28
 800b660:	af02      	add	r7, sp, #8
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10a      	bne.n	800b684 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	61bb      	str	r3, [r7, #24]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d90a      	bls.n	800b6a2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	617b      	str	r3, [r7, #20]
}
 800b69e:	bf00      	nop
 800b6a0:	e7fe      	b.n	800b6a0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f7ff fe49 	bl	800b344 <xQueueGenericCreateStatic>
 800b6b2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b6c0:	69fb      	ldr	r3, [r7, #28]
	}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3720      	adds	r7, #32
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b086      	sub	sp, #24
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10a      	bne.n	800b6f0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	613b      	str	r3, [r7, #16]
}
 800b6ec:	bf00      	nop
 800b6ee:	e7fe      	b.n	800b6ee <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d90a      	bls.n	800b70e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	60fb      	str	r3, [r7, #12]
}
 800b70a:	bf00      	nop
 800b70c:	e7fe      	b.n	800b70c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b70e:	2202      	movs	r2, #2
 800b710:	2100      	movs	r1, #0
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7ff fe8e 	bl	800b434 <xQueueGenericCreate>
 800b718:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b726:	697b      	ldr	r3, [r7, #20]
	}
 800b728:	4618      	mov	r0, r3
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b08e      	sub	sp, #56	; 0x38
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b73e:	2300      	movs	r3, #0
 800b740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10a      	bne.n	800b762 <xQueueGenericSend+0x32>
	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b75e:	bf00      	nop
 800b760:	e7fe      	b.n	800b760 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d103      	bne.n	800b770 <xQueueGenericSend+0x40>
 800b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <xQueueGenericSend+0x44>
 800b770:	2301      	movs	r3, #1
 800b772:	e000      	b.n	800b776 <xQueueGenericSend+0x46>
 800b774:	2300      	movs	r3, #0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <xQueueGenericSend+0x60>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b02      	cmp	r3, #2
 800b794:	d103      	bne.n	800b79e <xQueueGenericSend+0x6e>
 800b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d101      	bne.n	800b7a2 <xQueueGenericSend+0x72>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e000      	b.n	800b7a4 <xQueueGenericSend+0x74>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10a      	bne.n	800b7be <xQueueGenericSend+0x8e>
	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ac:	f383 8811 	msr	BASEPRI, r3
 800b7b0:	f3bf 8f6f 	isb	sy
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	623b      	str	r3, [r7, #32]
}
 800b7ba:	bf00      	nop
 800b7bc:	e7fe      	b.n	800b7bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7be:	f001 fd85 	bl	800d2cc <xTaskGetSchedulerState>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d102      	bne.n	800b7ce <xQueueGenericSend+0x9e>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <xQueueGenericSend+0xa2>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e000      	b.n	800b7d4 <xQueueGenericSend+0xa4>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10a      	bne.n	800b7ee <xQueueGenericSend+0xbe>
	__asm volatile
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	61fb      	str	r3, [r7, #28]
}
 800b7ea:	bf00      	nop
 800b7ec:	e7fe      	b.n	800b7ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7ee:	f002 fce1 	bl	800e1b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d302      	bcc.n	800b804 <xQueueGenericSend+0xd4>
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b02      	cmp	r3, #2
 800b802:	d129      	bne.n	800b858 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b80a:	f000 fc9a 	bl	800c142 <prvCopyDataToQueue>
 800b80e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b814:	2b00      	cmp	r3, #0
 800b816:	d010      	beq.n	800b83a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	3324      	adds	r3, #36	; 0x24
 800b81c:	4618      	mov	r0, r3
 800b81e:	f001 fb21 	bl	800ce64 <xTaskRemoveFromEventList>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d013      	beq.n	800b850 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b828:	4b3f      	ldr	r3, [pc, #252]	; (800b928 <xQueueGenericSend+0x1f8>)
 800b82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	e00a      	b.n	800b850 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d007      	beq.n	800b850 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b840:	4b39      	ldr	r3, [pc, #228]	; (800b928 <xQueueGenericSend+0x1f8>)
 800b842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b850:	f002 fce0 	bl	800e214 <vPortExitCritical>
				return pdPASS;
 800b854:	2301      	movs	r3, #1
 800b856:	e063      	b.n	800b920 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d103      	bne.n	800b866 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b85e:	f002 fcd9 	bl	800e214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b862:	2300      	movs	r3, #0
 800b864:	e05c      	b.n	800b920 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d106      	bne.n	800b87a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b86c:	f107 0314 	add.w	r3, r7, #20
 800b870:	4618      	mov	r0, r3
 800b872:	f001 fbbd 	bl	800cff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b876:	2301      	movs	r3, #1
 800b878:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b87a:	f002 fccb 	bl	800e214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b87e:	f001 f85d 	bl	800c93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b882:	f002 fc97 	bl	800e1b4 <vPortEnterCritical>
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b88c:	b25b      	sxtb	r3, r3
 800b88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b892:	d103      	bne.n	800b89c <xQueueGenericSend+0x16c>
 800b894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8a2:	b25b      	sxtb	r3, r3
 800b8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a8:	d103      	bne.n	800b8b2 <xQueueGenericSend+0x182>
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8b2:	f002 fcaf 	bl	800e214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8b6:	1d3a      	adds	r2, r7, #4
 800b8b8:	f107 0314 	add.w	r3, r7, #20
 800b8bc:	4611      	mov	r1, r2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f001 fbac 	bl	800d01c <xTaskCheckForTimeOut>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d124      	bne.n	800b914 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8cc:	f000 fd31 	bl	800c332 <prvIsQueueFull>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d018      	beq.n	800b908 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	3310      	adds	r3, #16
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	4611      	mov	r1, r2
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f001 fa34 	bl	800cd4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8e6:	f000 fcbc 	bl	800c262 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8ea:	f001 f835 	bl	800c958 <xTaskResumeAll>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f47f af7c 	bne.w	800b7ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b8f6:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <xQueueGenericSend+0x1f8>)
 800b8f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	e772      	b.n	800b7ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b90a:	f000 fcaa 	bl	800c262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b90e:	f001 f823 	bl	800c958 <xTaskResumeAll>
 800b912:	e76c      	b.n	800b7ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b916:	f000 fca4 	bl	800c262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b91a:	f001 f81d 	bl	800c958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b91e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b920:	4618      	mov	r0, r3
 800b922:	3738      	adds	r7, #56	; 0x38
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	e000ed04 	.word	0xe000ed04

0800b92c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b090      	sub	sp, #64	; 0x40
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d103      	bne.n	800b968 <xQueueGenericSendFromISR+0x3c>
 800b960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b964:	2b00      	cmp	r3, #0
 800b966:	d101      	bne.n	800b96c <xQueueGenericSendFromISR+0x40>
 800b968:	2301      	movs	r3, #1
 800b96a:	e000      	b.n	800b96e <xQueueGenericSendFromISR+0x42>
 800b96c:	2300      	movs	r3, #0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10a      	bne.n	800b988 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d103      	bne.n	800b996 <xQueueGenericSendFromISR+0x6a>
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b992:	2b01      	cmp	r3, #1
 800b994:	d101      	bne.n	800b99a <xQueueGenericSendFromISR+0x6e>
 800b996:	2301      	movs	r3, #1
 800b998:	e000      	b.n	800b99c <xQueueGenericSendFromISR+0x70>
 800b99a:	2300      	movs	r3, #0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10a      	bne.n	800b9b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	623b      	str	r3, [r7, #32]
}
 800b9b2:	bf00      	nop
 800b9b4:	e7fe      	b.n	800b9b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9b6:	f002 fcdf 	bl	800e378 <vPortValidateInterruptPriority>
	__asm volatile
 800b9ba:	f3ef 8211 	mrs	r2, BASEPRI
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	61fa      	str	r2, [r7, #28]
 800b9d0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b9d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d302      	bcc.n	800b9e8 <xQueueGenericSendFromISR+0xbc>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d12f      	bne.n	800ba48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b9fe:	f000 fba0 	bl	800c142 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ba06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0a:	d112      	bne.n	800ba32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d016      	beq.n	800ba42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba16:	3324      	adds	r3, #36	; 0x24
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f001 fa23 	bl	800ce64 <xTaskRemoveFromEventList>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00e      	beq.n	800ba42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00b      	beq.n	800ba42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	e007      	b.n	800ba42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba36:	3301      	adds	r3, #1
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	b25a      	sxtb	r2, r3
 800ba3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba42:	2301      	movs	r3, #1
 800ba44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ba46:	e001      	b.n	800ba4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	f383 8811 	msr	BASEPRI, r3
}
 800ba56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3740      	adds	r7, #64	; 0x40
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b08e      	sub	sp, #56	; 0x38
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10a      	bne.n	800ba8c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	623b      	str	r3, [r7, #32]
}
 800ba88:	bf00      	nop
 800ba8a:	e7fe      	b.n	800ba8a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ba8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00a      	beq.n	800baaa <xQueueGiveFromISR+0x48>
	__asm volatile
 800ba94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	61fb      	str	r3, [r7, #28]
}
 800baa6:	bf00      	nop
 800baa8:	e7fe      	b.n	800baa8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d103      	bne.n	800baba <xQueueGiveFromISR+0x58>
 800bab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <xQueueGiveFromISR+0x5c>
 800baba:	2301      	movs	r3, #1
 800babc:	e000      	b.n	800bac0 <xQueueGiveFromISR+0x5e>
 800babe:	2300      	movs	r3, #0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10a      	bne.n	800bada <xQueueGiveFromISR+0x78>
	__asm volatile
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	61bb      	str	r3, [r7, #24]
}
 800bad6:	bf00      	nop
 800bad8:	e7fe      	b.n	800bad8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bada:	f002 fc4d 	bl	800e378 <vPortValidateInterruptPriority>
	__asm volatile
 800bade:	f3ef 8211 	mrs	r2, BASEPRI
 800bae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	617a      	str	r2, [r7, #20]
 800baf4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800baf6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800baf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d22b      	bcs.n	800bb62 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb16:	1c5a      	adds	r2, r3, #1
 800bb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb24:	d112      	bne.n	800bb4c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d016      	beq.n	800bb5c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	3324      	adds	r3, #36	; 0x24
 800bb32:	4618      	mov	r0, r3
 800bb34:	f001 f996 	bl	800ce64 <xTaskRemoveFromEventList>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00e      	beq.n	800bb5c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00b      	beq.n	800bb5c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	2201      	movs	r2, #1
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	e007      	b.n	800bb5c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb50:	3301      	adds	r3, #1
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	b25a      	sxtb	r2, r3
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb60:	e001      	b.n	800bb66 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb62:	2300      	movs	r3, #0
 800bb64:	637b      	str	r3, [r7, #52]	; 0x34
 800bb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb68:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f383 8811 	msr	BASEPRI, r3
}
 800bb70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3738      	adds	r7, #56	; 0x38
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b08c      	sub	sp, #48	; 0x30
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10a      	bne.n	800bbac <xQueueReceive+0x30>
	__asm volatile
 800bb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9a:	f383 8811 	msr	BASEPRI, r3
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	623b      	str	r3, [r7, #32]
}
 800bba8:	bf00      	nop
 800bbaa:	e7fe      	b.n	800bbaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d103      	bne.n	800bbba <xQueueReceive+0x3e>
 800bbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <xQueueReceive+0x42>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e000      	b.n	800bbc0 <xQueueReceive+0x44>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10a      	bne.n	800bbda <xQueueReceive+0x5e>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	61fb      	str	r3, [r7, #28]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbda:	f001 fb77 	bl	800d2cc <xTaskGetSchedulerState>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d102      	bne.n	800bbea <xQueueReceive+0x6e>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d101      	bne.n	800bbee <xQueueReceive+0x72>
 800bbea:	2301      	movs	r3, #1
 800bbec:	e000      	b.n	800bbf0 <xQueueReceive+0x74>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10a      	bne.n	800bc0a <xQueueReceive+0x8e>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	61bb      	str	r3, [r7, #24]
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc0a:	f002 fad3 	bl	800e1b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d01f      	beq.n	800bc5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc1a:	68b9      	ldr	r1, [r7, #8]
 800bc1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc1e:	f000 fafa 	bl	800c216 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	1e5a      	subs	r2, r3, #1
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00f      	beq.n	800bc52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc34:	3310      	adds	r3, #16
 800bc36:	4618      	mov	r0, r3
 800bc38:	f001 f914 	bl	800ce64 <xTaskRemoveFromEventList>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d007      	beq.n	800bc52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc42:	4b3d      	ldr	r3, [pc, #244]	; (800bd38 <xQueueReceive+0x1bc>)
 800bc44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc52:	f002 fadf 	bl	800e214 <vPortExitCritical>
				return pdPASS;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e069      	b.n	800bd2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d103      	bne.n	800bc68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc60:	f002 fad8 	bl	800e214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc64:	2300      	movs	r3, #0
 800bc66:	e062      	b.n	800bd2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc6e:	f107 0310 	add.w	r3, r7, #16
 800bc72:	4618      	mov	r0, r3
 800bc74:	f001 f9bc 	bl	800cff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc7c:	f002 faca 	bl	800e214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc80:	f000 fe5c 	bl	800c93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc84:	f002 fa96 	bl	800e1b4 <vPortEnterCritical>
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc8e:	b25b      	sxtb	r3, r3
 800bc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc94:	d103      	bne.n	800bc9e <xQueueReceive+0x122>
 800bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bca4:	b25b      	sxtb	r3, r3
 800bca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcaa:	d103      	bne.n	800bcb4 <xQueueReceive+0x138>
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcb4:	f002 faae 	bl	800e214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcb8:	1d3a      	adds	r2, r7, #4
 800bcba:	f107 0310 	add.w	r3, r7, #16
 800bcbe:	4611      	mov	r1, r2
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f001 f9ab 	bl	800d01c <xTaskCheckForTimeOut>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d123      	bne.n	800bd14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcce:	f000 fb1a 	bl	800c306 <prvIsQueueEmpty>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d017      	beq.n	800bd08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcda:	3324      	adds	r3, #36	; 0x24
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	4611      	mov	r1, r2
 800bce0:	4618      	mov	r0, r3
 800bce2:	f001 f833 	bl	800cd4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bce8:	f000 fabb 	bl	800c262 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bcec:	f000 fe34 	bl	800c958 <xTaskResumeAll>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d189      	bne.n	800bc0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bcf6:	4b10      	ldr	r3, [pc, #64]	; (800bd38 <xQueueReceive+0x1bc>)
 800bcf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	e780      	b.n	800bc0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd0a:	f000 faaa 	bl	800c262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd0e:	f000 fe23 	bl	800c958 <xTaskResumeAll>
 800bd12:	e77a      	b.n	800bc0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bd14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd16:	f000 faa4 	bl	800c262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd1a:	f000 fe1d 	bl	800c958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd20:	f000 faf1 	bl	800c306 <prvIsQueueEmpty>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f43f af6f 	beq.w	800bc0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3730      	adds	r7, #48	; 0x30
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	e000ed04 	.word	0xe000ed04

0800bd3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08e      	sub	sp, #56	; 0x38
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd46:	2300      	movs	r3, #0
 800bd48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10a      	bne.n	800bd6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	623b      	str	r3, [r7, #32]
}
 800bd6a:	bf00      	nop
 800bd6c:	e7fe      	b.n	800bd6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00a      	beq.n	800bd8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7a:	f383 8811 	msr	BASEPRI, r3
 800bd7e:	f3bf 8f6f 	isb	sy
 800bd82:	f3bf 8f4f 	dsb	sy
 800bd86:	61fb      	str	r3, [r7, #28]
}
 800bd88:	bf00      	nop
 800bd8a:	e7fe      	b.n	800bd8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd8c:	f001 fa9e 	bl	800d2cc <xTaskGetSchedulerState>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d102      	bne.n	800bd9c <xQueueSemaphoreTake+0x60>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <xQueueSemaphoreTake+0x64>
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e000      	b.n	800bda2 <xQueueSemaphoreTake+0x66>
 800bda0:	2300      	movs	r3, #0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10a      	bne.n	800bdbc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	61bb      	str	r3, [r7, #24]
}
 800bdb8:	bf00      	nop
 800bdba:	e7fe      	b.n	800bdba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdbc:	f002 f9fa 	bl	800e1b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d024      	beq.n	800be16 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	1e5a      	subs	r2, r3, #1
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d104      	bne.n	800bde6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bddc:	f001 fc04 	bl	800d5e8 <pvTaskIncrementMutexHeldCount>
 800bde0:	4602      	mov	r2, r0
 800bde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00f      	beq.n	800be0e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	3310      	adds	r3, #16
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f001 f836 	bl	800ce64 <xTaskRemoveFromEventList>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d007      	beq.n	800be0e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdfe:	4b54      	ldr	r3, [pc, #336]	; (800bf50 <xQueueSemaphoreTake+0x214>)
 800be00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be04:	601a      	str	r2, [r3, #0]
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be0e:	f002 fa01 	bl	800e214 <vPortExitCritical>
				return pdPASS;
 800be12:	2301      	movs	r3, #1
 800be14:	e097      	b.n	800bf46 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d111      	bne.n	800be40 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d00a      	beq.n	800be38 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800be22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be26:	f383 8811 	msr	BASEPRI, r3
 800be2a:	f3bf 8f6f 	isb	sy
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	617b      	str	r3, [r7, #20]
}
 800be34:	bf00      	nop
 800be36:	e7fe      	b.n	800be36 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800be38:	f002 f9ec 	bl	800e214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be3c:	2300      	movs	r3, #0
 800be3e:	e082      	b.n	800bf46 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be42:	2b00      	cmp	r3, #0
 800be44:	d106      	bne.n	800be54 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be46:	f107 030c 	add.w	r3, r7, #12
 800be4a:	4618      	mov	r0, r3
 800be4c:	f001 f8d0 	bl	800cff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be50:	2301      	movs	r3, #1
 800be52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be54:	f002 f9de 	bl	800e214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be58:	f000 fd70 	bl	800c93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be5c:	f002 f9aa 	bl	800e1b4 <vPortEnterCritical>
 800be60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be66:	b25b      	sxtb	r3, r3
 800be68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6c:	d103      	bne.n	800be76 <xQueueSemaphoreTake+0x13a>
 800be6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be70:	2200      	movs	r2, #0
 800be72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be7c:	b25b      	sxtb	r3, r3
 800be7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be82:	d103      	bne.n	800be8c <xQueueSemaphoreTake+0x150>
 800be84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be8c:	f002 f9c2 	bl	800e214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be90:	463a      	mov	r2, r7
 800be92:	f107 030c 	add.w	r3, r7, #12
 800be96:	4611      	mov	r1, r2
 800be98:	4618      	mov	r0, r3
 800be9a:	f001 f8bf 	bl	800d01c <xTaskCheckForTimeOut>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d132      	bne.n	800bf0a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bea4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bea6:	f000 fa2e 	bl	800c306 <prvIsQueueEmpty>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d026      	beq.n	800befe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800beb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d109      	bne.n	800becc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800beb8:	f002 f97c 	bl	800e1b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	4618      	mov	r0, r3
 800bec2:	f001 fa21 	bl	800d308 <xTaskPriorityInherit>
 800bec6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bec8:	f002 f9a4 	bl	800e214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800becc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bece:	3324      	adds	r3, #36	; 0x24
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	4611      	mov	r1, r2
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 ff39 	bl	800cd4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800beda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bedc:	f000 f9c1 	bl	800c262 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bee0:	f000 fd3a 	bl	800c958 <xTaskResumeAll>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f47f af68 	bne.w	800bdbc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800beec:	4b18      	ldr	r3, [pc, #96]	; (800bf50 <xQueueSemaphoreTake+0x214>)
 800beee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	e75e      	b.n	800bdbc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800befe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf00:	f000 f9af 	bl	800c262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf04:	f000 fd28 	bl	800c958 <xTaskResumeAll>
 800bf08:	e758      	b.n	800bdbc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bf0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf0c:	f000 f9a9 	bl	800c262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf10:	f000 fd22 	bl	800c958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf16:	f000 f9f6 	bl	800c306 <prvIsQueueEmpty>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f43f af4d 	beq.w	800bdbc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00d      	beq.n	800bf44 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bf28:	f002 f944 	bl	800e1b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bf2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf2e:	f000 f8f0 	bl	800c112 <prvGetDisinheritPriorityAfterTimeout>
 800bf32:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f001 faba 	bl	800d4b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bf40:	f002 f968 	bl	800e214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3738      	adds	r7, #56	; 0x38
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	e000ed04 	.word	0xe000ed04

0800bf54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b08e      	sub	sp, #56	; 0x38
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10a      	bne.n	800bf80 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	623b      	str	r3, [r7, #32]
}
 800bf7c:	bf00      	nop
 800bf7e:	e7fe      	b.n	800bf7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d103      	bne.n	800bf8e <xQueueReceiveFromISR+0x3a>
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d101      	bne.n	800bf92 <xQueueReceiveFromISR+0x3e>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e000      	b.n	800bf94 <xQueueReceiveFromISR+0x40>
 800bf92:	2300      	movs	r3, #0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10a      	bne.n	800bfae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	61fb      	str	r3, [r7, #28]
}
 800bfaa:	bf00      	nop
 800bfac:	e7fe      	b.n	800bfac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfae:	f002 f9e3 	bl	800e378 <vPortValidateInterruptPriority>
	__asm volatile
 800bfb2:	f3ef 8211 	mrs	r2, BASEPRI
 800bfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	61ba      	str	r2, [r7, #24]
 800bfc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bfca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d02f      	beq.n	800c03a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bfe4:	68b9      	ldr	r1, [r7, #8]
 800bfe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe8:	f000 f915 	bl	800c216 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfee:	1e5a      	subs	r2, r3, #1
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffc:	d112      	bne.n	800c024 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d016      	beq.n	800c034 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	3310      	adds	r3, #16
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 ff2a 	bl	800ce64 <xTaskRemoveFromEventList>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00e      	beq.n	800c034 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00b      	beq.n	800c034 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	601a      	str	r2, [r3, #0]
 800c022:	e007      	b.n	800c034 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c028:	3301      	adds	r3, #1
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	b25a      	sxtb	r2, r3
 800c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c034:	2301      	movs	r3, #1
 800c036:	637b      	str	r3, [r7, #52]	; 0x34
 800c038:	e001      	b.n	800c03e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c03a:	2300      	movs	r3, #0
 800c03c:	637b      	str	r3, [r7, #52]	; 0x34
 800c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c040:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	f383 8811 	msr	BASEPRI, r3
}
 800c048:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3738      	adds	r7, #56	; 0x38
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10a      	bne.n	800c078 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	60bb      	str	r3, [r7, #8]
}
 800c074:	bf00      	nop
 800c076:	e7fe      	b.n	800c076 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c078:	f002 f89c 	bl	800e1b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c080:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c082:	f002 f8c7 	bl	800e214 <vPortExitCritical>

	return uxReturn;
 800c086:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c090:	b480      	push	{r7}
 800c092:	b087      	sub	sp, #28
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10a      	bne.n	800c0b8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	60fb      	str	r3, [r7, #12]
}
 800c0b4:	bf00      	nop
 800c0b6:	e7fe      	b.n	800c0b6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0bc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c0be:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	371c      	adds	r7, #28
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10a      	bne.n	800c0f4 <vQueueDelete+0x28>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	60bb      	str	r3, [r7, #8]
}
 800c0f0:	bf00      	nop
 800c0f2:	e7fe      	b.n	800c0f2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f000 f95f 	bl	800c3b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c100:	2b00      	cmp	r3, #0
 800c102:	d102      	bne.n	800c10a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f002 fa43 	bl	800e590 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c10a:	bf00      	nop
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c112:	b480      	push	{r7}
 800c114:	b085      	sub	sp, #20
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d006      	beq.n	800c130 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	e001      	b.n	800c134 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c130:	2300      	movs	r3, #0
 800c132:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c134:	68fb      	ldr	r3, [r7, #12]
	}
 800c136:	4618      	mov	r0, r3
 800c138:	3714      	adds	r7, #20
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr

0800c142 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b086      	sub	sp, #24
 800c146:	af00      	add	r7, sp, #0
 800c148:	60f8      	str	r0, [r7, #12]
 800c14a:	60b9      	str	r1, [r7, #8]
 800c14c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c14e:	2300      	movs	r3, #0
 800c150:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c156:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10d      	bne.n	800c17c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d14d      	bne.n	800c204 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	4618      	mov	r0, r3
 800c16e:	f001 f933 	bl	800d3d8 <xTaskPriorityDisinherit>
 800c172:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	609a      	str	r2, [r3, #8]
 800c17a:	e043      	b.n	800c204 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d119      	bne.n	800c1b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6858      	ldr	r0, [r3, #4]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18a:	461a      	mov	r2, r3
 800c18c:	68b9      	ldr	r1, [r7, #8]
 800c18e:	f013 fac3 	bl	801f718 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	685a      	ldr	r2, [r3, #4]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19a:	441a      	add	r2, r3
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	685a      	ldr	r2, [r3, #4]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d32b      	bcc.n	800c204 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	605a      	str	r2, [r3, #4]
 800c1b4:	e026      	b.n	800c204 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	68d8      	ldr	r0, [r3, #12]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1be:	461a      	mov	r2, r3
 800c1c0:	68b9      	ldr	r1, [r7, #8]
 800c1c2:	f013 faa9 	bl	801f718 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	68da      	ldr	r2, [r3, #12]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ce:	425b      	negs	r3, r3
 800c1d0:	441a      	add	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	68da      	ldr	r2, [r3, #12]
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d207      	bcs.n	800c1f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	689a      	ldr	r2, [r3, #8]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	425b      	negs	r3, r3
 800c1ec:	441a      	add	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d105      	bne.n	800c204 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d002      	beq.n	800c204 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	3b01      	subs	r3, #1
 800c202:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	1c5a      	adds	r2, r3, #1
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c20c:	697b      	ldr	r3, [r7, #20]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3718      	adds	r7, #24
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b082      	sub	sp, #8
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c224:	2b00      	cmp	r3, #0
 800c226:	d018      	beq.n	800c25a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68da      	ldr	r2, [r3, #12]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c230:	441a      	add	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68da      	ldr	r2, [r3, #12]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d303      	bcc.n	800c24a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68d9      	ldr	r1, [r3, #12]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c252:	461a      	mov	r2, r3
 800c254:	6838      	ldr	r0, [r7, #0]
 800c256:	f013 fa5f 	bl	801f718 <memcpy>
	}
}
 800c25a:	bf00      	nop
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b084      	sub	sp, #16
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c26a:	f001 ffa3 	bl	800e1b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c274:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c276:	e011      	b.n	800c29c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d012      	beq.n	800c2a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	3324      	adds	r3, #36	; 0x24
 800c284:	4618      	mov	r0, r3
 800c286:	f000 fded 	bl	800ce64 <xTaskRemoveFromEventList>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d001      	beq.n	800c294 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c290:	f000 ff26 	bl	800d0e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c294:	7bfb      	ldrb	r3, [r7, #15]
 800c296:	3b01      	subs	r3, #1
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c29c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	dce9      	bgt.n	800c278 <prvUnlockQueue+0x16>
 800c2a4:	e000      	b.n	800c2a8 <prvUnlockQueue+0x46>
					break;
 800c2a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	22ff      	movs	r2, #255	; 0xff
 800c2ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c2b0:	f001 ffb0 	bl	800e214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c2b4:	f001 ff7e 	bl	800e1b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2c0:	e011      	b.n	800c2e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d012      	beq.n	800c2f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	3310      	adds	r3, #16
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 fdc8 	bl	800ce64 <xTaskRemoveFromEventList>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c2da:	f000 ff01 	bl	800d0e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c2de:	7bbb      	ldrb	r3, [r7, #14]
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	dce9      	bgt.n	800c2c2 <prvUnlockQueue+0x60>
 800c2ee:	e000      	b.n	800c2f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c2f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	22ff      	movs	r2, #255	; 0xff
 800c2f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c2fa:	f001 ff8b 	bl	800e214 <vPortExitCritical>
}
 800c2fe:	bf00      	nop
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b084      	sub	sp, #16
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c30e:	f001 ff51 	bl	800e1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c316:	2b00      	cmp	r3, #0
 800c318:	d102      	bne.n	800c320 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c31a:	2301      	movs	r3, #1
 800c31c:	60fb      	str	r3, [r7, #12]
 800c31e:	e001      	b.n	800c324 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c320:	2300      	movs	r3, #0
 800c322:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c324:	f001 ff76 	bl	800e214 <vPortExitCritical>

	return xReturn;
 800c328:	68fb      	ldr	r3, [r7, #12]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c33a:	f001 ff3b 	bl	800e1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c346:	429a      	cmp	r2, r3
 800c348:	d102      	bne.n	800c350 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c34a:	2301      	movs	r3, #1
 800c34c:	60fb      	str	r3, [r7, #12]
 800c34e:	e001      	b.n	800c354 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c350:	2300      	movs	r3, #0
 800c352:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c354:	f001 ff5e 	bl	800e214 <vPortExitCritical>

	return xReturn;
 800c358:	68fb      	ldr	r3, [r7, #12]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
	...

0800c364 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c36e:	2300      	movs	r3, #0
 800c370:	60fb      	str	r3, [r7, #12]
 800c372:	e014      	b.n	800c39e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c374:	4a0f      	ldr	r2, [pc, #60]	; (800c3b4 <vQueueAddToRegistry+0x50>)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10b      	bne.n	800c398 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c380:	490c      	ldr	r1, [pc, #48]	; (800c3b4 <vQueueAddToRegistry+0x50>)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	683a      	ldr	r2, [r7, #0]
 800c386:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c38a:	4a0a      	ldr	r2, [pc, #40]	; (800c3b4 <vQueueAddToRegistry+0x50>)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	00db      	lsls	r3, r3, #3
 800c390:	4413      	add	r3, r2
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c396:	e006      	b.n	800c3a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3301      	adds	r3, #1
 800c39c:	60fb      	str	r3, [r7, #12]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2b07      	cmp	r3, #7
 800c3a2:	d9e7      	bls.n	800c374 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3a4:	bf00      	nop
 800c3a6:	bf00      	nop
 800c3a8:	3714      	adds	r7, #20
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
 800c3b2:	bf00      	nop
 800c3b4:	2001336c 	.word	0x2001336c

0800c3b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	60fb      	str	r3, [r7, #12]
 800c3c4:	e016      	b.n	800c3f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c3c6:	4a10      	ldr	r2, [pc, #64]	; (800c408 <vQueueUnregisterQueue+0x50>)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	00db      	lsls	r3, r3, #3
 800c3cc:	4413      	add	r3, r2
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d10b      	bne.n	800c3ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c3d6:	4a0c      	ldr	r2, [pc, #48]	; (800c408 <vQueueUnregisterQueue+0x50>)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2100      	movs	r1, #0
 800c3dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c3e0:	4a09      	ldr	r2, [pc, #36]	; (800c408 <vQueueUnregisterQueue+0x50>)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	00db      	lsls	r3, r3, #3
 800c3e6:	4413      	add	r3, r2
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	605a      	str	r2, [r3, #4]
				break;
 800c3ec:	e006      	b.n	800c3fc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2b07      	cmp	r3, #7
 800c3f8:	d9e5      	bls.n	800c3c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c3fa:	bf00      	nop
 800c3fc:	bf00      	nop
 800c3fe:	3714      	adds	r7, #20
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	2001336c 	.word	0x2001336c

0800c40c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c41c:	f001 feca 	bl	800e1b4 <vPortEnterCritical>
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c426:	b25b      	sxtb	r3, r3
 800c428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42c:	d103      	bne.n	800c436 <vQueueWaitForMessageRestricted+0x2a>
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c43c:	b25b      	sxtb	r3, r3
 800c43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c442:	d103      	bne.n	800c44c <vQueueWaitForMessageRestricted+0x40>
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c44c:	f001 fee2 	bl	800e214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c454:	2b00      	cmp	r3, #0
 800c456:	d106      	bne.n	800c466 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	3324      	adds	r3, #36	; 0x24
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	68b9      	ldr	r1, [r7, #8]
 800c460:	4618      	mov	r0, r3
 800c462:	f000 fcd3 	bl	800ce0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c466:	6978      	ldr	r0, [r7, #20]
 800c468:	f7ff fefb 	bl	800c262 <prvUnlockQueue>
	}
 800c46c:	bf00      	nop
 800c46e:	3718      	adds	r7, #24
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c474:	b580      	push	{r7, lr}
 800c476:	b08e      	sub	sp, #56	; 0x38
 800c478:	af04      	add	r7, sp, #16
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
 800c480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c484:	2b00      	cmp	r3, #0
 800c486:	d10a      	bne.n	800c49e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48c:	f383 8811 	msr	BASEPRI, r3
 800c490:	f3bf 8f6f 	isb	sy
 800c494:	f3bf 8f4f 	dsb	sy
 800c498:	623b      	str	r3, [r7, #32]
}
 800c49a:	bf00      	nop
 800c49c:	e7fe      	b.n	800c49c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10a      	bne.n	800c4ba <xTaskCreateStatic+0x46>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	61fb      	str	r3, [r7, #28]
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4ba:	23c4      	movs	r3, #196	; 0xc4
 800c4bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	2bc4      	cmp	r3, #196	; 0xc4
 800c4c2:	d00a      	beq.n	800c4da <xTaskCreateStatic+0x66>
	__asm volatile
 800c4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c8:	f383 8811 	msr	BASEPRI, r3
 800c4cc:	f3bf 8f6f 	isb	sy
 800c4d0:	f3bf 8f4f 	dsb	sy
 800c4d4:	61bb      	str	r3, [r7, #24]
}
 800c4d6:	bf00      	nop
 800c4d8:	e7fe      	b.n	800c4d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c4da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d01e      	beq.n	800c520 <xTaskCreateStatic+0xac>
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d01b      	beq.n	800c520 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	9303      	str	r3, [sp, #12]
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c500:	9302      	str	r3, [sp, #8]
 800c502:	f107 0314 	add.w	r3, r7, #20
 800c506:	9301      	str	r3, [sp, #4]
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	68b9      	ldr	r1, [r7, #8]
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	f000 f850 	bl	800c5b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c51a:	f000 f8f9 	bl	800c710 <prvAddNewTaskToReadyList>
 800c51e:	e001      	b.n	800c524 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c520:	2300      	movs	r3, #0
 800c522:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c524:	697b      	ldr	r3, [r7, #20]
	}
 800c526:	4618      	mov	r0, r3
 800c528:	3728      	adds	r7, #40	; 0x28
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b08c      	sub	sp, #48	; 0x30
 800c532:	af04      	add	r7, sp, #16
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	603b      	str	r3, [r7, #0]
 800c53a:	4613      	mov	r3, r2
 800c53c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c53e:	88fb      	ldrh	r3, [r7, #6]
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	4618      	mov	r0, r3
 800c544:	f001 ff58 	bl	800e3f8 <pvPortMalloc>
 800c548:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00e      	beq.n	800c56e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c550:	20c4      	movs	r0, #196	; 0xc4
 800c552:	f001 ff51 	bl	800e3f8 <pvPortMalloc>
 800c556:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d003      	beq.n	800c566 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	631a      	str	r2, [r3, #48]	; 0x30
 800c564:	e005      	b.n	800c572 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c566:	6978      	ldr	r0, [r7, #20]
 800c568:	f002 f812 	bl	800e590 <vPortFree>
 800c56c:	e001      	b.n	800c572 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d017      	beq.n	800c5a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c580:	88fa      	ldrh	r2, [r7, #6]
 800c582:	2300      	movs	r3, #0
 800c584:	9303      	str	r3, [sp, #12]
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	9302      	str	r3, [sp, #8]
 800c58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58c:	9301      	str	r3, [sp, #4]
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	68b9      	ldr	r1, [r7, #8]
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f000 f80e 	bl	800c5b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c59c:	69f8      	ldr	r0, [r7, #28]
 800c59e:	f000 f8b7 	bl	800c710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	61bb      	str	r3, [r7, #24]
 800c5a6:	e002      	b.n	800c5ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5ae:	69bb      	ldr	r3, [r7, #24]
	}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3720      	adds	r7, #32
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b088      	sub	sp, #32
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	607a      	str	r2, [r7, #4]
 800c5c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	21a5      	movs	r1, #165	; 0xa5
 800c5d2:	f013 f8c9 	bl	801f768 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	4413      	add	r3, r2
 800c5e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	f023 0307 	bic.w	r3, r3, #7
 800c5ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	f003 0307 	and.w	r3, r3, #7
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00a      	beq.n	800c610 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	617b      	str	r3, [r7, #20]
}
 800c60c:	bf00      	nop
 800c60e:	e7fe      	b.n	800c60e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800c610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c612:	69ba      	ldr	r2, [r7, #24]
 800c614:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d01f      	beq.n	800c65c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c61c:	2300      	movs	r3, #0
 800c61e:	61fb      	str	r3, [r7, #28]
 800c620:	e012      	b.n	800c648 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	4413      	add	r3, r2
 800c628:	7819      	ldrb	r1, [r3, #0]
 800c62a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	4413      	add	r3, r2
 800c630:	3334      	adds	r3, #52	; 0x34
 800c632:	460a      	mov	r2, r1
 800c634:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	4413      	add	r3, r2
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d006      	beq.n	800c650 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	3301      	adds	r3, #1
 800c646:	61fb      	str	r3, [r7, #28]
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	2b0f      	cmp	r3, #15
 800c64c:	d9e9      	bls.n	800c622 <prvInitialiseNewTask+0x6a>
 800c64e:	e000      	b.n	800c652 <prvInitialiseNewTask+0x9a>
			{
				break;
 800c650:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c654:	2200      	movs	r2, #0
 800c656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c65a:	e003      	b.n	800c664 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	2b37      	cmp	r3, #55	; 0x37
 800c668:	d901      	bls.n	800c66e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c66a:	2337      	movs	r3, #55	; 0x37
 800c66c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c672:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c678:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	2200      	movs	r2, #0
 800c67e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c682:	3304      	adds	r3, #4
 800c684:	4618      	mov	r0, r3
 800c686:	f7fe fd61 	bl	800b14c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	3318      	adds	r3, #24
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fe fd5c 	bl	800b14c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c698:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	335c      	adds	r3, #92	; 0x5c
 800c6c4:	2260      	movs	r2, #96	; 0x60
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f013 f84d 	bl	801f768 <memset>
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	4a0c      	ldr	r2, [pc, #48]	; (800c704 <prvInitialiseNewTask+0x14c>)
 800c6d2:	661a      	str	r2, [r3, #96]	; 0x60
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d6:	4a0c      	ldr	r2, [pc, #48]	; (800c708 <prvInitialiseNewTask+0x150>)
 800c6d8:	665a      	str	r2, [r3, #100]	; 0x64
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	4a0b      	ldr	r2, [pc, #44]	; (800c70c <prvInitialiseNewTask+0x154>)
 800c6de:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	68f9      	ldr	r1, [r7, #12]
 800c6e4:	69b8      	ldr	r0, [r7, #24]
 800c6e6:	f001 fc39 	bl	800df5c <pxPortInitialiseStack>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d002      	beq.n	800c6fc <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6fc:	bf00      	nop
 800c6fe:	3720      	adds	r7, #32
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	080257ec 	.word	0x080257ec
 800c708:	0802580c 	.word	0x0802580c
 800c70c:	080257cc 	.word	0x080257cc

0800c710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c718:	f001 fd4c 	bl	800e1b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c71c:	4b2d      	ldr	r3, [pc, #180]	; (800c7d4 <prvAddNewTaskToReadyList+0xc4>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3301      	adds	r3, #1
 800c722:	4a2c      	ldr	r2, [pc, #176]	; (800c7d4 <prvAddNewTaskToReadyList+0xc4>)
 800c724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c726:	4b2c      	ldr	r3, [pc, #176]	; (800c7d8 <prvAddNewTaskToReadyList+0xc8>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d109      	bne.n	800c742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c72e:	4a2a      	ldr	r2, [pc, #168]	; (800c7d8 <prvAddNewTaskToReadyList+0xc8>)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c734:	4b27      	ldr	r3, [pc, #156]	; (800c7d4 <prvAddNewTaskToReadyList+0xc4>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d110      	bne.n	800c75e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c73c:	f000 fcf4 	bl	800d128 <prvInitialiseTaskLists>
 800c740:	e00d      	b.n	800c75e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c742:	4b26      	ldr	r3, [pc, #152]	; (800c7dc <prvAddNewTaskToReadyList+0xcc>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d109      	bne.n	800c75e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c74a:	4b23      	ldr	r3, [pc, #140]	; (800c7d8 <prvAddNewTaskToReadyList+0xc8>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c754:	429a      	cmp	r2, r3
 800c756:	d802      	bhi.n	800c75e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c758:	4a1f      	ldr	r2, [pc, #124]	; (800c7d8 <prvAddNewTaskToReadyList+0xc8>)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c75e:	4b20      	ldr	r3, [pc, #128]	; (800c7e0 <prvAddNewTaskToReadyList+0xd0>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3301      	adds	r3, #1
 800c764:	4a1e      	ldr	r2, [pc, #120]	; (800c7e0 <prvAddNewTaskToReadyList+0xd0>)
 800c766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c768:	4b1d      	ldr	r3, [pc, #116]	; (800c7e0 <prvAddNewTaskToReadyList+0xd0>)
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c774:	4b1b      	ldr	r3, [pc, #108]	; (800c7e4 <prvAddNewTaskToReadyList+0xd4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d903      	bls.n	800c784 <prvAddNewTaskToReadyList+0x74>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c780:	4a18      	ldr	r2, [pc, #96]	; (800c7e4 <prvAddNewTaskToReadyList+0xd4>)
 800c782:	6013      	str	r3, [r2, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c788:	4613      	mov	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4a15      	ldr	r2, [pc, #84]	; (800c7e8 <prvAddNewTaskToReadyList+0xd8>)
 800c792:	441a      	add	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	3304      	adds	r3, #4
 800c798:	4619      	mov	r1, r3
 800c79a:	4610      	mov	r0, r2
 800c79c:	f7fe fce3 	bl	800b166 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c7a0:	f001 fd38 	bl	800e214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c7a4:	4b0d      	ldr	r3, [pc, #52]	; (800c7dc <prvAddNewTaskToReadyList+0xcc>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00e      	beq.n	800c7ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c7ac:	4b0a      	ldr	r3, [pc, #40]	; (800c7d8 <prvAddNewTaskToReadyList+0xc8>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d207      	bcs.n	800c7ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c7ba:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <prvAddNewTaskToReadyList+0xdc>)
 800c7bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7ca:	bf00      	nop
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20001298 	.word	0x20001298
 800c7d8:	20000dc4 	.word	0x20000dc4
 800c7dc:	200012a4 	.word	0x200012a4
 800c7e0:	200012b4 	.word	0x200012b4
 800c7e4:	200012a0 	.word	0x200012a0
 800c7e8:	20000dc8 	.word	0x20000dc8
 800c7ec:	e000ed04 	.word	0xe000ed04

0800c7f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d017      	beq.n	800c832 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c802:	4b13      	ldr	r3, [pc, #76]	; (800c850 <vTaskDelay+0x60>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00a      	beq.n	800c820 <vTaskDelay+0x30>
	__asm volatile
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	60bb      	str	r3, [r7, #8]
}
 800c81c:	bf00      	nop
 800c81e:	e7fe      	b.n	800c81e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c820:	f000 f88c 	bl	800c93c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c824:	2100      	movs	r1, #0
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fef2 	bl	800d610 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c82c:	f000 f894 	bl	800c958 <xTaskResumeAll>
 800c830:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d107      	bne.n	800c848 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c838:	4b06      	ldr	r3, [pc, #24]	; (800c854 <vTaskDelay+0x64>)
 800c83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c83e:	601a      	str	r2, [r3, #0]
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c848:	bf00      	nop
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	200012c0 	.word	0x200012c0
 800c854:	e000ed04 	.word	0xe000ed04

0800c858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b08a      	sub	sp, #40	; 0x28
 800c85c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c862:	2300      	movs	r3, #0
 800c864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c866:	463a      	mov	r2, r7
 800c868:	1d39      	adds	r1, r7, #4
 800c86a:	f107 0308 	add.w	r3, r7, #8
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fe f978 	bl	800ab64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	9202      	str	r2, [sp, #8]
 800c87c:	9301      	str	r3, [sp, #4]
 800c87e:	2300      	movs	r3, #0
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	2300      	movs	r3, #0
 800c884:	460a      	mov	r2, r1
 800c886:	4925      	ldr	r1, [pc, #148]	; (800c91c <vTaskStartScheduler+0xc4>)
 800c888:	4825      	ldr	r0, [pc, #148]	; (800c920 <vTaskStartScheduler+0xc8>)
 800c88a:	f7ff fdf3 	bl	800c474 <xTaskCreateStatic>
 800c88e:	4603      	mov	r3, r0
 800c890:	4a24      	ldr	r2, [pc, #144]	; (800c924 <vTaskStartScheduler+0xcc>)
 800c892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c894:	4b23      	ldr	r3, [pc, #140]	; (800c924 <vTaskStartScheduler+0xcc>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c89c:	2301      	movs	r3, #1
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	e001      	b.n	800c8a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d102      	bne.n	800c8b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c8ac:	f000 ff04 	bl	800d6b8 <xTimerCreateTimerTask>
 800c8b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d11d      	bne.n	800c8f4 <vTaskStartScheduler+0x9c>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	613b      	str	r3, [r7, #16]
}
 800c8ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c8cc:	4b16      	ldr	r3, [pc, #88]	; (800c928 <vTaskStartScheduler+0xd0>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	335c      	adds	r3, #92	; 0x5c
 800c8d2:	4a16      	ldr	r2, [pc, #88]	; (800c92c <vTaskStartScheduler+0xd4>)
 800c8d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c8d6:	4b16      	ldr	r3, [pc, #88]	; (800c930 <vTaskStartScheduler+0xd8>)
 800c8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c8de:	4b15      	ldr	r3, [pc, #84]	; (800c934 <vTaskStartScheduler+0xdc>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c8e4:	4b14      	ldr	r3, [pc, #80]	; (800c938 <vTaskStartScheduler+0xe0>)
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c8ea:	f7f4 f9e9 	bl	8000cc0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c8ee:	f001 fbbf 	bl	800e070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c8f2:	e00e      	b.n	800c912 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fa:	d10a      	bne.n	800c912 <vTaskStartScheduler+0xba>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	60fb      	str	r3, [r7, #12]
}
 800c90e:	bf00      	nop
 800c910:	e7fe      	b.n	800c910 <vTaskStartScheduler+0xb8>
}
 800c912:	bf00      	nop
 800c914:	3718      	adds	r7, #24
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	08021920 	.word	0x08021920
 800c920:	0800d0f9 	.word	0x0800d0f9
 800c924:	200012bc 	.word	0x200012bc
 800c928:	20000dc4 	.word	0x20000dc4
 800c92c:	2000034c 	.word	0x2000034c
 800c930:	200012b8 	.word	0x200012b8
 800c934:	200012a4 	.word	0x200012a4
 800c938:	2000129c 	.word	0x2000129c

0800c93c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c93c:	b480      	push	{r7}
 800c93e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c940:	4b04      	ldr	r3, [pc, #16]	; (800c954 <vTaskSuspendAll+0x18>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	3301      	adds	r3, #1
 800c946:	4a03      	ldr	r2, [pc, #12]	; (800c954 <vTaskSuspendAll+0x18>)
 800c948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c94a:	bf00      	nop
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr
 800c954:	200012c0 	.word	0x200012c0

0800c958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c95e:	2300      	movs	r3, #0
 800c960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c962:	2300      	movs	r3, #0
 800c964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c966:	4b42      	ldr	r3, [pc, #264]	; (800ca70 <xTaskResumeAll+0x118>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d10a      	bne.n	800c984 <xTaskResumeAll+0x2c>
	__asm volatile
 800c96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	603b      	str	r3, [r7, #0]
}
 800c980:	bf00      	nop
 800c982:	e7fe      	b.n	800c982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c984:	f001 fc16 	bl	800e1b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c988:	4b39      	ldr	r3, [pc, #228]	; (800ca70 <xTaskResumeAll+0x118>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	3b01      	subs	r3, #1
 800c98e:	4a38      	ldr	r2, [pc, #224]	; (800ca70 <xTaskResumeAll+0x118>)
 800c990:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c992:	4b37      	ldr	r3, [pc, #220]	; (800ca70 <xTaskResumeAll+0x118>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d162      	bne.n	800ca60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c99a:	4b36      	ldr	r3, [pc, #216]	; (800ca74 <xTaskResumeAll+0x11c>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d05e      	beq.n	800ca60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9a2:	e02f      	b.n	800ca04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9a4:	4b34      	ldr	r3, [pc, #208]	; (800ca78 <xTaskResumeAll+0x120>)
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	3318      	adds	r3, #24
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fe fc35 	bl	800b220 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3304      	adds	r3, #4
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fe fc30 	bl	800b220 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c4:	4b2d      	ldr	r3, [pc, #180]	; (800ca7c <xTaskResumeAll+0x124>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d903      	bls.n	800c9d4 <xTaskResumeAll+0x7c>
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d0:	4a2a      	ldr	r2, [pc, #168]	; (800ca7c <xTaskResumeAll+0x124>)
 800c9d2:	6013      	str	r3, [r2, #0]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d8:	4613      	mov	r3, r2
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4413      	add	r3, r2
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	4a27      	ldr	r2, [pc, #156]	; (800ca80 <xTaskResumeAll+0x128>)
 800c9e2:	441a      	add	r2, r3
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	4610      	mov	r0, r2
 800c9ec:	f7fe fbbb 	bl	800b166 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f4:	4b23      	ldr	r3, [pc, #140]	; (800ca84 <xTaskResumeAll+0x12c>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d302      	bcc.n	800ca04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c9fe:	4b22      	ldr	r3, [pc, #136]	; (800ca88 <xTaskResumeAll+0x130>)
 800ca00:	2201      	movs	r2, #1
 800ca02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca04:	4b1c      	ldr	r3, [pc, #112]	; (800ca78 <xTaskResumeAll+0x120>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1cb      	bne.n	800c9a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d001      	beq.n	800ca16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca12:	f000 fc2b 	bl	800d26c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca16:	4b1d      	ldr	r3, [pc, #116]	; (800ca8c <xTaskResumeAll+0x134>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d010      	beq.n	800ca44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca22:	f000 f859 	bl	800cad8 <xTaskIncrementTick>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d002      	beq.n	800ca32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ca2c:	4b16      	ldr	r3, [pc, #88]	; (800ca88 <xTaskResumeAll+0x130>)
 800ca2e:	2201      	movs	r2, #1
 800ca30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d1f1      	bne.n	800ca22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ca3e:	4b13      	ldr	r3, [pc, #76]	; (800ca8c <xTaskResumeAll+0x134>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca44:	4b10      	ldr	r3, [pc, #64]	; (800ca88 <xTaskResumeAll+0x130>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d009      	beq.n	800ca60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca50:	4b0f      	ldr	r3, [pc, #60]	; (800ca90 <xTaskResumeAll+0x138>)
 800ca52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca56:	601a      	str	r2, [r3, #0]
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca60:	f001 fbd8 	bl	800e214 <vPortExitCritical>

	return xAlreadyYielded;
 800ca64:	68bb      	ldr	r3, [r7, #8]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	200012c0 	.word	0x200012c0
 800ca74:	20001298 	.word	0x20001298
 800ca78:	20001258 	.word	0x20001258
 800ca7c:	200012a0 	.word	0x200012a0
 800ca80:	20000dc8 	.word	0x20000dc8
 800ca84:	20000dc4 	.word	0x20000dc4
 800ca88:	200012ac 	.word	0x200012ac
 800ca8c:	200012a8 	.word	0x200012a8
 800ca90:	e000ed04 	.word	0xe000ed04

0800ca94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca9a:	4b05      	ldr	r3, [pc, #20]	; (800cab0 <xTaskGetTickCount+0x1c>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800caa0:	687b      	ldr	r3, [r7, #4]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	370c      	adds	r7, #12
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	2000129c 	.word	0x2000129c

0800cab4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800caba:	f001 fc5d 	bl	800e378 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cabe:	2300      	movs	r3, #0
 800cac0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cac2:	4b04      	ldr	r3, [pc, #16]	; (800cad4 <xTaskGetTickCountFromISR+0x20>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cac8:	683b      	ldr	r3, [r7, #0]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	2000129c 	.word	0x2000129c

0800cad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cade:	2300      	movs	r3, #0
 800cae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cae2:	4b4f      	ldr	r3, [pc, #316]	; (800cc20 <xTaskIncrementTick+0x148>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f040 808f 	bne.w	800cc0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800caec:	4b4d      	ldr	r3, [pc, #308]	; (800cc24 <xTaskIncrementTick+0x14c>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	3301      	adds	r3, #1
 800caf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800caf4:	4a4b      	ldr	r2, [pc, #300]	; (800cc24 <xTaskIncrementTick+0x14c>)
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d120      	bne.n	800cb42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb00:	4b49      	ldr	r3, [pc, #292]	; (800cc28 <xTaskIncrementTick+0x150>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00a      	beq.n	800cb20 <xTaskIncrementTick+0x48>
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	603b      	str	r3, [r7, #0]
}
 800cb1c:	bf00      	nop
 800cb1e:	e7fe      	b.n	800cb1e <xTaskIncrementTick+0x46>
 800cb20:	4b41      	ldr	r3, [pc, #260]	; (800cc28 <xTaskIncrementTick+0x150>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	60fb      	str	r3, [r7, #12]
 800cb26:	4b41      	ldr	r3, [pc, #260]	; (800cc2c <xTaskIncrementTick+0x154>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a3f      	ldr	r2, [pc, #252]	; (800cc28 <xTaskIncrementTick+0x150>)
 800cb2c:	6013      	str	r3, [r2, #0]
 800cb2e:	4a3f      	ldr	r2, [pc, #252]	; (800cc2c <xTaskIncrementTick+0x154>)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6013      	str	r3, [r2, #0]
 800cb34:	4b3e      	ldr	r3, [pc, #248]	; (800cc30 <xTaskIncrementTick+0x158>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	4a3d      	ldr	r2, [pc, #244]	; (800cc30 <xTaskIncrementTick+0x158>)
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	f000 fb95 	bl	800d26c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb42:	4b3c      	ldr	r3, [pc, #240]	; (800cc34 <xTaskIncrementTick+0x15c>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	693a      	ldr	r2, [r7, #16]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d349      	bcc.n	800cbe0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb4c:	4b36      	ldr	r3, [pc, #216]	; (800cc28 <xTaskIncrementTick+0x150>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d104      	bne.n	800cb60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb56:	4b37      	ldr	r3, [pc, #220]	; (800cc34 <xTaskIncrementTick+0x15c>)
 800cb58:	f04f 32ff 	mov.w	r2, #4294967295
 800cb5c:	601a      	str	r2, [r3, #0]
					break;
 800cb5e:	e03f      	b.n	800cbe0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb60:	4b31      	ldr	r3, [pc, #196]	; (800cc28 <xTaskIncrementTick+0x150>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d203      	bcs.n	800cb80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb78:	4a2e      	ldr	r2, [pc, #184]	; (800cc34 <xTaskIncrementTick+0x15c>)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb7e:	e02f      	b.n	800cbe0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	3304      	adds	r3, #4
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fe fb4b 	bl	800b220 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d004      	beq.n	800cb9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	3318      	adds	r3, #24
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fe fb42 	bl	800b220 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba0:	4b25      	ldr	r3, [pc, #148]	; (800cc38 <xTaskIncrementTick+0x160>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d903      	bls.n	800cbb0 <xTaskIncrementTick+0xd8>
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbac:	4a22      	ldr	r2, [pc, #136]	; (800cc38 <xTaskIncrementTick+0x160>)
 800cbae:	6013      	str	r3, [r2, #0]
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4a1f      	ldr	r2, [pc, #124]	; (800cc3c <xTaskIncrementTick+0x164>)
 800cbbe:	441a      	add	r2, r3
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	4610      	mov	r0, r2
 800cbc8:	f7fe facd 	bl	800b166 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd0:	4b1b      	ldr	r3, [pc, #108]	; (800cc40 <xTaskIncrementTick+0x168>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d3b8      	bcc.n	800cb4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbde:	e7b5      	b.n	800cb4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cbe0:	4b17      	ldr	r3, [pc, #92]	; (800cc40 <xTaskIncrementTick+0x168>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe6:	4915      	ldr	r1, [pc, #84]	; (800cc3c <xTaskIncrementTick+0x164>)
 800cbe8:	4613      	mov	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4413      	add	r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	440b      	add	r3, r1
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d901      	bls.n	800cbfc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cbfc:	4b11      	ldr	r3, [pc, #68]	; (800cc44 <xTaskIncrementTick+0x16c>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d007      	beq.n	800cc14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cc04:	2301      	movs	r3, #1
 800cc06:	617b      	str	r3, [r7, #20]
 800cc08:	e004      	b.n	800cc14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc0a:	4b0f      	ldr	r3, [pc, #60]	; (800cc48 <xTaskIncrementTick+0x170>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	4a0d      	ldr	r2, [pc, #52]	; (800cc48 <xTaskIncrementTick+0x170>)
 800cc12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc14:	697b      	ldr	r3, [r7, #20]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3718      	adds	r7, #24
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	200012c0 	.word	0x200012c0
 800cc24:	2000129c 	.word	0x2000129c
 800cc28:	20001250 	.word	0x20001250
 800cc2c:	20001254 	.word	0x20001254
 800cc30:	200012b0 	.word	0x200012b0
 800cc34:	200012b8 	.word	0x200012b8
 800cc38:	200012a0 	.word	0x200012a0
 800cc3c:	20000dc8 	.word	0x20000dc8
 800cc40:	20000dc4 	.word	0x20000dc4
 800cc44:	200012ac 	.word	0x200012ac
 800cc48:	200012a8 	.word	0x200012a8

0800cc4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc52:	4b36      	ldr	r3, [pc, #216]	; (800cd2c <vTaskSwitchContext+0xe0>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d003      	beq.n	800cc62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc5a:	4b35      	ldr	r3, [pc, #212]	; (800cd30 <vTaskSwitchContext+0xe4>)
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc60:	e05f      	b.n	800cd22 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800cc62:	4b33      	ldr	r3, [pc, #204]	; (800cd30 <vTaskSwitchContext+0xe4>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800cc68:	f7f4 f838 	bl	8000cdc <getRunTimeCounterValue>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	4a31      	ldr	r2, [pc, #196]	; (800cd34 <vTaskSwitchContext+0xe8>)
 800cc70:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800cc72:	4b30      	ldr	r3, [pc, #192]	; (800cd34 <vTaskSwitchContext+0xe8>)
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	4b30      	ldr	r3, [pc, #192]	; (800cd38 <vTaskSwitchContext+0xec>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d909      	bls.n	800cc92 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800cc7e:	4b2f      	ldr	r3, [pc, #188]	; (800cd3c <vTaskSwitchContext+0xf0>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800cc84:	4a2b      	ldr	r2, [pc, #172]	; (800cd34 <vTaskSwitchContext+0xe8>)
 800cc86:	6810      	ldr	r0, [r2, #0]
 800cc88:	4a2b      	ldr	r2, [pc, #172]	; (800cd38 <vTaskSwitchContext+0xec>)
 800cc8a:	6812      	ldr	r2, [r2, #0]
 800cc8c:	1a82      	subs	r2, r0, r2
 800cc8e:	440a      	add	r2, r1
 800cc90:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800cc92:	4b28      	ldr	r3, [pc, #160]	; (800cd34 <vTaskSwitchContext+0xe8>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a28      	ldr	r2, [pc, #160]	; (800cd38 <vTaskSwitchContext+0xec>)
 800cc98:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc9a:	4b29      	ldr	r3, [pc, #164]	; (800cd40 <vTaskSwitchContext+0xf4>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	60fb      	str	r3, [r7, #12]
 800cca0:	e010      	b.n	800ccc4 <vTaskSwitchContext+0x78>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10a      	bne.n	800ccbe <vTaskSwitchContext+0x72>
	__asm volatile
 800cca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccac:	f383 8811 	msr	BASEPRI, r3
 800ccb0:	f3bf 8f6f 	isb	sy
 800ccb4:	f3bf 8f4f 	dsb	sy
 800ccb8:	607b      	str	r3, [r7, #4]
}
 800ccba:	bf00      	nop
 800ccbc:	e7fe      	b.n	800ccbc <vTaskSwitchContext+0x70>
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	60fb      	str	r3, [r7, #12]
 800ccc4:	491f      	ldr	r1, [pc, #124]	; (800cd44 <vTaskSwitchContext+0xf8>)
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	4413      	add	r3, r2
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	440b      	add	r3, r1
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0e4      	beq.n	800cca2 <vTaskSwitchContext+0x56>
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	4413      	add	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4a18      	ldr	r2, [pc, #96]	; (800cd44 <vTaskSwitchContext+0xf8>)
 800cce4:	4413      	add	r3, r2
 800cce6:	60bb      	str	r3, [r7, #8]
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	605a      	str	r2, [r3, #4]
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	685a      	ldr	r2, [r3, #4]
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	3308      	adds	r3, #8
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d104      	bne.n	800cd08 <vTaskSwitchContext+0xbc>
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	685a      	ldr	r2, [r3, #4]
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	605a      	str	r2, [r3, #4]
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	4a0b      	ldr	r2, [pc, #44]	; (800cd3c <vTaskSwitchContext+0xf0>)
 800cd10:	6013      	str	r3, [r2, #0]
 800cd12:	4a0b      	ldr	r2, [pc, #44]	; (800cd40 <vTaskSwitchContext+0xf4>)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd18:	4b08      	ldr	r3, [pc, #32]	; (800cd3c <vTaskSwitchContext+0xf0>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	335c      	adds	r3, #92	; 0x5c
 800cd1e:	4a0a      	ldr	r2, [pc, #40]	; (800cd48 <vTaskSwitchContext+0xfc>)
 800cd20:	6013      	str	r3, [r2, #0]
}
 800cd22:	bf00      	nop
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	200012c0 	.word	0x200012c0
 800cd30:	200012ac 	.word	0x200012ac
 800cd34:	200012c8 	.word	0x200012c8
 800cd38:	200012c4 	.word	0x200012c4
 800cd3c:	20000dc4 	.word	0x20000dc4
 800cd40:	200012a0 	.word	0x200012a0
 800cd44:	20000dc8 	.word	0x20000dc8
 800cd48:	2000034c 	.word	0x2000034c

0800cd4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10a      	bne.n	800cd72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	60fb      	str	r3, [r7, #12]
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd72:	4b07      	ldr	r3, [pc, #28]	; (800cd90 <vTaskPlaceOnEventList+0x44>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3318      	adds	r3, #24
 800cd78:	4619      	mov	r1, r3
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f7fe fa17 	bl	800b1ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd80:	2101      	movs	r1, #1
 800cd82:	6838      	ldr	r0, [r7, #0]
 800cd84:	f000 fc44 	bl	800d610 <prvAddCurrentTaskToDelayedList>
}
 800cd88:	bf00      	nop
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	20000dc4 	.word	0x20000dc4

0800cd94 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b086      	sub	sp, #24
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d10a      	bne.n	800cdbc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800cda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	617b      	str	r3, [r7, #20]
}
 800cdb8:	bf00      	nop
 800cdba:	e7fe      	b.n	800cdba <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800cdbc:	4b11      	ldr	r3, [pc, #68]	; (800ce04 <vTaskPlaceOnUnorderedEventList+0x70>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10a      	bne.n	800cdda <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	613b      	str	r3, [r7, #16]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800cdda:	4b0b      	ldr	r3, [pc, #44]	; (800ce08 <vTaskPlaceOnUnorderedEventList+0x74>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800cde4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cde6:	4b08      	ldr	r3, [pc, #32]	; (800ce08 <vTaskPlaceOnUnorderedEventList+0x74>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	3318      	adds	r3, #24
 800cdec:	4619      	mov	r1, r3
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f7fe f9b9 	bl	800b166 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cdf4:	2101      	movs	r1, #1
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f000 fc0a 	bl	800d610 <prvAddCurrentTaskToDelayedList>
}
 800cdfc:	bf00      	nop
 800cdfe:	3718      	adds	r7, #24
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	200012c0 	.word	0x200012c0
 800ce08:	20000dc4 	.word	0x20000dc4

0800ce0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b086      	sub	sp, #24
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10a      	bne.n	800ce34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	617b      	str	r3, [r7, #20]
}
 800ce30:	bf00      	nop
 800ce32:	e7fe      	b.n	800ce32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce34:	4b0a      	ldr	r3, [pc, #40]	; (800ce60 <vTaskPlaceOnEventListRestricted+0x54>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	3318      	adds	r3, #24
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	68f8      	ldr	r0, [r7, #12]
 800ce3e:	f7fe f992 	bl	800b166 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ce48:	f04f 33ff 	mov.w	r3, #4294967295
 800ce4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce4e:	6879      	ldr	r1, [r7, #4]
 800ce50:	68b8      	ldr	r0, [r7, #8]
 800ce52:	f000 fbdd 	bl	800d610 <prvAddCurrentTaskToDelayedList>
	}
 800ce56:	bf00      	nop
 800ce58:	3718      	adds	r7, #24
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	20000dc4 	.word	0x20000dc4

0800ce64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d10a      	bne.n	800ce90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	60fb      	str	r3, [r7, #12]
}
 800ce8c:	bf00      	nop
 800ce8e:	e7fe      	b.n	800ce8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	3318      	adds	r3, #24
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fe f9c3 	bl	800b220 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce9a:	4b1e      	ldr	r3, [pc, #120]	; (800cf14 <xTaskRemoveFromEventList+0xb0>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d11d      	bne.n	800cede <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	3304      	adds	r3, #4
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fe f9ba 	bl	800b220 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb0:	4b19      	ldr	r3, [pc, #100]	; (800cf18 <xTaskRemoveFromEventList+0xb4>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d903      	bls.n	800cec0 <xTaskRemoveFromEventList+0x5c>
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebc:	4a16      	ldr	r2, [pc, #88]	; (800cf18 <xTaskRemoveFromEventList+0xb4>)
 800cebe:	6013      	str	r3, [r2, #0]
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec4:	4613      	mov	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	4a13      	ldr	r2, [pc, #76]	; (800cf1c <xTaskRemoveFromEventList+0xb8>)
 800cece:	441a      	add	r2, r3
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	3304      	adds	r3, #4
 800ced4:	4619      	mov	r1, r3
 800ced6:	4610      	mov	r0, r2
 800ced8:	f7fe f945 	bl	800b166 <vListInsertEnd>
 800cedc:	e005      	b.n	800ceea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	3318      	adds	r3, #24
 800cee2:	4619      	mov	r1, r3
 800cee4:	480e      	ldr	r0, [pc, #56]	; (800cf20 <xTaskRemoveFromEventList+0xbc>)
 800cee6:	f7fe f93e 	bl	800b166 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceee:	4b0d      	ldr	r3, [pc, #52]	; (800cf24 <xTaskRemoveFromEventList+0xc0>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d905      	bls.n	800cf04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cef8:	2301      	movs	r3, #1
 800cefa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cefc:	4b0a      	ldr	r3, [pc, #40]	; (800cf28 <xTaskRemoveFromEventList+0xc4>)
 800cefe:	2201      	movs	r2, #1
 800cf00:	601a      	str	r2, [r3, #0]
 800cf02:	e001      	b.n	800cf08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cf04:	2300      	movs	r3, #0
 800cf06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf08:	697b      	ldr	r3, [r7, #20]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3718      	adds	r7, #24
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	200012c0 	.word	0x200012c0
 800cf18:	200012a0 	.word	0x200012a0
 800cf1c:	20000dc8 	.word	0x20000dc8
 800cf20:	20001258 	.word	0x20001258
 800cf24:	20000dc4 	.word	0x20000dc4
 800cf28:	200012ac 	.word	0x200012ac

0800cf2c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800cf36:	4b29      	ldr	r3, [pc, #164]	; (800cfdc <vTaskRemoveFromUnorderedEventList+0xb0>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d10a      	bne.n	800cf54 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800cf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	613b      	str	r3, [r7, #16]
}
 800cf50:	bf00      	nop
 800cf52:	e7fe      	b.n	800cf52 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10a      	bne.n	800cf80 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	60fb      	str	r3, [r7, #12]
}
 800cf7c:	bf00      	nop
 800cf7e:	e7fe      	b.n	800cf7e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7fe f94d 	bl	800b220 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	3304      	adds	r3, #4
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fe f948 	bl	800b220 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf94:	4b12      	ldr	r3, [pc, #72]	; (800cfe0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d903      	bls.n	800cfa4 <vTaskRemoveFromUnorderedEventList+0x78>
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa0:	4a0f      	ldr	r2, [pc, #60]	; (800cfe0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4a0c      	ldr	r2, [pc, #48]	; (800cfe4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800cfb2:	441a      	add	r2, r3
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	4619      	mov	r1, r3
 800cfba:	4610      	mov	r0, r2
 800cfbc:	f7fe f8d3 	bl	800b166 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc4:	4b08      	ldr	r3, [pc, #32]	; (800cfe8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d902      	bls.n	800cfd4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800cfce:	4b07      	ldr	r3, [pc, #28]	; (800cfec <vTaskRemoveFromUnorderedEventList+0xc0>)
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	601a      	str	r2, [r3, #0]
	}
}
 800cfd4:	bf00      	nop
 800cfd6:	3718      	adds	r7, #24
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	200012c0 	.word	0x200012c0
 800cfe0:	200012a0 	.word	0x200012a0
 800cfe4:	20000dc8 	.word	0x20000dc8
 800cfe8:	20000dc4 	.word	0x20000dc4
 800cfec:	200012ac 	.word	0x200012ac

0800cff0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cff8:	4b06      	ldr	r3, [pc, #24]	; (800d014 <vTaskInternalSetTimeOutState+0x24>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d000:	4b05      	ldr	r3, [pc, #20]	; (800d018 <vTaskInternalSetTimeOutState+0x28>)
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	605a      	str	r2, [r3, #4]
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr
 800d014:	200012b0 	.word	0x200012b0
 800d018:	2000129c 	.word	0x2000129c

0800d01c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b088      	sub	sp, #32
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d10a      	bne.n	800d042 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d030:	f383 8811 	msr	BASEPRI, r3
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	613b      	str	r3, [r7, #16]
}
 800d03e:	bf00      	nop
 800d040:	e7fe      	b.n	800d040 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10a      	bne.n	800d05e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04c:	f383 8811 	msr	BASEPRI, r3
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	60fb      	str	r3, [r7, #12]
}
 800d05a:	bf00      	nop
 800d05c:	e7fe      	b.n	800d05c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d05e:	f001 f8a9 	bl	800e1b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d062:	4b1d      	ldr	r3, [pc, #116]	; (800d0d8 <xTaskCheckForTimeOut+0xbc>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	69ba      	ldr	r2, [r7, #24]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07a:	d102      	bne.n	800d082 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d07c:	2300      	movs	r3, #0
 800d07e:	61fb      	str	r3, [r7, #28]
 800d080:	e023      	b.n	800d0ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	4b15      	ldr	r3, [pc, #84]	; (800d0dc <xTaskCheckForTimeOut+0xc0>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d007      	beq.n	800d09e <xTaskCheckForTimeOut+0x82>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	69ba      	ldr	r2, [r7, #24]
 800d094:	429a      	cmp	r2, r3
 800d096:	d302      	bcc.n	800d09e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d098:	2301      	movs	r3, #1
 800d09a:	61fb      	str	r3, [r7, #28]
 800d09c:	e015      	b.n	800d0ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d20b      	bcs.n	800d0c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	1ad2      	subs	r2, r2, r3
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f7ff ff9b 	bl	800cff0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	61fb      	str	r3, [r7, #28]
 800d0be:	e004      	b.n	800d0ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d0ca:	f001 f8a3 	bl	800e214 <vPortExitCritical>

	return xReturn;
 800d0ce:	69fb      	ldr	r3, [r7, #28]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3720      	adds	r7, #32
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	2000129c 	.word	0x2000129c
 800d0dc:	200012b0 	.word	0x200012b0

0800d0e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d0e4:	4b03      	ldr	r3, [pc, #12]	; (800d0f4 <vTaskMissedYield+0x14>)
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	601a      	str	r2, [r3, #0]
}
 800d0ea:	bf00      	nop
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	200012ac 	.word	0x200012ac

0800d0f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d100:	f000 f852 	bl	800d1a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d104:	4b06      	ldr	r3, [pc, #24]	; (800d120 <prvIdleTask+0x28>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d9f9      	bls.n	800d100 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d10c:	4b05      	ldr	r3, [pc, #20]	; (800d124 <prvIdleTask+0x2c>)
 800d10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d112:	601a      	str	r2, [r3, #0]
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d11c:	e7f0      	b.n	800d100 <prvIdleTask+0x8>
 800d11e:	bf00      	nop
 800d120:	20000dc8 	.word	0x20000dc8
 800d124:	e000ed04 	.word	0xe000ed04

0800d128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d12e:	2300      	movs	r3, #0
 800d130:	607b      	str	r3, [r7, #4]
 800d132:	e00c      	b.n	800d14e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	4613      	mov	r3, r2
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	4413      	add	r3, r2
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	4a12      	ldr	r2, [pc, #72]	; (800d188 <prvInitialiseTaskLists+0x60>)
 800d140:	4413      	add	r3, r2
 800d142:	4618      	mov	r0, r3
 800d144:	f7fd ffe2 	bl	800b10c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	3301      	adds	r3, #1
 800d14c:	607b      	str	r3, [r7, #4]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b37      	cmp	r3, #55	; 0x37
 800d152:	d9ef      	bls.n	800d134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d154:	480d      	ldr	r0, [pc, #52]	; (800d18c <prvInitialiseTaskLists+0x64>)
 800d156:	f7fd ffd9 	bl	800b10c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d15a:	480d      	ldr	r0, [pc, #52]	; (800d190 <prvInitialiseTaskLists+0x68>)
 800d15c:	f7fd ffd6 	bl	800b10c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d160:	480c      	ldr	r0, [pc, #48]	; (800d194 <prvInitialiseTaskLists+0x6c>)
 800d162:	f7fd ffd3 	bl	800b10c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d166:	480c      	ldr	r0, [pc, #48]	; (800d198 <prvInitialiseTaskLists+0x70>)
 800d168:	f7fd ffd0 	bl	800b10c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d16c:	480b      	ldr	r0, [pc, #44]	; (800d19c <prvInitialiseTaskLists+0x74>)
 800d16e:	f7fd ffcd 	bl	800b10c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d172:	4b0b      	ldr	r3, [pc, #44]	; (800d1a0 <prvInitialiseTaskLists+0x78>)
 800d174:	4a05      	ldr	r2, [pc, #20]	; (800d18c <prvInitialiseTaskLists+0x64>)
 800d176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d178:	4b0a      	ldr	r3, [pc, #40]	; (800d1a4 <prvInitialiseTaskLists+0x7c>)
 800d17a:	4a05      	ldr	r2, [pc, #20]	; (800d190 <prvInitialiseTaskLists+0x68>)
 800d17c:	601a      	str	r2, [r3, #0]
}
 800d17e:	bf00      	nop
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	20000dc8 	.word	0x20000dc8
 800d18c:	20001228 	.word	0x20001228
 800d190:	2000123c 	.word	0x2000123c
 800d194:	20001258 	.word	0x20001258
 800d198:	2000126c 	.word	0x2000126c
 800d19c:	20001284 	.word	0x20001284
 800d1a0:	20001250 	.word	0x20001250
 800d1a4:	20001254 	.word	0x20001254

0800d1a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1ae:	e019      	b.n	800d1e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1b0:	f001 f800 	bl	800e1b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1b4:	4b10      	ldr	r3, [pc, #64]	; (800d1f8 <prvCheckTasksWaitingTermination+0x50>)
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	3304      	adds	r3, #4
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fe f82d 	bl	800b220 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1c6:	4b0d      	ldr	r3, [pc, #52]	; (800d1fc <prvCheckTasksWaitingTermination+0x54>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	4a0b      	ldr	r2, [pc, #44]	; (800d1fc <prvCheckTasksWaitingTermination+0x54>)
 800d1ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1d0:	4b0b      	ldr	r3, [pc, #44]	; (800d200 <prvCheckTasksWaitingTermination+0x58>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	4a0a      	ldr	r2, [pc, #40]	; (800d200 <prvCheckTasksWaitingTermination+0x58>)
 800d1d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1da:	f001 f81b 	bl	800e214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 f810 	bl	800d204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1e4:	4b06      	ldr	r3, [pc, #24]	; (800d200 <prvCheckTasksWaitingTermination+0x58>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1e1      	bne.n	800d1b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d1ec:	bf00      	nop
 800d1ee:	bf00      	nop
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	2000126c 	.word	0x2000126c
 800d1fc:	20001298 	.word	0x20001298
 800d200:	20001280 	.word	0x20001280

0800d204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	335c      	adds	r3, #92	; 0x5c
 800d210:	4618      	mov	r0, r3
 800d212:	f012 fc75 	bl	801fb00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d108      	bne.n	800d232 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d224:	4618      	mov	r0, r3
 800d226:	f001 f9b3 	bl	800e590 <vPortFree>
				vPortFree( pxTCB );
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f001 f9b0 	bl	800e590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d230:	e018      	b.n	800d264 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d103      	bne.n	800d244 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f001 f9a7 	bl	800e590 <vPortFree>
	}
 800d242:	e00f      	b.n	800d264 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800d24a:	2b02      	cmp	r3, #2
 800d24c:	d00a      	beq.n	800d264 <prvDeleteTCB+0x60>
	__asm volatile
 800d24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d252:	f383 8811 	msr	BASEPRI, r3
 800d256:	f3bf 8f6f 	isb	sy
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	60fb      	str	r3, [r7, #12]
}
 800d260:	bf00      	nop
 800d262:	e7fe      	b.n	800d262 <prvDeleteTCB+0x5e>
	}
 800d264:	bf00      	nop
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d272:	4b0c      	ldr	r3, [pc, #48]	; (800d2a4 <prvResetNextTaskUnblockTime+0x38>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d104      	bne.n	800d286 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d27c:	4b0a      	ldr	r3, [pc, #40]	; (800d2a8 <prvResetNextTaskUnblockTime+0x3c>)
 800d27e:	f04f 32ff 	mov.w	r2, #4294967295
 800d282:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d284:	e008      	b.n	800d298 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d286:	4b07      	ldr	r3, [pc, #28]	; (800d2a4 <prvResetNextTaskUnblockTime+0x38>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	4a04      	ldr	r2, [pc, #16]	; (800d2a8 <prvResetNextTaskUnblockTime+0x3c>)
 800d296:	6013      	str	r3, [r2, #0]
}
 800d298:	bf00      	nop
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr
 800d2a4:	20001250 	.word	0x20001250
 800d2a8:	200012b8 	.word	0x200012b8

0800d2ac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d2b2:	4b05      	ldr	r3, [pc, #20]	; (800d2c8 <xTaskGetCurrentTaskHandle+0x1c>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d2b8:	687b      	ldr	r3, [r7, #4]
	}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	370c      	adds	r7, #12
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop
 800d2c8:	20000dc4 	.word	0x20000dc4

0800d2cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d2d2:	4b0b      	ldr	r3, [pc, #44]	; (800d300 <xTaskGetSchedulerState+0x34>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d102      	bne.n	800d2e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	607b      	str	r3, [r7, #4]
 800d2de:	e008      	b.n	800d2f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2e0:	4b08      	ldr	r3, [pc, #32]	; (800d304 <xTaskGetSchedulerState+0x38>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d2e8:	2302      	movs	r3, #2
 800d2ea:	607b      	str	r3, [r7, #4]
 800d2ec:	e001      	b.n	800d2f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2f2:	687b      	ldr	r3, [r7, #4]
	}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr
 800d300:	200012a4 	.word	0x200012a4
 800d304:	200012c0 	.word	0x200012c0

0800d308 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d314:	2300      	movs	r3, #0
 800d316:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d051      	beq.n	800d3c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d322:	4b2a      	ldr	r3, [pc, #168]	; (800d3cc <xTaskPriorityInherit+0xc4>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d328:	429a      	cmp	r2, r3
 800d32a:	d241      	bcs.n	800d3b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	699b      	ldr	r3, [r3, #24]
 800d330:	2b00      	cmp	r3, #0
 800d332:	db06      	blt.n	800d342 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d334:	4b25      	ldr	r3, [pc, #148]	; (800d3cc <xTaskPriorityInherit+0xc4>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	6959      	ldr	r1, [r3, #20]
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d34a:	4613      	mov	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4413      	add	r3, r2
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	4a1f      	ldr	r2, [pc, #124]	; (800d3d0 <xTaskPriorityInherit+0xc8>)
 800d354:	4413      	add	r3, r2
 800d356:	4299      	cmp	r1, r3
 800d358:	d122      	bne.n	800d3a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	3304      	adds	r3, #4
 800d35e:	4618      	mov	r0, r3
 800d360:	f7fd ff5e 	bl	800b220 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d364:	4b19      	ldr	r3, [pc, #100]	; (800d3cc <xTaskPriorityInherit+0xc4>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d372:	4b18      	ldr	r3, [pc, #96]	; (800d3d4 <xTaskPriorityInherit+0xcc>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	429a      	cmp	r2, r3
 800d378:	d903      	bls.n	800d382 <xTaskPriorityInherit+0x7a>
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37e:	4a15      	ldr	r2, [pc, #84]	; (800d3d4 <xTaskPriorityInherit+0xcc>)
 800d380:	6013      	str	r3, [r2, #0]
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d386:	4613      	mov	r3, r2
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	4413      	add	r3, r2
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	4a10      	ldr	r2, [pc, #64]	; (800d3d0 <xTaskPriorityInherit+0xc8>)
 800d390:	441a      	add	r2, r3
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	3304      	adds	r3, #4
 800d396:	4619      	mov	r1, r3
 800d398:	4610      	mov	r0, r2
 800d39a:	f7fd fee4 	bl	800b166 <vListInsertEnd>
 800d39e:	e004      	b.n	800d3aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d3a0:	4b0a      	ldr	r3, [pc, #40]	; (800d3cc <xTaskPriorityInherit+0xc4>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	60fb      	str	r3, [r7, #12]
 800d3ae:	e008      	b.n	800d3c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d3b4:	4b05      	ldr	r3, [pc, #20]	; (800d3cc <xTaskPriorityInherit+0xc4>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d201      	bcs.n	800d3c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
	}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3710      	adds	r7, #16
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	20000dc4 	.word	0x20000dc4
 800d3d0:	20000dc8 	.word	0x20000dc8
 800d3d4:	200012a0 	.word	0x200012a0

0800d3d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b086      	sub	sp, #24
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d056      	beq.n	800d49c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d3ee:	4b2e      	ldr	r3, [pc, #184]	; (800d4a8 <xTaskPriorityDisinherit+0xd0>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d00a      	beq.n	800d40e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	60fb      	str	r3, [r7, #12]
}
 800d40a:	bf00      	nop
 800d40c:	e7fe      	b.n	800d40c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d412:	2b00      	cmp	r3, #0
 800d414:	d10a      	bne.n	800d42c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d41a:	f383 8811 	msr	BASEPRI, r3
 800d41e:	f3bf 8f6f 	isb	sy
 800d422:	f3bf 8f4f 	dsb	sy
 800d426:	60bb      	str	r3, [r7, #8]
}
 800d428:	bf00      	nop
 800d42a:	e7fe      	b.n	800d42a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d430:	1e5a      	subs	r2, r3, #1
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d43e:	429a      	cmp	r2, r3
 800d440:	d02c      	beq.n	800d49c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d446:	2b00      	cmp	r3, #0
 800d448:	d128      	bne.n	800d49c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	3304      	adds	r3, #4
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fd fee6 	bl	800b220 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d460:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d46c:	4b0f      	ldr	r3, [pc, #60]	; (800d4ac <xTaskPriorityDisinherit+0xd4>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	429a      	cmp	r2, r3
 800d472:	d903      	bls.n	800d47c <xTaskPriorityDisinherit+0xa4>
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d478:	4a0c      	ldr	r2, [pc, #48]	; (800d4ac <xTaskPriorityDisinherit+0xd4>)
 800d47a:	6013      	str	r3, [r2, #0]
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d480:	4613      	mov	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4a09      	ldr	r2, [pc, #36]	; (800d4b0 <xTaskPriorityDisinherit+0xd8>)
 800d48a:	441a      	add	r2, r3
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	3304      	adds	r3, #4
 800d490:	4619      	mov	r1, r3
 800d492:	4610      	mov	r0, r2
 800d494:	f7fd fe67 	bl	800b166 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d498:	2301      	movs	r3, #1
 800d49a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d49c:	697b      	ldr	r3, [r7, #20]
	}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3718      	adds	r7, #24
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20000dc4 	.word	0x20000dc4
 800d4ac:	200012a0 	.word	0x200012a0
 800d4b0:	20000dc8 	.word	0x20000dc8

0800d4b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b088      	sub	sp, #32
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d06a      	beq.n	800d5a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d10a      	bne.n	800d4ea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d8:	f383 8811 	msr	BASEPRI, r3
 800d4dc:	f3bf 8f6f 	isb	sy
 800d4e0:	f3bf 8f4f 	dsb	sy
 800d4e4:	60fb      	str	r3, [r7, #12]
}
 800d4e6:	bf00      	nop
 800d4e8:	e7fe      	b.n	800d4e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4ee:	683a      	ldr	r2, [r7, #0]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d902      	bls.n	800d4fa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	61fb      	str	r3, [r7, #28]
 800d4f8:	e002      	b.n	800d500 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d4fa:	69bb      	ldr	r3, [r7, #24]
 800d4fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4fe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d504:	69fa      	ldr	r2, [r7, #28]
 800d506:	429a      	cmp	r2, r3
 800d508:	d04b      	beq.n	800d5a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	429a      	cmp	r2, r3
 800d512:	d146      	bne.n	800d5a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d514:	4b25      	ldr	r3, [pc, #148]	; (800d5ac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	69ba      	ldr	r2, [r7, #24]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d10a      	bne.n	800d534 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	60bb      	str	r3, [r7, #8]
}
 800d530:	bf00      	nop
 800d532:	e7fe      	b.n	800d532 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d538:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	69fa      	ldr	r2, [r7, #28]
 800d53e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	699b      	ldr	r3, [r3, #24]
 800d544:	2b00      	cmp	r3, #0
 800d546:	db04      	blt.n	800d552 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	6959      	ldr	r1, [r3, #20]
 800d556:	693a      	ldr	r2, [r7, #16]
 800d558:	4613      	mov	r3, r2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	4413      	add	r3, r2
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	4a13      	ldr	r2, [pc, #76]	; (800d5b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d562:	4413      	add	r3, r2
 800d564:	4299      	cmp	r1, r3
 800d566:	d11c      	bne.n	800d5a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	3304      	adds	r3, #4
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7fd fe57 	bl	800b220 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d576:	4b0f      	ldr	r3, [pc, #60]	; (800d5b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d903      	bls.n	800d586 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d582:	4a0c      	ldr	r2, [pc, #48]	; (800d5b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d584:	6013      	str	r3, [r2, #0]
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58a:	4613      	mov	r3, r2
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	4413      	add	r3, r2
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	4a07      	ldr	r2, [pc, #28]	; (800d5b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d594:	441a      	add	r2, r3
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	3304      	adds	r3, #4
 800d59a:	4619      	mov	r1, r3
 800d59c:	4610      	mov	r0, r2
 800d59e:	f7fd fde2 	bl	800b166 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5a2:	bf00      	nop
 800d5a4:	3720      	adds	r7, #32
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	20000dc4 	.word	0x20000dc4
 800d5b0:	20000dc8 	.word	0x20000dc8
 800d5b4:	200012a0 	.word	0x200012a0

0800d5b8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800d5be:	4b09      	ldr	r3, [pc, #36]	; (800d5e4 <uxTaskResetEventItemValue+0x2c>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	699b      	ldr	r3, [r3, #24]
 800d5c4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5c6:	4b07      	ldr	r3, [pc, #28]	; (800d5e4 <uxTaskResetEventItemValue+0x2c>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5cc:	4b05      	ldr	r3, [pc, #20]	; (800d5e4 <uxTaskResetEventItemValue+0x2c>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800d5d4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800d5d6:	687b      	ldr	r3, [r7, #4]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr
 800d5e4:	20000dc4 	.word	0x20000dc4

0800d5e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d5e8:	b480      	push	{r7}
 800d5ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d5ec:	4b07      	ldr	r3, [pc, #28]	; (800d60c <pvTaskIncrementMutexHeldCount+0x24>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d004      	beq.n	800d5fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d5f4:	4b05      	ldr	r3, [pc, #20]	; (800d60c <pvTaskIncrementMutexHeldCount+0x24>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5fa:	3201      	adds	r2, #1
 800d5fc:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800d5fe:	4b03      	ldr	r3, [pc, #12]	; (800d60c <pvTaskIncrementMutexHeldCount+0x24>)
 800d600:	681b      	ldr	r3, [r3, #0]
	}
 800d602:	4618      	mov	r0, r3
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr
 800d60c:	20000dc4 	.word	0x20000dc4

0800d610 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d61a:	4b21      	ldr	r3, [pc, #132]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d620:	4b20      	ldr	r3, [pc, #128]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3304      	adds	r3, #4
 800d626:	4618      	mov	r0, r3
 800d628:	f7fd fdfa 	bl	800b220 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d632:	d10a      	bne.n	800d64a <prvAddCurrentTaskToDelayedList+0x3a>
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d007      	beq.n	800d64a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d63a:	4b1a      	ldr	r3, [pc, #104]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	3304      	adds	r3, #4
 800d640:	4619      	mov	r1, r3
 800d642:	4819      	ldr	r0, [pc, #100]	; (800d6a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d644:	f7fd fd8f 	bl	800b166 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d648:	e026      	b.n	800d698 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	4413      	add	r3, r2
 800d650:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d652:	4b14      	ldr	r3, [pc, #80]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	68ba      	ldr	r2, [r7, #8]
 800d658:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d209      	bcs.n	800d676 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d662:	4b12      	ldr	r3, [pc, #72]	; (800d6ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	4b0f      	ldr	r3, [pc, #60]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	3304      	adds	r3, #4
 800d66c:	4619      	mov	r1, r3
 800d66e:	4610      	mov	r0, r2
 800d670:	f7fd fd9d 	bl	800b1ae <vListInsert>
}
 800d674:	e010      	b.n	800d698 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d676:	4b0e      	ldr	r3, [pc, #56]	; (800d6b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	4b0a      	ldr	r3, [pc, #40]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	3304      	adds	r3, #4
 800d680:	4619      	mov	r1, r3
 800d682:	4610      	mov	r0, r2
 800d684:	f7fd fd93 	bl	800b1ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d688:	4b0a      	ldr	r3, [pc, #40]	; (800d6b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68ba      	ldr	r2, [r7, #8]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d202      	bcs.n	800d698 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d692:	4a08      	ldr	r2, [pc, #32]	; (800d6b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	6013      	str	r3, [r2, #0]
}
 800d698:	bf00      	nop
 800d69a:	3710      	adds	r7, #16
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	2000129c 	.word	0x2000129c
 800d6a4:	20000dc4 	.word	0x20000dc4
 800d6a8:	20001284 	.word	0x20001284
 800d6ac:	20001254 	.word	0x20001254
 800d6b0:	20001250 	.word	0x20001250
 800d6b4:	200012b8 	.word	0x200012b8

0800d6b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b08a      	sub	sp, #40	; 0x28
 800d6bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d6c2:	f000 fba1 	bl	800de08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d6c6:	4b1c      	ldr	r3, [pc, #112]	; (800d738 <xTimerCreateTimerTask+0x80>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d021      	beq.n	800d712 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d6d6:	1d3a      	adds	r2, r7, #4
 800d6d8:	f107 0108 	add.w	r1, r7, #8
 800d6dc:	f107 030c 	add.w	r3, r7, #12
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7fd fa59 	bl	800ab98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d6e6:	6879      	ldr	r1, [r7, #4]
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	9202      	str	r2, [sp, #8]
 800d6ee:	9301      	str	r3, [sp, #4]
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	460a      	mov	r2, r1
 800d6f8:	4910      	ldr	r1, [pc, #64]	; (800d73c <xTimerCreateTimerTask+0x84>)
 800d6fa:	4811      	ldr	r0, [pc, #68]	; (800d740 <xTimerCreateTimerTask+0x88>)
 800d6fc:	f7fe feba 	bl	800c474 <xTaskCreateStatic>
 800d700:	4603      	mov	r3, r0
 800d702:	4a10      	ldr	r2, [pc, #64]	; (800d744 <xTimerCreateTimerTask+0x8c>)
 800d704:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d706:	4b0f      	ldr	r3, [pc, #60]	; (800d744 <xTimerCreateTimerTask+0x8c>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d001      	beq.n	800d712 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d70e:	2301      	movs	r3, #1
 800d710:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10a      	bne.n	800d72e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	613b      	str	r3, [r7, #16]
}
 800d72a:	bf00      	nop
 800d72c:	e7fe      	b.n	800d72c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d72e:	697b      	ldr	r3, [r7, #20]
}
 800d730:	4618      	mov	r0, r3
 800d732:	3718      	adds	r7, #24
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	200012fc 	.word	0x200012fc
 800d73c:	08021950 	.word	0x08021950
 800d740:	0800d9b1 	.word	0x0800d9b1
 800d744:	20001300 	.word	0x20001300

0800d748 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b088      	sub	sp, #32
 800d74c:	af02      	add	r7, sp, #8
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
 800d754:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d756:	202c      	movs	r0, #44	; 0x2c
 800d758:	f000 fe4e 	bl	800e3f8 <pvPortMalloc>
 800d75c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00d      	beq.n	800d780 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	9301      	str	r3, [sp, #4]
 800d770:	6a3b      	ldr	r3, [r7, #32]
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	68b9      	ldr	r1, [r7, #8]
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f000 f843 	bl	800d806 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d780:	697b      	ldr	r3, [r7, #20]
	}
 800d782:	4618      	mov	r0, r3
 800d784:	3718      	adds	r7, #24
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b08a      	sub	sp, #40	; 0x28
 800d78e:	af02      	add	r7, sp, #8
 800d790:	60f8      	str	r0, [r7, #12]
 800d792:	60b9      	str	r1, [r7, #8]
 800d794:	607a      	str	r2, [r7, #4]
 800d796:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d798:	232c      	movs	r3, #44	; 0x2c
 800d79a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	2b2c      	cmp	r3, #44	; 0x2c
 800d7a0:	d00a      	beq.n	800d7b8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a6:	f383 8811 	msr	BASEPRI, r3
 800d7aa:	f3bf 8f6f 	isb	sy
 800d7ae:	f3bf 8f4f 	dsb	sy
 800d7b2:	61bb      	str	r3, [r7, #24]
}
 800d7b4:	bf00      	nop
 800d7b6:	e7fe      	b.n	800d7b6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d7b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10a      	bne.n	800d7d6 <xTimerCreateStatic+0x4c>
	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	617b      	str	r3, [r7, #20]
}
 800d7d2:	bf00      	nop
 800d7d4:	e7fe      	b.n	800d7d4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00d      	beq.n	800d7fc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	2202      	movs	r2, #2
 800d7e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	9301      	str	r3, [sp, #4]
 800d7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	68b9      	ldr	r1, [r7, #8]
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f000 f805 	bl	800d806 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d7fc:	69fb      	ldr	r3, [r7, #28]
	}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3720      	adds	r7, #32
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b086      	sub	sp, #24
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	60f8      	str	r0, [r7, #12]
 800d80e:	60b9      	str	r1, [r7, #8]
 800d810:	607a      	str	r2, [r7, #4]
 800d812:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d10a      	bne.n	800d830 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81e:	f383 8811 	msr	BASEPRI, r3
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	617b      	str	r3, [r7, #20]
}
 800d82c:	bf00      	nop
 800d82e:	e7fe      	b.n	800d82e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d832:	2b00      	cmp	r3, #0
 800d834:	d01e      	beq.n	800d874 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d836:	f000 fae7 	bl	800de08 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	683a      	ldr	r2, [r7, #0]
 800d84a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84e:	6a3a      	ldr	r2, [r7, #32]
 800d850:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d854:	3304      	adds	r3, #4
 800d856:	4618      	mov	r0, r3
 800d858:	f7fd fc78 	bl	800b14c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d008      	beq.n	800d874 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d868:	f043 0304 	orr.w	r3, r3, #4
 800d86c:	b2da      	uxtb	r2, r3
 800d86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d874:	bf00      	nop
 800d876:	3718      	adds	r7, #24
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08a      	sub	sp, #40	; 0x28
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
 800d888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d88a:	2300      	movs	r3, #0
 800d88c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10a      	bne.n	800d8aa <xTimerGenericCommand+0x2e>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	623b      	str	r3, [r7, #32]
}
 800d8a6:	bf00      	nop
 800d8a8:	e7fe      	b.n	800d8a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d8aa:	4b1a      	ldr	r3, [pc, #104]	; (800d914 <xTimerGenericCommand+0x98>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d02a      	beq.n	800d908 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	2b05      	cmp	r3, #5
 800d8c2:	dc18      	bgt.n	800d8f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d8c4:	f7ff fd02 	bl	800d2cc <xTaskGetSchedulerState>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d109      	bne.n	800d8e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d8ce:	4b11      	ldr	r3, [pc, #68]	; (800d914 <xTimerGenericCommand+0x98>)
 800d8d0:	6818      	ldr	r0, [r3, #0]
 800d8d2:	f107 0110 	add.w	r1, r7, #16
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8da:	f7fd ff29 	bl	800b730 <xQueueGenericSend>
 800d8de:	6278      	str	r0, [r7, #36]	; 0x24
 800d8e0:	e012      	b.n	800d908 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d8e2:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <xTimerGenericCommand+0x98>)
 800d8e4:	6818      	ldr	r0, [r3, #0]
 800d8e6:	f107 0110 	add.w	r1, r7, #16
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f7fd ff1f 	bl	800b730 <xQueueGenericSend>
 800d8f2:	6278      	str	r0, [r7, #36]	; 0x24
 800d8f4:	e008      	b.n	800d908 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d8f6:	4b07      	ldr	r3, [pc, #28]	; (800d914 <xTimerGenericCommand+0x98>)
 800d8f8:	6818      	ldr	r0, [r3, #0]
 800d8fa:	f107 0110 	add.w	r1, r7, #16
 800d8fe:	2300      	movs	r3, #0
 800d900:	683a      	ldr	r2, [r7, #0]
 800d902:	f7fe f813 	bl	800b92c <xQueueGenericSendFromISR>
 800d906:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3728      	adds	r7, #40	; 0x28
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	200012fc 	.word	0x200012fc

0800d918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b088      	sub	sp, #32
 800d91c:	af02      	add	r7, sp, #8
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d922:	4b22      	ldr	r3, [pc, #136]	; (800d9ac <prvProcessExpiredTimer+0x94>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	3304      	adds	r3, #4
 800d930:	4618      	mov	r0, r3
 800d932:	f7fd fc75 	bl	800b220 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d93c:	f003 0304 	and.w	r3, r3, #4
 800d940:	2b00      	cmp	r3, #0
 800d942:	d022      	beq.n	800d98a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	699a      	ldr	r2, [r3, #24]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	18d1      	adds	r1, r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	683a      	ldr	r2, [r7, #0]
 800d950:	6978      	ldr	r0, [r7, #20]
 800d952:	f000 f8d1 	bl	800daf8 <prvInsertTimerInActiveList>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d01f      	beq.n	800d99c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d95c:	2300      	movs	r3, #0
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	2300      	movs	r3, #0
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	2100      	movs	r1, #0
 800d966:	6978      	ldr	r0, [r7, #20]
 800d968:	f7ff ff88 	bl	800d87c <xTimerGenericCommand>
 800d96c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d113      	bne.n	800d99c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	60fb      	str	r3, [r7, #12]
}
 800d986:	bf00      	nop
 800d988:	e7fe      	b.n	800d988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d990:	f023 0301 	bic.w	r3, r3, #1
 800d994:	b2da      	uxtb	r2, r3
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	6a1b      	ldr	r3, [r3, #32]
 800d9a0:	6978      	ldr	r0, [r7, #20]
 800d9a2:	4798      	blx	r3
}
 800d9a4:	bf00      	nop
 800d9a6:	3718      	adds	r7, #24
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}
 800d9ac:	200012f4 	.word	0x200012f4

0800d9b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d9b8:	f107 0308 	add.w	r3, r7, #8
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f000 f857 	bl	800da70 <prvGetNextExpireTime>
 800d9c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f000 f803 	bl	800d9d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d9ce:	f000 f8d5 	bl	800db7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d9d2:	e7f1      	b.n	800d9b8 <prvTimerTask+0x8>

0800d9d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d9de:	f7fe ffad 	bl	800c93c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9e2:	f107 0308 	add.w	r3, r7, #8
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 f866 	bl	800dab8 <prvSampleTimeNow>
 800d9ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d130      	bne.n	800da56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d10a      	bne.n	800da10 <prvProcessTimerOrBlockTask+0x3c>
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d806      	bhi.n	800da10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da02:	f7fe ffa9 	bl	800c958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da06:	68f9      	ldr	r1, [r7, #12]
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7ff ff85 	bl	800d918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800da0e:	e024      	b.n	800da5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d008      	beq.n	800da28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800da16:	4b13      	ldr	r3, [pc, #76]	; (800da64 <prvProcessTimerOrBlockTask+0x90>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d101      	bne.n	800da24 <prvProcessTimerOrBlockTask+0x50>
 800da20:	2301      	movs	r3, #1
 800da22:	e000      	b.n	800da26 <prvProcessTimerOrBlockTask+0x52>
 800da24:	2300      	movs	r3, #0
 800da26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800da28:	4b0f      	ldr	r3, [pc, #60]	; (800da68 <prvProcessTimerOrBlockTask+0x94>)
 800da2a:	6818      	ldr	r0, [r3, #0]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	683a      	ldr	r2, [r7, #0]
 800da34:	4619      	mov	r1, r3
 800da36:	f7fe fce9 	bl	800c40c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800da3a:	f7fe ff8d 	bl	800c958 <xTaskResumeAll>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d10a      	bne.n	800da5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800da44:	4b09      	ldr	r3, [pc, #36]	; (800da6c <prvProcessTimerOrBlockTask+0x98>)
 800da46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da4a:	601a      	str	r2, [r3, #0]
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	f3bf 8f6f 	isb	sy
}
 800da54:	e001      	b.n	800da5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800da56:	f7fe ff7f 	bl	800c958 <xTaskResumeAll>
}
 800da5a:	bf00      	nop
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	200012f8 	.word	0x200012f8
 800da68:	200012fc 	.word	0x200012fc
 800da6c:	e000ed04 	.word	0xe000ed04

0800da70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800da70:	b480      	push	{r7}
 800da72:	b085      	sub	sp, #20
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800da78:	4b0e      	ldr	r3, [pc, #56]	; (800dab4 <prvGetNextExpireTime+0x44>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d101      	bne.n	800da86 <prvGetNextExpireTime+0x16>
 800da82:	2201      	movs	r2, #1
 800da84:	e000      	b.n	800da88 <prvGetNextExpireTime+0x18>
 800da86:	2200      	movs	r2, #0
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d105      	bne.n	800daa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da94:	4b07      	ldr	r3, [pc, #28]	; (800dab4 <prvGetNextExpireTime+0x44>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	60fb      	str	r3, [r7, #12]
 800da9e:	e001      	b.n	800daa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800daa0:	2300      	movs	r3, #0
 800daa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800daa4:	68fb      	ldr	r3, [r7, #12]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	200012f4 	.word	0x200012f4

0800dab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dac0:	f7fe ffe8 	bl	800ca94 <xTaskGetTickCount>
 800dac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dac6:	4b0b      	ldr	r3, [pc, #44]	; (800daf4 <prvSampleTimeNow+0x3c>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d205      	bcs.n	800dadc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dad0:	f000 f936 	bl	800dd40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	601a      	str	r2, [r3, #0]
 800dada:	e002      	b.n	800dae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2200      	movs	r2, #0
 800dae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dae2:	4a04      	ldr	r2, [pc, #16]	; (800daf4 <prvSampleTimeNow+0x3c>)
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dae8:	68fb      	ldr	r3, [r7, #12]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	20001304 	.word	0x20001304

0800daf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b086      	sub	sp, #24
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
 800db04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db06:	2300      	movs	r3, #0
 800db08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	68ba      	ldr	r2, [r7, #8]
 800db0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	68fa      	ldr	r2, [r7, #12]
 800db14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d812      	bhi.n	800db44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	1ad2      	subs	r2, r2, r3
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d302      	bcc.n	800db32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800db2c:	2301      	movs	r3, #1
 800db2e:	617b      	str	r3, [r7, #20]
 800db30:	e01b      	b.n	800db6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800db32:	4b10      	ldr	r3, [pc, #64]	; (800db74 <prvInsertTimerInActiveList+0x7c>)
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	3304      	adds	r3, #4
 800db3a:	4619      	mov	r1, r3
 800db3c:	4610      	mov	r0, r2
 800db3e:	f7fd fb36 	bl	800b1ae <vListInsert>
 800db42:	e012      	b.n	800db6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d206      	bcs.n	800db5a <prvInsertTimerInActiveList+0x62>
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	429a      	cmp	r2, r3
 800db52:	d302      	bcc.n	800db5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800db54:	2301      	movs	r3, #1
 800db56:	617b      	str	r3, [r7, #20]
 800db58:	e007      	b.n	800db6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db5a:	4b07      	ldr	r3, [pc, #28]	; (800db78 <prvInsertTimerInActiveList+0x80>)
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	3304      	adds	r3, #4
 800db62:	4619      	mov	r1, r3
 800db64:	4610      	mov	r0, r2
 800db66:	f7fd fb22 	bl	800b1ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800db6a:	697b      	ldr	r3, [r7, #20]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3718      	adds	r7, #24
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}
 800db74:	200012f8 	.word	0x200012f8
 800db78:	200012f4 	.word	0x200012f4

0800db7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b08e      	sub	sp, #56	; 0x38
 800db80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db82:	e0ca      	b.n	800dd1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	da18      	bge.n	800dbbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800db8a:	1d3b      	adds	r3, r7, #4
 800db8c:	3304      	adds	r3, #4
 800db8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800db90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10a      	bne.n	800dbac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800db96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	61fb      	str	r3, [r7, #28]
}
 800dba8:	bf00      	nop
 800dbaa:	e7fe      	b.n	800dbaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbb2:	6850      	ldr	r0, [r2, #4]
 800dbb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbb6:	6892      	ldr	r2, [r2, #8]
 800dbb8:	4611      	mov	r1, r2
 800dbba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f2c0 80aa 	blt.w	800dd18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbca:	695b      	ldr	r3, [r3, #20]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d004      	beq.n	800dbda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fd fb23 	bl	800b220 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbda:	463b      	mov	r3, r7
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7ff ff6b 	bl	800dab8 <prvSampleTimeNow>
 800dbe2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b09      	cmp	r3, #9
 800dbe8:	f200 8097 	bhi.w	800dd1a <prvProcessReceivedCommands+0x19e>
 800dbec:	a201      	add	r2, pc, #4	; (adr r2, 800dbf4 <prvProcessReceivedCommands+0x78>)
 800dbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf2:	bf00      	nop
 800dbf4:	0800dc1d 	.word	0x0800dc1d
 800dbf8:	0800dc1d 	.word	0x0800dc1d
 800dbfc:	0800dc1d 	.word	0x0800dc1d
 800dc00:	0800dc91 	.word	0x0800dc91
 800dc04:	0800dca5 	.word	0x0800dca5
 800dc08:	0800dcef 	.word	0x0800dcef
 800dc0c:	0800dc1d 	.word	0x0800dc1d
 800dc10:	0800dc1d 	.word	0x0800dc1d
 800dc14:	0800dc91 	.word	0x0800dc91
 800dc18:	0800dca5 	.word	0x0800dca5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc22:	f043 0301 	orr.w	r3, r3, #1
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc32:	699b      	ldr	r3, [r3, #24]
 800dc34:	18d1      	adds	r1, r2, r3
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc3c:	f7ff ff5c 	bl	800daf8 <prvInsertTimerInActiveList>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d069      	beq.n	800dd1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc48:	6a1b      	ldr	r3, [r3, #32]
 800dc4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc54:	f003 0304 	and.w	r3, r3, #4
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d05e      	beq.n	800dd1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dc5c:	68ba      	ldr	r2, [r7, #8]
 800dc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc60:	699b      	ldr	r3, [r3, #24]
 800dc62:	441a      	add	r2, r3
 800dc64:	2300      	movs	r3, #0
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	2300      	movs	r3, #0
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc6e:	f7ff fe05 	bl	800d87c <xTimerGenericCommand>
 800dc72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dc74:	6a3b      	ldr	r3, [r7, #32]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d14f      	bne.n	800dd1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7e:	f383 8811 	msr	BASEPRI, r3
 800dc82:	f3bf 8f6f 	isb	sy
 800dc86:	f3bf 8f4f 	dsb	sy
 800dc8a:	61bb      	str	r3, [r7, #24]
}
 800dc8c:	bf00      	nop
 800dc8e:	e7fe      	b.n	800dc8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc96:	f023 0301 	bic.w	r3, r3, #1
 800dc9a:	b2da      	uxtb	r2, r3
 800dc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dca2:	e03a      	b.n	800dd1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcaa:	f043 0301 	orr.w	r3, r3, #1
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dcb6:	68ba      	ldr	r2, [r7, #8]
 800dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbe:	699b      	ldr	r3, [r3, #24]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d10a      	bne.n	800dcda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	617b      	str	r3, [r7, #20]
}
 800dcd6:	bf00      	nop
 800dcd8:	e7fe      	b.n	800dcd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcdc:	699a      	ldr	r2, [r3, #24]
 800dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce0:	18d1      	adds	r1, r2, r3
 800dce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dce8:	f7ff ff06 	bl	800daf8 <prvInsertTimerInActiveList>
					break;
 800dcec:	e015      	b.n	800dd1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcf4:	f003 0302 	and.w	r3, r3, #2
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d103      	bne.n	800dd04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dcfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcfe:	f000 fc47 	bl	800e590 <vPortFree>
 800dd02:	e00a      	b.n	800dd1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd0a:	f023 0301 	bic.w	r3, r3, #1
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dd16:	e000      	b.n	800dd1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dd18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd1a:	4b08      	ldr	r3, [pc, #32]	; (800dd3c <prvProcessReceivedCommands+0x1c0>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	1d39      	adds	r1, r7, #4
 800dd20:	2200      	movs	r2, #0
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fd ff2a 	bl	800bb7c <xQueueReceive>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f47f af2a 	bne.w	800db84 <prvProcessReceivedCommands+0x8>
	}
}
 800dd30:	bf00      	nop
 800dd32:	bf00      	nop
 800dd34:	3730      	adds	r7, #48	; 0x30
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	200012fc 	.word	0x200012fc

0800dd40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b088      	sub	sp, #32
 800dd44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd46:	e048      	b.n	800ddda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd48:	4b2d      	ldr	r3, [pc, #180]	; (800de00 <prvSwitchTimerLists+0xc0>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd52:	4b2b      	ldr	r3, [pc, #172]	; (800de00 <prvSwitchTimerLists+0xc0>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	3304      	adds	r3, #4
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fd fa5d 	bl	800b220 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd74:	f003 0304 	and.w	r3, r3, #4
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d02e      	beq.n	800ddda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	699b      	ldr	r3, [r3, #24]
 800dd80:	693a      	ldr	r2, [r7, #16]
 800dd82:	4413      	add	r3, r2
 800dd84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dd86:	68ba      	ldr	r2, [r7, #8]
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d90e      	bls.n	800ddac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	68fa      	ldr	r2, [r7, #12]
 800dd98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd9a:	4b19      	ldr	r3, [pc, #100]	; (800de00 <prvSwitchTimerLists+0xc0>)
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	3304      	adds	r3, #4
 800dda2:	4619      	mov	r1, r3
 800dda4:	4610      	mov	r0, r2
 800dda6:	f7fd fa02 	bl	800b1ae <vListInsert>
 800ddaa:	e016      	b.n	800ddda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ddac:	2300      	movs	r3, #0
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	693a      	ldr	r2, [r7, #16]
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f7ff fd60 	bl	800d87c <xTimerGenericCommand>
 800ddbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10a      	bne.n	800ddda <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ddc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc8:	f383 8811 	msr	BASEPRI, r3
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f3bf 8f4f 	dsb	sy
 800ddd4:	603b      	str	r3, [r7, #0]
}
 800ddd6:	bf00      	nop
 800ddd8:	e7fe      	b.n	800ddd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddda:	4b09      	ldr	r3, [pc, #36]	; (800de00 <prvSwitchTimerLists+0xc0>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d1b1      	bne.n	800dd48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dde4:	4b06      	ldr	r3, [pc, #24]	; (800de00 <prvSwitchTimerLists+0xc0>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ddea:	4b06      	ldr	r3, [pc, #24]	; (800de04 <prvSwitchTimerLists+0xc4>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4a04      	ldr	r2, [pc, #16]	; (800de00 <prvSwitchTimerLists+0xc0>)
 800ddf0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ddf2:	4a04      	ldr	r2, [pc, #16]	; (800de04 <prvSwitchTimerLists+0xc4>)
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	6013      	str	r3, [r2, #0]
}
 800ddf8:	bf00      	nop
 800ddfa:	3718      	adds	r7, #24
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	200012f4 	.word	0x200012f4
 800de04:	200012f8 	.word	0x200012f8

0800de08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de0e:	f000 f9d1 	bl	800e1b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800de12:	4b15      	ldr	r3, [pc, #84]	; (800de68 <prvCheckForValidListAndQueue+0x60>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d120      	bne.n	800de5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800de1a:	4814      	ldr	r0, [pc, #80]	; (800de6c <prvCheckForValidListAndQueue+0x64>)
 800de1c:	f7fd f976 	bl	800b10c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de20:	4813      	ldr	r0, [pc, #76]	; (800de70 <prvCheckForValidListAndQueue+0x68>)
 800de22:	f7fd f973 	bl	800b10c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de26:	4b13      	ldr	r3, [pc, #76]	; (800de74 <prvCheckForValidListAndQueue+0x6c>)
 800de28:	4a10      	ldr	r2, [pc, #64]	; (800de6c <prvCheckForValidListAndQueue+0x64>)
 800de2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de2c:	4b12      	ldr	r3, [pc, #72]	; (800de78 <prvCheckForValidListAndQueue+0x70>)
 800de2e:	4a10      	ldr	r2, [pc, #64]	; (800de70 <prvCheckForValidListAndQueue+0x68>)
 800de30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800de32:	2300      	movs	r3, #0
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	4b11      	ldr	r3, [pc, #68]	; (800de7c <prvCheckForValidListAndQueue+0x74>)
 800de38:	4a11      	ldr	r2, [pc, #68]	; (800de80 <prvCheckForValidListAndQueue+0x78>)
 800de3a:	2110      	movs	r1, #16
 800de3c:	200a      	movs	r0, #10
 800de3e:	f7fd fa81 	bl	800b344 <xQueueGenericCreateStatic>
 800de42:	4603      	mov	r3, r0
 800de44:	4a08      	ldr	r2, [pc, #32]	; (800de68 <prvCheckForValidListAndQueue+0x60>)
 800de46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800de48:	4b07      	ldr	r3, [pc, #28]	; (800de68 <prvCheckForValidListAndQueue+0x60>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d005      	beq.n	800de5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de50:	4b05      	ldr	r3, [pc, #20]	; (800de68 <prvCheckForValidListAndQueue+0x60>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	490b      	ldr	r1, [pc, #44]	; (800de84 <prvCheckForValidListAndQueue+0x7c>)
 800de56:	4618      	mov	r0, r3
 800de58:	f7fe fa84 	bl	800c364 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de5c:	f000 f9da 	bl	800e214 <vPortExitCritical>
}
 800de60:	bf00      	nop
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	200012fc 	.word	0x200012fc
 800de6c:	200012cc 	.word	0x200012cc
 800de70:	200012e0 	.word	0x200012e0
 800de74:	200012f4 	.word	0x200012f4
 800de78:	200012f8 	.word	0x200012f8
 800de7c:	200013a8 	.word	0x200013a8
 800de80:	20001308 	.word	0x20001308
 800de84:	08021958 	.word	0x08021958

0800de88 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b086      	sub	sp, #24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d10a      	bne.n	800deb0 <xTimerIsTimerActive+0x28>
	__asm volatile
 800de9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	60fb      	str	r3, [r7, #12]
}
 800deac:	bf00      	nop
 800deae:	e7fe      	b.n	800deae <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800deb0:	f000 f980 	bl	800e1b4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800deba:	f003 0301 	and.w	r3, r3, #1
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d102      	bne.n	800dec8 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800dec2:	2300      	movs	r3, #0
 800dec4:	617b      	str	r3, [r7, #20]
 800dec6:	e001      	b.n	800decc <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800dec8:	2301      	movs	r3, #1
 800deca:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800decc:	f000 f9a2 	bl	800e214 <vPortExitCritical>

	return xReturn;
 800ded0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800ded2:	4618      	mov	r0, r3
 800ded4:	3718      	adds	r7, #24
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b086      	sub	sp, #24
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10a      	bne.n	800df02 <pvTimerGetTimerID+0x28>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	60fb      	str	r3, [r7, #12]
}
 800defe:	bf00      	nop
 800df00:	e7fe      	b.n	800df00 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800df02:	f000 f957 	bl	800e1b4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	69db      	ldr	r3, [r3, #28]
 800df0a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800df0c:	f000 f982 	bl	800e214 <vPortExitCritical>

	return pvReturn;
 800df10:	693b      	ldr	r3, [r7, #16]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3718      	adds	r7, #24
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
	...

0800df1c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b08a      	sub	sp, #40	; 0x28
 800df20:	af00      	add	r7, sp, #0
 800df22:	60f8      	str	r0, [r7, #12]
 800df24:	60b9      	str	r1, [r7, #8]
 800df26:	607a      	str	r2, [r7, #4]
 800df28:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800df2a:	f06f 0301 	mvn.w	r3, #1
 800df2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df3c:	4b06      	ldr	r3, [pc, #24]	; (800df58 <xTimerPendFunctionCallFromISR+0x3c>)
 800df3e:	6818      	ldr	r0, [r3, #0]
 800df40:	f107 0114 	add.w	r1, r7, #20
 800df44:	2300      	movs	r3, #0
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	f7fd fcf0 	bl	800b92c <xQueueGenericSendFromISR>
 800df4c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800df4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800df50:	4618      	mov	r0, r3
 800df52:	3728      	adds	r7, #40	; 0x28
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	200012fc 	.word	0x200012fc

0800df5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df5c:	b480      	push	{r7}
 800df5e:	b085      	sub	sp, #20
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	3b04      	subs	r3, #4
 800df6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	3b04      	subs	r3, #4
 800df7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	f023 0201 	bic.w	r2, r3, #1
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	3b04      	subs	r3, #4
 800df8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df8c:	4a0c      	ldr	r2, [pc, #48]	; (800dfc0 <pxPortInitialiseStack+0x64>)
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	3b14      	subs	r3, #20
 800df96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	3b04      	subs	r3, #4
 800dfa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f06f 0202 	mvn.w	r2, #2
 800dfaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	3b20      	subs	r3, #32
 800dfb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3714      	adds	r7, #20
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	0800dfc5 	.word	0x0800dfc5

0800dfc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dfce:	4b12      	ldr	r3, [pc, #72]	; (800e018 <prvTaskExitError+0x54>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfd6:	d00a      	beq.n	800dfee <prvTaskExitError+0x2a>
	__asm volatile
 800dfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	f3bf 8f6f 	isb	sy
 800dfe4:	f3bf 8f4f 	dsb	sy
 800dfe8:	60fb      	str	r3, [r7, #12]
}
 800dfea:	bf00      	nop
 800dfec:	e7fe      	b.n	800dfec <prvTaskExitError+0x28>
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	60bb      	str	r3, [r7, #8]
}
 800e000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e002:	bf00      	nop
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d0fc      	beq.n	800e004 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e00a:	bf00      	nop
 800e00c:	bf00      	nop
 800e00e:	3714      	adds	r7, #20
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr
 800e018:	20000338 	.word	0x20000338
 800e01c:	00000000 	.word	0x00000000

0800e020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e020:	4b07      	ldr	r3, [pc, #28]	; (800e040 <pxCurrentTCBConst2>)
 800e022:	6819      	ldr	r1, [r3, #0]
 800e024:	6808      	ldr	r0, [r1, #0]
 800e026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02a:	f380 8809 	msr	PSP, r0
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f04f 0000 	mov.w	r0, #0
 800e036:	f380 8811 	msr	BASEPRI, r0
 800e03a:	4770      	bx	lr
 800e03c:	f3af 8000 	nop.w

0800e040 <pxCurrentTCBConst2>:
 800e040:	20000dc4 	.word	0x20000dc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e044:	bf00      	nop
 800e046:	bf00      	nop

0800e048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e048:	4808      	ldr	r0, [pc, #32]	; (800e06c <prvPortStartFirstTask+0x24>)
 800e04a:	6800      	ldr	r0, [r0, #0]
 800e04c:	6800      	ldr	r0, [r0, #0]
 800e04e:	f380 8808 	msr	MSP, r0
 800e052:	f04f 0000 	mov.w	r0, #0
 800e056:	f380 8814 	msr	CONTROL, r0
 800e05a:	b662      	cpsie	i
 800e05c:	b661      	cpsie	f
 800e05e:	f3bf 8f4f 	dsb	sy
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	df00      	svc	0
 800e068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e06a:	bf00      	nop
 800e06c:	e000ed08 	.word	0xe000ed08

0800e070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e076:	4b46      	ldr	r3, [pc, #280]	; (800e190 <xPortStartScheduler+0x120>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a46      	ldr	r2, [pc, #280]	; (800e194 <xPortStartScheduler+0x124>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d10a      	bne.n	800e096 <xPortStartScheduler+0x26>
	__asm volatile
 800e080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e084:	f383 8811 	msr	BASEPRI, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	613b      	str	r3, [r7, #16]
}
 800e092:	bf00      	nop
 800e094:	e7fe      	b.n	800e094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e096:	4b3e      	ldr	r3, [pc, #248]	; (800e190 <xPortStartScheduler+0x120>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4a3f      	ldr	r2, [pc, #252]	; (800e198 <xPortStartScheduler+0x128>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d10a      	bne.n	800e0b6 <xPortStartScheduler+0x46>
	__asm volatile
 800e0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a4:	f383 8811 	msr	BASEPRI, r3
 800e0a8:	f3bf 8f6f 	isb	sy
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	60fb      	str	r3, [r7, #12]
}
 800e0b2:	bf00      	nop
 800e0b4:	e7fe      	b.n	800e0b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e0b6:	4b39      	ldr	r3, [pc, #228]	; (800e19c <xPortStartScheduler+0x12c>)
 800e0b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	22ff      	movs	r2, #255	; 0xff
 800e0c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e0d0:	78fb      	ldrb	r3, [r7, #3]
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	4b31      	ldr	r3, [pc, #196]	; (800e1a0 <xPortStartScheduler+0x130>)
 800e0dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e0de:	4b31      	ldr	r3, [pc, #196]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e0e0:	2207      	movs	r2, #7
 800e0e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0e4:	e009      	b.n	800e0fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e0e6:	4b2f      	ldr	r3, [pc, #188]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	4a2d      	ldr	r2, [pc, #180]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e0ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e0f0:	78fb      	ldrb	r3, [r7, #3]
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	005b      	lsls	r3, r3, #1
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0fa:	78fb      	ldrb	r3, [r7, #3]
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e102:	2b80      	cmp	r3, #128	; 0x80
 800e104:	d0ef      	beq.n	800e0e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e106:	4b27      	ldr	r3, [pc, #156]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f1c3 0307 	rsb	r3, r3, #7
 800e10e:	2b04      	cmp	r3, #4
 800e110:	d00a      	beq.n	800e128 <xPortStartScheduler+0xb8>
	__asm volatile
 800e112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	60bb      	str	r3, [r7, #8]
}
 800e124:	bf00      	nop
 800e126:	e7fe      	b.n	800e126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e128:	4b1e      	ldr	r3, [pc, #120]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	021b      	lsls	r3, r3, #8
 800e12e:	4a1d      	ldr	r2, [pc, #116]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e132:	4b1c      	ldr	r3, [pc, #112]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e13a:	4a1a      	ldr	r2, [pc, #104]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e13c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	b2da      	uxtb	r2, r3
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e146:	4b18      	ldr	r3, [pc, #96]	; (800e1a8 <xPortStartScheduler+0x138>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a17      	ldr	r2, [pc, #92]	; (800e1a8 <xPortStartScheduler+0x138>)
 800e14c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e152:	4b15      	ldr	r3, [pc, #84]	; (800e1a8 <xPortStartScheduler+0x138>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a14      	ldr	r2, [pc, #80]	; (800e1a8 <xPortStartScheduler+0x138>)
 800e158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e15c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e15e:	f000 f8dd 	bl	800e31c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e162:	4b12      	ldr	r3, [pc, #72]	; (800e1ac <xPortStartScheduler+0x13c>)
 800e164:	2200      	movs	r2, #0
 800e166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e168:	f000 f8fc 	bl	800e364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e16c:	4b10      	ldr	r3, [pc, #64]	; (800e1b0 <xPortStartScheduler+0x140>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a0f      	ldr	r2, [pc, #60]	; (800e1b0 <xPortStartScheduler+0x140>)
 800e172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e178:	f7ff ff66 	bl	800e048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e17c:	f7fe fd66 	bl	800cc4c <vTaskSwitchContext>
	prvTaskExitError();
 800e180:	f7ff ff20 	bl	800dfc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3718      	adds	r7, #24
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	e000ed00 	.word	0xe000ed00
 800e194:	410fc271 	.word	0x410fc271
 800e198:	410fc270 	.word	0x410fc270
 800e19c:	e000e400 	.word	0xe000e400
 800e1a0:	200013f8 	.word	0x200013f8
 800e1a4:	200013fc 	.word	0x200013fc
 800e1a8:	e000ed20 	.word	0xe000ed20
 800e1ac:	20000338 	.word	0x20000338
 800e1b0:	e000ef34 	.word	0xe000ef34

0800e1b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
	__asm volatile
 800e1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1be:	f383 8811 	msr	BASEPRI, r3
 800e1c2:	f3bf 8f6f 	isb	sy
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	607b      	str	r3, [r7, #4]
}
 800e1cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e1ce:	4b0f      	ldr	r3, [pc, #60]	; (800e20c <vPortEnterCritical+0x58>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	4a0d      	ldr	r2, [pc, #52]	; (800e20c <vPortEnterCritical+0x58>)
 800e1d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e1d8:	4b0c      	ldr	r3, [pc, #48]	; (800e20c <vPortEnterCritical+0x58>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d10f      	bne.n	800e200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e1e0:	4b0b      	ldr	r3, [pc, #44]	; (800e210 <vPortEnterCritical+0x5c>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00a      	beq.n	800e200 <vPortEnterCritical+0x4c>
	__asm volatile
 800e1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ee:	f383 8811 	msr	BASEPRI, r3
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	603b      	str	r3, [r7, #0]
}
 800e1fc:	bf00      	nop
 800e1fe:	e7fe      	b.n	800e1fe <vPortEnterCritical+0x4a>
	}
}
 800e200:	bf00      	nop
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr
 800e20c:	20000338 	.word	0x20000338
 800e210:	e000ed04 	.word	0xe000ed04

0800e214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e21a:	4b12      	ldr	r3, [pc, #72]	; (800e264 <vPortExitCritical+0x50>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d10a      	bne.n	800e238 <vPortExitCritical+0x24>
	__asm volatile
 800e222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	607b      	str	r3, [r7, #4]
}
 800e234:	bf00      	nop
 800e236:	e7fe      	b.n	800e236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e238:	4b0a      	ldr	r3, [pc, #40]	; (800e264 <vPortExitCritical+0x50>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	3b01      	subs	r3, #1
 800e23e:	4a09      	ldr	r2, [pc, #36]	; (800e264 <vPortExitCritical+0x50>)
 800e240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e242:	4b08      	ldr	r3, [pc, #32]	; (800e264 <vPortExitCritical+0x50>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d105      	bne.n	800e256 <vPortExitCritical+0x42>
 800e24a:	2300      	movs	r3, #0
 800e24c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	f383 8811 	msr	BASEPRI, r3
}
 800e254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e256:	bf00      	nop
 800e258:	370c      	adds	r7, #12
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	20000338 	.word	0x20000338
	...

0800e270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e270:	f3ef 8009 	mrs	r0, PSP
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	4b15      	ldr	r3, [pc, #84]	; (800e2d0 <pxCurrentTCBConst>)
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	f01e 0f10 	tst.w	lr, #16
 800e280:	bf08      	it	eq
 800e282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e28a:	6010      	str	r0, [r2, #0]
 800e28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e290:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e294:	f380 8811 	msr	BASEPRI, r0
 800e298:	f3bf 8f4f 	dsb	sy
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f7fe fcd4 	bl	800cc4c <vTaskSwitchContext>
 800e2a4:	f04f 0000 	mov.w	r0, #0
 800e2a8:	f380 8811 	msr	BASEPRI, r0
 800e2ac:	bc09      	pop	{r0, r3}
 800e2ae:	6819      	ldr	r1, [r3, #0]
 800e2b0:	6808      	ldr	r0, [r1, #0]
 800e2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b6:	f01e 0f10 	tst.w	lr, #16
 800e2ba:	bf08      	it	eq
 800e2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e2c0:	f380 8809 	msr	PSP, r0
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	f3af 8000 	nop.w

0800e2d0 <pxCurrentTCBConst>:
 800e2d0:	20000dc4 	.word	0x20000dc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e2d4:	bf00      	nop
 800e2d6:	bf00      	nop

0800e2d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	607b      	str	r3, [r7, #4]
}
 800e2f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e2f2:	f7fe fbf1 	bl	800cad8 <xTaskIncrementTick>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d003      	beq.n	800e304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e2fc:	4b06      	ldr	r3, [pc, #24]	; (800e318 <xPortSysTickHandler+0x40>)
 800e2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e302:	601a      	str	r2, [r3, #0]
 800e304:	2300      	movs	r3, #0
 800e306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	f383 8811 	msr	BASEPRI, r3
}
 800e30e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e310:	bf00      	nop
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	e000ed04 	.word	0xe000ed04

0800e31c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e31c:	b480      	push	{r7}
 800e31e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e320:	4b0b      	ldr	r3, [pc, #44]	; (800e350 <vPortSetupTimerInterrupt+0x34>)
 800e322:	2200      	movs	r2, #0
 800e324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e326:	4b0b      	ldr	r3, [pc, #44]	; (800e354 <vPortSetupTimerInterrupt+0x38>)
 800e328:	2200      	movs	r2, #0
 800e32a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e32c:	4b0a      	ldr	r3, [pc, #40]	; (800e358 <vPortSetupTimerInterrupt+0x3c>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a0a      	ldr	r2, [pc, #40]	; (800e35c <vPortSetupTimerInterrupt+0x40>)
 800e332:	fba2 2303 	umull	r2, r3, r2, r3
 800e336:	099b      	lsrs	r3, r3, #6
 800e338:	4a09      	ldr	r2, [pc, #36]	; (800e360 <vPortSetupTimerInterrupt+0x44>)
 800e33a:	3b01      	subs	r3, #1
 800e33c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e33e:	4b04      	ldr	r3, [pc, #16]	; (800e350 <vPortSetupTimerInterrupt+0x34>)
 800e340:	2207      	movs	r2, #7
 800e342:	601a      	str	r2, [r3, #0]
}
 800e344:	bf00      	nop
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	e000e010 	.word	0xe000e010
 800e354:	e000e018 	.word	0xe000e018
 800e358:	20000008 	.word	0x20000008
 800e35c:	10624dd3 	.word	0x10624dd3
 800e360:	e000e014 	.word	0xe000e014

0800e364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e374 <vPortEnableVFP+0x10>
 800e368:	6801      	ldr	r1, [r0, #0]
 800e36a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e36e:	6001      	str	r1, [r0, #0]
 800e370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e372:	bf00      	nop
 800e374:	e000ed88 	.word	0xe000ed88

0800e378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e378:	b480      	push	{r7}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e37e:	f3ef 8305 	mrs	r3, IPSR
 800e382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2b0f      	cmp	r3, #15
 800e388:	d914      	bls.n	800e3b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e38a:	4a17      	ldr	r2, [pc, #92]	; (800e3e8 <vPortValidateInterruptPriority+0x70>)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	4413      	add	r3, r2
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e394:	4b15      	ldr	r3, [pc, #84]	; (800e3ec <vPortValidateInterruptPriority+0x74>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	7afa      	ldrb	r2, [r7, #11]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d20a      	bcs.n	800e3b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a2:	f383 8811 	msr	BASEPRI, r3
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	607b      	str	r3, [r7, #4]
}
 800e3b0:	bf00      	nop
 800e3b2:	e7fe      	b.n	800e3b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e3b4:	4b0e      	ldr	r3, [pc, #56]	; (800e3f0 <vPortValidateInterruptPriority+0x78>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e3bc:	4b0d      	ldr	r3, [pc, #52]	; (800e3f4 <vPortValidateInterruptPriority+0x7c>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d90a      	bls.n	800e3da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c8:	f383 8811 	msr	BASEPRI, r3
 800e3cc:	f3bf 8f6f 	isb	sy
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	603b      	str	r3, [r7, #0]
}
 800e3d6:	bf00      	nop
 800e3d8:	e7fe      	b.n	800e3d8 <vPortValidateInterruptPriority+0x60>
	}
 800e3da:	bf00      	nop
 800e3dc:	3714      	adds	r7, #20
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e4:	4770      	bx	lr
 800e3e6:	bf00      	nop
 800e3e8:	e000e3f0 	.word	0xe000e3f0
 800e3ec:	200013f8 	.word	0x200013f8
 800e3f0:	e000ed0c 	.word	0xe000ed0c
 800e3f4:	200013fc 	.word	0x200013fc

0800e3f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08a      	sub	sp, #40	; 0x28
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e400:	2300      	movs	r3, #0
 800e402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e404:	f7fe fa9a 	bl	800c93c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e408:	4b5b      	ldr	r3, [pc, #364]	; (800e578 <pvPortMalloc+0x180>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d101      	bne.n	800e414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e410:	f000 f920 	bl	800e654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e414:	4b59      	ldr	r3, [pc, #356]	; (800e57c <pvPortMalloc+0x184>)
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	4013      	ands	r3, r2
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f040 8093 	bne.w	800e548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d01d      	beq.n	800e464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e428:	2208      	movs	r2, #8
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4413      	add	r3, r2
 800e42e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f003 0307 	and.w	r3, r3, #7
 800e436:	2b00      	cmp	r3, #0
 800e438:	d014      	beq.n	800e464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f023 0307 	bic.w	r3, r3, #7
 800e440:	3308      	adds	r3, #8
 800e442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f003 0307 	and.w	r3, r3, #7
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00a      	beq.n	800e464 <pvPortMalloc+0x6c>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	617b      	str	r3, [r7, #20]
}
 800e460:	bf00      	nop
 800e462:	e7fe      	b.n	800e462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d06e      	beq.n	800e548 <pvPortMalloc+0x150>
 800e46a:	4b45      	ldr	r3, [pc, #276]	; (800e580 <pvPortMalloc+0x188>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	429a      	cmp	r2, r3
 800e472:	d869      	bhi.n	800e548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e474:	4b43      	ldr	r3, [pc, #268]	; (800e584 <pvPortMalloc+0x18c>)
 800e476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e478:	4b42      	ldr	r3, [pc, #264]	; (800e584 <pvPortMalloc+0x18c>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e47e:	e004      	b.n	800e48a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	429a      	cmp	r2, r3
 800e492:	d903      	bls.n	800e49c <pvPortMalloc+0xa4>
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1f1      	bne.n	800e480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e49c:	4b36      	ldr	r3, [pc, #216]	; (800e578 <pvPortMalloc+0x180>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d050      	beq.n	800e548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e4a6:	6a3b      	ldr	r3, [r7, #32]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2208      	movs	r2, #8
 800e4ac:	4413      	add	r3, r2
 800e4ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	6a3b      	ldr	r3, [r7, #32]
 800e4b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ba:	685a      	ldr	r2, [r3, #4]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	1ad2      	subs	r2, r2, r3
 800e4c0:	2308      	movs	r3, #8
 800e4c2:	005b      	lsls	r3, r3, #1
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d91f      	bls.n	800e508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	f003 0307 	and.w	r3, r3, #7
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00a      	beq.n	800e4f0 <pvPortMalloc+0xf8>
	__asm volatile
 800e4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	613b      	str	r3, [r7, #16]
}
 800e4ec:	bf00      	nop
 800e4ee:	e7fe      	b.n	800e4ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	685a      	ldr	r2, [r3, #4]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	1ad2      	subs	r2, r2, r3
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e502:	69b8      	ldr	r0, [r7, #24]
 800e504:	f000 f908 	bl	800e718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e508:	4b1d      	ldr	r3, [pc, #116]	; (800e580 <pvPortMalloc+0x188>)
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	1ad3      	subs	r3, r2, r3
 800e512:	4a1b      	ldr	r2, [pc, #108]	; (800e580 <pvPortMalloc+0x188>)
 800e514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e516:	4b1a      	ldr	r3, [pc, #104]	; (800e580 <pvPortMalloc+0x188>)
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	4b1b      	ldr	r3, [pc, #108]	; (800e588 <pvPortMalloc+0x190>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d203      	bcs.n	800e52a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e522:	4b17      	ldr	r3, [pc, #92]	; (800e580 <pvPortMalloc+0x188>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4a18      	ldr	r2, [pc, #96]	; (800e588 <pvPortMalloc+0x190>)
 800e528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52c:	685a      	ldr	r2, [r3, #4]
 800e52e:	4b13      	ldr	r3, [pc, #76]	; (800e57c <pvPortMalloc+0x184>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	431a      	orrs	r2, r3
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53a:	2200      	movs	r2, #0
 800e53c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e53e:	4b13      	ldr	r3, [pc, #76]	; (800e58c <pvPortMalloc+0x194>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3301      	adds	r3, #1
 800e544:	4a11      	ldr	r2, [pc, #68]	; (800e58c <pvPortMalloc+0x194>)
 800e546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e548:	f7fe fa06 	bl	800c958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	f003 0307 	and.w	r3, r3, #7
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00a      	beq.n	800e56c <pvPortMalloc+0x174>
	__asm volatile
 800e556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55a:	f383 8811 	msr	BASEPRI, r3
 800e55e:	f3bf 8f6f 	isb	sy
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	60fb      	str	r3, [r7, #12]
}
 800e568:	bf00      	nop
 800e56a:	e7fe      	b.n	800e56a <pvPortMalloc+0x172>
	return pvReturn;
 800e56c:	69fb      	ldr	r3, [r7, #28]
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3728      	adds	r7, #40	; 0x28
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	20005008 	.word	0x20005008
 800e57c:	2000501c 	.word	0x2000501c
 800e580:	2000500c 	.word	0x2000500c
 800e584:	20005000 	.word	0x20005000
 800e588:	20005010 	.word	0x20005010
 800e58c:	20005014 	.word	0x20005014

0800e590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d04d      	beq.n	800e63e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e5a2:	2308      	movs	r3, #8
 800e5a4:	425b      	negs	r3, r3
 800e5a6:	697a      	ldr	r2, [r7, #20]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	685a      	ldr	r2, [r3, #4]
 800e5b4:	4b24      	ldr	r3, [pc, #144]	; (800e648 <vPortFree+0xb8>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d10a      	bne.n	800e5d4 <vPortFree+0x44>
	__asm volatile
 800e5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c2:	f383 8811 	msr	BASEPRI, r3
 800e5c6:	f3bf 8f6f 	isb	sy
 800e5ca:	f3bf 8f4f 	dsb	sy
 800e5ce:	60fb      	str	r3, [r7, #12]
}
 800e5d0:	bf00      	nop
 800e5d2:	e7fe      	b.n	800e5d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00a      	beq.n	800e5f2 <vPortFree+0x62>
	__asm volatile
 800e5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e0:	f383 8811 	msr	BASEPRI, r3
 800e5e4:	f3bf 8f6f 	isb	sy
 800e5e8:	f3bf 8f4f 	dsb	sy
 800e5ec:	60bb      	str	r3, [r7, #8]
}
 800e5ee:	bf00      	nop
 800e5f0:	e7fe      	b.n	800e5f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	685a      	ldr	r2, [r3, #4]
 800e5f6:	4b14      	ldr	r3, [pc, #80]	; (800e648 <vPortFree+0xb8>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4013      	ands	r3, r2
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d01e      	beq.n	800e63e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d11a      	bne.n	800e63e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	4b0e      	ldr	r3, [pc, #56]	; (800e648 <vPortFree+0xb8>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	43db      	mvns	r3, r3
 800e612:	401a      	ands	r2, r3
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e618:	f7fe f990 	bl	800c93c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	4b0a      	ldr	r3, [pc, #40]	; (800e64c <vPortFree+0xbc>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4413      	add	r3, r2
 800e626:	4a09      	ldr	r2, [pc, #36]	; (800e64c <vPortFree+0xbc>)
 800e628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e62a:	6938      	ldr	r0, [r7, #16]
 800e62c:	f000 f874 	bl	800e718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e630:	4b07      	ldr	r3, [pc, #28]	; (800e650 <vPortFree+0xc0>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3301      	adds	r3, #1
 800e636:	4a06      	ldr	r2, [pc, #24]	; (800e650 <vPortFree+0xc0>)
 800e638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e63a:	f7fe f98d 	bl	800c958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e63e:	bf00      	nop
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	2000501c 	.word	0x2000501c
 800e64c:	2000500c 	.word	0x2000500c
 800e650:	20005018 	.word	0x20005018

0800e654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e65a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e65e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e660:	4b27      	ldr	r3, [pc, #156]	; (800e700 <prvHeapInit+0xac>)
 800e662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f003 0307 	and.w	r3, r3, #7
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00c      	beq.n	800e688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	3307      	adds	r3, #7
 800e672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f023 0307 	bic.w	r3, r3, #7
 800e67a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	4a1f      	ldr	r2, [pc, #124]	; (800e700 <prvHeapInit+0xac>)
 800e684:	4413      	add	r3, r2
 800e686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e68c:	4a1d      	ldr	r2, [pc, #116]	; (800e704 <prvHeapInit+0xb0>)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e692:	4b1c      	ldr	r3, [pc, #112]	; (800e704 <prvHeapInit+0xb0>)
 800e694:	2200      	movs	r2, #0
 800e696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	4413      	add	r3, r2
 800e69e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e6a0:	2208      	movs	r2, #8
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	1a9b      	subs	r3, r3, r2
 800e6a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f023 0307 	bic.w	r3, r3, #7
 800e6ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	4a15      	ldr	r2, [pc, #84]	; (800e708 <prvHeapInit+0xb4>)
 800e6b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e6b6:	4b14      	ldr	r3, [pc, #80]	; (800e708 <prvHeapInit+0xb4>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6be:	4b12      	ldr	r3, [pc, #72]	; (800e708 <prvHeapInit+0xb4>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	1ad2      	subs	r2, r2, r3
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6d4:	4b0c      	ldr	r3, [pc, #48]	; (800e708 <prvHeapInit+0xb4>)
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	4a0a      	ldr	r2, [pc, #40]	; (800e70c <prvHeapInit+0xb8>)
 800e6e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	4a09      	ldr	r2, [pc, #36]	; (800e710 <prvHeapInit+0xbc>)
 800e6ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6ec:	4b09      	ldr	r3, [pc, #36]	; (800e714 <prvHeapInit+0xc0>)
 800e6ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e6f2:	601a      	str	r2, [r3, #0]
}
 800e6f4:	bf00      	nop
 800e6f6:	3714      	adds	r7, #20
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr
 800e700:	20001400 	.word	0x20001400
 800e704:	20005000 	.word	0x20005000
 800e708:	20005008 	.word	0x20005008
 800e70c:	20005010 	.word	0x20005010
 800e710:	2000500c 	.word	0x2000500c
 800e714:	2000501c 	.word	0x2000501c

0800e718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e720:	4b28      	ldr	r3, [pc, #160]	; (800e7c4 <prvInsertBlockIntoFreeList+0xac>)
 800e722:	60fb      	str	r3, [r7, #12]
 800e724:	e002      	b.n	800e72c <prvInsertBlockIntoFreeList+0x14>
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	60fb      	str	r3, [r7, #12]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	429a      	cmp	r2, r3
 800e734:	d8f7      	bhi.n	800e726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	4413      	add	r3, r2
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	429a      	cmp	r2, r3
 800e746:	d108      	bne.n	800e75a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	685a      	ldr	r2, [r3, #4]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	441a      	add	r2, r3
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	441a      	add	r2, r3
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d118      	bne.n	800e7a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	4b15      	ldr	r3, [pc, #84]	; (800e7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	429a      	cmp	r2, r3
 800e778:	d00d      	beq.n	800e796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	685a      	ldr	r2, [r3, #4]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	441a      	add	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	601a      	str	r2, [r3, #0]
 800e794:	e008      	b.n	800e7a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e796:	4b0c      	ldr	r3, [pc, #48]	; (800e7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	e003      	b.n	800e7a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d002      	beq.n	800e7b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7b6:	bf00      	nop
 800e7b8:	3714      	adds	r7, #20
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	20005000 	.word	0x20005000
 800e7c8:	20005008 	.word	0x20005008

0800e7cc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b084      	sub	sp, #16
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	330c      	adds	r3, #12
 800e7dc:	461a      	mov	r2, r3
 800e7de:	6839      	ldr	r1, [r7, #0]
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f002 fa6b 	bl	8010cbc <tcpip_send_msg_wait_sem>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e7ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d103      	bne.n	800e7fa <netconn_apimsg+0x2e>
    return apimsg->err;
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e7f8:	e001      	b.n	800e7fe <netconn_apimsg+0x32>
  }
  return err;
 800e7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
	...

0800e808 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b08c      	sub	sp, #48	; 0x30
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	603a      	str	r2, [r7, #0]
 800e812:	71fb      	strb	r3, [r7, #7]
 800e814:	460b      	mov	r3, r1
 800e816:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e818:	79fb      	ldrb	r3, [r7, #7]
 800e81a:	6839      	ldr	r1, [r7, #0]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f001 f80b 	bl	800f838 <netconn_alloc>
 800e822:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800e824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e826:	2b00      	cmp	r3, #0
 800e828:	d054      	beq.n	800e8d4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e82a:	79bb      	ldrb	r3, [r7, #6]
 800e82c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e830:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e832:	f107 0308 	add.w	r3, r7, #8
 800e836:	4619      	mov	r1, r3
 800e838:	4829      	ldr	r0, [pc, #164]	; (800e8e0 <netconn_new_with_proto_and_callback+0xd8>)
 800e83a:	f7ff ffc7 	bl	800e7cc <netconn_apimsg>
 800e83e:	4603      	mov	r3, r0
 800e840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800e844:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d043      	beq.n	800e8d4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d005      	beq.n	800e860 <netconn_new_with_proto_and_callback+0x58>
 800e854:	4b23      	ldr	r3, [pc, #140]	; (800e8e4 <netconn_new_with_proto_and_callback+0xdc>)
 800e856:	22a3      	movs	r2, #163	; 0xa3
 800e858:	4923      	ldr	r1, [pc, #140]	; (800e8e8 <netconn_new_with_proto_and_callback+0xe0>)
 800e85a:	4824      	ldr	r0, [pc, #144]	; (800e8ec <netconn_new_with_proto_and_callback+0xe4>)
 800e85c:	f011 f846 	bl	801f8ec <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e862:	3310      	adds	r3, #16
 800e864:	4618      	mov	r0, r3
 800e866:	f010 fceb 	bl	801f240 <sys_mbox_valid>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d105      	bne.n	800e87c <netconn_new_with_proto_and_callback+0x74>
 800e870:	4b1c      	ldr	r3, [pc, #112]	; (800e8e4 <netconn_new_with_proto_and_callback+0xdc>)
 800e872:	22a4      	movs	r2, #164	; 0xa4
 800e874:	491e      	ldr	r1, [pc, #120]	; (800e8f0 <netconn_new_with_proto_and_callback+0xe8>)
 800e876:	481d      	ldr	r0, [pc, #116]	; (800e8ec <netconn_new_with_proto_and_callback+0xe4>)
 800e878:	f011 f838 	bl	801f8ec <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87e:	3314      	adds	r3, #20
 800e880:	4618      	mov	r0, r3
 800e882:	f010 fcdd 	bl	801f240 <sys_mbox_valid>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d005      	beq.n	800e898 <netconn_new_with_proto_and_callback+0x90>
 800e88c:	4b15      	ldr	r3, [pc, #84]	; (800e8e4 <netconn_new_with_proto_and_callback+0xdc>)
 800e88e:	22a6      	movs	r2, #166	; 0xa6
 800e890:	4918      	ldr	r1, [pc, #96]	; (800e8f4 <netconn_new_with_proto_and_callback+0xec>)
 800e892:	4816      	ldr	r0, [pc, #88]	; (800e8ec <netconn_new_with_proto_and_callback+0xe4>)
 800e894:	f011 f82a 	bl	801f8ec <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	330c      	adds	r3, #12
 800e89c:	4618      	mov	r0, r3
 800e89e:	f010 fd5d 	bl	801f35c <sys_sem_valid>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d105      	bne.n	800e8b4 <netconn_new_with_proto_and_callback+0xac>
 800e8a8:	4b0e      	ldr	r3, [pc, #56]	; (800e8e4 <netconn_new_with_proto_and_callback+0xdc>)
 800e8aa:	22a9      	movs	r2, #169	; 0xa9
 800e8ac:	4912      	ldr	r1, [pc, #72]	; (800e8f8 <netconn_new_with_proto_and_callback+0xf0>)
 800e8ae:	480f      	ldr	r0, [pc, #60]	; (800e8ec <netconn_new_with_proto_and_callback+0xe4>)
 800e8b0:	f011 f81c 	bl	801f8ec <iprintf>
      sys_sem_free(&conn->op_completed);
 800e8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b6:	330c      	adds	r3, #12
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f010 fd42 	bl	801f342 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c0:	3310      	adds	r3, #16
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f010 fc48 	bl	801f158 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e8c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8ca:	2007      	movs	r0, #7
 800e8cc:	f003 ff34 	bl	8012738 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	e000      	b.n	800e8d6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3730      	adds	r7, #48	; 0x30
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	0800f80d 	.word	0x0800f80d
 800e8e4:	08021960 	.word	0x08021960
 800e8e8:	08021994 	.word	0x08021994
 800e8ec:	080219b8 	.word	0x080219b8
 800e8f0:	080219e0 	.word	0x080219e0
 800e8f4:	080219f8 	.word	0x080219f8
 800e8f8:	08021a1c 	.word	0x08021a1c

0800e8fc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b08c      	sub	sp, #48	; 0x30
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d101      	bne.n	800e90e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e90a:	2300      	movs	r3, #0
 800e90c:	e014      	b.n	800e938 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e912:	2329      	movs	r3, #41	; 0x29
 800e914:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e916:	f107 030c 	add.w	r3, r7, #12
 800e91a:	4619      	mov	r1, r3
 800e91c:	4808      	ldr	r0, [pc, #32]	; (800e940 <netconn_prepare_delete+0x44>)
 800e91e:	f7ff ff55 	bl	800e7cc <netconn_apimsg>
 800e922:	4603      	mov	r3, r0
 800e924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e928:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d002      	beq.n	800e936 <netconn_prepare_delete+0x3a>
    return err;
 800e930:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e934:	e000      	b.n	800e938 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800e936:	2300      	movs	r3, #0
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3730      	adds	r7, #48	; 0x30
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	0800fd71 	.word	0x0800fd71

0800e944 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d101      	bne.n	800e956 <netconn_delete+0x12>
    return ERR_OK;
 800e952:	2300      	movs	r3, #0
 800e954:	e00d      	b.n	800e972 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7ff ffd0 	bl	800e8fc <netconn_prepare_delete>
 800e95c:	4603      	mov	r3, r0
 800e95e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800e960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d102      	bne.n	800e96e <netconn_delete+0x2a>
    netconn_free(conn);
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 ffd3 	bl	800f914 <netconn_free>
  }
  return err;
 800e96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e972:	4618      	mov	r0, r3
 800e974:	3710      	adds	r7, #16
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
	...

0800e97c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b08e      	sub	sp, #56	; 0x38
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	4613      	mov	r3, r2
 800e988:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d109      	bne.n	800e9a4 <netconn_connect+0x28>
 800e990:	4b11      	ldr	r3, [pc, #68]	; (800e9d8 <netconn_connect+0x5c>)
 800e992:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800e996:	4911      	ldr	r1, [pc, #68]	; (800e9dc <netconn_connect+0x60>)
 800e998:	4811      	ldr	r0, [pc, #68]	; (800e9e0 <netconn_connect+0x64>)
 800e99a:	f010 ffa7 	bl	801f8ec <iprintf>
 800e99e:	f06f 030f 	mvn.w	r3, #15
 800e9a2:	e015      	b.n	800e9d0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d101      	bne.n	800e9ae <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800e9aa:	4b0e      	ldr	r3, [pc, #56]	; (800e9e4 <netconn_connect+0x68>)
 800e9ac:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e9b6:	88fb      	ldrh	r3, [r7, #6]
 800e9b8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800e9ba:	f107 0314 	add.w	r3, r7, #20
 800e9be:	4619      	mov	r1, r3
 800e9c0:	4809      	ldr	r0, [pc, #36]	; (800e9e8 <netconn_connect+0x6c>)
 800e9c2:	f7ff ff03 	bl	800e7cc <netconn_apimsg>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e9cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3738      	adds	r7, #56	; 0x38
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	08021960 	.word	0x08021960
 800e9dc:	08021ad4 	.word	0x08021ad4
 800e9e0:	080219b8 	.word	0x080219b8
 800e9e4:	080256b4 	.word	0x080256b4
 800e9e8:	08010059 	.word	0x08010059

0800e9ec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b088      	sub	sp, #32
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d109      	bne.n	800ea18 <netconn_recv_data+0x2c>
 800ea04:	4b58      	ldr	r3, [pc, #352]	; (800eb68 <netconn_recv_data+0x17c>)
 800ea06:	f44f 7212 	mov.w	r2, #584	; 0x248
 800ea0a:	4958      	ldr	r1, [pc, #352]	; (800eb6c <netconn_recv_data+0x180>)
 800ea0c:	4858      	ldr	r0, [pc, #352]	; (800eb70 <netconn_recv_data+0x184>)
 800ea0e:	f010 ff6d 	bl	801f8ec <iprintf>
 800ea12:	f06f 030f 	mvn.w	r3, #15
 800ea16:	e0a2      	b.n	800eb5e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d109      	bne.n	800ea38 <netconn_recv_data+0x4c>
 800ea24:	4b50      	ldr	r3, [pc, #320]	; (800eb68 <netconn_recv_data+0x17c>)
 800ea26:	f240 224a 	movw	r2, #586	; 0x24a
 800ea2a:	4952      	ldr	r1, [pc, #328]	; (800eb74 <netconn_recv_data+0x188>)
 800ea2c:	4850      	ldr	r0, [pc, #320]	; (800eb70 <netconn_recv_data+0x184>)
 800ea2e:	f010 ff5d 	bl	801f8ec <iprintf>
 800ea32:	f06f 030f 	mvn.w	r3, #15
 800ea36:	e092      	b.n	800eb5e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	3310      	adds	r3, #16
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f010 fbff 	bl	801f240 <sys_mbox_valid>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d10e      	bne.n	800ea66 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ea48:	68f8      	ldr	r0, [r7, #12]
 800ea4a:	f000 fad4 	bl	800eff6 <netconn_err>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800ea52:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d002      	beq.n	800ea60 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800ea5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ea5e:	e07e      	b.n	800eb5e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800ea60:	f06f 030a 	mvn.w	r3, #10
 800ea64:	e07b      	b.n	800eb5e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	7f1b      	ldrb	r3, [r3, #28]
 800ea6a:	f003 0302 	and.w	r3, r3, #2
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d10f      	bne.n	800ea92 <netconn_recv_data+0xa6>
 800ea72:	79fb      	ldrb	r3, [r7, #7]
 800ea74:	f003 0304 	and.w	r3, r3, #4
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10a      	bne.n	800ea92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	7f1b      	ldrb	r3, [r3, #28]
 800ea80:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d104      	bne.n	800ea92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d023      	beq.n	800eada <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	3310      	adds	r3, #16
 800ea96:	f107 0218 	add.w	r2, r7, #24
 800ea9a:	4611      	mov	r1, r2
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f010 fbb8 	bl	801f212 <sys_arch_mbox_tryfetch>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaa8:	d11f      	bne.n	800eaea <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	f000 faa3 	bl	800eff6 <netconn_err>
 800eab0:	4603      	mov	r3, r0
 800eab2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800eab4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d002      	beq.n	800eac2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800eabc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800eac0:	e04d      	b.n	800eb5e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	7f1b      	ldrb	r3, [r3, #28]
 800eac6:	f003 0301 	and.w	r3, r3, #1
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d002      	beq.n	800ead4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800eace:	f06f 030a 	mvn.w	r3, #10
 800ead2:	e044      	b.n	800eb5e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800ead4:	f06f 0306 	mvn.w	r3, #6
 800ead8:	e041      	b.n	800eb5e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	3310      	adds	r3, #16
 800eade:	f107 0118 	add.w	r1, r7, #24
 800eae2:	2200      	movs	r2, #0
 800eae4:	4618      	mov	r0, r3
 800eae6:	f010 fb63 	bl	801f1b0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eaf2:	2b10      	cmp	r3, #16
 800eaf4:	d117      	bne.n	800eb26 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	f107 0217 	add.w	r2, r7, #23
 800eafc:	4611      	mov	r1, r2
 800eafe:	4618      	mov	r0, r3
 800eb00:	f000 fb26 	bl	800f150 <lwip_netconn_is_err_msg>
 800eb04:	4603      	mov	r3, r0
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d009      	beq.n	800eb1e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800eb0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb0e:	f113 0f0f 	cmn.w	r3, #15
 800eb12:	d101      	bne.n	800eb18 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800eb14:	2300      	movs	r3, #0
 800eb16:	e022      	b.n	800eb5e <netconn_recv_data+0x172>
      }
      return err;
 800eb18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb1c:	e01f      	b.n	800eb5e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	891b      	ldrh	r3, [r3, #8]
 800eb22:	83fb      	strh	r3, [r7, #30]
 800eb24:	e00d      	b.n	800eb42 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d106      	bne.n	800eb3a <netconn_recv_data+0x14e>
 800eb2c:	4b0e      	ldr	r3, [pc, #56]	; (800eb68 <netconn_recv_data+0x17c>)
 800eb2e:	f240 2291 	movw	r2, #657	; 0x291
 800eb32:	4911      	ldr	r1, [pc, #68]	; (800eb78 <netconn_recv_data+0x18c>)
 800eb34:	480e      	ldr	r0, [pc, #56]	; (800eb70 <netconn_recv_data+0x184>)
 800eb36:	f010 fed9 	bl	801f8ec <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800eb3a:	69bb      	ldr	r3, [r7, #24]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	891b      	ldrh	r3, [r3, #8]
 800eb40:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d005      	beq.n	800eb56 <netconn_recv_data+0x16a>
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb4e:	8bfa      	ldrh	r2, [r7, #30]
 800eb50:	2101      	movs	r1, #1
 800eb52:	68f8      	ldr	r0, [r7, #12]
 800eb54:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800eb56:	69ba      	ldr	r2, [r7, #24]
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3720      	adds	r7, #32
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	08021960 	.word	0x08021960
 800eb6c:	08021b78 	.word	0x08021b78
 800eb70:	080219b8 	.word	0x080219b8
 800eb74:	08021b98 	.word	0x08021b98
 800eb78:	08021bb4 	.word	0x08021bb4

0800eb7c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d005      	beq.n	800eb9a <netconn_tcp_recvd_msg+0x1e>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb96:	2b10      	cmp	r3, #16
 800eb98:	d009      	beq.n	800ebae <netconn_tcp_recvd_msg+0x32>
 800eb9a:	4b0c      	ldr	r3, [pc, #48]	; (800ebcc <netconn_tcp_recvd_msg+0x50>)
 800eb9c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800eba0:	490b      	ldr	r1, [pc, #44]	; (800ebd0 <netconn_tcp_recvd_msg+0x54>)
 800eba2:	480c      	ldr	r0, [pc, #48]	; (800ebd4 <netconn_tcp_recvd_msg+0x58>)
 800eba4:	f010 fea2 	bl	801f8ec <iprintf>
 800eba8:	f06f 030f 	mvn.w	r3, #15
 800ebac:	e00a      	b.n	800ebc4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	68ba      	ldr	r2, [r7, #8]
 800ebb8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ebba:	6879      	ldr	r1, [r7, #4]
 800ebbc:	4806      	ldr	r0, [pc, #24]	; (800ebd8 <netconn_tcp_recvd_msg+0x5c>)
 800ebbe:	f7ff fe05 	bl	800e7cc <netconn_apimsg>
 800ebc2:	4603      	mov	r3, r0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3710      	adds	r7, #16
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	08021960 	.word	0x08021960
 800ebd0:	08021bc0 	.word	0x08021bc0
 800ebd4:	080219b8 	.word	0x080219b8
 800ebd8:	080101d5 	.word	0x080101d5

0800ebdc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b090      	sub	sp, #64	; 0x40
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	3310      	adds	r3, #16
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f010 fb26 	bl	801f240 <sys_mbox_valid>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d102      	bne.n	800ec00 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800ebfa:	f06f 030a 	mvn.w	r3, #10
 800ebfe:	e06d      	b.n	800ecdc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	7f1b      	ldrb	r3, [r3, #28]
 800ec04:	b25b      	sxtb	r3, r3
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	da07      	bge.n	800ec1a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	7f1b      	ldrb	r3, [r3, #28]
 800ec0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec12:	b2da      	uxtb	r2, r3
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800ec18:	e039      	b.n	800ec8e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800ec1a:	79fb      	ldrb	r3, [r7, #7]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	68b9      	ldr	r1, [r7, #8]
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f7ff fee3 	bl	800e9ec <netconn_recv_data>
 800ec26:	4603      	mov	r3, r0
 800ec28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800ec2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d002      	beq.n	800ec3a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800ec34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ec38:	e050      	b.n	800ecdc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ec40:	79fb      	ldrb	r3, [r7, #7]
 800ec42:	f003 0308 	and.w	r3, r3, #8
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d10e      	bne.n	800ec68 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800ec4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <netconn_recv_data_tcp+0x7a>
 800ec50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec52:	891b      	ldrh	r3, [r3, #8]
 800ec54:	e000      	b.n	800ec58 <netconn_recv_data_tcp+0x7c>
 800ec56:	2301      	movs	r3, #1
 800ec58:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800ec5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec5c:	f107 0214 	add.w	r2, r7, #20
 800ec60:	4619      	mov	r1, r3
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f7ff ff8a 	bl	800eb7c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800ec68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d134      	bne.n	800ecd8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800ec6e:	79fb      	ldrb	r3, [r7, #7]
 800ec70:	f003 0310 	and.w	r3, r3, #16
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d009      	beq.n	800ec8c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	7f1b      	ldrb	r3, [r3, #28]
 800ec7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800ec86:	f06f 0306 	mvn.w	r3, #6
 800ec8a:	e027      	b.n	800ecdc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800ec8c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d005      	beq.n	800eca2 <netconn_recv_data_tcp+0xc6>
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	2101      	movs	r1, #1
 800ec9e:	68f8      	ldr	r0, [r7, #12]
 800eca0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d10f      	bne.n	800ecca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ecaa:	68f8      	ldr	r0, [r7, #12]
 800ecac:	f000 f9a3 	bl	800eff6 <netconn_err>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800ecb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d002      	beq.n	800ecc4 <netconn_recv_data_tcp+0xe8>
          return err;
 800ecbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ecc2:	e00b      	b.n	800ecdc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800ecc4:	f06f 030d 	mvn.w	r3, #13
 800ecc8:	e008      	b.n	800ecdc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800ecca:	2101      	movs	r1, #1
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f000 f955 	bl	800ef7c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ecd2:	f06f 030e 	mvn.w	r3, #14
 800ecd6:	e001      	b.n	800ecdc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ecd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3740      	adds	r7, #64	; 0x40
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b086      	sub	sp, #24
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d109      	bne.n	800ed0c <netconn_recv+0x28>
 800ecf8:	4b32      	ldr	r3, [pc, #200]	; (800edc4 <netconn_recv+0xe0>)
 800ecfa:	f240 3263 	movw	r2, #867	; 0x363
 800ecfe:	4932      	ldr	r1, [pc, #200]	; (800edc8 <netconn_recv+0xe4>)
 800ed00:	4832      	ldr	r0, [pc, #200]	; (800edcc <netconn_recv+0xe8>)
 800ed02:	f010 fdf3 	bl	801f8ec <iprintf>
 800ed06:	f06f 030f 	mvn.w	r3, #15
 800ed0a:	e056      	b.n	800edba <netconn_recv+0xd6>
  *new_buf = NULL;
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d109      	bne.n	800ed2c <netconn_recv+0x48>
 800ed18:	4b2a      	ldr	r3, [pc, #168]	; (800edc4 <netconn_recv+0xe0>)
 800ed1a:	f240 3265 	movw	r2, #869	; 0x365
 800ed1e:	492c      	ldr	r1, [pc, #176]	; (800edd0 <netconn_recv+0xec>)
 800ed20:	482a      	ldr	r0, [pc, #168]	; (800edcc <netconn_recv+0xe8>)
 800ed22:	f010 fde3 	bl	801f8ec <iprintf>
 800ed26:	f06f 030f 	mvn.w	r3, #15
 800ed2a:	e046      	b.n	800edba <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed34:	2b10      	cmp	r3, #16
 800ed36:	d13a      	bne.n	800edae <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ed3c:	2006      	movs	r0, #6
 800ed3e:	f003 fca9 	bl	8012694 <memp_malloc>
 800ed42:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d102      	bne.n	800ed50 <netconn_recv+0x6c>
      return ERR_MEM;
 800ed4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed4e:	e034      	b.n	800edba <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800ed50:	f107 030c 	add.w	r3, r7, #12
 800ed54:	2200      	movs	r2, #0
 800ed56:	4619      	mov	r1, r3
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f7ff ff3f 	bl	800ebdc <netconn_recv_data_tcp>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ed62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d006      	beq.n	800ed78 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800ed6a:	6979      	ldr	r1, [r7, #20]
 800ed6c:	2006      	movs	r0, #6
 800ed6e:	f003 fce3 	bl	8012738 <memp_free>
      return err;
 800ed72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed76:	e020      	b.n	800edba <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d106      	bne.n	800ed8c <netconn_recv+0xa8>
 800ed7e:	4b11      	ldr	r3, [pc, #68]	; (800edc4 <netconn_recv+0xe0>)
 800ed80:	f240 3279 	movw	r2, #889	; 0x379
 800ed84:	4913      	ldr	r1, [pc, #76]	; (800edd4 <netconn_recv+0xf0>)
 800ed86:	4811      	ldr	r0, [pc, #68]	; (800edcc <netconn_recv+0xe8>)
 800ed88:	f010 fdb0 	bl	801f8ec <iprintf>

    buf->p = p;
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	2200      	movs	r2, #0
 800eda2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	697a      	ldr	r2, [r7, #20]
 800eda8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	e005      	b.n	800edba <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800edae:	2200      	movs	r2, #0
 800edb0:	6839      	ldr	r1, [r7, #0]
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7ff fe1a 	bl	800e9ec <netconn_recv_data>
 800edb8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3718      	adds	r7, #24
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	08021960 	.word	0x08021960
 800edc8:	08021b78 	.word	0x08021b78
 800edcc:	080219b8 	.word	0x080219b8
 800edd0:	08021b98 	.word	0x08021b98
 800edd4:	08021c10 	.word	0x08021c10

0800edd8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b088      	sub	sp, #32
 800eddc:	af02      	add	r7, sp, #8
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	607a      	str	r2, [r7, #4]
 800ede4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800edee:	78fa      	ldrb	r2, [r7, #3]
 800edf0:	f107 0110 	add.w	r1, r7, #16
 800edf4:	6a3b      	ldr	r3, [r7, #32]
 800edf6:	9300      	str	r3, [sp, #0]
 800edf8:	4613      	mov	r3, r2
 800edfa:	2201      	movs	r2, #1
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f000 f805 	bl	800ee0c <netconn_write_vectors_partly>
 800ee02:	4603      	mov	r3, r0
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3718      	adds	r7, #24
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b092      	sub	sp, #72	; 0x48
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	4611      	mov	r1, r2
 800ee18:	461a      	mov	r2, r3
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	80fb      	strh	r3, [r7, #6]
 800ee1e:	4613      	mov	r3, r2
 800ee20:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d109      	bne.n	800ee3c <netconn_write_vectors_partly+0x30>
 800ee28:	4b4e      	ldr	r3, [pc, #312]	; (800ef64 <netconn_write_vectors_partly+0x158>)
 800ee2a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ee2e:	494e      	ldr	r1, [pc, #312]	; (800ef68 <netconn_write_vectors_partly+0x15c>)
 800ee30:	484e      	ldr	r0, [pc, #312]	; (800ef6c <netconn_write_vectors_partly+0x160>)
 800ee32:	f010 fd5b 	bl	801f8ec <iprintf>
 800ee36:	f06f 030f 	mvn.w	r3, #15
 800ee3a:	e08e      	b.n	800ef5a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee44:	2b10      	cmp	r3, #16
 800ee46:	d009      	beq.n	800ee5c <netconn_write_vectors_partly+0x50>
 800ee48:	4b46      	ldr	r3, [pc, #280]	; (800ef64 <netconn_write_vectors_partly+0x158>)
 800ee4a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800ee4e:	4948      	ldr	r1, [pc, #288]	; (800ef70 <netconn_write_vectors_partly+0x164>)
 800ee50:	4846      	ldr	r0, [pc, #280]	; (800ef6c <netconn_write_vectors_partly+0x160>)
 800ee52:	f010 fd4b 	bl	801f8ec <iprintf>
 800ee56:	f06f 0305 	mvn.w	r3, #5
 800ee5a:	e07e      	b.n	800ef5a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	7f1b      	ldrb	r3, [r3, #28]
 800ee60:	f003 0302 	and.w	r3, r3, #2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d104      	bne.n	800ee72 <netconn_write_vectors_partly+0x66>
 800ee68:	797b      	ldrb	r3, [r7, #5]
 800ee6a:	f003 0304 	and.w	r3, r3, #4
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <netconn_write_vectors_partly+0x6a>
 800ee72:	2301      	movs	r3, #1
 800ee74:	e000      	b.n	800ee78 <netconn_write_vectors_partly+0x6c>
 800ee76:	2300      	movs	r3, #0
 800ee78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800ee7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d005      	beq.n	800ee90 <netconn_write_vectors_partly+0x84>
 800ee84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d102      	bne.n	800ee90 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800ee8a:	f06f 0305 	mvn.w	r3, #5
 800ee8e:	e064      	b.n	800ef5a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800ee90:	2300      	movs	r3, #0
 800ee92:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800ee94:	2300      	movs	r3, #0
 800ee96:	643b      	str	r3, [r7, #64]	; 0x40
 800ee98:	e015      	b.n	800eec6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800ee9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee9c:	00db      	lsls	r3, r3, #3
 800ee9e:	68ba      	ldr	r2, [r7, #8]
 800eea0:	4413      	add	r3, r2
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eea6:	4413      	add	r3, r2
 800eea8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800eeaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeac:	00db      	lsls	r3, r3, #3
 800eeae:	68ba      	ldr	r2, [r7, #8]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d202      	bcs.n	800eec0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800eeba:	f06f 0305 	mvn.w	r3, #5
 800eebe:	e04c      	b.n	800ef5a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800eec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eec2:	3301      	adds	r3, #1
 800eec4:	643b      	str	r3, [r7, #64]	; 0x40
 800eec6:	88fb      	ldrh	r3, [r7, #6]
 800eec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eeca:	429a      	cmp	r2, r3
 800eecc:	dbe5      	blt.n	800ee9a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800eece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	e040      	b.n	800ef5a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800eed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	da0a      	bge.n	800eef4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800eede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d102      	bne.n	800eeea <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800eee4:	f06f 0305 	mvn.w	r3, #5
 800eee8:	e037      	b.n	800ef5a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800eeea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800eeee:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800eef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800eefc:	88fb      	ldrh	r3, [r7, #6]
 800eefe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ef00:	2300      	movs	r3, #0
 800ef02:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800ef04:	797b      	ldrb	r3, [r7, #5]
 800ef06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800ef0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef0c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ef12:	f107 0314 	add.w	r3, r7, #20
 800ef16:	4619      	mov	r1, r3
 800ef18:	4816      	ldr	r0, [pc, #88]	; (800ef74 <netconn_write_vectors_partly+0x168>)
 800ef1a:	f7ff fc57 	bl	800e7cc <netconn_apimsg>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800ef24:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d114      	bne.n	800ef56 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800ef2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d002      	beq.n	800ef38 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ef32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef36:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ef38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d10a      	bne.n	800ef56 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ef40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d006      	beq.n	800ef56 <netconn_write_vectors_partly+0x14a>
 800ef48:	4b06      	ldr	r3, [pc, #24]	; (800ef64 <netconn_write_vectors_partly+0x158>)
 800ef4a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ef4e:	490a      	ldr	r1, [pc, #40]	; (800ef78 <netconn_write_vectors_partly+0x16c>)
 800ef50:	4806      	ldr	r0, [pc, #24]	; (800ef6c <netconn_write_vectors_partly+0x160>)
 800ef52:	f010 fccb 	bl	801f8ec <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800ef56:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3748      	adds	r7, #72	; 0x48
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	08021960 	.word	0x08021960
 800ef68:	08021c38 	.word	0x08021c38
 800ef6c:	080219b8 	.word	0x080219b8
 800ef70:	08021c54 	.word	0x08021c54
 800ef74:	080105d9 	.word	0x080105d9
 800ef78:	08021c78 	.word	0x08021c78

0800ef7c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b08c      	sub	sp, #48	; 0x30
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	460b      	mov	r3, r1
 800ef86:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d109      	bne.n	800efa2 <netconn_close_shutdown+0x26>
 800ef8e:	4b0f      	ldr	r3, [pc, #60]	; (800efcc <netconn_close_shutdown+0x50>)
 800ef90:	f240 4247 	movw	r2, #1095	; 0x447
 800ef94:	490e      	ldr	r1, [pc, #56]	; (800efd0 <netconn_close_shutdown+0x54>)
 800ef96:	480f      	ldr	r0, [pc, #60]	; (800efd4 <netconn_close_shutdown+0x58>)
 800ef98:	f010 fca8 	bl	801f8ec <iprintf>
 800ef9c:	f06f 030f 	mvn.w	r3, #15
 800efa0:	e010      	b.n	800efc4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800efa6:	78fb      	ldrb	r3, [r7, #3]
 800efa8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800efaa:	2329      	movs	r3, #41	; 0x29
 800efac:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800efae:	f107 030c 	add.w	r3, r7, #12
 800efb2:	4619      	mov	r1, r3
 800efb4:	4808      	ldr	r0, [pc, #32]	; (800efd8 <netconn_close_shutdown+0x5c>)
 800efb6:	f7ff fc09 	bl	800e7cc <netconn_apimsg>
 800efba:	4603      	mov	r3, r0
 800efbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800efc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3730      	adds	r7, #48	; 0x30
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	08021960 	.word	0x08021960
 800efd0:	08021c9c 	.word	0x08021c9c
 800efd4:	080219b8 	.word	0x080219b8
 800efd8:	080106f1 	.word	0x080106f1

0800efdc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800efe4:	2103      	movs	r1, #3
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7ff ffc8 	bl	800ef7c <netconn_close_shutdown>
 800efec:	4603      	mov	r3, r0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3708      	adds	r7, #8
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b084      	sub	sp, #16
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d101      	bne.n	800f008 <netconn_err+0x12>
    return ERR_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	e00d      	b.n	800f024 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f008:	f010 fa24 	bl	801f454 <sys_arch_protect>
 800f00c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	7a1b      	ldrb	r3, [r3, #8]
 800f012:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2200      	movs	r2, #0
 800f018:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f01a:	68f8      	ldr	r0, [r7, #12]
 800f01c:	f010 fa28 	bl	801f470 <sys_arch_unprotect>
  return err;
 800f020:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f024:	4618      	mov	r0, r3
 800f026:	3710      	adds	r7, #16
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b08a      	sub	sp, #40	; 0x28
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d109      	bne.n	800f050 <netconn_gethostbyname+0x24>
 800f03c:	4b24      	ldr	r3, [pc, #144]	; (800f0d0 <netconn_gethostbyname+0xa4>)
 800f03e:	f240 5204 	movw	r2, #1284	; 0x504
 800f042:	4924      	ldr	r1, [pc, #144]	; (800f0d4 <netconn_gethostbyname+0xa8>)
 800f044:	4824      	ldr	r0, [pc, #144]	; (800f0d8 <netconn_gethostbyname+0xac>)
 800f046:	f010 fc51 	bl	801f8ec <iprintf>
 800f04a:	f06f 030f 	mvn.w	r3, #15
 800f04e:	e03b      	b.n	800f0c8 <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d109      	bne.n	800f06a <netconn_gethostbyname+0x3e>
 800f056:	4b1e      	ldr	r3, [pc, #120]	; (800f0d0 <netconn_gethostbyname+0xa4>)
 800f058:	f240 5205 	movw	r2, #1285	; 0x505
 800f05c:	491f      	ldr	r1, [pc, #124]	; (800f0dc <netconn_gethostbyname+0xb0>)
 800f05e:	481e      	ldr	r0, [pc, #120]	; (800f0d8 <netconn_gethostbyname+0xac>)
 800f060:	f010 fc44 	bl	801f8ec <iprintf>
 800f064:	f06f 030f 	mvn.w	r3, #15
 800f068:	e02e      	b.n	800f0c8 <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 800f06a:	f107 030f 	add.w	r3, r7, #15
 800f06e:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 800f070:	f107 0310 	add.w	r3, r7, #16
 800f074:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	2100      	movs	r1, #0
 800f082:	4618      	mov	r0, r3
 800f084:	f010 f8fa 	bl	801f27c <sys_sem_new>
 800f088:	4603      	mov	r3, r0
 800f08a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f08c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d002      	beq.n	800f09a <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 800f094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f098:	e016      	b.n	800f0c8 <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 800f09a:	69fa      	ldr	r2, [r7, #28]
 800f09c:	f107 0314 	add.w	r3, r7, #20
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	480f      	ldr	r0, [pc, #60]	; (800f0e0 <netconn_gethostbyname+0xb4>)
 800f0a4:	f001 fe0a 	bl	8010cbc <tcpip_send_msg_wait_sem>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f010 f946 	bl	801f342 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 800f0b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d002      	beq.n	800f0c4 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 800f0be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f0c2:	e001      	b.n	800f0c8 <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 800f0c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3728      	adds	r7, #40	; 0x28
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	08021960 	.word	0x08021960
 800f0d4:	08021cb8 	.word	0x08021cb8
 800f0d8:	080219b8 	.word	0x080219b8
 800f0dc:	08021cdc 	.word	0x08021cdc
 800f0e0:	0801084d 	.word	0x0801084d

0800f0e4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f0ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0f2:	f113 0f0d 	cmn.w	r3, #13
 800f0f6:	d009      	beq.n	800f10c <lwip_netconn_err_to_msg+0x28>
 800f0f8:	f113 0f0d 	cmn.w	r3, #13
 800f0fc:	dc0c      	bgt.n	800f118 <lwip_netconn_err_to_msg+0x34>
 800f0fe:	f113 0f0f 	cmn.w	r3, #15
 800f102:	d007      	beq.n	800f114 <lwip_netconn_err_to_msg+0x30>
 800f104:	f113 0f0e 	cmn.w	r3, #14
 800f108:	d002      	beq.n	800f110 <lwip_netconn_err_to_msg+0x2c>
 800f10a:	e005      	b.n	800f118 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f10c:	4b0a      	ldr	r3, [pc, #40]	; (800f138 <lwip_netconn_err_to_msg+0x54>)
 800f10e:	e00e      	b.n	800f12e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f110:	4b0a      	ldr	r3, [pc, #40]	; (800f13c <lwip_netconn_err_to_msg+0x58>)
 800f112:	e00c      	b.n	800f12e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f114:	4b0a      	ldr	r3, [pc, #40]	; (800f140 <lwip_netconn_err_to_msg+0x5c>)
 800f116:	e00a      	b.n	800f12e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d005      	beq.n	800f12c <lwip_netconn_err_to_msg+0x48>
 800f120:	4b08      	ldr	r3, [pc, #32]	; (800f144 <lwip_netconn_err_to_msg+0x60>)
 800f122:	227d      	movs	r2, #125	; 0x7d
 800f124:	4908      	ldr	r1, [pc, #32]	; (800f148 <lwip_netconn_err_to_msg+0x64>)
 800f126:	4809      	ldr	r0, [pc, #36]	; (800f14c <lwip_netconn_err_to_msg+0x68>)
 800f128:	f010 fbe0 	bl	801f8ec <iprintf>
      return NULL;
 800f12c:	2300      	movs	r3, #0
  }
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3708      	adds	r7, #8
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	08025578 	.word	0x08025578
 800f13c:	08025579 	.word	0x08025579
 800f140:	0802557a 	.word	0x0802557a
 800f144:	08021d00 	.word	0x08021d00
 800f148:	08021d34 	.word	0x08021d34
 800f14c:	08021d44 	.word	0x08021d44

0800f150 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d105      	bne.n	800f16c <lwip_netconn_is_err_msg+0x1c>
 800f160:	4b12      	ldr	r3, [pc, #72]	; (800f1ac <lwip_netconn_is_err_msg+0x5c>)
 800f162:	2285      	movs	r2, #133	; 0x85
 800f164:	4912      	ldr	r1, [pc, #72]	; (800f1b0 <lwip_netconn_is_err_msg+0x60>)
 800f166:	4813      	ldr	r0, [pc, #76]	; (800f1b4 <lwip_netconn_is_err_msg+0x64>)
 800f168:	f010 fbc0 	bl	801f8ec <iprintf>

  if (msg == &netconn_aborted) {
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4a12      	ldr	r2, [pc, #72]	; (800f1b8 <lwip_netconn_is_err_msg+0x68>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d104      	bne.n	800f17e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	22f3      	movs	r2, #243	; 0xf3
 800f178:	701a      	strb	r2, [r3, #0]
    return 1;
 800f17a:	2301      	movs	r3, #1
 800f17c:	e012      	b.n	800f1a4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4a0e      	ldr	r2, [pc, #56]	; (800f1bc <lwip_netconn_is_err_msg+0x6c>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d104      	bne.n	800f190 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	22f2      	movs	r2, #242	; 0xf2
 800f18a:	701a      	strb	r2, [r3, #0]
    return 1;
 800f18c:	2301      	movs	r3, #1
 800f18e:	e009      	b.n	800f1a4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4a0b      	ldr	r2, [pc, #44]	; (800f1c0 <lwip_netconn_is_err_msg+0x70>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d104      	bne.n	800f1a2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	22f1      	movs	r2, #241	; 0xf1
 800f19c:	701a      	strb	r2, [r3, #0]
    return 1;
 800f19e:	2301      	movs	r3, #1
 800f1a0:	e000      	b.n	800f1a4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f1a2:	2300      	movs	r3, #0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	08021d00 	.word	0x08021d00
 800f1b0:	08021d6c 	.word	0x08021d6c
 800f1b4:	08021d44 	.word	0x08021d44
 800f1b8:	08025578 	.word	0x08025578
 800f1bc:	08025579 	.word	0x08025579
 800f1c0:	0802557a 	.word	0x0802557a

0800f1c4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b088      	sub	sp, #32
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
 800f1d0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d105      	bne.n	800f1e4 <recv_udp+0x20>
 800f1d8:	4b34      	ldr	r3, [pc, #208]	; (800f2ac <recv_udp+0xe8>)
 800f1da:	22e5      	movs	r2, #229	; 0xe5
 800f1dc:	4934      	ldr	r1, [pc, #208]	; (800f2b0 <recv_udp+0xec>)
 800f1de:	4835      	ldr	r0, [pc, #212]	; (800f2b4 <recv_udp+0xf0>)
 800f1e0:	f010 fb84 	bl	801f8ec <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d105      	bne.n	800f1f6 <recv_udp+0x32>
 800f1ea:	4b30      	ldr	r3, [pc, #192]	; (800f2ac <recv_udp+0xe8>)
 800f1ec:	22e6      	movs	r2, #230	; 0xe6
 800f1ee:	4932      	ldr	r1, [pc, #200]	; (800f2b8 <recv_udp+0xf4>)
 800f1f0:	4830      	ldr	r0, [pc, #192]	; (800f2b4 <recv_udp+0xf0>)
 800f1f2:	f010 fb7b 	bl	801f8ec <iprintf>
  conn = (struct netconn *)arg;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f1fa:	69fb      	ldr	r3, [r7, #28]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d103      	bne.n	800f208 <recv_udp+0x44>
    pbuf_free(p);
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f004 f949 	bl	8013498 <pbuf_free>
    return;
 800f206:	e04d      	b.n	800f2a4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	68ba      	ldr	r2, [r7, #8]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d005      	beq.n	800f21e <recv_udp+0x5a>
 800f212:	4b26      	ldr	r3, [pc, #152]	; (800f2ac <recv_udp+0xe8>)
 800f214:	22ee      	movs	r2, #238	; 0xee
 800f216:	4929      	ldr	r1, [pc, #164]	; (800f2bc <recv_udp+0xf8>)
 800f218:	4826      	ldr	r0, [pc, #152]	; (800f2b4 <recv_udp+0xf0>)
 800f21a:	f010 fb67 	bl	801f8ec <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f21e:	69fb      	ldr	r3, [r7, #28]
 800f220:	3310      	adds	r3, #16
 800f222:	4618      	mov	r0, r3
 800f224:	f010 f80c 	bl	801f240 <sys_mbox_valid>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d103      	bne.n	800f236 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f004 f932 	bl	8013498 <pbuf_free>
    return;
 800f234:	e036      	b.n	800f2a4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f236:	2006      	movs	r0, #6
 800f238:	f003 fa2c 	bl	8012694 <memp_malloc>
 800f23c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f23e:	69bb      	ldr	r3, [r7, #24]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d103      	bne.n	800f24c <recv_udp+0x88>
    pbuf_free(p);
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f004 f927 	bl	8013498 <pbuf_free>
    return;
 800f24a:	e02b      	b.n	800f2a4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d002      	beq.n	800f264 <recv_udp+0xa0>
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	e000      	b.n	800f266 <recv_udp+0xa2>
 800f264:	2300      	movs	r3, #0
 800f266:	69ba      	ldr	r2, [r7, #24]
 800f268:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f26e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	891b      	ldrh	r3, [r3, #8]
 800f274:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	3310      	adds	r3, #16
 800f27a:	69b9      	ldr	r1, [r7, #24]
 800f27c:	4618      	mov	r0, r3
 800f27e:	f00f ff7d 	bl	801f17c <sys_mbox_trypost>
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d003      	beq.n	800f290 <recv_udp+0xcc>
    netbuf_delete(buf);
 800f288:	69b8      	ldr	r0, [r7, #24]
 800f28a:	f001 fb25 	bl	80108d8 <netbuf_delete>
    return;
 800f28e:	e009      	b.n	800f2a4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f294:	2b00      	cmp	r3, #0
 800f296:	d005      	beq.n	800f2a4 <recv_udp+0xe0>
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f29c:	8afa      	ldrh	r2, [r7, #22]
 800f29e:	2100      	movs	r1, #0
 800f2a0:	69f8      	ldr	r0, [r7, #28]
 800f2a2:	4798      	blx	r3
  }
}
 800f2a4:	3720      	adds	r7, #32
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	08021d00 	.word	0x08021d00
 800f2b0:	08021d78 	.word	0x08021d78
 800f2b4:	08021d44 	.word	0x08021d44
 800f2b8:	08021d9c 	.word	0x08021d9c
 800f2bc:	08021dbc 	.word	0x08021dbc

0800f2c0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b088      	sub	sp, #32
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	607a      	str	r2, [r7, #4]
 800f2cc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d106      	bne.n	800f2e2 <recv_tcp+0x22>
 800f2d4:	4b36      	ldr	r3, [pc, #216]	; (800f3b0 <recv_tcp+0xf0>)
 800f2d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f2da:	4936      	ldr	r1, [pc, #216]	; (800f3b4 <recv_tcp+0xf4>)
 800f2dc:	4836      	ldr	r0, [pc, #216]	; (800f3b8 <recv_tcp+0xf8>)
 800f2de:	f010 fb05 	bl	801f8ec <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d106      	bne.n	800f2f6 <recv_tcp+0x36>
 800f2e8:	4b31      	ldr	r3, [pc, #196]	; (800f3b0 <recv_tcp+0xf0>)
 800f2ea:	f240 122d 	movw	r2, #301	; 0x12d
 800f2ee:	4933      	ldr	r1, [pc, #204]	; (800f3bc <recv_tcp+0xfc>)
 800f2f0:	4831      	ldr	r0, [pc, #196]	; (800f3b8 <recv_tcp+0xf8>)
 800f2f2:	f010 fafb 	bl	801f8ec <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f2f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d006      	beq.n	800f30c <recv_tcp+0x4c>
 800f2fe:	4b2c      	ldr	r3, [pc, #176]	; (800f3b0 <recv_tcp+0xf0>)
 800f300:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800f304:	492e      	ldr	r1, [pc, #184]	; (800f3c0 <recv_tcp+0x100>)
 800f306:	482c      	ldr	r0, [pc, #176]	; (800f3b8 <recv_tcp+0xf8>)
 800f308:	f010 faf0 	bl	801f8ec <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d102      	bne.n	800f31c <recv_tcp+0x5c>
    return ERR_VAL;
 800f316:	f06f 0305 	mvn.w	r3, #5
 800f31a:	e045      	b.n	800f3a8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	68ba      	ldr	r2, [r7, #8]
 800f322:	429a      	cmp	r2, r3
 800f324:	d006      	beq.n	800f334 <recv_tcp+0x74>
 800f326:	4b22      	ldr	r3, [pc, #136]	; (800f3b0 <recv_tcp+0xf0>)
 800f328:	f240 1235 	movw	r2, #309	; 0x135
 800f32c:	4925      	ldr	r1, [pc, #148]	; (800f3c4 <recv_tcp+0x104>)
 800f32e:	4822      	ldr	r0, [pc, #136]	; (800f3b8 <recv_tcp+0xf8>)
 800f330:	f010 fadc 	bl	801f8ec <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	3310      	adds	r3, #16
 800f338:	4618      	mov	r0, r3
 800f33a:	f00f ff81 	bl	801f240 <sys_mbox_valid>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10d      	bne.n	800f360 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d008      	beq.n	800f35c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	891b      	ldrh	r3, [r3, #8]
 800f34e:	4619      	mov	r1, r3
 800f350:	68b8      	ldr	r0, [r7, #8]
 800f352:	f005 f883 	bl	801445c <tcp_recved>
      pbuf_free(p);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f004 f89e 	bl	8013498 <pbuf_free>
    }
    return ERR_OK;
 800f35c:	2300      	movs	r3, #0
 800f35e:	e023      	b.n	800f3a8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d005      	beq.n	800f372 <recv_tcp+0xb2>
    msg = p;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	891b      	ldrh	r3, [r3, #8]
 800f36e:	83fb      	strh	r3, [r7, #30]
 800f370:	e003      	b.n	800f37a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800f372:	4b15      	ldr	r3, [pc, #84]	; (800f3c8 <recv_tcp+0x108>)
 800f374:	61bb      	str	r3, [r7, #24]
    len = 0;
 800f376:	2300      	movs	r3, #0
 800f378:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	3310      	adds	r3, #16
 800f37e:	69b9      	ldr	r1, [r7, #24]
 800f380:	4618      	mov	r0, r3
 800f382:	f00f fefb 	bl	801f17c <sys_mbox_trypost>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d002      	beq.n	800f392 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800f38c:	f04f 33ff 	mov.w	r3, #4294967295
 800f390:	e00a      	b.n	800f3a8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f396:	2b00      	cmp	r3, #0
 800f398:	d005      	beq.n	800f3a6 <recv_tcp+0xe6>
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39e:	8bfa      	ldrh	r2, [r7, #30]
 800f3a0:	2100      	movs	r1, #0
 800f3a2:	6978      	ldr	r0, [r7, #20]
 800f3a4:	4798      	blx	r3
  }

  return ERR_OK;
 800f3a6:	2300      	movs	r3, #0
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3720      	adds	r7, #32
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	08021d00 	.word	0x08021d00
 800f3b4:	08021ddc 	.word	0x08021ddc
 800f3b8:	08021d44 	.word	0x08021d44
 800f3bc:	08021e00 	.word	0x08021e00
 800f3c0:	08021e20 	.word	0x08021e20
 800f3c4:	08021e38 	.word	0x08021e38
 800f3c8:	0802557a 	.word	0x0802557a

0800f3cc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d106      	bne.n	800f3ee <poll_tcp+0x22>
 800f3e0:	4b29      	ldr	r3, [pc, #164]	; (800f488 <poll_tcp+0xbc>)
 800f3e2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f3e6:	4929      	ldr	r1, [pc, #164]	; (800f48c <poll_tcp+0xc0>)
 800f3e8:	4829      	ldr	r0, [pc, #164]	; (800f490 <poll_tcp+0xc4>)
 800f3ea:	f010 fa7f 	bl	801f8ec <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	785b      	ldrb	r3, [r3, #1]
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d104      	bne.n	800f400 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f3f6:	2101      	movs	r1, #1
 800f3f8:	68f8      	ldr	r0, [r7, #12]
 800f3fa:	f000 ff21 	bl	8010240 <lwip_netconn_do_writemore>
 800f3fe:	e016      	b.n	800f42e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	785b      	ldrb	r3, [r3, #1]
 800f404:	2b04      	cmp	r3, #4
 800f406:	d112      	bne.n	800f42e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	6a1b      	ldr	r3, [r3, #32]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d00a      	beq.n	800f426 <poll_tcp+0x5a>
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	6a1b      	ldr	r3, [r3, #32]
 800f414:	7a5b      	ldrb	r3, [r3, #9]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d005      	beq.n	800f426 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	6a1b      	ldr	r3, [r3, #32]
 800f41e:	7a5a      	ldrb	r2, [r3, #9]
 800f420:	3a01      	subs	r2, #1
 800f422:	b2d2      	uxtb	r2, r2
 800f424:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f426:	2101      	movs	r1, #1
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f000 fb3b 	bl	800faa4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	7f1b      	ldrb	r3, [r3, #28]
 800f432:	f003 0310 	and.w	r3, r3, #16
 800f436:	2b00      	cmp	r3, #0
 800f438:	d021      	beq.n	800f47e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d01d      	beq.n	800f47e <poll_tcp+0xb2>
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f44a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f44e:	d316      	bcc.n	800f47e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f458:	2b04      	cmp	r3, #4
 800f45a:	d810      	bhi.n	800f47e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	7f1b      	ldrb	r3, [r3, #28]
 800f460:	f023 0310 	bic.w	r3, r3, #16
 800f464:	b2da      	uxtb	r2, r3
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d005      	beq.n	800f47e <poll_tcp+0xb2>
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f476:	2200      	movs	r2, #0
 800f478:	2102      	movs	r1, #2
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f47e:	2300      	movs	r3, #0
}
 800f480:	4618      	mov	r0, r3
 800f482:	3710      	adds	r7, #16
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}
 800f488:	08021d00 	.word	0x08021d00
 800f48c:	08021e58 	.word	0x08021e58
 800f490:	08021d44 	.word	0x08021d44

0800f494 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b086      	sub	sp, #24
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d106      	bne.n	800f4ba <sent_tcp+0x26>
 800f4ac:	4b20      	ldr	r3, [pc, #128]	; (800f530 <sent_tcp+0x9c>)
 800f4ae:	f240 1293 	movw	r2, #403	; 0x193
 800f4b2:	4920      	ldr	r1, [pc, #128]	; (800f534 <sent_tcp+0xa0>)
 800f4b4:	4820      	ldr	r0, [pc, #128]	; (800f538 <sent_tcp+0xa4>)
 800f4b6:	f010 fa19 	bl	801f8ec <iprintf>

  if (conn) {
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d032      	beq.n	800f526 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	785b      	ldrb	r3, [r3, #1]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d104      	bne.n	800f4d2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f4c8:	2101      	movs	r1, #1
 800f4ca:	6978      	ldr	r0, [r7, #20]
 800f4cc:	f000 feb8 	bl	8010240 <lwip_netconn_do_writemore>
 800f4d0:	e007      	b.n	800f4e2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	785b      	ldrb	r3, [r3, #1]
 800f4d6:	2b04      	cmp	r3, #4
 800f4d8:	d103      	bne.n	800f4e2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f4da:	2101      	movs	r1, #1
 800f4dc:	6978      	ldr	r0, [r7, #20]
 800f4de:	f000 fae1 	bl	800faa4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d01d      	beq.n	800f526 <sent_tcp+0x92>
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f4f2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f4f6:	d316      	bcc.n	800f526 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f500:	2b04      	cmp	r3, #4
 800f502:	d810      	bhi.n	800f526 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	7f1b      	ldrb	r3, [r3, #28]
 800f508:	f023 0310 	bic.w	r3, r3, #16
 800f50c:	b2da      	uxtb	r2, r3
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f516:	2b00      	cmp	r3, #0
 800f518:	d005      	beq.n	800f526 <sent_tcp+0x92>
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f51e:	88fa      	ldrh	r2, [r7, #6]
 800f520:	2102      	movs	r1, #2
 800f522:	6978      	ldr	r0, [r7, #20]
 800f524:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f526:	2300      	movs	r3, #0
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3718      	adds	r7, #24
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	08021d00 	.word	0x08021d00
 800f534:	08021e58 	.word	0x08021e58
 800f538:	08021d44 	.word	0x08021d44

0800f53c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b088      	sub	sp, #32
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	460b      	mov	r3, r1
 800f546:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d106      	bne.n	800f560 <err_tcp+0x24>
 800f552:	4b5f      	ldr	r3, [pc, #380]	; (800f6d0 <err_tcp+0x194>)
 800f554:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f558:	495e      	ldr	r1, [pc, #376]	; (800f6d4 <err_tcp+0x198>)
 800f55a:	485f      	ldr	r0, [pc, #380]	; (800f6d8 <err_tcp+0x19c>)
 800f55c:	f010 f9c6 	bl	801f8ec <iprintf>

  SYS_ARCH_PROTECT(lev);
 800f560:	f00f ff78 	bl	801f454 <sys_arch_protect>
 800f564:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	2200      	movs	r2, #0
 800f56a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	78fa      	ldrb	r2, [r7, #3]
 800f570:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	7f1b      	ldrb	r3, [r3, #28]
 800f576:	f043 0301 	orr.w	r3, r3, #1
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	785b      	ldrb	r3, [r3, #1]
 800f584:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f586:	69fb      	ldr	r3, [r7, #28]
 800f588:	2200      	movs	r2, #0
 800f58a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f58c:	69b8      	ldr	r0, [r7, #24]
 800f58e:	f00f ff6f 	bl	801f470 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f596:	2b00      	cmp	r3, #0
 800f598:	d005      	beq.n	800f5a6 <err_tcp+0x6a>
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f59e:	2200      	movs	r2, #0
 800f5a0:	2104      	movs	r1, #4
 800f5a2:	69f8      	ldr	r0, [r7, #28]
 800f5a4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d005      	beq.n	800f5ba <err_tcp+0x7e>
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	2100      	movs	r1, #0
 800f5b6:	69f8      	ldr	r0, [r7, #28]
 800f5b8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d005      	beq.n	800f5ce <err_tcp+0x92>
 800f5c2:	69fb      	ldr	r3, [r7, #28]
 800f5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	2102      	movs	r1, #2
 800f5ca:	69f8      	ldr	r0, [r7, #28]
 800f5cc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f5ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7ff fd86 	bl	800f0e4 <lwip_netconn_err_to_msg>
 800f5d8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	3310      	adds	r3, #16
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f00f fe2e 	bl	801f240 <sys_mbox_valid>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d005      	beq.n	800f5f6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	3310      	adds	r3, #16
 800f5ee:	6939      	ldr	r1, [r7, #16]
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f00f fdc3 	bl	801f17c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	3314      	adds	r3, #20
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f00f fe20 	bl	801f240 <sys_mbox_valid>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d005      	beq.n	800f612 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	3314      	adds	r3, #20
 800f60a:	6939      	ldr	r1, [r7, #16]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f00f fdb5 	bl	801f17c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f612:	7dfb      	ldrb	r3, [r7, #23]
 800f614:	2b01      	cmp	r3, #1
 800f616:	d005      	beq.n	800f624 <err_tcp+0xe8>
 800f618:	7dfb      	ldrb	r3, [r7, #23]
 800f61a:	2b04      	cmp	r3, #4
 800f61c:	d002      	beq.n	800f624 <err_tcp+0xe8>
 800f61e:	7dfb      	ldrb	r3, [r7, #23]
 800f620:	2b03      	cmp	r3, #3
 800f622:	d143      	bne.n	800f6ac <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	7f1b      	ldrb	r3, [r3, #28]
 800f628:	f003 0304 	and.w	r3, r3, #4
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	bf14      	ite	ne
 800f630:	2301      	movne	r3, #1
 800f632:	2300      	moveq	r3, #0
 800f634:	b2db      	uxtb	r3, r3
 800f636:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	7f1b      	ldrb	r3, [r3, #28]
 800f63c:	f023 0304 	bic.w	r3, r3, #4
 800f640:	b2da      	uxtb	r2, r3
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d13b      	bne.n	800f6c4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	6a1b      	ldr	r3, [r3, #32]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d106      	bne.n	800f662 <err_tcp+0x126>
 800f654:	4b1e      	ldr	r3, [pc, #120]	; (800f6d0 <err_tcp+0x194>)
 800f656:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f65a:	4920      	ldr	r1, [pc, #128]	; (800f6dc <err_tcp+0x1a0>)
 800f65c:	481e      	ldr	r0, [pc, #120]	; (800f6d8 <err_tcp+0x19c>)
 800f65e:	f010 f945 	bl	801f8ec <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f662:	7dfb      	ldrb	r3, [r7, #23]
 800f664:	2b04      	cmp	r3, #4
 800f666:	d104      	bne.n	800f672 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	6a1b      	ldr	r3, [r3, #32]
 800f66c:	2200      	movs	r2, #0
 800f66e:	711a      	strb	r2, [r3, #4]
 800f670:	e003      	b.n	800f67a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	6a1b      	ldr	r3, [r3, #32]
 800f676:	78fa      	ldrb	r2, [r7, #3]
 800f678:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	6a1b      	ldr	r3, [r3, #32]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	330c      	adds	r3, #12
 800f682:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f684:	68b8      	ldr	r0, [r7, #8]
 800f686:	f00f fe69 	bl	801f35c <sys_sem_valid>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d106      	bne.n	800f69e <err_tcp+0x162>
 800f690:	4b0f      	ldr	r3, [pc, #60]	; (800f6d0 <err_tcp+0x194>)
 800f692:	f240 12ef 	movw	r2, #495	; 0x1ef
 800f696:	4912      	ldr	r1, [pc, #72]	; (800f6e0 <err_tcp+0x1a4>)
 800f698:	480f      	ldr	r0, [pc, #60]	; (800f6d8 <err_tcp+0x19c>)
 800f69a:	f010 f927 	bl	801f8ec <iprintf>
      conn->current_msg = NULL;
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f6a4:	68b8      	ldr	r0, [r7, #8]
 800f6a6:	f00f fe3f 	bl	801f328 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f6aa:	e00b      	b.n	800f6c4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	6a1b      	ldr	r3, [r3, #32]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d008      	beq.n	800f6c6 <err_tcp+0x18a>
 800f6b4:	4b06      	ldr	r3, [pc, #24]	; (800f6d0 <err_tcp+0x194>)
 800f6b6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800f6ba:	490a      	ldr	r1, [pc, #40]	; (800f6e4 <err_tcp+0x1a8>)
 800f6bc:	4806      	ldr	r0, [pc, #24]	; (800f6d8 <err_tcp+0x19c>)
 800f6be:	f010 f915 	bl	801f8ec <iprintf>
  }
}
 800f6c2:	e000      	b.n	800f6c6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f6c4:	bf00      	nop
}
 800f6c6:	bf00      	nop
 800f6c8:	3720      	adds	r7, #32
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	08021d00 	.word	0x08021d00
 800f6d4:	08021e58 	.word	0x08021e58
 800f6d8:	08021d44 	.word	0x08021d44
 800f6dc:	08021e68 	.word	0x08021e68
 800f6e0:	08021e84 	.word	0x08021e84
 800f6e4:	08021ea0 	.word	0x08021ea0

0800f6e8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f6f6:	6879      	ldr	r1, [r7, #4]
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f005 fe8d 	bl	8015418 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f6fe:	490a      	ldr	r1, [pc, #40]	; (800f728 <setup_tcp+0x40>)
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f005 fe9b 	bl	801543c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f706:	4909      	ldr	r1, [pc, #36]	; (800f72c <setup_tcp+0x44>)
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f005 feb9 	bl	8015480 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f70e:	2202      	movs	r2, #2
 800f710:	4907      	ldr	r1, [pc, #28]	; (800f730 <setup_tcp+0x48>)
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f005 ff10 	bl	8015538 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f718:	4906      	ldr	r1, [pc, #24]	; (800f734 <setup_tcp+0x4c>)
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	f005 fed2 	bl	80154c4 <tcp_err>
}
 800f720:	bf00      	nop
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	0800f2c1 	.word	0x0800f2c1
 800f72c:	0800f495 	.word	0x0800f495
 800f730:	0800f3cd 	.word	0x0800f3cd
 800f734:	0800f53d 	.word	0x0800f53d

0800f738 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f738:	b590      	push	{r4, r7, lr}
 800f73a:	b085      	sub	sp, #20
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f740:	2300      	movs	r3, #0
 800f742:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d006      	beq.n	800f75c <pcb_new+0x24>
 800f74e:	4b2b      	ldr	r3, [pc, #172]	; (800f7fc <pcb_new+0xc4>)
 800f750:	f240 2265 	movw	r2, #613	; 0x265
 800f754:	492a      	ldr	r1, [pc, #168]	; (800f800 <pcb_new+0xc8>)
 800f756:	482b      	ldr	r0, [pc, #172]	; (800f804 <pcb_new+0xcc>)
 800f758:	f010 f8c8 	bl	801f8ec <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f766:	2b10      	cmp	r3, #16
 800f768:	d022      	beq.n	800f7b0 <pcb_new+0x78>
 800f76a:	2b20      	cmp	r3, #32
 800f76c:	d133      	bne.n	800f7d6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681c      	ldr	r4, [r3, #0]
 800f772:	7bfb      	ldrb	r3, [r7, #15]
 800f774:	4618      	mov	r0, r3
 800f776:	f00b f9aa 	bl	801aace <udp_new_ip_type>
 800f77a:	4603      	mov	r3, r0
 800f77c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d02a      	beq.n	800f7de <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	2b22      	cmp	r3, #34	; 0x22
 800f790:	d104      	bne.n	800f79c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	2201      	movs	r2, #1
 800f79a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	6858      	ldr	r0, [r3, #4]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	4917      	ldr	r1, [pc, #92]	; (800f808 <pcb_new+0xd0>)
 800f7aa:	f00b f917 	bl	801a9dc <udp_recv>
      }
      break;
 800f7ae:	e016      	b.n	800f7de <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681c      	ldr	r4, [r3, #0]
 800f7b4:	7bfb      	ldrb	r3, [r7, #15]
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f005 fe20 	bl	80153fc <tcp_new_ip_type>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d00b      	beq.n	800f7e2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7ff ff8a 	bl	800f6e8 <setup_tcp>
      }
      break;
 800f7d4:	e005      	b.n	800f7e2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	22fa      	movs	r2, #250	; 0xfa
 800f7da:	711a      	strb	r2, [r3, #4]
      return;
 800f7dc:	e00a      	b.n	800f7f4 <pcb_new+0xbc>
      break;
 800f7de:	bf00      	nop
 800f7e0:	e000      	b.n	800f7e4 <pcb_new+0xac>
      break;
 800f7e2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d102      	bne.n	800f7f4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	22ff      	movs	r2, #255	; 0xff
 800f7f2:	711a      	strb	r2, [r3, #4]
  }
}
 800f7f4:	3714      	adds	r7, #20
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd90      	pop	{r4, r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	08021d00 	.word	0x08021d00
 800f800:	08021ee4 	.word	0x08021ee4
 800f804:	08021d44 	.word	0x08021d44
 800f808:	0800f1c5 	.word	0x0800f1c5

0800f80c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2200      	movs	r2, #0
 800f81c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d102      	bne.n	800f82e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f7ff ff85 	bl	800f738 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800f82e:	bf00      	nop
 800f830:	3710      	adds	r7, #16
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
	...

0800f838 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b086      	sub	sp, #24
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	6039      	str	r1, [r7, #0]
 800f842:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800f844:	2300      	movs	r3, #0
 800f846:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800f848:	2007      	movs	r0, #7
 800f84a:	f002 ff23 	bl	8012694 <memp_malloc>
 800f84e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d101      	bne.n	800f85a <netconn_alloc+0x22>
    return NULL;
 800f856:	2300      	movs	r3, #0
 800f858:	e052      	b.n	800f900 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2200      	movs	r2, #0
 800f85e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	79fa      	ldrb	r2, [r7, #7]
 800f864:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2200      	movs	r2, #0
 800f86a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800f86c:	79fb      	ldrb	r3, [r7, #7]
 800f86e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f872:	2b10      	cmp	r3, #16
 800f874:	d004      	beq.n	800f880 <netconn_alloc+0x48>
 800f876:	2b20      	cmp	r3, #32
 800f878:	d105      	bne.n	800f886 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800f87a:	2306      	movs	r3, #6
 800f87c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f87e:	e00a      	b.n	800f896 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800f880:	2306      	movs	r3, #6
 800f882:	617b      	str	r3, [r7, #20]
      break;
 800f884:	e007      	b.n	800f896 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800f886:	4b20      	ldr	r3, [pc, #128]	; (800f908 <netconn_alloc+0xd0>)
 800f888:	f240 22e5 	movw	r2, #741	; 0x2e5
 800f88c:	491f      	ldr	r1, [pc, #124]	; (800f90c <netconn_alloc+0xd4>)
 800f88e:	4820      	ldr	r0, [pc, #128]	; (800f910 <netconn_alloc+0xd8>)
 800f890:	f010 f82c 	bl	801f8ec <iprintf>
      goto free_and_return;
 800f894:	e02f      	b.n	800f8f6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	3310      	adds	r3, #16
 800f89a:	6979      	ldr	r1, [r7, #20]
 800f89c:	4618      	mov	r0, r3
 800f89e:	f00f fc41 	bl	801f124 <sys_mbox_new>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d125      	bne.n	800f8f4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	330c      	adds	r3, #12
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f00f fce4 	bl	801f27c <sys_sem_new>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d005      	beq.n	800f8c6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	3310      	adds	r3, #16
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f00f fc4a 	bl	801f158 <sys_mbox_free>
    goto free_and_return;
 800f8c4:	e017      	b.n	800f8f6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	3314      	adds	r3, #20
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f00f fcc9 	bl	801f262 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8dc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	683a      	ldr	r2, [r7, #0]
 800f8e2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	7cfa      	ldrb	r2, [r7, #19]
 800f8ee:	771a      	strb	r2, [r3, #28]
  return conn;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	e005      	b.n	800f900 <netconn_alloc+0xc8>
    goto free_and_return;
 800f8f4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800f8f6:	68f9      	ldr	r1, [r7, #12]
 800f8f8:	2007      	movs	r0, #7
 800f8fa:	f002 ff1d 	bl	8012738 <memp_free>
  return NULL;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3718      	adds	r7, #24
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	08021d00 	.word	0x08021d00
 800f90c:	08021f04 	.word	0x08021f04
 800f910:	08021d44 	.word	0x08021d44

0800f914 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d006      	beq.n	800f932 <netconn_free+0x1e>
 800f924:	4b1b      	ldr	r3, [pc, #108]	; (800f994 <netconn_free+0x80>)
 800f926:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f92a:	491b      	ldr	r1, [pc, #108]	; (800f998 <netconn_free+0x84>)
 800f92c:	481b      	ldr	r0, [pc, #108]	; (800f99c <netconn_free+0x88>)
 800f92e:	f00f ffdd 	bl	801f8ec <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	3310      	adds	r3, #16
 800f936:	4618      	mov	r0, r3
 800f938:	f00f fc82 	bl	801f240 <sys_mbox_valid>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d006      	beq.n	800f950 <netconn_free+0x3c>
 800f942:	4b14      	ldr	r3, [pc, #80]	; (800f994 <netconn_free+0x80>)
 800f944:	f240 3223 	movw	r2, #803	; 0x323
 800f948:	4915      	ldr	r1, [pc, #84]	; (800f9a0 <netconn_free+0x8c>)
 800f94a:	4814      	ldr	r0, [pc, #80]	; (800f99c <netconn_free+0x88>)
 800f94c:	f00f ffce 	bl	801f8ec <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	3314      	adds	r3, #20
 800f954:	4618      	mov	r0, r3
 800f956:	f00f fc73 	bl	801f240 <sys_mbox_valid>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d006      	beq.n	800f96e <netconn_free+0x5a>
 800f960:	4b0c      	ldr	r3, [pc, #48]	; (800f994 <netconn_free+0x80>)
 800f962:	f240 3226 	movw	r2, #806	; 0x326
 800f966:	490f      	ldr	r1, [pc, #60]	; (800f9a4 <netconn_free+0x90>)
 800f968:	480c      	ldr	r0, [pc, #48]	; (800f99c <netconn_free+0x88>)
 800f96a:	f00f ffbf 	bl	801f8ec <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	330c      	adds	r3, #12
 800f972:	4618      	mov	r0, r3
 800f974:	f00f fce5 	bl	801f342 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	330c      	adds	r3, #12
 800f97c:	4618      	mov	r0, r3
 800f97e:	f00f fcfe 	bl	801f37e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800f982:	6879      	ldr	r1, [r7, #4]
 800f984:	2007      	movs	r0, #7
 800f986:	f002 fed7 	bl	8012738 <memp_free>
}
 800f98a:	bf00      	nop
 800f98c:	3708      	adds	r7, #8
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	08021d00 	.word	0x08021d00
 800f998:	08021f2c 	.word	0x08021f2c
 800f99c:	08021d44 	.word	0x08021d44
 800f9a0:	08021f5c 	.word	0x08021f5c
 800f9a4:	08021f98 	.word	0x08021f98

0800f9a8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b086      	sub	sp, #24
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	3310      	adds	r3, #16
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f00f fc43 	bl	801f240 <sys_mbox_valid>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d02f      	beq.n	800fa20 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f9c0:	e018      	b.n	800f9f4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9ca:	2b10      	cmp	r3, #16
 800f9cc:	d10e      	bne.n	800f9ec <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	f107 020f 	add.w	r2, r7, #15
 800f9d4:	4611      	mov	r1, r2
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7ff fbba 	bl	800f150 <lwip_netconn_is_err_msg>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d108      	bne.n	800f9f4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f003 fd57 	bl	8013498 <pbuf_free>
 800f9ea:	e003      	b.n	800f9f4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f000 ff72 	bl	80108d8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	3310      	adds	r3, #16
 800f9f8:	f107 0210 	add.w	r2, r7, #16
 800f9fc:	4611      	mov	r1, r2
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f00f fc07 	bl	801f212 <sys_arch_mbox_tryfetch>
 800fa04:	4603      	mov	r3, r0
 800fa06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa0a:	d1da      	bne.n	800f9c2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	3310      	adds	r3, #16
 800fa10:	4618      	mov	r0, r3
 800fa12:	f00f fba1 	bl	801f158 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	3310      	adds	r3, #16
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f00f fc21 	bl	801f262 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	3314      	adds	r3, #20
 800fa24:	4618      	mov	r0, r3
 800fa26:	f00f fc0b 	bl	801f240 <sys_mbox_valid>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d034      	beq.n	800fa9a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fa30:	e01d      	b.n	800fa6e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	f107 020e 	add.w	r2, r7, #14
 800fa38:	4611      	mov	r1, r2
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7ff fb88 	bl	800f150 <lwip_netconn_is_err_msg>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d113      	bne.n	800fa6e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800fa4a:	6978      	ldr	r0, [r7, #20]
 800fa4c:	f7ff ffac 	bl	800f9a8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d007      	beq.n	800fa68 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f004 fc97 	bl	8014390 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	2200      	movs	r2, #0
 800fa66:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800fa68:	6978      	ldr	r0, [r7, #20]
 800fa6a:	f7ff ff53 	bl	800f914 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	3314      	adds	r3, #20
 800fa72:	f107 0210 	add.w	r2, r7, #16
 800fa76:	4611      	mov	r1, r2
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f00f fbca 	bl	801f212 <sys_arch_mbox_tryfetch>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa84:	d1d5      	bne.n	800fa32 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	3314      	adds	r3, #20
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f00f fb64 	bl	801f158 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	3314      	adds	r3, #20
 800fa94:	4618      	mov	r0, r3
 800fa96:	f00f fbe4 	bl	801f262 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800fa9a:	bf00      	nop
 800fa9c:	3718      	adds	r7, #24
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
	...

0800faa4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b086      	sub	sp, #24
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	460b      	mov	r3, r1
 800faae:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800fab0:	2300      	movs	r3, #0
 800fab2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d106      	bne.n	800fac8 <lwip_netconn_do_close_internal+0x24>
 800faba:	4ba1      	ldr	r3, [pc, #644]	; (800fd40 <lwip_netconn_do_close_internal+0x29c>)
 800fabc:	f240 32a2 	movw	r2, #930	; 0x3a2
 800fac0:	49a0      	ldr	r1, [pc, #640]	; (800fd44 <lwip_netconn_do_close_internal+0x2a0>)
 800fac2:	48a1      	ldr	r0, [pc, #644]	; (800fd48 <lwip_netconn_do_close_internal+0x2a4>)
 800fac4:	f00f ff12 	bl	801f8ec <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fad0:	2b10      	cmp	r3, #16
 800fad2:	d006      	beq.n	800fae2 <lwip_netconn_do_close_internal+0x3e>
 800fad4:	4b9a      	ldr	r3, [pc, #616]	; (800fd40 <lwip_netconn_do_close_internal+0x29c>)
 800fad6:	f240 32a3 	movw	r2, #931	; 0x3a3
 800fada:	499c      	ldr	r1, [pc, #624]	; (800fd4c <lwip_netconn_do_close_internal+0x2a8>)
 800fadc:	489a      	ldr	r0, [pc, #616]	; (800fd48 <lwip_netconn_do_close_internal+0x2a4>)
 800fade:	f00f ff05 	bl	801f8ec <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	785b      	ldrb	r3, [r3, #1]
 800fae6:	2b04      	cmp	r3, #4
 800fae8:	d006      	beq.n	800faf8 <lwip_netconn_do_close_internal+0x54>
 800faea:	4b95      	ldr	r3, [pc, #596]	; (800fd40 <lwip_netconn_do_close_internal+0x29c>)
 800faec:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800faf0:	4997      	ldr	r1, [pc, #604]	; (800fd50 <lwip_netconn_do_close_internal+0x2ac>)
 800faf2:	4895      	ldr	r0, [pc, #596]	; (800fd48 <lwip_netconn_do_close_internal+0x2a4>)
 800faf4:	f00f fefa 	bl	801f8ec <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d106      	bne.n	800fb0e <lwip_netconn_do_close_internal+0x6a>
 800fb00:	4b8f      	ldr	r3, [pc, #572]	; (800fd40 <lwip_netconn_do_close_internal+0x29c>)
 800fb02:	f240 32a5 	movw	r2, #933	; 0x3a5
 800fb06:	4993      	ldr	r1, [pc, #588]	; (800fd54 <lwip_netconn_do_close_internal+0x2b0>)
 800fb08:	488f      	ldr	r0, [pc, #572]	; (800fd48 <lwip_netconn_do_close_internal+0x2a4>)
 800fb0a:	f00f feef 	bl	801f8ec <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6a1b      	ldr	r3, [r3, #32]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d106      	bne.n	800fb24 <lwip_netconn_do_close_internal+0x80>
 800fb16:	4b8a      	ldr	r3, [pc, #552]	; (800fd40 <lwip_netconn_do_close_internal+0x29c>)
 800fb18:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fb1c:	498e      	ldr	r1, [pc, #568]	; (800fd58 <lwip_netconn_do_close_internal+0x2b4>)
 800fb1e:	488a      	ldr	r0, [pc, #552]	; (800fd48 <lwip_netconn_do_close_internal+0x2a4>)
 800fb20:	f00f fee4 	bl	801f8ec <iprintf>

  tpcb = conn->pcb.tcp;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6a1b      	ldr	r3, [r3, #32]
 800fb2e:	7a1b      	ldrb	r3, [r3, #8]
 800fb30:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800fb32:	7bfb      	ldrb	r3, [r7, #15]
 800fb34:	f003 0301 	and.w	r3, r3, #1
 800fb38:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800fb3a:	7bfb      	ldrb	r3, [r7, #15]
 800fb3c:	f003 0302 	and.w	r3, r3, #2
 800fb40:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800fb42:	7bfb      	ldrb	r3, [r7, #15]
 800fb44:	2b03      	cmp	r3, #3
 800fb46:	d102      	bne.n	800fb4e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	75bb      	strb	r3, [r7, #22]
 800fb4c:	e01f      	b.n	800fb8e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800fb4e:	7bbb      	ldrb	r3, [r7, #14]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00e      	beq.n	800fb72 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800fb58:	2b05      	cmp	r3, #5
 800fb5a:	d007      	beq.n	800fb6c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800fb60:	2b06      	cmp	r3, #6
 800fb62:	d003      	beq.n	800fb6c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800fb68:	2b08      	cmp	r3, #8
 800fb6a:	d102      	bne.n	800fb72 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	75bb      	strb	r3, [r7, #22]
 800fb70:	e00d      	b.n	800fb8e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800fb72:	7b7b      	ldrb	r3, [r7, #13]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d008      	beq.n	800fb8a <lwip_netconn_do_close_internal+0xe6>
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	8b5b      	ldrh	r3, [r3, #26]
 800fb7c:	f003 0310 	and.w	r3, r3, #16
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d002      	beq.n	800fb8a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800fb84:	2301      	movs	r3, #1
 800fb86:	75bb      	strb	r3, [r7, #22]
 800fb88:	e001      	b.n	800fb8e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800fb8e:	7dbb      	ldrb	r3, [r7, #22]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d003      	beq.n	800fb9c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800fb94:	2100      	movs	r1, #0
 800fb96:	6938      	ldr	r0, [r7, #16]
 800fb98:	f005 fc3e 	bl	8015418 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	7d1b      	ldrb	r3, [r3, #20]
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d104      	bne.n	800fbae <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800fba4:	2100      	movs	r1, #0
 800fba6:	6938      	ldr	r0, [r7, #16]
 800fba8:	f005 fcae 	bl	8015508 <tcp_accept>
 800fbac:	e01d      	b.n	800fbea <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800fbae:	7bbb      	ldrb	r3, [r7, #14]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d007      	beq.n	800fbc4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	6938      	ldr	r0, [r7, #16]
 800fbb8:	f005 fc40 	bl	801543c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	6938      	ldr	r0, [r7, #16]
 800fbc0:	f005 fca2 	bl	8015508 <tcp_accept>
    }
    if (shut_tx) {
 800fbc4:	7b7b      	ldrb	r3, [r7, #13]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d003      	beq.n	800fbd2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800fbca:	2100      	movs	r1, #0
 800fbcc:	6938      	ldr	r0, [r7, #16]
 800fbce:	f005 fc57 	bl	8015480 <tcp_sent>
    }
    if (shut_close) {
 800fbd2:	7dbb      	ldrb	r3, [r7, #22]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d008      	beq.n	800fbea <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800fbd8:	2200      	movs	r2, #0
 800fbda:	2100      	movs	r1, #0
 800fbdc:	6938      	ldr	r0, [r7, #16]
 800fbde:	f005 fcab 	bl	8015538 <tcp_poll>
      tcp_err(tpcb, NULL);
 800fbe2:	2100      	movs	r1, #0
 800fbe4:	6938      	ldr	r0, [r7, #16]
 800fbe6:	f005 fc6d 	bl	80154c4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800fbea:	7dbb      	ldrb	r3, [r7, #22]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d005      	beq.n	800fbfc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800fbf0:	6938      	ldr	r0, [r7, #16]
 800fbf2:	f004 fa87 	bl	8014104 <tcp_close>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	75fb      	strb	r3, [r7, #23]
 800fbfa:	e007      	b.n	800fc0c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800fbfc:	7bbb      	ldrb	r3, [r7, #14]
 800fbfe:	7b7a      	ldrb	r2, [r7, #13]
 800fc00:	4619      	mov	r1, r3
 800fc02:	6938      	ldr	r0, [r7, #16]
 800fc04:	f004 faaa 	bl	801415c <tcp_shutdown>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800fc0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d102      	bne.n	800fc1a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800fc14:	2301      	movs	r3, #1
 800fc16:	757b      	strb	r3, [r7, #21]
 800fc18:	e016      	b.n	800fc48 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800fc1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc22:	d10f      	bne.n	800fc44 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6a1b      	ldr	r3, [r3, #32]
 800fc28:	7a5b      	ldrb	r3, [r3, #9]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d10c      	bne.n	800fc48 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800fc32:	7dbb      	ldrb	r3, [r7, #22]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d007      	beq.n	800fc48 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800fc38:	6938      	ldr	r0, [r7, #16]
 800fc3a:	f004 fba9 	bl	8014390 <tcp_abort>
          err = ERR_OK;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	75fb      	strb	r3, [r7, #23]
 800fc42:	e001      	b.n	800fc48 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800fc44:	2301      	movs	r3, #1
 800fc46:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800fc48:	7d7b      	ldrb	r3, [r7, #21]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d044      	beq.n	800fcd8 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6a1b      	ldr	r3, [r3, #32]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	330c      	adds	r3, #12
 800fc56:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6a1b      	ldr	r3, [r3, #32]
 800fc5c:	7dfa      	ldrb	r2, [r7, #23]
 800fc5e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800fc6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d129      	bne.n	800fcc8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800fc74:	7dbb      	ldrb	r3, [r7, #22]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d00c      	beq.n	800fc94 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d005      	beq.n	800fc94 <lwip_netconn_do_close_internal+0x1f0>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	2104      	movs	r1, #4
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	4798      	blx	r3
      }
      if (shut_rx) {
 800fc94:	7bbb      	ldrb	r3, [r7, #14]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d009      	beq.n	800fcae <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d005      	beq.n	800fcae <lwip_netconn_do_close_internal+0x20a>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca6:	2200      	movs	r2, #0
 800fca8:	2100      	movs	r1, #0
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	4798      	blx	r3
      }
      if (shut_tx) {
 800fcae:	7b7b      	ldrb	r3, [r7, #13]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d009      	beq.n	800fcc8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d005      	beq.n	800fcc8 <lwip_netconn_do_close_internal+0x224>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	2102      	movs	r1, #2
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fcc8:	78fb      	ldrb	r3, [r7, #3]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d002      	beq.n	800fcd4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800fcce:	68b8      	ldr	r0, [r7, #8]
 800fcd0:	f00f fb2a 	bl	801f328 <sys_sem_signal>
    }
    return ERR_OK;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	e02e      	b.n	800fd36 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800fcd8:	7d7b      	ldrb	r3, [r7, #21]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d11e      	bne.n	800fd1c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	7d1b      	ldrb	r3, [r3, #20]
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d106      	bne.n	800fcf4 <lwip_netconn_do_close_internal+0x250>
 800fce6:	4b16      	ldr	r3, [pc, #88]	; (800fd40 <lwip_netconn_do_close_internal+0x29c>)
 800fce8:	f240 4241 	movw	r2, #1089	; 0x441
 800fcec:	491b      	ldr	r1, [pc, #108]	; (800fd5c <lwip_netconn_do_close_internal+0x2b8>)
 800fcee:	4816      	ldr	r0, [pc, #88]	; (800fd48 <lwip_netconn_do_close_internal+0x2a4>)
 800fcf0:	f00f fdfc 	bl	801f8ec <iprintf>
    if (shut_tx) {
 800fcf4:	7b7b      	ldrb	r3, [r7, #13]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d003      	beq.n	800fd02 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800fcfa:	4919      	ldr	r1, [pc, #100]	; (800fd60 <lwip_netconn_do_close_internal+0x2bc>)
 800fcfc:	6938      	ldr	r0, [r7, #16]
 800fcfe:	f005 fbbf 	bl	8015480 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800fd02:	2201      	movs	r2, #1
 800fd04:	4917      	ldr	r1, [pc, #92]	; (800fd64 <lwip_netconn_do_close_internal+0x2c0>)
 800fd06:	6938      	ldr	r0, [r7, #16]
 800fd08:	f005 fc16 	bl	8015538 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800fd0c:	4916      	ldr	r1, [pc, #88]	; (800fd68 <lwip_netconn_do_close_internal+0x2c4>)
 800fd0e:	6938      	ldr	r0, [r7, #16]
 800fd10:	f005 fbd8 	bl	80154c4 <tcp_err>
    tcp_arg(tpcb, conn);
 800fd14:	6879      	ldr	r1, [r7, #4]
 800fd16:	6938      	ldr	r0, [r7, #16]
 800fd18:	f005 fb7e 	bl	8015418 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800fd1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d106      	bne.n	800fd32 <lwip_netconn_do_close_internal+0x28e>
 800fd24:	4b06      	ldr	r3, [pc, #24]	; (800fd40 <lwip_netconn_do_close_internal+0x29c>)
 800fd26:	f240 424d 	movw	r2, #1101	; 0x44d
 800fd2a:	4910      	ldr	r1, [pc, #64]	; (800fd6c <lwip_netconn_do_close_internal+0x2c8>)
 800fd2c:	4806      	ldr	r0, [pc, #24]	; (800fd48 <lwip_netconn_do_close_internal+0x2a4>)
 800fd2e:	f00f fddd 	bl	801f8ec <iprintf>
  return err;
 800fd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3718      	adds	r7, #24
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	08021d00 	.word	0x08021d00
 800fd44:	08021fd4 	.word	0x08021fd4
 800fd48:	08021d44 	.word	0x08021d44
 800fd4c:	08021fe4 	.word	0x08021fe4
 800fd50:	08022004 	.word	0x08022004
 800fd54:	08022028 	.word	0x08022028
 800fd58:	08021e68 	.word	0x08021e68
 800fd5c:	0802203c 	.word	0x0802203c
 800fd60:	0800f495 	.word	0x0800f495
 800fd64:	0800f3cd 	.word	0x0800f3cd
 800fd68:	0800f53d 	.word	0x0800f53d
 800fd6c:	08022060 	.word	0x08022060

0800fd70 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	785b      	ldrb	r3, [r3, #1]
 800fd82:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800fd84:	7afb      	ldrb	r3, [r7, #11]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d00d      	beq.n	800fda6 <lwip_netconn_do_delconn+0x36>
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd94:	2b10      	cmp	r3, #16
 800fd96:	d006      	beq.n	800fda6 <lwip_netconn_do_delconn+0x36>
 800fd98:	4b60      	ldr	r3, [pc, #384]	; (800ff1c <lwip_netconn_do_delconn+0x1ac>)
 800fd9a:	f240 425e 	movw	r2, #1118	; 0x45e
 800fd9e:	4960      	ldr	r1, [pc, #384]	; (800ff20 <lwip_netconn_do_delconn+0x1b0>)
 800fda0:	4860      	ldr	r0, [pc, #384]	; (800ff24 <lwip_netconn_do_delconn+0x1b4>)
 800fda2:	f00f fda3 	bl	801f8ec <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800fda6:	7afb      	ldrb	r3, [r7, #11]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d005      	beq.n	800fdb8 <lwip_netconn_do_delconn+0x48>
 800fdac:	7afb      	ldrb	r3, [r7, #11]
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	d002      	beq.n	800fdb8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800fdb2:	7afb      	ldrb	r3, [r7, #11]
 800fdb4:	2b03      	cmp	r3, #3
 800fdb6:	d109      	bne.n	800fdcc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800fdb8:	7afb      	ldrb	r3, [r7, #11]
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d10a      	bne.n	800fdd4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	7f1b      	ldrb	r3, [r3, #28]
 800fdc4:	f003 0304 	and.w	r3, r3, #4
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d103      	bne.n	800fdd4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	22fb      	movs	r2, #251	; 0xfb
 800fdd0:	711a      	strb	r2, [r3, #4]
 800fdd2:	e097      	b.n	800ff04 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800fdd4:	7afb      	ldrb	r3, [r7, #11]
 800fdd6:	2b03      	cmp	r3, #3
 800fdd8:	d10d      	bne.n	800fdf6 <lwip_netconn_do_delconn+0x86>
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	7f1b      	ldrb	r3, [r3, #28]
 800fde0:	f003 0304 	and.w	r3, r3, #4
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d106      	bne.n	800fdf6 <lwip_netconn_do_delconn+0x86>
 800fde8:	4b4c      	ldr	r3, [pc, #304]	; (800ff1c <lwip_netconn_do_delconn+0x1ac>)
 800fdea:	f240 427a 	movw	r2, #1146	; 0x47a
 800fdee:	494e      	ldr	r1, [pc, #312]	; (800ff28 <lwip_netconn_do_delconn+0x1b8>)
 800fdf0:	484c      	ldr	r0, [pc, #304]	; (800ff24 <lwip_netconn_do_delconn+0x1b4>)
 800fdf2:	f00f fd7b 	bl	801f8ec <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7ff fdd1 	bl	800f9a8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d05f      	beq.n	800fed0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe1a:	2b10      	cmp	r3, #16
 800fe1c:	d00d      	beq.n	800fe3a <lwip_netconn_do_delconn+0xca>
 800fe1e:	2b20      	cmp	r3, #32
 800fe20:	d151      	bne.n	800fec6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f00a fdf2 	bl	801aa1c <udp_remove>
          break;
 800fe38:	e046      	b.n	800fec8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	6a1b      	ldr	r3, [r3, #32]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d006      	beq.n	800fe52 <lwip_netconn_do_delconn+0xe2>
 800fe44:	4b35      	ldr	r3, [pc, #212]	; (800ff1c <lwip_netconn_do_delconn+0x1ac>)
 800fe46:	f240 4294 	movw	r2, #1172	; 0x494
 800fe4a:	4938      	ldr	r1, [pc, #224]	; (800ff2c <lwip_netconn_do_delconn+0x1bc>)
 800fe4c:	4835      	ldr	r0, [pc, #212]	; (800ff24 <lwip_netconn_do_delconn+0x1b4>)
 800fe4e:	f00f fd4d 	bl	801f8ec <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	2204      	movs	r2, #4
 800fe58:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2203      	movs	r2, #3
 800fe5e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	68fa      	ldr	r2, [r7, #12]
 800fe66:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	2100      	movs	r1, #0
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7ff fe18 	bl	800faa4 <lwip_netconn_do_close_internal>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d04b      	beq.n	800ff12 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	785b      	ldrb	r3, [r3, #1]
 800fe80:	2b04      	cmp	r3, #4
 800fe82:	d006      	beq.n	800fe92 <lwip_netconn_do_delconn+0x122>
 800fe84:	4b25      	ldr	r3, [pc, #148]	; (800ff1c <lwip_netconn_do_delconn+0x1ac>)
 800fe86:	f240 429a 	movw	r2, #1178	; 0x49a
 800fe8a:	4929      	ldr	r1, [pc, #164]	; (800ff30 <lwip_netconn_do_delconn+0x1c0>)
 800fe8c:	4825      	ldr	r0, [pc, #148]	; (800ff24 <lwip_netconn_do_delconn+0x1b4>)
 800fe8e:	f00f fd2d 	bl	801f8ec <iprintf>
            UNLOCK_TCPIP_CORE();
 800fe92:	4828      	ldr	r0, [pc, #160]	; (800ff34 <lwip_netconn_do_delconn+0x1c4>)
 800fe94:	f00f fab1 	bl	801f3fa <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	330c      	adds	r3, #12
 800fe9e:	2100      	movs	r1, #0
 800fea0:	4618      	mov	r0, r3
 800fea2:	f00f fa10 	bl	801f2c6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800fea6:	4823      	ldr	r0, [pc, #140]	; (800ff34 <lwip_netconn_do_delconn+0x1c4>)
 800fea8:	f00f fa98 	bl	801f3dc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	785b      	ldrb	r3, [r3, #1]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d02d      	beq.n	800ff12 <lwip_netconn_do_delconn+0x1a2>
 800feb6:	4b19      	ldr	r3, [pc, #100]	; (800ff1c <lwip_netconn_do_delconn+0x1ac>)
 800feb8:	f240 429e 	movw	r2, #1182	; 0x49e
 800febc:	491c      	ldr	r1, [pc, #112]	; (800ff30 <lwip_netconn_do_delconn+0x1c0>)
 800febe:	4819      	ldr	r0, [pc, #100]	; (800ff24 <lwip_netconn_do_delconn+0x1b4>)
 800fec0:	f00f fd14 	bl	801f8ec <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800fec4:	e025      	b.n	800ff12 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800fec6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2200      	movs	r2, #0
 800fece:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d007      	beq.n	800feea <lwip_netconn_do_delconn+0x17a>
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee0:	68fa      	ldr	r2, [r7, #12]
 800fee2:	6810      	ldr	r0, [r2, #0]
 800fee4:	2200      	movs	r2, #0
 800fee6:	2100      	movs	r1, #0
 800fee8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d007      	beq.n	800ff04 <lwip_netconn_do_delconn+0x194>
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	6810      	ldr	r0, [r2, #0]
 800fefe:	2200      	movs	r2, #0
 800ff00:	2102      	movs	r1, #2
 800ff02:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	330c      	adds	r3, #12
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f00f fa26 	bl	801f35c <sys_sem_valid>
 800ff10:	e000      	b.n	800ff14 <lwip_netconn_do_delconn+0x1a4>
          return;
 800ff12:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ff14:	3710      	adds	r7, #16
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	08021d00 	.word	0x08021d00
 800ff20:	08022070 	.word	0x08022070
 800ff24:	08021d44 	.word	0x08021d44
 800ff28:	08022084 	.word	0x08022084
 800ff2c:	080220a4 	.word	0x080220a4
 800ff30:	080220c0 	.word	0x080220c0
 800ff34:	200133ac 	.word	0x200133ac

0800ff38 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b088      	sub	sp, #32
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	4613      	mov	r3, r2
 800ff44:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800ff46:	2300      	movs	r3, #0
 800ff48:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800ff4e:	69bb      	ldr	r3, [r7, #24]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d102      	bne.n	800ff5a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800ff54:	f06f 0305 	mvn.w	r3, #5
 800ff58:	e070      	b.n	801003c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	785b      	ldrb	r3, [r3, #1]
 800ff5e:	2b03      	cmp	r3, #3
 800ff60:	d006      	beq.n	800ff70 <lwip_netconn_do_connected+0x38>
 800ff62:	4b38      	ldr	r3, [pc, #224]	; (8010044 <lwip_netconn_do_connected+0x10c>)
 800ff64:	f240 5223 	movw	r2, #1315	; 0x523
 800ff68:	4937      	ldr	r1, [pc, #220]	; (8010048 <lwip_netconn_do_connected+0x110>)
 800ff6a:	4838      	ldr	r0, [pc, #224]	; (801004c <lwip_netconn_do_connected+0x114>)
 800ff6c:	f00f fcbe 	bl	801f8ec <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800ff70:	69bb      	ldr	r3, [r7, #24]
 800ff72:	6a1b      	ldr	r3, [r3, #32]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d10c      	bne.n	800ff92 <lwip_netconn_do_connected+0x5a>
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	7f1b      	ldrb	r3, [r3, #28]
 800ff7c:	f003 0304 	and.w	r3, r3, #4
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d106      	bne.n	800ff92 <lwip_netconn_do_connected+0x5a>
 800ff84:	4b2f      	ldr	r3, [pc, #188]	; (8010044 <lwip_netconn_do_connected+0x10c>)
 800ff86:	f240 5224 	movw	r2, #1316	; 0x524
 800ff8a:	4931      	ldr	r1, [pc, #196]	; (8010050 <lwip_netconn_do_connected+0x118>)
 800ff8c:	482f      	ldr	r0, [pc, #188]	; (801004c <lwip_netconn_do_connected+0x114>)
 800ff8e:	f00f fcad 	bl	801f8ec <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800ff92:	69bb      	ldr	r3, [r7, #24]
 800ff94:	6a1b      	ldr	r3, [r3, #32]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d008      	beq.n	800ffac <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	6a1b      	ldr	r3, [r3, #32]
 800ff9e:	79fa      	ldrb	r2, [r7, #7]
 800ffa0:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	6a1b      	ldr	r3, [r3, #32]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	330c      	adds	r3, #12
 800ffaa:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800ffac:	69bb      	ldr	r3, [r7, #24]
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ffb4:	2b10      	cmp	r3, #16
 800ffb6:	d106      	bne.n	800ffc6 <lwip_netconn_do_connected+0x8e>
 800ffb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d102      	bne.n	800ffc6 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800ffc0:	69b8      	ldr	r0, [r7, #24]
 800ffc2:	f7ff fb91 	bl	800f6e8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800ffc6:	69bb      	ldr	r3, [r7, #24]
 800ffc8:	7f1b      	ldrb	r3, [r3, #28]
 800ffca:	f003 0304 	and.w	r3, r3, #4
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	bf0c      	ite	eq
 800ffd2:	2301      	moveq	r3, #1
 800ffd4:	2300      	movne	r3, #0
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800ffda:	69bb      	ldr	r3, [r7, #24]
 800ffdc:	7f1b      	ldrb	r3, [r3, #28]
 800ffde:	f023 0304 	bic.w	r3, r3, #4
 800ffe2:	b2da      	uxtb	r2, r3
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d002      	beq.n	800fff4 <lwip_netconn_do_connected+0xbc>
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d10c      	bne.n	801000e <lwip_netconn_do_connected+0xd6>
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d102      	bne.n	8010000 <lwip_netconn_do_connected+0xc8>
 800fffa:	69fb      	ldr	r3, [r7, #28]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d006      	beq.n	801000e <lwip_netconn_do_connected+0xd6>
 8010000:	4b10      	ldr	r3, [pc, #64]	; (8010044 <lwip_netconn_do_connected+0x10c>)
 8010002:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8010006:	4913      	ldr	r1, [pc, #76]	; (8010054 <lwip_netconn_do_connected+0x11c>)
 8010008:	4810      	ldr	r0, [pc, #64]	; (801004c <lwip_netconn_do_connected+0x114>)
 801000a:	f00f fc6f 	bl	801f8ec <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 801000e:	69bb      	ldr	r3, [r7, #24]
 8010010:	2200      	movs	r2, #0
 8010012:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8010014:	69bb      	ldr	r3, [r7, #24]
 8010016:	2200      	movs	r2, #0
 8010018:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001e:	2b00      	cmp	r3, #0
 8010020:	d005      	beq.n	801002e <lwip_netconn_do_connected+0xf6>
 8010022:	69bb      	ldr	r3, [r7, #24]
 8010024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010026:	2200      	movs	r2, #0
 8010028:	2102      	movs	r1, #2
 801002a:	69b8      	ldr	r0, [r7, #24]
 801002c:	4798      	blx	r3

  if (was_blocking) {
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d002      	beq.n	801003a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8010034:	69f8      	ldr	r0, [r7, #28]
 8010036:	f00f f977 	bl	801f328 <sys_sem_signal>
  }
  return ERR_OK;
 801003a:	2300      	movs	r3, #0
}
 801003c:	4618      	mov	r0, r3
 801003e:	3720      	adds	r7, #32
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	08021d00 	.word	0x08021d00
 8010048:	080220c8 	.word	0x080220c8
 801004c:	08021d44 	.word	0x08021d44
 8010050:	080220e8 	.word	0x080220e8
 8010054:	08022128 	.word	0x08022128

08010058 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b086      	sub	sp, #24
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d102      	bne.n	8010074 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 801006e:	23f1      	movs	r3, #241	; 0xf1
 8010070:	75fb      	strb	r3, [r7, #23]
 8010072:	e09b      	b.n	80101ac <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801007e:	2b10      	cmp	r3, #16
 8010080:	d00f      	beq.n	80100a2 <lwip_netconn_do_connect+0x4a>
 8010082:	2b20      	cmp	r3, #32
 8010084:	f040 8087 	bne.w	8010196 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	6858      	ldr	r0, [r3, #4]
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	6899      	ldr	r1, [r3, #8]
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	899b      	ldrh	r3, [r3, #12]
 8010096:	461a      	mov	r2, r3
 8010098:	f00a fc0a 	bl	801a8b0 <udp_connect>
 801009c:	4603      	mov	r3, r0
 801009e:	75fb      	strb	r3, [r7, #23]
        break;
 80100a0:	e084      	b.n	80101ac <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	785b      	ldrb	r3, [r3, #1]
 80100a8:	2b03      	cmp	r3, #3
 80100aa:	d102      	bne.n	80100b2 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 80100ac:	23f7      	movs	r3, #247	; 0xf7
 80100ae:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 80100b0:	e07b      	b.n	80101aa <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	785b      	ldrb	r3, [r3, #1]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d002      	beq.n	80100c2 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 80100bc:	23f6      	movs	r3, #246	; 0xf6
 80100be:	75fb      	strb	r3, [r7, #23]
        break;
 80100c0:	e073      	b.n	80101aa <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7ff fb0e 	bl	800f6e8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	6858      	ldr	r0, [r3, #4]
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	6899      	ldr	r1, [r3, #8]
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	899a      	ldrh	r2, [r3, #12]
 80100da:	4b38      	ldr	r3, [pc, #224]	; (80101bc <lwip_netconn_do_connect+0x164>)
 80100dc:	f004 fa54 	bl	8014588 <tcp_connect>
 80100e0:	4603      	mov	r3, r0
 80100e2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 80100e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d15e      	bne.n	80101aa <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	7f1b      	ldrb	r3, [r3, #28]
 80100f2:	f003 0302 	and.w	r3, r3, #2
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	bf14      	ite	ne
 80100fa:	2301      	movne	r3, #1
 80100fc:	2300      	moveq	r3, #0
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	2203      	movs	r2, #3
 8010108:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 801010a:	7bfb      	ldrb	r3, [r7, #15]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d009      	beq.n	8010124 <lwip_netconn_do_connect+0xcc>
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	7f1a      	ldrb	r2, [r3, #28]
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f042 0204 	orr.w	r2, r2, #4
 801011e:	b2d2      	uxtb	r2, r2
 8010120:	771a      	strb	r2, [r3, #28]
 8010122:	e008      	b.n	8010136 <lwip_netconn_do_connect+0xde>
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	7f1a      	ldrb	r2, [r3, #28]
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f022 0204 	bic.w	r2, r2, #4
 8010132:	b2d2      	uxtb	r2, r2
 8010134:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8010136:	7bfb      	ldrb	r3, [r7, #15]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d002      	beq.n	8010142 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 801013c:	23fb      	movs	r3, #251	; 0xfb
 801013e:	75fb      	strb	r3, [r7, #23]
        break;
 8010140:	e033      	b.n	80101aa <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	693a      	ldr	r2, [r7, #16]
 8010148:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	785b      	ldrb	r3, [r3, #1]
 8010150:	2b03      	cmp	r3, #3
 8010152:	d006      	beq.n	8010162 <lwip_netconn_do_connect+0x10a>
 8010154:	4b1a      	ldr	r3, [pc, #104]	; (80101c0 <lwip_netconn_do_connect+0x168>)
 8010156:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 801015a:	491a      	ldr	r1, [pc, #104]	; (80101c4 <lwip_netconn_do_connect+0x16c>)
 801015c:	481a      	ldr	r0, [pc, #104]	; (80101c8 <lwip_netconn_do_connect+0x170>)
 801015e:	f00f fbc5 	bl	801f8ec <iprintf>
              UNLOCK_TCPIP_CORE();
 8010162:	481a      	ldr	r0, [pc, #104]	; (80101cc <lwip_netconn_do_connect+0x174>)
 8010164:	f00f f949 	bl	801f3fa <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	330c      	adds	r3, #12
 801016e:	2100      	movs	r1, #0
 8010170:	4618      	mov	r0, r3
 8010172:	f00f f8a8 	bl	801f2c6 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8010176:	4815      	ldr	r0, [pc, #84]	; (80101cc <lwip_netconn_do_connect+0x174>)
 8010178:	f00f f930 	bl	801f3dc <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	785b      	ldrb	r3, [r3, #1]
 8010182:	2b03      	cmp	r3, #3
 8010184:	d116      	bne.n	80101b4 <lwip_netconn_do_connect+0x15c>
 8010186:	4b0e      	ldr	r3, [pc, #56]	; (80101c0 <lwip_netconn_do_connect+0x168>)
 8010188:	f240 5274 	movw	r2, #1396	; 0x574
 801018c:	490d      	ldr	r1, [pc, #52]	; (80101c4 <lwip_netconn_do_connect+0x16c>)
 801018e:	480e      	ldr	r0, [pc, #56]	; (80101c8 <lwip_netconn_do_connect+0x170>)
 8010190:	f00f fbac 	bl	801f8ec <iprintf>
              return;
 8010194:	e00e      	b.n	80101b4 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8010196:	4b0a      	ldr	r3, [pc, #40]	; (80101c0 <lwip_netconn_do_connect+0x168>)
 8010198:	f240 527d 	movw	r2, #1405	; 0x57d
 801019c:	490c      	ldr	r1, [pc, #48]	; (80101d0 <lwip_netconn_do_connect+0x178>)
 801019e:	480a      	ldr	r0, [pc, #40]	; (80101c8 <lwip_netconn_do_connect+0x170>)
 80101a0:	f00f fba4 	bl	801f8ec <iprintf>
 80101a4:	23fa      	movs	r3, #250	; 0xfa
 80101a6:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 80101a8:	e000      	b.n	80101ac <lwip_netconn_do_connect+0x154>
        break;
 80101aa:	bf00      	nop
    }
  }
  msg->err = err;
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	7dfa      	ldrb	r2, [r7, #23]
 80101b0:	711a      	strb	r2, [r3, #4]
 80101b2:	e000      	b.n	80101b6 <lwip_netconn_do_connect+0x15e>
              return;
 80101b4:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 80101b6:	3718      	adds	r7, #24
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	0800ff39 	.word	0x0800ff39
 80101c0:	08021d00 	.word	0x08021d00
 80101c4:	080220c0 	.word	0x080220c0
 80101c8:	08021d44 	.word	0x08021d44
 80101cc:	200133ac 	.word	0x200133ac
 80101d0:	08022148 	.word	0x08022148

080101d4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b086      	sub	sp, #24
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	2200      	movs	r2, #0
 80101e4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d022      	beq.n	8010236 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101fa:	2b10      	cmp	r3, #16
 80101fc:	d11b      	bne.n	8010236 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801020a:	d202      	bcs.n	8010212 <lwip_netconn_do_recv+0x3e>
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	b29b      	uxth	r3, r3
 8010210:	e001      	b.n	8010216 <lwip_netconn_do_recv+0x42>
 8010212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010216:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	89fa      	ldrh	r2, [r7, #14]
 8010220:	4611      	mov	r1, r2
 8010222:	4618      	mov	r0, r3
 8010224:	f004 f91a 	bl	801445c <tcp_recved>
        remaining -= recved;
 8010228:	89fb      	ldrh	r3, [r7, #14]
 801022a:	697a      	ldr	r2, [r7, #20]
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d1e6      	bne.n	8010204 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010236:	bf00      	nop
 8010238:	3718      	adds	r7, #24
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
	...

08010240 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b088      	sub	sp, #32
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	460b      	mov	r3, r1
 801024a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801024c:	2300      	movs	r3, #0
 801024e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d106      	bne.n	8010264 <lwip_netconn_do_writemore+0x24>
 8010256:	4b96      	ldr	r3, [pc, #600]	; (80104b0 <lwip_netconn_do_writemore+0x270>)
 8010258:	f240 6273 	movw	r2, #1651	; 0x673
 801025c:	4995      	ldr	r1, [pc, #596]	; (80104b4 <lwip_netconn_do_writemore+0x274>)
 801025e:	4896      	ldr	r0, [pc, #600]	; (80104b8 <lwip_netconn_do_writemore+0x278>)
 8010260:	f00f fb44 	bl	801f8ec <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	785b      	ldrb	r3, [r3, #1]
 8010268:	2b01      	cmp	r3, #1
 801026a:	d006      	beq.n	801027a <lwip_netconn_do_writemore+0x3a>
 801026c:	4b90      	ldr	r3, [pc, #576]	; (80104b0 <lwip_netconn_do_writemore+0x270>)
 801026e:	f240 6274 	movw	r2, #1652	; 0x674
 8010272:	4992      	ldr	r1, [pc, #584]	; (80104bc <lwip_netconn_do_writemore+0x27c>)
 8010274:	4890      	ldr	r0, [pc, #576]	; (80104b8 <lwip_netconn_do_writemore+0x278>)
 8010276:	f00f fb39 	bl	801f8ec <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6a1b      	ldr	r3, [r3, #32]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d106      	bne.n	8010290 <lwip_netconn_do_writemore+0x50>
 8010282:	4b8b      	ldr	r3, [pc, #556]	; (80104b0 <lwip_netconn_do_writemore+0x270>)
 8010284:	f240 6275 	movw	r2, #1653	; 0x675
 8010288:	498d      	ldr	r1, [pc, #564]	; (80104c0 <lwip_netconn_do_writemore+0x280>)
 801028a:	488b      	ldr	r0, [pc, #556]	; (80104b8 <lwip_netconn_do_writemore+0x278>)
 801028c:	f00f fb2e 	bl	801f8ec <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d106      	bne.n	80102a6 <lwip_netconn_do_writemore+0x66>
 8010298:	4b85      	ldr	r3, [pc, #532]	; (80104b0 <lwip_netconn_do_writemore+0x270>)
 801029a:	f240 6276 	movw	r2, #1654	; 0x676
 801029e:	4989      	ldr	r1, [pc, #548]	; (80104c4 <lwip_netconn_do_writemore+0x284>)
 80102a0:	4885      	ldr	r0, [pc, #532]	; (80104b8 <lwip_netconn_do_writemore+0x278>)
 80102a2:	f00f fb23 	bl	801f8ec <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6a1b      	ldr	r3, [r3, #32]
 80102aa:	699a      	ldr	r2, [r3, #24]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6a1b      	ldr	r3, [r3, #32]
 80102b0:	695b      	ldr	r3, [r3, #20]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d306      	bcc.n	80102c4 <lwip_netconn_do_writemore+0x84>
 80102b6:	4b7e      	ldr	r3, [pc, #504]	; (80104b0 <lwip_netconn_do_writemore+0x270>)
 80102b8:	f240 6277 	movw	r2, #1655	; 0x677
 80102bc:	4982      	ldr	r1, [pc, #520]	; (80104c8 <lwip_netconn_do_writemore+0x288>)
 80102be:	487e      	ldr	r0, [pc, #504]	; (80104b8 <lwip_netconn_do_writemore+0x278>)
 80102c0:	f00f fb14 	bl	801f8ec <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6a1b      	ldr	r3, [r3, #32]
 80102c8:	899b      	ldrh	r3, [r3, #12]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d106      	bne.n	80102dc <lwip_netconn_do_writemore+0x9c>
 80102ce:	4b78      	ldr	r3, [pc, #480]	; (80104b0 <lwip_netconn_do_writemore+0x270>)
 80102d0:	f240 6279 	movw	r2, #1657	; 0x679
 80102d4:	497d      	ldr	r1, [pc, #500]	; (80104cc <lwip_netconn_do_writemore+0x28c>)
 80102d6:	4878      	ldr	r0, [pc, #480]	; (80104b8 <lwip_netconn_do_writemore+0x278>)
 80102d8:	f00f fb08 	bl	801f8ec <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6a1b      	ldr	r3, [r3, #32]
 80102e0:	7f1b      	ldrb	r3, [r3, #28]
 80102e2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	7f1b      	ldrb	r3, [r3, #28]
 80102e8:	f003 0302 	and.w	r3, r3, #2
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d104      	bne.n	80102fa <lwip_netconn_do_writemore+0xba>
 80102f0:	7ebb      	ldrb	r3, [r7, #26]
 80102f2:	f003 0304 	and.w	r3, r3, #4
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d001      	beq.n	80102fe <lwip_netconn_do_writemore+0xbe>
 80102fa:	2301      	movs	r3, #1
 80102fc:	e000      	b.n	8010300 <lwip_netconn_do_writemore+0xc0>
 80102fe:	2300      	movs	r3, #0
 8010300:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6a1b      	ldr	r3, [r3, #32]
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6a1b      	ldr	r3, [r3, #32]
 801030e:	691b      	ldr	r3, [r3, #16]
 8010310:	4413      	add	r3, r2
 8010312:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6a1b      	ldr	r3, [r3, #32]
 8010318:	689b      	ldr	r3, [r3, #8]
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6a1b      	ldr	r3, [r3, #32]
 8010320:	691b      	ldr	r3, [r3, #16]
 8010322:	1ad3      	subs	r3, r2, r3
 8010324:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801032c:	d307      	bcc.n	801033e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801032e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010332:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010334:	7ebb      	ldrb	r3, [r7, #26]
 8010336:	f043 0302 	orr.w	r3, r3, #2
 801033a:	76bb      	strb	r3, [r7, #26]
 801033c:	e001      	b.n	8010342 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801034a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801034c:	89fa      	ldrh	r2, [r7, #14]
 801034e:	8bbb      	ldrh	r3, [r7, #28]
 8010350:	429a      	cmp	r2, r3
 8010352:	d216      	bcs.n	8010382 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010354:	89fb      	ldrh	r3, [r7, #14]
 8010356:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010358:	7e3b      	ldrb	r3, [r7, #24]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d00d      	beq.n	801037a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801035e:	8bbb      	ldrh	r3, [r7, #28]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d10e      	bne.n	8010382 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6a1b      	ldr	r3, [r3, #32]
 8010368:	699b      	ldr	r3, [r3, #24]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d102      	bne.n	8010374 <lwip_netconn_do_writemore+0x134>
 801036e:	f06f 0306 	mvn.w	r3, #6
 8010372:	e000      	b.n	8010376 <lwip_netconn_do_writemore+0x136>
 8010374:	2300      	movs	r3, #0
 8010376:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010378:	e07d      	b.n	8010476 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801037a:	7ebb      	ldrb	r3, [r7, #26]
 801037c:	f043 0302 	orr.w	r3, r3, #2
 8010380:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6a1b      	ldr	r3, [r3, #32]
 8010386:	691a      	ldr	r2, [r3, #16]
 8010388:	8bbb      	ldrh	r3, [r7, #28]
 801038a:	441a      	add	r2, r3
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6a1b      	ldr	r3, [r3, #32]
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	429a      	cmp	r2, r3
 8010396:	d906      	bls.n	80103a6 <lwip_netconn_do_writemore+0x166>
 8010398:	4b45      	ldr	r3, [pc, #276]	; (80104b0 <lwip_netconn_do_writemore+0x270>)
 801039a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801039e:	494c      	ldr	r1, [pc, #304]	; (80104d0 <lwip_netconn_do_writemore+0x290>)
 80103a0:	4845      	ldr	r0, [pc, #276]	; (80104b8 <lwip_netconn_do_writemore+0x278>)
 80103a2:	f00f faa3 	bl	801f8ec <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80103a6:	8bbb      	ldrh	r3, [r7, #28]
 80103a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d103      	bne.n	80103b8 <lwip_netconn_do_writemore+0x178>
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103b6:	d209      	bcs.n	80103cc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80103bc:	8bba      	ldrh	r2, [r7, #28]
 80103be:	429a      	cmp	r2, r3
 80103c0:	d10b      	bne.n	80103da <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6a1b      	ldr	r3, [r3, #32]
 80103c6:	899b      	ldrh	r3, [r3, #12]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d906      	bls.n	80103da <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80103cc:	2301      	movs	r3, #1
 80103ce:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80103d0:	7ebb      	ldrb	r3, [r7, #26]
 80103d2:	f043 0302 	orr.w	r3, r3, #2
 80103d6:	76bb      	strb	r3, [r7, #26]
 80103d8:	e001      	b.n	80103de <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80103da:	2300      	movs	r3, #0
 80103dc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6858      	ldr	r0, [r3, #4]
 80103e2:	7ebb      	ldrb	r3, [r7, #26]
 80103e4:	8bba      	ldrh	r2, [r7, #28]
 80103e6:	6979      	ldr	r1, [r7, #20]
 80103e8:	f007 ff54 	bl	8018294 <tcp_write>
 80103ec:	4603      	mov	r3, r0
 80103ee:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80103f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d12c      	bne.n	8010452 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6a1b      	ldr	r3, [r3, #32]
 80103fc:	6999      	ldr	r1, [r3, #24]
 80103fe:	8bba      	ldrh	r2, [r7, #28]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6a1b      	ldr	r3, [r3, #32]
 8010404:	440a      	add	r2, r1
 8010406:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6a1b      	ldr	r3, [r3, #32]
 801040c:	6919      	ldr	r1, [r3, #16]
 801040e:	8bba      	ldrh	r2, [r7, #28]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6a1b      	ldr	r3, [r3, #32]
 8010414:	440a      	add	r2, r1
 8010416:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6a1b      	ldr	r3, [r3, #32]
 801041c:	691a      	ldr	r2, [r3, #16]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a1b      	ldr	r3, [r3, #32]
 8010422:	689b      	ldr	r3, [r3, #8]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	429a      	cmp	r2, r3
 8010428:	d113      	bne.n	8010452 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6a1b      	ldr	r3, [r3, #32]
 801042e:	899a      	ldrh	r2, [r3, #12]
 8010430:	3a01      	subs	r2, #1
 8010432:	b292      	uxth	r2, r2
 8010434:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6a1b      	ldr	r3, [r3, #32]
 801043a:	899b      	ldrh	r3, [r3, #12]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d008      	beq.n	8010452 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6a1b      	ldr	r3, [r3, #32]
 8010444:	689a      	ldr	r2, [r3, #8]
 8010446:	3208      	adds	r2, #8
 8010448:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6a1b      	ldr	r3, [r3, #32]
 801044e:	2200      	movs	r2, #0
 8010450:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010452:	7e7b      	ldrb	r3, [r7, #25]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d004      	beq.n	8010462 <lwip_netconn_do_writemore+0x222>
 8010458:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801045c:	2b00      	cmp	r3, #0
 801045e:	f43f af50 	beq.w	8010302 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010462:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d004      	beq.n	8010474 <lwip_netconn_do_writemore+0x234>
 801046a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801046e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010472:	d146      	bne.n	8010502 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010474:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010476:	7e3b      	ldrb	r3, [r7, #24]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d02b      	beq.n	80104d4 <lwip_netconn_do_writemore+0x294>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6a1b      	ldr	r3, [r3, #32]
 8010480:	699a      	ldr	r2, [r3, #24]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6a1b      	ldr	r3, [r3, #32]
 8010486:	695b      	ldr	r3, [r3, #20]
 8010488:	429a      	cmp	r2, r3
 801048a:	d223      	bcs.n	80104d4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010490:	2b00      	cmp	r3, #0
 8010492:	d005      	beq.n	80104a0 <lwip_netconn_do_writemore+0x260>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010498:	2200      	movs	r2, #0
 801049a:	2103      	movs	r1, #3
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	7f1b      	ldrb	r3, [r3, #28]
 80104a4:	f043 0310 	orr.w	r3, r3, #16
 80104a8:	b2da      	uxtb	r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	771a      	strb	r2, [r3, #28]
 80104ae:	e028      	b.n	8010502 <lwip_netconn_do_writemore+0x2c2>
 80104b0:	08021d00 	.word	0x08021d00
 80104b4:	08021e58 	.word	0x08021e58
 80104b8:	08021d44 	.word	0x08021d44
 80104bc:	08022160 	.word	0x08022160
 80104c0:	08021e68 	.word	0x08021e68
 80104c4:	08022180 	.word	0x08022180
 80104c8:	08022198 	.word	0x08022198
 80104cc:	080221d8 	.word	0x080221d8
 80104d0:	08022200 	.word	0x08022200
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80104dc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80104e0:	d305      	bcc.n	80104ee <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80104ea:	2b04      	cmp	r3, #4
 80104ec:	d909      	bls.n	8010502 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d005      	beq.n	8010502 <lwip_netconn_do_writemore+0x2c2>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104fa:	2200      	movs	r2, #0
 80104fc:	2103      	movs	r1, #3
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010502:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d11d      	bne.n	8010546 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6a1b      	ldr	r3, [r3, #32]
 801050e:	699a      	ldr	r2, [r3, #24]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6a1b      	ldr	r3, [r3, #32]
 8010514:	695b      	ldr	r3, [r3, #20]
 8010516:	429a      	cmp	r2, r3
 8010518:	d002      	beq.n	8010520 <lwip_netconn_do_writemore+0x2e0>
 801051a:	7e3b      	ldrb	r3, [r7, #24]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d001      	beq.n	8010524 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010520:	2301      	movs	r3, #1
 8010522:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	4618      	mov	r0, r3
 801052a:	f008 fc9d 	bl	8018e68 <tcp_output>
 801052e:	4603      	mov	r3, r0
 8010530:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010532:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010536:	f113 0f04 	cmn.w	r3, #4
 801053a:	d12c      	bne.n	8010596 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801053c:	7b3b      	ldrb	r3, [r7, #12]
 801053e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010540:	2301      	movs	r3, #1
 8010542:	76fb      	strb	r3, [r7, #27]
 8010544:	e027      	b.n	8010596 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010546:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801054a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801054e:	d120      	bne.n	8010592 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	4618      	mov	r0, r3
 8010556:	f008 fc87 	bl	8018e68 <tcp_output>
 801055a:	4603      	mov	r3, r0
 801055c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801055e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010562:	f113 0f04 	cmn.w	r3, #4
 8010566:	d104      	bne.n	8010572 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010568:	7b7b      	ldrb	r3, [r7, #13]
 801056a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801056c:	2301      	movs	r3, #1
 801056e:	76fb      	strb	r3, [r7, #27]
 8010570:	e011      	b.n	8010596 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010572:	7e3b      	ldrb	r3, [r7, #24]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d00e      	beq.n	8010596 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6a1b      	ldr	r3, [r3, #32]
 801057c:	699b      	ldr	r3, [r3, #24]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d102      	bne.n	8010588 <lwip_netconn_do_writemore+0x348>
 8010582:	f06f 0306 	mvn.w	r3, #6
 8010586:	e000      	b.n	801058a <lwip_netconn_do_writemore+0x34a>
 8010588:	2300      	movs	r3, #0
 801058a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801058c:	2301      	movs	r3, #1
 801058e:	76fb      	strb	r3, [r7, #27]
 8010590:	e001      	b.n	8010596 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010592:	2301      	movs	r3, #1
 8010594:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010596:	7efb      	ldrb	r3, [r7, #27]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d015      	beq.n	80105c8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6a1b      	ldr	r3, [r3, #32]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	330c      	adds	r3, #12
 80105a4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	7ffa      	ldrb	r2, [r7, #31]
 80105ac:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2200      	movs	r2, #0
 80105b2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80105ba:	78fb      	ldrb	r3, [r7, #3]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d006      	beq.n	80105ce <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80105c0:	68b8      	ldr	r0, [r7, #8]
 80105c2:	f00e feb1 	bl	801f328 <sys_sem_signal>
 80105c6:	e002      	b.n	80105ce <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80105c8:	f04f 33ff 	mov.w	r3, #4294967295
 80105cc:	e000      	b.n	80105d0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80105ce:	2300      	movs	r3, #0
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3720      	adds	r7, #32
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fe fd04 	bl	800eff6 <netconn_err>
 80105ee:	4603      	mov	r3, r0
 80105f0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80105f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d166      	bne.n	80106c8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010604:	2b10      	cmp	r3, #16
 8010606:	d15d      	bne.n	80106c4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	785b      	ldrb	r3, [r3, #1]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d002      	beq.n	8010618 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010612:	23fb      	movs	r3, #251	; 0xfb
 8010614:	73fb      	strb	r3, [r7, #15]
 8010616:	e057      	b.n	80106c8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d04d      	beq.n	80106be <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2201      	movs	r2, #1
 8010628:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	6a1b      	ldr	r3, [r3, #32]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d006      	beq.n	8010642 <lwip_netconn_do_write+0x6a>
 8010634:	4b28      	ldr	r3, [pc, #160]	; (80106d8 <lwip_netconn_do_write+0x100>)
 8010636:	f240 7223 	movw	r2, #1827	; 0x723
 801063a:	4928      	ldr	r1, [pc, #160]	; (80106dc <lwip_netconn_do_write+0x104>)
 801063c:	4828      	ldr	r0, [pc, #160]	; (80106e0 <lwip_netconn_do_write+0x108>)
 801063e:	f00f f955 	bl	801f8ec <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	695b      	ldr	r3, [r3, #20]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d106      	bne.n	8010658 <lwip_netconn_do_write+0x80>
 801064a:	4b23      	ldr	r3, [pc, #140]	; (80106d8 <lwip_netconn_do_write+0x100>)
 801064c:	f240 7224 	movw	r2, #1828	; 0x724
 8010650:	4924      	ldr	r1, [pc, #144]	; (80106e4 <lwip_netconn_do_write+0x10c>)
 8010652:	4823      	ldr	r0, [pc, #140]	; (80106e0 <lwip_netconn_do_write+0x108>)
 8010654:	f00f f94a 	bl	801f8ec <iprintf>
        msg->conn->current_msg = msg;
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	68ba      	ldr	r2, [r7, #8]
 801065e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	2100      	movs	r1, #0
 8010666:	4618      	mov	r0, r3
 8010668:	f7ff fdea 	bl	8010240 <lwip_netconn_do_writemore>
 801066c:	4603      	mov	r3, r0
 801066e:	2b00      	cmp	r3, #0
 8010670:	d02e      	beq.n	80106d0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	785b      	ldrb	r3, [r3, #1]
 8010678:	2b01      	cmp	r3, #1
 801067a:	d006      	beq.n	801068a <lwip_netconn_do_write+0xb2>
 801067c:	4b16      	ldr	r3, [pc, #88]	; (80106d8 <lwip_netconn_do_write+0x100>)
 801067e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010682:	4919      	ldr	r1, [pc, #100]	; (80106e8 <lwip_netconn_do_write+0x110>)
 8010684:	4816      	ldr	r0, [pc, #88]	; (80106e0 <lwip_netconn_do_write+0x108>)
 8010686:	f00f f931 	bl	801f8ec <iprintf>
          UNLOCK_TCPIP_CORE();
 801068a:	4818      	ldr	r0, [pc, #96]	; (80106ec <lwip_netconn_do_write+0x114>)
 801068c:	f00e feb5 	bl	801f3fa <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	330c      	adds	r3, #12
 8010696:	2100      	movs	r1, #0
 8010698:	4618      	mov	r0, r3
 801069a:	f00e fe14 	bl	801f2c6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 801069e:	4813      	ldr	r0, [pc, #76]	; (80106ec <lwip_netconn_do_write+0x114>)
 80106a0:	f00e fe9c 	bl	801f3dc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	785b      	ldrb	r3, [r3, #1]
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d110      	bne.n	80106d0 <lwip_netconn_do_write+0xf8>
 80106ae:	4b0a      	ldr	r3, [pc, #40]	; (80106d8 <lwip_netconn_do_write+0x100>)
 80106b0:	f240 722c 	movw	r2, #1836	; 0x72c
 80106b4:	490c      	ldr	r1, [pc, #48]	; (80106e8 <lwip_netconn_do_write+0x110>)
 80106b6:	480a      	ldr	r0, [pc, #40]	; (80106e0 <lwip_netconn_do_write+0x108>)
 80106b8:	f00f f918 	bl	801f8ec <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80106bc:	e008      	b.n	80106d0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80106be:	23f5      	movs	r3, #245	; 0xf5
 80106c0:	73fb      	strb	r3, [r7, #15]
 80106c2:	e001      	b.n	80106c8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80106c4:	23fa      	movs	r3, #250	; 0xfa
 80106c6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	7bfa      	ldrb	r2, [r7, #15]
 80106cc:	711a      	strb	r2, [r3, #4]
 80106ce:	e000      	b.n	80106d2 <lwip_netconn_do_write+0xfa>
        return;
 80106d0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80106d2:	3710      	adds	r7, #16
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	08021d00 	.word	0x08021d00
 80106dc:	080220a4 	.word	0x080220a4
 80106e0:	08021d44 	.word	0x08021d44
 80106e4:	0802222c 	.word	0x0802222c
 80106e8:	080220c0 	.word	0x080220c0
 80106ec:	200133ac 	.word	0x200133ac

080106f0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	785b      	ldrb	r3, [r3, #1]
 8010702:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d069      	beq.n	80107e2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010718:	2b10      	cmp	r3, #16
 801071a:	d162      	bne.n	80107e2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010720:	2b03      	cmp	r3, #3
 8010722:	d002      	beq.n	801072a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010724:	7afb      	ldrb	r3, [r7, #11]
 8010726:	2b02      	cmp	r3, #2
 8010728:	d05b      	beq.n	80107e2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801072a:	7afb      	ldrb	r3, [r7, #11]
 801072c:	2b03      	cmp	r3, #3
 801072e:	d103      	bne.n	8010738 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	22f5      	movs	r2, #245	; 0xf5
 8010734:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010736:	e059      	b.n	80107ec <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010738:	7afb      	ldrb	r3, [r7, #11]
 801073a:	2b01      	cmp	r3, #1
 801073c:	d103      	bne.n	8010746 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	22fb      	movs	r2, #251	; 0xfb
 8010742:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010744:	e052      	b.n	80107ec <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	7a1b      	ldrb	r3, [r3, #8]
 801074a:	f003 0301 	and.w	r3, r3, #1
 801074e:	2b00      	cmp	r3, #0
 8010750:	d004      	beq.n	801075c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4618      	mov	r0, r3
 8010758:	f7ff f926 	bl	800f9a8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	6a1b      	ldr	r3, [r3, #32]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d006      	beq.n	8010774 <lwip_netconn_do_close+0x84>
 8010766:	4b23      	ldr	r3, [pc, #140]	; (80107f4 <lwip_netconn_do_close+0x104>)
 8010768:	f240 72bd 	movw	r2, #1981	; 0x7bd
 801076c:	4922      	ldr	r1, [pc, #136]	; (80107f8 <lwip_netconn_do_close+0x108>)
 801076e:	4823      	ldr	r0, [pc, #140]	; (80107fc <lwip_netconn_do_close+0x10c>)
 8010770:	f00f f8bc 	bl	801f8ec <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	2204      	movs	r2, #4
 801077a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	68fa      	ldr	r2, [r7, #12]
 8010782:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2100      	movs	r1, #0
 801078a:	4618      	mov	r0, r3
 801078c:	f7ff f98a 	bl	800faa4 <lwip_netconn_do_close_internal>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d029      	beq.n	80107ea <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	785b      	ldrb	r3, [r3, #1]
 801079c:	2b04      	cmp	r3, #4
 801079e:	d006      	beq.n	80107ae <lwip_netconn_do_close+0xbe>
 80107a0:	4b14      	ldr	r3, [pc, #80]	; (80107f4 <lwip_netconn_do_close+0x104>)
 80107a2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80107a6:	4916      	ldr	r1, [pc, #88]	; (8010800 <lwip_netconn_do_close+0x110>)
 80107a8:	4814      	ldr	r0, [pc, #80]	; (80107fc <lwip_netconn_do_close+0x10c>)
 80107aa:	f00f f89f 	bl	801f8ec <iprintf>
        UNLOCK_TCPIP_CORE();
 80107ae:	4815      	ldr	r0, [pc, #84]	; (8010804 <lwip_netconn_do_close+0x114>)
 80107b0:	f00e fe23 	bl	801f3fa <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	330c      	adds	r3, #12
 80107ba:	2100      	movs	r1, #0
 80107bc:	4618      	mov	r0, r3
 80107be:	f00e fd82 	bl	801f2c6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80107c2:	4810      	ldr	r0, [pc, #64]	; (8010804 <lwip_netconn_do_close+0x114>)
 80107c4:	f00e fe0a 	bl	801f3dc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	785b      	ldrb	r3, [r3, #1]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d00b      	beq.n	80107ea <lwip_netconn_do_close+0xfa>
 80107d2:	4b08      	ldr	r3, [pc, #32]	; (80107f4 <lwip_netconn_do_close+0x104>)
 80107d4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80107d8:	4909      	ldr	r1, [pc, #36]	; (8010800 <lwip_netconn_do_close+0x110>)
 80107da:	4808      	ldr	r0, [pc, #32]	; (80107fc <lwip_netconn_do_close+0x10c>)
 80107dc:	f00f f886 	bl	801f8ec <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80107e0:	e003      	b.n	80107ea <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	22f5      	movs	r2, #245	; 0xf5
 80107e6:	711a      	strb	r2, [r3, #4]
 80107e8:	e000      	b.n	80107ec <lwip_netconn_do_close+0xfc>
      return;
 80107ea:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80107ec:	3710      	adds	r7, #16
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	08021d00 	.word	0x08021d00
 80107f8:	080220a4 	.word	0x080220a4
 80107fc:	08021d44 	.word	0x08021d44
 8010800:	080220c0 	.word	0x080220c0
 8010804:	200133ac 	.word	0x200133ac

08010808 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b086      	sub	sp, #24
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d104      	bne.n	8010828 <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	22fa      	movs	r2, #250	; 0xfa
 8010824:	701a      	strb	r2, [r3, #0]
 8010826:	e008      	b.n	801083a <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	2200      	movs	r2, #0
 801082e:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	6812      	ldr	r2, [r2, #0]
 8010838:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	4618      	mov	r0, r3
 8010840:	f00e fd72 	bl	801f328 <sys_sem_signal>
}
 8010844:	bf00      	nop
 8010846:	3718      	adds	r7, #24
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 801084c:	b590      	push	{r4, r7, lr}
 801084e:	b087      	sub	sp, #28
 8010850:	af02      	add	r7, sp, #8
 8010852:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 8010858:	2300      	movs	r3, #0
 801085a:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	6818      	ldr	r0, [r3, #0]
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	6859      	ldr	r1, [r3, #4]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	68dc      	ldr	r4, [r3, #12]
 8010868:	7afb      	ldrb	r3, [r7, #11]
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	4a15      	ldr	r2, [pc, #84]	; (80108c4 <lwip_netconn_do_gethostbyname+0x78>)
 8010870:	f001 fa42 	bl	8011cf8 <dns_gethostbyname_addrtype>
 8010874:	4603      	mov	r3, r0
 8010876:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	68db      	ldr	r3, [r3, #12]
 801087c:	f993 3000 	ldrsb.w	r3, [r3]
 8010880:	f113 0f05 	cmn.w	r3, #5
 8010884:	d119      	bne.n	80108ba <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 8010886:	4810      	ldr	r0, [pc, #64]	; (80108c8 <lwip_netconn_do_gethostbyname+0x7c>)
 8010888:	f00e fdb7 	bl	801f3fa <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	2100      	movs	r1, #0
 8010892:	4618      	mov	r0, r3
 8010894:	f00e fd17 	bl	801f2c6 <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 8010898:	480b      	ldr	r0, [pc, #44]	; (80108c8 <lwip_netconn_do_gethostbyname+0x7c>)
 801089a:	f00e fd9f 	bl	801f3dc <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	f993 3000 	ldrsb.w	r3, [r3]
 80108a6:	f113 0f05 	cmn.w	r3, #5
 80108aa:	d106      	bne.n	80108ba <lwip_netconn_do_gethostbyname+0x6e>
 80108ac:	4b07      	ldr	r3, [pc, #28]	; (80108cc <lwip_netconn_do_gethostbyname+0x80>)
 80108ae:	f640 0271 	movw	r2, #2161	; 0x871
 80108b2:	4907      	ldr	r1, [pc, #28]	; (80108d0 <lwip_netconn_do_gethostbyname+0x84>)
 80108b4:	4807      	ldr	r0, [pc, #28]	; (80108d4 <lwip_netconn_do_gethostbyname+0x88>)
 80108b6:	f00f f819 	bl	801f8ec <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80108ba:	bf00      	nop
 80108bc:	3714      	adds	r7, #20
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd90      	pop	{r4, r7, pc}
 80108c2:	bf00      	nop
 80108c4:	08010809 	.word	0x08010809
 80108c8:	200133ac 	.word	0x200133ac
 80108cc:	08021d00 	.word	0x08021d00
 80108d0:	08022258 	.word	0x08022258
 80108d4:	08021d44 	.word	0x08021d44

080108d8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d013      	beq.n	801090e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00b      	beq.n	8010906 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	4618      	mov	r0, r3
 80108f4:	f002 fdd0 	bl	8013498 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2200      	movs	r2, #0
 80108fc:	605a      	str	r2, [r3, #4]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	685a      	ldr	r2, [r3, #4]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	2006      	movs	r0, #6
 801090a:	f001 ff15 	bl	8012738 <memp_free>
  }
}
 801090e:	bf00      	nop
 8010910:	3708      	adds	r7, #8
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
	...

08010918 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	60b9      	str	r1, [r7, #8]
 8010922:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d108      	bne.n	801093c <netbuf_data+0x24>
 801092a:	4b1b      	ldr	r3, [pc, #108]	; (8010998 <netbuf_data+0x80>)
 801092c:	22c6      	movs	r2, #198	; 0xc6
 801092e:	491b      	ldr	r1, [pc, #108]	; (801099c <netbuf_data+0x84>)
 8010930:	481b      	ldr	r0, [pc, #108]	; (80109a0 <netbuf_data+0x88>)
 8010932:	f00e ffdb 	bl	801f8ec <iprintf>
 8010936:	f06f 030f 	mvn.w	r3, #15
 801093a:	e029      	b.n	8010990 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d108      	bne.n	8010954 <netbuf_data+0x3c>
 8010942:	4b15      	ldr	r3, [pc, #84]	; (8010998 <netbuf_data+0x80>)
 8010944:	22c7      	movs	r2, #199	; 0xc7
 8010946:	4917      	ldr	r1, [pc, #92]	; (80109a4 <netbuf_data+0x8c>)
 8010948:	4815      	ldr	r0, [pc, #84]	; (80109a0 <netbuf_data+0x88>)
 801094a:	f00e ffcf 	bl	801f8ec <iprintf>
 801094e:	f06f 030f 	mvn.w	r3, #15
 8010952:	e01d      	b.n	8010990 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d108      	bne.n	801096c <netbuf_data+0x54>
 801095a:	4b0f      	ldr	r3, [pc, #60]	; (8010998 <netbuf_data+0x80>)
 801095c:	22c8      	movs	r2, #200	; 0xc8
 801095e:	4912      	ldr	r1, [pc, #72]	; (80109a8 <netbuf_data+0x90>)
 8010960:	480f      	ldr	r0, [pc, #60]	; (80109a0 <netbuf_data+0x88>)
 8010962:	f00e ffc3 	bl	801f8ec <iprintf>
 8010966:	f06f 030f 	mvn.w	r3, #15
 801096a:	e011      	b.n	8010990 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d102      	bne.n	801097a <netbuf_data+0x62>
    return ERR_BUF;
 8010974:	f06f 0301 	mvn.w	r3, #1
 8010978:	e00a      	b.n	8010990 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	685a      	ldr	r2, [r3, #4]
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	895a      	ldrh	r2, [r3, #10]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 801098e:	2300      	movs	r3, #0
}
 8010990:	4618      	mov	r0, r3
 8010992:	3710      	adds	r7, #16
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	08022280 	.word	0x08022280
 801099c:	08022388 	.word	0x08022388
 80109a0:	080222d0 	.word	0x080222d0
 80109a4:	080223a4 	.word	0x080223a4
 80109a8:	080223c4 	.word	0x080223c4

080109ac <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d108      	bne.n	80109cc <netbuf_next+0x20>
 80109ba:	4b11      	ldr	r3, [pc, #68]	; (8010a00 <netbuf_next+0x54>)
 80109bc:	22e0      	movs	r2, #224	; 0xe0
 80109be:	4911      	ldr	r1, [pc, #68]	; (8010a04 <netbuf_next+0x58>)
 80109c0:	4811      	ldr	r0, [pc, #68]	; (8010a08 <netbuf_next+0x5c>)
 80109c2:	f00e ff93 	bl	801f8ec <iprintf>
 80109c6:	f04f 33ff 	mov.w	r3, #4294967295
 80109ca:	e014      	b.n	80109f6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d102      	bne.n	80109dc <netbuf_next+0x30>
    return -1;
 80109d6:	f04f 33ff 	mov.w	r3, #4294967295
 80109da:	e00c      	b.n	80109f6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d101      	bne.n	80109f4 <netbuf_next+0x48>
    return 1;
 80109f0:	2301      	movs	r3, #1
 80109f2:	e000      	b.n	80109f6 <netbuf_next+0x4a>
  }
  return 0;
 80109f4:	2300      	movs	r3, #0
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	08022280 	.word	0x08022280
 8010a04:	080223e0 	.word	0x080223e0
 8010a08:	080222d0 	.word	0x080222d0

08010a0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010a16:	f009 fadf 	bl	8019fd8 <sys_timeouts_sleeptime>
 8010a1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a22:	d10b      	bne.n	8010a3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010a24:	4813      	ldr	r0, [pc, #76]	; (8010a74 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a26:	f00e fce8 	bl	801f3fa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	6839      	ldr	r1, [r7, #0]
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f00e fbbe 	bl	801f1b0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010a34:	480f      	ldr	r0, [pc, #60]	; (8010a74 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a36:	f00e fcd1 	bl	801f3dc <sys_mutex_lock>
    return;
 8010a3a:	e018      	b.n	8010a6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d102      	bne.n	8010a48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010a42:	f009 fa8f 	bl	8019f64 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010a46:	e7e6      	b.n	8010a16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010a48:	480a      	ldr	r0, [pc, #40]	; (8010a74 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a4a:	f00e fcd6 	bl	801f3fa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010a4e:	68fa      	ldr	r2, [r7, #12]
 8010a50:	6839      	ldr	r1, [r7, #0]
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f00e fbac 	bl	801f1b0 <sys_arch_mbox_fetch>
 8010a58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010a5a:	4806      	ldr	r0, [pc, #24]	; (8010a74 <tcpip_timeouts_mbox_fetch+0x68>)
 8010a5c:	f00e fcbe 	bl	801f3dc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a66:	d102      	bne.n	8010a6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010a68:	f009 fa7c 	bl	8019f64 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010a6c:	e7d3      	b.n	8010a16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010a6e:	3710      	adds	r7, #16
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	200133ac 	.word	0x200133ac

08010a78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b084      	sub	sp, #16
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010a80:	4810      	ldr	r0, [pc, #64]	; (8010ac4 <tcpip_thread+0x4c>)
 8010a82:	f00e fcab 	bl	801f3dc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010a86:	4b10      	ldr	r3, [pc, #64]	; (8010ac8 <tcpip_thread+0x50>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d005      	beq.n	8010a9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010a8e:	4b0e      	ldr	r3, [pc, #56]	; (8010ac8 <tcpip_thread+0x50>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	4a0e      	ldr	r2, [pc, #56]	; (8010acc <tcpip_thread+0x54>)
 8010a94:	6812      	ldr	r2, [r2, #0]
 8010a96:	4610      	mov	r0, r2
 8010a98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010a9a:	f107 030c 	add.w	r3, r7, #12
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	480b      	ldr	r0, [pc, #44]	; (8010ad0 <tcpip_thread+0x58>)
 8010aa2:	f7ff ffb3 	bl	8010a0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d106      	bne.n	8010aba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010aac:	4b09      	ldr	r3, [pc, #36]	; (8010ad4 <tcpip_thread+0x5c>)
 8010aae:	2291      	movs	r2, #145	; 0x91
 8010ab0:	4909      	ldr	r1, [pc, #36]	; (8010ad8 <tcpip_thread+0x60>)
 8010ab2:	480a      	ldr	r0, [pc, #40]	; (8010adc <tcpip_thread+0x64>)
 8010ab4:	f00e ff1a 	bl	801f8ec <iprintf>
      continue;
 8010ab8:	e003      	b.n	8010ac2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	4618      	mov	r0, r3
 8010abe:	f000 f80f 	bl	8010ae0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010ac2:	e7ea      	b.n	8010a9a <tcpip_thread+0x22>
 8010ac4:	200133ac 	.word	0x200133ac
 8010ac8:	20005020 	.word	0x20005020
 8010acc:	20005024 	.word	0x20005024
 8010ad0:	20005028 	.word	0x20005028
 8010ad4:	08022418 	.word	0x08022418
 8010ad8:	08022448 	.word	0x08022448
 8010adc:	08022468 	.word	0x08022468

08010ae0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	2b02      	cmp	r3, #2
 8010aee:	d026      	beq.n	8010b3e <tcpip_thread_handle_msg+0x5e>
 8010af0:	2b02      	cmp	r3, #2
 8010af2:	dc2b      	bgt.n	8010b4c <tcpip_thread_handle_msg+0x6c>
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d002      	beq.n	8010afe <tcpip_thread_handle_msg+0x1e>
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d015      	beq.n	8010b28 <tcpip_thread_handle_msg+0x48>
 8010afc:	e026      	b.n	8010b4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	6850      	ldr	r0, [r2, #4]
 8010b06:	687a      	ldr	r2, [r7, #4]
 8010b08:	6892      	ldr	r2, [r2, #8]
 8010b0a:	4611      	mov	r1, r2
 8010b0c:	4798      	blx	r3
 8010b0e:	4603      	mov	r3, r0
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d004      	beq.n	8010b1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	685b      	ldr	r3, [r3, #4]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f002 fcbd 	bl	8013498 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010b1e:	6879      	ldr	r1, [r7, #4]
 8010b20:	2009      	movs	r0, #9
 8010b22:	f001 fe09 	bl	8012738 <memp_free>
      break;
 8010b26:	e018      	b.n	8010b5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	6892      	ldr	r2, [r2, #8]
 8010b30:	4610      	mov	r0, r2
 8010b32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010b34:	6879      	ldr	r1, [r7, #4]
 8010b36:	2008      	movs	r0, #8
 8010b38:	f001 fdfe 	bl	8012738 <memp_free>
      break;
 8010b3c:	e00d      	b.n	8010b5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	6892      	ldr	r2, [r2, #8]
 8010b46:	4610      	mov	r0, r2
 8010b48:	4798      	blx	r3
      break;
 8010b4a:	e006      	b.n	8010b5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010b4c:	4b05      	ldr	r3, [pc, #20]	; (8010b64 <tcpip_thread_handle_msg+0x84>)
 8010b4e:	22cf      	movs	r2, #207	; 0xcf
 8010b50:	4905      	ldr	r1, [pc, #20]	; (8010b68 <tcpip_thread_handle_msg+0x88>)
 8010b52:	4806      	ldr	r0, [pc, #24]	; (8010b6c <tcpip_thread_handle_msg+0x8c>)
 8010b54:	f00e feca 	bl	801f8ec <iprintf>
      break;
 8010b58:	bf00      	nop
  }
}
 8010b5a:	bf00      	nop
 8010b5c:	3708      	adds	r7, #8
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	08022418 	.word	0x08022418
 8010b68:	08022448 	.word	0x08022448
 8010b6c:	08022468 	.word	0x08022468

08010b70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b086      	sub	sp, #24
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	60b9      	str	r1, [r7, #8]
 8010b7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010b7c:	481a      	ldr	r0, [pc, #104]	; (8010be8 <tcpip_inpkt+0x78>)
 8010b7e:	f00e fb5f 	bl	801f240 <sys_mbox_valid>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d105      	bne.n	8010b94 <tcpip_inpkt+0x24>
 8010b88:	4b18      	ldr	r3, [pc, #96]	; (8010bec <tcpip_inpkt+0x7c>)
 8010b8a:	22fc      	movs	r2, #252	; 0xfc
 8010b8c:	4918      	ldr	r1, [pc, #96]	; (8010bf0 <tcpip_inpkt+0x80>)
 8010b8e:	4819      	ldr	r0, [pc, #100]	; (8010bf4 <tcpip_inpkt+0x84>)
 8010b90:	f00e feac 	bl	801f8ec <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010b94:	2009      	movs	r0, #9
 8010b96:	f001 fd7d 	bl	8012694 <memp_malloc>
 8010b9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d102      	bne.n	8010ba8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8010ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ba6:	e01a      	b.n	8010bde <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	2200      	movs	r2, #0
 8010bac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	68fa      	ldr	r2, [r7, #12]
 8010bb2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	68ba      	ldr	r2, [r7, #8]
 8010bb8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	687a      	ldr	r2, [r7, #4]
 8010bbe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010bc0:	6979      	ldr	r1, [r7, #20]
 8010bc2:	4809      	ldr	r0, [pc, #36]	; (8010be8 <tcpip_inpkt+0x78>)
 8010bc4:	f00e fada 	bl	801f17c <sys_mbox_trypost>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d006      	beq.n	8010bdc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010bce:	6979      	ldr	r1, [r7, #20]
 8010bd0:	2009      	movs	r0, #9
 8010bd2:	f001 fdb1 	bl	8012738 <memp_free>
    return ERR_MEM;
 8010bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8010bda:	e000      	b.n	8010bde <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010bdc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3718      	adds	r7, #24
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}
 8010be6:	bf00      	nop
 8010be8:	20005028 	.word	0x20005028
 8010bec:	08022418 	.word	0x08022418
 8010bf0:	08022490 	.word	0x08022490
 8010bf4:	08022468 	.word	0x08022468

08010bf8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010c08:	f003 0318 	and.w	r3, r3, #24
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d006      	beq.n	8010c1e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010c10:	4a08      	ldr	r2, [pc, #32]	; (8010c34 <tcpip_input+0x3c>)
 8010c12:	6839      	ldr	r1, [r7, #0]
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f7ff ffab 	bl	8010b70 <tcpip_inpkt>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	e005      	b.n	8010c2a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010c1e:	4a06      	ldr	r2, [pc, #24]	; (8010c38 <tcpip_input+0x40>)
 8010c20:	6839      	ldr	r1, [r7, #0]
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f7ff ffa4 	bl	8010b70 <tcpip_inpkt>
 8010c28:	4603      	mov	r3, r0
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3708      	adds	r7, #8
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	0801ef79 	.word	0x0801ef79
 8010c38:	0801dbfd 	.word	0x0801dbfd

08010c3c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010c46:	4819      	ldr	r0, [pc, #100]	; (8010cac <tcpip_try_callback+0x70>)
 8010c48:	f00e fafa 	bl	801f240 <sys_mbox_valid>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d106      	bne.n	8010c60 <tcpip_try_callback+0x24>
 8010c52:	4b17      	ldr	r3, [pc, #92]	; (8010cb0 <tcpip_try_callback+0x74>)
 8010c54:	f240 125d 	movw	r2, #349	; 0x15d
 8010c58:	4916      	ldr	r1, [pc, #88]	; (8010cb4 <tcpip_try_callback+0x78>)
 8010c5a:	4817      	ldr	r0, [pc, #92]	; (8010cb8 <tcpip_try_callback+0x7c>)
 8010c5c:	f00e fe46 	bl	801f8ec <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010c60:	2008      	movs	r0, #8
 8010c62:	f001 fd17 	bl	8012694 <memp_malloc>
 8010c66:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d102      	bne.n	8010c74 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c72:	e017      	b.n	8010ca4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2201      	movs	r2, #1
 8010c78:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010c86:	68f9      	ldr	r1, [r7, #12]
 8010c88:	4808      	ldr	r0, [pc, #32]	; (8010cac <tcpip_try_callback+0x70>)
 8010c8a:	f00e fa77 	bl	801f17c <sys_mbox_trypost>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d006      	beq.n	8010ca2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010c94:	68f9      	ldr	r1, [r7, #12]
 8010c96:	2008      	movs	r0, #8
 8010c98:	f001 fd4e 	bl	8012738 <memp_free>
    return ERR_MEM;
 8010c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8010ca0:	e000      	b.n	8010ca4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8010ca2:	2300      	movs	r3, #0
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3710      	adds	r7, #16
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	20005028 	.word	0x20005028
 8010cb0:	08022418 	.word	0x08022418
 8010cb4:	08022490 	.word	0x08022490
 8010cb8:	08022468 	.word	0x08022468

08010cbc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b084      	sub	sp, #16
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	60f8      	str	r0, [r7, #12]
 8010cc4:	60b9      	str	r1, [r7, #8]
 8010cc6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8010cc8:	4806      	ldr	r0, [pc, #24]	; (8010ce4 <tcpip_send_msg_wait_sem+0x28>)
 8010cca:	f00e fb87 	bl	801f3dc <sys_mutex_lock>
  fn(apimsg);
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	68b8      	ldr	r0, [r7, #8]
 8010cd2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8010cd4:	4803      	ldr	r0, [pc, #12]	; (8010ce4 <tcpip_send_msg_wait_sem+0x28>)
 8010cd6:	f00e fb90 	bl	801f3fa <sys_mutex_unlock>
  return ERR_OK;
 8010cda:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3710      	adds	r7, #16
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	200133ac 	.word	0x200133ac

08010ce8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af02      	add	r7, sp, #8
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010cf2:	f001 f845 	bl	8011d80 <lwip_init>

  tcpip_init_done = initfunc;
 8010cf6:	4a17      	ldr	r2, [pc, #92]	; (8010d54 <tcpip_init+0x6c>)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010cfc:	4a16      	ldr	r2, [pc, #88]	; (8010d58 <tcpip_init+0x70>)
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010d02:	2106      	movs	r1, #6
 8010d04:	4815      	ldr	r0, [pc, #84]	; (8010d5c <tcpip_init+0x74>)
 8010d06:	f00e fa0d 	bl	801f124 <sys_mbox_new>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d006      	beq.n	8010d1e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010d10:	4b13      	ldr	r3, [pc, #76]	; (8010d60 <tcpip_init+0x78>)
 8010d12:	f240 2261 	movw	r2, #609	; 0x261
 8010d16:	4913      	ldr	r1, [pc, #76]	; (8010d64 <tcpip_init+0x7c>)
 8010d18:	4813      	ldr	r0, [pc, #76]	; (8010d68 <tcpip_init+0x80>)
 8010d1a:	f00e fde7 	bl	801f8ec <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010d1e:	4813      	ldr	r0, [pc, #76]	; (8010d6c <tcpip_init+0x84>)
 8010d20:	f00e fb46 	bl	801f3b0 <sys_mutex_new>
 8010d24:	4603      	mov	r3, r0
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d006      	beq.n	8010d38 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010d2a:	4b0d      	ldr	r3, [pc, #52]	; (8010d60 <tcpip_init+0x78>)
 8010d2c:	f240 2265 	movw	r2, #613	; 0x265
 8010d30:	490f      	ldr	r1, [pc, #60]	; (8010d70 <tcpip_init+0x88>)
 8010d32:	480d      	ldr	r0, [pc, #52]	; (8010d68 <tcpip_init+0x80>)
 8010d34:	f00e fdda 	bl	801f8ec <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010d38:	2318      	movs	r3, #24
 8010d3a:	9300      	str	r3, [sp, #0]
 8010d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d40:	2200      	movs	r2, #0
 8010d42:	490c      	ldr	r1, [pc, #48]	; (8010d74 <tcpip_init+0x8c>)
 8010d44:	480c      	ldr	r0, [pc, #48]	; (8010d78 <tcpip_init+0x90>)
 8010d46:	f00e fb65 	bl	801f414 <sys_thread_new>
}
 8010d4a:	bf00      	nop
 8010d4c:	3708      	adds	r7, #8
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	20005020 	.word	0x20005020
 8010d58:	20005024 	.word	0x20005024
 8010d5c:	20005028 	.word	0x20005028
 8010d60:	08022418 	.word	0x08022418
 8010d64:	080224a0 	.word	0x080224a0
 8010d68:	08022468 	.word	0x08022468
 8010d6c:	200133ac 	.word	0x200133ac
 8010d70:	080224c4 	.word	0x080224c4
 8010d74:	08010a79 	.word	0x08010a79
 8010d78:	080224e8 	.word	0x080224e8

08010d7c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	4603      	mov	r3, r0
 8010d84:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010d86:	88fb      	ldrh	r3, [r7, #6]
 8010d88:	021b      	lsls	r3, r3, #8
 8010d8a:	b21a      	sxth	r2, r3
 8010d8c:	88fb      	ldrh	r3, [r7, #6]
 8010d8e:	0a1b      	lsrs	r3, r3, #8
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	b21b      	sxth	r3, r3
 8010d94:	4313      	orrs	r3, r2
 8010d96:	b21b      	sxth	r3, r3
 8010d98:	b29b      	uxth	r3, r3
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	370c      	adds	r7, #12
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr

08010da6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010da6:	b480      	push	{r7}
 8010da8:	b083      	sub	sp, #12
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	061a      	lsls	r2, r3, #24
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	021b      	lsls	r3, r3, #8
 8010db6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010dba:	431a      	orrs	r2, r3
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	0a1b      	lsrs	r3, r3, #8
 8010dc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010dc4:	431a      	orrs	r2, r3
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	0e1b      	lsrs	r3, r3, #24
 8010dca:	4313      	orrs	r3, r2
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	370c      	adds	r7, #12
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd6:	4770      	bx	lr

08010dd8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8010dd8:	b480      	push	{r7}
 8010dda:	b087      	sub	sp, #28
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	1c5a      	adds	r2, r3, #1
 8010de8:	60fa      	str	r2, [r7, #12]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	1c5a      	adds	r2, r3, #1
 8010df2:	60ba      	str	r2, [r7, #8]
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 8010df8:	7dfa      	ldrb	r2, [r7, #23]
 8010dfa:	7dbb      	ldrb	r3, [r7, #22]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d016      	beq.n	8010e2e <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 8010e00:	7dfb      	ldrb	r3, [r7, #23]
 8010e02:	f043 0320 	orr.w	r3, r3, #32
 8010e06:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8010e08:	7d7b      	ldrb	r3, [r7, #21]
 8010e0a:	2b60      	cmp	r3, #96	; 0x60
 8010e0c:	d90c      	bls.n	8010e28 <lwip_strnicmp+0x50>
 8010e0e:	7d7b      	ldrb	r3, [r7, #21]
 8010e10:	2b7a      	cmp	r3, #122	; 0x7a
 8010e12:	d809      	bhi.n	8010e28 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8010e14:	7dbb      	ldrb	r3, [r7, #22]
 8010e16:	f043 0320 	orr.w	r3, r3, #32
 8010e1a:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 8010e1c:	7d7a      	ldrb	r2, [r7, #21]
 8010e1e:	7d3b      	ldrb	r3, [r7, #20]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d003      	beq.n	8010e2c <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8010e24:	2301      	movs	r3, #1
 8010e26:	e00c      	b.n	8010e42 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8010e28:	2301      	movs	r3, #1
 8010e2a:	e00a      	b.n	8010e42 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8010e2c:	bf00      	nop
      }
    }
    len--;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	3b01      	subs	r3, #1
 8010e32:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d002      	beq.n	8010e40 <lwip_strnicmp+0x68>
 8010e3a:	7dfb      	ldrb	r3, [r7, #23]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d1d1      	bne.n	8010de4 <lwip_strnicmp+0xc>
  return 0;
 8010e40:	2300      	movs	r3, #0
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	371c      	adds	r7, #28
 8010e46:	46bd      	mov	sp, r7
 8010e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4c:	4770      	bx	lr

08010e4e <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8010e4e:	b480      	push	{r7}
 8010e50:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8010e52:	bf00      	nop
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	4603      	mov	r3, r0
 8010e64:	6039      	str	r1, [r7, #0]
 8010e66:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8010e68:	79fb      	ldrb	r3, [r7, #7]
 8010e6a:	2b01      	cmp	r3, #1
 8010e6c:	d80f      	bhi.n	8010e8e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d006      	beq.n	8010e82 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8010e74:	79fb      	ldrb	r3, [r7, #7]
 8010e76:	4909      	ldr	r1, [pc, #36]	; (8010e9c <dns_setserver+0x40>)
 8010e78:	683a      	ldr	r2, [r7, #0]
 8010e7a:	6812      	ldr	r2, [r2, #0]
 8010e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8010e80:	e005      	b.n	8010e8e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8010e82:	79fb      	ldrb	r3, [r7, #7]
 8010e84:	4905      	ldr	r1, [pc, #20]	; (8010e9c <dns_setserver+0x40>)
 8010e86:	4a06      	ldr	r2, [pc, #24]	; (8010ea0 <dns_setserver+0x44>)
 8010e88:	6812      	ldr	r2, [r2, #0]
 8010e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010e8e:	bf00      	nop
 8010e90:	370c      	adds	r7, #12
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr
 8010e9a:	bf00      	nop
 8010e9c:	200054b0 	.word	0x200054b0
 8010ea0:	080256b4 	.word	0x080256b4

08010ea4 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8010ea8:	f000 fc54 	bl	8011754 <dns_check_entries>
}
 8010eac:	bf00      	nop
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8010eba:	2300      	movs	r3, #0
 8010ebc:	73fb      	strb	r3, [r7, #15]
 8010ebe:	e02e      	b.n	8010f1e <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8010ec0:	7bfa      	ldrb	r2, [r7, #15]
 8010ec2:	491b      	ldr	r1, [pc, #108]	; (8010f30 <dns_lookup+0x80>)
 8010ec4:	4613      	mov	r3, r2
 8010ec6:	011b      	lsls	r3, r3, #4
 8010ec8:	4413      	add	r3, r2
 8010eca:	011b      	lsls	r3, r3, #4
 8010ecc:	440b      	add	r3, r1
 8010ece:	330a      	adds	r3, #10
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	2b03      	cmp	r3, #3
 8010ed4:	d120      	bne.n	8010f18 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8010ed6:	7bfa      	ldrb	r2, [r7, #15]
 8010ed8:	4613      	mov	r3, r2
 8010eda:	011b      	lsls	r3, r3, #4
 8010edc:	4413      	add	r3, r2
 8010ede:	011b      	lsls	r3, r3, #4
 8010ee0:	3310      	adds	r3, #16
 8010ee2:	4a13      	ldr	r2, [pc, #76]	; (8010f30 <dns_lookup+0x80>)
 8010ee4:	4413      	add	r3, r2
 8010ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010eea:	4619      	mov	r1, r3
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f7ff ff73 	bl	8010dd8 <lwip_strnicmp>
 8010ef2:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d10f      	bne.n	8010f18 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d00a      	beq.n	8010f14 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 8010efe:	7bfa      	ldrb	r2, [r7, #15]
 8010f00:	490b      	ldr	r1, [pc, #44]	; (8010f30 <dns_lookup+0x80>)
 8010f02:	4613      	mov	r3, r2
 8010f04:	011b      	lsls	r3, r3, #4
 8010f06:	4413      	add	r3, r2
 8010f08:	011b      	lsls	r3, r3, #4
 8010f0a:	440b      	add	r3, r1
 8010f0c:	3304      	adds	r3, #4
 8010f0e:	681a      	ldr	r2, [r3, #0]
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 8010f14:	2300      	movs	r3, #0
 8010f16:	e007      	b.n	8010f28 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8010f18:	7bfb      	ldrb	r3, [r7, #15]
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	73fb      	strb	r3, [r7, #15]
 8010f1e:	7bfb      	ldrb	r3, [r7, #15]
 8010f20:	2b03      	cmp	r3, #3
 8010f22:	d9cd      	bls.n	8010ec0 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 8010f24:	f06f 030f 	mvn.w	r3, #15
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3710      	adds	r7, #16
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}
 8010f30:	20005040 	.word	0x20005040

08010f34 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b088      	sub	sp, #32
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	4613      	mov	r3, r2
 8010f40:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 8010f42:	88fb      	ldrh	r3, [r7, #6]
 8010f44:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 8010f46:	8b7b      	ldrh	r3, [r7, #26]
 8010f48:	4619      	mov	r1, r3
 8010f4a:	68b8      	ldr	r0, [r7, #8]
 8010f4c:	f002 fe86 	bl	8013c5c <pbuf_try_get_at>
 8010f50:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	db04      	blt.n	8010f62 <dns_compare_name+0x2e>
 8010f58:	8b7b      	ldrh	r3, [r7, #26]
 8010f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d102      	bne.n	8010f68 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 8010f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f66:	e06c      	b.n	8011042 <dns_compare_name+0x10e>
    }
    response_offset++;
 8010f68:	8b7b      	ldrh	r3, [r7, #26]
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 8010f6e:	69fb      	ldr	r3, [r7, #28]
 8010f70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010f74:	2bc0      	cmp	r3, #192	; 0xc0
 8010f76:	d144      	bne.n	8011002 <dns_compare_name+0xce>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 8010f78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f7c:	e061      	b.n	8011042 <dns_compare_name+0x10e>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 8010f7e:	8b7b      	ldrh	r3, [r7, #26]
 8010f80:	4619      	mov	r1, r3
 8010f82:	68b8      	ldr	r0, [r7, #8]
 8010f84:	f002 fe6a 	bl	8013c5c <pbuf_try_get_at>
 8010f88:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	da02      	bge.n	8010f96 <dns_compare_name+0x62>
          return 0xFFFF;
 8010f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f94:	e055      	b.n	8011042 <dns_compare_name+0x10e>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	74fb      	strb	r3, [r7, #19]
 8010f9c:	7cfb      	ldrb	r3, [r7, #19]
 8010f9e:	3301      	adds	r3, #1
 8010fa0:	4a2a      	ldr	r2, [pc, #168]	; (801104c <dns_compare_name+0x118>)
 8010fa2:	4413      	add	r3, r2
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	f003 0303 	and.w	r3, r3, #3
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d103      	bne.n	8010fb6 <dns_compare_name+0x82>
 8010fae:	7cfb      	ldrb	r3, [r7, #19]
 8010fb0:	f103 0220 	add.w	r2, r3, #32
 8010fb4:	e000      	b.n	8010fb8 <dns_compare_name+0x84>
 8010fb6:	7cfa      	ldrb	r2, [r7, #19]
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	74bb      	strb	r3, [r7, #18]
 8010fbc:	7cbb      	ldrb	r3, [r7, #18]
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	4922      	ldr	r1, [pc, #136]	; (801104c <dns_compare_name+0x118>)
 8010fc2:	440b      	add	r3, r1
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	f003 0303 	and.w	r3, r3, #3
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d102      	bne.n	8010fd4 <dns_compare_name+0xa0>
 8010fce:	7cbb      	ldrb	r3, [r7, #18]
 8010fd0:	3320      	adds	r3, #32
 8010fd2:	e000      	b.n	8010fd6 <dns_compare_name+0xa2>
 8010fd4:	7cbb      	ldrb	r3, [r7, #18]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d002      	beq.n	8010fe0 <dns_compare_name+0xac>
          return 0xFFFF;
 8010fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fde:	e030      	b.n	8011042 <dns_compare_name+0x10e>
        }
        if (response_offset == 0xFFFF) {
 8010fe0:	8b7b      	ldrh	r3, [r7, #26]
 8010fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d102      	bne.n	8010ff0 <dns_compare_name+0xbc>
          /* would overflow */
          return 0xFFFF;
 8010fea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fee:	e028      	b.n	8011042 <dns_compare_name+0x10e>
        }
        response_offset++;
 8010ff0:	8b7b      	ldrh	r3, [r7, #26]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	837b      	strh	r3, [r7, #26]
        ++query;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	60fb      	str	r3, [r7, #12]
        --n;
 8010ffc:	69fb      	ldr	r3, [r7, #28]
 8010ffe:	3b01      	subs	r3, #1
 8011000:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	2b00      	cmp	r3, #0
 8011006:	dcba      	bgt.n	8010f7e <dns_compare_name+0x4a>
      }
      ++query;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	3301      	adds	r3, #1
 801100c:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 801100e:	8b7b      	ldrh	r3, [r7, #26]
 8011010:	4619      	mov	r1, r3
 8011012:	68b8      	ldr	r0, [r7, #8]
 8011014:	f002 fe22 	bl	8013c5c <pbuf_try_get_at>
 8011018:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	2b00      	cmp	r3, #0
 801101e:	da02      	bge.n	8011026 <dns_compare_name+0xf2>
      return 0xFFFF;
 8011020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011024:	e00d      	b.n	8011042 <dns_compare_name+0x10e>
    }
  } while (n != 0);
 8011026:	69fb      	ldr	r3, [r7, #28]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d18c      	bne.n	8010f46 <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 801102c:	8b7b      	ldrh	r3, [r7, #26]
 801102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011032:	4293      	cmp	r3, r2
 8011034:	d102      	bne.n	801103c <dns_compare_name+0x108>
    /* would overflow */
    return 0xFFFF;
 8011036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801103a:	e002      	b.n	8011042 <dns_compare_name+0x10e>
  }
  return (u16_t)(response_offset + 1);
 801103c:	8b7b      	ldrh	r3, [r7, #26]
 801103e:	3301      	adds	r3, #1
 8011040:	b29b      	uxth	r3, r3
}
 8011042:	4618      	mov	r0, r3
 8011044:	3720      	adds	r7, #32
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	080256ca 	.word	0x080256ca

08011050 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	460b      	mov	r3, r1
 801105a:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 801105c:	887b      	ldrh	r3, [r7, #2]
 801105e:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 8011060:	89fb      	ldrh	r3, [r7, #14]
 8011062:	1c5a      	adds	r2, r3, #1
 8011064:	81fa      	strh	r2, [r7, #14]
 8011066:	4619      	mov	r1, r3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f002 fdf7 	bl	8013c5c <pbuf_try_get_at>
 801106e:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	2b00      	cmp	r3, #0
 8011074:	db02      	blt.n	801107c <dns_skip_name+0x2c>
 8011076:	89fb      	ldrh	r3, [r7, #14]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d102      	bne.n	8011082 <dns_skip_name+0x32>
      return 0xFFFF;
 801107c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011080:	e02f      	b.n	80110e2 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011088:	2bc0      	cmp	r3, #192	; 0xc0
 801108a:	d01e      	beq.n	80110ca <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 801108c:	89fa      	ldrh	r2, [r7, #14]
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	4413      	add	r3, r2
 8011092:	687a      	ldr	r2, [r7, #4]
 8011094:	8912      	ldrh	r2, [r2, #8]
 8011096:	4293      	cmp	r3, r2
 8011098:	db02      	blt.n	80110a0 <dns_skip_name+0x50>
        return 0xFFFF;
 801109a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801109e:	e020      	b.n	80110e2 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	b29a      	uxth	r2, r3
 80110a4:	89fb      	ldrh	r3, [r7, #14]
 80110a6:	4413      	add	r3, r2
 80110a8:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 80110aa:	89fb      	ldrh	r3, [r7, #14]
 80110ac:	4619      	mov	r1, r3
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f002 fdd4 	bl	8013c5c <pbuf_try_get_at>
 80110b4:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	da02      	bge.n	80110c2 <dns_skip_name+0x72>
      return 0xFFFF;
 80110bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110c0:	e00f      	b.n	80110e2 <dns_skip_name+0x92>
    }
  } while (n != 0);
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d1cb      	bne.n	8011060 <dns_skip_name+0x10>
 80110c8:	e000      	b.n	80110cc <dns_skip_name+0x7c>
      break;
 80110ca:	bf00      	nop

  if (offset == 0xFFFF) {
 80110cc:	89fb      	ldrh	r3, [r7, #14]
 80110ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d102      	bne.n	80110dc <dns_skip_name+0x8c>
    return 0xFFFF;
 80110d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110da:	e002      	b.n	80110e2 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 80110dc:	89fb      	ldrh	r3, [r7, #14]
 80110de:	3301      	adds	r3, #1
 80110e0:	b29b      	uxth	r3, r3
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3710      	adds	r7, #16
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
	...

080110ec <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b090      	sub	sp, #64	; 0x40
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	4603      	mov	r3, r0
 80110f4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 80110f6:	79fa      	ldrb	r2, [r7, #7]
 80110f8:	4613      	mov	r3, r2
 80110fa:	011b      	lsls	r3, r3, #4
 80110fc:	4413      	add	r3, r2
 80110fe:	011b      	lsls	r3, r3, #4
 8011100:	4a6c      	ldr	r2, [pc, #432]	; (80112b4 <dns_send+0x1c8>)
 8011102:	4413      	add	r3, r2
 8011104:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8011106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011108:	7adb      	ldrb	r3, [r3, #11]
 801110a:	2b01      	cmp	r3, #1
 801110c:	d906      	bls.n	801111c <dns_send+0x30>
 801110e:	4b6a      	ldr	r3, [pc, #424]	; (80112b8 <dns_send+0x1cc>)
 8011110:	f240 22fa 	movw	r2, #762	; 0x2fa
 8011114:	4969      	ldr	r1, [pc, #420]	; (80112bc <dns_send+0x1d0>)
 8011116:	486a      	ldr	r0, [pc, #424]	; (80112c0 <dns_send+0x1d4>)
 8011118:	f00e fbe8 	bl	801f8ec <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 801111c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111e:	7adb      	ldrb	r3, [r3, #11]
 8011120:	461a      	mov	r2, r3
 8011122:	4b68      	ldr	r3, [pc, #416]	; (80112c4 <dns_send+0x1d8>)
 8011124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d109      	bne.n	8011140 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 801112c:	79fb      	ldrb	r3, [r7, #7]
 801112e:	2100      	movs	r1, #0
 8011130:	4618      	mov	r0, r3
 8011132:	f000 f959 	bl	80113e8 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8011136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011138:	2200      	movs	r2, #0
 801113a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 801113c:	2300      	movs	r3, #0
 801113e:	e0b4      	b.n	80112aa <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8011140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011142:	3310      	adds	r3, #16
 8011144:	4618      	mov	r0, r3
 8011146:	f7ef f843 	bl	80001d0 <strlen>
 801114a:	4603      	mov	r3, r0
 801114c:	b29b      	uxth	r3, r3
 801114e:	3312      	adds	r3, #18
 8011150:	b29b      	uxth	r3, r3
 8011152:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011156:	4619      	mov	r1, r3
 8011158:	2036      	movs	r0, #54	; 0x36
 801115a:	f001 feb9 	bl	8012ed0 <pbuf_alloc>
 801115e:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8011160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011162:	2b00      	cmp	r3, #0
 8011164:	f000 8095 	beq.w	8011292 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8011168:	f107 0310 	add.w	r3, r7, #16
 801116c:	220c      	movs	r2, #12
 801116e:	2100      	movs	r1, #0
 8011170:	4618      	mov	r0, r3
 8011172:	f00e faf9 	bl	801f768 <memset>
    hdr.id = lwip_htons(entry->txid);
 8011176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011178:	891b      	ldrh	r3, [r3, #8]
 801117a:	4618      	mov	r0, r3
 801117c:	f7ff fdfe 	bl	8010d7c <lwip_htons>
 8011180:	4603      	mov	r3, r0
 8011182:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8011184:	2301      	movs	r3, #1
 8011186:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8011188:	f44f 7380 	mov.w	r3, #256	; 0x100
 801118c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801118e:	f107 0310 	add.w	r3, r7, #16
 8011192:	220c      	movs	r2, #12
 8011194:	4619      	mov	r1, r3
 8011196:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011198:	f002 fc32 	bl	8013a00 <pbuf_take>
    hostname = entry->name;
 801119c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119e:	3310      	adds	r3, #16
 80111a0:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 80111a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a4:	3b01      	subs	r3, #1
 80111a6:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 80111a8:	230c      	movs	r3, #12
 80111aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 80111ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ae:	3301      	adds	r3, #1
 80111b0:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 80111b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80111b6:	2300      	movs	r3, #0
 80111b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80111bc:	e007      	b.n	80111ce <dns_send+0xe2>
        ++n;
 80111be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80111c2:	3301      	adds	r3, #1
 80111c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80111c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ca:	3301      	adds	r3, #1
 80111cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80111ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	2b2e      	cmp	r3, #46	; 0x2e
 80111d4:	d003      	beq.n	80111de <dns_send+0xf2>
 80111d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d1ef      	bne.n	80111be <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 80111de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e2:	1ad3      	subs	r3, r2, r3
 80111e4:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 80111e6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80111e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80111ec:	4413      	add	r3, r2
 80111ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80111f2:	4293      	cmp	r3, r2
 80111f4:	dc53      	bgt.n	801129e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 80111f6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80111fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80111fc:	4619      	mov	r1, r3
 80111fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011200:	f002 fd4e 	bl	8013ca0 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8011204:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011206:	3301      	adds	r3, #1
 8011208:	b29b      	uxth	r3, r3
 801120a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801120c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801120e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011210:	f002 fc88 	bl	8013b24 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8011214:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011218:	b29a      	uxth	r2, r3
 801121a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801121c:	4413      	add	r3, r2
 801121e:	b29b      	uxth	r3, r3
 8011220:	3301      	adds	r3, #1
 8011222:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8011224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d1bf      	bne.n	80111ac <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 801122c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801122e:	2200      	movs	r2, #0
 8011230:	4619      	mov	r1, r3
 8011232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011234:	f002 fd34 	bl	8013ca0 <pbuf_put_at>
    query_idx++;
 8011238:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801123a:	3301      	adds	r3, #1
 801123c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801123e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011242:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8011244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011248:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801124a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801124c:	f107 010c 	add.w	r1, r7, #12
 8011250:	2204      	movs	r2, #4
 8011252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011254:	f002 fc66 	bl	8013b24 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8011258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801125a:	7bdb      	ldrb	r3, [r3, #15]
 801125c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8011260:	2335      	movs	r3, #53	; 0x35
 8011262:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8011264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011266:	7adb      	ldrb	r3, [r3, #11]
 8011268:	009b      	lsls	r3, r3, #2
 801126a:	4a16      	ldr	r2, [pc, #88]	; (80112c4 <dns_send+0x1d8>)
 801126c:	4413      	add	r3, r2
 801126e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8011270:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011274:	4a14      	ldr	r2, [pc, #80]	; (80112c8 <dns_send+0x1dc>)
 8011276:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801127a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801127c:	69fa      	ldr	r2, [r7, #28]
 801127e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011280:	f009 f8d8 	bl	801a434 <udp_sendto>
 8011284:	4603      	mov	r3, r0
 8011286:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 801128a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801128c:	f002 f904 	bl	8013498 <pbuf_free>
 8011290:	e002      	b.n	8011298 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8011292:	23ff      	movs	r3, #255	; 0xff
 8011294:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8011298:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801129c:	e005      	b.n	80112aa <dns_send+0x1be>
        goto overflow_return;
 801129e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 80112a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112a2:	f002 f8f9 	bl	8013498 <pbuf_free>
  return ERR_VAL;
 80112a6:	f06f 0305 	mvn.w	r3, #5
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3740      	adds	r7, #64	; 0x40
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	20005040 	.word	0x20005040
 80112b8:	080224f8 	.word	0x080224f8
 80112bc:	08022528 	.word	0x08022528
 80112c0:	08022540 	.word	0x08022540
 80112c4:	200054b0 	.word	0x200054b0
 80112c8:	2000502c 	.word	0x2000502c

080112cc <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 80112d2:	202e      	movs	r0, #46	; 0x2e
 80112d4:	f009 fbfb 	bl	801aace <udp_new_ip_type>
 80112d8:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d101      	bne.n	80112e4 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 80112e0:	2300      	movs	r3, #0
 80112e2:	e026      	b.n	8011332 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 80112e4:	f00e fbbe 	bl	801fa64 <rand>
 80112e8:	4603      	mov	r3, r0
 80112ea:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 80112ec:	88fb      	ldrh	r3, [r7, #6]
 80112ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80112f2:	d308      	bcc.n	8011306 <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 80112f4:	88fb      	ldrh	r3, [r7, #6]
 80112f6:	461a      	mov	r2, r3
 80112f8:	4910      	ldr	r1, [pc, #64]	; (801133c <dns_alloc_random_port+0x70>)
 80112fa:	68b8      	ldr	r0, [r7, #8]
 80112fc:	f009 fa50 	bl	801a7a0 <udp_bind>
 8011300:	4603      	mov	r3, r0
 8011302:	73fb      	strb	r3, [r7, #15]
 8011304:	e001      	b.n	801130a <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 8011306:	23f8      	movs	r3, #248	; 0xf8
 8011308:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 801130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801130e:	f113 0f08 	cmn.w	r3, #8
 8011312:	d0e7      	beq.n	80112e4 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 8011314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d004      	beq.n	8011326 <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 801131c:	68b8      	ldr	r0, [r7, #8]
 801131e:	f009 fb7d 	bl	801aa1c <udp_remove>
    return NULL;
 8011322:	2300      	movs	r3, #0
 8011324:	e005      	b.n	8011332 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 8011326:	2200      	movs	r2, #0
 8011328:	4905      	ldr	r1, [pc, #20]	; (8011340 <dns_alloc_random_port+0x74>)
 801132a:	68b8      	ldr	r0, [r7, #8]
 801132c:	f009 fb56 	bl	801a9dc <udp_recv>
  return pcb;
 8011330:	68bb      	ldr	r3, [r7, #8]
}
 8011332:	4618      	mov	r0, r3
 8011334:	3710      	adds	r7, #16
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}
 801133a:	bf00      	nop
 801133c:	080256b4 	.word	0x080256b4
 8011340:	080117ed 	.word	0x080117ed

08011344 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 8011344:	b590      	push	{r4, r7, lr}
 8011346:	b083      	sub	sp, #12
 8011348:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801134a:	2300      	movs	r3, #0
 801134c:	71fb      	strb	r3, [r7, #7]
 801134e:	e008      	b.n	8011362 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 8011350:	79fb      	ldrb	r3, [r7, #7]
 8011352:	4a23      	ldr	r2, [pc, #140]	; (80113e0 <dns_alloc_pcb+0x9c>)
 8011354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d006      	beq.n	801136a <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801135c:	79fb      	ldrb	r3, [r7, #7]
 801135e:	3301      	adds	r3, #1
 8011360:	71fb      	strb	r3, [r7, #7]
 8011362:	79fb      	ldrb	r3, [r7, #7]
 8011364:	2b03      	cmp	r3, #3
 8011366:	d9f3      	bls.n	8011350 <dns_alloc_pcb+0xc>
 8011368:	e000      	b.n	801136c <dns_alloc_pcb+0x28>
      break;
 801136a:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 801136c:	79fb      	ldrb	r3, [r7, #7]
 801136e:	2b03      	cmp	r3, #3
 8011370:	d811      	bhi.n	8011396 <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 8011372:	79fc      	ldrb	r4, [r7, #7]
 8011374:	f7ff ffaa 	bl	80112cc <dns_alloc_random_port>
 8011378:	4603      	mov	r3, r0
 801137a:	4a19      	ldr	r2, [pc, #100]	; (80113e0 <dns_alloc_pcb+0x9c>)
 801137c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8011380:	79fb      	ldrb	r3, [r7, #7]
 8011382:	4a17      	ldr	r2, [pc, #92]	; (80113e0 <dns_alloc_pcb+0x9c>)
 8011384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d004      	beq.n	8011396 <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 801138c:	4a15      	ldr	r2, [pc, #84]	; (80113e4 <dns_alloc_pcb+0xa0>)
 801138e:	79fb      	ldrb	r3, [r7, #7]
 8011390:	7013      	strb	r3, [r2, #0]
      return i;
 8011392:	79fb      	ldrb	r3, [r7, #7]
 8011394:	e020      	b.n	80113d8 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8011396:	2300      	movs	r3, #0
 8011398:	71fb      	strb	r3, [r7, #7]
 801139a:	4b12      	ldr	r3, [pc, #72]	; (80113e4 <dns_alloc_pcb+0xa0>)
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	3301      	adds	r3, #1
 80113a0:	71bb      	strb	r3, [r7, #6]
 80113a2:	e015      	b.n	80113d0 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 80113a4:	79bb      	ldrb	r3, [r7, #6]
 80113a6:	2b03      	cmp	r3, #3
 80113a8:	d901      	bls.n	80113ae <dns_alloc_pcb+0x6a>
      idx = 0;
 80113aa:	2300      	movs	r3, #0
 80113ac:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 80113ae:	79bb      	ldrb	r3, [r7, #6]
 80113b0:	4a0b      	ldr	r2, [pc, #44]	; (80113e0 <dns_alloc_pcb+0x9c>)
 80113b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d004      	beq.n	80113c4 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 80113ba:	4a0a      	ldr	r2, [pc, #40]	; (80113e4 <dns_alloc_pcb+0xa0>)
 80113bc:	79bb      	ldrb	r3, [r7, #6]
 80113be:	7013      	strb	r3, [r2, #0]
      return idx;
 80113c0:	79bb      	ldrb	r3, [r7, #6]
 80113c2:	e009      	b.n	80113d8 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80113c4:	79fb      	ldrb	r3, [r7, #7]
 80113c6:	3301      	adds	r3, #1
 80113c8:	71fb      	strb	r3, [r7, #7]
 80113ca:	79bb      	ldrb	r3, [r7, #6]
 80113cc:	3301      	adds	r3, #1
 80113ce:	71bb      	strb	r3, [r7, #6]
 80113d0:	79fb      	ldrb	r3, [r7, #7]
 80113d2:	2b03      	cmp	r3, #3
 80113d4:	d9e6      	bls.n	80113a4 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 80113d6:	2304      	movs	r3, #4
}
 80113d8:	4618      	mov	r0, r3
 80113da:	370c      	adds	r7, #12
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd90      	pop	{r4, r7, pc}
 80113e0:	2000502c 	.word	0x2000502c
 80113e4:	2000503c 	.word	0x2000503c

080113e8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 80113e8:	b590      	push	{r4, r7, lr}
 80113ea:	b085      	sub	sp, #20
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	4603      	mov	r3, r0
 80113f0:	6039      	str	r1, [r7, #0]
 80113f2:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80113f4:	2300      	movs	r3, #0
 80113f6:	73fb      	strb	r3, [r7, #15]
 80113f8:	e03d      	b.n	8011476 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80113fa:	7bfa      	ldrb	r2, [r7, #15]
 80113fc:	4957      	ldr	r1, [pc, #348]	; (801155c <dns_call_found+0x174>)
 80113fe:	4613      	mov	r3, r2
 8011400:	005b      	lsls	r3, r3, #1
 8011402:	4413      	add	r3, r2
 8011404:	009b      	lsls	r3, r3, #2
 8011406:	440b      	add	r3, r1
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d030      	beq.n	8011470 <dns_call_found+0x88>
 801140e:	7bfa      	ldrb	r2, [r7, #15]
 8011410:	4952      	ldr	r1, [pc, #328]	; (801155c <dns_call_found+0x174>)
 8011412:	4613      	mov	r3, r2
 8011414:	005b      	lsls	r3, r3, #1
 8011416:	4413      	add	r3, r2
 8011418:	009b      	lsls	r3, r3, #2
 801141a:	440b      	add	r3, r1
 801141c:	3308      	adds	r3, #8
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	79fa      	ldrb	r2, [r7, #7]
 8011422:	429a      	cmp	r2, r3
 8011424:	d124      	bne.n	8011470 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8011426:	7bfa      	ldrb	r2, [r7, #15]
 8011428:	494c      	ldr	r1, [pc, #304]	; (801155c <dns_call_found+0x174>)
 801142a:	4613      	mov	r3, r2
 801142c:	005b      	lsls	r3, r3, #1
 801142e:	4413      	add	r3, r2
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	440b      	add	r3, r1
 8011434:	681c      	ldr	r4, [r3, #0]
 8011436:	79fa      	ldrb	r2, [r7, #7]
 8011438:	4613      	mov	r3, r2
 801143a:	011b      	lsls	r3, r3, #4
 801143c:	4413      	add	r3, r2
 801143e:	011b      	lsls	r3, r3, #4
 8011440:	3310      	adds	r3, #16
 8011442:	4a47      	ldr	r2, [pc, #284]	; (8011560 <dns_call_found+0x178>)
 8011444:	1898      	adds	r0, r3, r2
 8011446:	7bfa      	ldrb	r2, [r7, #15]
 8011448:	4944      	ldr	r1, [pc, #272]	; (801155c <dns_call_found+0x174>)
 801144a:	4613      	mov	r3, r2
 801144c:	005b      	lsls	r3, r3, #1
 801144e:	4413      	add	r3, r2
 8011450:	009b      	lsls	r3, r3, #2
 8011452:	440b      	add	r3, r1
 8011454:	3304      	adds	r3, #4
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	461a      	mov	r2, r3
 801145a:	6839      	ldr	r1, [r7, #0]
 801145c:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 801145e:	7bfa      	ldrb	r2, [r7, #15]
 8011460:	493e      	ldr	r1, [pc, #248]	; (801155c <dns_call_found+0x174>)
 8011462:	4613      	mov	r3, r2
 8011464:	005b      	lsls	r3, r3, #1
 8011466:	4413      	add	r3, r2
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	440b      	add	r3, r1
 801146c:	2200      	movs	r2, #0
 801146e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8011470:	7bfb      	ldrb	r3, [r7, #15]
 8011472:	3301      	adds	r3, #1
 8011474:	73fb      	strb	r3, [r7, #15]
 8011476:	7bfb      	ldrb	r3, [r7, #15]
 8011478:	2b03      	cmp	r3, #3
 801147a:	d9be      	bls.n	80113fa <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801147c:	2300      	movs	r3, #0
 801147e:	73fb      	strb	r3, [r7, #15]
 8011480:	e031      	b.n	80114e6 <dns_call_found+0xfe>
    if (i == idx) {
 8011482:	7bfa      	ldrb	r2, [r7, #15]
 8011484:	79fb      	ldrb	r3, [r7, #7]
 8011486:	429a      	cmp	r2, r3
 8011488:	d029      	beq.n	80114de <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 801148a:	7bfa      	ldrb	r2, [r7, #15]
 801148c:	4934      	ldr	r1, [pc, #208]	; (8011560 <dns_call_found+0x178>)
 801148e:	4613      	mov	r3, r2
 8011490:	011b      	lsls	r3, r3, #4
 8011492:	4413      	add	r3, r2
 8011494:	011b      	lsls	r3, r3, #4
 8011496:	440b      	add	r3, r1
 8011498:	330a      	adds	r3, #10
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	2b02      	cmp	r3, #2
 801149e:	d11f      	bne.n	80114e0 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80114a0:	7bfa      	ldrb	r2, [r7, #15]
 80114a2:	492f      	ldr	r1, [pc, #188]	; (8011560 <dns_call_found+0x178>)
 80114a4:	4613      	mov	r3, r2
 80114a6:	011b      	lsls	r3, r3, #4
 80114a8:	4413      	add	r3, r2
 80114aa:	011b      	lsls	r3, r3, #4
 80114ac:	440b      	add	r3, r1
 80114ae:	330f      	adds	r3, #15
 80114b0:	7819      	ldrb	r1, [r3, #0]
 80114b2:	79fa      	ldrb	r2, [r7, #7]
 80114b4:	482a      	ldr	r0, [pc, #168]	; (8011560 <dns_call_found+0x178>)
 80114b6:	4613      	mov	r3, r2
 80114b8:	011b      	lsls	r3, r3, #4
 80114ba:	4413      	add	r3, r2
 80114bc:	011b      	lsls	r3, r3, #4
 80114be:	4403      	add	r3, r0
 80114c0:	330f      	adds	r3, #15
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	4299      	cmp	r1, r3
 80114c6:	d10b      	bne.n	80114e0 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80114c8:	79fa      	ldrb	r2, [r7, #7]
 80114ca:	4925      	ldr	r1, [pc, #148]	; (8011560 <dns_call_found+0x178>)
 80114cc:	4613      	mov	r3, r2
 80114ce:	011b      	lsls	r3, r3, #4
 80114d0:	4413      	add	r3, r2
 80114d2:	011b      	lsls	r3, r3, #4
 80114d4:	440b      	add	r3, r1
 80114d6:	330f      	adds	r3, #15
 80114d8:	2204      	movs	r2, #4
 80114da:	701a      	strb	r2, [r3, #0]
        break;
 80114dc:	e006      	b.n	80114ec <dns_call_found+0x104>
      continue; /* only check other requests */
 80114de:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80114e0:	7bfb      	ldrb	r3, [r7, #15]
 80114e2:	3301      	adds	r3, #1
 80114e4:	73fb      	strb	r3, [r7, #15]
 80114e6:	7bfb      	ldrb	r3, [r7, #15]
 80114e8:	2b03      	cmp	r3, #3
 80114ea:	d9ca      	bls.n	8011482 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80114ec:	79fa      	ldrb	r2, [r7, #7]
 80114ee:	491c      	ldr	r1, [pc, #112]	; (8011560 <dns_call_found+0x178>)
 80114f0:	4613      	mov	r3, r2
 80114f2:	011b      	lsls	r3, r3, #4
 80114f4:	4413      	add	r3, r2
 80114f6:	011b      	lsls	r3, r3, #4
 80114f8:	440b      	add	r3, r1
 80114fa:	330f      	adds	r3, #15
 80114fc:	781b      	ldrb	r3, [r3, #0]
 80114fe:	2b03      	cmp	r3, #3
 8011500:	d827      	bhi.n	8011552 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8011502:	79fa      	ldrb	r2, [r7, #7]
 8011504:	4916      	ldr	r1, [pc, #88]	; (8011560 <dns_call_found+0x178>)
 8011506:	4613      	mov	r3, r2
 8011508:	011b      	lsls	r3, r3, #4
 801150a:	4413      	add	r3, r2
 801150c:	011b      	lsls	r3, r3, #4
 801150e:	440b      	add	r3, r1
 8011510:	330f      	adds	r3, #15
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	461a      	mov	r2, r3
 8011516:	4b13      	ldr	r3, [pc, #76]	; (8011564 <dns_call_found+0x17c>)
 8011518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801151c:	4618      	mov	r0, r3
 801151e:	f009 fa7d 	bl	801aa1c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8011522:	79fa      	ldrb	r2, [r7, #7]
 8011524:	490e      	ldr	r1, [pc, #56]	; (8011560 <dns_call_found+0x178>)
 8011526:	4613      	mov	r3, r2
 8011528:	011b      	lsls	r3, r3, #4
 801152a:	4413      	add	r3, r2
 801152c:	011b      	lsls	r3, r3, #4
 801152e:	440b      	add	r3, r1
 8011530:	330f      	adds	r3, #15
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	4619      	mov	r1, r3
 8011536:	4b0b      	ldr	r3, [pc, #44]	; (8011564 <dns_call_found+0x17c>)
 8011538:	2200      	movs	r2, #0
 801153a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801153e:	79fa      	ldrb	r2, [r7, #7]
 8011540:	4907      	ldr	r1, [pc, #28]	; (8011560 <dns_call_found+0x178>)
 8011542:	4613      	mov	r3, r2
 8011544:	011b      	lsls	r3, r3, #4
 8011546:	4413      	add	r3, r2
 8011548:	011b      	lsls	r3, r3, #4
 801154a:	440b      	add	r3, r1
 801154c:	330f      	adds	r3, #15
 801154e:	2204      	movs	r2, #4
 8011550:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8011552:	bf00      	nop
 8011554:	3714      	adds	r7, #20
 8011556:	46bd      	mov	sp, r7
 8011558:	bd90      	pop	{r4, r7, pc}
 801155a:	bf00      	nop
 801155c:	20005480 	.word	0x20005480
 8011560:	20005040 	.word	0x20005040
 8011564:	2000502c 	.word	0x2000502c

08011568 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 801156e:	f00e fa79 	bl	801fa64 <rand>
 8011572:	4603      	mov	r3, r0
 8011574:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8011576:	2300      	movs	r3, #0
 8011578:	71fb      	strb	r3, [r7, #7]
 801157a:	e01a      	b.n	80115b2 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801157c:	79fa      	ldrb	r2, [r7, #7]
 801157e:	4911      	ldr	r1, [pc, #68]	; (80115c4 <dns_create_txid+0x5c>)
 8011580:	4613      	mov	r3, r2
 8011582:	011b      	lsls	r3, r3, #4
 8011584:	4413      	add	r3, r2
 8011586:	011b      	lsls	r3, r3, #4
 8011588:	440b      	add	r3, r1
 801158a:	330a      	adds	r3, #10
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	2b02      	cmp	r3, #2
 8011590:	d10c      	bne.n	80115ac <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8011592:	79fa      	ldrb	r2, [r7, #7]
 8011594:	490b      	ldr	r1, [pc, #44]	; (80115c4 <dns_create_txid+0x5c>)
 8011596:	4613      	mov	r3, r2
 8011598:	011b      	lsls	r3, r3, #4
 801159a:	4413      	add	r3, r2
 801159c:	011b      	lsls	r3, r3, #4
 801159e:	440b      	add	r3, r1
 80115a0:	3308      	adds	r3, #8
 80115a2:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80115a4:	88ba      	ldrh	r2, [r7, #4]
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d100      	bne.n	80115ac <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 80115aa:	e7e0      	b.n	801156e <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80115ac:	79fb      	ldrb	r3, [r7, #7]
 80115ae:	3301      	adds	r3, #1
 80115b0:	71fb      	strb	r3, [r7, #7]
 80115b2:	79fb      	ldrb	r3, [r7, #7]
 80115b4:	2b03      	cmp	r3, #3
 80115b6:	d9e1      	bls.n	801157c <dns_create_txid+0x14>
    }
  }

  return txid;
 80115b8:	88bb      	ldrh	r3, [r7, #4]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3708      	adds	r7, #8
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	20005040 	.word	0x20005040

080115c8 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b085      	sub	sp, #20
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 80115d0:	2300      	movs	r3, #0
 80115d2:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d00d      	beq.n	80115f6 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	7adb      	ldrb	r3, [r3, #11]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d109      	bne.n	80115f6 <dns_backupserver_available+0x2e>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	7adb      	ldrb	r3, [r3, #11]
 80115e6:	3301      	adds	r3, #1
 80115e8:	4a06      	ldr	r2, [pc, #24]	; (8011604 <dns_backupserver_available+0x3c>)
 80115ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d001      	beq.n	80115f6 <dns_backupserver_available+0x2e>
      ret = 1;
 80115f2:	2301      	movs	r3, #1
 80115f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80115f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3714      	adds	r7, #20
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr
 8011604:	200054b0 	.word	0x200054b0

08011608 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b084      	sub	sp, #16
 801160c:	af00      	add	r7, sp, #0
 801160e:	4603      	mov	r3, r0
 8011610:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8011612:	79fa      	ldrb	r2, [r7, #7]
 8011614:	4613      	mov	r3, r2
 8011616:	011b      	lsls	r3, r3, #4
 8011618:	4413      	add	r3, r2
 801161a:	011b      	lsls	r3, r3, #4
 801161c:	4a48      	ldr	r2, [pc, #288]	; (8011740 <dns_check_entry+0x138>)
 801161e:	4413      	add	r3, r2
 8011620:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8011622:	79fb      	ldrb	r3, [r7, #7]
 8011624:	2b03      	cmp	r3, #3
 8011626:	d906      	bls.n	8011636 <dns_check_entry+0x2e>
 8011628:	4b46      	ldr	r3, [pc, #280]	; (8011744 <dns_check_entry+0x13c>)
 801162a:	f240 421c 	movw	r2, #1052	; 0x41c
 801162e:	4946      	ldr	r1, [pc, #280]	; (8011748 <dns_check_entry+0x140>)
 8011630:	4846      	ldr	r0, [pc, #280]	; (801174c <dns_check_entry+0x144>)
 8011632:	f00e f95b 	bl	801f8ec <iprintf>

  switch (entry->state) {
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	7a9b      	ldrb	r3, [r3, #10]
 801163a:	2b03      	cmp	r3, #3
 801163c:	d86f      	bhi.n	801171e <dns_check_entry+0x116>
 801163e:	a201      	add	r2, pc, #4	; (adr r2, 8011644 <dns_check_entry+0x3c>)
 8011640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011644:	0801172f 	.word	0x0801172f
 8011648:	08011655 	.word	0x08011655
 801164c:	08011687 	.word	0x08011687
 8011650:	080116fd 	.word	0x080116fd
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8011654:	f7ff ff88 	bl	8011568 <dns_create_txid>
 8011658:	4603      	mov	r3, r0
 801165a:	461a      	mov	r2, r3
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2202      	movs	r2, #2
 8011664:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2200      	movs	r2, #0
 801166a:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	2201      	movs	r2, #1
 8011670:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	2200      	movs	r2, #0
 8011676:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8011678:	79fb      	ldrb	r3, [r7, #7]
 801167a:	4618      	mov	r0, r3
 801167c:	f7ff fd36 	bl	80110ec <dns_send>
 8011680:	4603      	mov	r3, r0
 8011682:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8011684:	e058      	b.n	8011738 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	7b1b      	ldrb	r3, [r3, #12]
 801168a:	3b01      	subs	r3, #1
 801168c:	b2da      	uxtb	r2, r3
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	731a      	strb	r2, [r3, #12]
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	7b1b      	ldrb	r3, [r3, #12]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d14b      	bne.n	8011732 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	7b5b      	ldrb	r3, [r3, #13]
 801169e:	3301      	adds	r3, #1
 80116a0:	b2da      	uxtb	r2, r3
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	735a      	strb	r2, [r3, #13]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	7b5b      	ldrb	r3, [r3, #13]
 80116aa:	2b04      	cmp	r3, #4
 80116ac:	d11b      	bne.n	80116e6 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 80116ae:	68f8      	ldr	r0, [r7, #12]
 80116b0:	f7ff ff8a 	bl	80115c8 <dns_backupserver_available>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d00c      	beq.n	80116d4 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	7adb      	ldrb	r3, [r3, #11]
 80116be:	3301      	adds	r3, #1
 80116c0:	b2da      	uxtb	r2, r3
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	2201      	movs	r2, #1
 80116ca:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	2200      	movs	r2, #0
 80116d0:	735a      	strb	r2, [r3, #13]
 80116d2:	e00c      	b.n	80116ee <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 80116d4:	79fb      	ldrb	r3, [r7, #7]
 80116d6:	2100      	movs	r1, #0
 80116d8:	4618      	mov	r0, r3
 80116da:	f7ff fe85 	bl	80113e8 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2200      	movs	r2, #0
 80116e2:	729a      	strb	r2, [r3, #10]
            break;
 80116e4:	e028      	b.n	8011738 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	7b5a      	ldrb	r2, [r3, #13]
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 80116ee:	79fb      	ldrb	r3, [r7, #7]
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7ff fcfb 	bl	80110ec <dns_send>
 80116f6:	4603      	mov	r3, r0
 80116f8:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 80116fa:	e01a      	b.n	8011732 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d008      	beq.n	8011716 <dns_check_entry+0x10e>
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	1e5a      	subs	r2, r3, #1
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	601a      	str	r2, [r3, #0]
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d10f      	bne.n	8011736 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2200      	movs	r2, #0
 801171a:	729a      	strb	r2, [r3, #10]
      }
      break;
 801171c:	e00b      	b.n	8011736 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801171e:	4b09      	ldr	r3, [pc, #36]	; (8011744 <dns_check_entry+0x13c>)
 8011720:	f240 425b 	movw	r2, #1115	; 0x45b
 8011724:	490a      	ldr	r1, [pc, #40]	; (8011750 <dns_check_entry+0x148>)
 8011726:	4809      	ldr	r0, [pc, #36]	; (801174c <dns_check_entry+0x144>)
 8011728:	f00e f8e0 	bl	801f8ec <iprintf>
      break;
 801172c:	e004      	b.n	8011738 <dns_check_entry+0x130>
      break;
 801172e:	bf00      	nop
 8011730:	e002      	b.n	8011738 <dns_check_entry+0x130>
      break;
 8011732:	bf00      	nop
 8011734:	e000      	b.n	8011738 <dns_check_entry+0x130>
      break;
 8011736:	bf00      	nop
  }
}
 8011738:	bf00      	nop
 801173a:	3710      	adds	r7, #16
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	20005040 	.word	0x20005040
 8011744:	080224f8 	.word	0x080224f8
 8011748:	08022568 	.word	0x08022568
 801174c:	08022540 	.word	0x08022540
 8011750:	08022584 	.word	0x08022584

08011754 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801175a:	2300      	movs	r3, #0
 801175c:	71fb      	strb	r3, [r7, #7]
 801175e:	e006      	b.n	801176e <dns_check_entries+0x1a>
    dns_check_entry(i);
 8011760:	79fb      	ldrb	r3, [r7, #7]
 8011762:	4618      	mov	r0, r3
 8011764:	f7ff ff50 	bl	8011608 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8011768:	79fb      	ldrb	r3, [r7, #7]
 801176a:	3301      	adds	r3, #1
 801176c:	71fb      	strb	r3, [r7, #7]
 801176e:	79fb      	ldrb	r3, [r7, #7]
 8011770:	2b03      	cmp	r3, #3
 8011772:	d9f5      	bls.n	8011760 <dns_check_entries+0xc>
  }
}
 8011774:	bf00      	nop
 8011776:	bf00      	nop
 8011778:	3708      	adds	r7, #8
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
	...

08011780 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
 8011786:	4603      	mov	r3, r0
 8011788:	6039      	str	r1, [r7, #0]
 801178a:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 801178c:	79fa      	ldrb	r2, [r7, #7]
 801178e:	4613      	mov	r3, r2
 8011790:	011b      	lsls	r3, r3, #4
 8011792:	4413      	add	r3, r2
 8011794:	011b      	lsls	r3, r3, #4
 8011796:	4a13      	ldr	r2, [pc, #76]	; (80117e4 <dns_correct_response+0x64>)
 8011798:	4413      	add	r3, r2
 801179a:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	2203      	movs	r2, #3
 80117a0:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	683a      	ldr	r2, [r7, #0]
 80117a6:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	4a0e      	ldr	r2, [pc, #56]	; (80117e8 <dns_correct_response+0x68>)
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d902      	bls.n	80117b8 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	4a0c      	ldr	r2, [pc, #48]	; (80117e8 <dns_correct_response+0x68>)
 80117b6:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	1d1a      	adds	r2, r3, #4
 80117bc:	79fb      	ldrb	r3, [r7, #7]
 80117be:	4611      	mov	r1, r2
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7ff fe11 	bl	80113e8 <dns_call_found>

  if (entry->ttl == 0) {
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d106      	bne.n	80117dc <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	7a9b      	ldrb	r3, [r3, #10]
 80117d2:	2b03      	cmp	r3, #3
 80117d4:	d102      	bne.n	80117dc <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	2200      	movs	r2, #0
 80117da:	729a      	strb	r2, [r3, #10]
    }
  }
}
 80117dc:	bf00      	nop
 80117de:	3710      	adds	r7, #16
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	20005040 	.word	0x20005040
 80117e8:	00093a80 	.word	0x00093a80

080117ec <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80117ec:	b590      	push	{r4, r7, lr}
 80117ee:	b091      	sub	sp, #68	; 0x44
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	607a      	str	r2, [r7, #4]
 80117f8:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	891b      	ldrh	r3, [r3, #8]
 80117fe:	2b0f      	cmp	r3, #15
 8011800:	f240 811e 	bls.w	8011a40 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8011804:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8011808:	2300      	movs	r3, #0
 801180a:	220c      	movs	r2, #12
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f002 f849 	bl	80138a4 <pbuf_copy_partial>
 8011812:	4603      	mov	r3, r0
 8011814:	2b0c      	cmp	r3, #12
 8011816:	f040 8115 	bne.w	8011a44 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 801181a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801181c:	4618      	mov	r0, r3
 801181e:	f7ff faad 	bl	8010d7c <lwip_htons>
 8011822:	4603      	mov	r3, r0
 8011824:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8011826:	2300      	movs	r3, #0
 8011828:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801182c:	e102      	b.n	8011a34 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 801182e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011832:	4613      	mov	r3, r2
 8011834:	011b      	lsls	r3, r3, #4
 8011836:	4413      	add	r3, r2
 8011838:	011b      	lsls	r3, r3, #4
 801183a:	4a92      	ldr	r2, [pc, #584]	; (8011a84 <dns_recv+0x298>)
 801183c:	4413      	add	r3, r2
 801183e:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 8011840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011842:	7a9b      	ldrb	r3, [r3, #10]
 8011844:	2b02      	cmp	r3, #2
 8011846:	f040 80f0 	bne.w	8011a2a <dns_recv+0x23e>
          (entry->txid == txid)) {
 801184a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801184c:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 801184e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011850:	429a      	cmp	r2, r3
 8011852:	f040 80ea 	bne.w	8011a2a <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 8011856:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff fa8f 	bl	8010d7c <lwip_htons>
 801185e:	4603      	mov	r3, r0
 8011860:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 8011862:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011864:	4618      	mov	r0, r3
 8011866:	f7ff fa89 	bl	8010d7c <lwip_htons>
 801186a:	4603      	mov	r3, r0
 801186c:	877b      	strh	r3, [r7, #58]	; 0x3a

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 801186e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011872:	b25b      	sxtb	r3, r3
 8011874:	2b00      	cmp	r3, #0
 8011876:	f280 80e7 	bge.w	8011a48 <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 801187a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801187c:	2b01      	cmp	r3, #1
 801187e:	f040 80e5 	bne.w	8011a4c <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	681a      	ldr	r2, [r3, #0]
 8011886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011888:	7adb      	ldrb	r3, [r3, #11]
 801188a:	4619      	mov	r1, r3
 801188c:	4b7e      	ldr	r3, [pc, #504]	; (8011a88 <dns_recv+0x29c>)
 801188e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011892:	429a      	cmp	r2, r3
 8011894:	f040 80dc 	bne.w	8011a50 <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8011898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801189a:	3310      	adds	r3, #16
 801189c:	220c      	movs	r2, #12
 801189e:	6879      	ldr	r1, [r7, #4]
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7ff fb47 	bl	8010f34 <dns_compare_name>
 80118a6:	4603      	mov	r3, r0
 80118a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 80118aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80118ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118b0:	4293      	cmp	r3, r2
 80118b2:	f000 80cf 	beq.w	8011a54 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 80118b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80118b8:	f107 0114 	add.w	r1, r7, #20
 80118bc:	2204      	movs	r2, #4
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f001 fff0 	bl	80138a4 <pbuf_copy_partial>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b04      	cmp	r3, #4
 80118c8:	f040 80c6 	bne.w	8011a58 <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 80118cc:	8afb      	ldrh	r3, [r7, #22]
 80118ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118d2:	f040 80c3 	bne.w	8011a5c <dns_recv+0x270>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 80118d6:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 80118d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118dc:	f040 80be 	bne.w	8011a5c <dns_recv+0x270>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 80118e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80118e2:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80118e6:	4293      	cmp	r3, r2
 80118e8:	f200 80ba 	bhi.w	8011a60 <dns_recv+0x274>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 80118ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80118ee:	3304      	adds	r3, #4
 80118f0:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 80118f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118f6:	f003 030f 	and.w	r3, r3, #15
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d078      	beq.n	80119f0 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 80118fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011900:	f7ff fe62 	bl	80115c8 <dns_backupserver_available>
 8011904:	4603      	mov	r3, r0
 8011906:	2b00      	cmp	r3, #0
 8011908:	d07a      	beq.n	8011a00 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 801190a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801190c:	2203      	movs	r2, #3
 801190e:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 8011910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011912:	2201      	movs	r2, #1
 8011914:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 8011916:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801191a:	4618      	mov	r0, r3
 801191c:	f7ff fe74 	bl	8011608 <dns_check_entry>

            goto ignore_packet;
 8011920:	e0a9      	b.n	8011a76 <dns_recv+0x28a>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 8011922:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011924:	4619      	mov	r1, r3
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f7ff fb92 	bl	8011050 <dns_skip_name>
 801192c:	4603      	mov	r3, r0
 801192e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 8011930:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011936:	4293      	cmp	r3, r2
 8011938:	f000 8094 	beq.w	8011a64 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 801193c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801193e:	f107 0118 	add.w	r1, r7, #24
 8011942:	220a      	movs	r2, #10
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f001 ffad 	bl	80138a4 <pbuf_copy_partial>
 801194a:	4603      	mov	r3, r0
 801194c:	2b0a      	cmp	r3, #10
 801194e:	f040 808b 	bne.w	8011a68 <dns_recv+0x27c>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8011952:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011954:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011958:	4293      	cmp	r3, r2
 801195a:	f200 8087 	bhi.w	8011a6c <dns_recv+0x280>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 801195e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011960:	330a      	adds	r3, #10
 8011962:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8011964:	8b7b      	ldrh	r3, [r7, #26]
 8011966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801196a:	d12b      	bne.n	80119c4 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 801196c:	8b3b      	ldrh	r3, [r7, #24]
 801196e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011972:	d127      	bne.n	80119c4 <dns_recv+0x1d8>
 8011974:	8c3b      	ldrh	r3, [r7, #32]
 8011976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801197a:	d123      	bne.n	80119c4 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 801197c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801197e:	f107 0110 	add.w	r1, r7, #16
 8011982:	2204      	movs	r2, #4
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f001 ff8d 	bl	80138a4 <pbuf_copy_partial>
 801198a:	4603      	mov	r3, r0
 801198c:	2b04      	cmp	r3, #4
 801198e:	d16f      	bne.n	8011a70 <dns_recv+0x284>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8011990:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011994:	6939      	ldr	r1, [r7, #16]
 8011996:	483b      	ldr	r0, [pc, #236]	; (8011a84 <dns_recv+0x298>)
 8011998:	4613      	mov	r3, r2
 801199a:	011b      	lsls	r3, r3, #4
 801199c:	4413      	add	r3, r2
 801199e:	011b      	lsls	r3, r3, #4
 80119a0:	4403      	add	r3, r0
 80119a2:	3304      	adds	r3, #4
 80119a4:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f001 fd76 	bl	8013498 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7ff f9f9 	bl	8010da6 <lwip_htonl>
 80119b4:	4602      	mov	r2, r0
 80119b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80119ba:	4611      	mov	r1, r2
 80119bc:	4618      	mov	r0, r3
 80119be:	f7ff fedf 	bl	8011780 <dns_correct_response>
 80119c2:	e05c      	b.n	8011a7e <dns_recv+0x292>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 80119c4:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 80119c6:	8c3b      	ldrh	r3, [r7, #32]
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7ff f9d7 	bl	8010d7c <lwip_htons>
 80119ce:	4603      	mov	r3, r0
 80119d0:	4423      	add	r3, r4
 80119d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80119d6:	da4d      	bge.n	8011a74 <dns_recv+0x288>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80119d8:	8c3b      	ldrh	r3, [r7, #32]
 80119da:	4618      	mov	r0, r3
 80119dc:	f7ff f9ce 	bl	8010d7c <lwip_htons>
 80119e0:	4603      	mov	r3, r0
 80119e2:	461a      	mov	r2, r3
 80119e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80119e6:	4413      	add	r3, r2
 80119e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 80119ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80119ec:	3b01      	subs	r3, #1
 80119ee:	877b      	strh	r3, [r7, #58]	; 0x3a
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 80119f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d004      	beq.n	8011a00 <dns_recv+0x214>
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	891b      	ldrh	r3, [r3, #8]
 80119fa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d390      	bcc.n	8011922 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f001 fd49 	bl	8013498 <pbuf_free>
        dns_call_found(i, NULL);
 8011a06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a0a:	2100      	movs	r1, #0
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7ff fceb 	bl	80113e8 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8011a12:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011a16:	491b      	ldr	r1, [pc, #108]	; (8011a84 <dns_recv+0x298>)
 8011a18:	4613      	mov	r3, r2
 8011a1a:	011b      	lsls	r3, r3, #4
 8011a1c:	4413      	add	r3, r2
 8011a1e:	011b      	lsls	r3, r3, #4
 8011a20:	440b      	add	r3, r1
 8011a22:	330a      	adds	r3, #10
 8011a24:	2200      	movs	r2, #0
 8011a26:	701a      	strb	r2, [r3, #0]
        return;
 8011a28:	e029      	b.n	8011a7e <dns_recv+0x292>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8011a2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a2e:	3301      	adds	r3, #1
 8011a30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011a34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a38:	2b03      	cmp	r3, #3
 8011a3a:	f67f aef8 	bls.w	801182e <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 8011a3e:	e001      	b.n	8011a44 <dns_recv+0x258>
    goto ignore_packet;
 8011a40:	bf00      	nop
 8011a42:	e018      	b.n	8011a76 <dns_recv+0x28a>
ignore_packet:
 8011a44:	bf00      	nop
 8011a46:	e016      	b.n	8011a76 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8011a48:	bf00      	nop
 8011a4a:	e014      	b.n	8011a76 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8011a4c:	bf00      	nop
 8011a4e:	e012      	b.n	8011a76 <dns_recv+0x28a>
            goto ignore_packet; /* ignore this packet */
 8011a50:	bf00      	nop
 8011a52:	e010      	b.n	8011a76 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8011a54:	bf00      	nop
 8011a56:	e00e      	b.n	8011a76 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8011a58:	bf00      	nop
 8011a5a:	e00c      	b.n	8011a76 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8011a5c:	bf00      	nop
 8011a5e:	e00a      	b.n	8011a76 <dns_recv+0x28a>
          goto ignore_packet;
 8011a60:	bf00      	nop
 8011a62:	e008      	b.n	8011a76 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8011a64:	bf00      	nop
 8011a66:	e006      	b.n	8011a76 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8011a68:	bf00      	nop
 8011a6a:	e004      	b.n	8011a76 <dns_recv+0x28a>
              goto ignore_packet;
 8011a6c:	bf00      	nop
 8011a6e:	e002      	b.n	8011a76 <dns_recv+0x28a>
                    goto ignore_packet; /* ignore this packet */
 8011a70:	bf00      	nop
 8011a72:	e000      	b.n	8011a76 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8011a74:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f001 fd0e 	bl	8013498 <pbuf_free>
  return;
 8011a7c:	bf00      	nop
}
 8011a7e:	3744      	adds	r7, #68	; 0x44
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd90      	pop	{r4, r7, pc}
 8011a84:	20005040 	.word	0x20005040
 8011a88:	200054b0 	.word	0x200054b0

08011a8c <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b08a      	sub	sp, #40	; 0x28
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	607a      	str	r2, [r7, #4]
 8011a98:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011aa4:	e056      	b.n	8011b54 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8011aa6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011aaa:	4990      	ldr	r1, [pc, #576]	; (8011cec <dns_enqueue+0x260>)
 8011aac:	4613      	mov	r3, r2
 8011aae:	011b      	lsls	r3, r3, #4
 8011ab0:	4413      	add	r3, r2
 8011ab2:	011b      	lsls	r3, r3, #4
 8011ab4:	440b      	add	r3, r1
 8011ab6:	330a      	adds	r3, #10
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	2b02      	cmp	r3, #2
 8011abc:	d145      	bne.n	8011b4a <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8011abe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	011b      	lsls	r3, r3, #4
 8011ac6:	4413      	add	r3, r2
 8011ac8:	011b      	lsls	r3, r3, #4
 8011aca:	3310      	adds	r3, #16
 8011acc:	4a87      	ldr	r2, [pc, #540]	; (8011cec <dns_enqueue+0x260>)
 8011ace:	4413      	add	r3, r2
 8011ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	68f8      	ldr	r0, [r7, #12]
 8011ad8:	f7ff f97e 	bl	8010dd8 <lwip_strnicmp>
 8011adc:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d133      	bne.n	8011b4a <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	76fb      	strb	r3, [r7, #27]
 8011ae6:	e02d      	b.n	8011b44 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 8011ae8:	7efa      	ldrb	r2, [r7, #27]
 8011aea:	4981      	ldr	r1, [pc, #516]	; (8011cf0 <dns_enqueue+0x264>)
 8011aec:	4613      	mov	r3, r2
 8011aee:	005b      	lsls	r3, r3, #1
 8011af0:	4413      	add	r3, r2
 8011af2:	009b      	lsls	r3, r3, #2
 8011af4:	440b      	add	r3, r1
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d120      	bne.n	8011b3e <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 8011afc:	7efa      	ldrb	r2, [r7, #27]
 8011afe:	497c      	ldr	r1, [pc, #496]	; (8011cf0 <dns_enqueue+0x264>)
 8011b00:	4613      	mov	r3, r2
 8011b02:	005b      	lsls	r3, r3, #1
 8011b04:	4413      	add	r3, r2
 8011b06:	009b      	lsls	r3, r3, #2
 8011b08:	440b      	add	r3, r1
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 8011b0e:	7efa      	ldrb	r2, [r7, #27]
 8011b10:	4977      	ldr	r1, [pc, #476]	; (8011cf0 <dns_enqueue+0x264>)
 8011b12:	4613      	mov	r3, r2
 8011b14:	005b      	lsls	r3, r3, #1
 8011b16:	4413      	add	r3, r2
 8011b18:	009b      	lsls	r3, r3, #2
 8011b1a:	440b      	add	r3, r1
 8011b1c:	3304      	adds	r3, #4
 8011b1e:	683a      	ldr	r2, [r7, #0]
 8011b20:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 8011b22:	7efa      	ldrb	r2, [r7, #27]
 8011b24:	4972      	ldr	r1, [pc, #456]	; (8011cf0 <dns_enqueue+0x264>)
 8011b26:	4613      	mov	r3, r2
 8011b28:	005b      	lsls	r3, r3, #1
 8011b2a:	4413      	add	r3, r2
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	440b      	add	r3, r1
 8011b30:	3308      	adds	r3, #8
 8011b32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011b36:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 8011b38:	f06f 0304 	mvn.w	r3, #4
 8011b3c:	e0d1      	b.n	8011ce2 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8011b3e:	7efb      	ldrb	r3, [r7, #27]
 8011b40:	3301      	adds	r3, #1
 8011b42:	76fb      	strb	r3, [r7, #27]
 8011b44:	7efb      	ldrb	r3, [r7, #27]
 8011b46:	2b03      	cmp	r3, #3
 8011b48:	d9ce      	bls.n	8011ae8 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8011b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b4e:	3301      	adds	r3, #1
 8011b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b58:	2b03      	cmp	r3, #3
 8011b5a:	d9a4      	bls.n	8011aa6 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 8011b62:	2304      	movs	r3, #4
 8011b64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8011b68:	2300      	movs	r3, #0
 8011b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b6e:	e027      	b.n	8011bc0 <dns_enqueue+0x134>
    entry = &dns_table[i];
 8011b70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011b74:	4613      	mov	r3, r2
 8011b76:	011b      	lsls	r3, r3, #4
 8011b78:	4413      	add	r3, r2
 8011b7a:	011b      	lsls	r3, r3, #4
 8011b7c:	4a5b      	ldr	r2, [pc, #364]	; (8011cec <dns_enqueue+0x260>)
 8011b7e:	4413      	add	r3, r2
 8011b80:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 8011b82:	6a3b      	ldr	r3, [r7, #32]
 8011b84:	7a9b      	ldrb	r3, [r3, #10]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d01f      	beq.n	8011bca <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 8011b8a:	6a3b      	ldr	r3, [r7, #32]
 8011b8c:	7a9b      	ldrb	r3, [r3, #10]
 8011b8e:	2b03      	cmp	r3, #3
 8011b90:	d111      	bne.n	8011bb6 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8011b92:	4b58      	ldr	r3, [pc, #352]	; (8011cf4 <dns_enqueue+0x268>)
 8011b94:	781a      	ldrb	r2, [r3, #0]
 8011b96:	6a3b      	ldr	r3, [r7, #32]
 8011b98:	7b9b      	ldrb	r3, [r3, #14]
 8011b9a:	1ad3      	subs	r3, r2, r3
 8011b9c:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 8011b9e:	7eba      	ldrb	r2, [r7, #26]
 8011ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d906      	bls.n	8011bb6 <dns_enqueue+0x12a>
        lseq = age;
 8011ba8:	7ebb      	ldrb	r3, [r7, #26]
 8011baa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 8011bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8011bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bba:	3301      	adds	r3, #1
 8011bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bc4:	2b03      	cmp	r3, #3
 8011bc6:	d9d3      	bls.n	8011b70 <dns_enqueue+0xe4>
 8011bc8:	e000      	b.n	8011bcc <dns_enqueue+0x140>
      break;
 8011bca:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 8011bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bd0:	2b04      	cmp	r3, #4
 8011bd2:	d11f      	bne.n	8011c14 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8011bd4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011bd8:	2b03      	cmp	r3, #3
 8011bda:	d80b      	bhi.n	8011bf4 <dns_enqueue+0x168>
 8011bdc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8011be0:	4942      	ldr	r1, [pc, #264]	; (8011cec <dns_enqueue+0x260>)
 8011be2:	4613      	mov	r3, r2
 8011be4:	011b      	lsls	r3, r3, #4
 8011be6:	4413      	add	r3, r2
 8011be8:	011b      	lsls	r3, r3, #4
 8011bea:	440b      	add	r3, r1
 8011bec:	330a      	adds	r3, #10
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	2b03      	cmp	r3, #3
 8011bf2:	d002      	beq.n	8011bfa <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 8011bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bf8:	e073      	b.n	8011ce2 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 8011bfa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 8011c02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011c06:	4613      	mov	r3, r2
 8011c08:	011b      	lsls	r3, r3, #4
 8011c0a:	4413      	add	r3, r2
 8011c0c:	011b      	lsls	r3, r3, #4
 8011c0e:	4a37      	ldr	r2, [pc, #220]	; (8011cec <dns_enqueue+0x260>)
 8011c10:	4413      	add	r3, r2
 8011c12:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 8011c14:	2300      	movs	r3, #0
 8011c16:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8011c18:	2300      	movs	r3, #0
 8011c1a:	76fb      	strb	r3, [r7, #27]
 8011c1c:	e015      	b.n	8011c4a <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 8011c1e:	7efa      	ldrb	r2, [r7, #27]
 8011c20:	4933      	ldr	r1, [pc, #204]	; (8011cf0 <dns_enqueue+0x264>)
 8011c22:	4613      	mov	r3, r2
 8011c24:	005b      	lsls	r3, r3, #1
 8011c26:	4413      	add	r3, r2
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	440b      	add	r3, r1
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d108      	bne.n	8011c44 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 8011c32:	7efa      	ldrb	r2, [r7, #27]
 8011c34:	4613      	mov	r3, r2
 8011c36:	005b      	lsls	r3, r3, #1
 8011c38:	4413      	add	r3, r2
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	4a2c      	ldr	r2, [pc, #176]	; (8011cf0 <dns_enqueue+0x264>)
 8011c3e:	4413      	add	r3, r2
 8011c40:	61fb      	str	r3, [r7, #28]
      break;
 8011c42:	e005      	b.n	8011c50 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8011c44:	7efb      	ldrb	r3, [r7, #27]
 8011c46:	3301      	adds	r3, #1
 8011c48:	76fb      	strb	r3, [r7, #27]
 8011c4a:	7efb      	ldrb	r3, [r7, #27]
 8011c4c:	2b03      	cmp	r3, #3
 8011c4e:	d9e6      	bls.n	8011c1e <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d102      	bne.n	8011c5c <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 8011c56:	f04f 33ff 	mov.w	r3, #4294967295
 8011c5a:	e042      	b.n	8011ce2 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011c62:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 8011c64:	6a3b      	ldr	r3, [r7, #32]
 8011c66:	2201      	movs	r2, #1
 8011c68:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 8011c6a:	4b22      	ldr	r3, [pc, #136]	; (8011cf4 <dns_enqueue+0x268>)
 8011c6c:	781a      	ldrb	r2, [r3, #0]
 8011c6e:	6a3b      	ldr	r3, [r7, #32]
 8011c70:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	687a      	ldr	r2, [r7, #4]
 8011c76:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 8011c78:	69fb      	ldr	r3, [r7, #28]
 8011c7a:	683a      	ldr	r2, [r7, #0]
 8011c7c:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	2bff      	cmp	r3, #255	; 0xff
 8011c82:	bf28      	it	cs
 8011c84:	23ff      	movcs	r3, #255	; 0xff
 8011c86:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 8011c88:	6a3b      	ldr	r3, [r7, #32]
 8011c8a:	3310      	adds	r3, #16
 8011c8c:	697a      	ldr	r2, [r7, #20]
 8011c8e:	68f9      	ldr	r1, [r7, #12]
 8011c90:	4618      	mov	r0, r3
 8011c92:	f00d fd41 	bl	801f718 <memcpy>
  entry->name[namelen] = 0;
 8011c96:	6a3a      	ldr	r2, [r7, #32]
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	4413      	add	r3, r2
 8011c9c:	3310      	adds	r3, #16
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 8011ca2:	f7ff fb4f 	bl	8011344 <dns_alloc_pcb>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	461a      	mov	r2, r3
 8011caa:	6a3b      	ldr	r3, [r7, #32]
 8011cac:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 8011cae:	6a3b      	ldr	r3, [r7, #32]
 8011cb0:	7bdb      	ldrb	r3, [r3, #15]
 8011cb2:	2b03      	cmp	r3, #3
 8011cb4:	d908      	bls.n	8011cc8 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 8011cb6:	6a3b      	ldr	r3, [r7, #32]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 8011cbc:	69fb      	ldr	r3, [r7, #28]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 8011cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8011cc6:	e00c      	b.n	8011ce2 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 8011cc8:	4b0a      	ldr	r3, [pc, #40]	; (8011cf4 <dns_enqueue+0x268>)
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	3301      	adds	r3, #1
 8011cce:	b2da      	uxtb	r2, r3
 8011cd0:	4b08      	ldr	r3, [pc, #32]	; (8011cf4 <dns_enqueue+0x268>)
 8011cd2:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 8011cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7ff fc95 	bl	8011608 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 8011cde:	f06f 0304 	mvn.w	r3, #4
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3728      	adds	r7, #40	; 0x28
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	20005040 	.word	0x20005040
 8011cf0:	20005480 	.word	0x20005480
 8011cf4:	2000503d 	.word	0x2000503d

08011cf8 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b086      	sub	sp, #24
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	60f8      	str	r0, [r7, #12]
 8011d00:	60b9      	str	r1, [r7, #8]
 8011d02:	607a      	str	r2, [r7, #4]
 8011d04:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d006      	beq.n	8011d1a <dns_gethostbyname_addrtype+0x22>
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d003      	beq.n	8011d1a <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d102      	bne.n	8011d20 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 8011d1a:	f06f 030f 	mvn.w	r3, #15
 8011d1e:	e029      	b.n	8011d74 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	f7ee fa55 	bl	80001d0 <strlen>
 8011d26:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	2bff      	cmp	r3, #255	; 0xff
 8011d2c:	d902      	bls.n	8011d34 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 8011d2e:	f06f 030f 	mvn.w	r3, #15
 8011d32:	e01f      	b.n	8011d74 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8011d34:	68b9      	ldr	r1, [r7, #8]
 8011d36:	68f8      	ldr	r0, [r7, #12]
 8011d38:	f00c f9bc 	bl	801e0b4 <ip4addr_aton>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d001      	beq.n	8011d46 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8011d42:	2300      	movs	r3, #0
 8011d44:	e016      	b.n	8011d74 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 8011d46:	68b9      	ldr	r1, [r7, #8]
 8011d48:	68f8      	ldr	r0, [r7, #12]
 8011d4a:	f7ff f8b1 	bl	8010eb0 <dns_lookup>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d101      	bne.n	8011d58 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 8011d54:	2300      	movs	r3, #0
 8011d56:	e00d      	b.n	8011d74 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 8011d58:	4b08      	ldr	r3, [pc, #32]	; (8011d7c <dns_gethostbyname_addrtype+0x84>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d102      	bne.n	8011d66 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 8011d60:	f06f 0305 	mvn.w	r3, #5
 8011d64:	e006      	b.n	8011d74 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	687a      	ldr	r2, [r7, #4]
 8011d6a:	6979      	ldr	r1, [r7, #20]
 8011d6c:	68f8      	ldr	r0, [r7, #12]
 8011d6e:	f7ff fe8d 	bl	8011a8c <dns_enqueue>
 8011d72:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3718      	adds	r7, #24
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}
 8011d7c:	200054b0 	.word	0x200054b0

08011d80 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011d86:	2300      	movs	r3, #0
 8011d88:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011d8a:	f00d fb05 	bl	801f398 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011d8e:	f000 f8d7 	bl	8011f40 <mem_init>
  memp_init();
 8011d92:	f000 fc33 	bl	80125fc <memp_init>
  pbuf_init();
  netif_init();
 8011d96:	f000 fcf9 	bl	801278c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011d9a:	f008 f955 	bl	801a048 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011d9e:	f001 ffa1 	bl	8013ce4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8011da2:	f7ff f854 	bl	8010e4e <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011da6:	f008 f895 	bl	8019ed4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011daa:	bf00      	nop
 8011dac:	3708      	adds	r7, #8
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
	...

08011db4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011db4:	b480      	push	{r7}
 8011db6:	b083      	sub	sp, #12
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	4603      	mov	r3, r0
 8011dbc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011dbe:	4b05      	ldr	r3, [pc, #20]	; (8011dd4 <ptr_to_mem+0x20>)
 8011dc0:	681a      	ldr	r2, [r3, #0]
 8011dc2:	88fb      	ldrh	r3, [r7, #6]
 8011dc4:	4413      	add	r3, r2
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	370c      	adds	r7, #12
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr
 8011dd2:	bf00      	nop
 8011dd4:	200054b8 	.word	0x200054b8

08011dd8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011de0:	4b05      	ldr	r3, [pc, #20]	; (8011df8 <mem_to_ptr+0x20>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	687a      	ldr	r2, [r7, #4]
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	b29b      	uxth	r3, r3
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	370c      	adds	r7, #12
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr
 8011df6:	bf00      	nop
 8011df8:	200054b8 	.word	0x200054b8

08011dfc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011dfc:	b590      	push	{r4, r7, lr}
 8011dfe:	b085      	sub	sp, #20
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011e04:	4b45      	ldr	r3, [pc, #276]	; (8011f1c <plug_holes+0x120>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d206      	bcs.n	8011e1c <plug_holes+0x20>
 8011e0e:	4b44      	ldr	r3, [pc, #272]	; (8011f20 <plug_holes+0x124>)
 8011e10:	f240 12df 	movw	r2, #479	; 0x1df
 8011e14:	4943      	ldr	r1, [pc, #268]	; (8011f24 <plug_holes+0x128>)
 8011e16:	4844      	ldr	r0, [pc, #272]	; (8011f28 <plug_holes+0x12c>)
 8011e18:	f00d fd68 	bl	801f8ec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011e1c:	4b43      	ldr	r3, [pc, #268]	; (8011f2c <plug_holes+0x130>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	687a      	ldr	r2, [r7, #4]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d306      	bcc.n	8011e34 <plug_holes+0x38>
 8011e26:	4b3e      	ldr	r3, [pc, #248]	; (8011f20 <plug_holes+0x124>)
 8011e28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011e2c:	4940      	ldr	r1, [pc, #256]	; (8011f30 <plug_holes+0x134>)
 8011e2e:	483e      	ldr	r0, [pc, #248]	; (8011f28 <plug_holes+0x12c>)
 8011e30:	f00d fd5c 	bl	801f8ec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	791b      	ldrb	r3, [r3, #4]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d006      	beq.n	8011e4a <plug_holes+0x4e>
 8011e3c:	4b38      	ldr	r3, [pc, #224]	; (8011f20 <plug_holes+0x124>)
 8011e3e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011e42:	493c      	ldr	r1, [pc, #240]	; (8011f34 <plug_holes+0x138>)
 8011e44:	4838      	ldr	r0, [pc, #224]	; (8011f28 <plug_holes+0x12c>)
 8011e46:	f00d fd51 	bl	801f8ec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	881b      	ldrh	r3, [r3, #0]
 8011e4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011e52:	d906      	bls.n	8011e62 <plug_holes+0x66>
 8011e54:	4b32      	ldr	r3, [pc, #200]	; (8011f20 <plug_holes+0x124>)
 8011e56:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8011e5a:	4937      	ldr	r1, [pc, #220]	; (8011f38 <plug_holes+0x13c>)
 8011e5c:	4832      	ldr	r0, [pc, #200]	; (8011f28 <plug_holes+0x12c>)
 8011e5e:	f00d fd45 	bl	801f8ec <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	881b      	ldrh	r3, [r3, #0]
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7ff ffa4 	bl	8011db4 <ptr_to_mem>
 8011e6c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011e6e:	687a      	ldr	r2, [r7, #4]
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d024      	beq.n	8011ec0 <plug_holes+0xc4>
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	791b      	ldrb	r3, [r3, #4]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d120      	bne.n	8011ec0 <plug_holes+0xc4>
 8011e7e:	4b2b      	ldr	r3, [pc, #172]	; (8011f2c <plug_holes+0x130>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	68fa      	ldr	r2, [r7, #12]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d01b      	beq.n	8011ec0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011e88:	4b2c      	ldr	r3, [pc, #176]	; (8011f3c <plug_holes+0x140>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	68fa      	ldr	r2, [r7, #12]
 8011e8e:	429a      	cmp	r2, r3
 8011e90:	d102      	bne.n	8011e98 <plug_holes+0x9c>
      lfree = mem;
 8011e92:	4a2a      	ldr	r2, [pc, #168]	; (8011f3c <plug_holes+0x140>)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	881a      	ldrh	r2, [r3, #0]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	881b      	ldrh	r3, [r3, #0]
 8011ea4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011ea8:	d00a      	beq.n	8011ec0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	881b      	ldrh	r3, [r3, #0]
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7ff ff80 	bl	8011db4 <ptr_to_mem>
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f7ff ff8e 	bl	8011dd8 <mem_to_ptr>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	885b      	ldrh	r3, [r3, #2]
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7ff ff75 	bl	8011db4 <ptr_to_mem>
 8011eca:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011ecc:	68ba      	ldr	r2, [r7, #8]
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d01f      	beq.n	8011f14 <plug_holes+0x118>
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	791b      	ldrb	r3, [r3, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d11b      	bne.n	8011f14 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011edc:	4b17      	ldr	r3, [pc, #92]	; (8011f3c <plug_holes+0x140>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d102      	bne.n	8011eec <plug_holes+0xf0>
      lfree = pmem;
 8011ee6:	4a15      	ldr	r2, [pc, #84]	; (8011f3c <plug_holes+0x140>)
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	881a      	ldrh	r2, [r3, #0]
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	881b      	ldrh	r3, [r3, #0]
 8011ef8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011efc:	d00a      	beq.n	8011f14 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	881b      	ldrh	r3, [r3, #0]
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7ff ff56 	bl	8011db4 <ptr_to_mem>
 8011f08:	4604      	mov	r4, r0
 8011f0a:	68b8      	ldr	r0, [r7, #8]
 8011f0c:	f7ff ff64 	bl	8011dd8 <mem_to_ptr>
 8011f10:	4603      	mov	r3, r0
 8011f12:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011f14:	bf00      	nop
 8011f16:	3714      	adds	r7, #20
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd90      	pop	{r4, r7, pc}
 8011f1c:	200054b8 	.word	0x200054b8
 8011f20:	080225a4 	.word	0x080225a4
 8011f24:	080225d4 	.word	0x080225d4
 8011f28:	080225ec 	.word	0x080225ec
 8011f2c:	200054bc 	.word	0x200054bc
 8011f30:	08022614 	.word	0x08022614
 8011f34:	08022630 	.word	0x08022630
 8011f38:	0802264c 	.word	0x0802264c
 8011f3c:	200054c4 	.word	0x200054c4

08011f40 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011f46:	4b1f      	ldr	r3, [pc, #124]	; (8011fc4 <mem_init+0x84>)
 8011f48:	3303      	adds	r3, #3
 8011f4a:	f023 0303 	bic.w	r3, r3, #3
 8011f4e:	461a      	mov	r2, r3
 8011f50:	4b1d      	ldr	r3, [pc, #116]	; (8011fc8 <mem_init+0x88>)
 8011f52:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011f54:	4b1c      	ldr	r3, [pc, #112]	; (8011fc8 <mem_init+0x88>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011f60:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2200      	movs	r2, #0
 8011f66:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011f6e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8011f72:	f7ff ff1f 	bl	8011db4 <ptr_to_mem>
 8011f76:	4603      	mov	r3, r0
 8011f78:	4a14      	ldr	r2, [pc, #80]	; (8011fcc <mem_init+0x8c>)
 8011f7a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011f7c:	4b13      	ldr	r3, [pc, #76]	; (8011fcc <mem_init+0x8c>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	2201      	movs	r2, #1
 8011f82:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011f84:	4b11      	ldr	r3, [pc, #68]	; (8011fcc <mem_init+0x8c>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011f8c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011f8e:	4b0f      	ldr	r3, [pc, #60]	; (8011fcc <mem_init+0x8c>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011f96:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011f98:	4b0b      	ldr	r3, [pc, #44]	; (8011fc8 <mem_init+0x88>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4a0c      	ldr	r2, [pc, #48]	; (8011fd0 <mem_init+0x90>)
 8011f9e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011fa0:	480c      	ldr	r0, [pc, #48]	; (8011fd4 <mem_init+0x94>)
 8011fa2:	f00d fa05 	bl	801f3b0 <sys_mutex_new>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d006      	beq.n	8011fba <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011fac:	4b0a      	ldr	r3, [pc, #40]	; (8011fd8 <mem_init+0x98>)
 8011fae:	f240 221f 	movw	r2, #543	; 0x21f
 8011fb2:	490a      	ldr	r1, [pc, #40]	; (8011fdc <mem_init+0x9c>)
 8011fb4:	480a      	ldr	r0, [pc, #40]	; (8011fe0 <mem_init+0xa0>)
 8011fb6:	f00d fc99 	bl	801f8ec <iprintf>
  }
}
 8011fba:	bf00      	nop
 8011fbc:	3708      	adds	r7, #8
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	200133c8 	.word	0x200133c8
 8011fc8:	200054b8 	.word	0x200054b8
 8011fcc:	200054bc 	.word	0x200054bc
 8011fd0:	200054c4 	.word	0x200054c4
 8011fd4:	200054c0 	.word	0x200054c0
 8011fd8:	080225a4 	.word	0x080225a4
 8011fdc:	08022678 	.word	0x08022678
 8011fe0:	080225ec 	.word	0x080225ec

08011fe4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b086      	sub	sp, #24
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	f7ff fef3 	bl	8011dd8 <mem_to_ptr>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	881b      	ldrh	r3, [r3, #0]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7ff feda 	bl	8011db4 <ptr_to_mem>
 8012000:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	885b      	ldrh	r3, [r3, #2]
 8012006:	4618      	mov	r0, r3
 8012008:	f7ff fed4 	bl	8011db4 <ptr_to_mem>
 801200c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	881b      	ldrh	r3, [r3, #0]
 8012012:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012016:	d818      	bhi.n	801204a <mem_link_valid+0x66>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	885b      	ldrh	r3, [r3, #2]
 801201c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012020:	d813      	bhi.n	801204a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012026:	8afa      	ldrh	r2, [r7, #22]
 8012028:	429a      	cmp	r2, r3
 801202a:	d004      	beq.n	8012036 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	881b      	ldrh	r3, [r3, #0]
 8012030:	8afa      	ldrh	r2, [r7, #22]
 8012032:	429a      	cmp	r2, r3
 8012034:	d109      	bne.n	801204a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012036:	4b08      	ldr	r3, [pc, #32]	; (8012058 <mem_link_valid+0x74>)
 8012038:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801203a:	693a      	ldr	r2, [r7, #16]
 801203c:	429a      	cmp	r2, r3
 801203e:	d006      	beq.n	801204e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	885b      	ldrh	r3, [r3, #2]
 8012044:	8afa      	ldrh	r2, [r7, #22]
 8012046:	429a      	cmp	r2, r3
 8012048:	d001      	beq.n	801204e <mem_link_valid+0x6a>
    return 0;
 801204a:	2300      	movs	r3, #0
 801204c:	e000      	b.n	8012050 <mem_link_valid+0x6c>
  }
  return 1;
 801204e:	2301      	movs	r3, #1
}
 8012050:	4618      	mov	r0, r3
 8012052:	3718      	adds	r7, #24
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}
 8012058:	200054bc 	.word	0x200054bc

0801205c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b088      	sub	sp, #32
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d070      	beq.n	801214c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f003 0303 	and.w	r3, r3, #3
 8012070:	2b00      	cmp	r3, #0
 8012072:	d00d      	beq.n	8012090 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012074:	4b37      	ldr	r3, [pc, #220]	; (8012154 <mem_free+0xf8>)
 8012076:	f240 2273 	movw	r2, #627	; 0x273
 801207a:	4937      	ldr	r1, [pc, #220]	; (8012158 <mem_free+0xfc>)
 801207c:	4837      	ldr	r0, [pc, #220]	; (801215c <mem_free+0x100>)
 801207e:	f00d fc35 	bl	801f8ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012082:	f00d f9e7 	bl	801f454 <sys_arch_protect>
 8012086:	60f8      	str	r0, [r7, #12]
 8012088:	68f8      	ldr	r0, [r7, #12]
 801208a:	f00d f9f1 	bl	801f470 <sys_arch_unprotect>
    return;
 801208e:	e05e      	b.n	801214e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	3b08      	subs	r3, #8
 8012094:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012096:	4b32      	ldr	r3, [pc, #200]	; (8012160 <mem_free+0x104>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	69fa      	ldr	r2, [r7, #28]
 801209c:	429a      	cmp	r2, r3
 801209e:	d306      	bcc.n	80120ae <mem_free+0x52>
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f103 020c 	add.w	r2, r3, #12
 80120a6:	4b2f      	ldr	r3, [pc, #188]	; (8012164 <mem_free+0x108>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d90d      	bls.n	80120ca <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80120ae:	4b29      	ldr	r3, [pc, #164]	; (8012154 <mem_free+0xf8>)
 80120b0:	f240 227f 	movw	r2, #639	; 0x27f
 80120b4:	492c      	ldr	r1, [pc, #176]	; (8012168 <mem_free+0x10c>)
 80120b6:	4829      	ldr	r0, [pc, #164]	; (801215c <mem_free+0x100>)
 80120b8:	f00d fc18 	bl	801f8ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80120bc:	f00d f9ca 	bl	801f454 <sys_arch_protect>
 80120c0:	6138      	str	r0, [r7, #16]
 80120c2:	6938      	ldr	r0, [r7, #16]
 80120c4:	f00d f9d4 	bl	801f470 <sys_arch_unprotect>
    return;
 80120c8:	e041      	b.n	801214e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80120ca:	4828      	ldr	r0, [pc, #160]	; (801216c <mem_free+0x110>)
 80120cc:	f00d f986 	bl	801f3dc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	791b      	ldrb	r3, [r3, #4]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d110      	bne.n	80120fa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80120d8:	4b1e      	ldr	r3, [pc, #120]	; (8012154 <mem_free+0xf8>)
 80120da:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80120de:	4924      	ldr	r1, [pc, #144]	; (8012170 <mem_free+0x114>)
 80120e0:	481e      	ldr	r0, [pc, #120]	; (801215c <mem_free+0x100>)
 80120e2:	f00d fc03 	bl	801f8ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80120e6:	4821      	ldr	r0, [pc, #132]	; (801216c <mem_free+0x110>)
 80120e8:	f00d f987 	bl	801f3fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80120ec:	f00d f9b2 	bl	801f454 <sys_arch_protect>
 80120f0:	6178      	str	r0, [r7, #20]
 80120f2:	6978      	ldr	r0, [r7, #20]
 80120f4:	f00d f9bc 	bl	801f470 <sys_arch_unprotect>
    return;
 80120f8:	e029      	b.n	801214e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80120fa:	69f8      	ldr	r0, [r7, #28]
 80120fc:	f7ff ff72 	bl	8011fe4 <mem_link_valid>
 8012100:	4603      	mov	r3, r0
 8012102:	2b00      	cmp	r3, #0
 8012104:	d110      	bne.n	8012128 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012106:	4b13      	ldr	r3, [pc, #76]	; (8012154 <mem_free+0xf8>)
 8012108:	f240 2295 	movw	r2, #661	; 0x295
 801210c:	4919      	ldr	r1, [pc, #100]	; (8012174 <mem_free+0x118>)
 801210e:	4813      	ldr	r0, [pc, #76]	; (801215c <mem_free+0x100>)
 8012110:	f00d fbec 	bl	801f8ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012114:	4815      	ldr	r0, [pc, #84]	; (801216c <mem_free+0x110>)
 8012116:	f00d f970 	bl	801f3fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801211a:	f00d f99b 	bl	801f454 <sys_arch_protect>
 801211e:	61b8      	str	r0, [r7, #24]
 8012120:	69b8      	ldr	r0, [r7, #24]
 8012122:	f00d f9a5 	bl	801f470 <sys_arch_unprotect>
    return;
 8012126:	e012      	b.n	801214e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012128:	69fb      	ldr	r3, [r7, #28]
 801212a:	2200      	movs	r2, #0
 801212c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801212e:	4b12      	ldr	r3, [pc, #72]	; (8012178 <mem_free+0x11c>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	69fa      	ldr	r2, [r7, #28]
 8012134:	429a      	cmp	r2, r3
 8012136:	d202      	bcs.n	801213e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012138:	4a0f      	ldr	r2, [pc, #60]	; (8012178 <mem_free+0x11c>)
 801213a:	69fb      	ldr	r3, [r7, #28]
 801213c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801213e:	69f8      	ldr	r0, [r7, #28]
 8012140:	f7ff fe5c 	bl	8011dfc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012144:	4809      	ldr	r0, [pc, #36]	; (801216c <mem_free+0x110>)
 8012146:	f00d f958 	bl	801f3fa <sys_mutex_unlock>
 801214a:	e000      	b.n	801214e <mem_free+0xf2>
    return;
 801214c:	bf00      	nop
}
 801214e:	3720      	adds	r7, #32
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}
 8012154:	080225a4 	.word	0x080225a4
 8012158:	08022694 	.word	0x08022694
 801215c:	080225ec 	.word	0x080225ec
 8012160:	200054b8 	.word	0x200054b8
 8012164:	200054bc 	.word	0x200054bc
 8012168:	080226b8 	.word	0x080226b8
 801216c:	200054c0 	.word	0x200054c0
 8012170:	080226d4 	.word	0x080226d4
 8012174:	080226fc 	.word	0x080226fc
 8012178:	200054c4 	.word	0x200054c4

0801217c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b088      	sub	sp, #32
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	460b      	mov	r3, r1
 8012186:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012188:	887b      	ldrh	r3, [r7, #2]
 801218a:	3303      	adds	r3, #3
 801218c:	b29b      	uxth	r3, r3
 801218e:	f023 0303 	bic.w	r3, r3, #3
 8012192:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012194:	8bfb      	ldrh	r3, [r7, #30]
 8012196:	2b0b      	cmp	r3, #11
 8012198:	d801      	bhi.n	801219e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801219a:	230c      	movs	r3, #12
 801219c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801219e:	8bfb      	ldrh	r3, [r7, #30]
 80121a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80121a4:	d803      	bhi.n	80121ae <mem_trim+0x32>
 80121a6:	8bfa      	ldrh	r2, [r7, #30]
 80121a8:	887b      	ldrh	r3, [r7, #2]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d201      	bcs.n	80121b2 <mem_trim+0x36>
    return NULL;
 80121ae:	2300      	movs	r3, #0
 80121b0:	e0d8      	b.n	8012364 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80121b2:	4b6e      	ldr	r3, [pc, #440]	; (801236c <mem_trim+0x1f0>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d304      	bcc.n	80121c6 <mem_trim+0x4a>
 80121bc:	4b6c      	ldr	r3, [pc, #432]	; (8012370 <mem_trim+0x1f4>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	687a      	ldr	r2, [r7, #4]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d306      	bcc.n	80121d4 <mem_trim+0x58>
 80121c6:	4b6b      	ldr	r3, [pc, #428]	; (8012374 <mem_trim+0x1f8>)
 80121c8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80121cc:	496a      	ldr	r1, [pc, #424]	; (8012378 <mem_trim+0x1fc>)
 80121ce:	486b      	ldr	r0, [pc, #428]	; (801237c <mem_trim+0x200>)
 80121d0:	f00d fb8c 	bl	801f8ec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80121d4:	4b65      	ldr	r3, [pc, #404]	; (801236c <mem_trim+0x1f0>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	687a      	ldr	r2, [r7, #4]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d304      	bcc.n	80121e8 <mem_trim+0x6c>
 80121de:	4b64      	ldr	r3, [pc, #400]	; (8012370 <mem_trim+0x1f4>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	687a      	ldr	r2, [r7, #4]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d307      	bcc.n	80121f8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80121e8:	f00d f934 	bl	801f454 <sys_arch_protect>
 80121ec:	60b8      	str	r0, [r7, #8]
 80121ee:	68b8      	ldr	r0, [r7, #8]
 80121f0:	f00d f93e 	bl	801f470 <sys_arch_unprotect>
    return rmem;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	e0b5      	b.n	8012364 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	3b08      	subs	r3, #8
 80121fc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80121fe:	69b8      	ldr	r0, [r7, #24]
 8012200:	f7ff fdea 	bl	8011dd8 <mem_to_ptr>
 8012204:	4603      	mov	r3, r0
 8012206:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012208:	69bb      	ldr	r3, [r7, #24]
 801220a:	881a      	ldrh	r2, [r3, #0]
 801220c:	8afb      	ldrh	r3, [r7, #22]
 801220e:	1ad3      	subs	r3, r2, r3
 8012210:	b29b      	uxth	r3, r3
 8012212:	3b08      	subs	r3, #8
 8012214:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012216:	8bfa      	ldrh	r2, [r7, #30]
 8012218:	8abb      	ldrh	r3, [r7, #20]
 801221a:	429a      	cmp	r2, r3
 801221c:	d906      	bls.n	801222c <mem_trim+0xb0>
 801221e:	4b55      	ldr	r3, [pc, #340]	; (8012374 <mem_trim+0x1f8>)
 8012220:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8012224:	4956      	ldr	r1, [pc, #344]	; (8012380 <mem_trim+0x204>)
 8012226:	4855      	ldr	r0, [pc, #340]	; (801237c <mem_trim+0x200>)
 8012228:	f00d fb60 	bl	801f8ec <iprintf>
  if (newsize > size) {
 801222c:	8bfa      	ldrh	r2, [r7, #30]
 801222e:	8abb      	ldrh	r3, [r7, #20]
 8012230:	429a      	cmp	r2, r3
 8012232:	d901      	bls.n	8012238 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012234:	2300      	movs	r3, #0
 8012236:	e095      	b.n	8012364 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8012238:	8bfa      	ldrh	r2, [r7, #30]
 801223a:	8abb      	ldrh	r3, [r7, #20]
 801223c:	429a      	cmp	r2, r3
 801223e:	d101      	bne.n	8012244 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	e08f      	b.n	8012364 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012244:	484f      	ldr	r0, [pc, #316]	; (8012384 <mem_trim+0x208>)
 8012246:	f00d f8c9 	bl	801f3dc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	881b      	ldrh	r3, [r3, #0]
 801224e:	4618      	mov	r0, r3
 8012250:	f7ff fdb0 	bl	8011db4 <ptr_to_mem>
 8012254:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	791b      	ldrb	r3, [r3, #4]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d13f      	bne.n	80122de <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801225e:	69bb      	ldr	r3, [r7, #24]
 8012260:	881b      	ldrh	r3, [r3, #0]
 8012262:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012266:	d106      	bne.n	8012276 <mem_trim+0xfa>
 8012268:	4b42      	ldr	r3, [pc, #264]	; (8012374 <mem_trim+0x1f8>)
 801226a:	f240 22f5 	movw	r2, #757	; 0x2f5
 801226e:	4946      	ldr	r1, [pc, #280]	; (8012388 <mem_trim+0x20c>)
 8012270:	4842      	ldr	r0, [pc, #264]	; (801237c <mem_trim+0x200>)
 8012272:	f00d fb3b 	bl	801f8ec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	881b      	ldrh	r3, [r3, #0]
 801227a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801227c:	8afa      	ldrh	r2, [r7, #22]
 801227e:	8bfb      	ldrh	r3, [r7, #30]
 8012280:	4413      	add	r3, r2
 8012282:	b29b      	uxth	r3, r3
 8012284:	3308      	adds	r3, #8
 8012286:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012288:	4b40      	ldr	r3, [pc, #256]	; (801238c <mem_trim+0x210>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	693a      	ldr	r2, [r7, #16]
 801228e:	429a      	cmp	r2, r3
 8012290:	d106      	bne.n	80122a0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012292:	89fb      	ldrh	r3, [r7, #14]
 8012294:	4618      	mov	r0, r3
 8012296:	f7ff fd8d 	bl	8011db4 <ptr_to_mem>
 801229a:	4603      	mov	r3, r0
 801229c:	4a3b      	ldr	r2, [pc, #236]	; (801238c <mem_trim+0x210>)
 801229e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80122a0:	89fb      	ldrh	r3, [r7, #14]
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7ff fd86 	bl	8011db4 <ptr_to_mem>
 80122a8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80122aa:	693b      	ldr	r3, [r7, #16]
 80122ac:	2200      	movs	r2, #0
 80122ae:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80122b0:	693b      	ldr	r3, [r7, #16]
 80122b2:	89ba      	ldrh	r2, [r7, #12]
 80122b4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	8afa      	ldrh	r2, [r7, #22]
 80122ba:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80122bc:	69bb      	ldr	r3, [r7, #24]
 80122be:	89fa      	ldrh	r2, [r7, #14]
 80122c0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80122c2:	693b      	ldr	r3, [r7, #16]
 80122c4:	881b      	ldrh	r3, [r3, #0]
 80122c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80122ca:	d047      	beq.n	801235c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	881b      	ldrh	r3, [r3, #0]
 80122d0:	4618      	mov	r0, r3
 80122d2:	f7ff fd6f 	bl	8011db4 <ptr_to_mem>
 80122d6:	4602      	mov	r2, r0
 80122d8:	89fb      	ldrh	r3, [r7, #14]
 80122da:	8053      	strh	r3, [r2, #2]
 80122dc:	e03e      	b.n	801235c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80122de:	8bfb      	ldrh	r3, [r7, #30]
 80122e0:	f103 0214 	add.w	r2, r3, #20
 80122e4:	8abb      	ldrh	r3, [r7, #20]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d838      	bhi.n	801235c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80122ea:	8afa      	ldrh	r2, [r7, #22]
 80122ec:	8bfb      	ldrh	r3, [r7, #30]
 80122ee:	4413      	add	r3, r2
 80122f0:	b29b      	uxth	r3, r3
 80122f2:	3308      	adds	r3, #8
 80122f4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80122f6:	69bb      	ldr	r3, [r7, #24]
 80122f8:	881b      	ldrh	r3, [r3, #0]
 80122fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80122fe:	d106      	bne.n	801230e <mem_trim+0x192>
 8012300:	4b1c      	ldr	r3, [pc, #112]	; (8012374 <mem_trim+0x1f8>)
 8012302:	f240 3216 	movw	r2, #790	; 0x316
 8012306:	4920      	ldr	r1, [pc, #128]	; (8012388 <mem_trim+0x20c>)
 8012308:	481c      	ldr	r0, [pc, #112]	; (801237c <mem_trim+0x200>)
 801230a:	f00d faef 	bl	801f8ec <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801230e:	89fb      	ldrh	r3, [r7, #14]
 8012310:	4618      	mov	r0, r3
 8012312:	f7ff fd4f 	bl	8011db4 <ptr_to_mem>
 8012316:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012318:	4b1c      	ldr	r3, [pc, #112]	; (801238c <mem_trim+0x210>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	693a      	ldr	r2, [r7, #16]
 801231e:	429a      	cmp	r2, r3
 8012320:	d202      	bcs.n	8012328 <mem_trim+0x1ac>
      lfree = mem2;
 8012322:	4a1a      	ldr	r2, [pc, #104]	; (801238c <mem_trim+0x210>)
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	2200      	movs	r2, #0
 801232c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801232e:	69bb      	ldr	r3, [r7, #24]
 8012330:	881a      	ldrh	r2, [r3, #0]
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	8afa      	ldrh	r2, [r7, #22]
 801233a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801233c:	69bb      	ldr	r3, [r7, #24]
 801233e:	89fa      	ldrh	r2, [r7, #14]
 8012340:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	881b      	ldrh	r3, [r3, #0]
 8012346:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801234a:	d007      	beq.n	801235c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801234c:	693b      	ldr	r3, [r7, #16]
 801234e:	881b      	ldrh	r3, [r3, #0]
 8012350:	4618      	mov	r0, r3
 8012352:	f7ff fd2f 	bl	8011db4 <ptr_to_mem>
 8012356:	4602      	mov	r2, r0
 8012358:	89fb      	ldrh	r3, [r7, #14]
 801235a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801235c:	4809      	ldr	r0, [pc, #36]	; (8012384 <mem_trim+0x208>)
 801235e:	f00d f84c 	bl	801f3fa <sys_mutex_unlock>
  return rmem;
 8012362:	687b      	ldr	r3, [r7, #4]
}
 8012364:	4618      	mov	r0, r3
 8012366:	3720      	adds	r7, #32
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}
 801236c:	200054b8 	.word	0x200054b8
 8012370:	200054bc 	.word	0x200054bc
 8012374:	080225a4 	.word	0x080225a4
 8012378:	08022730 	.word	0x08022730
 801237c:	080225ec 	.word	0x080225ec
 8012380:	08022748 	.word	0x08022748
 8012384:	200054c0 	.word	0x200054c0
 8012388:	08022768 	.word	0x08022768
 801238c:	200054c4 	.word	0x200054c4

08012390 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b088      	sub	sp, #32
 8012394:	af00      	add	r7, sp, #0
 8012396:	4603      	mov	r3, r0
 8012398:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801239a:	88fb      	ldrh	r3, [r7, #6]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d101      	bne.n	80123a4 <mem_malloc+0x14>
    return NULL;
 80123a0:	2300      	movs	r3, #0
 80123a2:	e0e2      	b.n	801256a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80123a4:	88fb      	ldrh	r3, [r7, #6]
 80123a6:	3303      	adds	r3, #3
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	f023 0303 	bic.w	r3, r3, #3
 80123ae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80123b0:	8bbb      	ldrh	r3, [r7, #28]
 80123b2:	2b0b      	cmp	r3, #11
 80123b4:	d801      	bhi.n	80123ba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80123b6:	230c      	movs	r3, #12
 80123b8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80123ba:	8bbb      	ldrh	r3, [r7, #28]
 80123bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80123c0:	d803      	bhi.n	80123ca <mem_malloc+0x3a>
 80123c2:	8bba      	ldrh	r2, [r7, #28]
 80123c4:	88fb      	ldrh	r3, [r7, #6]
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d201      	bcs.n	80123ce <mem_malloc+0x3e>
    return NULL;
 80123ca:	2300      	movs	r3, #0
 80123cc:	e0cd      	b.n	801256a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80123ce:	4869      	ldr	r0, [pc, #420]	; (8012574 <mem_malloc+0x1e4>)
 80123d0:	f00d f804 	bl	801f3dc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80123d4:	4b68      	ldr	r3, [pc, #416]	; (8012578 <mem_malloc+0x1e8>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	4618      	mov	r0, r3
 80123da:	f7ff fcfd 	bl	8011dd8 <mem_to_ptr>
 80123de:	4603      	mov	r3, r0
 80123e0:	83fb      	strh	r3, [r7, #30]
 80123e2:	e0b7      	b.n	8012554 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80123e4:	8bfb      	ldrh	r3, [r7, #30]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7ff fce4 	bl	8011db4 <ptr_to_mem>
 80123ec:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	791b      	ldrb	r3, [r3, #4]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	f040 80a7 	bne.w	8012546 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	881b      	ldrh	r3, [r3, #0]
 80123fc:	461a      	mov	r2, r3
 80123fe:	8bfb      	ldrh	r3, [r7, #30]
 8012400:	1ad3      	subs	r3, r2, r3
 8012402:	f1a3 0208 	sub.w	r2, r3, #8
 8012406:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012408:	429a      	cmp	r2, r3
 801240a:	f0c0 809c 	bcc.w	8012546 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	881b      	ldrh	r3, [r3, #0]
 8012412:	461a      	mov	r2, r3
 8012414:	8bfb      	ldrh	r3, [r7, #30]
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	f1a3 0208 	sub.w	r2, r3, #8
 801241c:	8bbb      	ldrh	r3, [r7, #28]
 801241e:	3314      	adds	r3, #20
 8012420:	429a      	cmp	r2, r3
 8012422:	d333      	bcc.n	801248c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012424:	8bfa      	ldrh	r2, [r7, #30]
 8012426:	8bbb      	ldrh	r3, [r7, #28]
 8012428:	4413      	add	r3, r2
 801242a:	b29b      	uxth	r3, r3
 801242c:	3308      	adds	r3, #8
 801242e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012430:	8a7b      	ldrh	r3, [r7, #18]
 8012432:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012436:	d106      	bne.n	8012446 <mem_malloc+0xb6>
 8012438:	4b50      	ldr	r3, [pc, #320]	; (801257c <mem_malloc+0x1ec>)
 801243a:	f240 3287 	movw	r2, #903	; 0x387
 801243e:	4950      	ldr	r1, [pc, #320]	; (8012580 <mem_malloc+0x1f0>)
 8012440:	4850      	ldr	r0, [pc, #320]	; (8012584 <mem_malloc+0x1f4>)
 8012442:	f00d fa53 	bl	801f8ec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012446:	8a7b      	ldrh	r3, [r7, #18]
 8012448:	4618      	mov	r0, r3
 801244a:	f7ff fcb3 	bl	8011db4 <ptr_to_mem>
 801244e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2200      	movs	r2, #0
 8012454:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	881a      	ldrh	r2, [r3, #0]
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	8bfa      	ldrh	r2, [r7, #30]
 8012462:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	8a7a      	ldrh	r2, [r7, #18]
 8012468:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	2201      	movs	r2, #1
 801246e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	881b      	ldrh	r3, [r3, #0]
 8012474:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012478:	d00b      	beq.n	8012492 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	881b      	ldrh	r3, [r3, #0]
 801247e:	4618      	mov	r0, r3
 8012480:	f7ff fc98 	bl	8011db4 <ptr_to_mem>
 8012484:	4602      	mov	r2, r0
 8012486:	8a7b      	ldrh	r3, [r7, #18]
 8012488:	8053      	strh	r3, [r2, #2]
 801248a:	e002      	b.n	8012492 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	2201      	movs	r2, #1
 8012490:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012492:	4b39      	ldr	r3, [pc, #228]	; (8012578 <mem_malloc+0x1e8>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	697a      	ldr	r2, [r7, #20]
 8012498:	429a      	cmp	r2, r3
 801249a:	d127      	bne.n	80124ec <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801249c:	4b36      	ldr	r3, [pc, #216]	; (8012578 <mem_malloc+0x1e8>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80124a2:	e005      	b.n	80124b0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80124a4:	69bb      	ldr	r3, [r7, #24]
 80124a6:	881b      	ldrh	r3, [r3, #0]
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7ff fc83 	bl	8011db4 <ptr_to_mem>
 80124ae:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	791b      	ldrb	r3, [r3, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d004      	beq.n	80124c2 <mem_malloc+0x132>
 80124b8:	4b33      	ldr	r3, [pc, #204]	; (8012588 <mem_malloc+0x1f8>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	69ba      	ldr	r2, [r7, #24]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d1f0      	bne.n	80124a4 <mem_malloc+0x114>
          }
          lfree = cur;
 80124c2:	4a2d      	ldr	r2, [pc, #180]	; (8012578 <mem_malloc+0x1e8>)
 80124c4:	69bb      	ldr	r3, [r7, #24]
 80124c6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80124c8:	4b2b      	ldr	r3, [pc, #172]	; (8012578 <mem_malloc+0x1e8>)
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	4b2e      	ldr	r3, [pc, #184]	; (8012588 <mem_malloc+0x1f8>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d00b      	beq.n	80124ec <mem_malloc+0x15c>
 80124d4:	4b28      	ldr	r3, [pc, #160]	; (8012578 <mem_malloc+0x1e8>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	791b      	ldrb	r3, [r3, #4]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d006      	beq.n	80124ec <mem_malloc+0x15c>
 80124de:	4b27      	ldr	r3, [pc, #156]	; (801257c <mem_malloc+0x1ec>)
 80124e0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80124e4:	4929      	ldr	r1, [pc, #164]	; (801258c <mem_malloc+0x1fc>)
 80124e6:	4827      	ldr	r0, [pc, #156]	; (8012584 <mem_malloc+0x1f4>)
 80124e8:	f00d fa00 	bl	801f8ec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80124ec:	4821      	ldr	r0, [pc, #132]	; (8012574 <mem_malloc+0x1e4>)
 80124ee:	f00c ff84 	bl	801f3fa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80124f2:	8bba      	ldrh	r2, [r7, #28]
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	4413      	add	r3, r2
 80124f8:	3308      	adds	r3, #8
 80124fa:	4a23      	ldr	r2, [pc, #140]	; (8012588 <mem_malloc+0x1f8>)
 80124fc:	6812      	ldr	r2, [r2, #0]
 80124fe:	4293      	cmp	r3, r2
 8012500:	d906      	bls.n	8012510 <mem_malloc+0x180>
 8012502:	4b1e      	ldr	r3, [pc, #120]	; (801257c <mem_malloc+0x1ec>)
 8012504:	f240 32b9 	movw	r2, #953	; 0x3b9
 8012508:	4921      	ldr	r1, [pc, #132]	; (8012590 <mem_malloc+0x200>)
 801250a:	481e      	ldr	r0, [pc, #120]	; (8012584 <mem_malloc+0x1f4>)
 801250c:	f00d f9ee 	bl	801f8ec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	f003 0303 	and.w	r3, r3, #3
 8012516:	2b00      	cmp	r3, #0
 8012518:	d006      	beq.n	8012528 <mem_malloc+0x198>
 801251a:	4b18      	ldr	r3, [pc, #96]	; (801257c <mem_malloc+0x1ec>)
 801251c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8012520:	491c      	ldr	r1, [pc, #112]	; (8012594 <mem_malloc+0x204>)
 8012522:	4818      	ldr	r0, [pc, #96]	; (8012584 <mem_malloc+0x1f4>)
 8012524:	f00d f9e2 	bl	801f8ec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	f003 0303 	and.w	r3, r3, #3
 801252e:	2b00      	cmp	r3, #0
 8012530:	d006      	beq.n	8012540 <mem_malloc+0x1b0>
 8012532:	4b12      	ldr	r3, [pc, #72]	; (801257c <mem_malloc+0x1ec>)
 8012534:	f240 32bd 	movw	r2, #957	; 0x3bd
 8012538:	4917      	ldr	r1, [pc, #92]	; (8012598 <mem_malloc+0x208>)
 801253a:	4812      	ldr	r0, [pc, #72]	; (8012584 <mem_malloc+0x1f4>)
 801253c:	f00d f9d6 	bl	801f8ec <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012540:	697b      	ldr	r3, [r7, #20]
 8012542:	3308      	adds	r3, #8
 8012544:	e011      	b.n	801256a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8012546:	8bfb      	ldrh	r3, [r7, #30]
 8012548:	4618      	mov	r0, r3
 801254a:	f7ff fc33 	bl	8011db4 <ptr_to_mem>
 801254e:	4603      	mov	r3, r0
 8012550:	881b      	ldrh	r3, [r3, #0]
 8012552:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012554:	8bfa      	ldrh	r2, [r7, #30]
 8012556:	8bbb      	ldrh	r3, [r7, #28]
 8012558:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801255c:	429a      	cmp	r2, r3
 801255e:	f4ff af41 	bcc.w	80123e4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012562:	4804      	ldr	r0, [pc, #16]	; (8012574 <mem_malloc+0x1e4>)
 8012564:	f00c ff49 	bl	801f3fa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012568:	2300      	movs	r3, #0
}
 801256a:	4618      	mov	r0, r3
 801256c:	3720      	adds	r7, #32
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	200054c0 	.word	0x200054c0
 8012578:	200054c4 	.word	0x200054c4
 801257c:	080225a4 	.word	0x080225a4
 8012580:	08022768 	.word	0x08022768
 8012584:	080225ec 	.word	0x080225ec
 8012588:	200054bc 	.word	0x200054bc
 801258c:	0802277c 	.word	0x0802277c
 8012590:	08022798 	.word	0x08022798
 8012594:	080227c8 	.word	0x080227c8
 8012598:	080227f8 	.word	0x080227f8

0801259c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801259c:	b480      	push	{r7}
 801259e:	b085      	sub	sp, #20
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	689b      	ldr	r3, [r3, #8]
 80125a8:	2200      	movs	r2, #0
 80125aa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	3303      	adds	r3, #3
 80125b2:	f023 0303 	bic.w	r3, r3, #3
 80125b6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80125b8:	2300      	movs	r3, #0
 80125ba:	60fb      	str	r3, [r7, #12]
 80125bc:	e011      	b.n	80125e2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	689b      	ldr	r3, [r3, #8]
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	689b      	ldr	r3, [r3, #8]
 80125cc:	68ba      	ldr	r2, [r7, #8]
 80125ce:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	881b      	ldrh	r3, [r3, #0]
 80125d4:	461a      	mov	r2, r3
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	4413      	add	r3, r2
 80125da:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	3301      	adds	r3, #1
 80125e0:	60fb      	str	r3, [r7, #12]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	885b      	ldrh	r3, [r3, #2]
 80125e6:	461a      	mov	r2, r3
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	4293      	cmp	r3, r2
 80125ec:	dbe7      	blt.n	80125be <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80125ee:	bf00      	nop
 80125f0:	bf00      	nop
 80125f2:	3714      	adds	r7, #20
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr

080125fc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012602:	2300      	movs	r3, #0
 8012604:	80fb      	strh	r3, [r7, #6]
 8012606:	e009      	b.n	801261c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012608:	88fb      	ldrh	r3, [r7, #6]
 801260a:	4a08      	ldr	r2, [pc, #32]	; (801262c <memp_init+0x30>)
 801260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012610:	4618      	mov	r0, r3
 8012612:	f7ff ffc3 	bl	801259c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012616:	88fb      	ldrh	r3, [r7, #6]
 8012618:	3301      	adds	r3, #1
 801261a:	80fb      	strh	r3, [r7, #6]
 801261c:	88fb      	ldrh	r3, [r7, #6]
 801261e:	2b0d      	cmp	r3, #13
 8012620:	d9f2      	bls.n	8012608 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012622:	bf00      	nop
 8012624:	bf00      	nop
 8012626:	3708      	adds	r7, #8
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	08025624 	.word	0x08025624

08012630 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012638:	f00c ff0c 	bl	801f454 <sys_arch_protect>
 801263c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	689b      	ldr	r3, [r3, #8]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d015      	beq.n	8012678 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	689b      	ldr	r3, [r3, #8]
 8012650:	68ba      	ldr	r2, [r7, #8]
 8012652:	6812      	ldr	r2, [r2, #0]
 8012654:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	f003 0303 	and.w	r3, r3, #3
 801265c:	2b00      	cmp	r3, #0
 801265e:	d006      	beq.n	801266e <do_memp_malloc_pool+0x3e>
 8012660:	4b09      	ldr	r3, [pc, #36]	; (8012688 <do_memp_malloc_pool+0x58>)
 8012662:	f44f 728c 	mov.w	r2, #280	; 0x118
 8012666:	4909      	ldr	r1, [pc, #36]	; (801268c <do_memp_malloc_pool+0x5c>)
 8012668:	4809      	ldr	r0, [pc, #36]	; (8012690 <do_memp_malloc_pool+0x60>)
 801266a:	f00d f93f 	bl	801f8ec <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801266e:	68f8      	ldr	r0, [r7, #12]
 8012670:	f00c fefe 	bl	801f470 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	e003      	b.n	8012680 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012678:	68f8      	ldr	r0, [r7, #12]
 801267a:	f00c fef9 	bl	801f470 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801267e:	2300      	movs	r3, #0
}
 8012680:	4618      	mov	r0, r3
 8012682:	3710      	adds	r7, #16
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	0802281c 	.word	0x0802281c
 801268c:	0802284c 	.word	0x0802284c
 8012690:	08022870 	.word	0x08022870

08012694 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b084      	sub	sp, #16
 8012698:	af00      	add	r7, sp, #0
 801269a:	4603      	mov	r3, r0
 801269c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801269e:	79fb      	ldrb	r3, [r7, #7]
 80126a0:	2b0d      	cmp	r3, #13
 80126a2:	d908      	bls.n	80126b6 <memp_malloc+0x22>
 80126a4:	4b0a      	ldr	r3, [pc, #40]	; (80126d0 <memp_malloc+0x3c>)
 80126a6:	f240 1257 	movw	r2, #343	; 0x157
 80126aa:	490a      	ldr	r1, [pc, #40]	; (80126d4 <memp_malloc+0x40>)
 80126ac:	480a      	ldr	r0, [pc, #40]	; (80126d8 <memp_malloc+0x44>)
 80126ae:	f00d f91d 	bl	801f8ec <iprintf>
 80126b2:	2300      	movs	r3, #0
 80126b4:	e008      	b.n	80126c8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80126b6:	79fb      	ldrb	r3, [r7, #7]
 80126b8:	4a08      	ldr	r2, [pc, #32]	; (80126dc <memp_malloc+0x48>)
 80126ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126be:	4618      	mov	r0, r3
 80126c0:	f7ff ffb6 	bl	8012630 <do_memp_malloc_pool>
 80126c4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80126c6:	68fb      	ldr	r3, [r7, #12]
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3710      	adds	r7, #16
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}
 80126d0:	0802281c 	.word	0x0802281c
 80126d4:	080228ac 	.word	0x080228ac
 80126d8:	08022870 	.word	0x08022870
 80126dc:	08025624 	.word	0x08025624

080126e0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	f003 0303 	and.w	r3, r3, #3
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d006      	beq.n	8012702 <do_memp_free_pool+0x22>
 80126f4:	4b0d      	ldr	r3, [pc, #52]	; (801272c <do_memp_free_pool+0x4c>)
 80126f6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80126fa:	490d      	ldr	r1, [pc, #52]	; (8012730 <do_memp_free_pool+0x50>)
 80126fc:	480d      	ldr	r0, [pc, #52]	; (8012734 <do_memp_free_pool+0x54>)
 80126fe:	f00d f8f5 	bl	801f8ec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012706:	f00c fea5 	bl	801f454 <sys_arch_protect>
 801270a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	689b      	ldr	r3, [r3, #8]
 8012710:	681a      	ldr	r2, [r3, #0]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	689b      	ldr	r3, [r3, #8]
 801271a:	68fa      	ldr	r2, [r7, #12]
 801271c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801271e:	68b8      	ldr	r0, [r7, #8]
 8012720:	f00c fea6 	bl	801f470 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012724:	bf00      	nop
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	0802281c 	.word	0x0802281c
 8012730:	080228cc 	.word	0x080228cc
 8012734:	08022870 	.word	0x08022870

08012738 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	4603      	mov	r3, r0
 8012740:	6039      	str	r1, [r7, #0]
 8012742:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012744:	79fb      	ldrb	r3, [r7, #7]
 8012746:	2b0d      	cmp	r3, #13
 8012748:	d907      	bls.n	801275a <memp_free+0x22>
 801274a:	4b0c      	ldr	r3, [pc, #48]	; (801277c <memp_free+0x44>)
 801274c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8012750:	490b      	ldr	r1, [pc, #44]	; (8012780 <memp_free+0x48>)
 8012752:	480c      	ldr	r0, [pc, #48]	; (8012784 <memp_free+0x4c>)
 8012754:	f00d f8ca 	bl	801f8ec <iprintf>
 8012758:	e00c      	b.n	8012774 <memp_free+0x3c>

  if (mem == NULL) {
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d008      	beq.n	8012772 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012760:	79fb      	ldrb	r3, [r7, #7]
 8012762:	4a09      	ldr	r2, [pc, #36]	; (8012788 <memp_free+0x50>)
 8012764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012768:	6839      	ldr	r1, [r7, #0]
 801276a:	4618      	mov	r0, r3
 801276c:	f7ff ffb8 	bl	80126e0 <do_memp_free_pool>
 8012770:	e000      	b.n	8012774 <memp_free+0x3c>
    return;
 8012772:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012774:	3708      	adds	r7, #8
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}
 801277a:	bf00      	nop
 801277c:	0802281c 	.word	0x0802281c
 8012780:	080228ec 	.word	0x080228ec
 8012784:	08022870 	.word	0x08022870
 8012788:	08025624 	.word	0x08025624

0801278c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801278c:	b480      	push	{r7}
 801278e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012790:	bf00      	nop
 8012792:	46bd      	mov	sp, r7
 8012794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012798:	4770      	bx	lr
	...

0801279c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b086      	sub	sp, #24
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	607a      	str	r2, [r7, #4]
 80127a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d108      	bne.n	80127c2 <netif_add+0x26>
 80127b0:	4b5b      	ldr	r3, [pc, #364]	; (8012920 <netif_add+0x184>)
 80127b2:	f240 1227 	movw	r2, #295	; 0x127
 80127b6:	495b      	ldr	r1, [pc, #364]	; (8012924 <netif_add+0x188>)
 80127b8:	485b      	ldr	r0, [pc, #364]	; (8012928 <netif_add+0x18c>)
 80127ba:	f00d f897 	bl	801f8ec <iprintf>
 80127be:	2300      	movs	r3, #0
 80127c0:	e0a9      	b.n	8012916 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80127c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d108      	bne.n	80127da <netif_add+0x3e>
 80127c8:	4b55      	ldr	r3, [pc, #340]	; (8012920 <netif_add+0x184>)
 80127ca:	f44f 7294 	mov.w	r2, #296	; 0x128
 80127ce:	4957      	ldr	r1, [pc, #348]	; (801292c <netif_add+0x190>)
 80127d0:	4855      	ldr	r0, [pc, #340]	; (8012928 <netif_add+0x18c>)
 80127d2:	f00d f88b 	bl	801f8ec <iprintf>
 80127d6:	2300      	movs	r3, #0
 80127d8:	e09d      	b.n	8012916 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80127da:	68bb      	ldr	r3, [r7, #8]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d101      	bne.n	80127e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80127e0:	4b53      	ldr	r3, [pc, #332]	; (8012930 <netif_add+0x194>)
 80127e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d101      	bne.n	80127ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80127ea:	4b51      	ldr	r3, [pc, #324]	; (8012930 <netif_add+0x194>)
 80127ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d101      	bne.n	80127f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80127f4:	4b4e      	ldr	r3, [pc, #312]	; (8012930 <netif_add+0x194>)
 80127f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	2200      	movs	r2, #0
 80127fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	2200      	movs	r2, #0
 8012802:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	2200      	movs	r2, #0
 8012808:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	4a49      	ldr	r2, [pc, #292]	; (8012934 <netif_add+0x198>)
 801280e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	2200      	movs	r2, #0
 8012814:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	2200      	movs	r2, #0
 801281a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	3324      	adds	r3, #36	; 0x24
 8012822:	2204      	movs	r2, #4
 8012824:	2100      	movs	r1, #0
 8012826:	4618      	mov	r0, r3
 8012828:	f00c ff9e 	bl	801f768 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	2200      	movs	r2, #0
 8012830:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	6a3a      	ldr	r2, [r7, #32]
 8012836:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012838:	4b3f      	ldr	r3, [pc, #252]	; (8012938 <netif_add+0x19c>)
 801283a:	781a      	ldrb	r2, [r3, #0]
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012846:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	687a      	ldr	r2, [r7, #4]
 801284c:	68b9      	ldr	r1, [r7, #8]
 801284e:	68f8      	ldr	r0, [r7, #12]
 8012850:	f000 f914 	bl	8012a7c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8012854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012856:	68f8      	ldr	r0, [r7, #12]
 8012858:	4798      	blx	r3
 801285a:	4603      	mov	r3, r0
 801285c:	2b00      	cmp	r3, #0
 801285e:	d001      	beq.n	8012864 <netif_add+0xc8>
    return NULL;
 8012860:	2300      	movs	r3, #0
 8012862:	e058      	b.n	8012916 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801286a:	2bff      	cmp	r3, #255	; 0xff
 801286c:	d103      	bne.n	8012876 <netif_add+0xda>
        netif->num = 0;
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	2200      	movs	r2, #0
 8012872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8012876:	2300      	movs	r3, #0
 8012878:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801287a:	4b30      	ldr	r3, [pc, #192]	; (801293c <netif_add+0x1a0>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	617b      	str	r3, [r7, #20]
 8012880:	e02b      	b.n	80128da <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012882:	697a      	ldr	r2, [r7, #20]
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	429a      	cmp	r2, r3
 8012888:	d106      	bne.n	8012898 <netif_add+0xfc>
 801288a:	4b25      	ldr	r3, [pc, #148]	; (8012920 <netif_add+0x184>)
 801288c:	f240 128b 	movw	r2, #395	; 0x18b
 8012890:	492b      	ldr	r1, [pc, #172]	; (8012940 <netif_add+0x1a4>)
 8012892:	4825      	ldr	r0, [pc, #148]	; (8012928 <netif_add+0x18c>)
 8012894:	f00d f82a 	bl	801f8ec <iprintf>
        num_netifs++;
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	3301      	adds	r3, #1
 801289c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	2bff      	cmp	r3, #255	; 0xff
 80128a2:	dd06      	ble.n	80128b2 <netif_add+0x116>
 80128a4:	4b1e      	ldr	r3, [pc, #120]	; (8012920 <netif_add+0x184>)
 80128a6:	f240 128d 	movw	r2, #397	; 0x18d
 80128aa:	4926      	ldr	r1, [pc, #152]	; (8012944 <netif_add+0x1a8>)
 80128ac:	481e      	ldr	r0, [pc, #120]	; (8012928 <netif_add+0x18c>)
 80128ae:	f00d f81d 	bl	801f8ec <iprintf>
        if (netif2->num == netif->num) {
 80128b2:	697b      	ldr	r3, [r7, #20]
 80128b4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80128be:	429a      	cmp	r2, r3
 80128c0:	d108      	bne.n	80128d4 <netif_add+0x138>
          netif->num++;
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80128c8:	3301      	adds	r3, #1
 80128ca:	b2da      	uxtb	r2, r3
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80128d2:	e005      	b.n	80128e0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	617b      	str	r3, [r7, #20]
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d1d0      	bne.n	8012882 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d1be      	bne.n	8012864 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80128ec:	2bfe      	cmp	r3, #254	; 0xfe
 80128ee:	d103      	bne.n	80128f8 <netif_add+0x15c>
    netif_num = 0;
 80128f0:	4b11      	ldr	r3, [pc, #68]	; (8012938 <netif_add+0x19c>)
 80128f2:	2200      	movs	r2, #0
 80128f4:	701a      	strb	r2, [r3, #0]
 80128f6:	e006      	b.n	8012906 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80128fe:	3301      	adds	r3, #1
 8012900:	b2da      	uxtb	r2, r3
 8012902:	4b0d      	ldr	r3, [pc, #52]	; (8012938 <netif_add+0x19c>)
 8012904:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012906:	4b0d      	ldr	r3, [pc, #52]	; (801293c <netif_add+0x1a0>)
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801290e:	4a0b      	ldr	r2, [pc, #44]	; (801293c <netif_add+0x1a0>)
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8012914:	68fb      	ldr	r3, [r7, #12]
}
 8012916:	4618      	mov	r0, r3
 8012918:	3718      	adds	r7, #24
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	08022908 	.word	0x08022908
 8012924:	0802299c 	.word	0x0802299c
 8012928:	08022958 	.word	0x08022958
 801292c:	080229b8 	.word	0x080229b8
 8012930:	080256b4 	.word	0x080256b4
 8012934:	08012d5f 	.word	0x08012d5f
 8012938:	20005500 	.word	0x20005500
 801293c:	20016b80 	.word	0x20016b80
 8012940:	080229dc 	.word	0x080229dc
 8012944:	080229f0 	.word	0x080229f0

08012948 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8012952:	6839      	ldr	r1, [r7, #0]
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f002 ff95 	bl	8015884 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801295a:	6839      	ldr	r1, [r7, #0]
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	f008 f8c3 	bl	801aae8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8012962:	bf00      	nop
 8012964:	3708      	adds	r7, #8
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
	...

0801296c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b086      	sub	sp, #24
 8012970:	af00      	add	r7, sp, #0
 8012972:	60f8      	str	r0, [r7, #12]
 8012974:	60b9      	str	r1, [r7, #8]
 8012976:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d106      	bne.n	801298c <netif_do_set_ipaddr+0x20>
 801297e:	4b1d      	ldr	r3, [pc, #116]	; (80129f4 <netif_do_set_ipaddr+0x88>)
 8012980:	f240 12cb 	movw	r2, #459	; 0x1cb
 8012984:	491c      	ldr	r1, [pc, #112]	; (80129f8 <netif_do_set_ipaddr+0x8c>)
 8012986:	481d      	ldr	r0, [pc, #116]	; (80129fc <netif_do_set_ipaddr+0x90>)
 8012988:	f00c ffb0 	bl	801f8ec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d106      	bne.n	80129a0 <netif_do_set_ipaddr+0x34>
 8012992:	4b18      	ldr	r3, [pc, #96]	; (80129f4 <netif_do_set_ipaddr+0x88>)
 8012994:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8012998:	4917      	ldr	r1, [pc, #92]	; (80129f8 <netif_do_set_ipaddr+0x8c>)
 801299a:	4818      	ldr	r0, [pc, #96]	; (80129fc <netif_do_set_ipaddr+0x90>)
 801299c:	f00c ffa6 	bl	801f8ec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	681a      	ldr	r2, [r3, #0]
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	3304      	adds	r3, #4
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d01c      	beq.n	80129e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	3304      	adds	r3, #4
 80129b8:	681a      	ldr	r2, [r3, #0]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80129be:	f107 0314 	add.w	r3, r7, #20
 80129c2:	4619      	mov	r1, r3
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f7ff ffbf 	bl	8012948 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d002      	beq.n	80129d6 <netif_do_set_ipaddr+0x6a>
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	e000      	b.n	80129d8 <netif_do_set_ipaddr+0x6c>
 80129d6:	2300      	movs	r3, #0
 80129d8:	68fa      	ldr	r2, [r7, #12]
 80129da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80129dc:	2101      	movs	r1, #1
 80129de:	68f8      	ldr	r0, [r7, #12]
 80129e0:	f000 f8d2 	bl	8012b88 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80129e4:	2301      	movs	r3, #1
 80129e6:	e000      	b.n	80129ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3718      	adds	r7, #24
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	08022908 	.word	0x08022908
 80129f8:	08022a20 	.word	0x08022a20
 80129fc:	08022958 	.word	0x08022958

08012a00 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012a00:	b480      	push	{r7}
 8012a02:	b085      	sub	sp, #20
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	60f8      	str	r0, [r7, #12]
 8012a08:	60b9      	str	r1, [r7, #8]
 8012a0a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	681a      	ldr	r2, [r3, #0]
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	3308      	adds	r3, #8
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d00a      	beq.n	8012a30 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d002      	beq.n	8012a26 <netif_do_set_netmask+0x26>
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	e000      	b.n	8012a28 <netif_do_set_netmask+0x28>
 8012a26:	2300      	movs	r3, #0
 8012a28:	68fa      	ldr	r2, [r7, #12]
 8012a2a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	e000      	b.n	8012a32 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012a30:	2300      	movs	r3, #0
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3714      	adds	r7, #20
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr

08012a3e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012a3e:	b480      	push	{r7}
 8012a40:	b085      	sub	sp, #20
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	60f8      	str	r0, [r7, #12]
 8012a46:	60b9      	str	r1, [r7, #8]
 8012a48:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	330c      	adds	r3, #12
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d00a      	beq.n	8012a6e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d002      	beq.n	8012a64 <netif_do_set_gw+0x26>
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	e000      	b.n	8012a66 <netif_do_set_gw+0x28>
 8012a64:	2300      	movs	r3, #0
 8012a66:	68fa      	ldr	r2, [r7, #12]
 8012a68:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	e000      	b.n	8012a70 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012a6e:	2300      	movs	r3, #0
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3714      	adds	r7, #20
 8012a74:	46bd      	mov	sp, r7
 8012a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7a:	4770      	bx	lr

08012a7c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b088      	sub	sp, #32
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	60f8      	str	r0, [r7, #12]
 8012a84:	60b9      	str	r1, [r7, #8]
 8012a86:	607a      	str	r2, [r7, #4]
 8012a88:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d101      	bne.n	8012a9c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012a98:	4b1c      	ldr	r3, [pc, #112]	; (8012b0c <netif_set_addr+0x90>)
 8012a9a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d101      	bne.n	8012aa6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012aa2:	4b1a      	ldr	r3, [pc, #104]	; (8012b0c <netif_set_addr+0x90>)
 8012aa4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d101      	bne.n	8012ab0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012aac:	4b17      	ldr	r3, [pc, #92]	; (8012b0c <netif_set_addr+0x90>)
 8012aae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d003      	beq.n	8012abe <netif_set_addr+0x42>
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d101      	bne.n	8012ac2 <netif_set_addr+0x46>
 8012abe:	2301      	movs	r3, #1
 8012ac0:	e000      	b.n	8012ac4 <netif_set_addr+0x48>
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d006      	beq.n	8012ada <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012acc:	f107 0310 	add.w	r3, r7, #16
 8012ad0:	461a      	mov	r2, r3
 8012ad2:	68b9      	ldr	r1, [r7, #8]
 8012ad4:	68f8      	ldr	r0, [r7, #12]
 8012ad6:	f7ff ff49 	bl	801296c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012ada:	69fa      	ldr	r2, [r7, #28]
 8012adc:	6879      	ldr	r1, [r7, #4]
 8012ade:	68f8      	ldr	r0, [r7, #12]
 8012ae0:	f7ff ff8e 	bl	8012a00 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012ae4:	69ba      	ldr	r2, [r7, #24]
 8012ae6:	6839      	ldr	r1, [r7, #0]
 8012ae8:	68f8      	ldr	r0, [r7, #12]
 8012aea:	f7ff ffa8 	bl	8012a3e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012aee:	697b      	ldr	r3, [r7, #20]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d106      	bne.n	8012b02 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012af4:	f107 0310 	add.w	r3, r7, #16
 8012af8:	461a      	mov	r2, r3
 8012afa:	68b9      	ldr	r1, [r7, #8]
 8012afc:	68f8      	ldr	r0, [r7, #12]
 8012afe:	f7ff ff35 	bl	801296c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012b02:	bf00      	nop
 8012b04:	3720      	adds	r7, #32
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	080256b4 	.word	0x080256b4

08012b10 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012b10:	b480      	push	{r7}
 8012b12:	b083      	sub	sp, #12
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012b18:	4a04      	ldr	r2, [pc, #16]	; (8012b2c <netif_set_default+0x1c>)
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012b1e:	bf00      	nop
 8012b20:	370c      	adds	r7, #12
 8012b22:	46bd      	mov	sp, r7
 8012b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b28:	4770      	bx	lr
 8012b2a:	bf00      	nop
 8012b2c:	20016b84 	.word	0x20016b84

08012b30 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d107      	bne.n	8012b4e <netif_set_up+0x1e>
 8012b3e:	4b0f      	ldr	r3, [pc, #60]	; (8012b7c <netif_set_up+0x4c>)
 8012b40:	f44f 7254 	mov.w	r2, #848	; 0x350
 8012b44:	490e      	ldr	r1, [pc, #56]	; (8012b80 <netif_set_up+0x50>)
 8012b46:	480f      	ldr	r0, [pc, #60]	; (8012b84 <netif_set_up+0x54>)
 8012b48:	f00c fed0 	bl	801f8ec <iprintf>
 8012b4c:	e013      	b.n	8012b76 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b54:	f003 0301 	and.w	r3, r3, #1
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d10c      	bne.n	8012b76 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b62:	f043 0301 	orr.w	r3, r3, #1
 8012b66:	b2da      	uxtb	r2, r3
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012b6e:	2103      	movs	r1, #3
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f000 f809 	bl	8012b88 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8012b76:	3708      	adds	r7, #8
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	08022908 	.word	0x08022908
 8012b80:	08022a90 	.word	0x08022a90
 8012b84:	08022958 	.word	0x08022958

08012b88 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	460b      	mov	r3, r1
 8012b92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d106      	bne.n	8012ba8 <netif_issue_reports+0x20>
 8012b9a:	4b18      	ldr	r3, [pc, #96]	; (8012bfc <netif_issue_reports+0x74>)
 8012b9c:	f240 326d 	movw	r2, #877	; 0x36d
 8012ba0:	4917      	ldr	r1, [pc, #92]	; (8012c00 <netif_issue_reports+0x78>)
 8012ba2:	4818      	ldr	r0, [pc, #96]	; (8012c04 <netif_issue_reports+0x7c>)
 8012ba4:	f00c fea2 	bl	801f8ec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012bae:	f003 0304 	and.w	r3, r3, #4
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d01e      	beq.n	8012bf4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012bbc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d017      	beq.n	8012bf4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012bc4:	78fb      	ldrb	r3, [r7, #3]
 8012bc6:	f003 0301 	and.w	r3, r3, #1
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d013      	beq.n	8012bf6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	3304      	adds	r3, #4
 8012bd2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00e      	beq.n	8012bf6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012bde:	f003 0308 	and.w	r3, r3, #8
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d007      	beq.n	8012bf6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	3304      	adds	r3, #4
 8012bea:	4619      	mov	r1, r3
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f00a fdcb 	bl	801d788 <etharp_request>
 8012bf2:	e000      	b.n	8012bf6 <netif_issue_reports+0x6e>
    return;
 8012bf4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8012bf6:	3708      	adds	r7, #8
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	08022908 	.word	0x08022908
 8012c00:	08022aac 	.word	0x08022aac
 8012c04:	08022958 	.word	0x08022958

08012c08 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d107      	bne.n	8012c26 <netif_set_down+0x1e>
 8012c16:	4b12      	ldr	r3, [pc, #72]	; (8012c60 <netif_set_down+0x58>)
 8012c18:	f240 329b 	movw	r2, #923	; 0x39b
 8012c1c:	4911      	ldr	r1, [pc, #68]	; (8012c64 <netif_set_down+0x5c>)
 8012c1e:	4812      	ldr	r0, [pc, #72]	; (8012c68 <netif_set_down+0x60>)
 8012c20:	f00c fe64 	bl	801f8ec <iprintf>
 8012c24:	e019      	b.n	8012c5a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c2c:	f003 0301 	and.w	r3, r3, #1
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d012      	beq.n	8012c5a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c3a:	f023 0301 	bic.w	r3, r3, #1
 8012c3e:	b2da      	uxtb	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c4c:	f003 0308 	and.w	r3, r3, #8
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d002      	beq.n	8012c5a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f00a f951 	bl	801cefc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8012c5a:	3708      	adds	r7, #8
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	08022908 	.word	0x08022908
 8012c64:	08022ad0 	.word	0x08022ad0
 8012c68:	08022958 	.word	0x08022958

08012c6c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d107      	bne.n	8012c8a <netif_set_link_up+0x1e>
 8012c7a:	4b15      	ldr	r3, [pc, #84]	; (8012cd0 <netif_set_link_up+0x64>)
 8012c7c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8012c80:	4914      	ldr	r1, [pc, #80]	; (8012cd4 <netif_set_link_up+0x68>)
 8012c82:	4815      	ldr	r0, [pc, #84]	; (8012cd8 <netif_set_link_up+0x6c>)
 8012c84:	f00c fe32 	bl	801f8ec <iprintf>
 8012c88:	e01e      	b.n	8012cc8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c90:	f003 0304 	and.w	r3, r3, #4
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d117      	bne.n	8012cc8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c9e:	f043 0304 	orr.w	r3, r3, #4
 8012ca2:	b2da      	uxtb	r2, r3
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f008 fb66 	bl	801b37c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012cb0:	2103      	movs	r1, #3
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f7ff ff68 	bl	8012b88 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	69db      	ldr	r3, [r3, #28]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d003      	beq.n	8012cc8 <netif_set_link_up+0x5c>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	69db      	ldr	r3, [r3, #28]
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012cc8:	3708      	adds	r7, #8
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	08022908 	.word	0x08022908
 8012cd4:	08022af0 	.word	0x08022af0
 8012cd8:	08022958 	.word	0x08022958

08012cdc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d107      	bne.n	8012cfa <netif_set_link_down+0x1e>
 8012cea:	4b11      	ldr	r3, [pc, #68]	; (8012d30 <netif_set_link_down+0x54>)
 8012cec:	f240 4206 	movw	r2, #1030	; 0x406
 8012cf0:	4910      	ldr	r1, [pc, #64]	; (8012d34 <netif_set_link_down+0x58>)
 8012cf2:	4811      	ldr	r0, [pc, #68]	; (8012d38 <netif_set_link_down+0x5c>)
 8012cf4:	f00c fdfa 	bl	801f8ec <iprintf>
 8012cf8:	e017      	b.n	8012d2a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012d00:	f003 0304 	and.w	r3, r3, #4
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d010      	beq.n	8012d2a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012d0e:	f023 0304 	bic.w	r3, r3, #4
 8012d12:	b2da      	uxtb	r2, r3
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	69db      	ldr	r3, [r3, #28]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d003      	beq.n	8012d2a <netif_set_link_down+0x4e>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	69db      	ldr	r3, [r3, #28]
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012d2a:	3708      	adds	r7, #8
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}
 8012d30:	08022908 	.word	0x08022908
 8012d34:	08022b14 	.word	0x08022b14
 8012d38:	08022958 	.word	0x08022958

08012d3c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d002      	beq.n	8012d52 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	683a      	ldr	r2, [r7, #0]
 8012d50:	61da      	str	r2, [r3, #28]
  }
}
 8012d52:	bf00      	nop
 8012d54:	370c      	adds	r7, #12
 8012d56:	46bd      	mov	sp, r7
 8012d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5c:	4770      	bx	lr

08012d5e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012d5e:	b480      	push	{r7}
 8012d60:	b085      	sub	sp, #20
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	60f8      	str	r0, [r7, #12]
 8012d66:	60b9      	str	r1, [r7, #8]
 8012d68:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012d6a:	f06f 030b 	mvn.w	r3, #11
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3714      	adds	r7, #20
 8012d72:	46bd      	mov	sp, r7
 8012d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d78:	4770      	bx	lr
	...

08012d7c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	b085      	sub	sp, #20
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	4603      	mov	r3, r0
 8012d84:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012d86:	79fb      	ldrb	r3, [r7, #7]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d013      	beq.n	8012db4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012d8c:	4b0d      	ldr	r3, [pc, #52]	; (8012dc4 <netif_get_by_index+0x48>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	60fb      	str	r3, [r7, #12]
 8012d92:	e00c      	b.n	8012dae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d9a:	3301      	adds	r3, #1
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	79fa      	ldrb	r2, [r7, #7]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d101      	bne.n	8012da8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	e006      	b.n	8012db6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	60fb      	str	r3, [r7, #12]
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d1ef      	bne.n	8012d94 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012db4:	2300      	movs	r3, #0
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3714      	adds	r7, #20
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc0:	4770      	bx	lr
 8012dc2:	bf00      	nop
 8012dc4:	20016b80 	.word	0x20016b80

08012dc8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b082      	sub	sp, #8
 8012dcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012dce:	f00c fb41 	bl	801f454 <sys_arch_protect>
 8012dd2:	6038      	str	r0, [r7, #0]
 8012dd4:	4b0d      	ldr	r3, [pc, #52]	; (8012e0c <pbuf_free_ooseq+0x44>)
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	701a      	strb	r2, [r3, #0]
 8012dda:	6838      	ldr	r0, [r7, #0]
 8012ddc:	f00c fb48 	bl	801f470 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012de0:	4b0b      	ldr	r3, [pc, #44]	; (8012e10 <pbuf_free_ooseq+0x48>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	607b      	str	r3, [r7, #4]
 8012de6:	e00a      	b.n	8012dfe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d003      	beq.n	8012df8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f002 fd85 	bl	8015900 <tcp_free_ooseq>
      return;
 8012df6:	e005      	b.n	8012e04 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	607b      	str	r3, [r7, #4]
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d1f1      	bne.n	8012de8 <pbuf_free_ooseq+0x20>
    }
  }
}
 8012e04:	3708      	adds	r7, #8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	20016b88 	.word	0x20016b88
 8012e10:	20016b90 	.word	0x20016b90

08012e14 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012e1c:	f7ff ffd4 	bl	8012dc8 <pbuf_free_ooseq>
}
 8012e20:	bf00      	nop
 8012e22:	3708      	adds	r7, #8
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}

08012e28 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012e2e:	f00c fb11 	bl	801f454 <sys_arch_protect>
 8012e32:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012e34:	4b0f      	ldr	r3, [pc, #60]	; (8012e74 <pbuf_pool_is_empty+0x4c>)
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012e3a:	4b0e      	ldr	r3, [pc, #56]	; (8012e74 <pbuf_pool_is_empty+0x4c>)
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f00c fb15 	bl	801f470 <sys_arch_unprotect>

  if (!queued) {
 8012e46:	78fb      	ldrb	r3, [r7, #3]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d10f      	bne.n	8012e6c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012e4c:	2100      	movs	r1, #0
 8012e4e:	480a      	ldr	r0, [pc, #40]	; (8012e78 <pbuf_pool_is_empty+0x50>)
 8012e50:	f7fd fef4 	bl	8010c3c <tcpip_try_callback>
 8012e54:	4603      	mov	r3, r0
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d008      	beq.n	8012e6c <pbuf_pool_is_empty+0x44>
 8012e5a:	f00c fafb 	bl	801f454 <sys_arch_protect>
 8012e5e:	6078      	str	r0, [r7, #4]
 8012e60:	4b04      	ldr	r3, [pc, #16]	; (8012e74 <pbuf_pool_is_empty+0x4c>)
 8012e62:	2200      	movs	r2, #0
 8012e64:	701a      	strb	r2, [r3, #0]
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f00c fb02 	bl	801f470 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012e6c:	bf00      	nop
 8012e6e:	3708      	adds	r7, #8
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}
 8012e74:	20016b88 	.word	0x20016b88
 8012e78:	08012e15 	.word	0x08012e15

08012e7c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012e7c:	b480      	push	{r7}
 8012e7e:	b085      	sub	sp, #20
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	60b9      	str	r1, [r7, #8]
 8012e86:	4611      	mov	r1, r2
 8012e88:	461a      	mov	r2, r3
 8012e8a:	460b      	mov	r3, r1
 8012e8c:	80fb      	strh	r3, [r7, #6]
 8012e8e:	4613      	mov	r3, r2
 8012e90:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2200      	movs	r2, #0
 8012e96:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	68ba      	ldr	r2, [r7, #8]
 8012e9c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	88fa      	ldrh	r2, [r7, #6]
 8012ea2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	88ba      	ldrh	r2, [r7, #4]
 8012ea8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012eaa:	8b3b      	ldrh	r3, [r7, #24]
 8012eac:	b2da      	uxtb	r2, r3
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	7f3a      	ldrb	r2, [r7, #28]
 8012eb6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2201      	movs	r2, #1
 8012ebc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	73da      	strb	r2, [r3, #15]
}
 8012ec4:	bf00      	nop
 8012ec6:	3714      	adds	r7, #20
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ece:	4770      	bx	lr

08012ed0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b08c      	sub	sp, #48	; 0x30
 8012ed4:	af02      	add	r7, sp, #8
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	71fb      	strb	r3, [r7, #7]
 8012eda:	460b      	mov	r3, r1
 8012edc:	80bb      	strh	r3, [r7, #4]
 8012ede:	4613      	mov	r3, r2
 8012ee0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012ee2:	79fb      	ldrb	r3, [r7, #7]
 8012ee4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012ee6:	887b      	ldrh	r3, [r7, #2]
 8012ee8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012eec:	d07f      	beq.n	8012fee <pbuf_alloc+0x11e>
 8012eee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012ef2:	f300 80c8 	bgt.w	8013086 <pbuf_alloc+0x1b6>
 8012ef6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012efa:	d010      	beq.n	8012f1e <pbuf_alloc+0x4e>
 8012efc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012f00:	f300 80c1 	bgt.w	8013086 <pbuf_alloc+0x1b6>
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	d002      	beq.n	8012f0e <pbuf_alloc+0x3e>
 8012f08:	2b41      	cmp	r3, #65	; 0x41
 8012f0a:	f040 80bc 	bne.w	8013086 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012f0e:	887a      	ldrh	r2, [r7, #2]
 8012f10:	88bb      	ldrh	r3, [r7, #4]
 8012f12:	4619      	mov	r1, r3
 8012f14:	2000      	movs	r0, #0
 8012f16:	f000 f8d1 	bl	80130bc <pbuf_alloc_reference>
 8012f1a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8012f1c:	e0bd      	b.n	801309a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012f1e:	2300      	movs	r3, #0
 8012f20:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012f22:	2300      	movs	r3, #0
 8012f24:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012f26:	88bb      	ldrh	r3, [r7, #4]
 8012f28:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012f2a:	200d      	movs	r0, #13
 8012f2c:	f7ff fbb2 	bl	8012694 <memp_malloc>
 8012f30:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d109      	bne.n	8012f4c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012f38:	f7ff ff76 	bl	8012e28 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d002      	beq.n	8012f48 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f44:	f000 faa8 	bl	8013498 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	e0a7      	b.n	801309c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012f4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f4e:	3303      	adds	r3, #3
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	f023 0303 	bic.w	r3, r3, #3
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8012f5c:	b29b      	uxth	r3, r3
 8012f5e:	8b7a      	ldrh	r2, [r7, #26]
 8012f60:	4293      	cmp	r3, r2
 8012f62:	bf28      	it	cs
 8012f64:	4613      	movcs	r3, r2
 8012f66:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012f68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f6a:	3310      	adds	r3, #16
 8012f6c:	693a      	ldr	r2, [r7, #16]
 8012f6e:	4413      	add	r3, r2
 8012f70:	3303      	adds	r3, #3
 8012f72:	f023 0303 	bic.w	r3, r3, #3
 8012f76:	4618      	mov	r0, r3
 8012f78:	89f9      	ldrh	r1, [r7, #14]
 8012f7a:	8b7a      	ldrh	r2, [r7, #26]
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	9301      	str	r3, [sp, #4]
 8012f80:	887b      	ldrh	r3, [r7, #2]
 8012f82:	9300      	str	r3, [sp, #0]
 8012f84:	460b      	mov	r3, r1
 8012f86:	4601      	mov	r1, r0
 8012f88:	6938      	ldr	r0, [r7, #16]
 8012f8a:	f7ff ff77 	bl	8012e7c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	f003 0303 	and.w	r3, r3, #3
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d006      	beq.n	8012fa8 <pbuf_alloc+0xd8>
 8012f9a:	4b42      	ldr	r3, [pc, #264]	; (80130a4 <pbuf_alloc+0x1d4>)
 8012f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012fa0:	4941      	ldr	r1, [pc, #260]	; (80130a8 <pbuf_alloc+0x1d8>)
 8012fa2:	4842      	ldr	r0, [pc, #264]	; (80130ac <pbuf_alloc+0x1dc>)
 8012fa4:	f00c fca2 	bl	801f8ec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012fa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012faa:	3303      	adds	r3, #3
 8012fac:	f023 0303 	bic.w	r3, r3, #3
 8012fb0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8012fb4:	d106      	bne.n	8012fc4 <pbuf_alloc+0xf4>
 8012fb6:	4b3b      	ldr	r3, [pc, #236]	; (80130a4 <pbuf_alloc+0x1d4>)
 8012fb8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012fbc:	493c      	ldr	r1, [pc, #240]	; (80130b0 <pbuf_alloc+0x1e0>)
 8012fbe:	483b      	ldr	r0, [pc, #236]	; (80130ac <pbuf_alloc+0x1dc>)
 8012fc0:	f00c fc94 	bl	801f8ec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d102      	bne.n	8012fd0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8012fce:	e002      	b.n	8012fd6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	693a      	ldr	r2, [r7, #16]
 8012fd4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012fda:	8b7a      	ldrh	r2, [r7, #26]
 8012fdc:	89fb      	ldrh	r3, [r7, #14]
 8012fde:	1ad3      	subs	r3, r2, r3
 8012fe0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8012fe6:	8b7b      	ldrh	r3, [r7, #26]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d19e      	bne.n	8012f2a <pbuf_alloc+0x5a>
      break;
 8012fec:	e055      	b.n	801309a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012fee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ff0:	3303      	adds	r3, #3
 8012ff2:	b29b      	uxth	r3, r3
 8012ff4:	f023 0303 	bic.w	r3, r3, #3
 8012ff8:	b29a      	uxth	r2, r3
 8012ffa:	88bb      	ldrh	r3, [r7, #4]
 8012ffc:	3303      	adds	r3, #3
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	f023 0303 	bic.w	r3, r3, #3
 8013004:	b29b      	uxth	r3, r3
 8013006:	4413      	add	r3, r2
 8013008:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801300a:	8b3b      	ldrh	r3, [r7, #24]
 801300c:	3310      	adds	r3, #16
 801300e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013010:	8b3a      	ldrh	r2, [r7, #24]
 8013012:	88bb      	ldrh	r3, [r7, #4]
 8013014:	3303      	adds	r3, #3
 8013016:	f023 0303 	bic.w	r3, r3, #3
 801301a:	429a      	cmp	r2, r3
 801301c:	d306      	bcc.n	801302c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801301e:	8afa      	ldrh	r2, [r7, #22]
 8013020:	88bb      	ldrh	r3, [r7, #4]
 8013022:	3303      	adds	r3, #3
 8013024:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013028:	429a      	cmp	r2, r3
 801302a:	d201      	bcs.n	8013030 <pbuf_alloc+0x160>
        return NULL;
 801302c:	2300      	movs	r3, #0
 801302e:	e035      	b.n	801309c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013030:	8afb      	ldrh	r3, [r7, #22]
 8013032:	4618      	mov	r0, r3
 8013034:	f7ff f9ac 	bl	8012390 <mem_malloc>
 8013038:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801303c:	2b00      	cmp	r3, #0
 801303e:	d101      	bne.n	8013044 <pbuf_alloc+0x174>
        return NULL;
 8013040:	2300      	movs	r3, #0
 8013042:	e02b      	b.n	801309c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013044:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013046:	3310      	adds	r3, #16
 8013048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801304a:	4413      	add	r3, r2
 801304c:	3303      	adds	r3, #3
 801304e:	f023 0303 	bic.w	r3, r3, #3
 8013052:	4618      	mov	r0, r3
 8013054:	88b9      	ldrh	r1, [r7, #4]
 8013056:	88ba      	ldrh	r2, [r7, #4]
 8013058:	2300      	movs	r3, #0
 801305a:	9301      	str	r3, [sp, #4]
 801305c:	887b      	ldrh	r3, [r7, #2]
 801305e:	9300      	str	r3, [sp, #0]
 8013060:	460b      	mov	r3, r1
 8013062:	4601      	mov	r1, r0
 8013064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013066:	f7ff ff09 	bl	8012e7c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306c:	685b      	ldr	r3, [r3, #4]
 801306e:	f003 0303 	and.w	r3, r3, #3
 8013072:	2b00      	cmp	r3, #0
 8013074:	d010      	beq.n	8013098 <pbuf_alloc+0x1c8>
 8013076:	4b0b      	ldr	r3, [pc, #44]	; (80130a4 <pbuf_alloc+0x1d4>)
 8013078:	f44f 7291 	mov.w	r2, #290	; 0x122
 801307c:	490d      	ldr	r1, [pc, #52]	; (80130b4 <pbuf_alloc+0x1e4>)
 801307e:	480b      	ldr	r0, [pc, #44]	; (80130ac <pbuf_alloc+0x1dc>)
 8013080:	f00c fc34 	bl	801f8ec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013084:	e008      	b.n	8013098 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013086:	4b07      	ldr	r3, [pc, #28]	; (80130a4 <pbuf_alloc+0x1d4>)
 8013088:	f240 1227 	movw	r2, #295	; 0x127
 801308c:	490a      	ldr	r1, [pc, #40]	; (80130b8 <pbuf_alloc+0x1e8>)
 801308e:	4807      	ldr	r0, [pc, #28]	; (80130ac <pbuf_alloc+0x1dc>)
 8013090:	f00c fc2c 	bl	801f8ec <iprintf>
      return NULL;
 8013094:	2300      	movs	r3, #0
 8013096:	e001      	b.n	801309c <pbuf_alloc+0x1cc>
      break;
 8013098:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801309c:	4618      	mov	r0, r3
 801309e:	3728      	adds	r7, #40	; 0x28
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}
 80130a4:	08022b38 	.word	0x08022b38
 80130a8:	08022b68 	.word	0x08022b68
 80130ac:	08022b98 	.word	0x08022b98
 80130b0:	08022bc0 	.word	0x08022bc0
 80130b4:	08022bf4 	.word	0x08022bf4
 80130b8:	08022c20 	.word	0x08022c20

080130bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b086      	sub	sp, #24
 80130c0:	af02      	add	r7, sp, #8
 80130c2:	6078      	str	r0, [r7, #4]
 80130c4:	460b      	mov	r3, r1
 80130c6:	807b      	strh	r3, [r7, #2]
 80130c8:	4613      	mov	r3, r2
 80130ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80130cc:	883b      	ldrh	r3, [r7, #0]
 80130ce:	2b41      	cmp	r3, #65	; 0x41
 80130d0:	d009      	beq.n	80130e6 <pbuf_alloc_reference+0x2a>
 80130d2:	883b      	ldrh	r3, [r7, #0]
 80130d4:	2b01      	cmp	r3, #1
 80130d6:	d006      	beq.n	80130e6 <pbuf_alloc_reference+0x2a>
 80130d8:	4b0f      	ldr	r3, [pc, #60]	; (8013118 <pbuf_alloc_reference+0x5c>)
 80130da:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80130de:	490f      	ldr	r1, [pc, #60]	; (801311c <pbuf_alloc_reference+0x60>)
 80130e0:	480f      	ldr	r0, [pc, #60]	; (8013120 <pbuf_alloc_reference+0x64>)
 80130e2:	f00c fc03 	bl	801f8ec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80130e6:	200c      	movs	r0, #12
 80130e8:	f7ff fad4 	bl	8012694 <memp_malloc>
 80130ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d101      	bne.n	80130f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80130f4:	2300      	movs	r3, #0
 80130f6:	e00b      	b.n	8013110 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80130f8:	8879      	ldrh	r1, [r7, #2]
 80130fa:	887a      	ldrh	r2, [r7, #2]
 80130fc:	2300      	movs	r3, #0
 80130fe:	9301      	str	r3, [sp, #4]
 8013100:	883b      	ldrh	r3, [r7, #0]
 8013102:	9300      	str	r3, [sp, #0]
 8013104:	460b      	mov	r3, r1
 8013106:	6879      	ldr	r1, [r7, #4]
 8013108:	68f8      	ldr	r0, [r7, #12]
 801310a:	f7ff feb7 	bl	8012e7c <pbuf_init_alloced_pbuf>
  return p;
 801310e:	68fb      	ldr	r3, [r7, #12]
}
 8013110:	4618      	mov	r0, r3
 8013112:	3710      	adds	r7, #16
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	08022b38 	.word	0x08022b38
 801311c:	08022c3c 	.word	0x08022c3c
 8013120:	08022b98 	.word	0x08022b98

08013124 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b088      	sub	sp, #32
 8013128:	af02      	add	r7, sp, #8
 801312a:	607b      	str	r3, [r7, #4]
 801312c:	4603      	mov	r3, r0
 801312e:	73fb      	strb	r3, [r7, #15]
 8013130:	460b      	mov	r3, r1
 8013132:	81bb      	strh	r3, [r7, #12]
 8013134:	4613      	mov	r3, r2
 8013136:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013138:	7bfb      	ldrb	r3, [r7, #15]
 801313a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801313c:	8a7b      	ldrh	r3, [r7, #18]
 801313e:	3303      	adds	r3, #3
 8013140:	f023 0203 	bic.w	r2, r3, #3
 8013144:	89bb      	ldrh	r3, [r7, #12]
 8013146:	441a      	add	r2, r3
 8013148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801314a:	429a      	cmp	r2, r3
 801314c:	d901      	bls.n	8013152 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801314e:	2300      	movs	r3, #0
 8013150:	e018      	b.n	8013184 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013152:	6a3b      	ldr	r3, [r7, #32]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d007      	beq.n	8013168 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013158:	8a7b      	ldrh	r3, [r7, #18]
 801315a:	3303      	adds	r3, #3
 801315c:	f023 0303 	bic.w	r3, r3, #3
 8013160:	6a3a      	ldr	r2, [r7, #32]
 8013162:	4413      	add	r3, r2
 8013164:	617b      	str	r3, [r7, #20]
 8013166:	e001      	b.n	801316c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013168:	2300      	movs	r3, #0
 801316a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	89b9      	ldrh	r1, [r7, #12]
 8013170:	89ba      	ldrh	r2, [r7, #12]
 8013172:	2302      	movs	r3, #2
 8013174:	9301      	str	r3, [sp, #4]
 8013176:	897b      	ldrh	r3, [r7, #10]
 8013178:	9300      	str	r3, [sp, #0]
 801317a:	460b      	mov	r3, r1
 801317c:	6979      	ldr	r1, [r7, #20]
 801317e:	f7ff fe7d 	bl	8012e7c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013182:	687b      	ldr	r3, [r7, #4]
}
 8013184:	4618      	mov	r0, r3
 8013186:	3718      	adds	r7, #24
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}

0801318c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b084      	sub	sp, #16
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	460b      	mov	r3, r1
 8013196:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d106      	bne.n	80131ac <pbuf_realloc+0x20>
 801319e:	4b3a      	ldr	r3, [pc, #232]	; (8013288 <pbuf_realloc+0xfc>)
 80131a0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80131a4:	4939      	ldr	r1, [pc, #228]	; (801328c <pbuf_realloc+0x100>)
 80131a6:	483a      	ldr	r0, [pc, #232]	; (8013290 <pbuf_realloc+0x104>)
 80131a8:	f00c fba0 	bl	801f8ec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	891b      	ldrh	r3, [r3, #8]
 80131b0:	887a      	ldrh	r2, [r7, #2]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d263      	bcs.n	801327e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	891a      	ldrh	r2, [r3, #8]
 80131ba:	887b      	ldrh	r3, [r7, #2]
 80131bc:	1ad3      	subs	r3, r2, r3
 80131be:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80131c0:	887b      	ldrh	r3, [r7, #2]
 80131c2:	817b      	strh	r3, [r7, #10]
  q = p;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80131c8:	e018      	b.n	80131fc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	895b      	ldrh	r3, [r3, #10]
 80131ce:	897a      	ldrh	r2, [r7, #10]
 80131d0:	1ad3      	subs	r3, r2, r3
 80131d2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	891a      	ldrh	r2, [r3, #8]
 80131d8:	893b      	ldrh	r3, [r7, #8]
 80131da:	1ad3      	subs	r3, r2, r3
 80131dc:	b29a      	uxth	r2, r3
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d106      	bne.n	80131fc <pbuf_realloc+0x70>
 80131ee:	4b26      	ldr	r3, [pc, #152]	; (8013288 <pbuf_realloc+0xfc>)
 80131f0:	f240 12af 	movw	r2, #431	; 0x1af
 80131f4:	4927      	ldr	r1, [pc, #156]	; (8013294 <pbuf_realloc+0x108>)
 80131f6:	4826      	ldr	r0, [pc, #152]	; (8013290 <pbuf_realloc+0x104>)
 80131f8:	f00c fb78 	bl	801f8ec <iprintf>
  while (rem_len > q->len) {
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	895b      	ldrh	r3, [r3, #10]
 8013200:	897a      	ldrh	r2, [r7, #10]
 8013202:	429a      	cmp	r2, r3
 8013204:	d8e1      	bhi.n	80131ca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	7b1b      	ldrb	r3, [r3, #12]
 801320a:	f003 030f 	and.w	r3, r3, #15
 801320e:	2b00      	cmp	r3, #0
 8013210:	d121      	bne.n	8013256 <pbuf_realloc+0xca>
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	895b      	ldrh	r3, [r3, #10]
 8013216:	897a      	ldrh	r2, [r7, #10]
 8013218:	429a      	cmp	r2, r3
 801321a:	d01c      	beq.n	8013256 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	7b5b      	ldrb	r3, [r3, #13]
 8013220:	f003 0302 	and.w	r3, r3, #2
 8013224:	2b00      	cmp	r3, #0
 8013226:	d116      	bne.n	8013256 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	685a      	ldr	r2, [r3, #4]
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	1ad3      	subs	r3, r2, r3
 8013230:	b29a      	uxth	r2, r3
 8013232:	897b      	ldrh	r3, [r7, #10]
 8013234:	4413      	add	r3, r2
 8013236:	b29b      	uxth	r3, r3
 8013238:	4619      	mov	r1, r3
 801323a:	68f8      	ldr	r0, [r7, #12]
 801323c:	f7fe ff9e 	bl	801217c <mem_trim>
 8013240:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d106      	bne.n	8013256 <pbuf_realloc+0xca>
 8013248:	4b0f      	ldr	r3, [pc, #60]	; (8013288 <pbuf_realloc+0xfc>)
 801324a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801324e:	4912      	ldr	r1, [pc, #72]	; (8013298 <pbuf_realloc+0x10c>)
 8013250:	480f      	ldr	r0, [pc, #60]	; (8013290 <pbuf_realloc+0x104>)
 8013252:	f00c fb4b 	bl	801f8ec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	897a      	ldrh	r2, [r7, #10]
 801325a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	895a      	ldrh	r2, [r3, #10]
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d004      	beq.n	8013276 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	4618      	mov	r0, r3
 8013272:	f000 f911 	bl	8013498 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2200      	movs	r2, #0
 801327a:	601a      	str	r2, [r3, #0]
 801327c:	e000      	b.n	8013280 <pbuf_realloc+0xf4>
    return;
 801327e:	bf00      	nop

}
 8013280:	3710      	adds	r7, #16
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}
 8013286:	bf00      	nop
 8013288:	08022b38 	.word	0x08022b38
 801328c:	08022c50 	.word	0x08022c50
 8013290:	08022b98 	.word	0x08022b98
 8013294:	08022c68 	.word	0x08022c68
 8013298:	08022c80 	.word	0x08022c80

0801329c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b086      	sub	sp, #24
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	4613      	mov	r3, r2
 80132a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d106      	bne.n	80132be <pbuf_add_header_impl+0x22>
 80132b0:	4b2b      	ldr	r3, [pc, #172]	; (8013360 <pbuf_add_header_impl+0xc4>)
 80132b2:	f240 12df 	movw	r2, #479	; 0x1df
 80132b6:	492b      	ldr	r1, [pc, #172]	; (8013364 <pbuf_add_header_impl+0xc8>)
 80132b8:	482b      	ldr	r0, [pc, #172]	; (8013368 <pbuf_add_header_impl+0xcc>)
 80132ba:	f00c fb17 	bl	801f8ec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d003      	beq.n	80132cc <pbuf_add_header_impl+0x30>
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132ca:	d301      	bcc.n	80132d0 <pbuf_add_header_impl+0x34>
    return 1;
 80132cc:	2301      	movs	r3, #1
 80132ce:	e043      	b.n	8013358 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d101      	bne.n	80132da <pbuf_add_header_impl+0x3e>
    return 0;
 80132d6:	2300      	movs	r3, #0
 80132d8:	e03e      	b.n	8013358 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	891a      	ldrh	r2, [r3, #8]
 80132e2:	8a7b      	ldrh	r3, [r7, #18]
 80132e4:	4413      	add	r3, r2
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	8a7a      	ldrh	r2, [r7, #18]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d901      	bls.n	80132f2 <pbuf_add_header_impl+0x56>
    return 1;
 80132ee:	2301      	movs	r3, #1
 80132f0:	e032      	b.n	8013358 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	7b1b      	ldrb	r3, [r3, #12]
 80132f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80132f8:	8a3b      	ldrh	r3, [r7, #16]
 80132fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d00c      	beq.n	801331c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	685a      	ldr	r2, [r3, #4]
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	425b      	negs	r3, r3
 801330a:	4413      	add	r3, r2
 801330c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	3310      	adds	r3, #16
 8013312:	697a      	ldr	r2, [r7, #20]
 8013314:	429a      	cmp	r2, r3
 8013316:	d20d      	bcs.n	8013334 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013318:	2301      	movs	r3, #1
 801331a:	e01d      	b.n	8013358 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801331c:	79fb      	ldrb	r3, [r7, #7]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d006      	beq.n	8013330 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	685a      	ldr	r2, [r3, #4]
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	425b      	negs	r3, r3
 801332a:	4413      	add	r3, r2
 801332c:	617b      	str	r3, [r7, #20]
 801332e:	e001      	b.n	8013334 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013330:	2301      	movs	r3, #1
 8013332:	e011      	b.n	8013358 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	697a      	ldr	r2, [r7, #20]
 8013338:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	895a      	ldrh	r2, [r3, #10]
 801333e:	8a7b      	ldrh	r3, [r7, #18]
 8013340:	4413      	add	r3, r2
 8013342:	b29a      	uxth	r2, r3
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	891a      	ldrh	r2, [r3, #8]
 801334c:	8a7b      	ldrh	r3, [r7, #18]
 801334e:	4413      	add	r3, r2
 8013350:	b29a      	uxth	r2, r3
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	811a      	strh	r2, [r3, #8]


  return 0;
 8013356:	2300      	movs	r3, #0
}
 8013358:	4618      	mov	r0, r3
 801335a:	3718      	adds	r7, #24
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	08022b38 	.word	0x08022b38
 8013364:	08022c9c 	.word	0x08022c9c
 8013368:	08022b98 	.word	0x08022b98

0801336c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
 8013374:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013376:	2200      	movs	r2, #0
 8013378:	6839      	ldr	r1, [r7, #0]
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f7ff ff8e 	bl	801329c <pbuf_add_header_impl>
 8013380:	4603      	mov	r3, r0
}
 8013382:	4618      	mov	r0, r3
 8013384:	3708      	adds	r7, #8
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
	...

0801338c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d106      	bne.n	80133aa <pbuf_remove_header+0x1e>
 801339c:	4b20      	ldr	r3, [pc, #128]	; (8013420 <pbuf_remove_header+0x94>)
 801339e:	f240 224b 	movw	r2, #587	; 0x24b
 80133a2:	4920      	ldr	r1, [pc, #128]	; (8013424 <pbuf_remove_header+0x98>)
 80133a4:	4820      	ldr	r0, [pc, #128]	; (8013428 <pbuf_remove_header+0x9c>)
 80133a6:	f00c faa1 	bl	801f8ec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d003      	beq.n	80133b8 <pbuf_remove_header+0x2c>
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133b6:	d301      	bcc.n	80133bc <pbuf_remove_header+0x30>
    return 1;
 80133b8:	2301      	movs	r3, #1
 80133ba:	e02c      	b.n	8013416 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d101      	bne.n	80133c6 <pbuf_remove_header+0x3a>
    return 0;
 80133c2:	2300      	movs	r3, #0
 80133c4:	e027      	b.n	8013416 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	895b      	ldrh	r3, [r3, #10]
 80133ce:	89fa      	ldrh	r2, [r7, #14]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d908      	bls.n	80133e6 <pbuf_remove_header+0x5a>
 80133d4:	4b12      	ldr	r3, [pc, #72]	; (8013420 <pbuf_remove_header+0x94>)
 80133d6:	f240 2255 	movw	r2, #597	; 0x255
 80133da:	4914      	ldr	r1, [pc, #80]	; (801342c <pbuf_remove_header+0xa0>)
 80133dc:	4812      	ldr	r0, [pc, #72]	; (8013428 <pbuf_remove_header+0x9c>)
 80133de:	f00c fa85 	bl	801f8ec <iprintf>
 80133e2:	2301      	movs	r3, #1
 80133e4:	e017      	b.n	8013416 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	685a      	ldr	r2, [r3, #4]
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	441a      	add	r2, r3
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	895a      	ldrh	r2, [r3, #10]
 80133fc:	89fb      	ldrh	r3, [r7, #14]
 80133fe:	1ad3      	subs	r3, r2, r3
 8013400:	b29a      	uxth	r2, r3
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	891a      	ldrh	r2, [r3, #8]
 801340a:	89fb      	ldrh	r3, [r7, #14]
 801340c:	1ad3      	subs	r3, r2, r3
 801340e:	b29a      	uxth	r2, r3
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013414:	2300      	movs	r3, #0
}
 8013416:	4618      	mov	r0, r3
 8013418:	3710      	adds	r7, #16
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
 801341e:	bf00      	nop
 8013420:	08022b38 	.word	0x08022b38
 8013424:	08022c9c 	.word	0x08022c9c
 8013428:	08022b98 	.word	0x08022b98
 801342c:	08022ca8 	.word	0x08022ca8

08013430 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	460b      	mov	r3, r1
 801343a:	807b      	strh	r3, [r7, #2]
 801343c:	4613      	mov	r3, r2
 801343e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013440:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013444:	2b00      	cmp	r3, #0
 8013446:	da08      	bge.n	801345a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013448:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801344c:	425b      	negs	r3, r3
 801344e:	4619      	mov	r1, r3
 8013450:	6878      	ldr	r0, [r7, #4]
 8013452:	f7ff ff9b 	bl	801338c <pbuf_remove_header>
 8013456:	4603      	mov	r3, r0
 8013458:	e007      	b.n	801346a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801345a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801345e:	787a      	ldrb	r2, [r7, #1]
 8013460:	4619      	mov	r1, r3
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f7ff ff1a 	bl	801329c <pbuf_add_header_impl>
 8013468:	4603      	mov	r3, r0
  }
}
 801346a:	4618      	mov	r0, r3
 801346c:	3708      	adds	r7, #8
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}

08013472 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013472:	b580      	push	{r7, lr}
 8013474:	b082      	sub	sp, #8
 8013476:	af00      	add	r7, sp, #0
 8013478:	6078      	str	r0, [r7, #4]
 801347a:	460b      	mov	r3, r1
 801347c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801347e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013482:	2201      	movs	r2, #1
 8013484:	4619      	mov	r1, r3
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f7ff ffd2 	bl	8013430 <pbuf_header_impl>
 801348c:	4603      	mov	r3, r0
}
 801348e:	4618      	mov	r0, r3
 8013490:	3708      	adds	r7, #8
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
	...

08013498 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b088      	sub	sp, #32
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d10b      	bne.n	80134be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d106      	bne.n	80134ba <pbuf_free+0x22>
 80134ac:	4b3b      	ldr	r3, [pc, #236]	; (801359c <pbuf_free+0x104>)
 80134ae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80134b2:	493b      	ldr	r1, [pc, #236]	; (80135a0 <pbuf_free+0x108>)
 80134b4:	483b      	ldr	r0, [pc, #236]	; (80135a4 <pbuf_free+0x10c>)
 80134b6:	f00c fa19 	bl	801f8ec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80134ba:	2300      	movs	r3, #0
 80134bc:	e069      	b.n	8013592 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80134be:	2300      	movs	r3, #0
 80134c0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80134c2:	e062      	b.n	801358a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80134c4:	f00b ffc6 	bl	801f454 <sys_arch_protect>
 80134c8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	7b9b      	ldrb	r3, [r3, #14]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d106      	bne.n	80134e0 <pbuf_free+0x48>
 80134d2:	4b32      	ldr	r3, [pc, #200]	; (801359c <pbuf_free+0x104>)
 80134d4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80134d8:	4933      	ldr	r1, [pc, #204]	; (80135a8 <pbuf_free+0x110>)
 80134da:	4832      	ldr	r0, [pc, #200]	; (80135a4 <pbuf_free+0x10c>)
 80134dc:	f00c fa06 	bl	801f8ec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	7b9b      	ldrb	r3, [r3, #14]
 80134e4:	3b01      	subs	r3, #1
 80134e6:	b2da      	uxtb	r2, r3
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	739a      	strb	r2, [r3, #14]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	7b9b      	ldrb	r3, [r3, #14]
 80134f0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80134f2:	69b8      	ldr	r0, [r7, #24]
 80134f4:	f00b ffbc 	bl	801f470 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80134f8:	7dfb      	ldrb	r3, [r7, #23]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d143      	bne.n	8013586 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	7b1b      	ldrb	r3, [r3, #12]
 8013508:	f003 030f 	and.w	r3, r3, #15
 801350c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	7b5b      	ldrb	r3, [r3, #13]
 8013512:	f003 0302 	and.w	r3, r3, #2
 8013516:	2b00      	cmp	r3, #0
 8013518:	d011      	beq.n	801353e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801351e:	68bb      	ldr	r3, [r7, #8]
 8013520:	691b      	ldr	r3, [r3, #16]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d106      	bne.n	8013534 <pbuf_free+0x9c>
 8013526:	4b1d      	ldr	r3, [pc, #116]	; (801359c <pbuf_free+0x104>)
 8013528:	f240 22ff 	movw	r2, #767	; 0x2ff
 801352c:	491f      	ldr	r1, [pc, #124]	; (80135ac <pbuf_free+0x114>)
 801352e:	481d      	ldr	r0, [pc, #116]	; (80135a4 <pbuf_free+0x10c>)
 8013530:	f00c f9dc 	bl	801f8ec <iprintf>
        pc->custom_free_function(p);
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	691b      	ldr	r3, [r3, #16]
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	4798      	blx	r3
 801353c:	e01d      	b.n	801357a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801353e:	7bfb      	ldrb	r3, [r7, #15]
 8013540:	2b02      	cmp	r3, #2
 8013542:	d104      	bne.n	801354e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013544:	6879      	ldr	r1, [r7, #4]
 8013546:	200d      	movs	r0, #13
 8013548:	f7ff f8f6 	bl	8012738 <memp_free>
 801354c:	e015      	b.n	801357a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801354e:	7bfb      	ldrb	r3, [r7, #15]
 8013550:	2b01      	cmp	r3, #1
 8013552:	d104      	bne.n	801355e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013554:	6879      	ldr	r1, [r7, #4]
 8013556:	200c      	movs	r0, #12
 8013558:	f7ff f8ee 	bl	8012738 <memp_free>
 801355c:	e00d      	b.n	801357a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801355e:	7bfb      	ldrb	r3, [r7, #15]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d103      	bne.n	801356c <pbuf_free+0xd4>
          mem_free(p);
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f7fe fd79 	bl	801205c <mem_free>
 801356a:	e006      	b.n	801357a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801356c:	4b0b      	ldr	r3, [pc, #44]	; (801359c <pbuf_free+0x104>)
 801356e:	f240 320f 	movw	r2, #783	; 0x30f
 8013572:	490f      	ldr	r1, [pc, #60]	; (80135b0 <pbuf_free+0x118>)
 8013574:	480b      	ldr	r0, [pc, #44]	; (80135a4 <pbuf_free+0x10c>)
 8013576:	f00c f9b9 	bl	801f8ec <iprintf>
        }
      }
      count++;
 801357a:	7ffb      	ldrb	r3, [r7, #31]
 801357c:	3301      	adds	r3, #1
 801357e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	607b      	str	r3, [r7, #4]
 8013584:	e001      	b.n	801358a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8013586:	2300      	movs	r3, #0
 8013588:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d199      	bne.n	80134c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013590:	7ffb      	ldrb	r3, [r7, #31]
}
 8013592:	4618      	mov	r0, r3
 8013594:	3720      	adds	r7, #32
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
 801359a:	bf00      	nop
 801359c:	08022b38 	.word	0x08022b38
 80135a0:	08022c9c 	.word	0x08022c9c
 80135a4:	08022b98 	.word	0x08022b98
 80135a8:	08022cc8 	.word	0x08022cc8
 80135ac:	08022ce0 	.word	0x08022ce0
 80135b0:	08022d04 	.word	0x08022d04

080135b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80135b4:	b480      	push	{r7}
 80135b6:	b085      	sub	sp, #20
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80135bc:	2300      	movs	r3, #0
 80135be:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80135c0:	e005      	b.n	80135ce <pbuf_clen+0x1a>
    ++len;
 80135c2:	89fb      	ldrh	r3, [r7, #14]
 80135c4:	3301      	adds	r3, #1
 80135c6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d1f6      	bne.n	80135c2 <pbuf_clen+0xe>
  }
  return len;
 80135d4:	89fb      	ldrh	r3, [r7, #14]
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	3714      	adds	r7, #20
 80135da:	46bd      	mov	sp, r7
 80135dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e0:	4770      	bx	lr
	...

080135e4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b084      	sub	sp, #16
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d016      	beq.n	8013620 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80135f2:	f00b ff2f 	bl	801f454 <sys_arch_protect>
 80135f6:	60f8      	str	r0, [r7, #12]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	7b9b      	ldrb	r3, [r3, #14]
 80135fc:	3301      	adds	r3, #1
 80135fe:	b2da      	uxtb	r2, r3
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	739a      	strb	r2, [r3, #14]
 8013604:	68f8      	ldr	r0, [r7, #12]
 8013606:	f00b ff33 	bl	801f470 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	7b9b      	ldrb	r3, [r3, #14]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d106      	bne.n	8013620 <pbuf_ref+0x3c>
 8013612:	4b05      	ldr	r3, [pc, #20]	; (8013628 <pbuf_ref+0x44>)
 8013614:	f240 3242 	movw	r2, #834	; 0x342
 8013618:	4904      	ldr	r1, [pc, #16]	; (801362c <pbuf_ref+0x48>)
 801361a:	4805      	ldr	r0, [pc, #20]	; (8013630 <pbuf_ref+0x4c>)
 801361c:	f00c f966 	bl	801f8ec <iprintf>
  }
}
 8013620:	bf00      	nop
 8013622:	3710      	adds	r7, #16
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}
 8013628:	08022b38 	.word	0x08022b38
 801362c:	08022d18 	.word	0x08022d18
 8013630:	08022b98 	.word	0x08022b98

08013634 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b084      	sub	sp, #16
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d002      	beq.n	801364a <pbuf_cat+0x16>
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d107      	bne.n	801365a <pbuf_cat+0x26>
 801364a:	4b20      	ldr	r3, [pc, #128]	; (80136cc <pbuf_cat+0x98>)
 801364c:	f240 3259 	movw	r2, #857	; 0x359
 8013650:	491f      	ldr	r1, [pc, #124]	; (80136d0 <pbuf_cat+0x9c>)
 8013652:	4820      	ldr	r0, [pc, #128]	; (80136d4 <pbuf_cat+0xa0>)
 8013654:	f00c f94a 	bl	801f8ec <iprintf>
 8013658:	e034      	b.n	80136c4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	60fb      	str	r3, [r7, #12]
 801365e:	e00a      	b.n	8013676 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	891a      	ldrh	r2, [r3, #8]
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	891b      	ldrh	r3, [r3, #8]
 8013668:	4413      	add	r3, r2
 801366a:	b29a      	uxth	r2, r3
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	60fb      	str	r3, [r7, #12]
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d1f0      	bne.n	8013660 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	891a      	ldrh	r2, [r3, #8]
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	895b      	ldrh	r3, [r3, #10]
 8013686:	429a      	cmp	r2, r3
 8013688:	d006      	beq.n	8013698 <pbuf_cat+0x64>
 801368a:	4b10      	ldr	r3, [pc, #64]	; (80136cc <pbuf_cat+0x98>)
 801368c:	f240 3262 	movw	r2, #866	; 0x362
 8013690:	4911      	ldr	r1, [pc, #68]	; (80136d8 <pbuf_cat+0xa4>)
 8013692:	4810      	ldr	r0, [pc, #64]	; (80136d4 <pbuf_cat+0xa0>)
 8013694:	f00c f92a 	bl	801f8ec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d006      	beq.n	80136ae <pbuf_cat+0x7a>
 80136a0:	4b0a      	ldr	r3, [pc, #40]	; (80136cc <pbuf_cat+0x98>)
 80136a2:	f240 3263 	movw	r2, #867	; 0x363
 80136a6:	490d      	ldr	r1, [pc, #52]	; (80136dc <pbuf_cat+0xa8>)
 80136a8:	480a      	ldr	r0, [pc, #40]	; (80136d4 <pbuf_cat+0xa0>)
 80136aa:	f00c f91f 	bl	801f8ec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	891a      	ldrh	r2, [r3, #8]
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	891b      	ldrh	r3, [r3, #8]
 80136b6:	4413      	add	r3, r2
 80136b8:	b29a      	uxth	r2, r3
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	683a      	ldr	r2, [r7, #0]
 80136c2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80136c4:	3710      	adds	r7, #16
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop
 80136cc:	08022b38 	.word	0x08022b38
 80136d0:	08022d2c 	.word	0x08022d2c
 80136d4:	08022b98 	.word	0x08022b98
 80136d8:	08022d64 	.word	0x08022d64
 80136dc:	08022d94 	.word	0x08022d94

080136e0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b082      	sub	sp, #8
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80136ea:	6839      	ldr	r1, [r7, #0]
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f7ff ffa1 	bl	8013634 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80136f2:	6838      	ldr	r0, [r7, #0]
 80136f4:	f7ff ff76 	bl	80135e4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80136f8:	bf00      	nop
 80136fa:	3708      	adds	r7, #8
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b086      	sub	sp, #24
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801370a:	2300      	movs	r3, #0
 801370c:	617b      	str	r3, [r7, #20]
 801370e:	2300      	movs	r3, #0
 8013710:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d008      	beq.n	801372a <pbuf_copy+0x2a>
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d005      	beq.n	801372a <pbuf_copy+0x2a>
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	891a      	ldrh	r2, [r3, #8]
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	891b      	ldrh	r3, [r3, #8]
 8013726:	429a      	cmp	r2, r3
 8013728:	d209      	bcs.n	801373e <pbuf_copy+0x3e>
 801372a:	4b57      	ldr	r3, [pc, #348]	; (8013888 <pbuf_copy+0x188>)
 801372c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8013730:	4956      	ldr	r1, [pc, #344]	; (801388c <pbuf_copy+0x18c>)
 8013732:	4857      	ldr	r0, [pc, #348]	; (8013890 <pbuf_copy+0x190>)
 8013734:	f00c f8da 	bl	801f8ec <iprintf>
 8013738:	f06f 030f 	mvn.w	r3, #15
 801373c:	e09f      	b.n	801387e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	895b      	ldrh	r3, [r3, #10]
 8013742:	461a      	mov	r2, r3
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	1ad2      	subs	r2, r2, r3
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	895b      	ldrh	r3, [r3, #10]
 801374c:	4619      	mov	r1, r3
 801374e:	693b      	ldr	r3, [r7, #16]
 8013750:	1acb      	subs	r3, r1, r3
 8013752:	429a      	cmp	r2, r3
 8013754:	d306      	bcc.n	8013764 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	895b      	ldrh	r3, [r3, #10]
 801375a:	461a      	mov	r2, r3
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	1ad3      	subs	r3, r2, r3
 8013760:	60fb      	str	r3, [r7, #12]
 8013762:	e005      	b.n	8013770 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	895b      	ldrh	r3, [r3, #10]
 8013768:	461a      	mov	r2, r3
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	1ad3      	subs	r3, r2, r3
 801376e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	685a      	ldr	r2, [r3, #4]
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	18d0      	adds	r0, r2, r3
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	685a      	ldr	r2, [r3, #4]
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	4413      	add	r3, r2
 8013780:	68fa      	ldr	r2, [r7, #12]
 8013782:	4619      	mov	r1, r3
 8013784:	f00b ffc8 	bl	801f718 <memcpy>
    offset_to += len;
 8013788:	697a      	ldr	r2, [r7, #20]
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	4413      	add	r3, r2
 801378e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013790:	693a      	ldr	r2, [r7, #16]
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	4413      	add	r3, r2
 8013796:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	895b      	ldrh	r3, [r3, #10]
 801379c:	461a      	mov	r2, r3
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	4293      	cmp	r3, r2
 80137a2:	d906      	bls.n	80137b2 <pbuf_copy+0xb2>
 80137a4:	4b38      	ldr	r3, [pc, #224]	; (8013888 <pbuf_copy+0x188>)
 80137a6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80137aa:	493a      	ldr	r1, [pc, #232]	; (8013894 <pbuf_copy+0x194>)
 80137ac:	4838      	ldr	r0, [pc, #224]	; (8013890 <pbuf_copy+0x190>)
 80137ae:	f00c f89d 	bl	801f8ec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	895b      	ldrh	r3, [r3, #10]
 80137b6:	461a      	mov	r2, r3
 80137b8:	693b      	ldr	r3, [r7, #16]
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d906      	bls.n	80137cc <pbuf_copy+0xcc>
 80137be:	4b32      	ldr	r3, [pc, #200]	; (8013888 <pbuf_copy+0x188>)
 80137c0:	f240 32da 	movw	r2, #986	; 0x3da
 80137c4:	4934      	ldr	r1, [pc, #208]	; (8013898 <pbuf_copy+0x198>)
 80137c6:	4832      	ldr	r0, [pc, #200]	; (8013890 <pbuf_copy+0x190>)
 80137c8:	f00c f890 	bl	801f8ec <iprintf>
    if (offset_from >= p_from->len) {
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	895b      	ldrh	r3, [r3, #10]
 80137d0:	461a      	mov	r2, r3
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	4293      	cmp	r3, r2
 80137d6:	d304      	bcc.n	80137e2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80137d8:	2300      	movs	r3, #0
 80137da:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	895b      	ldrh	r3, [r3, #10]
 80137e6:	461a      	mov	r2, r3
 80137e8:	697b      	ldr	r3, [r7, #20]
 80137ea:	4293      	cmp	r3, r2
 80137ec:	d114      	bne.n	8013818 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80137ee:	2300      	movs	r3, #0
 80137f0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d10c      	bne.n	8013818 <pbuf_copy+0x118>
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d009      	beq.n	8013818 <pbuf_copy+0x118>
 8013804:	4b20      	ldr	r3, [pc, #128]	; (8013888 <pbuf_copy+0x188>)
 8013806:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801380a:	4924      	ldr	r1, [pc, #144]	; (801389c <pbuf_copy+0x19c>)
 801380c:	4820      	ldr	r0, [pc, #128]	; (8013890 <pbuf_copy+0x190>)
 801380e:	f00c f86d 	bl	801f8ec <iprintf>
 8013812:	f06f 030f 	mvn.w	r3, #15
 8013816:	e032      	b.n	801387e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d013      	beq.n	8013846 <pbuf_copy+0x146>
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	895a      	ldrh	r2, [r3, #10]
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	891b      	ldrh	r3, [r3, #8]
 8013826:	429a      	cmp	r2, r3
 8013828:	d10d      	bne.n	8013846 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d009      	beq.n	8013846 <pbuf_copy+0x146>
 8013832:	4b15      	ldr	r3, [pc, #84]	; (8013888 <pbuf_copy+0x188>)
 8013834:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8013838:	4919      	ldr	r1, [pc, #100]	; (80138a0 <pbuf_copy+0x1a0>)
 801383a:	4815      	ldr	r0, [pc, #84]	; (8013890 <pbuf_copy+0x190>)
 801383c:	f00c f856 	bl	801f8ec <iprintf>
 8013840:	f06f 0305 	mvn.w	r3, #5
 8013844:	e01b      	b.n	801387e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d013      	beq.n	8013874 <pbuf_copy+0x174>
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	895a      	ldrh	r2, [r3, #10]
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	891b      	ldrh	r3, [r3, #8]
 8013854:	429a      	cmp	r2, r3
 8013856:	d10d      	bne.n	8013874 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d009      	beq.n	8013874 <pbuf_copy+0x174>
 8013860:	4b09      	ldr	r3, [pc, #36]	; (8013888 <pbuf_copy+0x188>)
 8013862:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8013866:	490e      	ldr	r1, [pc, #56]	; (80138a0 <pbuf_copy+0x1a0>)
 8013868:	4809      	ldr	r0, [pc, #36]	; (8013890 <pbuf_copy+0x190>)
 801386a:	f00c f83f 	bl	801f8ec <iprintf>
 801386e:	f06f 0305 	mvn.w	r3, #5
 8013872:	e004      	b.n	801387e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	f47f af61 	bne.w	801373e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801387c:	2300      	movs	r3, #0
}
 801387e:	4618      	mov	r0, r3
 8013880:	3718      	adds	r7, #24
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}
 8013886:	bf00      	nop
 8013888:	08022b38 	.word	0x08022b38
 801388c:	08022de0 	.word	0x08022de0
 8013890:	08022b98 	.word	0x08022b98
 8013894:	08022e10 	.word	0x08022e10
 8013898:	08022e28 	.word	0x08022e28
 801389c:	08022e44 	.word	0x08022e44
 80138a0:	08022e54 	.word	0x08022e54

080138a4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b088      	sub	sp, #32
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	60b9      	str	r1, [r7, #8]
 80138ae:	4611      	mov	r1, r2
 80138b0:	461a      	mov	r2, r3
 80138b2:	460b      	mov	r3, r1
 80138b4:	80fb      	strh	r3, [r7, #6]
 80138b6:	4613      	mov	r3, r2
 80138b8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80138ba:	2300      	movs	r3, #0
 80138bc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80138be:	2300      	movs	r3, #0
 80138c0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d108      	bne.n	80138da <pbuf_copy_partial+0x36>
 80138c8:	4b2b      	ldr	r3, [pc, #172]	; (8013978 <pbuf_copy_partial+0xd4>)
 80138ca:	f240 420a 	movw	r2, #1034	; 0x40a
 80138ce:	492b      	ldr	r1, [pc, #172]	; (801397c <pbuf_copy_partial+0xd8>)
 80138d0:	482b      	ldr	r0, [pc, #172]	; (8013980 <pbuf_copy_partial+0xdc>)
 80138d2:	f00c f80b 	bl	801f8ec <iprintf>
 80138d6:	2300      	movs	r3, #0
 80138d8:	e04a      	b.n	8013970 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d108      	bne.n	80138f2 <pbuf_copy_partial+0x4e>
 80138e0:	4b25      	ldr	r3, [pc, #148]	; (8013978 <pbuf_copy_partial+0xd4>)
 80138e2:	f240 420b 	movw	r2, #1035	; 0x40b
 80138e6:	4927      	ldr	r1, [pc, #156]	; (8013984 <pbuf_copy_partial+0xe0>)
 80138e8:	4825      	ldr	r0, [pc, #148]	; (8013980 <pbuf_copy_partial+0xdc>)
 80138ea:	f00b ffff 	bl	801f8ec <iprintf>
 80138ee:	2300      	movs	r3, #0
 80138f0:	e03e      	b.n	8013970 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	61fb      	str	r3, [r7, #28]
 80138f6:	e034      	b.n	8013962 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80138f8:	88bb      	ldrh	r3, [r7, #4]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d00a      	beq.n	8013914 <pbuf_copy_partial+0x70>
 80138fe:	69fb      	ldr	r3, [r7, #28]
 8013900:	895b      	ldrh	r3, [r3, #10]
 8013902:	88ba      	ldrh	r2, [r7, #4]
 8013904:	429a      	cmp	r2, r3
 8013906:	d305      	bcc.n	8013914 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013908:	69fb      	ldr	r3, [r7, #28]
 801390a:	895b      	ldrh	r3, [r3, #10]
 801390c:	88ba      	ldrh	r2, [r7, #4]
 801390e:	1ad3      	subs	r3, r2, r3
 8013910:	80bb      	strh	r3, [r7, #4]
 8013912:	e023      	b.n	801395c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	895a      	ldrh	r2, [r3, #10]
 8013918:	88bb      	ldrh	r3, [r7, #4]
 801391a:	1ad3      	subs	r3, r2, r3
 801391c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801391e:	8b3a      	ldrh	r2, [r7, #24]
 8013920:	88fb      	ldrh	r3, [r7, #6]
 8013922:	429a      	cmp	r2, r3
 8013924:	d901      	bls.n	801392a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013926:	88fb      	ldrh	r3, [r7, #6]
 8013928:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801392a:	8b7b      	ldrh	r3, [r7, #26]
 801392c:	68ba      	ldr	r2, [r7, #8]
 801392e:	18d0      	adds	r0, r2, r3
 8013930:	69fb      	ldr	r3, [r7, #28]
 8013932:	685a      	ldr	r2, [r3, #4]
 8013934:	88bb      	ldrh	r3, [r7, #4]
 8013936:	4413      	add	r3, r2
 8013938:	8b3a      	ldrh	r2, [r7, #24]
 801393a:	4619      	mov	r1, r3
 801393c:	f00b feec 	bl	801f718 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013940:	8afa      	ldrh	r2, [r7, #22]
 8013942:	8b3b      	ldrh	r3, [r7, #24]
 8013944:	4413      	add	r3, r2
 8013946:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013948:	8b7a      	ldrh	r2, [r7, #26]
 801394a:	8b3b      	ldrh	r3, [r7, #24]
 801394c:	4413      	add	r3, r2
 801394e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013950:	88fa      	ldrh	r2, [r7, #6]
 8013952:	8b3b      	ldrh	r3, [r7, #24]
 8013954:	1ad3      	subs	r3, r2, r3
 8013956:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8013958:	2300      	movs	r3, #0
 801395a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801395c:	69fb      	ldr	r3, [r7, #28]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	61fb      	str	r3, [r7, #28]
 8013962:	88fb      	ldrh	r3, [r7, #6]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d002      	beq.n	801396e <pbuf_copy_partial+0xca>
 8013968:	69fb      	ldr	r3, [r7, #28]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d1c4      	bne.n	80138f8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801396e:	8afb      	ldrh	r3, [r7, #22]
}
 8013970:	4618      	mov	r0, r3
 8013972:	3720      	adds	r7, #32
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}
 8013978:	08022b38 	.word	0x08022b38
 801397c:	08022e80 	.word	0x08022e80
 8013980:	08022b98 	.word	0x08022b98
 8013984:	08022ea0 	.word	0x08022ea0

08013988 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8013988:	b480      	push	{r7}
 801398a:	b087      	sub	sp, #28
 801398c:	af00      	add	r7, sp, #0
 801398e:	60f8      	str	r0, [r7, #12]
 8013990:	460b      	mov	r3, r1
 8013992:	607a      	str	r2, [r7, #4]
 8013994:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8013996:	897b      	ldrh	r3, [r7, #10]
 8013998:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801399e:	e007      	b.n	80139b0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80139a0:	693b      	ldr	r3, [r7, #16]
 80139a2:	895b      	ldrh	r3, [r3, #10]
 80139a4:	8afa      	ldrh	r2, [r7, #22]
 80139a6:	1ad3      	subs	r3, r2, r3
 80139a8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80139b0:	693b      	ldr	r3, [r7, #16]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d004      	beq.n	80139c0 <pbuf_skip_const+0x38>
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	895b      	ldrh	r3, [r3, #10]
 80139ba:	8afa      	ldrh	r2, [r7, #22]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d2ef      	bcs.n	80139a0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d002      	beq.n	80139cc <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	8afa      	ldrh	r2, [r7, #22]
 80139ca:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80139cc:	693b      	ldr	r3, [r7, #16]
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	371c      	adds	r7, #28
 80139d2:	46bd      	mov	sp, r7
 80139d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d8:	4770      	bx	lr

080139da <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80139da:	b580      	push	{r7, lr}
 80139dc:	b086      	sub	sp, #24
 80139de:	af00      	add	r7, sp, #0
 80139e0:	60f8      	str	r0, [r7, #12]
 80139e2:	460b      	mov	r3, r1
 80139e4:	607a      	str	r2, [r7, #4]
 80139e6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80139e8:	897b      	ldrh	r3, [r7, #10]
 80139ea:	687a      	ldr	r2, [r7, #4]
 80139ec:	4619      	mov	r1, r3
 80139ee:	68f8      	ldr	r0, [r7, #12]
 80139f0:	f7ff ffca 	bl	8013988 <pbuf_skip_const>
 80139f4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 80139f6:	697b      	ldr	r3, [r7, #20]
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3718      	adds	r7, #24
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}

08013a00 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b088      	sub	sp, #32
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	60f8      	str	r0, [r7, #12]
 8013a08:	60b9      	str	r1, [r7, #8]
 8013a0a:	4613      	mov	r3, r2
 8013a0c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8013a0e:	88fb      	ldrh	r3, [r7, #6]
 8013a10:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8013a12:	2300      	movs	r3, #0
 8013a14:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d109      	bne.n	8013a30 <pbuf_take+0x30>
 8013a1c:	4b3a      	ldr	r3, [pc, #232]	; (8013b08 <pbuf_take+0x108>)
 8013a1e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8013a22:	493a      	ldr	r1, [pc, #232]	; (8013b0c <pbuf_take+0x10c>)
 8013a24:	483a      	ldr	r0, [pc, #232]	; (8013b10 <pbuf_take+0x110>)
 8013a26:	f00b ff61 	bl	801f8ec <iprintf>
 8013a2a:	f06f 030f 	mvn.w	r3, #15
 8013a2e:	e067      	b.n	8013b00 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d109      	bne.n	8013a4a <pbuf_take+0x4a>
 8013a36:	4b34      	ldr	r3, [pc, #208]	; (8013b08 <pbuf_take+0x108>)
 8013a38:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8013a3c:	4935      	ldr	r1, [pc, #212]	; (8013b14 <pbuf_take+0x114>)
 8013a3e:	4834      	ldr	r0, [pc, #208]	; (8013b10 <pbuf_take+0x110>)
 8013a40:	f00b ff54 	bl	801f8ec <iprintf>
 8013a44:	f06f 030f 	mvn.w	r3, #15
 8013a48:	e05a      	b.n	8013b00 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	891b      	ldrh	r3, [r3, #8]
 8013a4e:	88fa      	ldrh	r2, [r7, #6]
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d909      	bls.n	8013a68 <pbuf_take+0x68>
 8013a54:	4b2c      	ldr	r3, [pc, #176]	; (8013b08 <pbuf_take+0x108>)
 8013a56:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8013a5a:	492f      	ldr	r1, [pc, #188]	; (8013b18 <pbuf_take+0x118>)
 8013a5c:	482c      	ldr	r0, [pc, #176]	; (8013b10 <pbuf_take+0x110>)
 8013a5e:	f00b ff45 	bl	801f8ec <iprintf>
 8013a62:	f04f 33ff 	mov.w	r3, #4294967295
 8013a66:	e04b      	b.n	8013b00 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d007      	beq.n	8013a7e <pbuf_take+0x7e>
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d004      	beq.n	8013a7e <pbuf_take+0x7e>
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	891b      	ldrh	r3, [r3, #8]
 8013a78:	88fa      	ldrh	r2, [r7, #6]
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d902      	bls.n	8013a84 <pbuf_take+0x84>
    return ERR_ARG;
 8013a7e:	f06f 030f 	mvn.w	r3, #15
 8013a82:	e03d      	b.n	8013b00 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	61fb      	str	r3, [r7, #28]
 8013a88:	e028      	b.n	8013adc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8013a8a:	69fb      	ldr	r3, [r7, #28]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d106      	bne.n	8013a9e <pbuf_take+0x9e>
 8013a90:	4b1d      	ldr	r3, [pc, #116]	; (8013b08 <pbuf_take+0x108>)
 8013a92:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8013a96:	4921      	ldr	r1, [pc, #132]	; (8013b1c <pbuf_take+0x11c>)
 8013a98:	481d      	ldr	r0, [pc, #116]	; (8013b10 <pbuf_take+0x110>)
 8013a9a:	f00b ff27 	bl	801f8ec <iprintf>
    buf_copy_len = total_copy_len;
 8013a9e:	697b      	ldr	r3, [r7, #20]
 8013aa0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8013aa2:	69fb      	ldr	r3, [r7, #28]
 8013aa4:	895b      	ldrh	r3, [r3, #10]
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	69bb      	ldr	r3, [r7, #24]
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	d902      	bls.n	8013ab4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8013aae:	69fb      	ldr	r3, [r7, #28]
 8013ab0:	895b      	ldrh	r3, [r3, #10]
 8013ab2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	6858      	ldr	r0, [r3, #4]
 8013ab8:	68ba      	ldr	r2, [r7, #8]
 8013aba:	693b      	ldr	r3, [r7, #16]
 8013abc:	4413      	add	r3, r2
 8013abe:	69ba      	ldr	r2, [r7, #24]
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	f00b fe29 	bl	801f718 <memcpy>
    total_copy_len -= buf_copy_len;
 8013ac6:	697a      	ldr	r2, [r7, #20]
 8013ac8:	69bb      	ldr	r3, [r7, #24]
 8013aca:	1ad3      	subs	r3, r2, r3
 8013acc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8013ace:	693a      	ldr	r2, [r7, #16]
 8013ad0:	69bb      	ldr	r3, [r7, #24]
 8013ad2:	4413      	add	r3, r2
 8013ad4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8013ad6:	69fb      	ldr	r3, [r7, #28]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	61fb      	str	r3, [r7, #28]
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d1d3      	bne.n	8013a8a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d103      	bne.n	8013af0 <pbuf_take+0xf0>
 8013ae8:	88fb      	ldrh	r3, [r7, #6]
 8013aea:	693a      	ldr	r2, [r7, #16]
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d006      	beq.n	8013afe <pbuf_take+0xfe>
 8013af0:	4b05      	ldr	r3, [pc, #20]	; (8013b08 <pbuf_take+0x108>)
 8013af2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8013af6:	490a      	ldr	r1, [pc, #40]	; (8013b20 <pbuf_take+0x120>)
 8013af8:	4805      	ldr	r0, [pc, #20]	; (8013b10 <pbuf_take+0x110>)
 8013afa:	f00b fef7 	bl	801f8ec <iprintf>
  return ERR_OK;
 8013afe:	2300      	movs	r3, #0
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3720      	adds	r7, #32
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	08022b38 	.word	0x08022b38
 8013b0c:	08022f10 	.word	0x08022f10
 8013b10:	08022b98 	.word	0x08022b98
 8013b14:	08022f28 	.word	0x08022f28
 8013b18:	08022f44 	.word	0x08022f44
 8013b1c:	08022f64 	.word	0x08022f64
 8013b20:	08022f7c 	.word	0x08022f7c

08013b24 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b088      	sub	sp, #32
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	60f8      	str	r0, [r7, #12]
 8013b2c:	60b9      	str	r1, [r7, #8]
 8013b2e:	4611      	mov	r1, r2
 8013b30:	461a      	mov	r2, r3
 8013b32:	460b      	mov	r3, r1
 8013b34:	80fb      	strh	r3, [r7, #6]
 8013b36:	4613      	mov	r3, r2
 8013b38:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8013b3a:	f107 0210 	add.w	r2, r7, #16
 8013b3e:	88bb      	ldrh	r3, [r7, #4]
 8013b40:	4619      	mov	r1, r3
 8013b42:	68f8      	ldr	r0, [r7, #12]
 8013b44:	f7ff ff49 	bl	80139da <pbuf_skip>
 8013b48:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d047      	beq.n	8013be0 <pbuf_take_at+0xbc>
 8013b50:	69fb      	ldr	r3, [r7, #28]
 8013b52:	891b      	ldrh	r3, [r3, #8]
 8013b54:	461a      	mov	r2, r3
 8013b56:	8a3b      	ldrh	r3, [r7, #16]
 8013b58:	4619      	mov	r1, r3
 8013b5a:	88fb      	ldrh	r3, [r7, #6]
 8013b5c:	440b      	add	r3, r1
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	db3e      	blt.n	8013be0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8013b62:	88fb      	ldrh	r3, [r7, #6]
 8013b64:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8013b6a:	69fb      	ldr	r3, [r7, #28]
 8013b6c:	895a      	ldrh	r2, [r3, #10]
 8013b6e:	8a3b      	ldrh	r3, [r7, #16]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d806      	bhi.n	8013b82 <pbuf_take_at+0x5e>
 8013b74:	4b1d      	ldr	r3, [pc, #116]	; (8013bec <pbuf_take_at+0xc8>)
 8013b76:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013b7a:	491d      	ldr	r1, [pc, #116]	; (8013bf0 <pbuf_take_at+0xcc>)
 8013b7c:	481d      	ldr	r0, [pc, #116]	; (8013bf4 <pbuf_take_at+0xd0>)
 8013b7e:	f00b feb5 	bl	801f8ec <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8013b82:	69fb      	ldr	r3, [r7, #28]
 8013b84:	895b      	ldrh	r3, [r3, #10]
 8013b86:	461a      	mov	r2, r3
 8013b88:	8a3b      	ldrh	r3, [r7, #16]
 8013b8a:	1ad2      	subs	r2, r2, r3
 8013b8c:	88fb      	ldrh	r3, [r7, #6]
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	da05      	bge.n	8013b9e <pbuf_take_at+0x7a>
 8013b92:	69fb      	ldr	r3, [r7, #28]
 8013b94:	895a      	ldrh	r2, [r3, #10]
 8013b96:	8a3b      	ldrh	r3, [r7, #16]
 8013b98:	1ad3      	subs	r3, r2, r3
 8013b9a:	b29b      	uxth	r3, r3
 8013b9c:	e000      	b.n	8013ba0 <pbuf_take_at+0x7c>
 8013b9e:	88fb      	ldrh	r3, [r7, #6]
 8013ba0:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8013ba2:	69fb      	ldr	r3, [r7, #28]
 8013ba4:	685b      	ldr	r3, [r3, #4]
 8013ba6:	8a3a      	ldrh	r2, [r7, #16]
 8013ba8:	4413      	add	r3, r2
 8013baa:	8a7a      	ldrh	r2, [r7, #18]
 8013bac:	68b9      	ldr	r1, [r7, #8]
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f00b fdb2 	bl	801f718 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8013bb4:	8b7a      	ldrh	r2, [r7, #26]
 8013bb6:	8a7b      	ldrh	r3, [r7, #18]
 8013bb8:	1ad3      	subs	r3, r2, r3
 8013bba:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8013bbc:	8a7b      	ldrh	r3, [r7, #18]
 8013bbe:	697a      	ldr	r2, [r7, #20]
 8013bc0:	4413      	add	r3, r2
 8013bc2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8013bc4:	8b7b      	ldrh	r3, [r7, #26]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d008      	beq.n	8013bdc <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8013bca:	69fb      	ldr	r3, [r7, #28]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	8b7a      	ldrh	r2, [r7, #26]
 8013bd0:	6979      	ldr	r1, [r7, #20]
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7ff ff14 	bl	8013a00 <pbuf_take>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	e003      	b.n	8013be4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	e001      	b.n	8013be4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8013be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3720      	adds	r7, #32
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	08022b38 	.word	0x08022b38
 8013bf0:	08022f94 	.word	0x08022f94
 8013bf4:	08022b98 	.word	0x08022b98

08013bf8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b084      	sub	sp, #16
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	4603      	mov	r3, r0
 8013c00:	603a      	str	r2, [r7, #0]
 8013c02:	71fb      	strb	r3, [r7, #7]
 8013c04:	460b      	mov	r3, r1
 8013c06:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	8919      	ldrh	r1, [r3, #8]
 8013c0c:	88ba      	ldrh	r2, [r7, #4]
 8013c0e:	79fb      	ldrb	r3, [r7, #7]
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7ff f95d 	bl	8012ed0 <pbuf_alloc>
 8013c16:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d101      	bne.n	8013c22 <pbuf_clone+0x2a>
    return NULL;
 8013c1e:	2300      	movs	r3, #0
 8013c20:	e011      	b.n	8013c46 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013c22:	6839      	ldr	r1, [r7, #0]
 8013c24:	68f8      	ldr	r0, [r7, #12]
 8013c26:	f7ff fd6b 	bl	8013700 <pbuf_copy>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8013c2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d006      	beq.n	8013c44 <pbuf_clone+0x4c>
 8013c36:	4b06      	ldr	r3, [pc, #24]	; (8013c50 <pbuf_clone+0x58>)
 8013c38:	f240 5224 	movw	r2, #1316	; 0x524
 8013c3c:	4905      	ldr	r1, [pc, #20]	; (8013c54 <pbuf_clone+0x5c>)
 8013c3e:	4806      	ldr	r0, [pc, #24]	; (8013c58 <pbuf_clone+0x60>)
 8013c40:	f00b fe54 	bl	801f8ec <iprintf>
  return q;
 8013c44:	68fb      	ldr	r3, [r7, #12]
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	08022b38 	.word	0x08022b38
 8013c54:	08022fac 	.word	0x08022fac
 8013c58:	08022b98 	.word	0x08022b98

08013c5c <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	460b      	mov	r3, r1
 8013c66:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8013c68:	f107 020a 	add.w	r2, r7, #10
 8013c6c:	887b      	ldrh	r3, [r7, #2]
 8013c6e:	4619      	mov	r1, r3
 8013c70:	6878      	ldr	r0, [r7, #4]
 8013c72:	f7ff fe89 	bl	8013988 <pbuf_skip_const>
 8013c76:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d00a      	beq.n	8013c94 <pbuf_try_get_at+0x38>
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	895a      	ldrh	r2, [r3, #10]
 8013c82:	897b      	ldrh	r3, [r7, #10]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d905      	bls.n	8013c94 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	685b      	ldr	r3, [r3, #4]
 8013c8c:	897a      	ldrh	r2, [r7, #10]
 8013c8e:	4413      	add	r3, r2
 8013c90:	781b      	ldrb	r3, [r3, #0]
 8013c92:	e001      	b.n	8013c98 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8013c94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	3710      	adds	r7, #16
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b084      	sub	sp, #16
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	460b      	mov	r3, r1
 8013caa:	807b      	strh	r3, [r7, #2]
 8013cac:	4613      	mov	r3, r2
 8013cae:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8013cb0:	f107 020a 	add.w	r2, r7, #10
 8013cb4:	887b      	ldrh	r3, [r7, #2]
 8013cb6:	4619      	mov	r1, r3
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f7ff fe8e 	bl	80139da <pbuf_skip>
 8013cbe:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d00a      	beq.n	8013cdc <pbuf_put_at+0x3c>
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	895a      	ldrh	r2, [r3, #10]
 8013cca:	897b      	ldrh	r3, [r7, #10]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d905      	bls.n	8013cdc <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	685b      	ldr	r3, [r3, #4]
 8013cd4:	897a      	ldrh	r2, [r7, #10]
 8013cd6:	4413      	add	r3, r2
 8013cd8:	787a      	ldrb	r2, [r7, #1]
 8013cda:	701a      	strb	r2, [r3, #0]
  }
}
 8013cdc:	bf00      	nop
 8013cde:	3710      	adds	r7, #16
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}

08013ce4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013ce8:	f00b febc 	bl	801fa64 <rand>
 8013cec:	4603      	mov	r3, r0
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013cf4:	b29b      	uxth	r3, r3
 8013cf6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013cfa:	b29a      	uxth	r2, r3
 8013cfc:	4b01      	ldr	r3, [pc, #4]	; (8013d04 <tcp_init+0x20>)
 8013cfe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013d00:	bf00      	nop
 8013d02:	bd80      	pop	{r7, pc}
 8013d04:	2000033c 	.word	0x2000033c

08013d08 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b082      	sub	sp, #8
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	7d1b      	ldrb	r3, [r3, #20]
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	d105      	bne.n	8013d24 <tcp_free+0x1c>
 8013d18:	4b06      	ldr	r3, [pc, #24]	; (8013d34 <tcp_free+0x2c>)
 8013d1a:	22d4      	movs	r2, #212	; 0xd4
 8013d1c:	4906      	ldr	r1, [pc, #24]	; (8013d38 <tcp_free+0x30>)
 8013d1e:	4807      	ldr	r0, [pc, #28]	; (8013d3c <tcp_free+0x34>)
 8013d20:	f00b fde4 	bl	801f8ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013d24:	6879      	ldr	r1, [r7, #4]
 8013d26:	2001      	movs	r0, #1
 8013d28:	f7fe fd06 	bl	8012738 <memp_free>
}
 8013d2c:	bf00      	nop
 8013d2e:	3708      	adds	r7, #8
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}
 8013d34:	08023038 	.word	0x08023038
 8013d38:	08023068 	.word	0x08023068
 8013d3c:	0802307c 	.word	0x0802307c

08013d40 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	7d1b      	ldrb	r3, [r3, #20]
 8013d4c:	2b01      	cmp	r3, #1
 8013d4e:	d105      	bne.n	8013d5c <tcp_free_listen+0x1c>
 8013d50:	4b06      	ldr	r3, [pc, #24]	; (8013d6c <tcp_free_listen+0x2c>)
 8013d52:	22df      	movs	r2, #223	; 0xdf
 8013d54:	4906      	ldr	r1, [pc, #24]	; (8013d70 <tcp_free_listen+0x30>)
 8013d56:	4807      	ldr	r0, [pc, #28]	; (8013d74 <tcp_free_listen+0x34>)
 8013d58:	f00b fdc8 	bl	801f8ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013d5c:	6879      	ldr	r1, [r7, #4]
 8013d5e:	2002      	movs	r0, #2
 8013d60:	f7fe fcea 	bl	8012738 <memp_free>
}
 8013d64:	bf00      	nop
 8013d66:	3708      	adds	r7, #8
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	08023038 	.word	0x08023038
 8013d70:	080230a4 	.word	0x080230a4
 8013d74:	0802307c 	.word	0x0802307c

08013d78 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013d7c:	f001 f85c 	bl	8014e38 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013d80:	4b07      	ldr	r3, [pc, #28]	; (8013da0 <tcp_tmr+0x28>)
 8013d82:	781b      	ldrb	r3, [r3, #0]
 8013d84:	3301      	adds	r3, #1
 8013d86:	b2da      	uxtb	r2, r3
 8013d88:	4b05      	ldr	r3, [pc, #20]	; (8013da0 <tcp_tmr+0x28>)
 8013d8a:	701a      	strb	r2, [r3, #0]
 8013d8c:	4b04      	ldr	r3, [pc, #16]	; (8013da0 <tcp_tmr+0x28>)
 8013d8e:	781b      	ldrb	r3, [r3, #0]
 8013d90:	f003 0301 	and.w	r3, r3, #1
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d001      	beq.n	8013d9c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013d98:	f000 fd0e 	bl	80147b8 <tcp_slowtmr>
  }
}
 8013d9c:	bf00      	nop
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	20005501 	.word	0x20005501

08013da4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b084      	sub	sp, #16
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d105      	bne.n	8013dc0 <tcp_remove_listener+0x1c>
 8013db4:	4b0d      	ldr	r3, [pc, #52]	; (8013dec <tcp_remove_listener+0x48>)
 8013db6:	22ff      	movs	r2, #255	; 0xff
 8013db8:	490d      	ldr	r1, [pc, #52]	; (8013df0 <tcp_remove_listener+0x4c>)
 8013dba:	480e      	ldr	r0, [pc, #56]	; (8013df4 <tcp_remove_listener+0x50>)
 8013dbc:	f00b fd96 	bl	801f8ec <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	60fb      	str	r3, [r7, #12]
 8013dc4:	e00a      	b.n	8013ddc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dca:	683a      	ldr	r2, [r7, #0]
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d102      	bne.n	8013dd6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	60fb      	str	r3, [r7, #12]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d1f1      	bne.n	8013dc6 <tcp_remove_listener+0x22>
    }
  }
}
 8013de2:	bf00      	nop
 8013de4:	bf00      	nop
 8013de6:	3710      	adds	r7, #16
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}
 8013dec:	08023038 	.word	0x08023038
 8013df0:	080230c0 	.word	0x080230c0
 8013df4:	0802307c 	.word	0x0802307c

08013df8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b084      	sub	sp, #16
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d106      	bne.n	8013e14 <tcp_listen_closed+0x1c>
 8013e06:	4b14      	ldr	r3, [pc, #80]	; (8013e58 <tcp_listen_closed+0x60>)
 8013e08:	f240 1211 	movw	r2, #273	; 0x111
 8013e0c:	4913      	ldr	r1, [pc, #76]	; (8013e5c <tcp_listen_closed+0x64>)
 8013e0e:	4814      	ldr	r0, [pc, #80]	; (8013e60 <tcp_listen_closed+0x68>)
 8013e10:	f00b fd6c 	bl	801f8ec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	7d1b      	ldrb	r3, [r3, #20]
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d006      	beq.n	8013e2a <tcp_listen_closed+0x32>
 8013e1c:	4b0e      	ldr	r3, [pc, #56]	; (8013e58 <tcp_listen_closed+0x60>)
 8013e1e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8013e22:	4910      	ldr	r1, [pc, #64]	; (8013e64 <tcp_listen_closed+0x6c>)
 8013e24:	480e      	ldr	r0, [pc, #56]	; (8013e60 <tcp_listen_closed+0x68>)
 8013e26:	f00b fd61 	bl	801f8ec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	60fb      	str	r3, [r7, #12]
 8013e2e:	e00b      	b.n	8013e48 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013e30:	4a0d      	ldr	r2, [pc, #52]	; (8013e68 <tcp_listen_closed+0x70>)
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	6879      	ldr	r1, [r7, #4]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7ff ffb1 	bl	8013da4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	3301      	adds	r3, #1
 8013e46:	60fb      	str	r3, [r7, #12]
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	2b03      	cmp	r3, #3
 8013e4c:	d9f0      	bls.n	8013e30 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013e4e:	bf00      	nop
 8013e50:	bf00      	nop
 8013e52:	3710      	adds	r7, #16
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd80      	pop	{r7, pc}
 8013e58:	08023038 	.word	0x08023038
 8013e5c:	080230e8 	.word	0x080230e8
 8013e60:	0802307c 	.word	0x0802307c
 8013e64:	080230f4 	.word	0x080230f4
 8013e68:	08025674 	.word	0x08025674

08013e6c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013e6c:	b5b0      	push	{r4, r5, r7, lr}
 8013e6e:	b088      	sub	sp, #32
 8013e70:	af04      	add	r7, sp, #16
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	460b      	mov	r3, r1
 8013e76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d106      	bne.n	8013e8c <tcp_close_shutdown+0x20>
 8013e7e:	4b63      	ldr	r3, [pc, #396]	; (801400c <tcp_close_shutdown+0x1a0>)
 8013e80:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013e84:	4962      	ldr	r1, [pc, #392]	; (8014010 <tcp_close_shutdown+0x1a4>)
 8013e86:	4863      	ldr	r0, [pc, #396]	; (8014014 <tcp_close_shutdown+0x1a8>)
 8013e88:	f00b fd30 	bl	801f8ec <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013e8c:	78fb      	ldrb	r3, [r7, #3]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d066      	beq.n	8013f60 <tcp_close_shutdown+0xf4>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	7d1b      	ldrb	r3, [r3, #20]
 8013e96:	2b04      	cmp	r3, #4
 8013e98:	d003      	beq.n	8013ea2 <tcp_close_shutdown+0x36>
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	7d1b      	ldrb	r3, [r3, #20]
 8013e9e:	2b07      	cmp	r3, #7
 8013ea0:	d15e      	bne.n	8013f60 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d104      	bne.n	8013eb4 <tcp_close_shutdown+0x48>
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013eae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013eb2:	d055      	beq.n	8013f60 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	8b5b      	ldrh	r3, [r3, #26]
 8013eb8:	f003 0310 	and.w	r3, r3, #16
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d106      	bne.n	8013ece <tcp_close_shutdown+0x62>
 8013ec0:	4b52      	ldr	r3, [pc, #328]	; (801400c <tcp_close_shutdown+0x1a0>)
 8013ec2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8013ec6:	4954      	ldr	r1, [pc, #336]	; (8014018 <tcp_close_shutdown+0x1ac>)
 8013ec8:	4852      	ldr	r0, [pc, #328]	; (8014014 <tcp_close_shutdown+0x1a8>)
 8013eca:	f00b fd0f 	bl	801f8ec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013ed6:	687d      	ldr	r5, [r7, #4]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	3304      	adds	r3, #4
 8013edc:	687a      	ldr	r2, [r7, #4]
 8013ede:	8ad2      	ldrh	r2, [r2, #22]
 8013ee0:	6879      	ldr	r1, [r7, #4]
 8013ee2:	8b09      	ldrh	r1, [r1, #24]
 8013ee4:	9102      	str	r1, [sp, #8]
 8013ee6:	9201      	str	r2, [sp, #4]
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	462b      	mov	r3, r5
 8013eec:	4622      	mov	r2, r4
 8013eee:	4601      	mov	r1, r0
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f005 fd6d 	bl	80199d0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f001 fb4e 	bl	8015598 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013efc:	4b47      	ldr	r3, [pc, #284]	; (801401c <tcp_close_shutdown+0x1b0>)
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	687a      	ldr	r2, [r7, #4]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d105      	bne.n	8013f12 <tcp_close_shutdown+0xa6>
 8013f06:	4b45      	ldr	r3, [pc, #276]	; (801401c <tcp_close_shutdown+0x1b0>)
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	4a43      	ldr	r2, [pc, #268]	; (801401c <tcp_close_shutdown+0x1b0>)
 8013f0e:	6013      	str	r3, [r2, #0]
 8013f10:	e013      	b.n	8013f3a <tcp_close_shutdown+0xce>
 8013f12:	4b42      	ldr	r3, [pc, #264]	; (801401c <tcp_close_shutdown+0x1b0>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	60fb      	str	r3, [r7, #12]
 8013f18:	e00c      	b.n	8013f34 <tcp_close_shutdown+0xc8>
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	68db      	ldr	r3, [r3, #12]
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	429a      	cmp	r2, r3
 8013f22:	d104      	bne.n	8013f2e <tcp_close_shutdown+0xc2>
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	68da      	ldr	r2, [r3, #12]
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	60da      	str	r2, [r3, #12]
 8013f2c:	e005      	b.n	8013f3a <tcp_close_shutdown+0xce>
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	68db      	ldr	r3, [r3, #12]
 8013f32:	60fb      	str	r3, [r7, #12]
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d1ef      	bne.n	8013f1a <tcp_close_shutdown+0xae>
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	60da      	str	r2, [r3, #12]
 8013f40:	4b37      	ldr	r3, [pc, #220]	; (8014020 <tcp_close_shutdown+0x1b4>)
 8013f42:	2201      	movs	r2, #1
 8013f44:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013f46:	4b37      	ldr	r3, [pc, #220]	; (8014024 <tcp_close_shutdown+0x1b8>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	687a      	ldr	r2, [r7, #4]
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	d102      	bne.n	8013f56 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013f50:	f003 ffe2 	bl	8017f18 <tcp_trigger_input_pcb_close>
 8013f54:	e002      	b.n	8013f5c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f7ff fed6 	bl	8013d08 <tcp_free>
      }
      return ERR_OK;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	e050      	b.n	8014002 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	7d1b      	ldrb	r3, [r3, #20]
 8013f64:	2b02      	cmp	r3, #2
 8013f66:	d03b      	beq.n	8013fe0 <tcp_close_shutdown+0x174>
 8013f68:	2b02      	cmp	r3, #2
 8013f6a:	dc44      	bgt.n	8013ff6 <tcp_close_shutdown+0x18a>
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d002      	beq.n	8013f76 <tcp_close_shutdown+0x10a>
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d02a      	beq.n	8013fca <tcp_close_shutdown+0x15e>
 8013f74:	e03f      	b.n	8013ff6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	8adb      	ldrh	r3, [r3, #22]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d021      	beq.n	8013fc2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013f7e:	4b2a      	ldr	r3, [pc, #168]	; (8014028 <tcp_close_shutdown+0x1bc>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	687a      	ldr	r2, [r7, #4]
 8013f84:	429a      	cmp	r2, r3
 8013f86:	d105      	bne.n	8013f94 <tcp_close_shutdown+0x128>
 8013f88:	4b27      	ldr	r3, [pc, #156]	; (8014028 <tcp_close_shutdown+0x1bc>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	68db      	ldr	r3, [r3, #12]
 8013f8e:	4a26      	ldr	r2, [pc, #152]	; (8014028 <tcp_close_shutdown+0x1bc>)
 8013f90:	6013      	str	r3, [r2, #0]
 8013f92:	e013      	b.n	8013fbc <tcp_close_shutdown+0x150>
 8013f94:	4b24      	ldr	r3, [pc, #144]	; (8014028 <tcp_close_shutdown+0x1bc>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	60bb      	str	r3, [r7, #8]
 8013f9a:	e00c      	b.n	8013fb6 <tcp_close_shutdown+0x14a>
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	68db      	ldr	r3, [r3, #12]
 8013fa0:	687a      	ldr	r2, [r7, #4]
 8013fa2:	429a      	cmp	r2, r3
 8013fa4:	d104      	bne.n	8013fb0 <tcp_close_shutdown+0x144>
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	68da      	ldr	r2, [r3, #12]
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	60da      	str	r2, [r3, #12]
 8013fae:	e005      	b.n	8013fbc <tcp_close_shutdown+0x150>
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	68db      	ldr	r3, [r3, #12]
 8013fb4:	60bb      	str	r3, [r7, #8]
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d1ef      	bne.n	8013f9c <tcp_close_shutdown+0x130>
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f7ff fea0 	bl	8013d08 <tcp_free>
      break;
 8013fc8:	e01a      	b.n	8014000 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f7ff ff14 	bl	8013df8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013fd0:	6879      	ldr	r1, [r7, #4]
 8013fd2:	4816      	ldr	r0, [pc, #88]	; (801402c <tcp_close_shutdown+0x1c0>)
 8013fd4:	f001 fb30 	bl	8015638 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f7ff feb1 	bl	8013d40 <tcp_free_listen>
      break;
 8013fde:	e00f      	b.n	8014000 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013fe0:	6879      	ldr	r1, [r7, #4]
 8013fe2:	480e      	ldr	r0, [pc, #56]	; (801401c <tcp_close_shutdown+0x1b0>)
 8013fe4:	f001 fb28 	bl	8015638 <tcp_pcb_remove>
 8013fe8:	4b0d      	ldr	r3, [pc, #52]	; (8014020 <tcp_close_shutdown+0x1b4>)
 8013fea:	2201      	movs	r2, #1
 8013fec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f7ff fe8a 	bl	8013d08 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013ff4:	e004      	b.n	8014000 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013ff6:	6878      	ldr	r0, [r7, #4]
 8013ff8:	f000 f81a 	bl	8014030 <tcp_close_shutdown_fin>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	e000      	b.n	8014002 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014000:	2300      	movs	r3, #0
}
 8014002:	4618      	mov	r0, r3
 8014004:	3710      	adds	r7, #16
 8014006:	46bd      	mov	sp, r7
 8014008:	bdb0      	pop	{r4, r5, r7, pc}
 801400a:	bf00      	nop
 801400c:	08023038 	.word	0x08023038
 8014010:	0802310c 	.word	0x0802310c
 8014014:	0802307c 	.word	0x0802307c
 8014018:	0802312c 	.word	0x0802312c
 801401c:	20016b90 	.word	0x20016b90
 8014020:	20016b8c 	.word	0x20016b8c
 8014024:	20016ba4 	.word	0x20016ba4
 8014028:	20016b9c 	.word	0x20016b9c
 801402c:	20016b98 	.word	0x20016b98

08014030 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d106      	bne.n	801404c <tcp_close_shutdown_fin+0x1c>
 801403e:	4b2e      	ldr	r3, [pc, #184]	; (80140f8 <tcp_close_shutdown_fin+0xc8>)
 8014040:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014044:	492d      	ldr	r1, [pc, #180]	; (80140fc <tcp_close_shutdown_fin+0xcc>)
 8014046:	482e      	ldr	r0, [pc, #184]	; (8014100 <tcp_close_shutdown_fin+0xd0>)
 8014048:	f00b fc50 	bl	801f8ec <iprintf>

  switch (pcb->state) {
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	7d1b      	ldrb	r3, [r3, #20]
 8014050:	2b07      	cmp	r3, #7
 8014052:	d020      	beq.n	8014096 <tcp_close_shutdown_fin+0x66>
 8014054:	2b07      	cmp	r3, #7
 8014056:	dc2b      	bgt.n	80140b0 <tcp_close_shutdown_fin+0x80>
 8014058:	2b03      	cmp	r3, #3
 801405a:	d002      	beq.n	8014062 <tcp_close_shutdown_fin+0x32>
 801405c:	2b04      	cmp	r3, #4
 801405e:	d00d      	beq.n	801407c <tcp_close_shutdown_fin+0x4c>
 8014060:	e026      	b.n	80140b0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f004 fdc2 	bl	8018bec <tcp_send_fin>
 8014068:	4603      	mov	r3, r0
 801406a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801406c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d11f      	bne.n	80140b4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2205      	movs	r2, #5
 8014078:	751a      	strb	r2, [r3, #20]
      }
      break;
 801407a:	e01b      	b.n	80140b4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	f004 fdb5 	bl	8018bec <tcp_send_fin>
 8014082:	4603      	mov	r3, r0
 8014084:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d114      	bne.n	80140b8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	2205      	movs	r2, #5
 8014092:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014094:	e010      	b.n	80140b8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014096:	6878      	ldr	r0, [r7, #4]
 8014098:	f004 fda8 	bl	8018bec <tcp_send_fin>
 801409c:	4603      	mov	r3, r0
 801409e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80140a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d109      	bne.n	80140bc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	2209      	movs	r2, #9
 80140ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 80140ae:	e005      	b.n	80140bc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80140b0:	2300      	movs	r3, #0
 80140b2:	e01c      	b.n	80140ee <tcp_close_shutdown_fin+0xbe>
      break;
 80140b4:	bf00      	nop
 80140b6:	e002      	b.n	80140be <tcp_close_shutdown_fin+0x8e>
      break;
 80140b8:	bf00      	nop
 80140ba:	e000      	b.n	80140be <tcp_close_shutdown_fin+0x8e>
      break;
 80140bc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80140be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d103      	bne.n	80140ce <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80140c6:	6878      	ldr	r0, [r7, #4]
 80140c8:	f004 fece 	bl	8018e68 <tcp_output>
 80140cc:	e00d      	b.n	80140ea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80140ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140d6:	d108      	bne.n	80140ea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	8b5b      	ldrh	r3, [r3, #26]
 80140dc:	f043 0308 	orr.w	r3, r3, #8
 80140e0:	b29a      	uxth	r2, r3
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80140e6:	2300      	movs	r3, #0
 80140e8:	e001      	b.n	80140ee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80140ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	3710      	adds	r7, #16
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}
 80140f6:	bf00      	nop
 80140f8:	08023038 	.word	0x08023038
 80140fc:	080230e8 	.word	0x080230e8
 8014100:	0802307c 	.word	0x0802307c

08014104 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b082      	sub	sp, #8
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d109      	bne.n	8014126 <tcp_close+0x22>
 8014112:	4b0f      	ldr	r3, [pc, #60]	; (8014150 <tcp_close+0x4c>)
 8014114:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014118:	490e      	ldr	r1, [pc, #56]	; (8014154 <tcp_close+0x50>)
 801411a:	480f      	ldr	r0, [pc, #60]	; (8014158 <tcp_close+0x54>)
 801411c:	f00b fbe6 	bl	801f8ec <iprintf>
 8014120:	f06f 030f 	mvn.w	r3, #15
 8014124:	e00f      	b.n	8014146 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	7d1b      	ldrb	r3, [r3, #20]
 801412a:	2b01      	cmp	r3, #1
 801412c:	d006      	beq.n	801413c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	8b5b      	ldrh	r3, [r3, #26]
 8014132:	f043 0310 	orr.w	r3, r3, #16
 8014136:	b29a      	uxth	r2, r3
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801413c:	2101      	movs	r1, #1
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f7ff fe94 	bl	8013e6c <tcp_close_shutdown>
 8014144:	4603      	mov	r3, r0
}
 8014146:	4618      	mov	r0, r3
 8014148:	3708      	adds	r7, #8
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
 801414e:	bf00      	nop
 8014150:	08023038 	.word	0x08023038
 8014154:	08023148 	.word	0x08023148
 8014158:	0802307c 	.word	0x0802307c

0801415c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	60f8      	str	r0, [r7, #12]
 8014164:	60b9      	str	r1, [r7, #8]
 8014166:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d109      	bne.n	8014182 <tcp_shutdown+0x26>
 801416e:	4b26      	ldr	r3, [pc, #152]	; (8014208 <tcp_shutdown+0xac>)
 8014170:	f240 2207 	movw	r2, #519	; 0x207
 8014174:	4925      	ldr	r1, [pc, #148]	; (801420c <tcp_shutdown+0xb0>)
 8014176:	4826      	ldr	r0, [pc, #152]	; (8014210 <tcp_shutdown+0xb4>)
 8014178:	f00b fbb8 	bl	801f8ec <iprintf>
 801417c:	f06f 030f 	mvn.w	r3, #15
 8014180:	e03d      	b.n	80141fe <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	7d1b      	ldrb	r3, [r3, #20]
 8014186:	2b01      	cmp	r3, #1
 8014188:	d102      	bne.n	8014190 <tcp_shutdown+0x34>
    return ERR_CONN;
 801418a:	f06f 030a 	mvn.w	r3, #10
 801418e:	e036      	b.n	80141fe <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d01b      	beq.n	80141ce <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	8b5b      	ldrh	r3, [r3, #26]
 801419a:	f043 0310 	orr.w	r3, r3, #16
 801419e:	b29a      	uxth	r2, r3
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d005      	beq.n	80141b6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80141aa:	2101      	movs	r1, #1
 80141ac:	68f8      	ldr	r0, [r7, #12]
 80141ae:	f7ff fe5d 	bl	8013e6c <tcp_close_shutdown>
 80141b2:	4603      	mov	r3, r0
 80141b4:	e023      	b.n	80141fe <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d007      	beq.n	80141ce <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80141c2:	4618      	mov	r0, r3
 80141c4:	f7ff f968 	bl	8013498 <pbuf_free>
      pcb->refused_data = NULL;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	2200      	movs	r2, #0
 80141cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d013      	beq.n	80141fc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	7d1b      	ldrb	r3, [r3, #20]
 80141d8:	2b04      	cmp	r3, #4
 80141da:	dc02      	bgt.n	80141e2 <tcp_shutdown+0x86>
 80141dc:	2b03      	cmp	r3, #3
 80141de:	da02      	bge.n	80141e6 <tcp_shutdown+0x8a>
 80141e0:	e009      	b.n	80141f6 <tcp_shutdown+0x9a>
 80141e2:	2b07      	cmp	r3, #7
 80141e4:	d107      	bne.n	80141f6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	b2db      	uxtb	r3, r3
 80141ea:	4619      	mov	r1, r3
 80141ec:	68f8      	ldr	r0, [r7, #12]
 80141ee:	f7ff fe3d 	bl	8013e6c <tcp_close_shutdown>
 80141f2:	4603      	mov	r3, r0
 80141f4:	e003      	b.n	80141fe <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80141f6:	f06f 030a 	mvn.w	r3, #10
 80141fa:	e000      	b.n	80141fe <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80141fc:	2300      	movs	r3, #0
}
 80141fe:	4618      	mov	r0, r3
 8014200:	3710      	adds	r7, #16
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}
 8014206:	bf00      	nop
 8014208:	08023038 	.word	0x08023038
 801420c:	08023160 	.word	0x08023160
 8014210:	0802307c 	.word	0x0802307c

08014214 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b08e      	sub	sp, #56	; 0x38
 8014218:	af04      	add	r7, sp, #16
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d107      	bne.n	8014234 <tcp_abandon+0x20>
 8014224:	4b52      	ldr	r3, [pc, #328]	; (8014370 <tcp_abandon+0x15c>)
 8014226:	f240 223d 	movw	r2, #573	; 0x23d
 801422a:	4952      	ldr	r1, [pc, #328]	; (8014374 <tcp_abandon+0x160>)
 801422c:	4852      	ldr	r0, [pc, #328]	; (8014378 <tcp_abandon+0x164>)
 801422e:	f00b fb5d 	bl	801f8ec <iprintf>
 8014232:	e099      	b.n	8014368 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	7d1b      	ldrb	r3, [r3, #20]
 8014238:	2b01      	cmp	r3, #1
 801423a:	d106      	bne.n	801424a <tcp_abandon+0x36>
 801423c:	4b4c      	ldr	r3, [pc, #304]	; (8014370 <tcp_abandon+0x15c>)
 801423e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014242:	494e      	ldr	r1, [pc, #312]	; (801437c <tcp_abandon+0x168>)
 8014244:	484c      	ldr	r0, [pc, #304]	; (8014378 <tcp_abandon+0x164>)
 8014246:	f00b fb51 	bl	801f8ec <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	7d1b      	ldrb	r3, [r3, #20]
 801424e:	2b0a      	cmp	r3, #10
 8014250:	d107      	bne.n	8014262 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014252:	6879      	ldr	r1, [r7, #4]
 8014254:	484a      	ldr	r0, [pc, #296]	; (8014380 <tcp_abandon+0x16c>)
 8014256:	f001 f9ef 	bl	8015638 <tcp_pcb_remove>
    tcp_free(pcb);
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f7ff fd54 	bl	8013d08 <tcp_free>
 8014260:	e082      	b.n	8014368 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014262:	2300      	movs	r3, #0
 8014264:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8014266:	2300      	movs	r3, #0
 8014268:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801426e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014274:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801427c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	691b      	ldr	r3, [r3, #16]
 8014282:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	7d1b      	ldrb	r3, [r3, #20]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d126      	bne.n	80142da <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	8adb      	ldrh	r3, [r3, #22]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d02e      	beq.n	80142f2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014294:	4b3b      	ldr	r3, [pc, #236]	; (8014384 <tcp_abandon+0x170>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	687a      	ldr	r2, [r7, #4]
 801429a:	429a      	cmp	r2, r3
 801429c:	d105      	bne.n	80142aa <tcp_abandon+0x96>
 801429e:	4b39      	ldr	r3, [pc, #228]	; (8014384 <tcp_abandon+0x170>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	68db      	ldr	r3, [r3, #12]
 80142a4:	4a37      	ldr	r2, [pc, #220]	; (8014384 <tcp_abandon+0x170>)
 80142a6:	6013      	str	r3, [r2, #0]
 80142a8:	e013      	b.n	80142d2 <tcp_abandon+0xbe>
 80142aa:	4b36      	ldr	r3, [pc, #216]	; (8014384 <tcp_abandon+0x170>)
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	61fb      	str	r3, [r7, #28]
 80142b0:	e00c      	b.n	80142cc <tcp_abandon+0xb8>
 80142b2:	69fb      	ldr	r3, [r7, #28]
 80142b4:	68db      	ldr	r3, [r3, #12]
 80142b6:	687a      	ldr	r2, [r7, #4]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d104      	bne.n	80142c6 <tcp_abandon+0xb2>
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	68da      	ldr	r2, [r3, #12]
 80142c0:	69fb      	ldr	r3, [r7, #28]
 80142c2:	60da      	str	r2, [r3, #12]
 80142c4:	e005      	b.n	80142d2 <tcp_abandon+0xbe>
 80142c6:	69fb      	ldr	r3, [r7, #28]
 80142c8:	68db      	ldr	r3, [r3, #12]
 80142ca:	61fb      	str	r3, [r7, #28]
 80142cc:	69fb      	ldr	r3, [r7, #28]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d1ef      	bne.n	80142b2 <tcp_abandon+0x9e>
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2200      	movs	r2, #0
 80142d6:	60da      	str	r2, [r3, #12]
 80142d8:	e00b      	b.n	80142f2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	8adb      	ldrh	r3, [r3, #22]
 80142e2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80142e4:	6879      	ldr	r1, [r7, #4]
 80142e6:	4828      	ldr	r0, [pc, #160]	; (8014388 <tcp_abandon+0x174>)
 80142e8:	f001 f9a6 	bl	8015638 <tcp_pcb_remove>
 80142ec:	4b27      	ldr	r3, [pc, #156]	; (801438c <tcp_abandon+0x178>)
 80142ee:	2201      	movs	r2, #1
 80142f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d004      	beq.n	8014304 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142fe:	4618      	mov	r0, r3
 8014300:	f000 fe7a 	bl	8014ff8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014308:	2b00      	cmp	r3, #0
 801430a:	d004      	beq.n	8014316 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014310:	4618      	mov	r0, r3
 8014312:	f000 fe71 	bl	8014ff8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801431a:	2b00      	cmp	r3, #0
 801431c:	d004      	beq.n	8014328 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014322:	4618      	mov	r0, r3
 8014324:	f000 fe68 	bl	8014ff8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432a:	2b00      	cmp	r3, #0
 801432c:	d00e      	beq.n	801434c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801432e:	6879      	ldr	r1, [r7, #4]
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	3304      	adds	r3, #4
 8014334:	687a      	ldr	r2, [r7, #4]
 8014336:	8b12      	ldrh	r2, [r2, #24]
 8014338:	9202      	str	r2, [sp, #8]
 801433a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801433c:	9201      	str	r2, [sp, #4]
 801433e:	9300      	str	r3, [sp, #0]
 8014340:	460b      	mov	r3, r1
 8014342:	697a      	ldr	r2, [r7, #20]
 8014344:	69b9      	ldr	r1, [r7, #24]
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f005 fb42 	bl	80199d0 <tcp_rst>
    }
    last_state = pcb->state;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	7d1b      	ldrb	r3, [r3, #20]
 8014350:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f7ff fcd8 	bl	8013d08 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014358:	693b      	ldr	r3, [r7, #16]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d004      	beq.n	8014368 <tcp_abandon+0x154>
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	f06f 010c 	mvn.w	r1, #12
 8014364:	68f8      	ldr	r0, [r7, #12]
 8014366:	4798      	blx	r3
  }
}
 8014368:	3728      	adds	r7, #40	; 0x28
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
 801436e:	bf00      	nop
 8014370:	08023038 	.word	0x08023038
 8014374:	0802317c 	.word	0x0802317c
 8014378:	0802307c 	.word	0x0802307c
 801437c:	08023198 	.word	0x08023198
 8014380:	20016ba0 	.word	0x20016ba0
 8014384:	20016b9c 	.word	0x20016b9c
 8014388:	20016b90 	.word	0x20016b90
 801438c:	20016b8c 	.word	0x20016b8c

08014390 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014398:	2101      	movs	r1, #1
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f7ff ff3a 	bl	8014214 <tcp_abandon>
}
 80143a0:	bf00      	nop
 80143a2:	3708      	adds	r7, #8
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d106      	bne.n	80143c4 <tcp_update_rcv_ann_wnd+0x1c>
 80143b6:	4b25      	ldr	r3, [pc, #148]	; (801444c <tcp_update_rcv_ann_wnd+0xa4>)
 80143b8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80143bc:	4924      	ldr	r1, [pc, #144]	; (8014450 <tcp_update_rcv_ann_wnd+0xa8>)
 80143be:	4825      	ldr	r0, [pc, #148]	; (8014454 <tcp_update_rcv_ann_wnd+0xac>)
 80143c0:	f00b fa94 	bl	801f8ec <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143c8:	687a      	ldr	r2, [r7, #4]
 80143ca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80143cc:	4413      	add	r3, r2
 80143ce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143d4:	687a      	ldr	r2, [r7, #4]
 80143d6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80143d8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80143dc:	bf28      	it	cs
 80143de:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80143e2:	b292      	uxth	r2, r2
 80143e4:	4413      	add	r3, r2
 80143e6:	68fa      	ldr	r2, [r7, #12]
 80143e8:	1ad3      	subs	r3, r2, r3
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	db08      	blt.n	8014400 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143fa:	68fa      	ldr	r2, [r7, #12]
 80143fc:	1ad3      	subs	r3, r2, r3
 80143fe:	e020      	b.n	8014442 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014408:	1ad3      	subs	r3, r2, r3
 801440a:	2b00      	cmp	r3, #0
 801440c:	dd03      	ble.n	8014416 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2200      	movs	r2, #0
 8014412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014414:	e014      	b.n	8014440 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801441e:	1ad3      	subs	r3, r2, r3
 8014420:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014428:	d306      	bcc.n	8014438 <tcp_update_rcv_ann_wnd+0x90>
 801442a:	4b08      	ldr	r3, [pc, #32]	; (801444c <tcp_update_rcv_ann_wnd+0xa4>)
 801442c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8014430:	4909      	ldr	r1, [pc, #36]	; (8014458 <tcp_update_rcv_ann_wnd+0xb0>)
 8014432:	4808      	ldr	r0, [pc, #32]	; (8014454 <tcp_update_rcv_ann_wnd+0xac>)
 8014434:	f00b fa5a 	bl	801f8ec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	b29a      	uxth	r2, r3
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8014440:	2300      	movs	r3, #0
  }
}
 8014442:	4618      	mov	r0, r3
 8014444:	3710      	adds	r7, #16
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}
 801444a:	bf00      	nop
 801444c:	08023038 	.word	0x08023038
 8014450:	08023294 	.word	0x08023294
 8014454:	0802307c 	.word	0x0802307c
 8014458:	080232b8 	.word	0x080232b8

0801445c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b084      	sub	sp, #16
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
 8014464:	460b      	mov	r3, r1
 8014466:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d107      	bne.n	801447e <tcp_recved+0x22>
 801446e:	4b1f      	ldr	r3, [pc, #124]	; (80144ec <tcp_recved+0x90>)
 8014470:	f240 32cf 	movw	r2, #975	; 0x3cf
 8014474:	491e      	ldr	r1, [pc, #120]	; (80144f0 <tcp_recved+0x94>)
 8014476:	481f      	ldr	r0, [pc, #124]	; (80144f4 <tcp_recved+0x98>)
 8014478:	f00b fa38 	bl	801f8ec <iprintf>
 801447c:	e032      	b.n	80144e4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	7d1b      	ldrb	r3, [r3, #20]
 8014482:	2b01      	cmp	r3, #1
 8014484:	d106      	bne.n	8014494 <tcp_recved+0x38>
 8014486:	4b19      	ldr	r3, [pc, #100]	; (80144ec <tcp_recved+0x90>)
 8014488:	f240 32d2 	movw	r2, #978	; 0x3d2
 801448c:	491a      	ldr	r1, [pc, #104]	; (80144f8 <tcp_recved+0x9c>)
 801448e:	4819      	ldr	r0, [pc, #100]	; (80144f4 <tcp_recved+0x98>)
 8014490:	f00b fa2c 	bl	801f8ec <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014498:	887b      	ldrh	r3, [r7, #2]
 801449a:	4413      	add	r3, r2
 801449c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801449e:	89fb      	ldrh	r3, [r7, #14]
 80144a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80144a4:	d804      	bhi.n	80144b0 <tcp_recved+0x54>
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144aa:	89fa      	ldrh	r2, [r7, #14]
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d204      	bcs.n	80144ba <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80144b6:	851a      	strh	r2, [r3, #40]	; 0x28
 80144b8:	e002      	b.n	80144c0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	89fa      	ldrh	r2, [r7, #14]
 80144be:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f7ff ff71 	bl	80143a8 <tcp_update_rcv_ann_wnd>
 80144c6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80144ce:	d309      	bcc.n	80144e4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	8b5b      	ldrh	r3, [r3, #26]
 80144d4:	f043 0302 	orr.w	r3, r3, #2
 80144d8:	b29a      	uxth	r2, r3
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f004 fcc2 	bl	8018e68 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80144e4:	3710      	adds	r7, #16
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}
 80144ea:	bf00      	nop
 80144ec:	08023038 	.word	0x08023038
 80144f0:	080232d4 	.word	0x080232d4
 80144f4:	0802307c 	.word	0x0802307c
 80144f8:	080232ec 	.word	0x080232ec

080144fc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80144fc:	b480      	push	{r7}
 80144fe:	b083      	sub	sp, #12
 8014500:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8014502:	2300      	movs	r3, #0
 8014504:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8014506:	4b1e      	ldr	r3, [pc, #120]	; (8014580 <tcp_new_port+0x84>)
 8014508:	881b      	ldrh	r3, [r3, #0]
 801450a:	3301      	adds	r3, #1
 801450c:	b29a      	uxth	r2, r3
 801450e:	4b1c      	ldr	r3, [pc, #112]	; (8014580 <tcp_new_port+0x84>)
 8014510:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8014512:	4b1b      	ldr	r3, [pc, #108]	; (8014580 <tcp_new_port+0x84>)
 8014514:	881b      	ldrh	r3, [r3, #0]
 8014516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801451a:	4293      	cmp	r3, r2
 801451c:	d103      	bne.n	8014526 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801451e:	4b18      	ldr	r3, [pc, #96]	; (8014580 <tcp_new_port+0x84>)
 8014520:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014524:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014526:	2300      	movs	r3, #0
 8014528:	71fb      	strb	r3, [r7, #7]
 801452a:	e01e      	b.n	801456a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801452c:	79fb      	ldrb	r3, [r7, #7]
 801452e:	4a15      	ldr	r2, [pc, #84]	; (8014584 <tcp_new_port+0x88>)
 8014530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	603b      	str	r3, [r7, #0]
 8014538:	e011      	b.n	801455e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	8ada      	ldrh	r2, [r3, #22]
 801453e:	4b10      	ldr	r3, [pc, #64]	; (8014580 <tcp_new_port+0x84>)
 8014540:	881b      	ldrh	r3, [r3, #0]
 8014542:	429a      	cmp	r2, r3
 8014544:	d108      	bne.n	8014558 <tcp_new_port+0x5c>
        n++;
 8014546:	88bb      	ldrh	r3, [r7, #4]
 8014548:	3301      	adds	r3, #1
 801454a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801454c:	88bb      	ldrh	r3, [r7, #4]
 801454e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014552:	d3d8      	bcc.n	8014506 <tcp_new_port+0xa>
          return 0;
 8014554:	2300      	movs	r3, #0
 8014556:	e00d      	b.n	8014574 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	603b      	str	r3, [r7, #0]
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d1ea      	bne.n	801453a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014564:	79fb      	ldrb	r3, [r7, #7]
 8014566:	3301      	adds	r3, #1
 8014568:	71fb      	strb	r3, [r7, #7]
 801456a:	79fb      	ldrb	r3, [r7, #7]
 801456c:	2b03      	cmp	r3, #3
 801456e:	d9dd      	bls.n	801452c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8014570:	4b03      	ldr	r3, [pc, #12]	; (8014580 <tcp_new_port+0x84>)
 8014572:	881b      	ldrh	r3, [r3, #0]
}
 8014574:	4618      	mov	r0, r3
 8014576:	370c      	adds	r7, #12
 8014578:	46bd      	mov	sp, r7
 801457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457e:	4770      	bx	lr
 8014580:	2000033c 	.word	0x2000033c
 8014584:	08025674 	.word	0x08025674

08014588 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b08a      	sub	sp, #40	; 0x28
 801458c:	af00      	add	r7, sp, #0
 801458e:	60f8      	str	r0, [r7, #12]
 8014590:	60b9      	str	r1, [r7, #8]
 8014592:	603b      	str	r3, [r7, #0]
 8014594:	4613      	mov	r3, r2
 8014596:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8014598:	2300      	movs	r3, #0
 801459a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d109      	bne.n	80145b6 <tcp_connect+0x2e>
 80145a2:	4b7d      	ldr	r3, [pc, #500]	; (8014798 <tcp_connect+0x210>)
 80145a4:	f240 4235 	movw	r2, #1077	; 0x435
 80145a8:	497c      	ldr	r1, [pc, #496]	; (801479c <tcp_connect+0x214>)
 80145aa:	487d      	ldr	r0, [pc, #500]	; (80147a0 <tcp_connect+0x218>)
 80145ac:	f00b f99e 	bl	801f8ec <iprintf>
 80145b0:	f06f 030f 	mvn.w	r3, #15
 80145b4:	e0ec      	b.n	8014790 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80145b6:	68bb      	ldr	r3, [r7, #8]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d109      	bne.n	80145d0 <tcp_connect+0x48>
 80145bc:	4b76      	ldr	r3, [pc, #472]	; (8014798 <tcp_connect+0x210>)
 80145be:	f240 4236 	movw	r2, #1078	; 0x436
 80145c2:	4978      	ldr	r1, [pc, #480]	; (80147a4 <tcp_connect+0x21c>)
 80145c4:	4876      	ldr	r0, [pc, #472]	; (80147a0 <tcp_connect+0x218>)
 80145c6:	f00b f991 	bl	801f8ec <iprintf>
 80145ca:	f06f 030f 	mvn.w	r3, #15
 80145ce:	e0df      	b.n	8014790 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	7d1b      	ldrb	r3, [r3, #20]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d009      	beq.n	80145ec <tcp_connect+0x64>
 80145d8:	4b6f      	ldr	r3, [pc, #444]	; (8014798 <tcp_connect+0x210>)
 80145da:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80145de:	4972      	ldr	r1, [pc, #456]	; (80147a8 <tcp_connect+0x220>)
 80145e0:	486f      	ldr	r0, [pc, #444]	; (80147a0 <tcp_connect+0x218>)
 80145e2:	f00b f983 	bl	801f8ec <iprintf>
 80145e6:	f06f 0309 	mvn.w	r3, #9
 80145ea:	e0d1      	b.n	8014790 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d002      	beq.n	80145f8 <tcp_connect+0x70>
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	e000      	b.n	80145fa <tcp_connect+0x72>
 80145f8:	2300      	movs	r3, #0
 80145fa:	68fa      	ldr	r2, [r7, #12]
 80145fc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	88fa      	ldrh	r2, [r7, #6]
 8014602:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	7a1b      	ldrb	r3, [r3, #8]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d006      	beq.n	801461a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	7a1b      	ldrb	r3, [r3, #8]
 8014610:	4618      	mov	r0, r3
 8014612:	f7fe fbb3 	bl	8012d7c <netif_get_by_index>
 8014616:	6278      	str	r0, [r7, #36]	; 0x24
 8014618:	e005      	b.n	8014626 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	3304      	adds	r3, #4
 801461e:	4618      	mov	r0, r3
 8014620:	f009 fa52 	bl	801dac8 <ip4_route>
 8014624:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8014626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014628:	2b00      	cmp	r3, #0
 801462a:	d102      	bne.n	8014632 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801462c:	f06f 0303 	mvn.w	r3, #3
 8014630:	e0ae      	b.n	8014790 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d003      	beq.n	8014640 <tcp_connect+0xb8>
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d111      	bne.n	8014664 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8014640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014642:	2b00      	cmp	r3, #0
 8014644:	d002      	beq.n	801464c <tcp_connect+0xc4>
 8014646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014648:	3304      	adds	r3, #4
 801464a:	e000      	b.n	801464e <tcp_connect+0xc6>
 801464c:	2300      	movs	r3, #0
 801464e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8014650:	69fb      	ldr	r3, [r7, #28]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d102      	bne.n	801465c <tcp_connect+0xd4>
      return ERR_RTE;
 8014656:	f06f 0303 	mvn.w	r3, #3
 801465a:	e099      	b.n	8014790 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801465c:	69fb      	ldr	r3, [r7, #28]
 801465e:	681a      	ldr	r2, [r3, #0]
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	8adb      	ldrh	r3, [r3, #22]
 8014668:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	8adb      	ldrh	r3, [r3, #22]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d10c      	bne.n	801468c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8014672:	f7ff ff43 	bl	80144fc <tcp_new_port>
 8014676:	4603      	mov	r3, r0
 8014678:	461a      	mov	r2, r3
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	8adb      	ldrh	r3, [r3, #22]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d102      	bne.n	801468c <tcp_connect+0x104>
      return ERR_BUF;
 8014686:	f06f 0301 	mvn.w	r3, #1
 801468a:	e081      	b.n	8014790 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801468c:	68f8      	ldr	r0, [r7, #12]
 801468e:	f001 f867 	bl	8015760 <tcp_next_iss>
 8014692:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2200      	movs	r2, #0
 8014698:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	697a      	ldr	r2, [r7, #20]
 801469e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80146a0:	697b      	ldr	r3, [r7, #20]
 80146a2:	1e5a      	subs	r2, r3, #1
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80146a8:	697b      	ldr	r3, [r7, #20]
 80146aa:	1e5a      	subs	r2, r3, #1
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	1e5a      	subs	r2, r3, #1
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80146be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80146d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80146e0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	3304      	adds	r3, #4
 80146ea:	461a      	mov	r2, r3
 80146ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80146ee:	f001 f85d 	bl	80157ac <tcp_eff_send_mss_netif>
 80146f2:	4603      	mov	r3, r0
 80146f4:	461a      	mov	r2, r3
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	2201      	movs	r2, #1
 80146fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	683a      	ldr	r2, [r7, #0]
 8014706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801470a:	2102      	movs	r1, #2
 801470c:	68f8      	ldr	r0, [r7, #12]
 801470e:	f004 fabd 	bl	8018c8c <tcp_enqueue_flags>
 8014712:	4603      	mov	r3, r0
 8014714:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8014716:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d136      	bne.n	801478c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	2202      	movs	r2, #2
 8014722:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8014724:	8b7b      	ldrh	r3, [r7, #26]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d021      	beq.n	801476e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801472a:	4b20      	ldr	r3, [pc, #128]	; (80147ac <tcp_connect+0x224>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	68fa      	ldr	r2, [r7, #12]
 8014730:	429a      	cmp	r2, r3
 8014732:	d105      	bne.n	8014740 <tcp_connect+0x1b8>
 8014734:	4b1d      	ldr	r3, [pc, #116]	; (80147ac <tcp_connect+0x224>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	68db      	ldr	r3, [r3, #12]
 801473a:	4a1c      	ldr	r2, [pc, #112]	; (80147ac <tcp_connect+0x224>)
 801473c:	6013      	str	r3, [r2, #0]
 801473e:	e013      	b.n	8014768 <tcp_connect+0x1e0>
 8014740:	4b1a      	ldr	r3, [pc, #104]	; (80147ac <tcp_connect+0x224>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	623b      	str	r3, [r7, #32]
 8014746:	e00c      	b.n	8014762 <tcp_connect+0x1da>
 8014748:	6a3b      	ldr	r3, [r7, #32]
 801474a:	68db      	ldr	r3, [r3, #12]
 801474c:	68fa      	ldr	r2, [r7, #12]
 801474e:	429a      	cmp	r2, r3
 8014750:	d104      	bne.n	801475c <tcp_connect+0x1d4>
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	68da      	ldr	r2, [r3, #12]
 8014756:	6a3b      	ldr	r3, [r7, #32]
 8014758:	60da      	str	r2, [r3, #12]
 801475a:	e005      	b.n	8014768 <tcp_connect+0x1e0>
 801475c:	6a3b      	ldr	r3, [r7, #32]
 801475e:	68db      	ldr	r3, [r3, #12]
 8014760:	623b      	str	r3, [r7, #32]
 8014762:	6a3b      	ldr	r3, [r7, #32]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d1ef      	bne.n	8014748 <tcp_connect+0x1c0>
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	2200      	movs	r2, #0
 801476c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801476e:	4b10      	ldr	r3, [pc, #64]	; (80147b0 <tcp_connect+0x228>)
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	60da      	str	r2, [r3, #12]
 8014776:	4a0e      	ldr	r2, [pc, #56]	; (80147b0 <tcp_connect+0x228>)
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	6013      	str	r3, [r2, #0]
 801477c:	f005 faea 	bl	8019d54 <tcp_timer_needed>
 8014780:	4b0c      	ldr	r3, [pc, #48]	; (80147b4 <tcp_connect+0x22c>)
 8014782:	2201      	movs	r2, #1
 8014784:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8014786:	68f8      	ldr	r0, [r7, #12]
 8014788:	f004 fb6e 	bl	8018e68 <tcp_output>
  }
  return ret;
 801478c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8014790:	4618      	mov	r0, r3
 8014792:	3728      	adds	r7, #40	; 0x28
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}
 8014798:	08023038 	.word	0x08023038
 801479c:	08023314 	.word	0x08023314
 80147a0:	0802307c 	.word	0x0802307c
 80147a4:	08023330 	.word	0x08023330
 80147a8:	0802334c 	.word	0x0802334c
 80147ac:	20016b9c 	.word	0x20016b9c
 80147b0:	20016b90 	.word	0x20016b90
 80147b4:	20016b8c 	.word	0x20016b8c

080147b8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80147b8:	b5b0      	push	{r4, r5, r7, lr}
 80147ba:	b090      	sub	sp, #64	; 0x40
 80147bc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80147be:	2300      	movs	r3, #0
 80147c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80147c4:	4b94      	ldr	r3, [pc, #592]	; (8014a18 <tcp_slowtmr+0x260>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	3301      	adds	r3, #1
 80147ca:	4a93      	ldr	r2, [pc, #588]	; (8014a18 <tcp_slowtmr+0x260>)
 80147cc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80147ce:	4b93      	ldr	r3, [pc, #588]	; (8014a1c <tcp_slowtmr+0x264>)
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	3301      	adds	r3, #1
 80147d4:	b2da      	uxtb	r2, r3
 80147d6:	4b91      	ldr	r3, [pc, #580]	; (8014a1c <tcp_slowtmr+0x264>)
 80147d8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80147da:	2300      	movs	r3, #0
 80147dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80147de:	4b90      	ldr	r3, [pc, #576]	; (8014a20 <tcp_slowtmr+0x268>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80147e4:	e29f      	b.n	8014d26 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80147e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147e8:	7d1b      	ldrb	r3, [r3, #20]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d106      	bne.n	80147fc <tcp_slowtmr+0x44>
 80147ee:	4b8d      	ldr	r3, [pc, #564]	; (8014a24 <tcp_slowtmr+0x26c>)
 80147f0:	f240 42be 	movw	r2, #1214	; 0x4be
 80147f4:	498c      	ldr	r1, [pc, #560]	; (8014a28 <tcp_slowtmr+0x270>)
 80147f6:	488d      	ldr	r0, [pc, #564]	; (8014a2c <tcp_slowtmr+0x274>)
 80147f8:	f00b f878 	bl	801f8ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80147fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147fe:	7d1b      	ldrb	r3, [r3, #20]
 8014800:	2b01      	cmp	r3, #1
 8014802:	d106      	bne.n	8014812 <tcp_slowtmr+0x5a>
 8014804:	4b87      	ldr	r3, [pc, #540]	; (8014a24 <tcp_slowtmr+0x26c>)
 8014806:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801480a:	4989      	ldr	r1, [pc, #548]	; (8014a30 <tcp_slowtmr+0x278>)
 801480c:	4887      	ldr	r0, [pc, #540]	; (8014a2c <tcp_slowtmr+0x274>)
 801480e:	f00b f86d 	bl	801f8ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8014812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014814:	7d1b      	ldrb	r3, [r3, #20]
 8014816:	2b0a      	cmp	r3, #10
 8014818:	d106      	bne.n	8014828 <tcp_slowtmr+0x70>
 801481a:	4b82      	ldr	r3, [pc, #520]	; (8014a24 <tcp_slowtmr+0x26c>)
 801481c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8014820:	4984      	ldr	r1, [pc, #528]	; (8014a34 <tcp_slowtmr+0x27c>)
 8014822:	4882      	ldr	r0, [pc, #520]	; (8014a2c <tcp_slowtmr+0x274>)
 8014824:	f00b f862 	bl	801f8ec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801482a:	7f9a      	ldrb	r2, [r3, #30]
 801482c:	4b7b      	ldr	r3, [pc, #492]	; (8014a1c <tcp_slowtmr+0x264>)
 801482e:	781b      	ldrb	r3, [r3, #0]
 8014830:	429a      	cmp	r2, r3
 8014832:	d105      	bne.n	8014840 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8014834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014836:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801483a:	68db      	ldr	r3, [r3, #12]
 801483c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801483e:	e272      	b.n	8014d26 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8014840:	4b76      	ldr	r3, [pc, #472]	; (8014a1c <tcp_slowtmr+0x264>)
 8014842:	781a      	ldrb	r2, [r3, #0]
 8014844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014846:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8014848:	2300      	movs	r3, #0
 801484a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801484e:	2300      	movs	r3, #0
 8014850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014856:	7d1b      	ldrb	r3, [r3, #20]
 8014858:	2b02      	cmp	r3, #2
 801485a:	d10a      	bne.n	8014872 <tcp_slowtmr+0xba>
 801485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801485e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014862:	2b05      	cmp	r3, #5
 8014864:	d905      	bls.n	8014872 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8014866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801486a:	3301      	adds	r3, #1
 801486c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014870:	e11e      	b.n	8014ab0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014874:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014878:	2b0b      	cmp	r3, #11
 801487a:	d905      	bls.n	8014888 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801487c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014880:	3301      	adds	r3, #1
 8014882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014886:	e113      	b.n	8014ab0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8014888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801488a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801488e:	2b00      	cmp	r3, #0
 8014890:	d075      	beq.n	801497e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8014892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014896:	2b00      	cmp	r3, #0
 8014898:	d006      	beq.n	80148a8 <tcp_slowtmr+0xf0>
 801489a:	4b62      	ldr	r3, [pc, #392]	; (8014a24 <tcp_slowtmr+0x26c>)
 801489c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80148a0:	4965      	ldr	r1, [pc, #404]	; (8014a38 <tcp_slowtmr+0x280>)
 80148a2:	4862      	ldr	r0, [pc, #392]	; (8014a2c <tcp_slowtmr+0x274>)
 80148a4:	f00b f822 	bl	801f8ec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80148a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d106      	bne.n	80148be <tcp_slowtmr+0x106>
 80148b0:	4b5c      	ldr	r3, [pc, #368]	; (8014a24 <tcp_slowtmr+0x26c>)
 80148b2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80148b6:	4961      	ldr	r1, [pc, #388]	; (8014a3c <tcp_slowtmr+0x284>)
 80148b8:	485c      	ldr	r0, [pc, #368]	; (8014a2c <tcp_slowtmr+0x274>)
 80148ba:	f00b f817 	bl	801f8ec <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80148be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80148c4:	2b0b      	cmp	r3, #11
 80148c6:	d905      	bls.n	80148d4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80148c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148cc:	3301      	adds	r3, #1
 80148ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80148d2:	e0ed      	b.n	8014ab0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80148d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80148da:	3b01      	subs	r3, #1
 80148dc:	4a58      	ldr	r2, [pc, #352]	; (8014a40 <tcp_slowtmr+0x288>)
 80148de:	5cd3      	ldrb	r3, [r2, r3]
 80148e0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80148e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80148e8:	7c7a      	ldrb	r2, [r7, #17]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d907      	bls.n	80148fe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80148ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80148f4:	3301      	adds	r3, #1
 80148f6:	b2da      	uxtb	r2, r3
 80148f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80148fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014900:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014904:	7c7a      	ldrb	r2, [r7, #17]
 8014906:	429a      	cmp	r2, r3
 8014908:	f200 80d2 	bhi.w	8014ab0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801490c:	2301      	movs	r3, #1
 801490e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8014910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014916:	2b00      	cmp	r3, #0
 8014918:	d108      	bne.n	801492c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801491a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801491c:	f005 f94c 	bl	8019bb8 <tcp_zero_window_probe>
 8014920:	4603      	mov	r3, r0
 8014922:	2b00      	cmp	r3, #0
 8014924:	d014      	beq.n	8014950 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8014926:	2300      	movs	r3, #0
 8014928:	623b      	str	r3, [r7, #32]
 801492a:	e011      	b.n	8014950 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801492e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014932:	4619      	mov	r1, r3
 8014934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014936:	f004 f811 	bl	801895c <tcp_split_unsent_seg>
 801493a:	4603      	mov	r3, r0
 801493c:	2b00      	cmp	r3, #0
 801493e:	d107      	bne.n	8014950 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8014940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014942:	f004 fa91 	bl	8018e68 <tcp_output>
 8014946:	4603      	mov	r3, r0
 8014948:	2b00      	cmp	r3, #0
 801494a:	d101      	bne.n	8014950 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801494c:	2300      	movs	r3, #0
 801494e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8014950:	6a3b      	ldr	r3, [r7, #32]
 8014952:	2b00      	cmp	r3, #0
 8014954:	f000 80ac 	beq.w	8014ab0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8014958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801495a:	2200      	movs	r2, #0
 801495c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014962:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014966:	2b06      	cmp	r3, #6
 8014968:	f200 80a2 	bhi.w	8014ab0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801496e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014972:	3301      	adds	r3, #1
 8014974:	b2da      	uxtb	r2, r3
 8014976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014978:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801497c:	e098      	b.n	8014ab0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014980:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014984:	2b00      	cmp	r3, #0
 8014986:	db0f      	blt.n	80149a8 <tcp_slowtmr+0x1f0>
 8014988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801498e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014992:	4293      	cmp	r3, r2
 8014994:	d008      	beq.n	80149a8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8014996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014998:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801499c:	b29b      	uxth	r3, r3
 801499e:	3301      	adds	r3, #1
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	b21a      	sxth	r2, r3
 80149a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80149a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149aa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80149ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80149b4:	429a      	cmp	r2, r3
 80149b6:	db7b      	blt.n	8014ab0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80149b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80149ba:	f004 fd47 	bl	801944c <tcp_rexmit_rto_prepare>
 80149be:	4603      	mov	r3, r0
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d007      	beq.n	80149d4 <tcp_slowtmr+0x21c>
 80149c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d171      	bne.n	8014ab0 <tcp_slowtmr+0x2f8>
 80149cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d06d      	beq.n	8014ab0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80149d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d6:	7d1b      	ldrb	r3, [r3, #20]
 80149d8:	2b02      	cmp	r3, #2
 80149da:	d03a      	beq.n	8014a52 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80149dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80149e2:	2b0c      	cmp	r3, #12
 80149e4:	bf28      	it	cs
 80149e6:	230c      	movcs	r3, #12
 80149e8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80149ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80149f0:	10db      	asrs	r3, r3, #3
 80149f2:	b21b      	sxth	r3, r3
 80149f4:	461a      	mov	r2, r3
 80149f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80149fc:	4413      	add	r3, r2
 80149fe:	7efa      	ldrb	r2, [r7, #27]
 8014a00:	4910      	ldr	r1, [pc, #64]	; (8014a44 <tcp_slowtmr+0x28c>)
 8014a02:	5c8a      	ldrb	r2, [r1, r2]
 8014a04:	4093      	lsls	r3, r2
 8014a06:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014a08:	697b      	ldr	r3, [r7, #20]
 8014a0a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8014a0e:	4293      	cmp	r3, r2
 8014a10:	dc1a      	bgt.n	8014a48 <tcp_slowtmr+0x290>
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	b21a      	sxth	r2, r3
 8014a16:	e019      	b.n	8014a4c <tcp_slowtmr+0x294>
 8014a18:	20016b94 	.word	0x20016b94
 8014a1c:	20005502 	.word	0x20005502
 8014a20:	20016b90 	.word	0x20016b90
 8014a24:	08023038 	.word	0x08023038
 8014a28:	0802337c 	.word	0x0802337c
 8014a2c:	0802307c 	.word	0x0802307c
 8014a30:	080233a8 	.word	0x080233a8
 8014a34:	080233d4 	.word	0x080233d4
 8014a38:	08023404 	.word	0x08023404
 8014a3c:	08023438 	.word	0x08023438
 8014a40:	0802566c 	.word	0x0802566c
 8014a44:	0802565c 	.word	0x0802565c
 8014a48:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8014a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a54:	2200      	movs	r2, #0
 8014a56:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014a64:	4293      	cmp	r3, r2
 8014a66:	bf28      	it	cs
 8014a68:	4613      	movcs	r3, r2
 8014a6a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014a6c:	8a7b      	ldrh	r3, [r7, #18]
 8014a6e:	085b      	lsrs	r3, r3, #1
 8014a70:	b29a      	uxth	r2, r3
 8014a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a82:	005b      	lsls	r3, r3, #1
 8014a84:	b29b      	uxth	r3, r3
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d206      	bcs.n	8014a98 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8014a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a8e:	005b      	lsls	r3, r3, #1
 8014a90:	b29a      	uxth	r2, r3
 8014a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8014a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a9a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8014a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8014aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8014aaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014aac:	f004 fd3e 	bl	801952c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8014ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ab2:	7d1b      	ldrb	r3, [r3, #20]
 8014ab4:	2b06      	cmp	r3, #6
 8014ab6:	d111      	bne.n	8014adc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8014ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aba:	8b5b      	ldrh	r3, [r3, #26]
 8014abc:	f003 0310 	and.w	r3, r3, #16
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d00b      	beq.n	8014adc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014ac4:	4b9d      	ldr	r3, [pc, #628]	; (8014d3c <tcp_slowtmr+0x584>)
 8014ac6:	681a      	ldr	r2, [r3, #0]
 8014ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aca:	6a1b      	ldr	r3, [r3, #32]
 8014acc:	1ad3      	subs	r3, r2, r3
 8014ace:	2b28      	cmp	r3, #40	; 0x28
 8014ad0:	d904      	bls.n	8014adc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8014ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ade:	7a5b      	ldrb	r3, [r3, #9]
 8014ae0:	f003 0308 	and.w	r3, r3, #8
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d04c      	beq.n	8014b82 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8014ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014aec:	2b04      	cmp	r3, #4
 8014aee:	d003      	beq.n	8014af8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8014af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014af2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014af4:	2b07      	cmp	r3, #7
 8014af6:	d144      	bne.n	8014b82 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014af8:	4b90      	ldr	r3, [pc, #576]	; (8014d3c <tcp_slowtmr+0x584>)
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afe:	6a1b      	ldr	r3, [r3, #32]
 8014b00:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014b08:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8014b0c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8014b10:	498b      	ldr	r1, [pc, #556]	; (8014d40 <tcp_slowtmr+0x588>)
 8014b12:	fba1 1303 	umull	r1, r3, r1, r3
 8014b16:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d90a      	bls.n	8014b32 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8014b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b20:	3301      	adds	r3, #1
 8014b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8014b26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014b30:	e027      	b.n	8014b82 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014b32:	4b82      	ldr	r3, [pc, #520]	; (8014d3c <tcp_slowtmr+0x584>)
 8014b34:	681a      	ldr	r2, [r3, #0]
 8014b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b38:	6a1b      	ldr	r3, [r3, #32]
 8014b3a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b3e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b44:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014b48:	4618      	mov	r0, r3
 8014b4a:	4b7e      	ldr	r3, [pc, #504]	; (8014d44 <tcp_slowtmr+0x58c>)
 8014b4c:	fb03 f300 	mul.w	r3, r3, r0
 8014b50:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014b52:	497b      	ldr	r1, [pc, #492]	; (8014d40 <tcp_slowtmr+0x588>)
 8014b54:	fba1 1303 	umull	r1, r3, r1, r3
 8014b58:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014b5a:	429a      	cmp	r2, r3
 8014b5c:	d911      	bls.n	8014b82 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8014b5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b60:	f004 ffea 	bl	8019b38 <tcp_keepalive>
 8014b64:	4603      	mov	r3, r0
 8014b66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8014b6a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d107      	bne.n	8014b82 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8014b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b74:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014b78:	3301      	adds	r3, #1
 8014b7a:	b2da      	uxtb	r2, r3
 8014b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b7e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8014b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d011      	beq.n	8014bae <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014b8a:	4b6c      	ldr	r3, [pc, #432]	; (8014d3c <tcp_slowtmr+0x584>)
 8014b8c:	681a      	ldr	r2, [r3, #0]
 8014b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b90:	6a1b      	ldr	r3, [r3, #32]
 8014b92:	1ad2      	subs	r2, r2, r3
 8014b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b96:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014b9a:	4619      	mov	r1, r3
 8014b9c:	460b      	mov	r3, r1
 8014b9e:	005b      	lsls	r3, r3, #1
 8014ba0:	440b      	add	r3, r1
 8014ba2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	d302      	bcc.n	8014bae <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8014ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014baa:	f000 fea9 	bl	8015900 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8014bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bb0:	7d1b      	ldrb	r3, [r3, #20]
 8014bb2:	2b03      	cmp	r3, #3
 8014bb4:	d10b      	bne.n	8014bce <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014bb6:	4b61      	ldr	r3, [pc, #388]	; (8014d3c <tcp_slowtmr+0x584>)
 8014bb8:	681a      	ldr	r2, [r3, #0]
 8014bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bbc:	6a1b      	ldr	r3, [r3, #32]
 8014bbe:	1ad3      	subs	r3, r2, r3
 8014bc0:	2b28      	cmp	r3, #40	; 0x28
 8014bc2:	d904      	bls.n	8014bce <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8014bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bc8:	3301      	adds	r3, #1
 8014bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8014bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bd0:	7d1b      	ldrb	r3, [r3, #20]
 8014bd2:	2b09      	cmp	r3, #9
 8014bd4:	d10b      	bne.n	8014bee <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014bd6:	4b59      	ldr	r3, [pc, #356]	; (8014d3c <tcp_slowtmr+0x584>)
 8014bd8:	681a      	ldr	r2, [r3, #0]
 8014bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bdc:	6a1b      	ldr	r3, [r3, #32]
 8014bde:	1ad3      	subs	r3, r2, r3
 8014be0:	2bf0      	cmp	r3, #240	; 0xf0
 8014be2:	d904      	bls.n	8014bee <tcp_slowtmr+0x436>
        ++pcb_remove;
 8014be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014be8:	3301      	adds	r3, #1
 8014bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d060      	beq.n	8014cb8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8014bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014bfc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8014bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c00:	f000 fcca 	bl	8015598 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8014c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d010      	beq.n	8014c2c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014c0a:	4b4f      	ldr	r3, [pc, #316]	; (8014d48 <tcp_slowtmr+0x590>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d106      	bne.n	8014c22 <tcp_slowtmr+0x46a>
 8014c14:	4b4d      	ldr	r3, [pc, #308]	; (8014d4c <tcp_slowtmr+0x594>)
 8014c16:	f240 526d 	movw	r2, #1389	; 0x56d
 8014c1a:	494d      	ldr	r1, [pc, #308]	; (8014d50 <tcp_slowtmr+0x598>)
 8014c1c:	484d      	ldr	r0, [pc, #308]	; (8014d54 <tcp_slowtmr+0x59c>)
 8014c1e:	f00a fe65 	bl	801f8ec <iprintf>
        prev->next = pcb->next;
 8014c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c24:	68da      	ldr	r2, [r3, #12]
 8014c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c28:	60da      	str	r2, [r3, #12]
 8014c2a:	e00f      	b.n	8014c4c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014c2c:	4b46      	ldr	r3, [pc, #280]	; (8014d48 <tcp_slowtmr+0x590>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c32:	429a      	cmp	r2, r3
 8014c34:	d006      	beq.n	8014c44 <tcp_slowtmr+0x48c>
 8014c36:	4b45      	ldr	r3, [pc, #276]	; (8014d4c <tcp_slowtmr+0x594>)
 8014c38:	f240 5271 	movw	r2, #1393	; 0x571
 8014c3c:	4946      	ldr	r1, [pc, #280]	; (8014d58 <tcp_slowtmr+0x5a0>)
 8014c3e:	4845      	ldr	r0, [pc, #276]	; (8014d54 <tcp_slowtmr+0x59c>)
 8014c40:	f00a fe54 	bl	801f8ec <iprintf>
        tcp_active_pcbs = pcb->next;
 8014c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c46:	68db      	ldr	r3, [r3, #12]
 8014c48:	4a3f      	ldr	r2, [pc, #252]	; (8014d48 <tcp_slowtmr+0x590>)
 8014c4a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d013      	beq.n	8014c7c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c56:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c5a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014c5c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8014c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c60:	3304      	adds	r3, #4
 8014c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c64:	8ad2      	ldrh	r2, [r2, #22]
 8014c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014c68:	8b09      	ldrh	r1, [r1, #24]
 8014c6a:	9102      	str	r1, [sp, #8]
 8014c6c:	9201      	str	r2, [sp, #4]
 8014c6e:	9300      	str	r3, [sp, #0]
 8014c70:	462b      	mov	r3, r5
 8014c72:	4622      	mov	r2, r4
 8014c74:	4601      	mov	r1, r0
 8014c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c78:	f004 feaa 	bl	80199d0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8014c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c7e:	691b      	ldr	r3, [r3, #16]
 8014c80:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c84:	7d1b      	ldrb	r3, [r3, #20]
 8014c86:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c8a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c8e:	68db      	ldr	r3, [r3, #12]
 8014c90:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014c92:	6838      	ldr	r0, [r7, #0]
 8014c94:	f7ff f838 	bl	8013d08 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8014c98:	4b30      	ldr	r3, [pc, #192]	; (8014d5c <tcp_slowtmr+0x5a4>)
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d004      	beq.n	8014cae <tcp_slowtmr+0x4f6>
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f06f 010c 	mvn.w	r1, #12
 8014caa:	68b8      	ldr	r0, [r7, #8]
 8014cac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014cae:	4b2b      	ldr	r3, [pc, #172]	; (8014d5c <tcp_slowtmr+0x5a4>)
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d037      	beq.n	8014d26 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8014cb6:	e590      	b.n	80147da <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8014cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cbe:	68db      	ldr	r3, [r3, #12]
 8014cc0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8014cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc4:	7f1b      	ldrb	r3, [r3, #28]
 8014cc6:	3301      	adds	r3, #1
 8014cc8:	b2da      	uxtb	r2, r3
 8014cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ccc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd0:	7f1a      	ldrb	r2, [r3, #28]
 8014cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd4:	7f5b      	ldrb	r3, [r3, #29]
 8014cd6:	429a      	cmp	r2, r3
 8014cd8:	d325      	bcc.n	8014d26 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8014cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cdc:	2200      	movs	r2, #0
 8014cde:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8014ce0:	4b1e      	ldr	r3, [pc, #120]	; (8014d5c <tcp_slowtmr+0x5a4>)
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8014ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d00b      	beq.n	8014d08 <tcp_slowtmr+0x550>
 8014cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cf8:	6912      	ldr	r2, [r2, #16]
 8014cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014cfc:	4610      	mov	r0, r2
 8014cfe:	4798      	blx	r3
 8014d00:	4603      	mov	r3, r0
 8014d02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8014d06:	e002      	b.n	8014d0e <tcp_slowtmr+0x556>
 8014d08:	2300      	movs	r3, #0
 8014d0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8014d0e:	4b13      	ldr	r3, [pc, #76]	; (8014d5c <tcp_slowtmr+0x5a4>)
 8014d10:	781b      	ldrb	r3, [r3, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d000      	beq.n	8014d18 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8014d16:	e560      	b.n	80147da <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014d18:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d102      	bne.n	8014d26 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8014d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d22:	f004 f8a1 	bl	8018e68 <tcp_output>
  while (pcb != NULL) {
 8014d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	f47f ad5c 	bne.w	80147e6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8014d32:	4b0b      	ldr	r3, [pc, #44]	; (8014d60 <tcp_slowtmr+0x5a8>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014d38:	e067      	b.n	8014e0a <tcp_slowtmr+0x652>
 8014d3a:	bf00      	nop
 8014d3c:	20016b94 	.word	0x20016b94
 8014d40:	10624dd3 	.word	0x10624dd3
 8014d44:	000124f8 	.word	0x000124f8
 8014d48:	20016b90 	.word	0x20016b90
 8014d4c:	08023038 	.word	0x08023038
 8014d50:	08023470 	.word	0x08023470
 8014d54:	0802307c 	.word	0x0802307c
 8014d58:	0802349c 	.word	0x0802349c
 8014d5c:	20016b8c 	.word	0x20016b8c
 8014d60:	20016ba0 	.word	0x20016ba0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d66:	7d1b      	ldrb	r3, [r3, #20]
 8014d68:	2b0a      	cmp	r3, #10
 8014d6a:	d006      	beq.n	8014d7a <tcp_slowtmr+0x5c2>
 8014d6c:	4b2b      	ldr	r3, [pc, #172]	; (8014e1c <tcp_slowtmr+0x664>)
 8014d6e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8014d72:	492b      	ldr	r1, [pc, #172]	; (8014e20 <tcp_slowtmr+0x668>)
 8014d74:	482b      	ldr	r0, [pc, #172]	; (8014e24 <tcp_slowtmr+0x66c>)
 8014d76:	f00a fdb9 	bl	801f8ec <iprintf>
    pcb_remove = 0;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014d80:	4b29      	ldr	r3, [pc, #164]	; (8014e28 <tcp_slowtmr+0x670>)
 8014d82:	681a      	ldr	r2, [r3, #0]
 8014d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d86:	6a1b      	ldr	r3, [r3, #32]
 8014d88:	1ad3      	subs	r3, r2, r3
 8014d8a:	2bf0      	cmp	r3, #240	; 0xf0
 8014d8c:	d904      	bls.n	8014d98 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8014d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d92:	3301      	adds	r3, #1
 8014d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d02f      	beq.n	8014e00 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014da0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014da2:	f000 fbf9 	bl	8015598 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8014da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d010      	beq.n	8014dce <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014dac:	4b1f      	ldr	r3, [pc, #124]	; (8014e2c <tcp_slowtmr+0x674>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014db2:	429a      	cmp	r2, r3
 8014db4:	d106      	bne.n	8014dc4 <tcp_slowtmr+0x60c>
 8014db6:	4b19      	ldr	r3, [pc, #100]	; (8014e1c <tcp_slowtmr+0x664>)
 8014db8:	f240 52af 	movw	r2, #1455	; 0x5af
 8014dbc:	491c      	ldr	r1, [pc, #112]	; (8014e30 <tcp_slowtmr+0x678>)
 8014dbe:	4819      	ldr	r0, [pc, #100]	; (8014e24 <tcp_slowtmr+0x66c>)
 8014dc0:	f00a fd94 	bl	801f8ec <iprintf>
        prev->next = pcb->next;
 8014dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dc6:	68da      	ldr	r2, [r3, #12]
 8014dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dca:	60da      	str	r2, [r3, #12]
 8014dcc:	e00f      	b.n	8014dee <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014dce:	4b17      	ldr	r3, [pc, #92]	; (8014e2c <tcp_slowtmr+0x674>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d006      	beq.n	8014de6 <tcp_slowtmr+0x62e>
 8014dd8:	4b10      	ldr	r3, [pc, #64]	; (8014e1c <tcp_slowtmr+0x664>)
 8014dda:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8014dde:	4915      	ldr	r1, [pc, #84]	; (8014e34 <tcp_slowtmr+0x67c>)
 8014de0:	4810      	ldr	r0, [pc, #64]	; (8014e24 <tcp_slowtmr+0x66c>)
 8014de2:	f00a fd83 	bl	801f8ec <iprintf>
        tcp_tw_pcbs = pcb->next;
 8014de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014de8:	68db      	ldr	r3, [r3, #12]
 8014dea:	4a10      	ldr	r2, [pc, #64]	; (8014e2c <tcp_slowtmr+0x674>)
 8014dec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8014dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8014df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df4:	68db      	ldr	r3, [r3, #12]
 8014df6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014df8:	69f8      	ldr	r0, [r7, #28]
 8014dfa:	f7fe ff85 	bl	8013d08 <tcp_free>
 8014dfe:	e004      	b.n	8014e0a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8014e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e02:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e06:	68db      	ldr	r3, [r3, #12]
 8014e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d1a9      	bne.n	8014d64 <tcp_slowtmr+0x5ac>
    }
  }
}
 8014e10:	bf00      	nop
 8014e12:	bf00      	nop
 8014e14:	3730      	adds	r7, #48	; 0x30
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bdb0      	pop	{r4, r5, r7, pc}
 8014e1a:	bf00      	nop
 8014e1c:	08023038 	.word	0x08023038
 8014e20:	080234c8 	.word	0x080234c8
 8014e24:	0802307c 	.word	0x0802307c
 8014e28:	20016b94 	.word	0x20016b94
 8014e2c:	20016ba0 	.word	0x20016ba0
 8014e30:	080234f8 	.word	0x080234f8
 8014e34:	08023520 	.word	0x08023520

08014e38 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014e3e:	4b2d      	ldr	r3, [pc, #180]	; (8014ef4 <tcp_fasttmr+0xbc>)
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	3301      	adds	r3, #1
 8014e44:	b2da      	uxtb	r2, r3
 8014e46:	4b2b      	ldr	r3, [pc, #172]	; (8014ef4 <tcp_fasttmr+0xbc>)
 8014e48:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014e4a:	4b2b      	ldr	r3, [pc, #172]	; (8014ef8 <tcp_fasttmr+0xc0>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014e50:	e048      	b.n	8014ee4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	7f9a      	ldrb	r2, [r3, #30]
 8014e56:	4b27      	ldr	r3, [pc, #156]	; (8014ef4 <tcp_fasttmr+0xbc>)
 8014e58:	781b      	ldrb	r3, [r3, #0]
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d03f      	beq.n	8014ede <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014e5e:	4b25      	ldr	r3, [pc, #148]	; (8014ef4 <tcp_fasttmr+0xbc>)
 8014e60:	781a      	ldrb	r2, [r3, #0]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	8b5b      	ldrh	r3, [r3, #26]
 8014e6a:	f003 0301 	and.w	r3, r3, #1
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d010      	beq.n	8014e94 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	8b5b      	ldrh	r3, [r3, #26]
 8014e76:	f043 0302 	orr.w	r3, r3, #2
 8014e7a:	b29a      	uxth	r2, r3
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f003 fff1 	bl	8018e68 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	8b5b      	ldrh	r3, [r3, #26]
 8014e8a:	f023 0303 	bic.w	r3, r3, #3
 8014e8e:	b29a      	uxth	r2, r3
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	8b5b      	ldrh	r3, [r3, #26]
 8014e98:	f003 0308 	and.w	r3, r3, #8
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d009      	beq.n	8014eb4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	8b5b      	ldrh	r3, [r3, #26]
 8014ea4:	f023 0308 	bic.w	r3, r3, #8
 8014ea8:	b29a      	uxth	r2, r3
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f7ff f8be 	bl	8014030 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	68db      	ldr	r3, [r3, #12]
 8014eb8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d00a      	beq.n	8014ed8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8014ec2:	4b0e      	ldr	r3, [pc, #56]	; (8014efc <tcp_fasttmr+0xc4>)
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8014ec8:	6878      	ldr	r0, [r7, #4]
 8014eca:	f000 f819 	bl	8014f00 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014ece:	4b0b      	ldr	r3, [pc, #44]	; (8014efc <tcp_fasttmr+0xc4>)
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d000      	beq.n	8014ed8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8014ed6:	e7b8      	b.n	8014e4a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	607b      	str	r3, [r7, #4]
 8014edc:	e002      	b.n	8014ee4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	68db      	ldr	r3, [r3, #12]
 8014ee2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d1b3      	bne.n	8014e52 <tcp_fasttmr+0x1a>
    }
  }
}
 8014eea:	bf00      	nop
 8014eec:	bf00      	nop
 8014eee:	3708      	adds	r7, #8
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd80      	pop	{r7, pc}
 8014ef4:	20005502 	.word	0x20005502
 8014ef8:	20016b90 	.word	0x20016b90
 8014efc:	20016b8c 	.word	0x20016b8c

08014f00 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014f00:	b590      	push	{r4, r7, lr}
 8014f02:	b085      	sub	sp, #20
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d109      	bne.n	8014f22 <tcp_process_refused_data+0x22>
 8014f0e:	4b37      	ldr	r3, [pc, #220]	; (8014fec <tcp_process_refused_data+0xec>)
 8014f10:	f240 6209 	movw	r2, #1545	; 0x609
 8014f14:	4936      	ldr	r1, [pc, #216]	; (8014ff0 <tcp_process_refused_data+0xf0>)
 8014f16:	4837      	ldr	r0, [pc, #220]	; (8014ff4 <tcp_process_refused_data+0xf4>)
 8014f18:	f00a fce8 	bl	801f8ec <iprintf>
 8014f1c:	f06f 030f 	mvn.w	r3, #15
 8014f20:	e060      	b.n	8014fe4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014f26:	7b5b      	ldrb	r3, [r3, #13]
 8014f28:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014f2e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	2200      	movs	r2, #0
 8014f34:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d00b      	beq.n	8014f58 <tcp_process_refused_data+0x58>
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6918      	ldr	r0, [r3, #16]
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	68ba      	ldr	r2, [r7, #8]
 8014f4e:	6879      	ldr	r1, [r7, #4]
 8014f50:	47a0      	blx	r4
 8014f52:	4603      	mov	r3, r0
 8014f54:	73fb      	strb	r3, [r7, #15]
 8014f56:	e007      	b.n	8014f68 <tcp_process_refused_data+0x68>
 8014f58:	2300      	movs	r3, #0
 8014f5a:	68ba      	ldr	r2, [r7, #8]
 8014f5c:	6879      	ldr	r1, [r7, #4]
 8014f5e:	2000      	movs	r0, #0
 8014f60:	f000 f8a4 	bl	80150ac <tcp_recv_null>
 8014f64:	4603      	mov	r3, r0
 8014f66:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d12a      	bne.n	8014fc6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014f70:	7bbb      	ldrb	r3, [r7, #14]
 8014f72:	f003 0320 	and.w	r3, r3, #32
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d033      	beq.n	8014fe2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014f82:	d005      	beq.n	8014f90 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f88:	3301      	adds	r3, #1
 8014f8a:	b29a      	uxth	r2, r3
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d00b      	beq.n	8014fb2 <tcp_process_refused_data+0xb2>
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	6918      	ldr	r0, [r3, #16]
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	6879      	ldr	r1, [r7, #4]
 8014faa:	47a0      	blx	r4
 8014fac:	4603      	mov	r3, r0
 8014fae:	73fb      	strb	r3, [r7, #15]
 8014fb0:	e001      	b.n	8014fb6 <tcp_process_refused_data+0xb6>
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8014fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fba:	f113 0f0d 	cmn.w	r3, #13
 8014fbe:	d110      	bne.n	8014fe2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014fc0:	f06f 030c 	mvn.w	r3, #12
 8014fc4:	e00e      	b.n	8014fe4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8014fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fca:	f113 0f0d 	cmn.w	r3, #13
 8014fce:	d102      	bne.n	8014fd6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014fd0:	f06f 030c 	mvn.w	r3, #12
 8014fd4:	e006      	b.n	8014fe4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	68ba      	ldr	r2, [r7, #8]
 8014fda:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8014fdc:	f06f 0304 	mvn.w	r3, #4
 8014fe0:	e000      	b.n	8014fe4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014fe2:	2300      	movs	r3, #0
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3714      	adds	r7, #20
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd90      	pop	{r4, r7, pc}
 8014fec:	08023038 	.word	0x08023038
 8014ff0:	08023548 	.word	0x08023548
 8014ff4:	0802307c 	.word	0x0802307c

08014ff8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015000:	e007      	b.n	8015012 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f000 f80a 	bl	8015022 <tcp_seg_free>
    seg = next;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d1f4      	bne.n	8015002 <tcp_segs_free+0xa>
  }
}
 8015018:	bf00      	nop
 801501a:	bf00      	nop
 801501c:	3710      	adds	r7, #16
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}

08015022 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015022:	b580      	push	{r7, lr}
 8015024:	b082      	sub	sp, #8
 8015026:	af00      	add	r7, sp, #0
 8015028:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d00c      	beq.n	801504a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d004      	beq.n	8015042 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	4618      	mov	r0, r3
 801503e:	f7fe fa2b 	bl	8013498 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015042:	6879      	ldr	r1, [r7, #4]
 8015044:	2003      	movs	r0, #3
 8015046:	f7fd fb77 	bl	8012738 <memp_free>
  }
}
 801504a:	bf00      	nop
 801504c:	3708      	adds	r7, #8
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
	...

08015054 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d106      	bne.n	8015070 <tcp_seg_copy+0x1c>
 8015062:	4b0f      	ldr	r3, [pc, #60]	; (80150a0 <tcp_seg_copy+0x4c>)
 8015064:	f240 6282 	movw	r2, #1666	; 0x682
 8015068:	490e      	ldr	r1, [pc, #56]	; (80150a4 <tcp_seg_copy+0x50>)
 801506a:	480f      	ldr	r0, [pc, #60]	; (80150a8 <tcp_seg_copy+0x54>)
 801506c:	f00a fc3e 	bl	801f8ec <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015070:	2003      	movs	r0, #3
 8015072:	f7fd fb0f 	bl	8012694 <memp_malloc>
 8015076:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d101      	bne.n	8015082 <tcp_seg_copy+0x2e>
    return NULL;
 801507e:	2300      	movs	r3, #0
 8015080:	e00a      	b.n	8015098 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015082:	2210      	movs	r2, #16
 8015084:	6879      	ldr	r1, [r7, #4]
 8015086:	68f8      	ldr	r0, [r7, #12]
 8015088:	f00a fb46 	bl	801f718 <memcpy>
  pbuf_ref(cseg->p);
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	4618      	mov	r0, r3
 8015092:	f7fe faa7 	bl	80135e4 <pbuf_ref>
  return cseg;
 8015096:	68fb      	ldr	r3, [r7, #12]
}
 8015098:	4618      	mov	r0, r3
 801509a:	3710      	adds	r7, #16
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}
 80150a0:	08023038 	.word	0x08023038
 80150a4:	0802358c 	.word	0x0802358c
 80150a8:	0802307c 	.word	0x0802307c

080150ac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	60f8      	str	r0, [r7, #12]
 80150b4:	60b9      	str	r1, [r7, #8]
 80150b6:	607a      	str	r2, [r7, #4]
 80150b8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80150ba:	68bb      	ldr	r3, [r7, #8]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d109      	bne.n	80150d4 <tcp_recv_null+0x28>
 80150c0:	4b12      	ldr	r3, [pc, #72]	; (801510c <tcp_recv_null+0x60>)
 80150c2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80150c6:	4912      	ldr	r1, [pc, #72]	; (8015110 <tcp_recv_null+0x64>)
 80150c8:	4812      	ldr	r0, [pc, #72]	; (8015114 <tcp_recv_null+0x68>)
 80150ca:	f00a fc0f 	bl	801f8ec <iprintf>
 80150ce:	f06f 030f 	mvn.w	r3, #15
 80150d2:	e016      	b.n	8015102 <tcp_recv_null+0x56>

  if (p != NULL) {
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d009      	beq.n	80150ee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	891b      	ldrh	r3, [r3, #8]
 80150de:	4619      	mov	r1, r3
 80150e0:	68b8      	ldr	r0, [r7, #8]
 80150e2:	f7ff f9bb 	bl	801445c <tcp_recved>
    pbuf_free(p);
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f7fe f9d6 	bl	8013498 <pbuf_free>
 80150ec:	e008      	b.n	8015100 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80150ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d104      	bne.n	8015100 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80150f6:	68b8      	ldr	r0, [r7, #8]
 80150f8:	f7ff f804 	bl	8014104 <tcp_close>
 80150fc:	4603      	mov	r3, r0
 80150fe:	e000      	b.n	8015102 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015100:	2300      	movs	r3, #0
}
 8015102:	4618      	mov	r0, r3
 8015104:	3710      	adds	r7, #16
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}
 801510a:	bf00      	nop
 801510c:	08023038 	.word	0x08023038
 8015110:	080235a8 	.word	0x080235a8
 8015114:	0802307c 	.word	0x0802307c

08015118 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b086      	sub	sp, #24
 801511c:	af00      	add	r7, sp, #0
 801511e:	4603      	mov	r3, r0
 8015120:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015126:	2b00      	cmp	r3, #0
 8015128:	db01      	blt.n	801512e <tcp_kill_prio+0x16>
 801512a:	79fb      	ldrb	r3, [r7, #7]
 801512c:	e000      	b.n	8015130 <tcp_kill_prio+0x18>
 801512e:	237f      	movs	r3, #127	; 0x7f
 8015130:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015132:	7afb      	ldrb	r3, [r7, #11]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d034      	beq.n	80151a2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015138:	7afb      	ldrb	r3, [r7, #11]
 801513a:	3b01      	subs	r3, #1
 801513c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801513e:	2300      	movs	r3, #0
 8015140:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015142:	2300      	movs	r3, #0
 8015144:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015146:	4b19      	ldr	r3, [pc, #100]	; (80151ac <tcp_kill_prio+0x94>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	617b      	str	r3, [r7, #20]
 801514c:	e01f      	b.n	801518e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	7d5b      	ldrb	r3, [r3, #21]
 8015152:	7afa      	ldrb	r2, [r7, #11]
 8015154:	429a      	cmp	r2, r3
 8015156:	d80c      	bhi.n	8015172 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801515c:	7afa      	ldrb	r2, [r7, #11]
 801515e:	429a      	cmp	r2, r3
 8015160:	d112      	bne.n	8015188 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015162:	4b13      	ldr	r3, [pc, #76]	; (80151b0 <tcp_kill_prio+0x98>)
 8015164:	681a      	ldr	r2, [r3, #0]
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	6a1b      	ldr	r3, [r3, #32]
 801516a:	1ad3      	subs	r3, r2, r3
 801516c:	68fa      	ldr	r2, [r7, #12]
 801516e:	429a      	cmp	r2, r3
 8015170:	d80a      	bhi.n	8015188 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015172:	4b0f      	ldr	r3, [pc, #60]	; (80151b0 <tcp_kill_prio+0x98>)
 8015174:	681a      	ldr	r2, [r3, #0]
 8015176:	697b      	ldr	r3, [r7, #20]
 8015178:	6a1b      	ldr	r3, [r3, #32]
 801517a:	1ad3      	subs	r3, r2, r3
 801517c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801517e:	697b      	ldr	r3, [r7, #20]
 8015180:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	7d5b      	ldrb	r3, [r3, #21]
 8015186:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015188:	697b      	ldr	r3, [r7, #20]
 801518a:	68db      	ldr	r3, [r3, #12]
 801518c:	617b      	str	r3, [r7, #20]
 801518e:	697b      	ldr	r3, [r7, #20]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d1dc      	bne.n	801514e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d004      	beq.n	80151a4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801519a:	6938      	ldr	r0, [r7, #16]
 801519c:	f7ff f8f8 	bl	8014390 <tcp_abort>
 80151a0:	e000      	b.n	80151a4 <tcp_kill_prio+0x8c>
    return;
 80151a2:	bf00      	nop
  }
}
 80151a4:	3718      	adds	r7, #24
 80151a6:	46bd      	mov	sp, r7
 80151a8:	bd80      	pop	{r7, pc}
 80151aa:	bf00      	nop
 80151ac:	20016b90 	.word	0x20016b90
 80151b0:	20016b94 	.word	0x20016b94

080151b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b086      	sub	sp, #24
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	4603      	mov	r3, r0
 80151bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80151be:	79fb      	ldrb	r3, [r7, #7]
 80151c0:	2b08      	cmp	r3, #8
 80151c2:	d009      	beq.n	80151d8 <tcp_kill_state+0x24>
 80151c4:	79fb      	ldrb	r3, [r7, #7]
 80151c6:	2b09      	cmp	r3, #9
 80151c8:	d006      	beq.n	80151d8 <tcp_kill_state+0x24>
 80151ca:	4b1a      	ldr	r3, [pc, #104]	; (8015234 <tcp_kill_state+0x80>)
 80151cc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80151d0:	4919      	ldr	r1, [pc, #100]	; (8015238 <tcp_kill_state+0x84>)
 80151d2:	481a      	ldr	r0, [pc, #104]	; (801523c <tcp_kill_state+0x88>)
 80151d4:	f00a fb8a 	bl	801f8ec <iprintf>

  inactivity = 0;
 80151d8:	2300      	movs	r3, #0
 80151da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80151dc:	2300      	movs	r3, #0
 80151de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80151e0:	4b17      	ldr	r3, [pc, #92]	; (8015240 <tcp_kill_state+0x8c>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	617b      	str	r3, [r7, #20]
 80151e6:	e017      	b.n	8015218 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80151e8:	697b      	ldr	r3, [r7, #20]
 80151ea:	7d1b      	ldrb	r3, [r3, #20]
 80151ec:	79fa      	ldrb	r2, [r7, #7]
 80151ee:	429a      	cmp	r2, r3
 80151f0:	d10f      	bne.n	8015212 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80151f2:	4b14      	ldr	r3, [pc, #80]	; (8015244 <tcp_kill_state+0x90>)
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	6a1b      	ldr	r3, [r3, #32]
 80151fa:	1ad3      	subs	r3, r2, r3
 80151fc:	68fa      	ldr	r2, [r7, #12]
 80151fe:	429a      	cmp	r2, r3
 8015200:	d807      	bhi.n	8015212 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015202:	4b10      	ldr	r3, [pc, #64]	; (8015244 <tcp_kill_state+0x90>)
 8015204:	681a      	ldr	r2, [r3, #0]
 8015206:	697b      	ldr	r3, [r7, #20]
 8015208:	6a1b      	ldr	r3, [r3, #32]
 801520a:	1ad3      	subs	r3, r2, r3
 801520c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801520e:	697b      	ldr	r3, [r7, #20]
 8015210:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015212:	697b      	ldr	r3, [r7, #20]
 8015214:	68db      	ldr	r3, [r3, #12]
 8015216:	617b      	str	r3, [r7, #20]
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d1e4      	bne.n	80151e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801521e:	693b      	ldr	r3, [r7, #16]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d003      	beq.n	801522c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015224:	2100      	movs	r1, #0
 8015226:	6938      	ldr	r0, [r7, #16]
 8015228:	f7fe fff4 	bl	8014214 <tcp_abandon>
  }
}
 801522c:	bf00      	nop
 801522e:	3718      	adds	r7, #24
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}
 8015234:	08023038 	.word	0x08023038
 8015238:	080235c4 	.word	0x080235c4
 801523c:	0802307c 	.word	0x0802307c
 8015240:	20016b90 	.word	0x20016b90
 8015244:	20016b94 	.word	0x20016b94

08015248 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b084      	sub	sp, #16
 801524c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801524e:	2300      	movs	r3, #0
 8015250:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015252:	2300      	movs	r3, #0
 8015254:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015256:	4b12      	ldr	r3, [pc, #72]	; (80152a0 <tcp_kill_timewait+0x58>)
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	60fb      	str	r3, [r7, #12]
 801525c:	e012      	b.n	8015284 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801525e:	4b11      	ldr	r3, [pc, #68]	; (80152a4 <tcp_kill_timewait+0x5c>)
 8015260:	681a      	ldr	r2, [r3, #0]
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	6a1b      	ldr	r3, [r3, #32]
 8015266:	1ad3      	subs	r3, r2, r3
 8015268:	687a      	ldr	r2, [r7, #4]
 801526a:	429a      	cmp	r2, r3
 801526c:	d807      	bhi.n	801527e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801526e:	4b0d      	ldr	r3, [pc, #52]	; (80152a4 <tcp_kill_timewait+0x5c>)
 8015270:	681a      	ldr	r2, [r3, #0]
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	6a1b      	ldr	r3, [r3, #32]
 8015276:	1ad3      	subs	r3, r2, r3
 8015278:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	68db      	ldr	r3, [r3, #12]
 8015282:	60fb      	str	r3, [r7, #12]
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d1e9      	bne.n	801525e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801528a:	68bb      	ldr	r3, [r7, #8]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d002      	beq.n	8015296 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015290:	68b8      	ldr	r0, [r7, #8]
 8015292:	f7ff f87d 	bl	8014390 <tcp_abort>
  }
}
 8015296:	bf00      	nop
 8015298:	3710      	adds	r7, #16
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
 801529e:	bf00      	nop
 80152a0:	20016ba0 	.word	0x20016ba0
 80152a4:	20016b94 	.word	0x20016b94

080152a8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80152ae:	4b10      	ldr	r3, [pc, #64]	; (80152f0 <tcp_handle_closepend+0x48>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80152b4:	e014      	b.n	80152e0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	68db      	ldr	r3, [r3, #12]
 80152ba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	8b5b      	ldrh	r3, [r3, #26]
 80152c0:	f003 0308 	and.w	r3, r3, #8
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d009      	beq.n	80152dc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	8b5b      	ldrh	r3, [r3, #26]
 80152cc:	f023 0308 	bic.w	r3, r3, #8
 80152d0:	b29a      	uxth	r2, r3
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f7fe feaa 	bl	8014030 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d1e7      	bne.n	80152b6 <tcp_handle_closepend+0xe>
  }
}
 80152e6:	bf00      	nop
 80152e8:	bf00      	nop
 80152ea:	3708      	adds	r7, #8
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}
 80152f0:	20016b90 	.word	0x20016b90

080152f4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b084      	sub	sp, #16
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	4603      	mov	r3, r0
 80152fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80152fe:	2001      	movs	r0, #1
 8015300:	f7fd f9c8 	bl	8012694 <memp_malloc>
 8015304:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d126      	bne.n	801535a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801530c:	f7ff ffcc 	bl	80152a8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015310:	f7ff ff9a 	bl	8015248 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015314:	2001      	movs	r0, #1
 8015316:	f7fd f9bd 	bl	8012694 <memp_malloc>
 801531a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d11b      	bne.n	801535a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015322:	2009      	movs	r0, #9
 8015324:	f7ff ff46 	bl	80151b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015328:	2001      	movs	r0, #1
 801532a:	f7fd f9b3 	bl	8012694 <memp_malloc>
 801532e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d111      	bne.n	801535a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015336:	2008      	movs	r0, #8
 8015338:	f7ff ff3c 	bl	80151b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801533c:	2001      	movs	r0, #1
 801533e:	f7fd f9a9 	bl	8012694 <memp_malloc>
 8015342:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d107      	bne.n	801535a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801534a:	79fb      	ldrb	r3, [r7, #7]
 801534c:	4618      	mov	r0, r3
 801534e:	f7ff fee3 	bl	8015118 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015352:	2001      	movs	r0, #1
 8015354:	f7fd f99e 	bl	8012694 <memp_malloc>
 8015358:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d03f      	beq.n	80153e0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015360:	229c      	movs	r2, #156	; 0x9c
 8015362:	2100      	movs	r1, #0
 8015364:	68f8      	ldr	r0, [r7, #12]
 8015366:	f00a f9ff 	bl	801f768 <memset>
    pcb->prio = prio;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	79fa      	ldrb	r2, [r7, #7]
 801536e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8015376:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015380:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	22ff      	movs	r2, #255	; 0xff
 801538e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015396:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	2206      	movs	r2, #6
 801539c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	2206      	movs	r2, #6
 80153a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80153ac:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	2201      	movs	r2, #1
 80153b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80153b6:	4b0d      	ldr	r3, [pc, #52]	; (80153ec <tcp_alloc+0xf8>)
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80153be:	4b0c      	ldr	r3, [pc, #48]	; (80153f0 <tcp_alloc+0xfc>)
 80153c0:	781a      	ldrb	r2, [r3, #0]
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80153cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	4a08      	ldr	r2, [pc, #32]	; (80153f4 <tcp_alloc+0x100>)
 80153d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	4a07      	ldr	r2, [pc, #28]	; (80153f8 <tcp_alloc+0x104>)
 80153dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80153e0:	68fb      	ldr	r3, [r7, #12]
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	3710      	adds	r7, #16
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	20016b94 	.word	0x20016b94
 80153f0:	20005502 	.word	0x20005502
 80153f4:	080150ad 	.word	0x080150ad
 80153f8:	006ddd00 	.word	0x006ddd00

080153fc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b084      	sub	sp, #16
 8015400:	af00      	add	r7, sp, #0
 8015402:	4603      	mov	r3, r0
 8015404:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8015406:	2040      	movs	r0, #64	; 0x40
 8015408:	f7ff ff74 	bl	80152f4 <tcp_alloc>
 801540c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801540e:	68fb      	ldr	r3, [r7, #12]
}
 8015410:	4618      	mov	r0, r3
 8015412:	3710      	adds	r7, #16
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8015418:	b480      	push	{r7}
 801541a:	b083      	sub	sp, #12
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d002      	beq.n	801542e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	683a      	ldr	r2, [r7, #0]
 801542c:	611a      	str	r2, [r3, #16]
  }
}
 801542e:	bf00      	nop
 8015430:	370c      	adds	r7, #12
 8015432:	46bd      	mov	sp, r7
 8015434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015438:	4770      	bx	lr
	...

0801543c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b082      	sub	sp, #8
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d00e      	beq.n	801546a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	7d1b      	ldrb	r3, [r3, #20]
 8015450:	2b01      	cmp	r3, #1
 8015452:	d106      	bne.n	8015462 <tcp_recv+0x26>
 8015454:	4b07      	ldr	r3, [pc, #28]	; (8015474 <tcp_recv+0x38>)
 8015456:	f240 72df 	movw	r2, #2015	; 0x7df
 801545a:	4907      	ldr	r1, [pc, #28]	; (8015478 <tcp_recv+0x3c>)
 801545c:	4807      	ldr	r0, [pc, #28]	; (801547c <tcp_recv+0x40>)
 801545e:	f00a fa45 	bl	801f8ec <iprintf>
    pcb->recv = recv;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	683a      	ldr	r2, [r7, #0]
 8015466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801546a:	bf00      	nop
 801546c:	3708      	adds	r7, #8
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	08023038 	.word	0x08023038
 8015478:	080235d4 	.word	0x080235d4
 801547c:	0802307c 	.word	0x0802307c

08015480 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
 8015488:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d00e      	beq.n	80154ae <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	7d1b      	ldrb	r3, [r3, #20]
 8015494:	2b01      	cmp	r3, #1
 8015496:	d106      	bne.n	80154a6 <tcp_sent+0x26>
 8015498:	4b07      	ldr	r3, [pc, #28]	; (80154b8 <tcp_sent+0x38>)
 801549a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801549e:	4907      	ldr	r1, [pc, #28]	; (80154bc <tcp_sent+0x3c>)
 80154a0:	4807      	ldr	r0, [pc, #28]	; (80154c0 <tcp_sent+0x40>)
 80154a2:	f00a fa23 	bl	801f8ec <iprintf>
    pcb->sent = sent;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	683a      	ldr	r2, [r7, #0]
 80154aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80154ae:	bf00      	nop
 80154b0:	3708      	adds	r7, #8
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}
 80154b6:	bf00      	nop
 80154b8:	08023038 	.word	0x08023038
 80154bc:	080235fc 	.word	0x080235fc
 80154c0:	0802307c 	.word	0x0802307c

080154c4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b082      	sub	sp, #8
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
 80154cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d00e      	beq.n	80154f2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	7d1b      	ldrb	r3, [r3, #20]
 80154d8:	2b01      	cmp	r3, #1
 80154da:	d106      	bne.n	80154ea <tcp_err+0x26>
 80154dc:	4b07      	ldr	r3, [pc, #28]	; (80154fc <tcp_err+0x38>)
 80154de:	f640 020d 	movw	r2, #2061	; 0x80d
 80154e2:	4907      	ldr	r1, [pc, #28]	; (8015500 <tcp_err+0x3c>)
 80154e4:	4807      	ldr	r0, [pc, #28]	; (8015504 <tcp_err+0x40>)
 80154e6:	f00a fa01 	bl	801f8ec <iprintf>
    pcb->errf = err;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	683a      	ldr	r2, [r7, #0]
 80154ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80154f2:	bf00      	nop
 80154f4:	3708      	adds	r7, #8
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
 80154fa:	bf00      	nop
 80154fc:	08023038 	.word	0x08023038
 8015500:	08023624 	.word	0x08023624
 8015504:	0802307c 	.word	0x0802307c

08015508 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015508:	b480      	push	{r7}
 801550a:	b085      	sub	sp, #20
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d008      	beq.n	801552a <tcp_accept+0x22>
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	7d1b      	ldrb	r3, [r3, #20]
 801551c:	2b01      	cmp	r3, #1
 801551e:	d104      	bne.n	801552a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	683a      	ldr	r2, [r7, #0]
 8015528:	619a      	str	r2, [r3, #24]
  }
}
 801552a:	bf00      	nop
 801552c:	3714      	adds	r7, #20
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr
	...

08015538 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b084      	sub	sp, #16
 801553c:	af00      	add	r7, sp, #0
 801553e:	60f8      	str	r0, [r7, #12]
 8015540:	60b9      	str	r1, [r7, #8]
 8015542:	4613      	mov	r3, r2
 8015544:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d107      	bne.n	801555c <tcp_poll+0x24>
 801554c:	4b0e      	ldr	r3, [pc, #56]	; (8015588 <tcp_poll+0x50>)
 801554e:	f640 023d 	movw	r2, #2109	; 0x83d
 8015552:	490e      	ldr	r1, [pc, #56]	; (801558c <tcp_poll+0x54>)
 8015554:	480e      	ldr	r0, [pc, #56]	; (8015590 <tcp_poll+0x58>)
 8015556:	f00a f9c9 	bl	801f8ec <iprintf>
 801555a:	e011      	b.n	8015580 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	7d1b      	ldrb	r3, [r3, #20]
 8015560:	2b01      	cmp	r3, #1
 8015562:	d106      	bne.n	8015572 <tcp_poll+0x3a>
 8015564:	4b08      	ldr	r3, [pc, #32]	; (8015588 <tcp_poll+0x50>)
 8015566:	f640 023e 	movw	r2, #2110	; 0x83e
 801556a:	490a      	ldr	r1, [pc, #40]	; (8015594 <tcp_poll+0x5c>)
 801556c:	4808      	ldr	r0, [pc, #32]	; (8015590 <tcp_poll+0x58>)
 801556e:	f00a f9bd 	bl	801f8ec <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	68ba      	ldr	r2, [r7, #8]
 8015576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	79fa      	ldrb	r2, [r7, #7]
 801557e:	775a      	strb	r2, [r3, #29]
}
 8015580:	3710      	adds	r7, #16
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}
 8015586:	bf00      	nop
 8015588:	08023038 	.word	0x08023038
 801558c:	0802364c 	.word	0x0802364c
 8015590:	0802307c 	.word	0x0802307c
 8015594:	08023664 	.word	0x08023664

08015598 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b082      	sub	sp, #8
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d107      	bne.n	80155b6 <tcp_pcb_purge+0x1e>
 80155a6:	4b21      	ldr	r3, [pc, #132]	; (801562c <tcp_pcb_purge+0x94>)
 80155a8:	f640 0251 	movw	r2, #2129	; 0x851
 80155ac:	4920      	ldr	r1, [pc, #128]	; (8015630 <tcp_pcb_purge+0x98>)
 80155ae:	4821      	ldr	r0, [pc, #132]	; (8015634 <tcp_pcb_purge+0x9c>)
 80155b0:	f00a f99c 	bl	801f8ec <iprintf>
 80155b4:	e037      	b.n	8015626 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	7d1b      	ldrb	r3, [r3, #20]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d033      	beq.n	8015626 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80155c2:	2b0a      	cmp	r3, #10
 80155c4:	d02f      	beq.n	8015626 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80155ca:	2b01      	cmp	r3, #1
 80155cc:	d02b      	beq.n	8015626 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d007      	beq.n	80155e6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155da:	4618      	mov	r0, r3
 80155dc:	f7fd ff5c 	bl	8013498 <pbuf_free>
      pcb->refused_data = NULL;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2200      	movs	r2, #0
 80155e4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d002      	beq.n	80155f4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f000 f986 	bl	8015900 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80155fa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015600:	4618      	mov	r0, r3
 8015602:	f7ff fcf9 	bl	8014ff8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801560a:	4618      	mov	r0, r3
 801560c:	f7ff fcf4 	bl	8014ff8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	2200      	movs	r2, #0
 8015614:	66da      	str	r2, [r3, #108]	; 0x6c
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	2200      	movs	r2, #0
 8015622:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015626:	3708      	adds	r7, #8
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}
 801562c:	08023038 	.word	0x08023038
 8015630:	08023684 	.word	0x08023684
 8015634:	0802307c 	.word	0x0802307c

08015638 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b084      	sub	sp, #16
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d106      	bne.n	8015656 <tcp_pcb_remove+0x1e>
 8015648:	4b3e      	ldr	r3, [pc, #248]	; (8015744 <tcp_pcb_remove+0x10c>)
 801564a:	f640 0283 	movw	r2, #2179	; 0x883
 801564e:	493e      	ldr	r1, [pc, #248]	; (8015748 <tcp_pcb_remove+0x110>)
 8015650:	483e      	ldr	r0, [pc, #248]	; (801574c <tcp_pcb_remove+0x114>)
 8015652:	f00a f94b 	bl	801f8ec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d106      	bne.n	801566a <tcp_pcb_remove+0x32>
 801565c:	4b39      	ldr	r3, [pc, #228]	; (8015744 <tcp_pcb_remove+0x10c>)
 801565e:	f640 0284 	movw	r2, #2180	; 0x884
 8015662:	493b      	ldr	r1, [pc, #236]	; (8015750 <tcp_pcb_remove+0x118>)
 8015664:	4839      	ldr	r0, [pc, #228]	; (801574c <tcp_pcb_remove+0x114>)
 8015666:	f00a f941 	bl	801f8ec <iprintf>

  TCP_RMV(pcblist, pcb);
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	683a      	ldr	r2, [r7, #0]
 8015670:	429a      	cmp	r2, r3
 8015672:	d105      	bne.n	8015680 <tcp_pcb_remove+0x48>
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	68da      	ldr	r2, [r3, #12]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	601a      	str	r2, [r3, #0]
 801567e:	e013      	b.n	80156a8 <tcp_pcb_remove+0x70>
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	60fb      	str	r3, [r7, #12]
 8015686:	e00c      	b.n	80156a2 <tcp_pcb_remove+0x6a>
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	68db      	ldr	r3, [r3, #12]
 801568c:	683a      	ldr	r2, [r7, #0]
 801568e:	429a      	cmp	r2, r3
 8015690:	d104      	bne.n	801569c <tcp_pcb_remove+0x64>
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	68da      	ldr	r2, [r3, #12]
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	60da      	str	r2, [r3, #12]
 801569a:	e005      	b.n	80156a8 <tcp_pcb_remove+0x70>
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	68db      	ldr	r3, [r3, #12]
 80156a0:	60fb      	str	r3, [r7, #12]
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d1ef      	bne.n	8015688 <tcp_pcb_remove+0x50>
 80156a8:	683b      	ldr	r3, [r7, #0]
 80156aa:	2200      	movs	r2, #0
 80156ac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80156ae:	6838      	ldr	r0, [r7, #0]
 80156b0:	f7ff ff72 	bl	8015598 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	7d1b      	ldrb	r3, [r3, #20]
 80156b8:	2b0a      	cmp	r3, #10
 80156ba:	d013      	beq.n	80156e4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80156c0:	2b01      	cmp	r3, #1
 80156c2:	d00f      	beq.n	80156e4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	8b5b      	ldrh	r3, [r3, #26]
 80156c8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d009      	beq.n	80156e4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	8b5b      	ldrh	r3, [r3, #26]
 80156d4:	f043 0302 	orr.w	r3, r3, #2
 80156d8:	b29a      	uxth	r2, r3
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80156de:	6838      	ldr	r0, [r7, #0]
 80156e0:	f003 fbc2 	bl	8018e68 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	7d1b      	ldrb	r3, [r3, #20]
 80156e8:	2b01      	cmp	r3, #1
 80156ea:	d020      	beq.n	801572e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d006      	beq.n	8015702 <tcp_pcb_remove+0xca>
 80156f4:	4b13      	ldr	r3, [pc, #76]	; (8015744 <tcp_pcb_remove+0x10c>)
 80156f6:	f640 0293 	movw	r2, #2195	; 0x893
 80156fa:	4916      	ldr	r1, [pc, #88]	; (8015754 <tcp_pcb_remove+0x11c>)
 80156fc:	4813      	ldr	r0, [pc, #76]	; (801574c <tcp_pcb_remove+0x114>)
 80156fe:	f00a f8f5 	bl	801f8ec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015702:	683b      	ldr	r3, [r7, #0]
 8015704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015706:	2b00      	cmp	r3, #0
 8015708:	d006      	beq.n	8015718 <tcp_pcb_remove+0xe0>
 801570a:	4b0e      	ldr	r3, [pc, #56]	; (8015744 <tcp_pcb_remove+0x10c>)
 801570c:	f640 0294 	movw	r2, #2196	; 0x894
 8015710:	4911      	ldr	r1, [pc, #68]	; (8015758 <tcp_pcb_remove+0x120>)
 8015712:	480e      	ldr	r0, [pc, #56]	; (801574c <tcp_pcb_remove+0x114>)
 8015714:	f00a f8ea 	bl	801f8ec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801571c:	2b00      	cmp	r3, #0
 801571e:	d006      	beq.n	801572e <tcp_pcb_remove+0xf6>
 8015720:	4b08      	ldr	r3, [pc, #32]	; (8015744 <tcp_pcb_remove+0x10c>)
 8015722:	f640 0296 	movw	r2, #2198	; 0x896
 8015726:	490d      	ldr	r1, [pc, #52]	; (801575c <tcp_pcb_remove+0x124>)
 8015728:	4808      	ldr	r0, [pc, #32]	; (801574c <tcp_pcb_remove+0x114>)
 801572a:	f00a f8df 	bl	801f8ec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	2200      	movs	r2, #0
 8015732:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	2200      	movs	r2, #0
 8015738:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801573a:	bf00      	nop
 801573c:	3710      	adds	r7, #16
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}
 8015742:	bf00      	nop
 8015744:	08023038 	.word	0x08023038
 8015748:	080236a0 	.word	0x080236a0
 801574c:	0802307c 	.word	0x0802307c
 8015750:	080236bc 	.word	0x080236bc
 8015754:	080236dc 	.word	0x080236dc
 8015758:	080236f4 	.word	0x080236f4
 801575c:	08023710 	.word	0x08023710

08015760 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b082      	sub	sp, #8
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d106      	bne.n	801577c <tcp_next_iss+0x1c>
 801576e:	4b0a      	ldr	r3, [pc, #40]	; (8015798 <tcp_next_iss+0x38>)
 8015770:	f640 02af 	movw	r2, #2223	; 0x8af
 8015774:	4909      	ldr	r1, [pc, #36]	; (801579c <tcp_next_iss+0x3c>)
 8015776:	480a      	ldr	r0, [pc, #40]	; (80157a0 <tcp_next_iss+0x40>)
 8015778:	f00a f8b8 	bl	801f8ec <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801577c:	4b09      	ldr	r3, [pc, #36]	; (80157a4 <tcp_next_iss+0x44>)
 801577e:	681a      	ldr	r2, [r3, #0]
 8015780:	4b09      	ldr	r3, [pc, #36]	; (80157a8 <tcp_next_iss+0x48>)
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	4413      	add	r3, r2
 8015786:	4a07      	ldr	r2, [pc, #28]	; (80157a4 <tcp_next_iss+0x44>)
 8015788:	6013      	str	r3, [r2, #0]
  return iss;
 801578a:	4b06      	ldr	r3, [pc, #24]	; (80157a4 <tcp_next_iss+0x44>)
 801578c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801578e:	4618      	mov	r0, r3
 8015790:	3708      	adds	r7, #8
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}
 8015796:	bf00      	nop
 8015798:	08023038 	.word	0x08023038
 801579c:	08023728 	.word	0x08023728
 80157a0:	0802307c 	.word	0x0802307c
 80157a4:	20000340 	.word	0x20000340
 80157a8:	20016b94 	.word	0x20016b94

080157ac <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b086      	sub	sp, #24
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	4603      	mov	r3, r0
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	607a      	str	r2, [r7, #4]
 80157b8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d106      	bne.n	80157ce <tcp_eff_send_mss_netif+0x22>
 80157c0:	4b14      	ldr	r3, [pc, #80]	; (8015814 <tcp_eff_send_mss_netif+0x68>)
 80157c2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80157c6:	4914      	ldr	r1, [pc, #80]	; (8015818 <tcp_eff_send_mss_netif+0x6c>)
 80157c8:	4814      	ldr	r0, [pc, #80]	; (801581c <tcp_eff_send_mss_netif+0x70>)
 80157ca:	f00a f88f 	bl	801f8ec <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d101      	bne.n	80157d8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80157d4:	89fb      	ldrh	r3, [r7, #14]
 80157d6:	e019      	b.n	801580c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80157dc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80157de:	8afb      	ldrh	r3, [r7, #22]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d012      	beq.n	801580a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80157e4:	2328      	movs	r3, #40	; 0x28
 80157e6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80157e8:	8afa      	ldrh	r2, [r7, #22]
 80157ea:	8abb      	ldrh	r3, [r7, #20]
 80157ec:	429a      	cmp	r2, r3
 80157ee:	d904      	bls.n	80157fa <tcp_eff_send_mss_netif+0x4e>
 80157f0:	8afa      	ldrh	r2, [r7, #22]
 80157f2:	8abb      	ldrh	r3, [r7, #20]
 80157f4:	1ad3      	subs	r3, r2, r3
 80157f6:	b29b      	uxth	r3, r3
 80157f8:	e000      	b.n	80157fc <tcp_eff_send_mss_netif+0x50>
 80157fa:	2300      	movs	r3, #0
 80157fc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80157fe:	8a7a      	ldrh	r2, [r7, #18]
 8015800:	89fb      	ldrh	r3, [r7, #14]
 8015802:	4293      	cmp	r3, r2
 8015804:	bf28      	it	cs
 8015806:	4613      	movcs	r3, r2
 8015808:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801580a:	89fb      	ldrh	r3, [r7, #14]
}
 801580c:	4618      	mov	r0, r3
 801580e:	3718      	adds	r7, #24
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}
 8015814:	08023038 	.word	0x08023038
 8015818:	08023744 	.word	0x08023744
 801581c:	0802307c 	.word	0x0802307c

08015820 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b084      	sub	sp, #16
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
 8015828:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d119      	bne.n	8015868 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015834:	4b10      	ldr	r3, [pc, #64]	; (8015878 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015836:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801583a:	4910      	ldr	r1, [pc, #64]	; (801587c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801583c:	4810      	ldr	r0, [pc, #64]	; (8015880 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801583e:	f00a f855 	bl	801f8ec <iprintf>

  while (pcb != NULL) {
 8015842:	e011      	b.n	8015868 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	681a      	ldr	r2, [r3, #0]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	429a      	cmp	r2, r3
 801584e:	d108      	bne.n	8015862 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	68db      	ldr	r3, [r3, #12]
 8015854:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015856:	68f8      	ldr	r0, [r7, #12]
 8015858:	f7fe fd9a 	bl	8014390 <tcp_abort>
      pcb = next;
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	60fb      	str	r3, [r7, #12]
 8015860:	e002      	b.n	8015868 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	68db      	ldr	r3, [r3, #12]
 8015866:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d1ea      	bne.n	8015844 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801586e:	bf00      	nop
 8015870:	bf00      	nop
 8015872:	3710      	adds	r7, #16
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}
 8015878:	08023038 	.word	0x08023038
 801587c:	0802376c 	.word	0x0802376c
 8015880:	0802307c 	.word	0x0802307c

08015884 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b084      	sub	sp, #16
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d02a      	beq.n	80158ea <tcp_netif_ip_addr_changed+0x66>
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d026      	beq.n	80158ea <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801589c:	4b15      	ldr	r3, [pc, #84]	; (80158f4 <tcp_netif_ip_addr_changed+0x70>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	4619      	mov	r1, r3
 80158a2:	6878      	ldr	r0, [r7, #4]
 80158a4:	f7ff ffbc 	bl	8015820 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80158a8:	4b13      	ldr	r3, [pc, #76]	; (80158f8 <tcp_netif_ip_addr_changed+0x74>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	4619      	mov	r1, r3
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f7ff ffb6 	bl	8015820 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d017      	beq.n	80158ea <tcp_netif_ip_addr_changed+0x66>
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d013      	beq.n	80158ea <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80158c2:	4b0e      	ldr	r3, [pc, #56]	; (80158fc <tcp_netif_ip_addr_changed+0x78>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	60fb      	str	r3, [r7, #12]
 80158c8:	e00c      	b.n	80158e4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	681a      	ldr	r2, [r3, #0]
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	429a      	cmp	r2, r3
 80158d4:	d103      	bne.n	80158de <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	681a      	ldr	r2, [r3, #0]
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	68db      	ldr	r3, [r3, #12]
 80158e2:	60fb      	str	r3, [r7, #12]
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d1ef      	bne.n	80158ca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80158ea:	bf00      	nop
 80158ec:	3710      	adds	r7, #16
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	bf00      	nop
 80158f4:	20016b90 	.word	0x20016b90
 80158f8:	20016b9c 	.word	0x20016b9c
 80158fc:	20016b98 	.word	0x20016b98

08015900 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801590c:	2b00      	cmp	r3, #0
 801590e:	d007      	beq.n	8015920 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015914:	4618      	mov	r0, r3
 8015916:	f7ff fb6f 	bl	8014ff8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	2200      	movs	r2, #0
 801591e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015920:	bf00      	nop
 8015922:	3708      	adds	r7, #8
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}

08015928 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015928:	b590      	push	{r4, r7, lr}
 801592a:	b08d      	sub	sp, #52	; 0x34
 801592c:	af04      	add	r7, sp, #16
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d105      	bne.n	8015944 <tcp_input+0x1c>
 8015938:	4b9b      	ldr	r3, [pc, #620]	; (8015ba8 <tcp_input+0x280>)
 801593a:	2283      	movs	r2, #131	; 0x83
 801593c:	499b      	ldr	r1, [pc, #620]	; (8015bac <tcp_input+0x284>)
 801593e:	489c      	ldr	r0, [pc, #624]	; (8015bb0 <tcp_input+0x288>)
 8015940:	f009 ffd4 	bl	801f8ec <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	4a9a      	ldr	r2, [pc, #616]	; (8015bb4 <tcp_input+0x28c>)
 801594a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	895b      	ldrh	r3, [r3, #10]
 8015950:	2b13      	cmp	r3, #19
 8015952:	f240 83c4 	bls.w	80160de <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015956:	4b98      	ldr	r3, [pc, #608]	; (8015bb8 <tcp_input+0x290>)
 8015958:	695b      	ldr	r3, [r3, #20]
 801595a:	4a97      	ldr	r2, [pc, #604]	; (8015bb8 <tcp_input+0x290>)
 801595c:	6812      	ldr	r2, [r2, #0]
 801595e:	4611      	mov	r1, r2
 8015960:	4618      	mov	r0, r3
 8015962:	f008 fb65 	bl	801e030 <ip4_addr_isbroadcast_u32>
 8015966:	4603      	mov	r3, r0
 8015968:	2b00      	cmp	r3, #0
 801596a:	f040 83ba 	bne.w	80160e2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801596e:	4b92      	ldr	r3, [pc, #584]	; (8015bb8 <tcp_input+0x290>)
 8015970:	695b      	ldr	r3, [r3, #20]
 8015972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015976:	2be0      	cmp	r3, #224	; 0xe0
 8015978:	f000 83b3 	beq.w	80160e2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801597c:	4b8d      	ldr	r3, [pc, #564]	; (8015bb4 <tcp_input+0x28c>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	899b      	ldrh	r3, [r3, #12]
 8015982:	b29b      	uxth	r3, r3
 8015984:	4618      	mov	r0, r3
 8015986:	f7fb f9f9 	bl	8010d7c <lwip_htons>
 801598a:	4603      	mov	r3, r0
 801598c:	0b1b      	lsrs	r3, r3, #12
 801598e:	b29b      	uxth	r3, r3
 8015990:	b2db      	uxtb	r3, r3
 8015992:	009b      	lsls	r3, r3, #2
 8015994:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015996:	7cbb      	ldrb	r3, [r7, #18]
 8015998:	2b13      	cmp	r3, #19
 801599a:	f240 83a4 	bls.w	80160e6 <tcp_input+0x7be>
 801599e:	7cbb      	ldrb	r3, [r7, #18]
 80159a0:	b29a      	uxth	r2, r3
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	891b      	ldrh	r3, [r3, #8]
 80159a6:	429a      	cmp	r2, r3
 80159a8:	f200 839d 	bhi.w	80160e6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80159ac:	7cbb      	ldrb	r3, [r7, #18]
 80159ae:	b29b      	uxth	r3, r3
 80159b0:	3b14      	subs	r3, #20
 80159b2:	b29a      	uxth	r2, r3
 80159b4:	4b81      	ldr	r3, [pc, #516]	; (8015bbc <tcp_input+0x294>)
 80159b6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80159b8:	4b81      	ldr	r3, [pc, #516]	; (8015bc0 <tcp_input+0x298>)
 80159ba:	2200      	movs	r2, #0
 80159bc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	895a      	ldrh	r2, [r3, #10]
 80159c2:	7cbb      	ldrb	r3, [r7, #18]
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d309      	bcc.n	80159de <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80159ca:	4b7c      	ldr	r3, [pc, #496]	; (8015bbc <tcp_input+0x294>)
 80159cc:	881a      	ldrh	r2, [r3, #0]
 80159ce:	4b7d      	ldr	r3, [pc, #500]	; (8015bc4 <tcp_input+0x29c>)
 80159d0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80159d2:	7cbb      	ldrb	r3, [r7, #18]
 80159d4:	4619      	mov	r1, r3
 80159d6:	6878      	ldr	r0, [r7, #4]
 80159d8:	f7fd fcd8 	bl	801338c <pbuf_remove_header>
 80159dc:	e04e      	b.n	8015a7c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d105      	bne.n	80159f2 <tcp_input+0xca>
 80159e6:	4b70      	ldr	r3, [pc, #448]	; (8015ba8 <tcp_input+0x280>)
 80159e8:	22c2      	movs	r2, #194	; 0xc2
 80159ea:	4977      	ldr	r1, [pc, #476]	; (8015bc8 <tcp_input+0x2a0>)
 80159ec:	4870      	ldr	r0, [pc, #448]	; (8015bb0 <tcp_input+0x288>)
 80159ee:	f009 ff7d 	bl	801f8ec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80159f2:	2114      	movs	r1, #20
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f7fd fcc9 	bl	801338c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	895a      	ldrh	r2, [r3, #10]
 80159fe:	4b71      	ldr	r3, [pc, #452]	; (8015bc4 <tcp_input+0x29c>)
 8015a00:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015a02:	4b6e      	ldr	r3, [pc, #440]	; (8015bbc <tcp_input+0x294>)
 8015a04:	881a      	ldrh	r2, [r3, #0]
 8015a06:	4b6f      	ldr	r3, [pc, #444]	; (8015bc4 <tcp_input+0x29c>)
 8015a08:	881b      	ldrh	r3, [r3, #0]
 8015a0a:	1ad3      	subs	r3, r2, r3
 8015a0c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8015a0e:	4b6d      	ldr	r3, [pc, #436]	; (8015bc4 <tcp_input+0x29c>)
 8015a10:	881b      	ldrh	r3, [r3, #0]
 8015a12:	4619      	mov	r1, r3
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	f7fd fcb9 	bl	801338c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	895b      	ldrh	r3, [r3, #10]
 8015a20:	8a3a      	ldrh	r2, [r7, #16]
 8015a22:	429a      	cmp	r2, r3
 8015a24:	f200 8361 	bhi.w	80160ea <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	685b      	ldr	r3, [r3, #4]
 8015a2e:	4a64      	ldr	r2, [pc, #400]	; (8015bc0 <tcp_input+0x298>)
 8015a30:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	8a3a      	ldrh	r2, [r7, #16]
 8015a38:	4611      	mov	r1, r2
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f7fd fca6 	bl	801338c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	891a      	ldrh	r2, [r3, #8]
 8015a44:	8a3b      	ldrh	r3, [r7, #16]
 8015a46:	1ad3      	subs	r3, r2, r3
 8015a48:	b29a      	uxth	r2, r3
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	895b      	ldrh	r3, [r3, #10]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d005      	beq.n	8015a62 <tcp_input+0x13a>
 8015a56:	4b54      	ldr	r3, [pc, #336]	; (8015ba8 <tcp_input+0x280>)
 8015a58:	22df      	movs	r2, #223	; 0xdf
 8015a5a:	495c      	ldr	r1, [pc, #368]	; (8015bcc <tcp_input+0x2a4>)
 8015a5c:	4854      	ldr	r0, [pc, #336]	; (8015bb0 <tcp_input+0x288>)
 8015a5e:	f009 ff45 	bl	801f8ec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	891a      	ldrh	r2, [r3, #8]
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	891b      	ldrh	r3, [r3, #8]
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d005      	beq.n	8015a7c <tcp_input+0x154>
 8015a70:	4b4d      	ldr	r3, [pc, #308]	; (8015ba8 <tcp_input+0x280>)
 8015a72:	22e0      	movs	r2, #224	; 0xe0
 8015a74:	4956      	ldr	r1, [pc, #344]	; (8015bd0 <tcp_input+0x2a8>)
 8015a76:	484e      	ldr	r0, [pc, #312]	; (8015bb0 <tcp_input+0x288>)
 8015a78:	f009 ff38 	bl	801f8ec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015a7c:	4b4d      	ldr	r3, [pc, #308]	; (8015bb4 <tcp_input+0x28c>)
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	881b      	ldrh	r3, [r3, #0]
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	4a4b      	ldr	r2, [pc, #300]	; (8015bb4 <tcp_input+0x28c>)
 8015a86:	6814      	ldr	r4, [r2, #0]
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f7fb f977 	bl	8010d7c <lwip_htons>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8015a92:	4b48      	ldr	r3, [pc, #288]	; (8015bb4 <tcp_input+0x28c>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	885b      	ldrh	r3, [r3, #2]
 8015a98:	b29b      	uxth	r3, r3
 8015a9a:	4a46      	ldr	r2, [pc, #280]	; (8015bb4 <tcp_input+0x28c>)
 8015a9c:	6814      	ldr	r4, [r2, #0]
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f7fb f96c 	bl	8010d7c <lwip_htons>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015aa8:	4b42      	ldr	r3, [pc, #264]	; (8015bb4 <tcp_input+0x28c>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	685b      	ldr	r3, [r3, #4]
 8015aae:	4a41      	ldr	r2, [pc, #260]	; (8015bb4 <tcp_input+0x28c>)
 8015ab0:	6814      	ldr	r4, [r2, #0]
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7fb f977 	bl	8010da6 <lwip_htonl>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	6063      	str	r3, [r4, #4]
 8015abc:	6863      	ldr	r3, [r4, #4]
 8015abe:	4a45      	ldr	r2, [pc, #276]	; (8015bd4 <tcp_input+0x2ac>)
 8015ac0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8015ac2:	4b3c      	ldr	r3, [pc, #240]	; (8015bb4 <tcp_input+0x28c>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	689b      	ldr	r3, [r3, #8]
 8015ac8:	4a3a      	ldr	r2, [pc, #232]	; (8015bb4 <tcp_input+0x28c>)
 8015aca:	6814      	ldr	r4, [r2, #0]
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7fb f96a 	bl	8010da6 <lwip_htonl>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	60a3      	str	r3, [r4, #8]
 8015ad6:	68a3      	ldr	r3, [r4, #8]
 8015ad8:	4a3f      	ldr	r2, [pc, #252]	; (8015bd8 <tcp_input+0x2b0>)
 8015ada:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8015adc:	4b35      	ldr	r3, [pc, #212]	; (8015bb4 <tcp_input+0x28c>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	89db      	ldrh	r3, [r3, #14]
 8015ae2:	b29b      	uxth	r3, r3
 8015ae4:	4a33      	ldr	r2, [pc, #204]	; (8015bb4 <tcp_input+0x28c>)
 8015ae6:	6814      	ldr	r4, [r2, #0]
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f7fb f947 	bl	8010d7c <lwip_htons>
 8015aee:	4603      	mov	r3, r0
 8015af0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015af2:	4b30      	ldr	r3, [pc, #192]	; (8015bb4 <tcp_input+0x28c>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	899b      	ldrh	r3, [r3, #12]
 8015af8:	b29b      	uxth	r3, r3
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7fb f93e 	bl	8010d7c <lwip_htons>
 8015b00:	4603      	mov	r3, r0
 8015b02:	b2db      	uxtb	r3, r3
 8015b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b08:	b2da      	uxtb	r2, r3
 8015b0a:	4b34      	ldr	r3, [pc, #208]	; (8015bdc <tcp_input+0x2b4>)
 8015b0c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	891a      	ldrh	r2, [r3, #8]
 8015b12:	4b33      	ldr	r3, [pc, #204]	; (8015be0 <tcp_input+0x2b8>)
 8015b14:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015b16:	4b31      	ldr	r3, [pc, #196]	; (8015bdc <tcp_input+0x2b4>)
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	f003 0303 	and.w	r3, r3, #3
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d00c      	beq.n	8015b3c <tcp_input+0x214>
    tcplen++;
 8015b22:	4b2f      	ldr	r3, [pc, #188]	; (8015be0 <tcp_input+0x2b8>)
 8015b24:	881b      	ldrh	r3, [r3, #0]
 8015b26:	3301      	adds	r3, #1
 8015b28:	b29a      	uxth	r2, r3
 8015b2a:	4b2d      	ldr	r3, [pc, #180]	; (8015be0 <tcp_input+0x2b8>)
 8015b2c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	891a      	ldrh	r2, [r3, #8]
 8015b32:	4b2b      	ldr	r3, [pc, #172]	; (8015be0 <tcp_input+0x2b8>)
 8015b34:	881b      	ldrh	r3, [r3, #0]
 8015b36:	429a      	cmp	r2, r3
 8015b38:	f200 82d9 	bhi.w	80160ee <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b40:	4b28      	ldr	r3, [pc, #160]	; (8015be4 <tcp_input+0x2bc>)
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	61fb      	str	r3, [r7, #28]
 8015b46:	e09d      	b.n	8015c84 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015b48:	69fb      	ldr	r3, [r7, #28]
 8015b4a:	7d1b      	ldrb	r3, [r3, #20]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d105      	bne.n	8015b5c <tcp_input+0x234>
 8015b50:	4b15      	ldr	r3, [pc, #84]	; (8015ba8 <tcp_input+0x280>)
 8015b52:	22fb      	movs	r2, #251	; 0xfb
 8015b54:	4924      	ldr	r1, [pc, #144]	; (8015be8 <tcp_input+0x2c0>)
 8015b56:	4816      	ldr	r0, [pc, #88]	; (8015bb0 <tcp_input+0x288>)
 8015b58:	f009 fec8 	bl	801f8ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015b5c:	69fb      	ldr	r3, [r7, #28]
 8015b5e:	7d1b      	ldrb	r3, [r3, #20]
 8015b60:	2b0a      	cmp	r3, #10
 8015b62:	d105      	bne.n	8015b70 <tcp_input+0x248>
 8015b64:	4b10      	ldr	r3, [pc, #64]	; (8015ba8 <tcp_input+0x280>)
 8015b66:	22fc      	movs	r2, #252	; 0xfc
 8015b68:	4920      	ldr	r1, [pc, #128]	; (8015bec <tcp_input+0x2c4>)
 8015b6a:	4811      	ldr	r0, [pc, #68]	; (8015bb0 <tcp_input+0x288>)
 8015b6c:	f009 febe 	bl	801f8ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015b70:	69fb      	ldr	r3, [r7, #28]
 8015b72:	7d1b      	ldrb	r3, [r3, #20]
 8015b74:	2b01      	cmp	r3, #1
 8015b76:	d105      	bne.n	8015b84 <tcp_input+0x25c>
 8015b78:	4b0b      	ldr	r3, [pc, #44]	; (8015ba8 <tcp_input+0x280>)
 8015b7a:	22fd      	movs	r2, #253	; 0xfd
 8015b7c:	491c      	ldr	r1, [pc, #112]	; (8015bf0 <tcp_input+0x2c8>)
 8015b7e:	480c      	ldr	r0, [pc, #48]	; (8015bb0 <tcp_input+0x288>)
 8015b80:	f009 feb4 	bl	801f8ec <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015b84:	69fb      	ldr	r3, [r7, #28]
 8015b86:	7a1b      	ldrb	r3, [r3, #8]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d033      	beq.n	8015bf4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015b8c:	69fb      	ldr	r3, [r7, #28]
 8015b8e:	7a1a      	ldrb	r2, [r3, #8]
 8015b90:	4b09      	ldr	r3, [pc, #36]	; (8015bb8 <tcp_input+0x290>)
 8015b92:	685b      	ldr	r3, [r3, #4]
 8015b94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015b98:	3301      	adds	r3, #1
 8015b9a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015b9c:	429a      	cmp	r2, r3
 8015b9e:	d029      	beq.n	8015bf4 <tcp_input+0x2cc>
      prev = pcb;
 8015ba0:	69fb      	ldr	r3, [r7, #28]
 8015ba2:	61bb      	str	r3, [r7, #24]
      continue;
 8015ba4:	e06b      	b.n	8015c7e <tcp_input+0x356>
 8015ba6:	bf00      	nop
 8015ba8:	080237a0 	.word	0x080237a0
 8015bac:	080237d4 	.word	0x080237d4
 8015bb0:	080237ec 	.word	0x080237ec
 8015bb4:	20005514 	.word	0x20005514
 8015bb8:	200133b0 	.word	0x200133b0
 8015bbc:	20005518 	.word	0x20005518
 8015bc0:	2000551c 	.word	0x2000551c
 8015bc4:	2000551a 	.word	0x2000551a
 8015bc8:	08023814 	.word	0x08023814
 8015bcc:	08023824 	.word	0x08023824
 8015bd0:	08023830 	.word	0x08023830
 8015bd4:	20005524 	.word	0x20005524
 8015bd8:	20005528 	.word	0x20005528
 8015bdc:	20005530 	.word	0x20005530
 8015be0:	2000552e 	.word	0x2000552e
 8015be4:	20016b90 	.word	0x20016b90
 8015be8:	08023850 	.word	0x08023850
 8015bec:	08023878 	.word	0x08023878
 8015bf0:	080238a4 	.word	0x080238a4
    }

    if (pcb->remote_port == tcphdr->src &&
 8015bf4:	69fb      	ldr	r3, [r7, #28]
 8015bf6:	8b1a      	ldrh	r2, [r3, #24]
 8015bf8:	4b94      	ldr	r3, [pc, #592]	; (8015e4c <tcp_input+0x524>)
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	881b      	ldrh	r3, [r3, #0]
 8015bfe:	b29b      	uxth	r3, r3
 8015c00:	429a      	cmp	r2, r3
 8015c02:	d13a      	bne.n	8015c7a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015c04:	69fb      	ldr	r3, [r7, #28]
 8015c06:	8ada      	ldrh	r2, [r3, #22]
 8015c08:	4b90      	ldr	r3, [pc, #576]	; (8015e4c <tcp_input+0x524>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	885b      	ldrh	r3, [r3, #2]
 8015c0e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d132      	bne.n	8015c7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015c14:	69fb      	ldr	r3, [r7, #28]
 8015c16:	685a      	ldr	r2, [r3, #4]
 8015c18:	4b8d      	ldr	r3, [pc, #564]	; (8015e50 <tcp_input+0x528>)
 8015c1a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	d12c      	bne.n	8015c7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015c20:	69fb      	ldr	r3, [r7, #28]
 8015c22:	681a      	ldr	r2, [r3, #0]
 8015c24:	4b8a      	ldr	r3, [pc, #552]	; (8015e50 <tcp_input+0x528>)
 8015c26:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d126      	bne.n	8015c7a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8015c2c:	69fb      	ldr	r3, [r7, #28]
 8015c2e:	68db      	ldr	r3, [r3, #12]
 8015c30:	69fa      	ldr	r2, [r7, #28]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d106      	bne.n	8015c44 <tcp_input+0x31c>
 8015c36:	4b87      	ldr	r3, [pc, #540]	; (8015e54 <tcp_input+0x52c>)
 8015c38:	f240 120d 	movw	r2, #269	; 0x10d
 8015c3c:	4986      	ldr	r1, [pc, #536]	; (8015e58 <tcp_input+0x530>)
 8015c3e:	4887      	ldr	r0, [pc, #540]	; (8015e5c <tcp_input+0x534>)
 8015c40:	f009 fe54 	bl	801f8ec <iprintf>
      if (prev != NULL) {
 8015c44:	69bb      	ldr	r3, [r7, #24]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d00a      	beq.n	8015c60 <tcp_input+0x338>
        prev->next = pcb->next;
 8015c4a:	69fb      	ldr	r3, [r7, #28]
 8015c4c:	68da      	ldr	r2, [r3, #12]
 8015c4e:	69bb      	ldr	r3, [r7, #24]
 8015c50:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015c52:	4b83      	ldr	r3, [pc, #524]	; (8015e60 <tcp_input+0x538>)
 8015c54:	681a      	ldr	r2, [r3, #0]
 8015c56:	69fb      	ldr	r3, [r7, #28]
 8015c58:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8015c5a:	4a81      	ldr	r2, [pc, #516]	; (8015e60 <tcp_input+0x538>)
 8015c5c:	69fb      	ldr	r3, [r7, #28]
 8015c5e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015c60:	69fb      	ldr	r3, [r7, #28]
 8015c62:	68db      	ldr	r3, [r3, #12]
 8015c64:	69fa      	ldr	r2, [r7, #28]
 8015c66:	429a      	cmp	r2, r3
 8015c68:	d111      	bne.n	8015c8e <tcp_input+0x366>
 8015c6a:	4b7a      	ldr	r3, [pc, #488]	; (8015e54 <tcp_input+0x52c>)
 8015c6c:	f240 1215 	movw	r2, #277	; 0x115
 8015c70:	497c      	ldr	r1, [pc, #496]	; (8015e64 <tcp_input+0x53c>)
 8015c72:	487a      	ldr	r0, [pc, #488]	; (8015e5c <tcp_input+0x534>)
 8015c74:	f009 fe3a 	bl	801f8ec <iprintf>
      break;
 8015c78:	e009      	b.n	8015c8e <tcp_input+0x366>
    }
    prev = pcb;
 8015c7a:	69fb      	ldr	r3, [r7, #28]
 8015c7c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c7e:	69fb      	ldr	r3, [r7, #28]
 8015c80:	68db      	ldr	r3, [r3, #12]
 8015c82:	61fb      	str	r3, [r7, #28]
 8015c84:	69fb      	ldr	r3, [r7, #28]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	f47f af5e 	bne.w	8015b48 <tcp_input+0x220>
 8015c8c:	e000      	b.n	8015c90 <tcp_input+0x368>
      break;
 8015c8e:	bf00      	nop
  }

  if (pcb == NULL) {
 8015c90:	69fb      	ldr	r3, [r7, #28]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	f040 8095 	bne.w	8015dc2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c98:	4b73      	ldr	r3, [pc, #460]	; (8015e68 <tcp_input+0x540>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	61fb      	str	r3, [r7, #28]
 8015c9e:	e03f      	b.n	8015d20 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015ca0:	69fb      	ldr	r3, [r7, #28]
 8015ca2:	7d1b      	ldrb	r3, [r3, #20]
 8015ca4:	2b0a      	cmp	r3, #10
 8015ca6:	d006      	beq.n	8015cb6 <tcp_input+0x38e>
 8015ca8:	4b6a      	ldr	r3, [pc, #424]	; (8015e54 <tcp_input+0x52c>)
 8015caa:	f240 121f 	movw	r2, #287	; 0x11f
 8015cae:	496f      	ldr	r1, [pc, #444]	; (8015e6c <tcp_input+0x544>)
 8015cb0:	486a      	ldr	r0, [pc, #424]	; (8015e5c <tcp_input+0x534>)
 8015cb2:	f009 fe1b 	bl	801f8ec <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015cb6:	69fb      	ldr	r3, [r7, #28]
 8015cb8:	7a1b      	ldrb	r3, [r3, #8]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d009      	beq.n	8015cd2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	7a1a      	ldrb	r2, [r3, #8]
 8015cc2:	4b63      	ldr	r3, [pc, #396]	; (8015e50 <tcp_input+0x528>)
 8015cc4:	685b      	ldr	r3, [r3, #4]
 8015cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015cca:	3301      	adds	r3, #1
 8015ccc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	d122      	bne.n	8015d18 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015cd2:	69fb      	ldr	r3, [r7, #28]
 8015cd4:	8b1a      	ldrh	r2, [r3, #24]
 8015cd6:	4b5d      	ldr	r3, [pc, #372]	; (8015e4c <tcp_input+0x524>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	881b      	ldrh	r3, [r3, #0]
 8015cdc:	b29b      	uxth	r3, r3
 8015cde:	429a      	cmp	r2, r3
 8015ce0:	d11b      	bne.n	8015d1a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015ce2:	69fb      	ldr	r3, [r7, #28]
 8015ce4:	8ada      	ldrh	r2, [r3, #22]
 8015ce6:	4b59      	ldr	r3, [pc, #356]	; (8015e4c <tcp_input+0x524>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	885b      	ldrh	r3, [r3, #2]
 8015cec:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d113      	bne.n	8015d1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015cf2:	69fb      	ldr	r3, [r7, #28]
 8015cf4:	685a      	ldr	r2, [r3, #4]
 8015cf6:	4b56      	ldr	r3, [pc, #344]	; (8015e50 <tcp_input+0x528>)
 8015cf8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d10d      	bne.n	8015d1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015cfe:	69fb      	ldr	r3, [r7, #28]
 8015d00:	681a      	ldr	r2, [r3, #0]
 8015d02:	4b53      	ldr	r3, [pc, #332]	; (8015e50 <tcp_input+0x528>)
 8015d04:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d107      	bne.n	8015d1a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8015d0a:	69f8      	ldr	r0, [r7, #28]
 8015d0c:	f000 fb54 	bl	80163b8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8015d10:	6878      	ldr	r0, [r7, #4]
 8015d12:	f7fd fbc1 	bl	8013498 <pbuf_free>
        return;
 8015d16:	e1f0      	b.n	80160fa <tcp_input+0x7d2>
        continue;
 8015d18:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d1a:	69fb      	ldr	r3, [r7, #28]
 8015d1c:	68db      	ldr	r3, [r3, #12]
 8015d1e:	61fb      	str	r3, [r7, #28]
 8015d20:	69fb      	ldr	r3, [r7, #28]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d1bc      	bne.n	8015ca0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015d26:	2300      	movs	r3, #0
 8015d28:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015d2a:	4b51      	ldr	r3, [pc, #324]	; (8015e70 <tcp_input+0x548>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	617b      	str	r3, [r7, #20]
 8015d30:	e02a      	b.n	8015d88 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015d32:	697b      	ldr	r3, [r7, #20]
 8015d34:	7a1b      	ldrb	r3, [r3, #8]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d00c      	beq.n	8015d54 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015d3a:	697b      	ldr	r3, [r7, #20]
 8015d3c:	7a1a      	ldrb	r2, [r3, #8]
 8015d3e:	4b44      	ldr	r3, [pc, #272]	; (8015e50 <tcp_input+0x528>)
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d46:	3301      	adds	r3, #1
 8015d48:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d002      	beq.n	8015d54 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	61bb      	str	r3, [r7, #24]
        continue;
 8015d52:	e016      	b.n	8015d82 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015d54:	697b      	ldr	r3, [r7, #20]
 8015d56:	8ada      	ldrh	r2, [r3, #22]
 8015d58:	4b3c      	ldr	r3, [pc, #240]	; (8015e4c <tcp_input+0x524>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	885b      	ldrh	r3, [r3, #2]
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d10c      	bne.n	8015d7e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015d64:	697b      	ldr	r3, [r7, #20]
 8015d66:	681a      	ldr	r2, [r3, #0]
 8015d68:	4b39      	ldr	r3, [pc, #228]	; (8015e50 <tcp_input+0x528>)
 8015d6a:	695b      	ldr	r3, [r3, #20]
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	d00f      	beq.n	8015d90 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015d70:	697b      	ldr	r3, [r7, #20]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d00d      	beq.n	8015d92 <tcp_input+0x46a>
 8015d76:	697b      	ldr	r3, [r7, #20]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d009      	beq.n	8015d92 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015d82:	697b      	ldr	r3, [r7, #20]
 8015d84:	68db      	ldr	r3, [r3, #12]
 8015d86:	617b      	str	r3, [r7, #20]
 8015d88:	697b      	ldr	r3, [r7, #20]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d1d1      	bne.n	8015d32 <tcp_input+0x40a>
 8015d8e:	e000      	b.n	8015d92 <tcp_input+0x46a>
            break;
 8015d90:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8015d92:	697b      	ldr	r3, [r7, #20]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d014      	beq.n	8015dc2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015d98:	69bb      	ldr	r3, [r7, #24]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d00a      	beq.n	8015db4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	68da      	ldr	r2, [r3, #12]
 8015da2:	69bb      	ldr	r3, [r7, #24]
 8015da4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015da6:	4b32      	ldr	r3, [pc, #200]	; (8015e70 <tcp_input+0x548>)
 8015da8:	681a      	ldr	r2, [r3, #0]
 8015daa:	697b      	ldr	r3, [r7, #20]
 8015dac:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8015dae:	4a30      	ldr	r2, [pc, #192]	; (8015e70 <tcp_input+0x548>)
 8015db0:	697b      	ldr	r3, [r7, #20]
 8015db2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015db4:	6978      	ldr	r0, [r7, #20]
 8015db6:	f000 fa01 	bl	80161bc <tcp_listen_input>
      }
      pbuf_free(p);
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f7fd fb6c 	bl	8013498 <pbuf_free>
      return;
 8015dc0:	e19b      	b.n	80160fa <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8015dc2:	69fb      	ldr	r3, [r7, #28]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	f000 8160 	beq.w	801608a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015dca:	4b2a      	ldr	r3, [pc, #168]	; (8015e74 <tcp_input+0x54c>)
 8015dcc:	2200      	movs	r2, #0
 8015dce:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	891a      	ldrh	r2, [r3, #8]
 8015dd4:	4b27      	ldr	r3, [pc, #156]	; (8015e74 <tcp_input+0x54c>)
 8015dd6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015dd8:	4a26      	ldr	r2, [pc, #152]	; (8015e74 <tcp_input+0x54c>)
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015dde:	4b1b      	ldr	r3, [pc, #108]	; (8015e4c <tcp_input+0x524>)
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	4a24      	ldr	r2, [pc, #144]	; (8015e74 <tcp_input+0x54c>)
 8015de4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015de6:	4b24      	ldr	r3, [pc, #144]	; (8015e78 <tcp_input+0x550>)
 8015de8:	2200      	movs	r2, #0
 8015dea:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015dec:	4b23      	ldr	r3, [pc, #140]	; (8015e7c <tcp_input+0x554>)
 8015dee:	2200      	movs	r2, #0
 8015df0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8015df2:	4b23      	ldr	r3, [pc, #140]	; (8015e80 <tcp_input+0x558>)
 8015df4:	2200      	movs	r2, #0
 8015df6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015df8:	4b22      	ldr	r3, [pc, #136]	; (8015e84 <tcp_input+0x55c>)
 8015dfa:	781b      	ldrb	r3, [r3, #0]
 8015dfc:	f003 0308 	and.w	r3, r3, #8
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d006      	beq.n	8015e12 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	7b5b      	ldrb	r3, [r3, #13]
 8015e08:	f043 0301 	orr.w	r3, r3, #1
 8015e0c:	b2da      	uxtb	r2, r3
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8015e12:	69fb      	ldr	r3, [r7, #28]
 8015e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d038      	beq.n	8015e8c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015e1a:	69f8      	ldr	r0, [r7, #28]
 8015e1c:	f7ff f870 	bl	8014f00 <tcp_process_refused_data>
 8015e20:	4603      	mov	r3, r0
 8015e22:	f113 0f0d 	cmn.w	r3, #13
 8015e26:	d007      	beq.n	8015e38 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015e28:	69fb      	ldr	r3, [r7, #28]
 8015e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d02d      	beq.n	8015e8c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015e30:	4b15      	ldr	r3, [pc, #84]	; (8015e88 <tcp_input+0x560>)
 8015e32:	881b      	ldrh	r3, [r3, #0]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d029      	beq.n	8015e8c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015e38:	69fb      	ldr	r3, [r7, #28]
 8015e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	f040 8104 	bne.w	801604a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015e42:	69f8      	ldr	r0, [r7, #28]
 8015e44:	f003 fe16 	bl	8019a74 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015e48:	e0ff      	b.n	801604a <tcp_input+0x722>
 8015e4a:	bf00      	nop
 8015e4c:	20005514 	.word	0x20005514
 8015e50:	200133b0 	.word	0x200133b0
 8015e54:	080237a0 	.word	0x080237a0
 8015e58:	080238cc 	.word	0x080238cc
 8015e5c:	080237ec 	.word	0x080237ec
 8015e60:	20016b90 	.word	0x20016b90
 8015e64:	080238f8 	.word	0x080238f8
 8015e68:	20016ba0 	.word	0x20016ba0
 8015e6c:	08023924 	.word	0x08023924
 8015e70:	20016b98 	.word	0x20016b98
 8015e74:	20005504 	.word	0x20005504
 8015e78:	20005534 	.word	0x20005534
 8015e7c:	20005531 	.word	0x20005531
 8015e80:	2000552c 	.word	0x2000552c
 8015e84:	20005530 	.word	0x20005530
 8015e88:	2000552e 	.word	0x2000552e
      }
    }
    tcp_input_pcb = pcb;
 8015e8c:	4a9c      	ldr	r2, [pc, #624]	; (8016100 <tcp_input+0x7d8>)
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8015e92:	69f8      	ldr	r0, [r7, #28]
 8015e94:	f000 fb0a 	bl	80164ac <tcp_process>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015e9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015ea0:	f113 0f0d 	cmn.w	r3, #13
 8015ea4:	f000 80d3 	beq.w	801604e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8015ea8:	4b96      	ldr	r3, [pc, #600]	; (8016104 <tcp_input+0x7dc>)
 8015eaa:	781b      	ldrb	r3, [r3, #0]
 8015eac:	f003 0308 	and.w	r3, r3, #8
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d015      	beq.n	8015ee0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8015eb4:	69fb      	ldr	r3, [r7, #28]
 8015eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d008      	beq.n	8015ed0 <tcp_input+0x5a8>
 8015ebe:	69fb      	ldr	r3, [r7, #28]
 8015ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ec4:	69fa      	ldr	r2, [r7, #28]
 8015ec6:	6912      	ldr	r2, [r2, #16]
 8015ec8:	f06f 010d 	mvn.w	r1, #13
 8015ecc:	4610      	mov	r0, r2
 8015ece:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015ed0:	69f9      	ldr	r1, [r7, #28]
 8015ed2:	488d      	ldr	r0, [pc, #564]	; (8016108 <tcp_input+0x7e0>)
 8015ed4:	f7ff fbb0 	bl	8015638 <tcp_pcb_remove>
        tcp_free(pcb);
 8015ed8:	69f8      	ldr	r0, [r7, #28]
 8015eda:	f7fd ff15 	bl	8013d08 <tcp_free>
 8015ede:	e0c1      	b.n	8016064 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015ee4:	4b89      	ldr	r3, [pc, #548]	; (801610c <tcp_input+0x7e4>)
 8015ee6:	881b      	ldrh	r3, [r3, #0]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d01d      	beq.n	8015f28 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015eec:	4b87      	ldr	r3, [pc, #540]	; (801610c <tcp_input+0x7e4>)
 8015eee:	881b      	ldrh	r3, [r3, #0]
 8015ef0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8015ef2:	69fb      	ldr	r3, [r7, #28]
 8015ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d00a      	beq.n	8015f12 <tcp_input+0x5ea>
 8015efc:	69fb      	ldr	r3, [r7, #28]
 8015efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015f02:	69fa      	ldr	r2, [r7, #28]
 8015f04:	6910      	ldr	r0, [r2, #16]
 8015f06:	89fa      	ldrh	r2, [r7, #14]
 8015f08:	69f9      	ldr	r1, [r7, #28]
 8015f0a:	4798      	blx	r3
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	74fb      	strb	r3, [r7, #19]
 8015f10:	e001      	b.n	8015f16 <tcp_input+0x5ee>
 8015f12:	2300      	movs	r3, #0
 8015f14:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015f16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015f1a:	f113 0f0d 	cmn.w	r3, #13
 8015f1e:	f000 8098 	beq.w	8016052 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8015f22:	4b7a      	ldr	r3, [pc, #488]	; (801610c <tcp_input+0x7e4>)
 8015f24:	2200      	movs	r2, #0
 8015f26:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015f28:	69f8      	ldr	r0, [r7, #28]
 8015f2a:	f000 f907 	bl	801613c <tcp_input_delayed_close>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	f040 8090 	bne.w	8016056 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8015f36:	4b76      	ldr	r3, [pc, #472]	; (8016110 <tcp_input+0x7e8>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d041      	beq.n	8015fc2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015f3e:	69fb      	ldr	r3, [r7, #28]
 8015f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d006      	beq.n	8015f54 <tcp_input+0x62c>
 8015f46:	4b73      	ldr	r3, [pc, #460]	; (8016114 <tcp_input+0x7ec>)
 8015f48:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015f4c:	4972      	ldr	r1, [pc, #456]	; (8016118 <tcp_input+0x7f0>)
 8015f4e:	4873      	ldr	r0, [pc, #460]	; (801611c <tcp_input+0x7f4>)
 8015f50:	f009 fccc 	bl	801f8ec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015f54:	69fb      	ldr	r3, [r7, #28]
 8015f56:	8b5b      	ldrh	r3, [r3, #26]
 8015f58:	f003 0310 	and.w	r3, r3, #16
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d008      	beq.n	8015f72 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015f60:	4b6b      	ldr	r3, [pc, #428]	; (8016110 <tcp_input+0x7e8>)
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	4618      	mov	r0, r3
 8015f66:	f7fd fa97 	bl	8013498 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015f6a:	69f8      	ldr	r0, [r7, #28]
 8015f6c:	f7fe fa10 	bl	8014390 <tcp_abort>
            goto aborted;
 8015f70:	e078      	b.n	8016064 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8015f72:	69fb      	ldr	r3, [r7, #28]
 8015f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d00c      	beq.n	8015f96 <tcp_input+0x66e>
 8015f7c:	69fb      	ldr	r3, [r7, #28]
 8015f7e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015f82:	69fb      	ldr	r3, [r7, #28]
 8015f84:	6918      	ldr	r0, [r3, #16]
 8015f86:	4b62      	ldr	r3, [pc, #392]	; (8016110 <tcp_input+0x7e8>)
 8015f88:	681a      	ldr	r2, [r3, #0]
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	69f9      	ldr	r1, [r7, #28]
 8015f8e:	47a0      	blx	r4
 8015f90:	4603      	mov	r3, r0
 8015f92:	74fb      	strb	r3, [r7, #19]
 8015f94:	e008      	b.n	8015fa8 <tcp_input+0x680>
 8015f96:	4b5e      	ldr	r3, [pc, #376]	; (8016110 <tcp_input+0x7e8>)
 8015f98:	681a      	ldr	r2, [r3, #0]
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	69f9      	ldr	r1, [r7, #28]
 8015f9e:	2000      	movs	r0, #0
 8015fa0:	f7ff f884 	bl	80150ac <tcp_recv_null>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015fa8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015fac:	f113 0f0d 	cmn.w	r3, #13
 8015fb0:	d053      	beq.n	801605a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8015fb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d003      	beq.n	8015fc2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8015fba:	4b55      	ldr	r3, [pc, #340]	; (8016110 <tcp_input+0x7e8>)
 8015fbc:	681a      	ldr	r2, [r3, #0]
 8015fbe:	69fb      	ldr	r3, [r7, #28]
 8015fc0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8015fc2:	4b50      	ldr	r3, [pc, #320]	; (8016104 <tcp_input+0x7dc>)
 8015fc4:	781b      	ldrb	r3, [r3, #0]
 8015fc6:	f003 0320 	and.w	r3, r3, #32
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d030      	beq.n	8016030 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8015fce:	69fb      	ldr	r3, [r7, #28]
 8015fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d009      	beq.n	8015fea <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8015fd6:	69fb      	ldr	r3, [r7, #28]
 8015fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015fda:	7b5a      	ldrb	r2, [r3, #13]
 8015fdc:	69fb      	ldr	r3, [r7, #28]
 8015fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015fe0:	f042 0220 	orr.w	r2, r2, #32
 8015fe4:	b2d2      	uxtb	r2, r2
 8015fe6:	735a      	strb	r2, [r3, #13]
 8015fe8:	e022      	b.n	8016030 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015fea:	69fb      	ldr	r3, [r7, #28]
 8015fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015fee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015ff2:	d005      	beq.n	8016000 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8015ff4:	69fb      	ldr	r3, [r7, #28]
 8015ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ff8:	3301      	adds	r3, #1
 8015ffa:	b29a      	uxth	r2, r3
 8015ffc:	69fb      	ldr	r3, [r7, #28]
 8015ffe:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016000:	69fb      	ldr	r3, [r7, #28]
 8016002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016006:	2b00      	cmp	r3, #0
 8016008:	d00b      	beq.n	8016022 <tcp_input+0x6fa>
 801600a:	69fb      	ldr	r3, [r7, #28]
 801600c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016010:	69fb      	ldr	r3, [r7, #28]
 8016012:	6918      	ldr	r0, [r3, #16]
 8016014:	2300      	movs	r3, #0
 8016016:	2200      	movs	r2, #0
 8016018:	69f9      	ldr	r1, [r7, #28]
 801601a:	47a0      	blx	r4
 801601c:	4603      	mov	r3, r0
 801601e:	74fb      	strb	r3, [r7, #19]
 8016020:	e001      	b.n	8016026 <tcp_input+0x6fe>
 8016022:	2300      	movs	r3, #0
 8016024:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016026:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801602a:	f113 0f0d 	cmn.w	r3, #13
 801602e:	d016      	beq.n	801605e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016030:	4b33      	ldr	r3, [pc, #204]	; (8016100 <tcp_input+0x7d8>)
 8016032:	2200      	movs	r2, #0
 8016034:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016036:	69f8      	ldr	r0, [r7, #28]
 8016038:	f000 f880 	bl	801613c <tcp_input_delayed_close>
 801603c:	4603      	mov	r3, r0
 801603e:	2b00      	cmp	r3, #0
 8016040:	d10f      	bne.n	8016062 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016042:	69f8      	ldr	r0, [r7, #28]
 8016044:	f002 ff10 	bl	8018e68 <tcp_output>
 8016048:	e00c      	b.n	8016064 <tcp_input+0x73c>
        goto aborted;
 801604a:	bf00      	nop
 801604c:	e00a      	b.n	8016064 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801604e:	bf00      	nop
 8016050:	e008      	b.n	8016064 <tcp_input+0x73c>
              goto aborted;
 8016052:	bf00      	nop
 8016054:	e006      	b.n	8016064 <tcp_input+0x73c>
          goto aborted;
 8016056:	bf00      	nop
 8016058:	e004      	b.n	8016064 <tcp_input+0x73c>
            goto aborted;
 801605a:	bf00      	nop
 801605c:	e002      	b.n	8016064 <tcp_input+0x73c>
              goto aborted;
 801605e:	bf00      	nop
 8016060:	e000      	b.n	8016064 <tcp_input+0x73c>
          goto aborted;
 8016062:	bf00      	nop
    tcp_input_pcb = NULL;
 8016064:	4b26      	ldr	r3, [pc, #152]	; (8016100 <tcp_input+0x7d8>)
 8016066:	2200      	movs	r2, #0
 8016068:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801606a:	4b29      	ldr	r3, [pc, #164]	; (8016110 <tcp_input+0x7e8>)
 801606c:	2200      	movs	r2, #0
 801606e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016070:	4b2b      	ldr	r3, [pc, #172]	; (8016120 <tcp_input+0x7f8>)
 8016072:	685b      	ldr	r3, [r3, #4]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d03f      	beq.n	80160f8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8016078:	4b29      	ldr	r3, [pc, #164]	; (8016120 <tcp_input+0x7f8>)
 801607a:	685b      	ldr	r3, [r3, #4]
 801607c:	4618      	mov	r0, r3
 801607e:	f7fd fa0b 	bl	8013498 <pbuf_free>
      inseg.p = NULL;
 8016082:	4b27      	ldr	r3, [pc, #156]	; (8016120 <tcp_input+0x7f8>)
 8016084:	2200      	movs	r2, #0
 8016086:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016088:	e036      	b.n	80160f8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801608a:	4b26      	ldr	r3, [pc, #152]	; (8016124 <tcp_input+0x7fc>)
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	899b      	ldrh	r3, [r3, #12]
 8016090:	b29b      	uxth	r3, r3
 8016092:	4618      	mov	r0, r3
 8016094:	f7fa fe72 	bl	8010d7c <lwip_htons>
 8016098:	4603      	mov	r3, r0
 801609a:	b2db      	uxtb	r3, r3
 801609c:	f003 0304 	and.w	r3, r3, #4
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d118      	bne.n	80160d6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80160a4:	4b20      	ldr	r3, [pc, #128]	; (8016128 <tcp_input+0x800>)
 80160a6:	6819      	ldr	r1, [r3, #0]
 80160a8:	4b20      	ldr	r3, [pc, #128]	; (801612c <tcp_input+0x804>)
 80160aa:	881b      	ldrh	r3, [r3, #0]
 80160ac:	461a      	mov	r2, r3
 80160ae:	4b20      	ldr	r3, [pc, #128]	; (8016130 <tcp_input+0x808>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80160b4:	4b1b      	ldr	r3, [pc, #108]	; (8016124 <tcp_input+0x7fc>)
 80160b6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80160b8:	885b      	ldrh	r3, [r3, #2]
 80160ba:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80160bc:	4a19      	ldr	r2, [pc, #100]	; (8016124 <tcp_input+0x7fc>)
 80160be:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80160c0:	8812      	ldrh	r2, [r2, #0]
 80160c2:	b292      	uxth	r2, r2
 80160c4:	9202      	str	r2, [sp, #8]
 80160c6:	9301      	str	r3, [sp, #4]
 80160c8:	4b1a      	ldr	r3, [pc, #104]	; (8016134 <tcp_input+0x80c>)
 80160ca:	9300      	str	r3, [sp, #0]
 80160cc:	4b1a      	ldr	r3, [pc, #104]	; (8016138 <tcp_input+0x810>)
 80160ce:	4602      	mov	r2, r0
 80160d0:	2000      	movs	r0, #0
 80160d2:	f003 fc7d 	bl	80199d0 <tcp_rst>
    pbuf_free(p);
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f7fd f9de 	bl	8013498 <pbuf_free>
  return;
 80160dc:	e00c      	b.n	80160f8 <tcp_input+0x7d0>
    goto dropped;
 80160de:	bf00      	nop
 80160e0:	e006      	b.n	80160f0 <tcp_input+0x7c8>
    goto dropped;
 80160e2:	bf00      	nop
 80160e4:	e004      	b.n	80160f0 <tcp_input+0x7c8>
    goto dropped;
 80160e6:	bf00      	nop
 80160e8:	e002      	b.n	80160f0 <tcp_input+0x7c8>
      goto dropped;
 80160ea:	bf00      	nop
 80160ec:	e000      	b.n	80160f0 <tcp_input+0x7c8>
      goto dropped;
 80160ee:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f7fd f9d1 	bl	8013498 <pbuf_free>
 80160f6:	e000      	b.n	80160fa <tcp_input+0x7d2>
  return;
 80160f8:	bf00      	nop
}
 80160fa:	3724      	adds	r7, #36	; 0x24
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd90      	pop	{r4, r7, pc}
 8016100:	20016ba4 	.word	0x20016ba4
 8016104:	20005531 	.word	0x20005531
 8016108:	20016b90 	.word	0x20016b90
 801610c:	2000552c 	.word	0x2000552c
 8016110:	20005534 	.word	0x20005534
 8016114:	080237a0 	.word	0x080237a0
 8016118:	08023954 	.word	0x08023954
 801611c:	080237ec 	.word	0x080237ec
 8016120:	20005504 	.word	0x20005504
 8016124:	20005514 	.word	0x20005514
 8016128:	20005528 	.word	0x20005528
 801612c:	2000552e 	.word	0x2000552e
 8016130:	20005524 	.word	0x20005524
 8016134:	200133c0 	.word	0x200133c0
 8016138:	200133c4 	.word	0x200133c4

0801613c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b082      	sub	sp, #8
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d106      	bne.n	8016158 <tcp_input_delayed_close+0x1c>
 801614a:	4b17      	ldr	r3, [pc, #92]	; (80161a8 <tcp_input_delayed_close+0x6c>)
 801614c:	f240 225a 	movw	r2, #602	; 0x25a
 8016150:	4916      	ldr	r1, [pc, #88]	; (80161ac <tcp_input_delayed_close+0x70>)
 8016152:	4817      	ldr	r0, [pc, #92]	; (80161b0 <tcp_input_delayed_close+0x74>)
 8016154:	f009 fbca 	bl	801f8ec <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016158:	4b16      	ldr	r3, [pc, #88]	; (80161b4 <tcp_input_delayed_close+0x78>)
 801615a:	781b      	ldrb	r3, [r3, #0]
 801615c:	f003 0310 	and.w	r3, r3, #16
 8016160:	2b00      	cmp	r3, #0
 8016162:	d01c      	beq.n	801619e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	8b5b      	ldrh	r3, [r3, #26]
 8016168:	f003 0310 	and.w	r3, r3, #16
 801616c:	2b00      	cmp	r3, #0
 801616e:	d10d      	bne.n	801618c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016176:	2b00      	cmp	r3, #0
 8016178:	d008      	beq.n	801618c <tcp_input_delayed_close+0x50>
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016180:	687a      	ldr	r2, [r7, #4]
 8016182:	6912      	ldr	r2, [r2, #16]
 8016184:	f06f 010e 	mvn.w	r1, #14
 8016188:	4610      	mov	r0, r2
 801618a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801618c:	6879      	ldr	r1, [r7, #4]
 801618e:	480a      	ldr	r0, [pc, #40]	; (80161b8 <tcp_input_delayed_close+0x7c>)
 8016190:	f7ff fa52 	bl	8015638 <tcp_pcb_remove>
    tcp_free(pcb);
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f7fd fdb7 	bl	8013d08 <tcp_free>
    return 1;
 801619a:	2301      	movs	r3, #1
 801619c:	e000      	b.n	80161a0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801619e:	2300      	movs	r3, #0
}
 80161a0:	4618      	mov	r0, r3
 80161a2:	3708      	adds	r7, #8
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}
 80161a8:	080237a0 	.word	0x080237a0
 80161ac:	08023970 	.word	0x08023970
 80161b0:	080237ec 	.word	0x080237ec
 80161b4:	20005531 	.word	0x20005531
 80161b8:	20016b90 	.word	0x20016b90

080161bc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80161bc:	b590      	push	{r4, r7, lr}
 80161be:	b08b      	sub	sp, #44	; 0x2c
 80161c0:	af04      	add	r7, sp, #16
 80161c2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80161c4:	4b6f      	ldr	r3, [pc, #444]	; (8016384 <tcp_listen_input+0x1c8>)
 80161c6:	781b      	ldrb	r3, [r3, #0]
 80161c8:	f003 0304 	and.w	r3, r3, #4
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	f040 80d2 	bne.w	8016376 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d106      	bne.n	80161e6 <tcp_listen_input+0x2a>
 80161d8:	4b6b      	ldr	r3, [pc, #428]	; (8016388 <tcp_listen_input+0x1cc>)
 80161da:	f240 2281 	movw	r2, #641	; 0x281
 80161de:	496b      	ldr	r1, [pc, #428]	; (801638c <tcp_listen_input+0x1d0>)
 80161e0:	486b      	ldr	r0, [pc, #428]	; (8016390 <tcp_listen_input+0x1d4>)
 80161e2:	f009 fb83 	bl	801f8ec <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80161e6:	4b67      	ldr	r3, [pc, #412]	; (8016384 <tcp_listen_input+0x1c8>)
 80161e8:	781b      	ldrb	r3, [r3, #0]
 80161ea:	f003 0310 	and.w	r3, r3, #16
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d019      	beq.n	8016226 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161f2:	4b68      	ldr	r3, [pc, #416]	; (8016394 <tcp_listen_input+0x1d8>)
 80161f4:	6819      	ldr	r1, [r3, #0]
 80161f6:	4b68      	ldr	r3, [pc, #416]	; (8016398 <tcp_listen_input+0x1dc>)
 80161f8:	881b      	ldrh	r3, [r3, #0]
 80161fa:	461a      	mov	r2, r3
 80161fc:	4b67      	ldr	r3, [pc, #412]	; (801639c <tcp_listen_input+0x1e0>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016202:	4b67      	ldr	r3, [pc, #412]	; (80163a0 <tcp_listen_input+0x1e4>)
 8016204:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016206:	885b      	ldrh	r3, [r3, #2]
 8016208:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801620a:	4a65      	ldr	r2, [pc, #404]	; (80163a0 <tcp_listen_input+0x1e4>)
 801620c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801620e:	8812      	ldrh	r2, [r2, #0]
 8016210:	b292      	uxth	r2, r2
 8016212:	9202      	str	r2, [sp, #8]
 8016214:	9301      	str	r3, [sp, #4]
 8016216:	4b63      	ldr	r3, [pc, #396]	; (80163a4 <tcp_listen_input+0x1e8>)
 8016218:	9300      	str	r3, [sp, #0]
 801621a:	4b63      	ldr	r3, [pc, #396]	; (80163a8 <tcp_listen_input+0x1ec>)
 801621c:	4602      	mov	r2, r0
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f003 fbd6 	bl	80199d0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016224:	e0a9      	b.n	801637a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016226:	4b57      	ldr	r3, [pc, #348]	; (8016384 <tcp_listen_input+0x1c8>)
 8016228:	781b      	ldrb	r3, [r3, #0]
 801622a:	f003 0302 	and.w	r3, r3, #2
 801622e:	2b00      	cmp	r3, #0
 8016230:	f000 80a3 	beq.w	801637a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	7d5b      	ldrb	r3, [r3, #21]
 8016238:	4618      	mov	r0, r3
 801623a:	f7ff f85b 	bl	80152f4 <tcp_alloc>
 801623e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016240:	697b      	ldr	r3, [r7, #20]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d111      	bne.n	801626a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	699b      	ldr	r3, [r3, #24]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d00a      	beq.n	8016264 <tcp_listen_input+0xa8>
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	699b      	ldr	r3, [r3, #24]
 8016252:	687a      	ldr	r2, [r7, #4]
 8016254:	6910      	ldr	r0, [r2, #16]
 8016256:	f04f 32ff 	mov.w	r2, #4294967295
 801625a:	2100      	movs	r1, #0
 801625c:	4798      	blx	r3
 801625e:	4603      	mov	r3, r0
 8016260:	73bb      	strb	r3, [r7, #14]
      return;
 8016262:	e08b      	b.n	801637c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016264:	23f0      	movs	r3, #240	; 0xf0
 8016266:	73bb      	strb	r3, [r7, #14]
      return;
 8016268:	e088      	b.n	801637c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801626a:	4b50      	ldr	r3, [pc, #320]	; (80163ac <tcp_listen_input+0x1f0>)
 801626c:	695a      	ldr	r2, [r3, #20]
 801626e:	697b      	ldr	r3, [r7, #20]
 8016270:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016272:	4b4e      	ldr	r3, [pc, #312]	; (80163ac <tcp_listen_input+0x1f0>)
 8016274:	691a      	ldr	r2, [r3, #16]
 8016276:	697b      	ldr	r3, [r7, #20]
 8016278:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	8ada      	ldrh	r2, [r3, #22]
 801627e:	697b      	ldr	r3, [r7, #20]
 8016280:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016282:	4b47      	ldr	r3, [pc, #284]	; (80163a0 <tcp_listen_input+0x1e4>)
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	881b      	ldrh	r3, [r3, #0]
 8016288:	b29a      	uxth	r2, r3
 801628a:	697b      	ldr	r3, [r7, #20]
 801628c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801628e:	697b      	ldr	r3, [r7, #20]
 8016290:	2203      	movs	r2, #3
 8016292:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016294:	4b41      	ldr	r3, [pc, #260]	; (801639c <tcp_listen_input+0x1e0>)
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	1c5a      	adds	r2, r3, #1
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801629e:	697b      	ldr	r3, [r7, #20]
 80162a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80162a2:	697b      	ldr	r3, [r7, #20]
 80162a4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80162a6:	6978      	ldr	r0, [r7, #20]
 80162a8:	f7ff fa5a 	bl	8015760 <tcp_next_iss>
 80162ac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80162ae:	697b      	ldr	r3, [r7, #20]
 80162b0:	693a      	ldr	r2, [r7, #16]
 80162b2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80162b4:	697b      	ldr	r3, [r7, #20]
 80162b6:	693a      	ldr	r2, [r7, #16]
 80162b8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80162ba:	697b      	ldr	r3, [r7, #20]
 80162bc:	693a      	ldr	r2, [r7, #16]
 80162be:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80162c0:	697b      	ldr	r3, [r7, #20]
 80162c2:	693a      	ldr	r2, [r7, #16]
 80162c4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80162c6:	4b35      	ldr	r3, [pc, #212]	; (801639c <tcp_listen_input+0x1e0>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	1e5a      	subs	r2, r3, #1
 80162cc:	697b      	ldr	r3, [r7, #20]
 80162ce:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	691a      	ldr	r2, [r3, #16]
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80162d8:	697b      	ldr	r3, [r7, #20]
 80162da:	687a      	ldr	r2, [r7, #4]
 80162dc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	7a5b      	ldrb	r3, [r3, #9]
 80162e2:	f003 030c 	and.w	r3, r3, #12
 80162e6:	b2da      	uxtb	r2, r3
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	7a1a      	ldrb	r2, [r3, #8]
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80162f4:	4b2e      	ldr	r3, [pc, #184]	; (80163b0 <tcp_listen_input+0x1f4>)
 80162f6:	681a      	ldr	r2, [r3, #0]
 80162f8:	697b      	ldr	r3, [r7, #20]
 80162fa:	60da      	str	r2, [r3, #12]
 80162fc:	4a2c      	ldr	r2, [pc, #176]	; (80163b0 <tcp_listen_input+0x1f4>)
 80162fe:	697b      	ldr	r3, [r7, #20]
 8016300:	6013      	str	r3, [r2, #0]
 8016302:	f003 fd27 	bl	8019d54 <tcp_timer_needed>
 8016306:	4b2b      	ldr	r3, [pc, #172]	; (80163b4 <tcp_listen_input+0x1f8>)
 8016308:	2201      	movs	r2, #1
 801630a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801630c:	6978      	ldr	r0, [r7, #20]
 801630e:	f001 fd8d 	bl	8017e2c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016312:	4b23      	ldr	r3, [pc, #140]	; (80163a0 <tcp_listen_input+0x1e4>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	89db      	ldrh	r3, [r3, #14]
 8016318:	b29a      	uxth	r2, r3
 801631a:	697b      	ldr	r3, [r7, #20]
 801631c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016320:	697b      	ldr	r3, [r7, #20]
 8016322:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016326:	697b      	ldr	r3, [r7, #20]
 8016328:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801632c:	697b      	ldr	r3, [r7, #20]
 801632e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	3304      	adds	r3, #4
 8016334:	4618      	mov	r0, r3
 8016336:	f007 fbc7 	bl	801dac8 <ip4_route>
 801633a:	4601      	mov	r1, r0
 801633c:	697b      	ldr	r3, [r7, #20]
 801633e:	3304      	adds	r3, #4
 8016340:	461a      	mov	r2, r3
 8016342:	4620      	mov	r0, r4
 8016344:	f7ff fa32 	bl	80157ac <tcp_eff_send_mss_netif>
 8016348:	4603      	mov	r3, r0
 801634a:	461a      	mov	r2, r3
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016350:	2112      	movs	r1, #18
 8016352:	6978      	ldr	r0, [r7, #20]
 8016354:	f002 fc9a 	bl	8018c8c <tcp_enqueue_flags>
 8016358:	4603      	mov	r3, r0
 801635a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801635c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d004      	beq.n	801636e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016364:	2100      	movs	r1, #0
 8016366:	6978      	ldr	r0, [r7, #20]
 8016368:	f7fd ff54 	bl	8014214 <tcp_abandon>
      return;
 801636c:	e006      	b.n	801637c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801636e:	6978      	ldr	r0, [r7, #20]
 8016370:	f002 fd7a 	bl	8018e68 <tcp_output>
  return;
 8016374:	e001      	b.n	801637a <tcp_listen_input+0x1be>
    return;
 8016376:	bf00      	nop
 8016378:	e000      	b.n	801637c <tcp_listen_input+0x1c0>
  return;
 801637a:	bf00      	nop
}
 801637c:	371c      	adds	r7, #28
 801637e:	46bd      	mov	sp, r7
 8016380:	bd90      	pop	{r4, r7, pc}
 8016382:	bf00      	nop
 8016384:	20005530 	.word	0x20005530
 8016388:	080237a0 	.word	0x080237a0
 801638c:	08023998 	.word	0x08023998
 8016390:	080237ec 	.word	0x080237ec
 8016394:	20005528 	.word	0x20005528
 8016398:	2000552e 	.word	0x2000552e
 801639c:	20005524 	.word	0x20005524
 80163a0:	20005514 	.word	0x20005514
 80163a4:	200133c0 	.word	0x200133c0
 80163a8:	200133c4 	.word	0x200133c4
 80163ac:	200133b0 	.word	0x200133b0
 80163b0:	20016b90 	.word	0x20016b90
 80163b4:	20016b8c 	.word	0x20016b8c

080163b8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b086      	sub	sp, #24
 80163bc:	af04      	add	r7, sp, #16
 80163be:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80163c0:	4b2f      	ldr	r3, [pc, #188]	; (8016480 <tcp_timewait_input+0xc8>)
 80163c2:	781b      	ldrb	r3, [r3, #0]
 80163c4:	f003 0304 	and.w	r3, r3, #4
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d153      	bne.n	8016474 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d106      	bne.n	80163e0 <tcp_timewait_input+0x28>
 80163d2:	4b2c      	ldr	r3, [pc, #176]	; (8016484 <tcp_timewait_input+0xcc>)
 80163d4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80163d8:	492b      	ldr	r1, [pc, #172]	; (8016488 <tcp_timewait_input+0xd0>)
 80163da:	482c      	ldr	r0, [pc, #176]	; (801648c <tcp_timewait_input+0xd4>)
 80163dc:	f009 fa86 	bl	801f8ec <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80163e0:	4b27      	ldr	r3, [pc, #156]	; (8016480 <tcp_timewait_input+0xc8>)
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	f003 0302 	and.w	r3, r3, #2
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d02a      	beq.n	8016442 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80163ec:	4b28      	ldr	r3, [pc, #160]	; (8016490 <tcp_timewait_input+0xd8>)
 80163ee:	681a      	ldr	r2, [r3, #0]
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163f4:	1ad3      	subs	r3, r2, r3
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	db2d      	blt.n	8016456 <tcp_timewait_input+0x9e>
 80163fa:	4b25      	ldr	r3, [pc, #148]	; (8016490 <tcp_timewait_input+0xd8>)
 80163fc:	681a      	ldr	r2, [r3, #0]
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016402:	6879      	ldr	r1, [r7, #4]
 8016404:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016406:	440b      	add	r3, r1
 8016408:	1ad3      	subs	r3, r2, r3
 801640a:	2b00      	cmp	r3, #0
 801640c:	dc23      	bgt.n	8016456 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801640e:	4b21      	ldr	r3, [pc, #132]	; (8016494 <tcp_timewait_input+0xdc>)
 8016410:	6819      	ldr	r1, [r3, #0]
 8016412:	4b21      	ldr	r3, [pc, #132]	; (8016498 <tcp_timewait_input+0xe0>)
 8016414:	881b      	ldrh	r3, [r3, #0]
 8016416:	461a      	mov	r2, r3
 8016418:	4b1d      	ldr	r3, [pc, #116]	; (8016490 <tcp_timewait_input+0xd8>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801641e:	4b1f      	ldr	r3, [pc, #124]	; (801649c <tcp_timewait_input+0xe4>)
 8016420:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016422:	885b      	ldrh	r3, [r3, #2]
 8016424:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016426:	4a1d      	ldr	r2, [pc, #116]	; (801649c <tcp_timewait_input+0xe4>)
 8016428:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801642a:	8812      	ldrh	r2, [r2, #0]
 801642c:	b292      	uxth	r2, r2
 801642e:	9202      	str	r2, [sp, #8]
 8016430:	9301      	str	r3, [sp, #4]
 8016432:	4b1b      	ldr	r3, [pc, #108]	; (80164a0 <tcp_timewait_input+0xe8>)
 8016434:	9300      	str	r3, [sp, #0]
 8016436:	4b1b      	ldr	r3, [pc, #108]	; (80164a4 <tcp_timewait_input+0xec>)
 8016438:	4602      	mov	r2, r0
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f003 fac8 	bl	80199d0 <tcp_rst>
      return;
 8016440:	e01b      	b.n	801647a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016442:	4b0f      	ldr	r3, [pc, #60]	; (8016480 <tcp_timewait_input+0xc8>)
 8016444:	781b      	ldrb	r3, [r3, #0]
 8016446:	f003 0301 	and.w	r3, r3, #1
 801644a:	2b00      	cmp	r3, #0
 801644c:	d003      	beq.n	8016456 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801644e:	4b16      	ldr	r3, [pc, #88]	; (80164a8 <tcp_timewait_input+0xf0>)
 8016450:	681a      	ldr	r2, [r3, #0]
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016456:	4b10      	ldr	r3, [pc, #64]	; (8016498 <tcp_timewait_input+0xe0>)
 8016458:	881b      	ldrh	r3, [r3, #0]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d00c      	beq.n	8016478 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	8b5b      	ldrh	r3, [r3, #26]
 8016462:	f043 0302 	orr.w	r3, r3, #2
 8016466:	b29a      	uxth	r2, r3
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f002 fcfb 	bl	8018e68 <tcp_output>
  }
  return;
 8016472:	e001      	b.n	8016478 <tcp_timewait_input+0xc0>
    return;
 8016474:	bf00      	nop
 8016476:	e000      	b.n	801647a <tcp_timewait_input+0xc2>
  return;
 8016478:	bf00      	nop
}
 801647a:	3708      	adds	r7, #8
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}
 8016480:	20005530 	.word	0x20005530
 8016484:	080237a0 	.word	0x080237a0
 8016488:	080239b8 	.word	0x080239b8
 801648c:	080237ec 	.word	0x080237ec
 8016490:	20005524 	.word	0x20005524
 8016494:	20005528 	.word	0x20005528
 8016498:	2000552e 	.word	0x2000552e
 801649c:	20005514 	.word	0x20005514
 80164a0:	200133c0 	.word	0x200133c0
 80164a4:	200133c4 	.word	0x200133c4
 80164a8:	20016b94 	.word	0x20016b94

080164ac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80164ac:	b590      	push	{r4, r7, lr}
 80164ae:	b08d      	sub	sp, #52	; 0x34
 80164b0:	af04      	add	r7, sp, #16
 80164b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80164b4:	2300      	movs	r3, #0
 80164b6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80164b8:	2300      	movs	r3, #0
 80164ba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d106      	bne.n	80164d0 <tcp_process+0x24>
 80164c2:	4ba5      	ldr	r3, [pc, #660]	; (8016758 <tcp_process+0x2ac>)
 80164c4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80164c8:	49a4      	ldr	r1, [pc, #656]	; (801675c <tcp_process+0x2b0>)
 80164ca:	48a5      	ldr	r0, [pc, #660]	; (8016760 <tcp_process+0x2b4>)
 80164cc:	f009 fa0e 	bl	801f8ec <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80164d0:	4ba4      	ldr	r3, [pc, #656]	; (8016764 <tcp_process+0x2b8>)
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	f003 0304 	and.w	r3, r3, #4
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d04e      	beq.n	801657a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	7d1b      	ldrb	r3, [r3, #20]
 80164e0:	2b02      	cmp	r3, #2
 80164e2:	d108      	bne.n	80164f6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80164e8:	4b9f      	ldr	r3, [pc, #636]	; (8016768 <tcp_process+0x2bc>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	429a      	cmp	r2, r3
 80164ee:	d123      	bne.n	8016538 <tcp_process+0x8c>
        acceptable = 1;
 80164f0:	2301      	movs	r3, #1
 80164f2:	76fb      	strb	r3, [r7, #27]
 80164f4:	e020      	b.n	8016538 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80164fa:	4b9c      	ldr	r3, [pc, #624]	; (801676c <tcp_process+0x2c0>)
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	429a      	cmp	r2, r3
 8016500:	d102      	bne.n	8016508 <tcp_process+0x5c>
        acceptable = 1;
 8016502:	2301      	movs	r3, #1
 8016504:	76fb      	strb	r3, [r7, #27]
 8016506:	e017      	b.n	8016538 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016508:	4b98      	ldr	r3, [pc, #608]	; (801676c <tcp_process+0x2c0>)
 801650a:	681a      	ldr	r2, [r3, #0]
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016510:	1ad3      	subs	r3, r2, r3
 8016512:	2b00      	cmp	r3, #0
 8016514:	db10      	blt.n	8016538 <tcp_process+0x8c>
 8016516:	4b95      	ldr	r3, [pc, #596]	; (801676c <tcp_process+0x2c0>)
 8016518:	681a      	ldr	r2, [r3, #0]
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801651e:	6879      	ldr	r1, [r7, #4]
 8016520:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016522:	440b      	add	r3, r1
 8016524:	1ad3      	subs	r3, r2, r3
 8016526:	2b00      	cmp	r3, #0
 8016528:	dc06      	bgt.n	8016538 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	8b5b      	ldrh	r3, [r3, #26]
 801652e:	f043 0302 	orr.w	r3, r3, #2
 8016532:	b29a      	uxth	r2, r3
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016538:	7efb      	ldrb	r3, [r7, #27]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d01b      	beq.n	8016576 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	7d1b      	ldrb	r3, [r3, #20]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d106      	bne.n	8016554 <tcp_process+0xa8>
 8016546:	4b84      	ldr	r3, [pc, #528]	; (8016758 <tcp_process+0x2ac>)
 8016548:	f44f 724e 	mov.w	r2, #824	; 0x338
 801654c:	4988      	ldr	r1, [pc, #544]	; (8016770 <tcp_process+0x2c4>)
 801654e:	4884      	ldr	r0, [pc, #528]	; (8016760 <tcp_process+0x2b4>)
 8016550:	f009 f9cc 	bl	801f8ec <iprintf>
      recv_flags |= TF_RESET;
 8016554:	4b87      	ldr	r3, [pc, #540]	; (8016774 <tcp_process+0x2c8>)
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	f043 0308 	orr.w	r3, r3, #8
 801655c:	b2da      	uxtb	r2, r3
 801655e:	4b85      	ldr	r3, [pc, #532]	; (8016774 <tcp_process+0x2c8>)
 8016560:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	8b5b      	ldrh	r3, [r3, #26]
 8016566:	f023 0301 	bic.w	r3, r3, #1
 801656a:	b29a      	uxth	r2, r3
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016570:	f06f 030d 	mvn.w	r3, #13
 8016574:	e37a      	b.n	8016c6c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016576:	2300      	movs	r3, #0
 8016578:	e378      	b.n	8016c6c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801657a:	4b7a      	ldr	r3, [pc, #488]	; (8016764 <tcp_process+0x2b8>)
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	f003 0302 	and.w	r3, r3, #2
 8016582:	2b00      	cmp	r3, #0
 8016584:	d010      	beq.n	80165a8 <tcp_process+0xfc>
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	7d1b      	ldrb	r3, [r3, #20]
 801658a:	2b02      	cmp	r3, #2
 801658c:	d00c      	beq.n	80165a8 <tcp_process+0xfc>
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	7d1b      	ldrb	r3, [r3, #20]
 8016592:	2b03      	cmp	r3, #3
 8016594:	d008      	beq.n	80165a8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	8b5b      	ldrh	r3, [r3, #26]
 801659a:	f043 0302 	orr.w	r3, r3, #2
 801659e:	b29a      	uxth	r2, r3
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80165a4:	2300      	movs	r3, #0
 80165a6:	e361      	b.n	8016c6c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	8b5b      	ldrh	r3, [r3, #26]
 80165ac:	f003 0310 	and.w	r3, r3, #16
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d103      	bne.n	80165bc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80165b4:	4b70      	ldr	r3, [pc, #448]	; (8016778 <tcp_process+0x2cc>)
 80165b6:	681a      	ldr	r2, [r3, #0]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2200      	movs	r2, #0
 80165c0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2200      	movs	r2, #0
 80165c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80165cc:	6878      	ldr	r0, [r7, #4]
 80165ce:	f001 fc2d 	bl	8017e2c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	7d1b      	ldrb	r3, [r3, #20]
 80165d6:	3b02      	subs	r3, #2
 80165d8:	2b07      	cmp	r3, #7
 80165da:	f200 8337 	bhi.w	8016c4c <tcp_process+0x7a0>
 80165de:	a201      	add	r2, pc, #4	; (adr r2, 80165e4 <tcp_process+0x138>)
 80165e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165e4:	08016605 	.word	0x08016605
 80165e8:	08016835 	.word	0x08016835
 80165ec:	080169ad 	.word	0x080169ad
 80165f0:	080169d7 	.word	0x080169d7
 80165f4:	08016afb 	.word	0x08016afb
 80165f8:	080169ad 	.word	0x080169ad
 80165fc:	08016b87 	.word	0x08016b87
 8016600:	08016c17 	.word	0x08016c17
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016604:	4b57      	ldr	r3, [pc, #348]	; (8016764 <tcp_process+0x2b8>)
 8016606:	781b      	ldrb	r3, [r3, #0]
 8016608:	f003 0310 	and.w	r3, r3, #16
 801660c:	2b00      	cmp	r3, #0
 801660e:	f000 80e4 	beq.w	80167da <tcp_process+0x32e>
 8016612:	4b54      	ldr	r3, [pc, #336]	; (8016764 <tcp_process+0x2b8>)
 8016614:	781b      	ldrb	r3, [r3, #0]
 8016616:	f003 0302 	and.w	r3, r3, #2
 801661a:	2b00      	cmp	r3, #0
 801661c:	f000 80dd 	beq.w	80167da <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016624:	1c5a      	adds	r2, r3, #1
 8016626:	4b50      	ldr	r3, [pc, #320]	; (8016768 <tcp_process+0x2bc>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	429a      	cmp	r2, r3
 801662c:	f040 80d5 	bne.w	80167da <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016630:	4b4e      	ldr	r3, [pc, #312]	; (801676c <tcp_process+0x2c0>)
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	1c5a      	adds	r2, r3, #1
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8016642:	4b49      	ldr	r3, [pc, #292]	; (8016768 <tcp_process+0x2bc>)
 8016644:	681a      	ldr	r2, [r3, #0]
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801664a:	4b4c      	ldr	r3, [pc, #304]	; (801677c <tcp_process+0x2d0>)
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	89db      	ldrh	r3, [r3, #14]
 8016650:	b29a      	uxth	r2, r3
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016664:	4b41      	ldr	r3, [pc, #260]	; (801676c <tcp_process+0x2c0>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	1e5a      	subs	r2, r3, #1
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	2204      	movs	r2, #4
 8016672:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	3304      	adds	r3, #4
 801667c:	4618      	mov	r0, r3
 801667e:	f007 fa23 	bl	801dac8 <ip4_route>
 8016682:	4601      	mov	r1, r0
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	3304      	adds	r3, #4
 8016688:	461a      	mov	r2, r3
 801668a:	4620      	mov	r0, r4
 801668c:	f7ff f88e 	bl	80157ac <tcp_eff_send_mss_netif>
 8016690:	4603      	mov	r3, r0
 8016692:	461a      	mov	r2, r3
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801669c:	009a      	lsls	r2, r3, #2
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166a2:	005b      	lsls	r3, r3, #1
 80166a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80166a8:	428b      	cmp	r3, r1
 80166aa:	bf38      	it	cc
 80166ac:	460b      	movcc	r3, r1
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d204      	bcs.n	80166bc <tcp_process+0x210>
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166b6:	009b      	lsls	r3, r3, #2
 80166b8:	b29b      	uxth	r3, r3
 80166ba:	e00d      	b.n	80166d8 <tcp_process+0x22c>
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166c0:	005b      	lsls	r3, r3, #1
 80166c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80166c6:	4293      	cmp	r3, r2
 80166c8:	d904      	bls.n	80166d4 <tcp_process+0x228>
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166ce:	005b      	lsls	r3, r3, #1
 80166d0:	b29b      	uxth	r3, r3
 80166d2:	e001      	b.n	80166d8 <tcp_process+0x22c>
 80166d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80166d8:	687a      	ldr	r2, [r7, #4]
 80166da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d106      	bne.n	80166f6 <tcp_process+0x24a>
 80166e8:	4b1b      	ldr	r3, [pc, #108]	; (8016758 <tcp_process+0x2ac>)
 80166ea:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80166ee:	4924      	ldr	r1, [pc, #144]	; (8016780 <tcp_process+0x2d4>)
 80166f0:	481b      	ldr	r0, [pc, #108]	; (8016760 <tcp_process+0x2b4>)
 80166f2:	f009 f8fb 	bl	801f8ec <iprintf>
        --pcb->snd_queuelen;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166fc:	3b01      	subs	r3, #1
 80166fe:	b29a      	uxth	r2, r3
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801670a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801670c:	69fb      	ldr	r3, [r7, #28]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d111      	bne.n	8016736 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016716:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016718:	69fb      	ldr	r3, [r7, #28]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d106      	bne.n	801672c <tcp_process+0x280>
 801671e:	4b0e      	ldr	r3, [pc, #56]	; (8016758 <tcp_process+0x2ac>)
 8016720:	f44f 725d 	mov.w	r2, #884	; 0x374
 8016724:	4917      	ldr	r1, [pc, #92]	; (8016784 <tcp_process+0x2d8>)
 8016726:	480e      	ldr	r0, [pc, #56]	; (8016760 <tcp_process+0x2b4>)
 8016728:	f009 f8e0 	bl	801f8ec <iprintf>
          pcb->unsent = rseg->next;
 801672c:	69fb      	ldr	r3, [r7, #28]
 801672e:	681a      	ldr	r2, [r3, #0]
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	66da      	str	r2, [r3, #108]	; 0x6c
 8016734:	e003      	b.n	801673e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8016736:	69fb      	ldr	r3, [r7, #28]
 8016738:	681a      	ldr	r2, [r3, #0]
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801673e:	69f8      	ldr	r0, [r7, #28]
 8016740:	f7fe fc6f 	bl	8015022 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016748:	2b00      	cmp	r3, #0
 801674a:	d11d      	bne.n	8016788 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016752:	861a      	strh	r2, [r3, #48]	; 0x30
 8016754:	e01f      	b.n	8016796 <tcp_process+0x2ea>
 8016756:	bf00      	nop
 8016758:	080237a0 	.word	0x080237a0
 801675c:	080239d8 	.word	0x080239d8
 8016760:	080237ec 	.word	0x080237ec
 8016764:	20005530 	.word	0x20005530
 8016768:	20005528 	.word	0x20005528
 801676c:	20005524 	.word	0x20005524
 8016770:	080239f4 	.word	0x080239f4
 8016774:	20005531 	.word	0x20005531
 8016778:	20016b94 	.word	0x20016b94
 801677c:	20005514 	.word	0x20005514
 8016780:	08023a14 	.word	0x08023a14
 8016784:	08023a2c 	.word	0x08023a2c
        } else {
          pcb->rtime = 0;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	2200      	movs	r2, #0
 801678c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	2200      	movs	r2, #0
 8016792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801679c:	2b00      	cmp	r3, #0
 801679e:	d00a      	beq.n	80167b6 <tcp_process+0x30a>
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80167a6:	687a      	ldr	r2, [r7, #4]
 80167a8:	6910      	ldr	r0, [r2, #16]
 80167aa:	2200      	movs	r2, #0
 80167ac:	6879      	ldr	r1, [r7, #4]
 80167ae:	4798      	blx	r3
 80167b0:	4603      	mov	r3, r0
 80167b2:	76bb      	strb	r3, [r7, #26]
 80167b4:	e001      	b.n	80167ba <tcp_process+0x30e>
 80167b6:	2300      	movs	r3, #0
 80167b8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80167ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80167be:	f113 0f0d 	cmn.w	r3, #13
 80167c2:	d102      	bne.n	80167ca <tcp_process+0x31e>
          return ERR_ABRT;
 80167c4:	f06f 030c 	mvn.w	r3, #12
 80167c8:	e250      	b.n	8016c6c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	8b5b      	ldrh	r3, [r3, #26]
 80167ce:	f043 0302 	orr.w	r3, r3, #2
 80167d2:	b29a      	uxth	r2, r3
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80167d8:	e23a      	b.n	8016c50 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80167da:	4b9d      	ldr	r3, [pc, #628]	; (8016a50 <tcp_process+0x5a4>)
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	f003 0310 	and.w	r3, r3, #16
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	f000 8234 	beq.w	8016c50 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80167e8:	4b9a      	ldr	r3, [pc, #616]	; (8016a54 <tcp_process+0x5a8>)
 80167ea:	6819      	ldr	r1, [r3, #0]
 80167ec:	4b9a      	ldr	r3, [pc, #616]	; (8016a58 <tcp_process+0x5ac>)
 80167ee:	881b      	ldrh	r3, [r3, #0]
 80167f0:	461a      	mov	r2, r3
 80167f2:	4b9a      	ldr	r3, [pc, #616]	; (8016a5c <tcp_process+0x5b0>)
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80167f8:	4b99      	ldr	r3, [pc, #612]	; (8016a60 <tcp_process+0x5b4>)
 80167fa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80167fc:	885b      	ldrh	r3, [r3, #2]
 80167fe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016800:	4a97      	ldr	r2, [pc, #604]	; (8016a60 <tcp_process+0x5b4>)
 8016802:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016804:	8812      	ldrh	r2, [r2, #0]
 8016806:	b292      	uxth	r2, r2
 8016808:	9202      	str	r2, [sp, #8]
 801680a:	9301      	str	r3, [sp, #4]
 801680c:	4b95      	ldr	r3, [pc, #596]	; (8016a64 <tcp_process+0x5b8>)
 801680e:	9300      	str	r3, [sp, #0]
 8016810:	4b95      	ldr	r3, [pc, #596]	; (8016a68 <tcp_process+0x5bc>)
 8016812:	4602      	mov	r2, r0
 8016814:	6878      	ldr	r0, [r7, #4]
 8016816:	f003 f8db 	bl	80199d0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016820:	2b05      	cmp	r3, #5
 8016822:	f200 8215 	bhi.w	8016c50 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	2200      	movs	r2, #0
 801682a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	f002 fea5 	bl	801957c <tcp_rexmit_rto>
      break;
 8016832:	e20d      	b.n	8016c50 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016834:	4b86      	ldr	r3, [pc, #536]	; (8016a50 <tcp_process+0x5a4>)
 8016836:	781b      	ldrb	r3, [r3, #0]
 8016838:	f003 0310 	and.w	r3, r3, #16
 801683c:	2b00      	cmp	r3, #0
 801683e:	f000 80a1 	beq.w	8016984 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016842:	4b84      	ldr	r3, [pc, #528]	; (8016a54 <tcp_process+0x5a8>)
 8016844:	681a      	ldr	r2, [r3, #0]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801684a:	1ad3      	subs	r3, r2, r3
 801684c:	3b01      	subs	r3, #1
 801684e:	2b00      	cmp	r3, #0
 8016850:	db7e      	blt.n	8016950 <tcp_process+0x4a4>
 8016852:	4b80      	ldr	r3, [pc, #512]	; (8016a54 <tcp_process+0x5a8>)
 8016854:	681a      	ldr	r2, [r3, #0]
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801685a:	1ad3      	subs	r3, r2, r3
 801685c:	2b00      	cmp	r3, #0
 801685e:	dc77      	bgt.n	8016950 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2204      	movs	r2, #4
 8016864:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801686a:	2b00      	cmp	r3, #0
 801686c:	d102      	bne.n	8016874 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801686e:	23fa      	movs	r3, #250	; 0xfa
 8016870:	76bb      	strb	r3, [r7, #26]
 8016872:	e01d      	b.n	80168b0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016878:	699b      	ldr	r3, [r3, #24]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d106      	bne.n	801688c <tcp_process+0x3e0>
 801687e:	4b7b      	ldr	r3, [pc, #492]	; (8016a6c <tcp_process+0x5c0>)
 8016880:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8016884:	497a      	ldr	r1, [pc, #488]	; (8016a70 <tcp_process+0x5c4>)
 8016886:	487b      	ldr	r0, [pc, #492]	; (8016a74 <tcp_process+0x5c8>)
 8016888:	f009 f830 	bl	801f8ec <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016890:	699b      	ldr	r3, [r3, #24]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d00a      	beq.n	80168ac <tcp_process+0x400>
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801689a:	699b      	ldr	r3, [r3, #24]
 801689c:	687a      	ldr	r2, [r7, #4]
 801689e:	6910      	ldr	r0, [r2, #16]
 80168a0:	2200      	movs	r2, #0
 80168a2:	6879      	ldr	r1, [r7, #4]
 80168a4:	4798      	blx	r3
 80168a6:	4603      	mov	r3, r0
 80168a8:	76bb      	strb	r3, [r7, #26]
 80168aa:	e001      	b.n	80168b0 <tcp_process+0x404>
 80168ac:	23f0      	movs	r3, #240	; 0xf0
 80168ae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80168b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d00a      	beq.n	80168ce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80168b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80168bc:	f113 0f0d 	cmn.w	r3, #13
 80168c0:	d002      	beq.n	80168c8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f7fd fd64 	bl	8014390 <tcp_abort>
            }
            return ERR_ABRT;
 80168c8:	f06f 030c 	mvn.w	r3, #12
 80168cc:	e1ce      	b.n	8016c6c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	f000 fae0 	bl	8016e94 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80168d4:	4b68      	ldr	r3, [pc, #416]	; (8016a78 <tcp_process+0x5cc>)
 80168d6:	881b      	ldrh	r3, [r3, #0]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d005      	beq.n	80168e8 <tcp_process+0x43c>
            recv_acked--;
 80168dc:	4b66      	ldr	r3, [pc, #408]	; (8016a78 <tcp_process+0x5cc>)
 80168de:	881b      	ldrh	r3, [r3, #0]
 80168e0:	3b01      	subs	r3, #1
 80168e2:	b29a      	uxth	r2, r3
 80168e4:	4b64      	ldr	r3, [pc, #400]	; (8016a78 <tcp_process+0x5cc>)
 80168e6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168ec:	009a      	lsls	r2, r3, #2
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168f2:	005b      	lsls	r3, r3, #1
 80168f4:	f241 111c 	movw	r1, #4380	; 0x111c
 80168f8:	428b      	cmp	r3, r1
 80168fa:	bf38      	it	cc
 80168fc:	460b      	movcc	r3, r1
 80168fe:	429a      	cmp	r2, r3
 8016900:	d204      	bcs.n	801690c <tcp_process+0x460>
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016906:	009b      	lsls	r3, r3, #2
 8016908:	b29b      	uxth	r3, r3
 801690a:	e00d      	b.n	8016928 <tcp_process+0x47c>
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016910:	005b      	lsls	r3, r3, #1
 8016912:	f241 121c 	movw	r2, #4380	; 0x111c
 8016916:	4293      	cmp	r3, r2
 8016918:	d904      	bls.n	8016924 <tcp_process+0x478>
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801691e:	005b      	lsls	r3, r3, #1
 8016920:	b29b      	uxth	r3, r3
 8016922:	e001      	b.n	8016928 <tcp_process+0x47c>
 8016924:	f241 131c 	movw	r3, #4380	; 0x111c
 8016928:	687a      	ldr	r2, [r7, #4]
 801692a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801692e:	4b53      	ldr	r3, [pc, #332]	; (8016a7c <tcp_process+0x5d0>)
 8016930:	781b      	ldrb	r3, [r3, #0]
 8016932:	f003 0320 	and.w	r3, r3, #32
 8016936:	2b00      	cmp	r3, #0
 8016938:	d037      	beq.n	80169aa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	8b5b      	ldrh	r3, [r3, #26]
 801693e:	f043 0302 	orr.w	r3, r3, #2
 8016942:	b29a      	uxth	r2, r3
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2207      	movs	r2, #7
 801694c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801694e:	e02c      	b.n	80169aa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016950:	4b40      	ldr	r3, [pc, #256]	; (8016a54 <tcp_process+0x5a8>)
 8016952:	6819      	ldr	r1, [r3, #0]
 8016954:	4b40      	ldr	r3, [pc, #256]	; (8016a58 <tcp_process+0x5ac>)
 8016956:	881b      	ldrh	r3, [r3, #0]
 8016958:	461a      	mov	r2, r3
 801695a:	4b40      	ldr	r3, [pc, #256]	; (8016a5c <tcp_process+0x5b0>)
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016960:	4b3f      	ldr	r3, [pc, #252]	; (8016a60 <tcp_process+0x5b4>)
 8016962:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016964:	885b      	ldrh	r3, [r3, #2]
 8016966:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016968:	4a3d      	ldr	r2, [pc, #244]	; (8016a60 <tcp_process+0x5b4>)
 801696a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801696c:	8812      	ldrh	r2, [r2, #0]
 801696e:	b292      	uxth	r2, r2
 8016970:	9202      	str	r2, [sp, #8]
 8016972:	9301      	str	r3, [sp, #4]
 8016974:	4b3b      	ldr	r3, [pc, #236]	; (8016a64 <tcp_process+0x5b8>)
 8016976:	9300      	str	r3, [sp, #0]
 8016978:	4b3b      	ldr	r3, [pc, #236]	; (8016a68 <tcp_process+0x5bc>)
 801697a:	4602      	mov	r2, r0
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f003 f827 	bl	80199d0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016982:	e167      	b.n	8016c54 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016984:	4b32      	ldr	r3, [pc, #200]	; (8016a50 <tcp_process+0x5a4>)
 8016986:	781b      	ldrb	r3, [r3, #0]
 8016988:	f003 0302 	and.w	r3, r3, #2
 801698c:	2b00      	cmp	r3, #0
 801698e:	f000 8161 	beq.w	8016c54 <tcp_process+0x7a8>
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016996:	1e5a      	subs	r2, r3, #1
 8016998:	4b30      	ldr	r3, [pc, #192]	; (8016a5c <tcp_process+0x5b0>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	429a      	cmp	r2, r3
 801699e:	f040 8159 	bne.w	8016c54 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80169a2:	6878      	ldr	r0, [r7, #4]
 80169a4:	f002 fe0c 	bl	80195c0 <tcp_rexmit>
      break;
 80169a8:	e154      	b.n	8016c54 <tcp_process+0x7a8>
 80169aa:	e153      	b.n	8016c54 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f000 fa71 	bl	8016e94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80169b2:	4b32      	ldr	r3, [pc, #200]	; (8016a7c <tcp_process+0x5d0>)
 80169b4:	781b      	ldrb	r3, [r3, #0]
 80169b6:	f003 0320 	and.w	r3, r3, #32
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	f000 814c 	beq.w	8016c58 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	8b5b      	ldrh	r3, [r3, #26]
 80169c4:	f043 0302 	orr.w	r3, r3, #2
 80169c8:	b29a      	uxth	r2, r3
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	2207      	movs	r2, #7
 80169d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80169d4:	e140      	b.n	8016c58 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f000 fa5c 	bl	8016e94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80169dc:	4b27      	ldr	r3, [pc, #156]	; (8016a7c <tcp_process+0x5d0>)
 80169de:	781b      	ldrb	r3, [r3, #0]
 80169e0:	f003 0320 	and.w	r3, r3, #32
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d071      	beq.n	8016acc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80169e8:	4b19      	ldr	r3, [pc, #100]	; (8016a50 <tcp_process+0x5a4>)
 80169ea:	781b      	ldrb	r3, [r3, #0]
 80169ec:	f003 0310 	and.w	r3, r3, #16
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d060      	beq.n	8016ab6 <tcp_process+0x60a>
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80169f8:	4b16      	ldr	r3, [pc, #88]	; (8016a54 <tcp_process+0x5a8>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	429a      	cmp	r2, r3
 80169fe:	d15a      	bne.n	8016ab6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d156      	bne.n	8016ab6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	8b5b      	ldrh	r3, [r3, #26]
 8016a0c:	f043 0302 	orr.w	r3, r3, #2
 8016a10:	b29a      	uxth	r2, r3
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8016a16:	6878      	ldr	r0, [r7, #4]
 8016a18:	f7fe fdbe 	bl	8015598 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016a1c:	4b18      	ldr	r3, [pc, #96]	; (8016a80 <tcp_process+0x5d4>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	687a      	ldr	r2, [r7, #4]
 8016a22:	429a      	cmp	r2, r3
 8016a24:	d105      	bne.n	8016a32 <tcp_process+0x586>
 8016a26:	4b16      	ldr	r3, [pc, #88]	; (8016a80 <tcp_process+0x5d4>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	68db      	ldr	r3, [r3, #12]
 8016a2c:	4a14      	ldr	r2, [pc, #80]	; (8016a80 <tcp_process+0x5d4>)
 8016a2e:	6013      	str	r3, [r2, #0]
 8016a30:	e02e      	b.n	8016a90 <tcp_process+0x5e4>
 8016a32:	4b13      	ldr	r3, [pc, #76]	; (8016a80 <tcp_process+0x5d4>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	617b      	str	r3, [r7, #20]
 8016a38:	e027      	b.n	8016a8a <tcp_process+0x5de>
 8016a3a:	697b      	ldr	r3, [r7, #20]
 8016a3c:	68db      	ldr	r3, [r3, #12]
 8016a3e:	687a      	ldr	r2, [r7, #4]
 8016a40:	429a      	cmp	r2, r3
 8016a42:	d11f      	bne.n	8016a84 <tcp_process+0x5d8>
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	68da      	ldr	r2, [r3, #12]
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	60da      	str	r2, [r3, #12]
 8016a4c:	e020      	b.n	8016a90 <tcp_process+0x5e4>
 8016a4e:	bf00      	nop
 8016a50:	20005530 	.word	0x20005530
 8016a54:	20005528 	.word	0x20005528
 8016a58:	2000552e 	.word	0x2000552e
 8016a5c:	20005524 	.word	0x20005524
 8016a60:	20005514 	.word	0x20005514
 8016a64:	200133c0 	.word	0x200133c0
 8016a68:	200133c4 	.word	0x200133c4
 8016a6c:	080237a0 	.word	0x080237a0
 8016a70:	08023a40 	.word	0x08023a40
 8016a74:	080237ec 	.word	0x080237ec
 8016a78:	2000552c 	.word	0x2000552c
 8016a7c:	20005531 	.word	0x20005531
 8016a80:	20016b90 	.word	0x20016b90
 8016a84:	697b      	ldr	r3, [r7, #20]
 8016a86:	68db      	ldr	r3, [r3, #12]
 8016a88:	617b      	str	r3, [r7, #20]
 8016a8a:	697b      	ldr	r3, [r7, #20]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d1d4      	bne.n	8016a3a <tcp_process+0x58e>
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	2200      	movs	r2, #0
 8016a94:	60da      	str	r2, [r3, #12]
 8016a96:	4b77      	ldr	r3, [pc, #476]	; (8016c74 <tcp_process+0x7c8>)
 8016a98:	2201      	movs	r2, #1
 8016a9a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	220a      	movs	r2, #10
 8016aa0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016aa2:	4b75      	ldr	r3, [pc, #468]	; (8016c78 <tcp_process+0x7cc>)
 8016aa4:	681a      	ldr	r2, [r3, #0]
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	60da      	str	r2, [r3, #12]
 8016aaa:	4a73      	ldr	r2, [pc, #460]	; (8016c78 <tcp_process+0x7cc>)
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	6013      	str	r3, [r2, #0]
 8016ab0:	f003 f950 	bl	8019d54 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016ab4:	e0d2      	b.n	8016c5c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	8b5b      	ldrh	r3, [r3, #26]
 8016aba:	f043 0302 	orr.w	r3, r3, #2
 8016abe:	b29a      	uxth	r2, r3
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2208      	movs	r2, #8
 8016ac8:	751a      	strb	r2, [r3, #20]
      break;
 8016aca:	e0c7      	b.n	8016c5c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016acc:	4b6b      	ldr	r3, [pc, #428]	; (8016c7c <tcp_process+0x7d0>)
 8016ace:	781b      	ldrb	r3, [r3, #0]
 8016ad0:	f003 0310 	and.w	r3, r3, #16
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	f000 80c1 	beq.w	8016c5c <tcp_process+0x7b0>
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016ade:	4b68      	ldr	r3, [pc, #416]	; (8016c80 <tcp_process+0x7d4>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	f040 80ba 	bne.w	8016c5c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	f040 80b5 	bne.w	8016c5c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	2206      	movs	r2, #6
 8016af6:	751a      	strb	r2, [r3, #20]
      break;
 8016af8:	e0b0      	b.n	8016c5c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8016afa:	6878      	ldr	r0, [r7, #4]
 8016afc:	f000 f9ca 	bl	8016e94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016b00:	4b60      	ldr	r3, [pc, #384]	; (8016c84 <tcp_process+0x7d8>)
 8016b02:	781b      	ldrb	r3, [r3, #0]
 8016b04:	f003 0320 	and.w	r3, r3, #32
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	f000 80a9 	beq.w	8016c60 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	8b5b      	ldrh	r3, [r3, #26]
 8016b12:	f043 0302 	orr.w	r3, r3, #2
 8016b16:	b29a      	uxth	r2, r3
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016b1c:	6878      	ldr	r0, [r7, #4]
 8016b1e:	f7fe fd3b 	bl	8015598 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016b22:	4b59      	ldr	r3, [pc, #356]	; (8016c88 <tcp_process+0x7dc>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	687a      	ldr	r2, [r7, #4]
 8016b28:	429a      	cmp	r2, r3
 8016b2a:	d105      	bne.n	8016b38 <tcp_process+0x68c>
 8016b2c:	4b56      	ldr	r3, [pc, #344]	; (8016c88 <tcp_process+0x7dc>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	68db      	ldr	r3, [r3, #12]
 8016b32:	4a55      	ldr	r2, [pc, #340]	; (8016c88 <tcp_process+0x7dc>)
 8016b34:	6013      	str	r3, [r2, #0]
 8016b36:	e013      	b.n	8016b60 <tcp_process+0x6b4>
 8016b38:	4b53      	ldr	r3, [pc, #332]	; (8016c88 <tcp_process+0x7dc>)
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	613b      	str	r3, [r7, #16]
 8016b3e:	e00c      	b.n	8016b5a <tcp_process+0x6ae>
 8016b40:	693b      	ldr	r3, [r7, #16]
 8016b42:	68db      	ldr	r3, [r3, #12]
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	429a      	cmp	r2, r3
 8016b48:	d104      	bne.n	8016b54 <tcp_process+0x6a8>
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	68da      	ldr	r2, [r3, #12]
 8016b4e:	693b      	ldr	r3, [r7, #16]
 8016b50:	60da      	str	r2, [r3, #12]
 8016b52:	e005      	b.n	8016b60 <tcp_process+0x6b4>
 8016b54:	693b      	ldr	r3, [r7, #16]
 8016b56:	68db      	ldr	r3, [r3, #12]
 8016b58:	613b      	str	r3, [r7, #16]
 8016b5a:	693b      	ldr	r3, [r7, #16]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d1ef      	bne.n	8016b40 <tcp_process+0x694>
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	2200      	movs	r2, #0
 8016b64:	60da      	str	r2, [r3, #12]
 8016b66:	4b43      	ldr	r3, [pc, #268]	; (8016c74 <tcp_process+0x7c8>)
 8016b68:	2201      	movs	r2, #1
 8016b6a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	220a      	movs	r2, #10
 8016b70:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016b72:	4b41      	ldr	r3, [pc, #260]	; (8016c78 <tcp_process+0x7cc>)
 8016b74:	681a      	ldr	r2, [r3, #0]
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	60da      	str	r2, [r3, #12]
 8016b7a:	4a3f      	ldr	r2, [pc, #252]	; (8016c78 <tcp_process+0x7cc>)
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	6013      	str	r3, [r2, #0]
 8016b80:	f003 f8e8 	bl	8019d54 <tcp_timer_needed>
      }
      break;
 8016b84:	e06c      	b.n	8016c60 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8016b86:	6878      	ldr	r0, [r7, #4]
 8016b88:	f000 f984 	bl	8016e94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016b8c:	4b3b      	ldr	r3, [pc, #236]	; (8016c7c <tcp_process+0x7d0>)
 8016b8e:	781b      	ldrb	r3, [r3, #0]
 8016b90:	f003 0310 	and.w	r3, r3, #16
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d065      	beq.n	8016c64 <tcp_process+0x7b8>
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016b9c:	4b38      	ldr	r3, [pc, #224]	; (8016c80 <tcp_process+0x7d4>)
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	d15f      	bne.n	8016c64 <tcp_process+0x7b8>
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d15b      	bne.n	8016c64 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	f7fe fcf3 	bl	8015598 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016bb2:	4b35      	ldr	r3, [pc, #212]	; (8016c88 <tcp_process+0x7dc>)
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	687a      	ldr	r2, [r7, #4]
 8016bb8:	429a      	cmp	r2, r3
 8016bba:	d105      	bne.n	8016bc8 <tcp_process+0x71c>
 8016bbc:	4b32      	ldr	r3, [pc, #200]	; (8016c88 <tcp_process+0x7dc>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	68db      	ldr	r3, [r3, #12]
 8016bc2:	4a31      	ldr	r2, [pc, #196]	; (8016c88 <tcp_process+0x7dc>)
 8016bc4:	6013      	str	r3, [r2, #0]
 8016bc6:	e013      	b.n	8016bf0 <tcp_process+0x744>
 8016bc8:	4b2f      	ldr	r3, [pc, #188]	; (8016c88 <tcp_process+0x7dc>)
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	60fb      	str	r3, [r7, #12]
 8016bce:	e00c      	b.n	8016bea <tcp_process+0x73e>
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	68db      	ldr	r3, [r3, #12]
 8016bd4:	687a      	ldr	r2, [r7, #4]
 8016bd6:	429a      	cmp	r2, r3
 8016bd8:	d104      	bne.n	8016be4 <tcp_process+0x738>
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	68da      	ldr	r2, [r3, #12]
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	60da      	str	r2, [r3, #12]
 8016be2:	e005      	b.n	8016bf0 <tcp_process+0x744>
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	68db      	ldr	r3, [r3, #12]
 8016be8:	60fb      	str	r3, [r7, #12]
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d1ef      	bne.n	8016bd0 <tcp_process+0x724>
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	60da      	str	r2, [r3, #12]
 8016bf6:	4b1f      	ldr	r3, [pc, #124]	; (8016c74 <tcp_process+0x7c8>)
 8016bf8:	2201      	movs	r2, #1
 8016bfa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	220a      	movs	r2, #10
 8016c00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016c02:	4b1d      	ldr	r3, [pc, #116]	; (8016c78 <tcp_process+0x7cc>)
 8016c04:	681a      	ldr	r2, [r3, #0]
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	60da      	str	r2, [r3, #12]
 8016c0a:	4a1b      	ldr	r2, [pc, #108]	; (8016c78 <tcp_process+0x7cc>)
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	6013      	str	r3, [r2, #0]
 8016c10:	f003 f8a0 	bl	8019d54 <tcp_timer_needed>
      }
      break;
 8016c14:	e026      	b.n	8016c64 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8016c16:	6878      	ldr	r0, [r7, #4]
 8016c18:	f000 f93c 	bl	8016e94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016c1c:	4b17      	ldr	r3, [pc, #92]	; (8016c7c <tcp_process+0x7d0>)
 8016c1e:	781b      	ldrb	r3, [r3, #0]
 8016c20:	f003 0310 	and.w	r3, r3, #16
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d01f      	beq.n	8016c68 <tcp_process+0x7bc>
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016c2c:	4b14      	ldr	r3, [pc, #80]	; (8016c80 <tcp_process+0x7d4>)
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d119      	bne.n	8016c68 <tcp_process+0x7bc>
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d115      	bne.n	8016c68 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016c3c:	4b11      	ldr	r3, [pc, #68]	; (8016c84 <tcp_process+0x7d8>)
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	f043 0310 	orr.w	r3, r3, #16
 8016c44:	b2da      	uxtb	r2, r3
 8016c46:	4b0f      	ldr	r3, [pc, #60]	; (8016c84 <tcp_process+0x7d8>)
 8016c48:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016c4a:	e00d      	b.n	8016c68 <tcp_process+0x7bc>
    default:
      break;
 8016c4c:	bf00      	nop
 8016c4e:	e00c      	b.n	8016c6a <tcp_process+0x7be>
      break;
 8016c50:	bf00      	nop
 8016c52:	e00a      	b.n	8016c6a <tcp_process+0x7be>
      break;
 8016c54:	bf00      	nop
 8016c56:	e008      	b.n	8016c6a <tcp_process+0x7be>
      break;
 8016c58:	bf00      	nop
 8016c5a:	e006      	b.n	8016c6a <tcp_process+0x7be>
      break;
 8016c5c:	bf00      	nop
 8016c5e:	e004      	b.n	8016c6a <tcp_process+0x7be>
      break;
 8016c60:	bf00      	nop
 8016c62:	e002      	b.n	8016c6a <tcp_process+0x7be>
      break;
 8016c64:	bf00      	nop
 8016c66:	e000      	b.n	8016c6a <tcp_process+0x7be>
      break;
 8016c68:	bf00      	nop
  }
  return ERR_OK;
 8016c6a:	2300      	movs	r3, #0
}
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	3724      	adds	r7, #36	; 0x24
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd90      	pop	{r4, r7, pc}
 8016c74:	20016b8c 	.word	0x20016b8c
 8016c78:	20016ba0 	.word	0x20016ba0
 8016c7c:	20005530 	.word	0x20005530
 8016c80:	20005528 	.word	0x20005528
 8016c84:	20005531 	.word	0x20005531
 8016c88:	20016b90 	.word	0x20016b90

08016c8c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016c8c:	b590      	push	{r4, r7, lr}
 8016c8e:	b085      	sub	sp, #20
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
 8016c94:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d106      	bne.n	8016caa <tcp_oos_insert_segment+0x1e>
 8016c9c:	4b3b      	ldr	r3, [pc, #236]	; (8016d8c <tcp_oos_insert_segment+0x100>)
 8016c9e:	f240 421f 	movw	r2, #1055	; 0x41f
 8016ca2:	493b      	ldr	r1, [pc, #236]	; (8016d90 <tcp_oos_insert_segment+0x104>)
 8016ca4:	483b      	ldr	r0, [pc, #236]	; (8016d94 <tcp_oos_insert_segment+0x108>)
 8016ca6:	f008 fe21 	bl	801f8ec <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	68db      	ldr	r3, [r3, #12]
 8016cae:	899b      	ldrh	r3, [r3, #12]
 8016cb0:	b29b      	uxth	r3, r3
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f7fa f862 	bl	8010d7c <lwip_htons>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	b2db      	uxtb	r3, r3
 8016cbc:	f003 0301 	and.w	r3, r3, #1
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d028      	beq.n	8016d16 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016cc4:	6838      	ldr	r0, [r7, #0]
 8016cc6:	f7fe f997 	bl	8014ff8 <tcp_segs_free>
    next = NULL;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	603b      	str	r3, [r7, #0]
 8016cce:	e056      	b.n	8016d7e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016cd0:	683b      	ldr	r3, [r7, #0]
 8016cd2:	68db      	ldr	r3, [r3, #12]
 8016cd4:	899b      	ldrh	r3, [r3, #12]
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	4618      	mov	r0, r3
 8016cda:	f7fa f84f 	bl	8010d7c <lwip_htons>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	b2db      	uxtb	r3, r3
 8016ce2:	f003 0301 	and.w	r3, r3, #1
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d00d      	beq.n	8016d06 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	68db      	ldr	r3, [r3, #12]
 8016cee:	899b      	ldrh	r3, [r3, #12]
 8016cf0:	b29c      	uxth	r4, r3
 8016cf2:	2001      	movs	r0, #1
 8016cf4:	f7fa f842 	bl	8010d7c <lwip_htons>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	461a      	mov	r2, r3
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	68db      	ldr	r3, [r3, #12]
 8016d00:	4322      	orrs	r2, r4
 8016d02:	b292      	uxth	r2, r2
 8016d04:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016d10:	68f8      	ldr	r0, [r7, #12]
 8016d12:	f7fe f986 	bl	8015022 <tcp_seg_free>
    while (next &&
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d00e      	beq.n	8016d3a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	891b      	ldrh	r3, [r3, #8]
 8016d20:	461a      	mov	r2, r3
 8016d22:	4b1d      	ldr	r3, [pc, #116]	; (8016d98 <tcp_oos_insert_segment+0x10c>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	441a      	add	r2, r3
 8016d28:	683b      	ldr	r3, [r7, #0]
 8016d2a:	68db      	ldr	r3, [r3, #12]
 8016d2c:	685b      	ldr	r3, [r3, #4]
 8016d2e:	6839      	ldr	r1, [r7, #0]
 8016d30:	8909      	ldrh	r1, [r1, #8]
 8016d32:	440b      	add	r3, r1
 8016d34:	1ad3      	subs	r3, r2, r3
    while (next &&
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	daca      	bge.n	8016cd0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d01e      	beq.n	8016d7e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	891b      	ldrh	r3, [r3, #8]
 8016d44:	461a      	mov	r2, r3
 8016d46:	4b14      	ldr	r3, [pc, #80]	; (8016d98 <tcp_oos_insert_segment+0x10c>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	441a      	add	r2, r3
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	68db      	ldr	r3, [r3, #12]
 8016d50:	685b      	ldr	r3, [r3, #4]
 8016d52:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	dd12      	ble.n	8016d7e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016d58:	683b      	ldr	r3, [r7, #0]
 8016d5a:	68db      	ldr	r3, [r3, #12]
 8016d5c:	685b      	ldr	r3, [r3, #4]
 8016d5e:	b29a      	uxth	r2, r3
 8016d60:	4b0d      	ldr	r3, [pc, #52]	; (8016d98 <tcp_oos_insert_segment+0x10c>)
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	b29b      	uxth	r3, r3
 8016d66:	1ad3      	subs	r3, r2, r3
 8016d68:	b29a      	uxth	r2, r3
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	685a      	ldr	r2, [r3, #4]
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	891b      	ldrh	r3, [r3, #8]
 8016d76:	4619      	mov	r1, r3
 8016d78:	4610      	mov	r0, r2
 8016d7a:	f7fc fa07 	bl	801318c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	683a      	ldr	r2, [r7, #0]
 8016d82:	601a      	str	r2, [r3, #0]
}
 8016d84:	bf00      	nop
 8016d86:	3714      	adds	r7, #20
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd90      	pop	{r4, r7, pc}
 8016d8c:	080237a0 	.word	0x080237a0
 8016d90:	08023a60 	.word	0x08023a60
 8016d94:	080237ec 	.word	0x080237ec
 8016d98:	20005524 	.word	0x20005524

08016d9c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016d9c:	b5b0      	push	{r4, r5, r7, lr}
 8016d9e:	b086      	sub	sp, #24
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	60f8      	str	r0, [r7, #12]
 8016da4:	60b9      	str	r1, [r7, #8]
 8016da6:	607a      	str	r2, [r7, #4]
 8016da8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8016daa:	e03e      	b.n	8016e2a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016dac:	68bb      	ldr	r3, [r7, #8]
 8016dae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	685b      	ldr	r3, [r3, #4]
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7fc fbfa 	bl	80135b4 <pbuf_clen>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016dca:	8a7a      	ldrh	r2, [r7, #18]
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	d906      	bls.n	8016dde <tcp_free_acked_segments+0x42>
 8016dd0:	4b2a      	ldr	r3, [pc, #168]	; (8016e7c <tcp_free_acked_segments+0xe0>)
 8016dd2:	f240 4257 	movw	r2, #1111	; 0x457
 8016dd6:	492a      	ldr	r1, [pc, #168]	; (8016e80 <tcp_free_acked_segments+0xe4>)
 8016dd8:	482a      	ldr	r0, [pc, #168]	; (8016e84 <tcp_free_acked_segments+0xe8>)
 8016dda:	f008 fd87 	bl	801f8ec <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8016de4:	8a7b      	ldrh	r3, [r7, #18]
 8016de6:	1ad3      	subs	r3, r2, r3
 8016de8:	b29a      	uxth	r2, r3
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	891a      	ldrh	r2, [r3, #8]
 8016df4:	4b24      	ldr	r3, [pc, #144]	; (8016e88 <tcp_free_acked_segments+0xec>)
 8016df6:	881b      	ldrh	r3, [r3, #0]
 8016df8:	4413      	add	r3, r2
 8016dfa:	b29a      	uxth	r2, r3
 8016dfc:	4b22      	ldr	r3, [pc, #136]	; (8016e88 <tcp_free_acked_segments+0xec>)
 8016dfe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016e00:	6978      	ldr	r0, [r7, #20]
 8016e02:	f7fe f90e 	bl	8015022 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d00c      	beq.n	8016e2a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016e10:	68bb      	ldr	r3, [r7, #8]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d109      	bne.n	8016e2a <tcp_free_acked_segments+0x8e>
 8016e16:	683b      	ldr	r3, [r7, #0]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d106      	bne.n	8016e2a <tcp_free_acked_segments+0x8e>
 8016e1c:	4b17      	ldr	r3, [pc, #92]	; (8016e7c <tcp_free_acked_segments+0xe0>)
 8016e1e:	f240 4261 	movw	r2, #1121	; 0x461
 8016e22:	491a      	ldr	r1, [pc, #104]	; (8016e8c <tcp_free_acked_segments+0xf0>)
 8016e24:	4817      	ldr	r0, [pc, #92]	; (8016e84 <tcp_free_acked_segments+0xe8>)
 8016e26:	f008 fd61 	bl	801f8ec <iprintf>
  while (seg_list != NULL &&
 8016e2a:	68bb      	ldr	r3, [r7, #8]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d020      	beq.n	8016e72 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016e30:	68bb      	ldr	r3, [r7, #8]
 8016e32:	68db      	ldr	r3, [r3, #12]
 8016e34:	685b      	ldr	r3, [r3, #4]
 8016e36:	4618      	mov	r0, r3
 8016e38:	f7f9 ffb5 	bl	8010da6 <lwip_htonl>
 8016e3c:	4604      	mov	r4, r0
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	891b      	ldrh	r3, [r3, #8]
 8016e42:	461d      	mov	r5, r3
 8016e44:	68bb      	ldr	r3, [r7, #8]
 8016e46:	68db      	ldr	r3, [r3, #12]
 8016e48:	899b      	ldrh	r3, [r3, #12]
 8016e4a:	b29b      	uxth	r3, r3
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7f9 ff95 	bl	8010d7c <lwip_htons>
 8016e52:	4603      	mov	r3, r0
 8016e54:	b2db      	uxtb	r3, r3
 8016e56:	f003 0303 	and.w	r3, r3, #3
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d001      	beq.n	8016e62 <tcp_free_acked_segments+0xc6>
 8016e5e:	2301      	movs	r3, #1
 8016e60:	e000      	b.n	8016e64 <tcp_free_acked_segments+0xc8>
 8016e62:	2300      	movs	r3, #0
 8016e64:	442b      	add	r3, r5
 8016e66:	18e2      	adds	r2, r4, r3
 8016e68:	4b09      	ldr	r3, [pc, #36]	; (8016e90 <tcp_free_acked_segments+0xf4>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	dd9c      	ble.n	8016dac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016e72:	68bb      	ldr	r3, [r7, #8]
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3718      	adds	r7, #24
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8016e7c:	080237a0 	.word	0x080237a0
 8016e80:	08023a88 	.word	0x08023a88
 8016e84:	080237ec 	.word	0x080237ec
 8016e88:	2000552c 	.word	0x2000552c
 8016e8c:	08023ab0 	.word	0x08023ab0
 8016e90:	20005528 	.word	0x20005528

08016e94 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016e94:	b5b0      	push	{r4, r5, r7, lr}
 8016e96:	b094      	sub	sp, #80	; 0x50
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d106      	bne.n	8016eb4 <tcp_receive+0x20>
 8016ea6:	4ba6      	ldr	r3, [pc, #664]	; (8017140 <tcp_receive+0x2ac>)
 8016ea8:	f240 427b 	movw	r2, #1147	; 0x47b
 8016eac:	49a5      	ldr	r1, [pc, #660]	; (8017144 <tcp_receive+0x2b0>)
 8016eae:	48a6      	ldr	r0, [pc, #664]	; (8017148 <tcp_receive+0x2b4>)
 8016eb0:	f008 fd1c 	bl	801f8ec <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	7d1b      	ldrb	r3, [r3, #20]
 8016eb8:	2b03      	cmp	r3, #3
 8016eba:	d806      	bhi.n	8016eca <tcp_receive+0x36>
 8016ebc:	4ba0      	ldr	r3, [pc, #640]	; (8017140 <tcp_receive+0x2ac>)
 8016ebe:	f240 427c 	movw	r2, #1148	; 0x47c
 8016ec2:	49a2      	ldr	r1, [pc, #648]	; (801714c <tcp_receive+0x2b8>)
 8016ec4:	48a0      	ldr	r0, [pc, #640]	; (8017148 <tcp_receive+0x2b4>)
 8016ec6:	f008 fd11 	bl	801f8ec <iprintf>

  if (flags & TCP_ACK) {
 8016eca:	4ba1      	ldr	r3, [pc, #644]	; (8017150 <tcp_receive+0x2bc>)
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	f003 0310 	and.w	r3, r3, #16
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	f000 8263 	beq.w	801739e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016ede:	461a      	mov	r2, r3
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016ee4:	4413      	add	r3, r2
 8016ee6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016eec:	4b99      	ldr	r3, [pc, #612]	; (8017154 <tcp_receive+0x2c0>)
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	1ad3      	subs	r3, r2, r3
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	db1b      	blt.n	8016f2e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016efa:	4b96      	ldr	r3, [pc, #600]	; (8017154 <tcp_receive+0x2c0>)
 8016efc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d106      	bne.n	8016f10 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016f06:	4b94      	ldr	r3, [pc, #592]	; (8017158 <tcp_receive+0x2c4>)
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	1ad3      	subs	r3, r2, r3
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	db0e      	blt.n	8016f2e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016f14:	4b90      	ldr	r3, [pc, #576]	; (8017158 <tcp_receive+0x2c4>)
 8016f16:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016f18:	429a      	cmp	r2, r3
 8016f1a:	d125      	bne.n	8016f68 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016f1c:	4b8f      	ldr	r3, [pc, #572]	; (801715c <tcp_receive+0x2c8>)
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	89db      	ldrh	r3, [r3, #14]
 8016f22:	b29a      	uxth	r2, r3
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016f2a:	429a      	cmp	r2, r3
 8016f2c:	d91c      	bls.n	8016f68 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016f2e:	4b8b      	ldr	r3, [pc, #556]	; (801715c <tcp_receive+0x2c8>)
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	89db      	ldrh	r3, [r3, #14]
 8016f34:	b29a      	uxth	r2, r3
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016f48:	429a      	cmp	r2, r3
 8016f4a:	d205      	bcs.n	8016f58 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8016f58:	4b7e      	ldr	r3, [pc, #504]	; (8017154 <tcp_receive+0x2c0>)
 8016f5a:	681a      	ldr	r2, [r3, #0]
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016f60:	4b7d      	ldr	r3, [pc, #500]	; (8017158 <tcp_receive+0x2c4>)
 8016f62:	681a      	ldr	r2, [r3, #0]
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016f68:	4b7b      	ldr	r3, [pc, #492]	; (8017158 <tcp_receive+0x2c4>)
 8016f6a:	681a      	ldr	r2, [r3, #0]
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f70:	1ad3      	subs	r3, r2, r3
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	dc58      	bgt.n	8017028 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8016f76:	4b7a      	ldr	r3, [pc, #488]	; (8017160 <tcp_receive+0x2cc>)
 8016f78:	881b      	ldrh	r3, [r3, #0]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d14b      	bne.n	8017016 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016f82:	687a      	ldr	r2, [r7, #4]
 8016f84:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8016f88:	4413      	add	r3, r2
 8016f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	d142      	bne.n	8017016 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	db3d      	blt.n	8017016 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016f9e:	4b6e      	ldr	r3, [pc, #440]	; (8017158 <tcp_receive+0x2c4>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	429a      	cmp	r2, r3
 8016fa4:	d137      	bne.n	8017016 <tcp_receive+0x182>
              found_dupack = 1;
 8016fa6:	2301      	movs	r3, #1
 8016fa8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016fb0:	2bff      	cmp	r3, #255	; 0xff
 8016fb2:	d007      	beq.n	8016fc4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016fba:	3301      	adds	r3, #1
 8016fbc:	b2da      	uxtb	r2, r3
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016fca:	2b03      	cmp	r3, #3
 8016fcc:	d91b      	bls.n	8017006 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016fd8:	4413      	add	r3, r2
 8016fda:	b29a      	uxth	r2, r3
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016fe2:	429a      	cmp	r2, r3
 8016fe4:	d30a      	bcc.n	8016ffc <tcp_receive+0x168>
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ff0:	4413      	add	r3, r2
 8016ff2:	b29a      	uxth	r2, r3
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016ffa:	e004      	b.n	8017006 <tcp_receive+0x172>
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017002:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801700c:	2b02      	cmp	r3, #2
 801700e:	d902      	bls.n	8017016 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017010:	6878      	ldr	r0, [r7, #4]
 8017012:	f002 fb41 	bl	8019698 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017018:	2b00      	cmp	r3, #0
 801701a:	f040 8160 	bne.w	80172de <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	2200      	movs	r2, #0
 8017022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017026:	e15a      	b.n	80172de <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017028:	4b4b      	ldr	r3, [pc, #300]	; (8017158 <tcp_receive+0x2c4>)
 801702a:	681a      	ldr	r2, [r3, #0]
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017030:	1ad3      	subs	r3, r2, r3
 8017032:	3b01      	subs	r3, #1
 8017034:	2b00      	cmp	r3, #0
 8017036:	f2c0 814d 	blt.w	80172d4 <tcp_receive+0x440>
 801703a:	4b47      	ldr	r3, [pc, #284]	; (8017158 <tcp_receive+0x2c4>)
 801703c:	681a      	ldr	r2, [r3, #0]
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017042:	1ad3      	subs	r3, r2, r3
 8017044:	2b00      	cmp	r3, #0
 8017046:	f300 8145 	bgt.w	80172d4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	8b5b      	ldrh	r3, [r3, #26]
 801704e:	f003 0304 	and.w	r3, r3, #4
 8017052:	2b00      	cmp	r3, #0
 8017054:	d010      	beq.n	8017078 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	8b5b      	ldrh	r3, [r3, #26]
 801705a:	f023 0304 	bic.w	r3, r3, #4
 801705e:	b29a      	uxth	r2, r3
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	2200      	movs	r2, #0
 8017074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	2200      	movs	r2, #0
 801707c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017086:	10db      	asrs	r3, r3, #3
 8017088:	b21b      	sxth	r3, r3
 801708a:	b29a      	uxth	r2, r3
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017092:	b29b      	uxth	r3, r3
 8017094:	4413      	add	r3, r2
 8017096:	b29b      	uxth	r3, r3
 8017098:	b21a      	sxth	r2, r3
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80170a0:	4b2d      	ldr	r3, [pc, #180]	; (8017158 <tcp_receive+0x2c4>)
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	b29a      	uxth	r2, r3
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170aa:	b29b      	uxth	r3, r3
 80170ac:	1ad3      	subs	r3, r2, r3
 80170ae:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2200      	movs	r2, #0
 80170b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80170b8:	4b27      	ldr	r3, [pc, #156]	; (8017158 <tcp_receive+0x2c4>)
 80170ba:	681a      	ldr	r2, [r3, #0]
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	7d1b      	ldrb	r3, [r3, #20]
 80170c4:	2b03      	cmp	r3, #3
 80170c6:	f240 8096 	bls.w	80171f6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80170d6:	429a      	cmp	r2, r3
 80170d8:	d244      	bcs.n	8017164 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	8b5b      	ldrh	r3, [r3, #26]
 80170de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d001      	beq.n	80170ea <tcp_receive+0x256>
 80170e6:	2301      	movs	r3, #1
 80170e8:	e000      	b.n	80170ec <tcp_receive+0x258>
 80170ea:	2302      	movs	r3, #2
 80170ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80170f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80170f4:	b29a      	uxth	r2, r3
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80170fa:	fb12 f303 	smulbb	r3, r2, r3
 80170fe:	b29b      	uxth	r3, r3
 8017100:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017102:	4293      	cmp	r3, r2
 8017104:	bf28      	it	cs
 8017106:	4613      	movcs	r3, r2
 8017108:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017110:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017112:	4413      	add	r3, r2
 8017114:	b29a      	uxth	r2, r3
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801711c:	429a      	cmp	r2, r3
 801711e:	d309      	bcc.n	8017134 <tcp_receive+0x2a0>
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017126:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017128:	4413      	add	r3, r2
 801712a:	b29a      	uxth	r2, r3
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017132:	e060      	b.n	80171f6 <tcp_receive+0x362>
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801713a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801713e:	e05a      	b.n	80171f6 <tcp_receive+0x362>
 8017140:	080237a0 	.word	0x080237a0
 8017144:	08023ad0 	.word	0x08023ad0
 8017148:	080237ec 	.word	0x080237ec
 801714c:	08023aec 	.word	0x08023aec
 8017150:	20005530 	.word	0x20005530
 8017154:	20005524 	.word	0x20005524
 8017158:	20005528 	.word	0x20005528
 801715c:	20005514 	.word	0x20005514
 8017160:	2000552e 	.word	0x2000552e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801716a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801716c:	4413      	add	r3, r2
 801716e:	b29a      	uxth	r2, r3
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017176:	429a      	cmp	r2, r3
 8017178:	d309      	bcc.n	801718e <tcp_receive+0x2fa>
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017180:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017182:	4413      	add	r3, r2
 8017184:	b29a      	uxth	r2, r3
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801718c:	e004      	b.n	8017198 <tcp_receive+0x304>
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80171a4:	429a      	cmp	r2, r3
 80171a6:	d326      	bcc.n	80171f6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80171b4:	1ad3      	subs	r3, r2, r3
 80171b6:	b29a      	uxth	r2, r3
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171c8:	4413      	add	r3, r2
 80171ca:	b29a      	uxth	r2, r3
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80171d2:	429a      	cmp	r2, r3
 80171d4:	d30a      	bcc.n	80171ec <tcp_receive+0x358>
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171e0:	4413      	add	r3, r2
 80171e2:	b29a      	uxth	r2, r3
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80171ea:	e004      	b.n	80171f6 <tcp_receive+0x362>
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80171f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171fe:	4a98      	ldr	r2, [pc, #608]	; (8017460 <tcp_receive+0x5cc>)
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f7ff fdcb 	bl	8016d9c <tcp_free_acked_segments>
 8017206:	4602      	mov	r2, r0
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017214:	4a93      	ldr	r2, [pc, #588]	; (8017464 <tcp_receive+0x5d0>)
 8017216:	6878      	ldr	r0, [r7, #4]
 8017218:	f7ff fdc0 	bl	8016d9c <tcp_free_acked_segments>
 801721c:	4602      	mov	r2, r0
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017226:	2b00      	cmp	r3, #0
 8017228:	d104      	bne.n	8017234 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017230:	861a      	strh	r2, [r3, #48]	; 0x30
 8017232:	e002      	b.n	801723a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2200      	movs	r2, #0
 8017238:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2200      	movs	r2, #0
 801723e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017244:	2b00      	cmp	r3, #0
 8017246:	d103      	bne.n	8017250 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2200      	movs	r2, #0
 801724c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017256:	4b84      	ldr	r3, [pc, #528]	; (8017468 <tcp_receive+0x5d4>)
 8017258:	881b      	ldrh	r3, [r3, #0]
 801725a:	4413      	add	r3, r2
 801725c:	b29a      	uxth	r2, r3
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	8b5b      	ldrh	r3, [r3, #26]
 8017268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801726c:	2b00      	cmp	r3, #0
 801726e:	d035      	beq.n	80172dc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017274:	2b00      	cmp	r3, #0
 8017276:	d118      	bne.n	80172aa <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801727c:	2b00      	cmp	r3, #0
 801727e:	d00c      	beq.n	801729a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017288:	68db      	ldr	r3, [r3, #12]
 801728a:	685b      	ldr	r3, [r3, #4]
 801728c:	4618      	mov	r0, r3
 801728e:	f7f9 fd8a 	bl	8010da6 <lwip_htonl>
 8017292:	4603      	mov	r3, r0
 8017294:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017296:	2b00      	cmp	r3, #0
 8017298:	dc20      	bgt.n	80172dc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	8b5b      	ldrh	r3, [r3, #26]
 801729e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80172a2:	b29a      	uxth	r2, r3
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80172a8:	e018      	b.n	80172dc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80172b2:	68db      	ldr	r3, [r3, #12]
 80172b4:	685b      	ldr	r3, [r3, #4]
 80172b6:	4618      	mov	r0, r3
 80172b8:	f7f9 fd75 	bl	8010da6 <lwip_htonl>
 80172bc:	4603      	mov	r3, r0
 80172be:	1ae3      	subs	r3, r4, r3
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	dc0b      	bgt.n	80172dc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	8b5b      	ldrh	r3, [r3, #26]
 80172c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80172cc:	b29a      	uxth	r2, r3
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80172d2:	e003      	b.n	80172dc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80172d4:	6878      	ldr	r0, [r7, #4]
 80172d6:	f002 fbcd 	bl	8019a74 <tcp_send_empty_ack>
 80172da:	e000      	b.n	80172de <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80172dc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d05b      	beq.n	801739e <tcp_receive+0x50a>
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80172ea:	4b60      	ldr	r3, [pc, #384]	; (801746c <tcp_receive+0x5d8>)
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	1ad3      	subs	r3, r2, r3
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	da54      	bge.n	801739e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80172f4:	4b5e      	ldr	r3, [pc, #376]	; (8017470 <tcp_receive+0x5dc>)
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	b29a      	uxth	r2, r3
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80172fe:	b29b      	uxth	r3, r3
 8017300:	1ad3      	subs	r3, r2, r3
 8017302:	b29b      	uxth	r3, r3
 8017304:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017308:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017312:	10db      	asrs	r3, r3, #3
 8017314:	b21b      	sxth	r3, r3
 8017316:	b29b      	uxth	r3, r3
 8017318:	1ad3      	subs	r3, r2, r3
 801731a:	b29b      	uxth	r3, r3
 801731c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017326:	b29a      	uxth	r2, r3
 8017328:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801732c:	4413      	add	r3, r2
 801732e:	b29b      	uxth	r3, r3
 8017330:	b21a      	sxth	r2, r3
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8017336:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801733a:	2b00      	cmp	r3, #0
 801733c:	da05      	bge.n	801734a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801733e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017342:	425b      	negs	r3, r3
 8017344:	b29b      	uxth	r3, r3
 8017346:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801734a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017354:	109b      	asrs	r3, r3, #2
 8017356:	b21b      	sxth	r3, r3
 8017358:	b29b      	uxth	r3, r3
 801735a:	1ad3      	subs	r3, r2, r3
 801735c:	b29b      	uxth	r3, r3
 801735e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017368:	b29a      	uxth	r2, r3
 801736a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801736e:	4413      	add	r3, r2
 8017370:	b29b      	uxth	r3, r3
 8017372:	b21a      	sxth	r2, r3
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801737e:	10db      	asrs	r3, r3, #3
 8017380:	b21b      	sxth	r3, r3
 8017382:	b29a      	uxth	r2, r3
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801738a:	b29b      	uxth	r3, r3
 801738c:	4413      	add	r3, r2
 801738e:	b29b      	uxth	r3, r3
 8017390:	b21a      	sxth	r2, r3
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	2200      	movs	r2, #0
 801739c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801739e:	4b35      	ldr	r3, [pc, #212]	; (8017474 <tcp_receive+0x5e0>)
 80173a0:	881b      	ldrh	r3, [r3, #0]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	f000 84e1 	beq.w	8017d6a <tcp_receive+0xed6>
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	7d1b      	ldrb	r3, [r3, #20]
 80173ac:	2b06      	cmp	r3, #6
 80173ae:	f200 84dc 	bhi.w	8017d6a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80173b6:	4b30      	ldr	r3, [pc, #192]	; (8017478 <tcp_receive+0x5e4>)
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	1ad3      	subs	r3, r2, r3
 80173bc:	3b01      	subs	r3, #1
 80173be:	2b00      	cmp	r3, #0
 80173c0:	f2c0 808e 	blt.w	80174e0 <tcp_receive+0x64c>
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80173c8:	4b2a      	ldr	r3, [pc, #168]	; (8017474 <tcp_receive+0x5e0>)
 80173ca:	881b      	ldrh	r3, [r3, #0]
 80173cc:	4619      	mov	r1, r3
 80173ce:	4b2a      	ldr	r3, [pc, #168]	; (8017478 <tcp_receive+0x5e4>)
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	440b      	add	r3, r1
 80173d4:	1ad3      	subs	r3, r2, r3
 80173d6:	3301      	adds	r3, #1
 80173d8:	2b00      	cmp	r3, #0
 80173da:	f300 8081 	bgt.w	80174e0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80173de:	4b27      	ldr	r3, [pc, #156]	; (801747c <tcp_receive+0x5e8>)
 80173e0:	685b      	ldr	r3, [r3, #4]
 80173e2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80173e8:	4b23      	ldr	r3, [pc, #140]	; (8017478 <tcp_receive+0x5e4>)
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	1ad3      	subs	r3, r2, r3
 80173ee:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80173f0:	4b22      	ldr	r3, [pc, #136]	; (801747c <tcp_receive+0x5e8>)
 80173f2:	685b      	ldr	r3, [r3, #4]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d106      	bne.n	8017406 <tcp_receive+0x572>
 80173f8:	4b21      	ldr	r3, [pc, #132]	; (8017480 <tcp_receive+0x5ec>)
 80173fa:	f240 5294 	movw	r2, #1428	; 0x594
 80173fe:	4921      	ldr	r1, [pc, #132]	; (8017484 <tcp_receive+0x5f0>)
 8017400:	4821      	ldr	r0, [pc, #132]	; (8017488 <tcp_receive+0x5f4>)
 8017402:	f008 fa73 	bl	801f8ec <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017408:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801740c:	4293      	cmp	r3, r2
 801740e:	d906      	bls.n	801741e <tcp_receive+0x58a>
 8017410:	4b1b      	ldr	r3, [pc, #108]	; (8017480 <tcp_receive+0x5ec>)
 8017412:	f240 5295 	movw	r2, #1429	; 0x595
 8017416:	491d      	ldr	r1, [pc, #116]	; (801748c <tcp_receive+0x5f8>)
 8017418:	481b      	ldr	r0, [pc, #108]	; (8017488 <tcp_receive+0x5f4>)
 801741a:	f008 fa67 	bl	801f8ec <iprintf>
      off = (u16_t)off32;
 801741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017420:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017424:	4b15      	ldr	r3, [pc, #84]	; (801747c <tcp_receive+0x5e8>)
 8017426:	685b      	ldr	r3, [r3, #4]
 8017428:	891b      	ldrh	r3, [r3, #8]
 801742a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801742e:	429a      	cmp	r2, r3
 8017430:	d906      	bls.n	8017440 <tcp_receive+0x5ac>
 8017432:	4b13      	ldr	r3, [pc, #76]	; (8017480 <tcp_receive+0x5ec>)
 8017434:	f240 5297 	movw	r2, #1431	; 0x597
 8017438:	4915      	ldr	r1, [pc, #84]	; (8017490 <tcp_receive+0x5fc>)
 801743a:	4813      	ldr	r0, [pc, #76]	; (8017488 <tcp_receive+0x5f4>)
 801743c:	f008 fa56 	bl	801f8ec <iprintf>
      inseg.len -= off;
 8017440:	4b0e      	ldr	r3, [pc, #56]	; (801747c <tcp_receive+0x5e8>)
 8017442:	891a      	ldrh	r2, [r3, #8]
 8017444:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017448:	1ad3      	subs	r3, r2, r3
 801744a:	b29a      	uxth	r2, r3
 801744c:	4b0b      	ldr	r3, [pc, #44]	; (801747c <tcp_receive+0x5e8>)
 801744e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017450:	4b0a      	ldr	r3, [pc, #40]	; (801747c <tcp_receive+0x5e8>)
 8017452:	685b      	ldr	r3, [r3, #4]
 8017454:	891a      	ldrh	r2, [r3, #8]
 8017456:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801745a:	1ad3      	subs	r3, r2, r3
 801745c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801745e:	e029      	b.n	80174b4 <tcp_receive+0x620>
 8017460:	08023b08 	.word	0x08023b08
 8017464:	08023b10 	.word	0x08023b10
 8017468:	2000552c 	.word	0x2000552c
 801746c:	20005528 	.word	0x20005528
 8017470:	20016b94 	.word	0x20016b94
 8017474:	2000552e 	.word	0x2000552e
 8017478:	20005524 	.word	0x20005524
 801747c:	20005504 	.word	0x20005504
 8017480:	080237a0 	.word	0x080237a0
 8017484:	08023b18 	.word	0x08023b18
 8017488:	080237ec 	.word	0x080237ec
 801748c:	08023b28 	.word	0x08023b28
 8017490:	08023b38 	.word	0x08023b38
        off -= p->len;
 8017494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017496:	895b      	ldrh	r3, [r3, #10]
 8017498:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801749c:	1ad3      	subs	r3, r2, r3
 801749e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80174a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80174a6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80174a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174aa:	2200      	movs	r2, #0
 80174ac:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80174ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80174b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174b6:	895b      	ldrh	r3, [r3, #10]
 80174b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80174bc:	429a      	cmp	r2, r3
 80174be:	d8e9      	bhi.n	8017494 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80174c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80174c4:	4619      	mov	r1, r3
 80174c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80174c8:	f7fb ff60 	bl	801338c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174d0:	4a91      	ldr	r2, [pc, #580]	; (8017718 <tcp_receive+0x884>)
 80174d2:	6013      	str	r3, [r2, #0]
 80174d4:	4b91      	ldr	r3, [pc, #580]	; (801771c <tcp_receive+0x888>)
 80174d6:	68db      	ldr	r3, [r3, #12]
 80174d8:	4a8f      	ldr	r2, [pc, #572]	; (8017718 <tcp_receive+0x884>)
 80174da:	6812      	ldr	r2, [r2, #0]
 80174dc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80174de:	e00d      	b.n	80174fc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80174e0:	4b8d      	ldr	r3, [pc, #564]	; (8017718 <tcp_receive+0x884>)
 80174e2:	681a      	ldr	r2, [r3, #0]
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174e8:	1ad3      	subs	r3, r2, r3
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	da06      	bge.n	80174fc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	8b5b      	ldrh	r3, [r3, #26]
 80174f2:	f043 0302 	orr.w	r3, r3, #2
 80174f6:	b29a      	uxth	r2, r3
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80174fc:	4b86      	ldr	r3, [pc, #536]	; (8017718 <tcp_receive+0x884>)
 80174fe:	681a      	ldr	r2, [r3, #0]
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017504:	1ad3      	subs	r3, r2, r3
 8017506:	2b00      	cmp	r3, #0
 8017508:	f2c0 842a 	blt.w	8017d60 <tcp_receive+0xecc>
 801750c:	4b82      	ldr	r3, [pc, #520]	; (8017718 <tcp_receive+0x884>)
 801750e:	681a      	ldr	r2, [r3, #0]
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017514:	6879      	ldr	r1, [r7, #4]
 8017516:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017518:	440b      	add	r3, r1
 801751a:	1ad3      	subs	r3, r2, r3
 801751c:	3301      	adds	r3, #1
 801751e:	2b00      	cmp	r3, #0
 8017520:	f300 841e 	bgt.w	8017d60 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017528:	4b7b      	ldr	r3, [pc, #492]	; (8017718 <tcp_receive+0x884>)
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	429a      	cmp	r2, r3
 801752e:	f040 829a 	bne.w	8017a66 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017532:	4b7a      	ldr	r3, [pc, #488]	; (801771c <tcp_receive+0x888>)
 8017534:	891c      	ldrh	r4, [r3, #8]
 8017536:	4b79      	ldr	r3, [pc, #484]	; (801771c <tcp_receive+0x888>)
 8017538:	68db      	ldr	r3, [r3, #12]
 801753a:	899b      	ldrh	r3, [r3, #12]
 801753c:	b29b      	uxth	r3, r3
 801753e:	4618      	mov	r0, r3
 8017540:	f7f9 fc1c 	bl	8010d7c <lwip_htons>
 8017544:	4603      	mov	r3, r0
 8017546:	b2db      	uxtb	r3, r3
 8017548:	f003 0303 	and.w	r3, r3, #3
 801754c:	2b00      	cmp	r3, #0
 801754e:	d001      	beq.n	8017554 <tcp_receive+0x6c0>
 8017550:	2301      	movs	r3, #1
 8017552:	e000      	b.n	8017556 <tcp_receive+0x6c2>
 8017554:	2300      	movs	r3, #0
 8017556:	4423      	add	r3, r4
 8017558:	b29a      	uxth	r2, r3
 801755a:	4b71      	ldr	r3, [pc, #452]	; (8017720 <tcp_receive+0x88c>)
 801755c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017562:	4b6f      	ldr	r3, [pc, #444]	; (8017720 <tcp_receive+0x88c>)
 8017564:	881b      	ldrh	r3, [r3, #0]
 8017566:	429a      	cmp	r2, r3
 8017568:	d275      	bcs.n	8017656 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801756a:	4b6c      	ldr	r3, [pc, #432]	; (801771c <tcp_receive+0x888>)
 801756c:	68db      	ldr	r3, [r3, #12]
 801756e:	899b      	ldrh	r3, [r3, #12]
 8017570:	b29b      	uxth	r3, r3
 8017572:	4618      	mov	r0, r3
 8017574:	f7f9 fc02 	bl	8010d7c <lwip_htons>
 8017578:	4603      	mov	r3, r0
 801757a:	b2db      	uxtb	r3, r3
 801757c:	f003 0301 	and.w	r3, r3, #1
 8017580:	2b00      	cmp	r3, #0
 8017582:	d01f      	beq.n	80175c4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017584:	4b65      	ldr	r3, [pc, #404]	; (801771c <tcp_receive+0x888>)
 8017586:	68db      	ldr	r3, [r3, #12]
 8017588:	899b      	ldrh	r3, [r3, #12]
 801758a:	b29b      	uxth	r3, r3
 801758c:	b21b      	sxth	r3, r3
 801758e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017592:	b21c      	sxth	r4, r3
 8017594:	4b61      	ldr	r3, [pc, #388]	; (801771c <tcp_receive+0x888>)
 8017596:	68db      	ldr	r3, [r3, #12]
 8017598:	899b      	ldrh	r3, [r3, #12]
 801759a:	b29b      	uxth	r3, r3
 801759c:	4618      	mov	r0, r3
 801759e:	f7f9 fbed 	bl	8010d7c <lwip_htons>
 80175a2:	4603      	mov	r3, r0
 80175a4:	b2db      	uxtb	r3, r3
 80175a6:	b29b      	uxth	r3, r3
 80175a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80175ac:	b29b      	uxth	r3, r3
 80175ae:	4618      	mov	r0, r3
 80175b0:	f7f9 fbe4 	bl	8010d7c <lwip_htons>
 80175b4:	4603      	mov	r3, r0
 80175b6:	b21b      	sxth	r3, r3
 80175b8:	4323      	orrs	r3, r4
 80175ba:	b21a      	sxth	r2, r3
 80175bc:	4b57      	ldr	r3, [pc, #348]	; (801771c <tcp_receive+0x888>)
 80175be:	68db      	ldr	r3, [r3, #12]
 80175c0:	b292      	uxth	r2, r2
 80175c2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80175c8:	4b54      	ldr	r3, [pc, #336]	; (801771c <tcp_receive+0x888>)
 80175ca:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80175cc:	4b53      	ldr	r3, [pc, #332]	; (801771c <tcp_receive+0x888>)
 80175ce:	68db      	ldr	r3, [r3, #12]
 80175d0:	899b      	ldrh	r3, [r3, #12]
 80175d2:	b29b      	uxth	r3, r3
 80175d4:	4618      	mov	r0, r3
 80175d6:	f7f9 fbd1 	bl	8010d7c <lwip_htons>
 80175da:	4603      	mov	r3, r0
 80175dc:	b2db      	uxtb	r3, r3
 80175de:	f003 0302 	and.w	r3, r3, #2
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d005      	beq.n	80175f2 <tcp_receive+0x75e>
            inseg.len -= 1;
 80175e6:	4b4d      	ldr	r3, [pc, #308]	; (801771c <tcp_receive+0x888>)
 80175e8:	891b      	ldrh	r3, [r3, #8]
 80175ea:	3b01      	subs	r3, #1
 80175ec:	b29a      	uxth	r2, r3
 80175ee:	4b4b      	ldr	r3, [pc, #300]	; (801771c <tcp_receive+0x888>)
 80175f0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80175f2:	4b4a      	ldr	r3, [pc, #296]	; (801771c <tcp_receive+0x888>)
 80175f4:	685b      	ldr	r3, [r3, #4]
 80175f6:	4a49      	ldr	r2, [pc, #292]	; (801771c <tcp_receive+0x888>)
 80175f8:	8912      	ldrh	r2, [r2, #8]
 80175fa:	4611      	mov	r1, r2
 80175fc:	4618      	mov	r0, r3
 80175fe:	f7fb fdc5 	bl	801318c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017602:	4b46      	ldr	r3, [pc, #280]	; (801771c <tcp_receive+0x888>)
 8017604:	891c      	ldrh	r4, [r3, #8]
 8017606:	4b45      	ldr	r3, [pc, #276]	; (801771c <tcp_receive+0x888>)
 8017608:	68db      	ldr	r3, [r3, #12]
 801760a:	899b      	ldrh	r3, [r3, #12]
 801760c:	b29b      	uxth	r3, r3
 801760e:	4618      	mov	r0, r3
 8017610:	f7f9 fbb4 	bl	8010d7c <lwip_htons>
 8017614:	4603      	mov	r3, r0
 8017616:	b2db      	uxtb	r3, r3
 8017618:	f003 0303 	and.w	r3, r3, #3
 801761c:	2b00      	cmp	r3, #0
 801761e:	d001      	beq.n	8017624 <tcp_receive+0x790>
 8017620:	2301      	movs	r3, #1
 8017622:	e000      	b.n	8017626 <tcp_receive+0x792>
 8017624:	2300      	movs	r3, #0
 8017626:	4423      	add	r3, r4
 8017628:	b29a      	uxth	r2, r3
 801762a:	4b3d      	ldr	r3, [pc, #244]	; (8017720 <tcp_receive+0x88c>)
 801762c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801762e:	4b3c      	ldr	r3, [pc, #240]	; (8017720 <tcp_receive+0x88c>)
 8017630:	881b      	ldrh	r3, [r3, #0]
 8017632:	461a      	mov	r2, r3
 8017634:	4b38      	ldr	r3, [pc, #224]	; (8017718 <tcp_receive+0x884>)
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	441a      	add	r2, r3
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801763e:	6879      	ldr	r1, [r7, #4]
 8017640:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017642:	440b      	add	r3, r1
 8017644:	429a      	cmp	r2, r3
 8017646:	d006      	beq.n	8017656 <tcp_receive+0x7c2>
 8017648:	4b36      	ldr	r3, [pc, #216]	; (8017724 <tcp_receive+0x890>)
 801764a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801764e:	4936      	ldr	r1, [pc, #216]	; (8017728 <tcp_receive+0x894>)
 8017650:	4836      	ldr	r0, [pc, #216]	; (801772c <tcp_receive+0x898>)
 8017652:	f008 f94b 	bl	801f8ec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801765a:	2b00      	cmp	r3, #0
 801765c:	f000 80e7 	beq.w	801782e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017660:	4b2e      	ldr	r3, [pc, #184]	; (801771c <tcp_receive+0x888>)
 8017662:	68db      	ldr	r3, [r3, #12]
 8017664:	899b      	ldrh	r3, [r3, #12]
 8017666:	b29b      	uxth	r3, r3
 8017668:	4618      	mov	r0, r3
 801766a:	f7f9 fb87 	bl	8010d7c <lwip_htons>
 801766e:	4603      	mov	r3, r0
 8017670:	b2db      	uxtb	r3, r3
 8017672:	f003 0301 	and.w	r3, r3, #1
 8017676:	2b00      	cmp	r3, #0
 8017678:	d010      	beq.n	801769c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801767a:	e00a      	b.n	8017692 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017680:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017686:	681a      	ldr	r2, [r3, #0]
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801768c:	68f8      	ldr	r0, [r7, #12]
 801768e:	f7fd fcc8 	bl	8015022 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017696:	2b00      	cmp	r3, #0
 8017698:	d1f0      	bne.n	801767c <tcp_receive+0x7e8>
 801769a:	e0c8      	b.n	801782e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80176a0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80176a2:	e052      	b.n	801774a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80176a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176a6:	68db      	ldr	r3, [r3, #12]
 80176a8:	899b      	ldrh	r3, [r3, #12]
 80176aa:	b29b      	uxth	r3, r3
 80176ac:	4618      	mov	r0, r3
 80176ae:	f7f9 fb65 	bl	8010d7c <lwip_htons>
 80176b2:	4603      	mov	r3, r0
 80176b4:	b2db      	uxtb	r3, r3
 80176b6:	f003 0301 	and.w	r3, r3, #1
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d03d      	beq.n	801773a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80176be:	4b17      	ldr	r3, [pc, #92]	; (801771c <tcp_receive+0x888>)
 80176c0:	68db      	ldr	r3, [r3, #12]
 80176c2:	899b      	ldrh	r3, [r3, #12]
 80176c4:	b29b      	uxth	r3, r3
 80176c6:	4618      	mov	r0, r3
 80176c8:	f7f9 fb58 	bl	8010d7c <lwip_htons>
 80176cc:	4603      	mov	r3, r0
 80176ce:	b2db      	uxtb	r3, r3
 80176d0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d130      	bne.n	801773a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80176d8:	4b10      	ldr	r3, [pc, #64]	; (801771c <tcp_receive+0x888>)
 80176da:	68db      	ldr	r3, [r3, #12]
 80176dc:	899b      	ldrh	r3, [r3, #12]
 80176de:	b29c      	uxth	r4, r3
 80176e0:	2001      	movs	r0, #1
 80176e2:	f7f9 fb4b 	bl	8010d7c <lwip_htons>
 80176e6:	4603      	mov	r3, r0
 80176e8:	461a      	mov	r2, r3
 80176ea:	4b0c      	ldr	r3, [pc, #48]	; (801771c <tcp_receive+0x888>)
 80176ec:	68db      	ldr	r3, [r3, #12]
 80176ee:	4322      	orrs	r2, r4
 80176f0:	b292      	uxth	r2, r2
 80176f2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80176f4:	4b09      	ldr	r3, [pc, #36]	; (801771c <tcp_receive+0x888>)
 80176f6:	891c      	ldrh	r4, [r3, #8]
 80176f8:	4b08      	ldr	r3, [pc, #32]	; (801771c <tcp_receive+0x888>)
 80176fa:	68db      	ldr	r3, [r3, #12]
 80176fc:	899b      	ldrh	r3, [r3, #12]
 80176fe:	b29b      	uxth	r3, r3
 8017700:	4618      	mov	r0, r3
 8017702:	f7f9 fb3b 	bl	8010d7c <lwip_htons>
 8017706:	4603      	mov	r3, r0
 8017708:	b2db      	uxtb	r3, r3
 801770a:	f003 0303 	and.w	r3, r3, #3
 801770e:	2b00      	cmp	r3, #0
 8017710:	d00e      	beq.n	8017730 <tcp_receive+0x89c>
 8017712:	2301      	movs	r3, #1
 8017714:	e00d      	b.n	8017732 <tcp_receive+0x89e>
 8017716:	bf00      	nop
 8017718:	20005524 	.word	0x20005524
 801771c:	20005504 	.word	0x20005504
 8017720:	2000552e 	.word	0x2000552e
 8017724:	080237a0 	.word	0x080237a0
 8017728:	08023b48 	.word	0x08023b48
 801772c:	080237ec 	.word	0x080237ec
 8017730:	2300      	movs	r3, #0
 8017732:	4423      	add	r3, r4
 8017734:	b29a      	uxth	r2, r3
 8017736:	4b98      	ldr	r3, [pc, #608]	; (8017998 <tcp_receive+0xb04>)
 8017738:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801773a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801773c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801773e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8017744:	6938      	ldr	r0, [r7, #16]
 8017746:	f7fd fc6c 	bl	8015022 <tcp_seg_free>
            while (next &&
 801774a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801774c:	2b00      	cmp	r3, #0
 801774e:	d00e      	beq.n	801776e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017750:	4b91      	ldr	r3, [pc, #580]	; (8017998 <tcp_receive+0xb04>)
 8017752:	881b      	ldrh	r3, [r3, #0]
 8017754:	461a      	mov	r2, r3
 8017756:	4b91      	ldr	r3, [pc, #580]	; (801799c <tcp_receive+0xb08>)
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	441a      	add	r2, r3
 801775c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801775e:	68db      	ldr	r3, [r3, #12]
 8017760:	685b      	ldr	r3, [r3, #4]
 8017762:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017764:	8909      	ldrh	r1, [r1, #8]
 8017766:	440b      	add	r3, r1
 8017768:	1ad3      	subs	r3, r2, r3
            while (next &&
 801776a:	2b00      	cmp	r3, #0
 801776c:	da9a      	bge.n	80176a4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801776e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017770:	2b00      	cmp	r3, #0
 8017772:	d059      	beq.n	8017828 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017774:	4b88      	ldr	r3, [pc, #544]	; (8017998 <tcp_receive+0xb04>)
 8017776:	881b      	ldrh	r3, [r3, #0]
 8017778:	461a      	mov	r2, r3
 801777a:	4b88      	ldr	r3, [pc, #544]	; (801799c <tcp_receive+0xb08>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	441a      	add	r2, r3
 8017780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017782:	68db      	ldr	r3, [r3, #12]
 8017784:	685b      	ldr	r3, [r3, #4]
 8017786:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017788:	2b00      	cmp	r3, #0
 801778a:	dd4d      	ble.n	8017828 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801778c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801778e:	68db      	ldr	r3, [r3, #12]
 8017790:	685b      	ldr	r3, [r3, #4]
 8017792:	b29a      	uxth	r2, r3
 8017794:	4b81      	ldr	r3, [pc, #516]	; (801799c <tcp_receive+0xb08>)
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	b29b      	uxth	r3, r3
 801779a:	1ad3      	subs	r3, r2, r3
 801779c:	b29a      	uxth	r2, r3
 801779e:	4b80      	ldr	r3, [pc, #512]	; (80179a0 <tcp_receive+0xb0c>)
 80177a0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80177a2:	4b7f      	ldr	r3, [pc, #508]	; (80179a0 <tcp_receive+0xb0c>)
 80177a4:	68db      	ldr	r3, [r3, #12]
 80177a6:	899b      	ldrh	r3, [r3, #12]
 80177a8:	b29b      	uxth	r3, r3
 80177aa:	4618      	mov	r0, r3
 80177ac:	f7f9 fae6 	bl	8010d7c <lwip_htons>
 80177b0:	4603      	mov	r3, r0
 80177b2:	b2db      	uxtb	r3, r3
 80177b4:	f003 0302 	and.w	r3, r3, #2
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d005      	beq.n	80177c8 <tcp_receive+0x934>
                inseg.len -= 1;
 80177bc:	4b78      	ldr	r3, [pc, #480]	; (80179a0 <tcp_receive+0xb0c>)
 80177be:	891b      	ldrh	r3, [r3, #8]
 80177c0:	3b01      	subs	r3, #1
 80177c2:	b29a      	uxth	r2, r3
 80177c4:	4b76      	ldr	r3, [pc, #472]	; (80179a0 <tcp_receive+0xb0c>)
 80177c6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80177c8:	4b75      	ldr	r3, [pc, #468]	; (80179a0 <tcp_receive+0xb0c>)
 80177ca:	685b      	ldr	r3, [r3, #4]
 80177cc:	4a74      	ldr	r2, [pc, #464]	; (80179a0 <tcp_receive+0xb0c>)
 80177ce:	8912      	ldrh	r2, [r2, #8]
 80177d0:	4611      	mov	r1, r2
 80177d2:	4618      	mov	r0, r3
 80177d4:	f7fb fcda 	bl	801318c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80177d8:	4b71      	ldr	r3, [pc, #452]	; (80179a0 <tcp_receive+0xb0c>)
 80177da:	891c      	ldrh	r4, [r3, #8]
 80177dc:	4b70      	ldr	r3, [pc, #448]	; (80179a0 <tcp_receive+0xb0c>)
 80177de:	68db      	ldr	r3, [r3, #12]
 80177e0:	899b      	ldrh	r3, [r3, #12]
 80177e2:	b29b      	uxth	r3, r3
 80177e4:	4618      	mov	r0, r3
 80177e6:	f7f9 fac9 	bl	8010d7c <lwip_htons>
 80177ea:	4603      	mov	r3, r0
 80177ec:	b2db      	uxtb	r3, r3
 80177ee:	f003 0303 	and.w	r3, r3, #3
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d001      	beq.n	80177fa <tcp_receive+0x966>
 80177f6:	2301      	movs	r3, #1
 80177f8:	e000      	b.n	80177fc <tcp_receive+0x968>
 80177fa:	2300      	movs	r3, #0
 80177fc:	4423      	add	r3, r4
 80177fe:	b29a      	uxth	r2, r3
 8017800:	4b65      	ldr	r3, [pc, #404]	; (8017998 <tcp_receive+0xb04>)
 8017802:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017804:	4b64      	ldr	r3, [pc, #400]	; (8017998 <tcp_receive+0xb04>)
 8017806:	881b      	ldrh	r3, [r3, #0]
 8017808:	461a      	mov	r2, r3
 801780a:	4b64      	ldr	r3, [pc, #400]	; (801799c <tcp_receive+0xb08>)
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	441a      	add	r2, r3
 8017810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017812:	68db      	ldr	r3, [r3, #12]
 8017814:	685b      	ldr	r3, [r3, #4]
 8017816:	429a      	cmp	r2, r3
 8017818:	d006      	beq.n	8017828 <tcp_receive+0x994>
 801781a:	4b62      	ldr	r3, [pc, #392]	; (80179a4 <tcp_receive+0xb10>)
 801781c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8017820:	4961      	ldr	r1, [pc, #388]	; (80179a8 <tcp_receive+0xb14>)
 8017822:	4862      	ldr	r0, [pc, #392]	; (80179ac <tcp_receive+0xb18>)
 8017824:	f008 f862 	bl	801f8ec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801782c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801782e:	4b5a      	ldr	r3, [pc, #360]	; (8017998 <tcp_receive+0xb04>)
 8017830:	881b      	ldrh	r3, [r3, #0]
 8017832:	461a      	mov	r2, r3
 8017834:	4b59      	ldr	r3, [pc, #356]	; (801799c <tcp_receive+0xb08>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	441a      	add	r2, r3
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017842:	4b55      	ldr	r3, [pc, #340]	; (8017998 <tcp_receive+0xb04>)
 8017844:	881b      	ldrh	r3, [r3, #0]
 8017846:	429a      	cmp	r2, r3
 8017848:	d206      	bcs.n	8017858 <tcp_receive+0x9c4>
 801784a:	4b56      	ldr	r3, [pc, #344]	; (80179a4 <tcp_receive+0xb10>)
 801784c:	f240 6207 	movw	r2, #1543	; 0x607
 8017850:	4957      	ldr	r1, [pc, #348]	; (80179b0 <tcp_receive+0xb1c>)
 8017852:	4856      	ldr	r0, [pc, #344]	; (80179ac <tcp_receive+0xb18>)
 8017854:	f008 f84a 	bl	801f8ec <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801785c:	4b4e      	ldr	r3, [pc, #312]	; (8017998 <tcp_receive+0xb04>)
 801785e:	881b      	ldrh	r3, [r3, #0]
 8017860:	1ad3      	subs	r3, r2, r3
 8017862:	b29a      	uxth	r2, r3
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017868:	6878      	ldr	r0, [r7, #4]
 801786a:	f7fc fd9d 	bl	80143a8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801786e:	4b4c      	ldr	r3, [pc, #304]	; (80179a0 <tcp_receive+0xb0c>)
 8017870:	685b      	ldr	r3, [r3, #4]
 8017872:	891b      	ldrh	r3, [r3, #8]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d006      	beq.n	8017886 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8017878:	4b49      	ldr	r3, [pc, #292]	; (80179a0 <tcp_receive+0xb0c>)
 801787a:	685b      	ldr	r3, [r3, #4]
 801787c:	4a4d      	ldr	r2, [pc, #308]	; (80179b4 <tcp_receive+0xb20>)
 801787e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017880:	4b47      	ldr	r3, [pc, #284]	; (80179a0 <tcp_receive+0xb0c>)
 8017882:	2200      	movs	r2, #0
 8017884:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017886:	4b46      	ldr	r3, [pc, #280]	; (80179a0 <tcp_receive+0xb0c>)
 8017888:	68db      	ldr	r3, [r3, #12]
 801788a:	899b      	ldrh	r3, [r3, #12]
 801788c:	b29b      	uxth	r3, r3
 801788e:	4618      	mov	r0, r3
 8017890:	f7f9 fa74 	bl	8010d7c <lwip_htons>
 8017894:	4603      	mov	r3, r0
 8017896:	b2db      	uxtb	r3, r3
 8017898:	f003 0301 	and.w	r3, r3, #1
 801789c:	2b00      	cmp	r3, #0
 801789e:	f000 80b8 	beq.w	8017a12 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80178a2:	4b45      	ldr	r3, [pc, #276]	; (80179b8 <tcp_receive+0xb24>)
 80178a4:	781b      	ldrb	r3, [r3, #0]
 80178a6:	f043 0320 	orr.w	r3, r3, #32
 80178aa:	b2da      	uxtb	r2, r3
 80178ac:	4b42      	ldr	r3, [pc, #264]	; (80179b8 <tcp_receive+0xb24>)
 80178ae:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80178b0:	e0af      	b.n	8017a12 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80178b6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80178bc:	68db      	ldr	r3, [r3, #12]
 80178be:	685b      	ldr	r3, [r3, #4]
 80178c0:	4a36      	ldr	r2, [pc, #216]	; (801799c <tcp_receive+0xb08>)
 80178c2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80178c4:	68bb      	ldr	r3, [r7, #8]
 80178c6:	891b      	ldrh	r3, [r3, #8]
 80178c8:	461c      	mov	r4, r3
 80178ca:	68bb      	ldr	r3, [r7, #8]
 80178cc:	68db      	ldr	r3, [r3, #12]
 80178ce:	899b      	ldrh	r3, [r3, #12]
 80178d0:	b29b      	uxth	r3, r3
 80178d2:	4618      	mov	r0, r3
 80178d4:	f7f9 fa52 	bl	8010d7c <lwip_htons>
 80178d8:	4603      	mov	r3, r0
 80178da:	b2db      	uxtb	r3, r3
 80178dc:	f003 0303 	and.w	r3, r3, #3
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d001      	beq.n	80178e8 <tcp_receive+0xa54>
 80178e4:	2301      	movs	r3, #1
 80178e6:	e000      	b.n	80178ea <tcp_receive+0xa56>
 80178e8:	2300      	movs	r3, #0
 80178ea:	191a      	adds	r2, r3, r4
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178f0:	441a      	add	r2, r3
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178fa:	461c      	mov	r4, r3
 80178fc:	68bb      	ldr	r3, [r7, #8]
 80178fe:	891b      	ldrh	r3, [r3, #8]
 8017900:	461d      	mov	r5, r3
 8017902:	68bb      	ldr	r3, [r7, #8]
 8017904:	68db      	ldr	r3, [r3, #12]
 8017906:	899b      	ldrh	r3, [r3, #12]
 8017908:	b29b      	uxth	r3, r3
 801790a:	4618      	mov	r0, r3
 801790c:	f7f9 fa36 	bl	8010d7c <lwip_htons>
 8017910:	4603      	mov	r3, r0
 8017912:	b2db      	uxtb	r3, r3
 8017914:	f003 0303 	and.w	r3, r3, #3
 8017918:	2b00      	cmp	r3, #0
 801791a:	d001      	beq.n	8017920 <tcp_receive+0xa8c>
 801791c:	2301      	movs	r3, #1
 801791e:	e000      	b.n	8017922 <tcp_receive+0xa8e>
 8017920:	2300      	movs	r3, #0
 8017922:	442b      	add	r3, r5
 8017924:	429c      	cmp	r4, r3
 8017926:	d206      	bcs.n	8017936 <tcp_receive+0xaa2>
 8017928:	4b1e      	ldr	r3, [pc, #120]	; (80179a4 <tcp_receive+0xb10>)
 801792a:	f240 622b 	movw	r2, #1579	; 0x62b
 801792e:	4923      	ldr	r1, [pc, #140]	; (80179bc <tcp_receive+0xb28>)
 8017930:	481e      	ldr	r0, [pc, #120]	; (80179ac <tcp_receive+0xb18>)
 8017932:	f007 ffdb 	bl	801f8ec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8017936:	68bb      	ldr	r3, [r7, #8]
 8017938:	891b      	ldrh	r3, [r3, #8]
 801793a:	461c      	mov	r4, r3
 801793c:	68bb      	ldr	r3, [r7, #8]
 801793e:	68db      	ldr	r3, [r3, #12]
 8017940:	899b      	ldrh	r3, [r3, #12]
 8017942:	b29b      	uxth	r3, r3
 8017944:	4618      	mov	r0, r3
 8017946:	f7f9 fa19 	bl	8010d7c <lwip_htons>
 801794a:	4603      	mov	r3, r0
 801794c:	b2db      	uxtb	r3, r3
 801794e:	f003 0303 	and.w	r3, r3, #3
 8017952:	2b00      	cmp	r3, #0
 8017954:	d001      	beq.n	801795a <tcp_receive+0xac6>
 8017956:	2301      	movs	r3, #1
 8017958:	e000      	b.n	801795c <tcp_receive+0xac8>
 801795a:	2300      	movs	r3, #0
 801795c:	1919      	adds	r1, r3, r4
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017962:	b28b      	uxth	r3, r1
 8017964:	1ad3      	subs	r3, r2, r3
 8017966:	b29a      	uxth	r2, r3
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801796c:	6878      	ldr	r0, [r7, #4]
 801796e:	f7fc fd1b 	bl	80143a8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017972:	68bb      	ldr	r3, [r7, #8]
 8017974:	685b      	ldr	r3, [r3, #4]
 8017976:	891b      	ldrh	r3, [r3, #8]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d028      	beq.n	80179ce <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801797c:	4b0d      	ldr	r3, [pc, #52]	; (80179b4 <tcp_receive+0xb20>)
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d01d      	beq.n	80179c0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017984:	4b0b      	ldr	r3, [pc, #44]	; (80179b4 <tcp_receive+0xb20>)
 8017986:	681a      	ldr	r2, [r3, #0]
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	685b      	ldr	r3, [r3, #4]
 801798c:	4619      	mov	r1, r3
 801798e:	4610      	mov	r0, r2
 8017990:	f7fb fe50 	bl	8013634 <pbuf_cat>
 8017994:	e018      	b.n	80179c8 <tcp_receive+0xb34>
 8017996:	bf00      	nop
 8017998:	2000552e 	.word	0x2000552e
 801799c:	20005524 	.word	0x20005524
 80179a0:	20005504 	.word	0x20005504
 80179a4:	080237a0 	.word	0x080237a0
 80179a8:	08023b80 	.word	0x08023b80
 80179ac:	080237ec 	.word	0x080237ec
 80179b0:	08023bbc 	.word	0x08023bbc
 80179b4:	20005534 	.word	0x20005534
 80179b8:	20005531 	.word	0x20005531
 80179bc:	08023bdc 	.word	0x08023bdc
            } else {
              recv_data = cseg->p;
 80179c0:	68bb      	ldr	r3, [r7, #8]
 80179c2:	685b      	ldr	r3, [r3, #4]
 80179c4:	4a70      	ldr	r2, [pc, #448]	; (8017b88 <tcp_receive+0xcf4>)
 80179c6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80179c8:	68bb      	ldr	r3, [r7, #8]
 80179ca:	2200      	movs	r2, #0
 80179cc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80179ce:	68bb      	ldr	r3, [r7, #8]
 80179d0:	68db      	ldr	r3, [r3, #12]
 80179d2:	899b      	ldrh	r3, [r3, #12]
 80179d4:	b29b      	uxth	r3, r3
 80179d6:	4618      	mov	r0, r3
 80179d8:	f7f9 f9d0 	bl	8010d7c <lwip_htons>
 80179dc:	4603      	mov	r3, r0
 80179de:	b2db      	uxtb	r3, r3
 80179e0:	f003 0301 	and.w	r3, r3, #1
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d00d      	beq.n	8017a04 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80179e8:	4b68      	ldr	r3, [pc, #416]	; (8017b8c <tcp_receive+0xcf8>)
 80179ea:	781b      	ldrb	r3, [r3, #0]
 80179ec:	f043 0320 	orr.w	r3, r3, #32
 80179f0:	b2da      	uxtb	r2, r3
 80179f2:	4b66      	ldr	r3, [pc, #408]	; (8017b8c <tcp_receive+0xcf8>)
 80179f4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	7d1b      	ldrb	r3, [r3, #20]
 80179fa:	2b04      	cmp	r3, #4
 80179fc:	d102      	bne.n	8017a04 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	2207      	movs	r2, #7
 8017a02:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017a04:	68bb      	ldr	r3, [r7, #8]
 8017a06:	681a      	ldr	r2, [r3, #0]
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8017a0c:	68b8      	ldr	r0, [r7, #8]
 8017a0e:	f7fd fb08 	bl	8015022 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d008      	beq.n	8017a2c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a1e:	68db      	ldr	r3, [r3, #12]
 8017a20:	685a      	ldr	r2, [r3, #4]
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8017a26:	429a      	cmp	r2, r3
 8017a28:	f43f af43 	beq.w	80178b2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	8b5b      	ldrh	r3, [r3, #26]
 8017a30:	f003 0301 	and.w	r3, r3, #1
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d00e      	beq.n	8017a56 <tcp_receive+0xbc2>
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	8b5b      	ldrh	r3, [r3, #26]
 8017a3c:	f023 0301 	bic.w	r3, r3, #1
 8017a40:	b29a      	uxth	r2, r3
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	835a      	strh	r2, [r3, #26]
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	8b5b      	ldrh	r3, [r3, #26]
 8017a4a:	f043 0302 	orr.w	r3, r3, #2
 8017a4e:	b29a      	uxth	r2, r3
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017a54:	e188      	b.n	8017d68 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	8b5b      	ldrh	r3, [r3, #26]
 8017a5a:	f043 0301 	orr.w	r3, r3, #1
 8017a5e:	b29a      	uxth	r2, r3
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017a64:	e180      	b.n	8017d68 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d106      	bne.n	8017a7c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017a6e:	4848      	ldr	r0, [pc, #288]	; (8017b90 <tcp_receive+0xcfc>)
 8017a70:	f7fd faf0 	bl	8015054 <tcp_seg_copy>
 8017a74:	4602      	mov	r2, r0
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	675a      	str	r2, [r3, #116]	; 0x74
 8017a7a:	e16d      	b.n	8017d58 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a84:	63bb      	str	r3, [r7, #56]	; 0x38
 8017a86:	e157      	b.n	8017d38 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8017a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a8a:	68db      	ldr	r3, [r3, #12]
 8017a8c:	685a      	ldr	r2, [r3, #4]
 8017a8e:	4b41      	ldr	r3, [pc, #260]	; (8017b94 <tcp_receive+0xd00>)
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	429a      	cmp	r2, r3
 8017a94:	d11d      	bne.n	8017ad2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8017a96:	4b3e      	ldr	r3, [pc, #248]	; (8017b90 <tcp_receive+0xcfc>)
 8017a98:	891a      	ldrh	r2, [r3, #8]
 8017a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a9c:	891b      	ldrh	r3, [r3, #8]
 8017a9e:	429a      	cmp	r2, r3
 8017aa0:	f240 814f 	bls.w	8017d42 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017aa4:	483a      	ldr	r0, [pc, #232]	; (8017b90 <tcp_receive+0xcfc>)
 8017aa6:	f7fd fad5 	bl	8015054 <tcp_seg_copy>
 8017aaa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017aac:	697b      	ldr	r3, [r7, #20]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	f000 8149 	beq.w	8017d46 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8017ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d003      	beq.n	8017ac2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8017aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017abc:	697a      	ldr	r2, [r7, #20]
 8017abe:	601a      	str	r2, [r3, #0]
 8017ac0:	e002      	b.n	8017ac8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	697a      	ldr	r2, [r7, #20]
 8017ac6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8017ac8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017aca:	6978      	ldr	r0, [r7, #20]
 8017acc:	f7ff f8de 	bl	8016c8c <tcp_oos_insert_segment>
                }
                break;
 8017ad0:	e139      	b.n	8017d46 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d117      	bne.n	8017b08 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017ad8:	4b2e      	ldr	r3, [pc, #184]	; (8017b94 <tcp_receive+0xd00>)
 8017ada:	681a      	ldr	r2, [r3, #0]
 8017adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ade:	68db      	ldr	r3, [r3, #12]
 8017ae0:	685b      	ldr	r3, [r3, #4]
 8017ae2:	1ad3      	subs	r3, r2, r3
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	da57      	bge.n	8017b98 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017ae8:	4829      	ldr	r0, [pc, #164]	; (8017b90 <tcp_receive+0xcfc>)
 8017aea:	f7fd fab3 	bl	8015054 <tcp_seg_copy>
 8017aee:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017af0:	69bb      	ldr	r3, [r7, #24]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	f000 8129 	beq.w	8017d4a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	69ba      	ldr	r2, [r7, #24]
 8017afc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017afe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017b00:	69b8      	ldr	r0, [r7, #24]
 8017b02:	f7ff f8c3 	bl	8016c8c <tcp_oos_insert_segment>
                  }
                  break;
 8017b06:	e120      	b.n	8017d4a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017b08:	4b22      	ldr	r3, [pc, #136]	; (8017b94 <tcp_receive+0xd00>)
 8017b0a:	681a      	ldr	r2, [r3, #0]
 8017b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b0e:	68db      	ldr	r3, [r3, #12]
 8017b10:	685b      	ldr	r3, [r3, #4]
 8017b12:	1ad3      	subs	r3, r2, r3
 8017b14:	3b01      	subs	r3, #1
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	db3e      	blt.n	8017b98 <tcp_receive+0xd04>
 8017b1a:	4b1e      	ldr	r3, [pc, #120]	; (8017b94 <tcp_receive+0xd00>)
 8017b1c:	681a      	ldr	r2, [r3, #0]
 8017b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b20:	68db      	ldr	r3, [r3, #12]
 8017b22:	685b      	ldr	r3, [r3, #4]
 8017b24:	1ad3      	subs	r3, r2, r3
 8017b26:	3301      	adds	r3, #1
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	dc35      	bgt.n	8017b98 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017b2c:	4818      	ldr	r0, [pc, #96]	; (8017b90 <tcp_receive+0xcfc>)
 8017b2e:	f7fd fa91 	bl	8015054 <tcp_seg_copy>
 8017b32:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	f000 8109 	beq.w	8017d4e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b3e:	68db      	ldr	r3, [r3, #12]
 8017b40:	685b      	ldr	r3, [r3, #4]
 8017b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b44:	8912      	ldrh	r2, [r2, #8]
 8017b46:	441a      	add	r2, r3
 8017b48:	4b12      	ldr	r3, [pc, #72]	; (8017b94 <tcp_receive+0xd00>)
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	1ad3      	subs	r3, r2, r3
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	dd12      	ble.n	8017b78 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017b52:	4b10      	ldr	r3, [pc, #64]	; (8017b94 <tcp_receive+0xd00>)
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	b29a      	uxth	r2, r3
 8017b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b5a:	68db      	ldr	r3, [r3, #12]
 8017b5c:	685b      	ldr	r3, [r3, #4]
 8017b5e:	b29b      	uxth	r3, r3
 8017b60:	1ad3      	subs	r3, r2, r3
 8017b62:	b29a      	uxth	r2, r3
 8017b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b66:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b6a:	685a      	ldr	r2, [r3, #4]
 8017b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b6e:	891b      	ldrh	r3, [r3, #8]
 8017b70:	4619      	mov	r1, r3
 8017b72:	4610      	mov	r0, r2
 8017b74:	f7fb fb0a 	bl	801318c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b7a:	69fa      	ldr	r2, [r7, #28]
 8017b7c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017b7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017b80:	69f8      	ldr	r0, [r7, #28]
 8017b82:	f7ff f883 	bl	8016c8c <tcp_oos_insert_segment>
                  }
                  break;
 8017b86:	e0e2      	b.n	8017d4e <tcp_receive+0xeba>
 8017b88:	20005534 	.word	0x20005534
 8017b8c:	20005531 	.word	0x20005531
 8017b90:	20005504 	.word	0x20005504
 8017b94:	20005524 	.word	0x20005524
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8017b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b9a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	f040 80c6 	bne.w	8017d32 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8017ba6:	4b80      	ldr	r3, [pc, #512]	; (8017da8 <tcp_receive+0xf14>)
 8017ba8:	681a      	ldr	r2, [r3, #0]
 8017baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bac:	68db      	ldr	r3, [r3, #12]
 8017bae:	685b      	ldr	r3, [r3, #4]
 8017bb0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	f340 80bd 	ble.w	8017d32 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bba:	68db      	ldr	r3, [r3, #12]
 8017bbc:	899b      	ldrh	r3, [r3, #12]
 8017bbe:	b29b      	uxth	r3, r3
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	f7f9 f8db 	bl	8010d7c <lwip_htons>
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	b2db      	uxtb	r3, r3
 8017bca:	f003 0301 	and.w	r3, r3, #1
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	f040 80bf 	bne.w	8017d52 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017bd4:	4875      	ldr	r0, [pc, #468]	; (8017dac <tcp_receive+0xf18>)
 8017bd6:	f7fd fa3d 	bl	8015054 <tcp_seg_copy>
 8017bda:	4602      	mov	r2, r0
 8017bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bde:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	f000 80b6 	beq.w	8017d56 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8017bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bec:	68db      	ldr	r3, [r3, #12]
 8017bee:	685b      	ldr	r3, [r3, #4]
 8017bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017bf2:	8912      	ldrh	r2, [r2, #8]
 8017bf4:	441a      	add	r2, r3
 8017bf6:	4b6c      	ldr	r3, [pc, #432]	; (8017da8 <tcp_receive+0xf14>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	1ad3      	subs	r3, r2, r3
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	dd12      	ble.n	8017c26 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017c00:	4b69      	ldr	r3, [pc, #420]	; (8017da8 <tcp_receive+0xf14>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	b29a      	uxth	r2, r3
 8017c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c08:	68db      	ldr	r3, [r3, #12]
 8017c0a:	685b      	ldr	r3, [r3, #4]
 8017c0c:	b29b      	uxth	r3, r3
 8017c0e:	1ad3      	subs	r3, r2, r3
 8017c10:	b29a      	uxth	r2, r3
 8017c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c14:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8017c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c18:	685a      	ldr	r2, [r3, #4]
 8017c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c1c:	891b      	ldrh	r3, [r3, #8]
 8017c1e:	4619      	mov	r1, r3
 8017c20:	4610      	mov	r0, r2
 8017c22:	f7fb fab3 	bl	801318c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8017c26:	4b62      	ldr	r3, [pc, #392]	; (8017db0 <tcp_receive+0xf1c>)
 8017c28:	881b      	ldrh	r3, [r3, #0]
 8017c2a:	461a      	mov	r2, r3
 8017c2c:	4b5e      	ldr	r3, [pc, #376]	; (8017da8 <tcp_receive+0xf14>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	441a      	add	r2, r3
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c36:	6879      	ldr	r1, [r7, #4]
 8017c38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017c3a:	440b      	add	r3, r1
 8017c3c:	1ad3      	subs	r3, r2, r3
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	f340 8089 	ble.w	8017d56 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	68db      	ldr	r3, [r3, #12]
 8017c4a:	899b      	ldrh	r3, [r3, #12]
 8017c4c:	b29b      	uxth	r3, r3
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f7f9 f894 	bl	8010d7c <lwip_htons>
 8017c54:	4603      	mov	r3, r0
 8017c56:	b2db      	uxtb	r3, r3
 8017c58:	f003 0301 	and.w	r3, r3, #1
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d022      	beq.n	8017ca6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	68db      	ldr	r3, [r3, #12]
 8017c66:	899b      	ldrh	r3, [r3, #12]
 8017c68:	b29b      	uxth	r3, r3
 8017c6a:	b21b      	sxth	r3, r3
 8017c6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017c70:	b21c      	sxth	r4, r3
 8017c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	68db      	ldr	r3, [r3, #12]
 8017c78:	899b      	ldrh	r3, [r3, #12]
 8017c7a:	b29b      	uxth	r3, r3
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	f7f9 f87d 	bl	8010d7c <lwip_htons>
 8017c82:	4603      	mov	r3, r0
 8017c84:	b2db      	uxtb	r3, r3
 8017c86:	b29b      	uxth	r3, r3
 8017c88:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f7f9 f874 	bl	8010d7c <lwip_htons>
 8017c94:	4603      	mov	r3, r0
 8017c96:	b21b      	sxth	r3, r3
 8017c98:	4323      	orrs	r3, r4
 8017c9a:	b21a      	sxth	r2, r3
 8017c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	68db      	ldr	r3, [r3, #12]
 8017ca2:	b292      	uxth	r2, r2
 8017ca4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017caa:	b29a      	uxth	r2, r3
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017cb0:	4413      	add	r3, r2
 8017cb2:	b299      	uxth	r1, r3
 8017cb4:	4b3c      	ldr	r3, [pc, #240]	; (8017da8 <tcp_receive+0xf14>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	b29a      	uxth	r2, r3
 8017cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	1a8a      	subs	r2, r1, r2
 8017cc0:	b292      	uxth	r2, r2
 8017cc2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	685a      	ldr	r2, [r3, #4]
 8017cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	891b      	ldrh	r3, [r3, #8]
 8017cd0:	4619      	mov	r1, r3
 8017cd2:	4610      	mov	r0, r2
 8017cd4:	f7fb fa5a 	bl	801318c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	891c      	ldrh	r4, [r3, #8]
 8017cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	68db      	ldr	r3, [r3, #12]
 8017ce4:	899b      	ldrh	r3, [r3, #12]
 8017ce6:	b29b      	uxth	r3, r3
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f7f9 f847 	bl	8010d7c <lwip_htons>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	b2db      	uxtb	r3, r3
 8017cf2:	f003 0303 	and.w	r3, r3, #3
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d001      	beq.n	8017cfe <tcp_receive+0xe6a>
 8017cfa:	2301      	movs	r3, #1
 8017cfc:	e000      	b.n	8017d00 <tcp_receive+0xe6c>
 8017cfe:	2300      	movs	r3, #0
 8017d00:	4423      	add	r3, r4
 8017d02:	b29a      	uxth	r2, r3
 8017d04:	4b2a      	ldr	r3, [pc, #168]	; (8017db0 <tcp_receive+0xf1c>)
 8017d06:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017d08:	4b29      	ldr	r3, [pc, #164]	; (8017db0 <tcp_receive+0xf1c>)
 8017d0a:	881b      	ldrh	r3, [r3, #0]
 8017d0c:	461a      	mov	r2, r3
 8017d0e:	4b26      	ldr	r3, [pc, #152]	; (8017da8 <tcp_receive+0xf14>)
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	441a      	add	r2, r3
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d18:	6879      	ldr	r1, [r7, #4]
 8017d1a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017d1c:	440b      	add	r3, r1
 8017d1e:	429a      	cmp	r2, r3
 8017d20:	d019      	beq.n	8017d56 <tcp_receive+0xec2>
 8017d22:	4b24      	ldr	r3, [pc, #144]	; (8017db4 <tcp_receive+0xf20>)
 8017d24:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8017d28:	4923      	ldr	r1, [pc, #140]	; (8017db8 <tcp_receive+0xf24>)
 8017d2a:	4824      	ldr	r0, [pc, #144]	; (8017dbc <tcp_receive+0xf28>)
 8017d2c:	f007 fdde 	bl	801f8ec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017d30:	e011      	b.n	8017d56 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8017d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	f47f aea4 	bne.w	8017a88 <tcp_receive+0xbf4>
 8017d40:	e00a      	b.n	8017d58 <tcp_receive+0xec4>
                break;
 8017d42:	bf00      	nop
 8017d44:	e008      	b.n	8017d58 <tcp_receive+0xec4>
                break;
 8017d46:	bf00      	nop
 8017d48:	e006      	b.n	8017d58 <tcp_receive+0xec4>
                  break;
 8017d4a:	bf00      	nop
 8017d4c:	e004      	b.n	8017d58 <tcp_receive+0xec4>
                  break;
 8017d4e:	bf00      	nop
 8017d50:	e002      	b.n	8017d58 <tcp_receive+0xec4>
                  break;
 8017d52:	bf00      	nop
 8017d54:	e000      	b.n	8017d58 <tcp_receive+0xec4>
                break;
 8017d56:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8017d58:	6878      	ldr	r0, [r7, #4]
 8017d5a:	f001 fe8b 	bl	8019a74 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017d5e:	e003      	b.n	8017d68 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017d60:	6878      	ldr	r0, [r7, #4]
 8017d62:	f001 fe87 	bl	8019a74 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017d66:	e01a      	b.n	8017d9e <tcp_receive+0xf0a>
 8017d68:	e019      	b.n	8017d9e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8017d6a:	4b0f      	ldr	r3, [pc, #60]	; (8017da8 <tcp_receive+0xf14>)
 8017d6c:	681a      	ldr	r2, [r3, #0]
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d72:	1ad3      	subs	r3, r2, r3
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	db0a      	blt.n	8017d8e <tcp_receive+0xefa>
 8017d78:	4b0b      	ldr	r3, [pc, #44]	; (8017da8 <tcp_receive+0xf14>)
 8017d7a:	681a      	ldr	r2, [r3, #0]
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d80:	6879      	ldr	r1, [r7, #4]
 8017d82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017d84:	440b      	add	r3, r1
 8017d86:	1ad3      	subs	r3, r2, r3
 8017d88:	3301      	adds	r3, #1
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	dd07      	ble.n	8017d9e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	8b5b      	ldrh	r3, [r3, #26]
 8017d92:	f043 0302 	orr.w	r3, r3, #2
 8017d96:	b29a      	uxth	r2, r3
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8017d9c:	e7ff      	b.n	8017d9e <tcp_receive+0xf0a>
 8017d9e:	bf00      	nop
 8017da0:	3750      	adds	r7, #80	; 0x50
 8017da2:	46bd      	mov	sp, r7
 8017da4:	bdb0      	pop	{r4, r5, r7, pc}
 8017da6:	bf00      	nop
 8017da8:	20005524 	.word	0x20005524
 8017dac:	20005504 	.word	0x20005504
 8017db0:	2000552e 	.word	0x2000552e
 8017db4:	080237a0 	.word	0x080237a0
 8017db8:	08023b48 	.word	0x08023b48
 8017dbc:	080237ec 	.word	0x080237ec

08017dc0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8017dc0:	b480      	push	{r7}
 8017dc2:	b083      	sub	sp, #12
 8017dc4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017dc6:	4b15      	ldr	r3, [pc, #84]	; (8017e1c <tcp_get_next_optbyte+0x5c>)
 8017dc8:	881b      	ldrh	r3, [r3, #0]
 8017dca:	1c5a      	adds	r2, r3, #1
 8017dcc:	b291      	uxth	r1, r2
 8017dce:	4a13      	ldr	r2, [pc, #76]	; (8017e1c <tcp_get_next_optbyte+0x5c>)
 8017dd0:	8011      	strh	r1, [r2, #0]
 8017dd2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017dd4:	4b12      	ldr	r3, [pc, #72]	; (8017e20 <tcp_get_next_optbyte+0x60>)
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d004      	beq.n	8017de6 <tcp_get_next_optbyte+0x26>
 8017ddc:	4b11      	ldr	r3, [pc, #68]	; (8017e24 <tcp_get_next_optbyte+0x64>)
 8017dde:	881b      	ldrh	r3, [r3, #0]
 8017de0:	88fa      	ldrh	r2, [r7, #6]
 8017de2:	429a      	cmp	r2, r3
 8017de4:	d208      	bcs.n	8017df8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017de6:	4b10      	ldr	r3, [pc, #64]	; (8017e28 <tcp_get_next_optbyte+0x68>)
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	3314      	adds	r3, #20
 8017dec:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8017dee:	88fb      	ldrh	r3, [r7, #6]
 8017df0:	683a      	ldr	r2, [r7, #0]
 8017df2:	4413      	add	r3, r2
 8017df4:	781b      	ldrb	r3, [r3, #0]
 8017df6:	e00b      	b.n	8017e10 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017df8:	88fb      	ldrh	r3, [r7, #6]
 8017dfa:	b2da      	uxtb	r2, r3
 8017dfc:	4b09      	ldr	r3, [pc, #36]	; (8017e24 <tcp_get_next_optbyte+0x64>)
 8017dfe:	881b      	ldrh	r3, [r3, #0]
 8017e00:	b2db      	uxtb	r3, r3
 8017e02:	1ad3      	subs	r3, r2, r3
 8017e04:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017e06:	4b06      	ldr	r3, [pc, #24]	; (8017e20 <tcp_get_next_optbyte+0x60>)
 8017e08:	681a      	ldr	r2, [r3, #0]
 8017e0a:	797b      	ldrb	r3, [r7, #5]
 8017e0c:	4413      	add	r3, r2
 8017e0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017e10:	4618      	mov	r0, r3
 8017e12:	370c      	adds	r7, #12
 8017e14:	46bd      	mov	sp, r7
 8017e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1a:	4770      	bx	lr
 8017e1c:	20005520 	.word	0x20005520
 8017e20:	2000551c 	.word	0x2000551c
 8017e24:	2000551a 	.word	0x2000551a
 8017e28:	20005514 	.word	0x20005514

08017e2c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b084      	sub	sp, #16
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d106      	bne.n	8017e48 <tcp_parseopt+0x1c>
 8017e3a:	4b32      	ldr	r3, [pc, #200]	; (8017f04 <tcp_parseopt+0xd8>)
 8017e3c:	f240 727d 	movw	r2, #1917	; 0x77d
 8017e40:	4931      	ldr	r1, [pc, #196]	; (8017f08 <tcp_parseopt+0xdc>)
 8017e42:	4832      	ldr	r0, [pc, #200]	; (8017f0c <tcp_parseopt+0xe0>)
 8017e44:	f007 fd52 	bl	801f8ec <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017e48:	4b31      	ldr	r3, [pc, #196]	; (8017f10 <tcp_parseopt+0xe4>)
 8017e4a:	881b      	ldrh	r3, [r3, #0]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d055      	beq.n	8017efc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017e50:	4b30      	ldr	r3, [pc, #192]	; (8017f14 <tcp_parseopt+0xe8>)
 8017e52:	2200      	movs	r2, #0
 8017e54:	801a      	strh	r2, [r3, #0]
 8017e56:	e045      	b.n	8017ee4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8017e58:	f7ff ffb2 	bl	8017dc0 <tcp_get_next_optbyte>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017e60:	7bfb      	ldrb	r3, [r7, #15]
 8017e62:	2b02      	cmp	r3, #2
 8017e64:	d006      	beq.n	8017e74 <tcp_parseopt+0x48>
 8017e66:	2b02      	cmp	r3, #2
 8017e68:	dc2b      	bgt.n	8017ec2 <tcp_parseopt+0x96>
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d041      	beq.n	8017ef2 <tcp_parseopt+0xc6>
 8017e6e:	2b01      	cmp	r3, #1
 8017e70:	d127      	bne.n	8017ec2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8017e72:	e037      	b.n	8017ee4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017e74:	f7ff ffa4 	bl	8017dc0 <tcp_get_next_optbyte>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	2b04      	cmp	r3, #4
 8017e7c:	d13b      	bne.n	8017ef6 <tcp_parseopt+0xca>
 8017e7e:	4b25      	ldr	r3, [pc, #148]	; (8017f14 <tcp_parseopt+0xe8>)
 8017e80:	881b      	ldrh	r3, [r3, #0]
 8017e82:	3301      	adds	r3, #1
 8017e84:	4a22      	ldr	r2, [pc, #136]	; (8017f10 <tcp_parseopt+0xe4>)
 8017e86:	8812      	ldrh	r2, [r2, #0]
 8017e88:	4293      	cmp	r3, r2
 8017e8a:	da34      	bge.n	8017ef6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017e8c:	f7ff ff98 	bl	8017dc0 <tcp_get_next_optbyte>
 8017e90:	4603      	mov	r3, r0
 8017e92:	b29b      	uxth	r3, r3
 8017e94:	021b      	lsls	r3, r3, #8
 8017e96:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017e98:	f7ff ff92 	bl	8017dc0 <tcp_get_next_optbyte>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	b29a      	uxth	r2, r3
 8017ea0:	89bb      	ldrh	r3, [r7, #12]
 8017ea2:	4313      	orrs	r3, r2
 8017ea4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8017ea6:	89bb      	ldrh	r3, [r7, #12]
 8017ea8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017eac:	d804      	bhi.n	8017eb8 <tcp_parseopt+0x8c>
 8017eae:	89bb      	ldrh	r3, [r7, #12]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d001      	beq.n	8017eb8 <tcp_parseopt+0x8c>
 8017eb4:	89ba      	ldrh	r2, [r7, #12]
 8017eb6:	e001      	b.n	8017ebc <tcp_parseopt+0x90>
 8017eb8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8017ec0:	e010      	b.n	8017ee4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8017ec2:	f7ff ff7d 	bl	8017dc0 <tcp_get_next_optbyte>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017eca:	7afb      	ldrb	r3, [r7, #11]
 8017ecc:	2b01      	cmp	r3, #1
 8017ece:	d914      	bls.n	8017efa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017ed0:	7afb      	ldrb	r3, [r7, #11]
 8017ed2:	b29a      	uxth	r2, r3
 8017ed4:	4b0f      	ldr	r3, [pc, #60]	; (8017f14 <tcp_parseopt+0xe8>)
 8017ed6:	881b      	ldrh	r3, [r3, #0]
 8017ed8:	4413      	add	r3, r2
 8017eda:	b29b      	uxth	r3, r3
 8017edc:	3b02      	subs	r3, #2
 8017ede:	b29a      	uxth	r2, r3
 8017ee0:	4b0c      	ldr	r3, [pc, #48]	; (8017f14 <tcp_parseopt+0xe8>)
 8017ee2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017ee4:	4b0b      	ldr	r3, [pc, #44]	; (8017f14 <tcp_parseopt+0xe8>)
 8017ee6:	881a      	ldrh	r2, [r3, #0]
 8017ee8:	4b09      	ldr	r3, [pc, #36]	; (8017f10 <tcp_parseopt+0xe4>)
 8017eea:	881b      	ldrh	r3, [r3, #0]
 8017eec:	429a      	cmp	r2, r3
 8017eee:	d3b3      	bcc.n	8017e58 <tcp_parseopt+0x2c>
 8017ef0:	e004      	b.n	8017efc <tcp_parseopt+0xd0>
          return;
 8017ef2:	bf00      	nop
 8017ef4:	e002      	b.n	8017efc <tcp_parseopt+0xd0>
            return;
 8017ef6:	bf00      	nop
 8017ef8:	e000      	b.n	8017efc <tcp_parseopt+0xd0>
            return;
 8017efa:	bf00      	nop
      }
    }
  }
}
 8017efc:	3710      	adds	r7, #16
 8017efe:	46bd      	mov	sp, r7
 8017f00:	bd80      	pop	{r7, pc}
 8017f02:	bf00      	nop
 8017f04:	080237a0 	.word	0x080237a0
 8017f08:	08023c04 	.word	0x08023c04
 8017f0c:	080237ec 	.word	0x080237ec
 8017f10:	20005518 	.word	0x20005518
 8017f14:	20005520 	.word	0x20005520

08017f18 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017f18:	b480      	push	{r7}
 8017f1a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017f1c:	4b05      	ldr	r3, [pc, #20]	; (8017f34 <tcp_trigger_input_pcb_close+0x1c>)
 8017f1e:	781b      	ldrb	r3, [r3, #0]
 8017f20:	f043 0310 	orr.w	r3, r3, #16
 8017f24:	b2da      	uxtb	r2, r3
 8017f26:	4b03      	ldr	r3, [pc, #12]	; (8017f34 <tcp_trigger_input_pcb_close+0x1c>)
 8017f28:	701a      	strb	r2, [r3, #0]
}
 8017f2a:	bf00      	nop
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f32:	4770      	bx	lr
 8017f34:	20005531 	.word	0x20005531

08017f38 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b084      	sub	sp, #16
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	60f8      	str	r0, [r7, #12]
 8017f40:	60b9      	str	r1, [r7, #8]
 8017f42:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d00a      	beq.n	8017f60 <tcp_route+0x28>
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	7a1b      	ldrb	r3, [r3, #8]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d006      	beq.n	8017f60 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	7a1b      	ldrb	r3, [r3, #8]
 8017f56:	4618      	mov	r0, r3
 8017f58:	f7fa ff10 	bl	8012d7c <netif_get_by_index>
 8017f5c:	4603      	mov	r3, r0
 8017f5e:	e003      	b.n	8017f68 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017f60:	6878      	ldr	r0, [r7, #4]
 8017f62:	f005 fdb1 	bl	801dac8 <ip4_route>
 8017f66:	4603      	mov	r3, r0
  }
}
 8017f68:	4618      	mov	r0, r3
 8017f6a:	3710      	adds	r7, #16
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	bd80      	pop	{r7, pc}

08017f70 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017f70:	b590      	push	{r4, r7, lr}
 8017f72:	b087      	sub	sp, #28
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	60f8      	str	r0, [r7, #12]
 8017f78:	60b9      	str	r1, [r7, #8]
 8017f7a:	603b      	str	r3, [r7, #0]
 8017f7c:	4613      	mov	r3, r2
 8017f7e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d105      	bne.n	8017f92 <tcp_create_segment+0x22>
 8017f86:	4b44      	ldr	r3, [pc, #272]	; (8018098 <tcp_create_segment+0x128>)
 8017f88:	22a3      	movs	r2, #163	; 0xa3
 8017f8a:	4944      	ldr	r1, [pc, #272]	; (801809c <tcp_create_segment+0x12c>)
 8017f8c:	4844      	ldr	r0, [pc, #272]	; (80180a0 <tcp_create_segment+0x130>)
 8017f8e:	f007 fcad 	bl	801f8ec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017f92:	68bb      	ldr	r3, [r7, #8]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d105      	bne.n	8017fa4 <tcp_create_segment+0x34>
 8017f98:	4b3f      	ldr	r3, [pc, #252]	; (8018098 <tcp_create_segment+0x128>)
 8017f9a:	22a4      	movs	r2, #164	; 0xa4
 8017f9c:	4941      	ldr	r1, [pc, #260]	; (80180a4 <tcp_create_segment+0x134>)
 8017f9e:	4840      	ldr	r0, [pc, #256]	; (80180a0 <tcp_create_segment+0x130>)
 8017fa0:	f007 fca4 	bl	801f8ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017fa4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017fa8:	009b      	lsls	r3, r3, #2
 8017faa:	b2db      	uxtb	r3, r3
 8017fac:	f003 0304 	and.w	r3, r3, #4
 8017fb0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017fb2:	2003      	movs	r0, #3
 8017fb4:	f7fa fb6e 	bl	8012694 <memp_malloc>
 8017fb8:	6138      	str	r0, [r7, #16]
 8017fba:	693b      	ldr	r3, [r7, #16]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d104      	bne.n	8017fca <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017fc0:	68b8      	ldr	r0, [r7, #8]
 8017fc2:	f7fb fa69 	bl	8013498 <pbuf_free>
    return NULL;
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	e061      	b.n	801808e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8017fca:	693b      	ldr	r3, [r7, #16]
 8017fcc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017fd0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017fd2:	693b      	ldr	r3, [r7, #16]
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017fd8:	693b      	ldr	r3, [r7, #16]
 8017fda:	68ba      	ldr	r2, [r7, #8]
 8017fdc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017fde:	68bb      	ldr	r3, [r7, #8]
 8017fe0:	891a      	ldrh	r2, [r3, #8]
 8017fe2:	7dfb      	ldrb	r3, [r7, #23]
 8017fe4:	b29b      	uxth	r3, r3
 8017fe6:	429a      	cmp	r2, r3
 8017fe8:	d205      	bcs.n	8017ff6 <tcp_create_segment+0x86>
 8017fea:	4b2b      	ldr	r3, [pc, #172]	; (8018098 <tcp_create_segment+0x128>)
 8017fec:	22b0      	movs	r2, #176	; 0xb0
 8017fee:	492e      	ldr	r1, [pc, #184]	; (80180a8 <tcp_create_segment+0x138>)
 8017ff0:	482b      	ldr	r0, [pc, #172]	; (80180a0 <tcp_create_segment+0x130>)
 8017ff2:	f007 fc7b 	bl	801f8ec <iprintf>
  seg->len = p->tot_len - optlen;
 8017ff6:	68bb      	ldr	r3, [r7, #8]
 8017ff8:	891a      	ldrh	r2, [r3, #8]
 8017ffa:	7dfb      	ldrb	r3, [r7, #23]
 8017ffc:	b29b      	uxth	r3, r3
 8017ffe:	1ad3      	subs	r3, r2, r3
 8018000:	b29a      	uxth	r2, r3
 8018002:	693b      	ldr	r3, [r7, #16]
 8018004:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018006:	2114      	movs	r1, #20
 8018008:	68b8      	ldr	r0, [r7, #8]
 801800a:	f7fb f9af 	bl	801336c <pbuf_add_header>
 801800e:	4603      	mov	r3, r0
 8018010:	2b00      	cmp	r3, #0
 8018012:	d004      	beq.n	801801e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018014:	6938      	ldr	r0, [r7, #16]
 8018016:	f7fd f804 	bl	8015022 <tcp_seg_free>
    return NULL;
 801801a:	2300      	movs	r3, #0
 801801c:	e037      	b.n	801808e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801801e:	693b      	ldr	r3, [r7, #16]
 8018020:	685b      	ldr	r3, [r3, #4]
 8018022:	685a      	ldr	r2, [r3, #4]
 8018024:	693b      	ldr	r3, [r7, #16]
 8018026:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	8ada      	ldrh	r2, [r3, #22]
 801802c:	693b      	ldr	r3, [r7, #16]
 801802e:	68dc      	ldr	r4, [r3, #12]
 8018030:	4610      	mov	r0, r2
 8018032:	f7f8 fea3 	bl	8010d7c <lwip_htons>
 8018036:	4603      	mov	r3, r0
 8018038:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	8b1a      	ldrh	r2, [r3, #24]
 801803e:	693b      	ldr	r3, [r7, #16]
 8018040:	68dc      	ldr	r4, [r3, #12]
 8018042:	4610      	mov	r0, r2
 8018044:	f7f8 fe9a 	bl	8010d7c <lwip_htons>
 8018048:	4603      	mov	r3, r0
 801804a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801804c:	693b      	ldr	r3, [r7, #16]
 801804e:	68dc      	ldr	r4, [r3, #12]
 8018050:	6838      	ldr	r0, [r7, #0]
 8018052:	f7f8 fea8 	bl	8010da6 <lwip_htonl>
 8018056:	4603      	mov	r3, r0
 8018058:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801805a:	7dfb      	ldrb	r3, [r7, #23]
 801805c:	089b      	lsrs	r3, r3, #2
 801805e:	b2db      	uxtb	r3, r3
 8018060:	b29b      	uxth	r3, r3
 8018062:	3305      	adds	r3, #5
 8018064:	b29b      	uxth	r3, r3
 8018066:	031b      	lsls	r3, r3, #12
 8018068:	b29a      	uxth	r2, r3
 801806a:	79fb      	ldrb	r3, [r7, #7]
 801806c:	b29b      	uxth	r3, r3
 801806e:	4313      	orrs	r3, r2
 8018070:	b29a      	uxth	r2, r3
 8018072:	693b      	ldr	r3, [r7, #16]
 8018074:	68dc      	ldr	r4, [r3, #12]
 8018076:	4610      	mov	r0, r2
 8018078:	f7f8 fe80 	bl	8010d7c <lwip_htons>
 801807c:	4603      	mov	r3, r0
 801807e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018080:	693b      	ldr	r3, [r7, #16]
 8018082:	68db      	ldr	r3, [r3, #12]
 8018084:	2200      	movs	r2, #0
 8018086:	749a      	strb	r2, [r3, #18]
 8018088:	2200      	movs	r2, #0
 801808a:	74da      	strb	r2, [r3, #19]
  return seg;
 801808c:	693b      	ldr	r3, [r7, #16]
}
 801808e:	4618      	mov	r0, r3
 8018090:	371c      	adds	r7, #28
 8018092:	46bd      	mov	sp, r7
 8018094:	bd90      	pop	{r4, r7, pc}
 8018096:	bf00      	nop
 8018098:	08023c20 	.word	0x08023c20
 801809c:	08023c54 	.word	0x08023c54
 80180a0:	08023c74 	.word	0x08023c74
 80180a4:	08023c9c 	.word	0x08023c9c
 80180a8:	08023cc0 	.word	0x08023cc0

080180ac <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b086      	sub	sp, #24
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	607b      	str	r3, [r7, #4]
 80180b4:	4603      	mov	r3, r0
 80180b6:	73fb      	strb	r3, [r7, #15]
 80180b8:	460b      	mov	r3, r1
 80180ba:	81bb      	strh	r3, [r7, #12]
 80180bc:	4613      	mov	r3, r2
 80180be:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80180c0:	89bb      	ldrh	r3, [r7, #12]
 80180c2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d105      	bne.n	80180d6 <tcp_pbuf_prealloc+0x2a>
 80180ca:	4b30      	ldr	r3, [pc, #192]	; (801818c <tcp_pbuf_prealloc+0xe0>)
 80180cc:	22e8      	movs	r2, #232	; 0xe8
 80180ce:	4930      	ldr	r1, [pc, #192]	; (8018190 <tcp_pbuf_prealloc+0xe4>)
 80180d0:	4830      	ldr	r0, [pc, #192]	; (8018194 <tcp_pbuf_prealloc+0xe8>)
 80180d2:	f007 fc0b 	bl	801f8ec <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80180d6:	6a3b      	ldr	r3, [r7, #32]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d105      	bne.n	80180e8 <tcp_pbuf_prealloc+0x3c>
 80180dc:	4b2b      	ldr	r3, [pc, #172]	; (801818c <tcp_pbuf_prealloc+0xe0>)
 80180de:	22e9      	movs	r2, #233	; 0xe9
 80180e0:	492d      	ldr	r1, [pc, #180]	; (8018198 <tcp_pbuf_prealloc+0xec>)
 80180e2:	482c      	ldr	r0, [pc, #176]	; (8018194 <tcp_pbuf_prealloc+0xe8>)
 80180e4:	f007 fc02 	bl	801f8ec <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80180e8:	89ba      	ldrh	r2, [r7, #12]
 80180ea:	897b      	ldrh	r3, [r7, #10]
 80180ec:	429a      	cmp	r2, r3
 80180ee:	d221      	bcs.n	8018134 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80180f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80180f4:	f003 0302 	and.w	r3, r3, #2
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d111      	bne.n	8018120 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80180fc:	6a3b      	ldr	r3, [r7, #32]
 80180fe:	8b5b      	ldrh	r3, [r3, #26]
 8018100:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018104:	2b00      	cmp	r3, #0
 8018106:	d115      	bne.n	8018134 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018108:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801810c:	2b00      	cmp	r3, #0
 801810e:	d007      	beq.n	8018120 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018110:	6a3b      	ldr	r3, [r7, #32]
 8018112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8018114:	2b00      	cmp	r3, #0
 8018116:	d103      	bne.n	8018120 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018118:	6a3b      	ldr	r3, [r7, #32]
 801811a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801811c:	2b00      	cmp	r3, #0
 801811e:	d009      	beq.n	8018134 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018120:	89bb      	ldrh	r3, [r7, #12]
 8018122:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8018126:	f023 0203 	bic.w	r2, r3, #3
 801812a:	897b      	ldrh	r3, [r7, #10]
 801812c:	4293      	cmp	r3, r2
 801812e:	bf28      	it	cs
 8018130:	4613      	movcs	r3, r2
 8018132:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018134:	8af9      	ldrh	r1, [r7, #22]
 8018136:	7bfb      	ldrb	r3, [r7, #15]
 8018138:	f44f 7220 	mov.w	r2, #640	; 0x280
 801813c:	4618      	mov	r0, r3
 801813e:	f7fa fec7 	bl	8012ed0 <pbuf_alloc>
 8018142:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018144:	693b      	ldr	r3, [r7, #16]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d101      	bne.n	801814e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801814a:	2300      	movs	r3, #0
 801814c:	e019      	b.n	8018182 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801814e:	693b      	ldr	r3, [r7, #16]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d006      	beq.n	8018164 <tcp_pbuf_prealloc+0xb8>
 8018156:	4b0d      	ldr	r3, [pc, #52]	; (801818c <tcp_pbuf_prealloc+0xe0>)
 8018158:	f240 120b 	movw	r2, #267	; 0x10b
 801815c:	490f      	ldr	r1, [pc, #60]	; (801819c <tcp_pbuf_prealloc+0xf0>)
 801815e:	480d      	ldr	r0, [pc, #52]	; (8018194 <tcp_pbuf_prealloc+0xe8>)
 8018160:	f007 fbc4 	bl	801f8ec <iprintf>
  *oversize = p->len - length;
 8018164:	693b      	ldr	r3, [r7, #16]
 8018166:	895a      	ldrh	r2, [r3, #10]
 8018168:	89bb      	ldrh	r3, [r7, #12]
 801816a:	1ad3      	subs	r3, r2, r3
 801816c:	b29a      	uxth	r2, r3
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018172:	693b      	ldr	r3, [r7, #16]
 8018174:	89ba      	ldrh	r2, [r7, #12]
 8018176:	811a      	strh	r2, [r3, #8]
 8018178:	693b      	ldr	r3, [r7, #16]
 801817a:	891a      	ldrh	r2, [r3, #8]
 801817c:	693b      	ldr	r3, [r7, #16]
 801817e:	815a      	strh	r2, [r3, #10]
  return p;
 8018180:	693b      	ldr	r3, [r7, #16]
}
 8018182:	4618      	mov	r0, r3
 8018184:	3718      	adds	r7, #24
 8018186:	46bd      	mov	sp, r7
 8018188:	bd80      	pop	{r7, pc}
 801818a:	bf00      	nop
 801818c:	08023c20 	.word	0x08023c20
 8018190:	08023cd8 	.word	0x08023cd8
 8018194:	08023c74 	.word	0x08023c74
 8018198:	08023cfc 	.word	0x08023cfc
 801819c:	08023d1c 	.word	0x08023d1c

080181a0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b082      	sub	sp, #8
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	6078      	str	r0, [r7, #4]
 80181a8:	460b      	mov	r3, r1
 80181aa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d106      	bne.n	80181c0 <tcp_write_checks+0x20>
 80181b2:	4b33      	ldr	r3, [pc, #204]	; (8018280 <tcp_write_checks+0xe0>)
 80181b4:	f240 1233 	movw	r2, #307	; 0x133
 80181b8:	4932      	ldr	r1, [pc, #200]	; (8018284 <tcp_write_checks+0xe4>)
 80181ba:	4833      	ldr	r0, [pc, #204]	; (8018288 <tcp_write_checks+0xe8>)
 80181bc:	f007 fb96 	bl	801f8ec <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	7d1b      	ldrb	r3, [r3, #20]
 80181c4:	2b04      	cmp	r3, #4
 80181c6:	d00e      	beq.n	80181e6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80181cc:	2b07      	cmp	r3, #7
 80181ce:	d00a      	beq.n	80181e6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80181d4:	2b02      	cmp	r3, #2
 80181d6:	d006      	beq.n	80181e6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80181dc:	2b03      	cmp	r3, #3
 80181de:	d002      	beq.n	80181e6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80181e0:	f06f 030a 	mvn.w	r3, #10
 80181e4:	e048      	b.n	8018278 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80181e6:	887b      	ldrh	r3, [r7, #2]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d101      	bne.n	80181f0 <tcp_write_checks+0x50>
    return ERR_OK;
 80181ec:	2300      	movs	r3, #0
 80181ee:	e043      	b.n	8018278 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80181f6:	887a      	ldrh	r2, [r7, #2]
 80181f8:	429a      	cmp	r2, r3
 80181fa:	d909      	bls.n	8018210 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	8b5b      	ldrh	r3, [r3, #26]
 8018200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018204:	b29a      	uxth	r2, r3
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801820a:	f04f 33ff 	mov.w	r3, #4294967295
 801820e:	e033      	b.n	8018278 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018216:	2b08      	cmp	r3, #8
 8018218:	d909      	bls.n	801822e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	8b5b      	ldrh	r3, [r3, #26]
 801821e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018222:	b29a      	uxth	r2, r3
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018228:	f04f 33ff 	mov.w	r3, #4294967295
 801822c:	e024      	b.n	8018278 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018234:	2b00      	cmp	r3, #0
 8018236:	d00f      	beq.n	8018258 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801823c:	2b00      	cmp	r3, #0
 801823e:	d11a      	bne.n	8018276 <tcp_write_checks+0xd6>
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018244:	2b00      	cmp	r3, #0
 8018246:	d116      	bne.n	8018276 <tcp_write_checks+0xd6>
 8018248:	4b0d      	ldr	r3, [pc, #52]	; (8018280 <tcp_write_checks+0xe0>)
 801824a:	f240 1255 	movw	r2, #341	; 0x155
 801824e:	490f      	ldr	r1, [pc, #60]	; (801828c <tcp_write_checks+0xec>)
 8018250:	480d      	ldr	r0, [pc, #52]	; (8018288 <tcp_write_checks+0xe8>)
 8018252:	f007 fb4b 	bl	801f8ec <iprintf>
 8018256:	e00e      	b.n	8018276 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801825c:	2b00      	cmp	r3, #0
 801825e:	d103      	bne.n	8018268 <tcp_write_checks+0xc8>
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018264:	2b00      	cmp	r3, #0
 8018266:	d006      	beq.n	8018276 <tcp_write_checks+0xd6>
 8018268:	4b05      	ldr	r3, [pc, #20]	; (8018280 <tcp_write_checks+0xe0>)
 801826a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801826e:	4908      	ldr	r1, [pc, #32]	; (8018290 <tcp_write_checks+0xf0>)
 8018270:	4805      	ldr	r0, [pc, #20]	; (8018288 <tcp_write_checks+0xe8>)
 8018272:	f007 fb3b 	bl	801f8ec <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8018276:	2300      	movs	r3, #0
}
 8018278:	4618      	mov	r0, r3
 801827a:	3708      	adds	r7, #8
 801827c:	46bd      	mov	sp, r7
 801827e:	bd80      	pop	{r7, pc}
 8018280:	08023c20 	.word	0x08023c20
 8018284:	08023d30 	.word	0x08023d30
 8018288:	08023c74 	.word	0x08023c74
 801828c:	08023d50 	.word	0x08023d50
 8018290:	08023d8c 	.word	0x08023d8c

08018294 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018294:	b590      	push	{r4, r7, lr}
 8018296:	b09b      	sub	sp, #108	; 0x6c
 8018298:	af04      	add	r7, sp, #16
 801829a:	60f8      	str	r0, [r7, #12]
 801829c:	60b9      	str	r1, [r7, #8]
 801829e:	4611      	mov	r1, r2
 80182a0:	461a      	mov	r2, r3
 80182a2:	460b      	mov	r3, r1
 80182a4:	80fb      	strh	r3, [r7, #6]
 80182a6:	4613      	mov	r3, r2
 80182a8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80182aa:	2300      	movs	r3, #0
 80182ac:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80182ae:	2300      	movs	r3, #0
 80182b0:	653b      	str	r3, [r7, #80]	; 0x50
 80182b2:	2300      	movs	r3, #0
 80182b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80182b6:	2300      	movs	r3, #0
 80182b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80182ba:	2300      	movs	r3, #0
 80182bc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80182be:	2300      	movs	r3, #0
 80182c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80182c4:	2300      	movs	r3, #0
 80182c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80182ca:	2300      	movs	r3, #0
 80182cc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80182ce:	2300      	movs	r3, #0
 80182d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80182d2:	2300      	movs	r3, #0
 80182d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d109      	bne.n	80182f0 <tcp_write+0x5c>
 80182dc:	4ba4      	ldr	r3, [pc, #656]	; (8018570 <tcp_write+0x2dc>)
 80182de:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80182e2:	49a4      	ldr	r1, [pc, #656]	; (8018574 <tcp_write+0x2e0>)
 80182e4:	48a4      	ldr	r0, [pc, #656]	; (8018578 <tcp_write+0x2e4>)
 80182e6:	f007 fb01 	bl	801f8ec <iprintf>
 80182ea:	f06f 030f 	mvn.w	r3, #15
 80182ee:	e32a      	b.n	8018946 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80182f6:	085b      	lsrs	r3, r3, #1
 80182f8:	b29a      	uxth	r2, r3
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80182fe:	4293      	cmp	r3, r2
 8018300:	bf28      	it	cs
 8018302:	4613      	movcs	r3, r2
 8018304:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8018306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018308:	2b00      	cmp	r3, #0
 801830a:	d102      	bne.n	8018312 <tcp_write+0x7e>
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018310:	e000      	b.n	8018314 <tcp_write+0x80>
 8018312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018314:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018316:	68bb      	ldr	r3, [r7, #8]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d109      	bne.n	8018330 <tcp_write+0x9c>
 801831c:	4b94      	ldr	r3, [pc, #592]	; (8018570 <tcp_write+0x2dc>)
 801831e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8018322:	4996      	ldr	r1, [pc, #600]	; (801857c <tcp_write+0x2e8>)
 8018324:	4894      	ldr	r0, [pc, #592]	; (8018578 <tcp_write+0x2e4>)
 8018326:	f007 fae1 	bl	801f8ec <iprintf>
 801832a:	f06f 030f 	mvn.w	r3, #15
 801832e:	e30a      	b.n	8018946 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8018330:	88fb      	ldrh	r3, [r7, #6]
 8018332:	4619      	mov	r1, r3
 8018334:	68f8      	ldr	r0, [r7, #12]
 8018336:	f7ff ff33 	bl	80181a0 <tcp_write_checks>
 801833a:	4603      	mov	r3, r0
 801833c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8018340:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8018344:	2b00      	cmp	r3, #0
 8018346:	d002      	beq.n	801834e <tcp_write+0xba>
    return err;
 8018348:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801834c:	e2fb      	b.n	8018946 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018354:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018358:	2300      	movs	r3, #0
 801835a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018362:	2b00      	cmp	r3, #0
 8018364:	f000 80f6 	beq.w	8018554 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801836c:	653b      	str	r3, [r7, #80]	; 0x50
 801836e:	e002      	b.n	8018376 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8018370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d1f8      	bne.n	8018370 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801837e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018380:	7a9b      	ldrb	r3, [r3, #10]
 8018382:	009b      	lsls	r3, r3, #2
 8018384:	b29b      	uxth	r3, r3
 8018386:	f003 0304 	and.w	r3, r3, #4
 801838a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801838c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801838e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018390:	891b      	ldrh	r3, [r3, #8]
 8018392:	4619      	mov	r1, r3
 8018394:	8c3b      	ldrh	r3, [r7, #32]
 8018396:	440b      	add	r3, r1
 8018398:	429a      	cmp	r2, r3
 801839a:	da06      	bge.n	80183aa <tcp_write+0x116>
 801839c:	4b74      	ldr	r3, [pc, #464]	; (8018570 <tcp_write+0x2dc>)
 801839e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80183a2:	4977      	ldr	r1, [pc, #476]	; (8018580 <tcp_write+0x2ec>)
 80183a4:	4874      	ldr	r0, [pc, #464]	; (8018578 <tcp_write+0x2e4>)
 80183a6:	f007 faa1 	bl	801f8ec <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80183aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80183ac:	891a      	ldrh	r2, [r3, #8]
 80183ae:	8c3b      	ldrh	r3, [r7, #32]
 80183b0:	4413      	add	r3, r2
 80183b2:	b29b      	uxth	r3, r3
 80183b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80183b6:	1ad3      	subs	r3, r2, r3
 80183b8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80183c0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80183c2:	8a7b      	ldrh	r3, [r7, #18]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d026      	beq.n	8018416 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80183c8:	8a7b      	ldrh	r3, [r7, #18]
 80183ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80183cc:	429a      	cmp	r2, r3
 80183ce:	d206      	bcs.n	80183de <tcp_write+0x14a>
 80183d0:	4b67      	ldr	r3, [pc, #412]	; (8018570 <tcp_write+0x2dc>)
 80183d2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80183d6:	496b      	ldr	r1, [pc, #428]	; (8018584 <tcp_write+0x2f0>)
 80183d8:	4867      	ldr	r0, [pc, #412]	; (8018578 <tcp_write+0x2e4>)
 80183da:	f007 fa87 	bl	801f8ec <iprintf>
      seg = last_unsent;
 80183de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80183e0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80183e2:	8a7b      	ldrh	r3, [r7, #18]
 80183e4:	88fa      	ldrh	r2, [r7, #6]
 80183e6:	4293      	cmp	r3, r2
 80183e8:	bf28      	it	cs
 80183ea:	4613      	movcs	r3, r2
 80183ec:	b29b      	uxth	r3, r3
 80183ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80183f0:	4293      	cmp	r3, r2
 80183f2:	bf28      	it	cs
 80183f4:	4613      	movcs	r3, r2
 80183f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80183f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80183fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80183fe:	4413      	add	r3, r2
 8018400:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8018404:	8a7a      	ldrh	r2, [r7, #18]
 8018406:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018408:	1ad3      	subs	r3, r2, r3
 801840a:	b29b      	uxth	r3, r3
 801840c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801840e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018410:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018412:	1ad3      	subs	r3, r2, r3
 8018414:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018416:	8a7b      	ldrh	r3, [r7, #18]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d00b      	beq.n	8018434 <tcp_write+0x1a0>
 801841c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018420:	88fb      	ldrh	r3, [r7, #6]
 8018422:	429a      	cmp	r2, r3
 8018424:	d006      	beq.n	8018434 <tcp_write+0x1a0>
 8018426:	4b52      	ldr	r3, [pc, #328]	; (8018570 <tcp_write+0x2dc>)
 8018428:	f44f 7200 	mov.w	r2, #512	; 0x200
 801842c:	4956      	ldr	r1, [pc, #344]	; (8018588 <tcp_write+0x2f4>)
 801842e:	4852      	ldr	r0, [pc, #328]	; (8018578 <tcp_write+0x2e4>)
 8018430:	f007 fa5c 	bl	801f8ec <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018434:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018438:	88fb      	ldrh	r3, [r7, #6]
 801843a:	429a      	cmp	r2, r3
 801843c:	f080 8167 	bcs.w	801870e <tcp_write+0x47a>
 8018440:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018442:	2b00      	cmp	r3, #0
 8018444:	f000 8163 	beq.w	801870e <tcp_write+0x47a>
 8018448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801844a:	891b      	ldrh	r3, [r3, #8]
 801844c:	2b00      	cmp	r3, #0
 801844e:	f000 815e 	beq.w	801870e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8018452:	88fa      	ldrh	r2, [r7, #6]
 8018454:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018458:	1ad2      	subs	r2, r2, r3
 801845a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801845c:	4293      	cmp	r3, r2
 801845e:	bfa8      	it	ge
 8018460:	4613      	movge	r3, r2
 8018462:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8018464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018466:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018468:	797b      	ldrb	r3, [r7, #5]
 801846a:	f003 0301 	and.w	r3, r3, #1
 801846e:	2b00      	cmp	r3, #0
 8018470:	d027      	beq.n	80184c2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8018472:	f107 0012 	add.w	r0, r7, #18
 8018476:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018478:	8bf9      	ldrh	r1, [r7, #30]
 801847a:	2301      	movs	r3, #1
 801847c:	9302      	str	r3, [sp, #8]
 801847e:	797b      	ldrb	r3, [r7, #5]
 8018480:	9301      	str	r3, [sp, #4]
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	9300      	str	r3, [sp, #0]
 8018486:	4603      	mov	r3, r0
 8018488:	2000      	movs	r0, #0
 801848a:	f7ff fe0f 	bl	80180ac <tcp_pbuf_prealloc>
 801848e:	6578      	str	r0, [r7, #84]	; 0x54
 8018490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018492:	2b00      	cmp	r3, #0
 8018494:	f000 8225 	beq.w	80188e2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801849a:	6858      	ldr	r0, [r3, #4]
 801849c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80184a0:	68ba      	ldr	r2, [r7, #8]
 80184a2:	4413      	add	r3, r2
 80184a4:	8bfa      	ldrh	r2, [r7, #30]
 80184a6:	4619      	mov	r1, r3
 80184a8:	f007 f936 	bl	801f718 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80184ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80184ae:	f7fb f881 	bl	80135b4 <pbuf_clen>
 80184b2:	4603      	mov	r3, r0
 80184b4:	461a      	mov	r2, r3
 80184b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80184ba:	4413      	add	r3, r2
 80184bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80184c0:	e041      	b.n	8018546 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80184c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80184c4:	685b      	ldr	r3, [r3, #4]
 80184c6:	637b      	str	r3, [r7, #52]	; 0x34
 80184c8:	e002      	b.n	80184d0 <tcp_write+0x23c>
 80184ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	637b      	str	r3, [r7, #52]	; 0x34
 80184d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d1f8      	bne.n	80184ca <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80184d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184da:	7b1b      	ldrb	r3, [r3, #12]
 80184dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d115      	bne.n	8018510 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80184e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184e6:	685b      	ldr	r3, [r3, #4]
 80184e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80184ea:	8952      	ldrh	r2, [r2, #10]
 80184ec:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80184ee:	68ba      	ldr	r2, [r7, #8]
 80184f0:	429a      	cmp	r2, r3
 80184f2:	d10d      	bne.n	8018510 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80184f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d006      	beq.n	801850a <tcp_write+0x276>
 80184fc:	4b1c      	ldr	r3, [pc, #112]	; (8018570 <tcp_write+0x2dc>)
 80184fe:	f240 2231 	movw	r2, #561	; 0x231
 8018502:	4922      	ldr	r1, [pc, #136]	; (801858c <tcp_write+0x2f8>)
 8018504:	481c      	ldr	r0, [pc, #112]	; (8018578 <tcp_write+0x2e4>)
 8018506:	f007 f9f1 	bl	801f8ec <iprintf>
          extendlen = seglen;
 801850a:	8bfb      	ldrh	r3, [r7, #30]
 801850c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801850e:	e01a      	b.n	8018546 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018510:	8bfb      	ldrh	r3, [r7, #30]
 8018512:	2201      	movs	r2, #1
 8018514:	4619      	mov	r1, r3
 8018516:	2000      	movs	r0, #0
 8018518:	f7fa fcda 	bl	8012ed0 <pbuf_alloc>
 801851c:	6578      	str	r0, [r7, #84]	; 0x54
 801851e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018520:	2b00      	cmp	r3, #0
 8018522:	f000 81e0 	beq.w	80188e6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8018526:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801852a:	68ba      	ldr	r2, [r7, #8]
 801852c:	441a      	add	r2, r3
 801852e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018530:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8018532:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018534:	f7fb f83e 	bl	80135b4 <pbuf_clen>
 8018538:	4603      	mov	r3, r0
 801853a:	461a      	mov	r2, r3
 801853c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018540:	4413      	add	r3, r2
 8018542:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8018546:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801854a:	8bfb      	ldrh	r3, [r7, #30]
 801854c:	4413      	add	r3, r2
 801854e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8018552:	e0dc      	b.n	801870e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801855a:	2b00      	cmp	r3, #0
 801855c:	f000 80d7 	beq.w	801870e <tcp_write+0x47a>
 8018560:	4b03      	ldr	r3, [pc, #12]	; (8018570 <tcp_write+0x2dc>)
 8018562:	f240 224a 	movw	r2, #586	; 0x24a
 8018566:	490a      	ldr	r1, [pc, #40]	; (8018590 <tcp_write+0x2fc>)
 8018568:	4803      	ldr	r0, [pc, #12]	; (8018578 <tcp_write+0x2e4>)
 801856a:	f007 f9bf 	bl	801f8ec <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801856e:	e0ce      	b.n	801870e <tcp_write+0x47a>
 8018570:	08023c20 	.word	0x08023c20
 8018574:	08023dc0 	.word	0x08023dc0
 8018578:	08023c74 	.word	0x08023c74
 801857c:	08023dd8 	.word	0x08023dd8
 8018580:	08023e0c 	.word	0x08023e0c
 8018584:	08023e24 	.word	0x08023e24
 8018588:	08023e44 	.word	0x08023e44
 801858c:	08023e64 	.word	0x08023e64
 8018590:	08023e90 	.word	0x08023e90
    struct pbuf *p;
    u16_t left = len - pos;
 8018594:	88fa      	ldrh	r2, [r7, #6]
 8018596:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801859a:	1ad3      	subs	r3, r2, r3
 801859c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801859e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80185a6:	1ad3      	subs	r3, r2, r3
 80185a8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80185aa:	8b7a      	ldrh	r2, [r7, #26]
 80185ac:	8bbb      	ldrh	r3, [r7, #28]
 80185ae:	4293      	cmp	r3, r2
 80185b0:	bf28      	it	cs
 80185b2:	4613      	movcs	r3, r2
 80185b4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80185b6:	797b      	ldrb	r3, [r7, #5]
 80185b8:	f003 0301 	and.w	r3, r3, #1
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d036      	beq.n	801862e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80185c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80185c4:	b29a      	uxth	r2, r3
 80185c6:	8b3b      	ldrh	r3, [r7, #24]
 80185c8:	4413      	add	r3, r2
 80185ca:	b299      	uxth	r1, r3
 80185cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	bf0c      	ite	eq
 80185d2:	2301      	moveq	r3, #1
 80185d4:	2300      	movne	r3, #0
 80185d6:	b2db      	uxtb	r3, r3
 80185d8:	f107 0012 	add.w	r0, r7, #18
 80185dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80185de:	9302      	str	r3, [sp, #8]
 80185e0:	797b      	ldrb	r3, [r7, #5]
 80185e2:	9301      	str	r3, [sp, #4]
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	9300      	str	r3, [sp, #0]
 80185e8:	4603      	mov	r3, r0
 80185ea:	2036      	movs	r0, #54	; 0x36
 80185ec:	f7ff fd5e 	bl	80180ac <tcp_pbuf_prealloc>
 80185f0:	6338      	str	r0, [r7, #48]	; 0x30
 80185f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	f000 8178 	beq.w	80188ea <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80185fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185fc:	895b      	ldrh	r3, [r3, #10]
 80185fe:	8b3a      	ldrh	r2, [r7, #24]
 8018600:	429a      	cmp	r2, r3
 8018602:	d906      	bls.n	8018612 <tcp_write+0x37e>
 8018604:	4b8c      	ldr	r3, [pc, #560]	; (8018838 <tcp_write+0x5a4>)
 8018606:	f240 2266 	movw	r2, #614	; 0x266
 801860a:	498c      	ldr	r1, [pc, #560]	; (801883c <tcp_write+0x5a8>)
 801860c:	488c      	ldr	r0, [pc, #560]	; (8018840 <tcp_write+0x5ac>)
 801860e:	f007 f96d 	bl	801f8ec <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8018612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018614:	685a      	ldr	r2, [r3, #4]
 8018616:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801861a:	18d0      	adds	r0, r2, r3
 801861c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018620:	68ba      	ldr	r2, [r7, #8]
 8018622:	4413      	add	r3, r2
 8018624:	8b3a      	ldrh	r2, [r7, #24]
 8018626:	4619      	mov	r1, r3
 8018628:	f007 f876 	bl	801f718 <memcpy>
 801862c:	e02f      	b.n	801868e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801862e:	8a7b      	ldrh	r3, [r7, #18]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d006      	beq.n	8018642 <tcp_write+0x3ae>
 8018634:	4b80      	ldr	r3, [pc, #512]	; (8018838 <tcp_write+0x5a4>)
 8018636:	f240 2271 	movw	r2, #625	; 0x271
 801863a:	4982      	ldr	r1, [pc, #520]	; (8018844 <tcp_write+0x5b0>)
 801863c:	4880      	ldr	r0, [pc, #512]	; (8018840 <tcp_write+0x5ac>)
 801863e:	f007 f955 	bl	801f8ec <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8018642:	8b3b      	ldrh	r3, [r7, #24]
 8018644:	2201      	movs	r2, #1
 8018646:	4619      	mov	r1, r3
 8018648:	2036      	movs	r0, #54	; 0x36
 801864a:	f7fa fc41 	bl	8012ed0 <pbuf_alloc>
 801864e:	6178      	str	r0, [r7, #20]
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	2b00      	cmp	r3, #0
 8018654:	f000 814b 	beq.w	80188ee <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8018658:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801865c:	68ba      	ldr	r2, [r7, #8]
 801865e:	441a      	add	r2, r3
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018664:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018668:	b29b      	uxth	r3, r3
 801866a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801866e:	4619      	mov	r1, r3
 8018670:	2036      	movs	r0, #54	; 0x36
 8018672:	f7fa fc2d 	bl	8012ed0 <pbuf_alloc>
 8018676:	6338      	str	r0, [r7, #48]	; 0x30
 8018678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801867a:	2b00      	cmp	r3, #0
 801867c:	d103      	bne.n	8018686 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801867e:	6978      	ldr	r0, [r7, #20]
 8018680:	f7fa ff0a 	bl	8013498 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8018684:	e136      	b.n	80188f4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8018686:	6979      	ldr	r1, [r7, #20]
 8018688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801868a:	f7fa ffd3 	bl	8013634 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801868e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018690:	f7fa ff90 	bl	80135b4 <pbuf_clen>
 8018694:	4603      	mov	r3, r0
 8018696:	461a      	mov	r2, r3
 8018698:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801869c:	4413      	add	r3, r2
 801869e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80186a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80186a6:	2b09      	cmp	r3, #9
 80186a8:	d903      	bls.n	80186b2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80186aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80186ac:	f7fa fef4 	bl	8013498 <pbuf_free>
      goto memerr;
 80186b0:	e120      	b.n	80188f4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80186b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80186ba:	441a      	add	r2, r3
 80186bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186c0:	9300      	str	r3, [sp, #0]
 80186c2:	4613      	mov	r3, r2
 80186c4:	2200      	movs	r2, #0
 80186c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80186c8:	68f8      	ldr	r0, [r7, #12]
 80186ca:	f7ff fc51 	bl	8017f70 <tcp_create_segment>
 80186ce:	64f8      	str	r0, [r7, #76]	; 0x4c
 80186d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	f000 810d 	beq.w	80188f2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80186d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d102      	bne.n	80186e4 <tcp_write+0x450>
      queue = seg;
 80186de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186e0:	647b      	str	r3, [r7, #68]	; 0x44
 80186e2:	e00c      	b.n	80186fe <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80186e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d106      	bne.n	80186f8 <tcp_write+0x464>
 80186ea:	4b53      	ldr	r3, [pc, #332]	; (8018838 <tcp_write+0x5a4>)
 80186ec:	f240 22ab 	movw	r2, #683	; 0x2ab
 80186f0:	4955      	ldr	r1, [pc, #340]	; (8018848 <tcp_write+0x5b4>)
 80186f2:	4853      	ldr	r0, [pc, #332]	; (8018840 <tcp_write+0x5ac>)
 80186f4:	f007 f8fa 	bl	801f8ec <iprintf>
      prev_seg->next = seg;
 80186f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80186fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80186fc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80186fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018700:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8018702:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018706:	8b3b      	ldrh	r3, [r7, #24]
 8018708:	4413      	add	r3, r2
 801870a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801870e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018712:	88fb      	ldrh	r3, [r7, #6]
 8018714:	429a      	cmp	r2, r3
 8018716:	f4ff af3d 	bcc.w	8018594 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801871a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801871c:	2b00      	cmp	r3, #0
 801871e:	d02c      	beq.n	801877a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8018720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018722:	685b      	ldr	r3, [r3, #4]
 8018724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018726:	e01e      	b.n	8018766 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8018728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801872a:	891a      	ldrh	r2, [r3, #8]
 801872c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801872e:	4413      	add	r3, r2
 8018730:	b29a      	uxth	r2, r3
 8018732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018734:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8018736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	2b00      	cmp	r3, #0
 801873c:	d110      	bne.n	8018760 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018740:	685b      	ldr	r3, [r3, #4]
 8018742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018744:	8952      	ldrh	r2, [r2, #10]
 8018746:	4413      	add	r3, r2
 8018748:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801874a:	68b9      	ldr	r1, [r7, #8]
 801874c:	4618      	mov	r0, r3
 801874e:	f006 ffe3 	bl	801f718 <memcpy>
        p->len += oversize_used;
 8018752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018754:	895a      	ldrh	r2, [r3, #10]
 8018756:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018758:	4413      	add	r3, r2
 801875a:	b29a      	uxth	r2, r3
 801875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801875e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018768:	2b00      	cmp	r3, #0
 801876a:	d1dd      	bne.n	8018728 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801876c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801876e:	891a      	ldrh	r2, [r3, #8]
 8018770:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018772:	4413      	add	r3, r2
 8018774:	b29a      	uxth	r2, r3
 8018776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018778:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801877a:	8a7a      	ldrh	r2, [r7, #18]
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8018782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018784:	2b00      	cmp	r3, #0
 8018786:	d018      	beq.n	80187ba <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801878a:	2b00      	cmp	r3, #0
 801878c:	d106      	bne.n	801879c <tcp_write+0x508>
 801878e:	4b2a      	ldr	r3, [pc, #168]	; (8018838 <tcp_write+0x5a4>)
 8018790:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8018794:	492d      	ldr	r1, [pc, #180]	; (801884c <tcp_write+0x5b8>)
 8018796:	482a      	ldr	r0, [pc, #168]	; (8018840 <tcp_write+0x5ac>)
 8018798:	f007 f8a8 	bl	801f8ec <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801879c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801879e:	685b      	ldr	r3, [r3, #4]
 80187a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80187a2:	4618      	mov	r0, r3
 80187a4:	f7fa ff46 	bl	8013634 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80187a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187aa:	891a      	ldrh	r2, [r3, #8]
 80187ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80187ae:	891b      	ldrh	r3, [r3, #8]
 80187b0:	4413      	add	r3, r2
 80187b2:	b29a      	uxth	r2, r3
 80187b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187b6:	811a      	strh	r2, [r3, #8]
 80187b8:	e037      	b.n	801882a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80187ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d034      	beq.n	801882a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80187c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d003      	beq.n	80187ce <tcp_write+0x53a>
 80187c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187c8:	685b      	ldr	r3, [r3, #4]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d106      	bne.n	80187dc <tcp_write+0x548>
 80187ce:	4b1a      	ldr	r3, [pc, #104]	; (8018838 <tcp_write+0x5a4>)
 80187d0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80187d4:	491e      	ldr	r1, [pc, #120]	; (8018850 <tcp_write+0x5bc>)
 80187d6:	481a      	ldr	r0, [pc, #104]	; (8018840 <tcp_write+0x5ac>)
 80187d8:	f007 f888 	bl	801f8ec <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80187dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187de:	685b      	ldr	r3, [r3, #4]
 80187e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80187e2:	e009      	b.n	80187f8 <tcp_write+0x564>
      p->tot_len += extendlen;
 80187e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e6:	891a      	ldrh	r2, [r3, #8]
 80187e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80187ea:	4413      	add	r3, r2
 80187ec:	b29a      	uxth	r2, r3
 80187ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80187f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80187f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d1f1      	bne.n	80187e4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8018800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018802:	891a      	ldrh	r2, [r3, #8]
 8018804:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018806:	4413      	add	r3, r2
 8018808:	b29a      	uxth	r2, r3
 801880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801880c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018810:	895a      	ldrh	r2, [r3, #10]
 8018812:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018814:	4413      	add	r3, r2
 8018816:	b29a      	uxth	r2, r3
 8018818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801881a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801881c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801881e:	891a      	ldrh	r2, [r3, #8]
 8018820:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018822:	4413      	add	r3, r2
 8018824:	b29a      	uxth	r2, r3
 8018826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018828:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801882a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801882c:	2b00      	cmp	r3, #0
 801882e:	d111      	bne.n	8018854 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018834:	66da      	str	r2, [r3, #108]	; 0x6c
 8018836:	e010      	b.n	801885a <tcp_write+0x5c6>
 8018838:	08023c20 	.word	0x08023c20
 801883c:	08023ec0 	.word	0x08023ec0
 8018840:	08023c74 	.word	0x08023c74
 8018844:	08023f00 	.word	0x08023f00
 8018848:	08023f10 	.word	0x08023f10
 801884c:	08023f24 	.word	0x08023f24
 8018850:	08023f5c 	.word	0x08023f5c
  } else {
    last_unsent->next = queue;
 8018854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018858:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801885e:	88fb      	ldrh	r3, [r7, #6]
 8018860:	441a      	add	r2, r3
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801886c:	88fb      	ldrh	r3, [r7, #6]
 801886e:	1ad3      	subs	r3, r2, r3
 8018870:	b29a      	uxth	r2, r3
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801887e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018888:	2b00      	cmp	r3, #0
 801888a:	d00e      	beq.n	80188aa <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018890:	2b00      	cmp	r3, #0
 8018892:	d10a      	bne.n	80188aa <tcp_write+0x616>
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018898:	2b00      	cmp	r3, #0
 801889a:	d106      	bne.n	80188aa <tcp_write+0x616>
 801889c:	4b2c      	ldr	r3, [pc, #176]	; (8018950 <tcp_write+0x6bc>)
 801889e:	f240 3212 	movw	r2, #786	; 0x312
 80188a2:	492c      	ldr	r1, [pc, #176]	; (8018954 <tcp_write+0x6c0>)
 80188a4:	482c      	ldr	r0, [pc, #176]	; (8018958 <tcp_write+0x6c4>)
 80188a6:	f007 f821 	bl	801f8ec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80188aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d016      	beq.n	80188de <tcp_write+0x64a>
 80188b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188b2:	68db      	ldr	r3, [r3, #12]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d012      	beq.n	80188de <tcp_write+0x64a>
 80188b8:	797b      	ldrb	r3, [r7, #5]
 80188ba:	f003 0302 	and.w	r3, r3, #2
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d10d      	bne.n	80188de <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80188c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188c4:	68db      	ldr	r3, [r3, #12]
 80188c6:	899b      	ldrh	r3, [r3, #12]
 80188c8:	b29c      	uxth	r4, r3
 80188ca:	2008      	movs	r0, #8
 80188cc:	f7f8 fa56 	bl	8010d7c <lwip_htons>
 80188d0:	4603      	mov	r3, r0
 80188d2:	461a      	mov	r2, r3
 80188d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188d6:	68db      	ldr	r3, [r3, #12]
 80188d8:	4322      	orrs	r2, r4
 80188da:	b292      	uxth	r2, r2
 80188dc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80188de:	2300      	movs	r3, #0
 80188e0:	e031      	b.n	8018946 <tcp_write+0x6b2>
          goto memerr;
 80188e2:	bf00      	nop
 80188e4:	e006      	b.n	80188f4 <tcp_write+0x660>
            goto memerr;
 80188e6:	bf00      	nop
 80188e8:	e004      	b.n	80188f4 <tcp_write+0x660>
        goto memerr;
 80188ea:	bf00      	nop
 80188ec:	e002      	b.n	80188f4 <tcp_write+0x660>
        goto memerr;
 80188ee:	bf00      	nop
 80188f0:	e000      	b.n	80188f4 <tcp_write+0x660>
      goto memerr;
 80188f2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	8b5b      	ldrh	r3, [r3, #26]
 80188f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80188fc:	b29a      	uxth	r2, r3
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8018902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018904:	2b00      	cmp	r3, #0
 8018906:	d002      	beq.n	801890e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8018908:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801890a:	f7fa fdc5 	bl	8013498 <pbuf_free>
  }
  if (queue != NULL) {
 801890e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018910:	2b00      	cmp	r3, #0
 8018912:	d002      	beq.n	801891a <tcp_write+0x686>
    tcp_segs_free(queue);
 8018914:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018916:	f7fc fb6f 	bl	8014ff8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018920:	2b00      	cmp	r3, #0
 8018922:	d00e      	beq.n	8018942 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018928:	2b00      	cmp	r3, #0
 801892a:	d10a      	bne.n	8018942 <tcp_write+0x6ae>
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018930:	2b00      	cmp	r3, #0
 8018932:	d106      	bne.n	8018942 <tcp_write+0x6ae>
 8018934:	4b06      	ldr	r3, [pc, #24]	; (8018950 <tcp_write+0x6bc>)
 8018936:	f240 3227 	movw	r2, #807	; 0x327
 801893a:	4906      	ldr	r1, [pc, #24]	; (8018954 <tcp_write+0x6c0>)
 801893c:	4806      	ldr	r0, [pc, #24]	; (8018958 <tcp_write+0x6c4>)
 801893e:	f006 ffd5 	bl	801f8ec <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8018942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018946:	4618      	mov	r0, r3
 8018948:	375c      	adds	r7, #92	; 0x5c
 801894a:	46bd      	mov	sp, r7
 801894c:	bd90      	pop	{r4, r7, pc}
 801894e:	bf00      	nop
 8018950:	08023c20 	.word	0x08023c20
 8018954:	08023f94 	.word	0x08023f94
 8018958:	08023c74 	.word	0x08023c74

0801895c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801895c:	b590      	push	{r4, r7, lr}
 801895e:	b08b      	sub	sp, #44	; 0x2c
 8018960:	af02      	add	r7, sp, #8
 8018962:	6078      	str	r0, [r7, #4]
 8018964:	460b      	mov	r3, r1
 8018966:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018968:	2300      	movs	r3, #0
 801896a:	61fb      	str	r3, [r7, #28]
 801896c:	2300      	movs	r3, #0
 801896e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018970:	2300      	movs	r3, #0
 8018972:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d106      	bne.n	8018988 <tcp_split_unsent_seg+0x2c>
 801897a:	4b95      	ldr	r3, [pc, #596]	; (8018bd0 <tcp_split_unsent_seg+0x274>)
 801897c:	f240 324b 	movw	r2, #843	; 0x34b
 8018980:	4994      	ldr	r1, [pc, #592]	; (8018bd4 <tcp_split_unsent_seg+0x278>)
 8018982:	4895      	ldr	r0, [pc, #596]	; (8018bd8 <tcp_split_unsent_seg+0x27c>)
 8018984:	f006 ffb2 	bl	801f8ec <iprintf>

  useg = pcb->unsent;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801898c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801898e:	697b      	ldr	r3, [r7, #20]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d102      	bne.n	801899a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018994:	f04f 33ff 	mov.w	r3, #4294967295
 8018998:	e116      	b.n	8018bc8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801899a:	887b      	ldrh	r3, [r7, #2]
 801899c:	2b00      	cmp	r3, #0
 801899e:	d109      	bne.n	80189b4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80189a0:	4b8b      	ldr	r3, [pc, #556]	; (8018bd0 <tcp_split_unsent_seg+0x274>)
 80189a2:	f240 3253 	movw	r2, #851	; 0x353
 80189a6:	498d      	ldr	r1, [pc, #564]	; (8018bdc <tcp_split_unsent_seg+0x280>)
 80189a8:	488b      	ldr	r0, [pc, #556]	; (8018bd8 <tcp_split_unsent_seg+0x27c>)
 80189aa:	f006 ff9f 	bl	801f8ec <iprintf>
    return ERR_VAL;
 80189ae:	f06f 0305 	mvn.w	r3, #5
 80189b2:	e109      	b.n	8018bc8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80189b4:	697b      	ldr	r3, [r7, #20]
 80189b6:	891b      	ldrh	r3, [r3, #8]
 80189b8:	887a      	ldrh	r2, [r7, #2]
 80189ba:	429a      	cmp	r2, r3
 80189bc:	d301      	bcc.n	80189c2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80189be:	2300      	movs	r3, #0
 80189c0:	e102      	b.n	8018bc8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189c6:	887a      	ldrh	r2, [r7, #2]
 80189c8:	429a      	cmp	r2, r3
 80189ca:	d906      	bls.n	80189da <tcp_split_unsent_seg+0x7e>
 80189cc:	4b80      	ldr	r3, [pc, #512]	; (8018bd0 <tcp_split_unsent_seg+0x274>)
 80189ce:	f240 325b 	movw	r2, #859	; 0x35b
 80189d2:	4983      	ldr	r1, [pc, #524]	; (8018be0 <tcp_split_unsent_seg+0x284>)
 80189d4:	4880      	ldr	r0, [pc, #512]	; (8018bd8 <tcp_split_unsent_seg+0x27c>)
 80189d6:	f006 ff89 	bl	801f8ec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80189da:	697b      	ldr	r3, [r7, #20]
 80189dc:	891b      	ldrh	r3, [r3, #8]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d106      	bne.n	80189f0 <tcp_split_unsent_seg+0x94>
 80189e2:	4b7b      	ldr	r3, [pc, #492]	; (8018bd0 <tcp_split_unsent_seg+0x274>)
 80189e4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80189e8:	497e      	ldr	r1, [pc, #504]	; (8018be4 <tcp_split_unsent_seg+0x288>)
 80189ea:	487b      	ldr	r0, [pc, #492]	; (8018bd8 <tcp_split_unsent_seg+0x27c>)
 80189ec:	f006 ff7e 	bl	801f8ec <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80189f0:	697b      	ldr	r3, [r7, #20]
 80189f2:	7a9b      	ldrb	r3, [r3, #10]
 80189f4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80189f6:	7bfb      	ldrb	r3, [r7, #15]
 80189f8:	009b      	lsls	r3, r3, #2
 80189fa:	b2db      	uxtb	r3, r3
 80189fc:	f003 0304 	and.w	r3, r3, #4
 8018a00:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8018a02:	697b      	ldr	r3, [r7, #20]
 8018a04:	891a      	ldrh	r2, [r3, #8]
 8018a06:	887b      	ldrh	r3, [r7, #2]
 8018a08:	1ad3      	subs	r3, r2, r3
 8018a0a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018a0c:	7bbb      	ldrb	r3, [r7, #14]
 8018a0e:	b29a      	uxth	r2, r3
 8018a10:	89bb      	ldrh	r3, [r7, #12]
 8018a12:	4413      	add	r3, r2
 8018a14:	b29b      	uxth	r3, r3
 8018a16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a1a:	4619      	mov	r1, r3
 8018a1c:	2036      	movs	r0, #54	; 0x36
 8018a1e:	f7fa fa57 	bl	8012ed0 <pbuf_alloc>
 8018a22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018a24:	693b      	ldr	r3, [r7, #16]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	f000 80b7 	beq.w	8018b9a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	685b      	ldr	r3, [r3, #4]
 8018a30:	891a      	ldrh	r2, [r3, #8]
 8018a32:	697b      	ldr	r3, [r7, #20]
 8018a34:	891b      	ldrh	r3, [r3, #8]
 8018a36:	1ad3      	subs	r3, r2, r3
 8018a38:	b29a      	uxth	r2, r3
 8018a3a:	887b      	ldrh	r3, [r7, #2]
 8018a3c:	4413      	add	r3, r2
 8018a3e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018a40:	697b      	ldr	r3, [r7, #20]
 8018a42:	6858      	ldr	r0, [r3, #4]
 8018a44:	693b      	ldr	r3, [r7, #16]
 8018a46:	685a      	ldr	r2, [r3, #4]
 8018a48:	7bbb      	ldrb	r3, [r7, #14]
 8018a4a:	18d1      	adds	r1, r2, r3
 8018a4c:	897b      	ldrh	r3, [r7, #10]
 8018a4e:	89ba      	ldrh	r2, [r7, #12]
 8018a50:	f7fa ff28 	bl	80138a4 <pbuf_copy_partial>
 8018a54:	4603      	mov	r3, r0
 8018a56:	461a      	mov	r2, r3
 8018a58:	89bb      	ldrh	r3, [r7, #12]
 8018a5a:	4293      	cmp	r3, r2
 8018a5c:	f040 809f 	bne.w	8018b9e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018a60:	697b      	ldr	r3, [r7, #20]
 8018a62:	68db      	ldr	r3, [r3, #12]
 8018a64:	899b      	ldrh	r3, [r3, #12]
 8018a66:	b29b      	uxth	r3, r3
 8018a68:	4618      	mov	r0, r3
 8018a6a:	f7f8 f987 	bl	8010d7c <lwip_htons>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	b2db      	uxtb	r3, r3
 8018a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018a76:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018a78:	2300      	movs	r3, #0
 8018a7a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018a7c:	7efb      	ldrb	r3, [r7, #27]
 8018a7e:	f003 0308 	and.w	r3, r3, #8
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d007      	beq.n	8018a96 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8018a86:	7efb      	ldrb	r3, [r7, #27]
 8018a88:	f023 0308 	bic.w	r3, r3, #8
 8018a8c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018a8e:	7ebb      	ldrb	r3, [r7, #26]
 8018a90:	f043 0308 	orr.w	r3, r3, #8
 8018a94:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018a96:	7efb      	ldrb	r3, [r7, #27]
 8018a98:	f003 0301 	and.w	r3, r3, #1
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d007      	beq.n	8018ab0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018aa0:	7efb      	ldrb	r3, [r7, #27]
 8018aa2:	f023 0301 	bic.w	r3, r3, #1
 8018aa6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018aa8:	7ebb      	ldrb	r3, [r7, #26]
 8018aaa:	f043 0301 	orr.w	r3, r3, #1
 8018aae:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018ab0:	697b      	ldr	r3, [r7, #20]
 8018ab2:	68db      	ldr	r3, [r3, #12]
 8018ab4:	685b      	ldr	r3, [r3, #4]
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	f7f8 f975 	bl	8010da6 <lwip_htonl>
 8018abc:	4602      	mov	r2, r0
 8018abe:	887b      	ldrh	r3, [r7, #2]
 8018ac0:	18d1      	adds	r1, r2, r3
 8018ac2:	7eba      	ldrb	r2, [r7, #26]
 8018ac4:	7bfb      	ldrb	r3, [r7, #15]
 8018ac6:	9300      	str	r3, [sp, #0]
 8018ac8:	460b      	mov	r3, r1
 8018aca:	6939      	ldr	r1, [r7, #16]
 8018acc:	6878      	ldr	r0, [r7, #4]
 8018ace:	f7ff fa4f 	bl	8017f70 <tcp_create_segment>
 8018ad2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018ad4:	69fb      	ldr	r3, [r7, #28]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d063      	beq.n	8018ba2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018ada:	697b      	ldr	r3, [r7, #20]
 8018adc:	685b      	ldr	r3, [r3, #4]
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7fa fd68 	bl	80135b4 <pbuf_clen>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	461a      	mov	r2, r3
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018aee:	1a9b      	subs	r3, r3, r2
 8018af0:	b29a      	uxth	r2, r3
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018af8:	697b      	ldr	r3, [r7, #20]
 8018afa:	6858      	ldr	r0, [r3, #4]
 8018afc:	697b      	ldr	r3, [r7, #20]
 8018afe:	685b      	ldr	r3, [r3, #4]
 8018b00:	891a      	ldrh	r2, [r3, #8]
 8018b02:	89bb      	ldrh	r3, [r7, #12]
 8018b04:	1ad3      	subs	r3, r2, r3
 8018b06:	b29b      	uxth	r3, r3
 8018b08:	4619      	mov	r1, r3
 8018b0a:	f7fa fb3f 	bl	801318c <pbuf_realloc>
  useg->len -= remainder;
 8018b0e:	697b      	ldr	r3, [r7, #20]
 8018b10:	891a      	ldrh	r2, [r3, #8]
 8018b12:	89bb      	ldrh	r3, [r7, #12]
 8018b14:	1ad3      	subs	r3, r2, r3
 8018b16:	b29a      	uxth	r2, r3
 8018b18:	697b      	ldr	r3, [r7, #20]
 8018b1a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018b1c:	697b      	ldr	r3, [r7, #20]
 8018b1e:	68db      	ldr	r3, [r3, #12]
 8018b20:	899b      	ldrh	r3, [r3, #12]
 8018b22:	b29c      	uxth	r4, r3
 8018b24:	7efb      	ldrb	r3, [r7, #27]
 8018b26:	b29b      	uxth	r3, r3
 8018b28:	4618      	mov	r0, r3
 8018b2a:	f7f8 f927 	bl	8010d7c <lwip_htons>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	461a      	mov	r2, r3
 8018b32:	697b      	ldr	r3, [r7, #20]
 8018b34:	68db      	ldr	r3, [r3, #12]
 8018b36:	4322      	orrs	r2, r4
 8018b38:	b292      	uxth	r2, r2
 8018b3a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018b3c:	697b      	ldr	r3, [r7, #20]
 8018b3e:	685b      	ldr	r3, [r3, #4]
 8018b40:	4618      	mov	r0, r3
 8018b42:	f7fa fd37 	bl	80135b4 <pbuf_clen>
 8018b46:	4603      	mov	r3, r0
 8018b48:	461a      	mov	r2, r3
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018b50:	4413      	add	r3, r2
 8018b52:	b29a      	uxth	r2, r3
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018b5a:	69fb      	ldr	r3, [r7, #28]
 8018b5c:	685b      	ldr	r3, [r3, #4]
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f7fa fd28 	bl	80135b4 <pbuf_clen>
 8018b64:	4603      	mov	r3, r0
 8018b66:	461a      	mov	r2, r3
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018b6e:	4413      	add	r3, r2
 8018b70:	b29a      	uxth	r2, r3
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018b78:	697b      	ldr	r3, [r7, #20]
 8018b7a:	681a      	ldr	r2, [r3, #0]
 8018b7c:	69fb      	ldr	r3, [r7, #28]
 8018b7e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018b80:	697b      	ldr	r3, [r7, #20]
 8018b82:	69fa      	ldr	r2, [r7, #28]
 8018b84:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018b86:	69fb      	ldr	r3, [r7, #28]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d103      	bne.n	8018b96 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2200      	movs	r2, #0
 8018b92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018b96:	2300      	movs	r3, #0
 8018b98:	e016      	b.n	8018bc8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018b9a:	bf00      	nop
 8018b9c:	e002      	b.n	8018ba4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018b9e:	bf00      	nop
 8018ba0:	e000      	b.n	8018ba4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018ba2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018ba4:	69fb      	ldr	r3, [r7, #28]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d006      	beq.n	8018bb8 <tcp_split_unsent_seg+0x25c>
 8018baa:	4b09      	ldr	r3, [pc, #36]	; (8018bd0 <tcp_split_unsent_seg+0x274>)
 8018bac:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8018bb0:	490d      	ldr	r1, [pc, #52]	; (8018be8 <tcp_split_unsent_seg+0x28c>)
 8018bb2:	4809      	ldr	r0, [pc, #36]	; (8018bd8 <tcp_split_unsent_seg+0x27c>)
 8018bb4:	f006 fe9a 	bl	801f8ec <iprintf>
  if (p != NULL) {
 8018bb8:	693b      	ldr	r3, [r7, #16]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d002      	beq.n	8018bc4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8018bbe:	6938      	ldr	r0, [r7, #16]
 8018bc0:	f7fa fc6a 	bl	8013498 <pbuf_free>
  }

  return ERR_MEM;
 8018bc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018bc8:	4618      	mov	r0, r3
 8018bca:	3724      	adds	r7, #36	; 0x24
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bd90      	pop	{r4, r7, pc}
 8018bd0:	08023c20 	.word	0x08023c20
 8018bd4:	08023fb4 	.word	0x08023fb4
 8018bd8:	08023c74 	.word	0x08023c74
 8018bdc:	08023fd8 	.word	0x08023fd8
 8018be0:	08023ffc 	.word	0x08023ffc
 8018be4:	0802400c 	.word	0x0802400c
 8018be8:	0802401c 	.word	0x0802401c

08018bec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018bec:	b590      	push	{r4, r7, lr}
 8018bee:	b085      	sub	sp, #20
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d106      	bne.n	8018c08 <tcp_send_fin+0x1c>
 8018bfa:	4b21      	ldr	r3, [pc, #132]	; (8018c80 <tcp_send_fin+0x94>)
 8018bfc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8018c00:	4920      	ldr	r1, [pc, #128]	; (8018c84 <tcp_send_fin+0x98>)
 8018c02:	4821      	ldr	r0, [pc, #132]	; (8018c88 <tcp_send_fin+0x9c>)
 8018c04:	f006 fe72 	bl	801f8ec <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d02e      	beq.n	8018c6e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c14:	60fb      	str	r3, [r7, #12]
 8018c16:	e002      	b.n	8018c1e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d1f8      	bne.n	8018c18 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	68db      	ldr	r3, [r3, #12]
 8018c2a:	899b      	ldrh	r3, [r3, #12]
 8018c2c:	b29b      	uxth	r3, r3
 8018c2e:	4618      	mov	r0, r3
 8018c30:	f7f8 f8a4 	bl	8010d7c <lwip_htons>
 8018c34:	4603      	mov	r3, r0
 8018c36:	b2db      	uxtb	r3, r3
 8018c38:	f003 0307 	and.w	r3, r3, #7
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d116      	bne.n	8018c6e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	68db      	ldr	r3, [r3, #12]
 8018c44:	899b      	ldrh	r3, [r3, #12]
 8018c46:	b29c      	uxth	r4, r3
 8018c48:	2001      	movs	r0, #1
 8018c4a:	f7f8 f897 	bl	8010d7c <lwip_htons>
 8018c4e:	4603      	mov	r3, r0
 8018c50:	461a      	mov	r2, r3
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	68db      	ldr	r3, [r3, #12]
 8018c56:	4322      	orrs	r2, r4
 8018c58:	b292      	uxth	r2, r2
 8018c5a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	8b5b      	ldrh	r3, [r3, #26]
 8018c60:	f043 0320 	orr.w	r3, r3, #32
 8018c64:	b29a      	uxth	r2, r3
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	e004      	b.n	8018c78 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018c6e:	2101      	movs	r1, #1
 8018c70:	6878      	ldr	r0, [r7, #4]
 8018c72:	f000 f80b 	bl	8018c8c <tcp_enqueue_flags>
 8018c76:	4603      	mov	r3, r0
}
 8018c78:	4618      	mov	r0, r3
 8018c7a:	3714      	adds	r7, #20
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd90      	pop	{r4, r7, pc}
 8018c80:	08023c20 	.word	0x08023c20
 8018c84:	08024028 	.word	0x08024028
 8018c88:	08023c74 	.word	0x08023c74

08018c8c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b08a      	sub	sp, #40	; 0x28
 8018c90:	af02      	add	r7, sp, #8
 8018c92:	6078      	str	r0, [r7, #4]
 8018c94:	460b      	mov	r3, r1
 8018c96:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018c98:	2300      	movs	r3, #0
 8018c9a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018ca0:	78fb      	ldrb	r3, [r7, #3]
 8018ca2:	f003 0303 	and.w	r3, r3, #3
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d106      	bne.n	8018cb8 <tcp_enqueue_flags+0x2c>
 8018caa:	4b67      	ldr	r3, [pc, #412]	; (8018e48 <tcp_enqueue_flags+0x1bc>)
 8018cac:	f240 4211 	movw	r2, #1041	; 0x411
 8018cb0:	4966      	ldr	r1, [pc, #408]	; (8018e4c <tcp_enqueue_flags+0x1c0>)
 8018cb2:	4867      	ldr	r0, [pc, #412]	; (8018e50 <tcp_enqueue_flags+0x1c4>)
 8018cb4:	f006 fe1a 	bl	801f8ec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d106      	bne.n	8018ccc <tcp_enqueue_flags+0x40>
 8018cbe:	4b62      	ldr	r3, [pc, #392]	; (8018e48 <tcp_enqueue_flags+0x1bc>)
 8018cc0:	f240 4213 	movw	r2, #1043	; 0x413
 8018cc4:	4963      	ldr	r1, [pc, #396]	; (8018e54 <tcp_enqueue_flags+0x1c8>)
 8018cc6:	4862      	ldr	r0, [pc, #392]	; (8018e50 <tcp_enqueue_flags+0x1c4>)
 8018cc8:	f006 fe10 	bl	801f8ec <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018ccc:	78fb      	ldrb	r3, [r7, #3]
 8018cce:	f003 0302 	and.w	r3, r3, #2
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d001      	beq.n	8018cda <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018cd6:	2301      	movs	r3, #1
 8018cd8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018cda:	7ffb      	ldrb	r3, [r7, #31]
 8018cdc:	009b      	lsls	r3, r3, #2
 8018cde:	b2db      	uxtb	r3, r3
 8018ce0:	f003 0304 	and.w	r3, r3, #4
 8018ce4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018ce6:	7dfb      	ldrb	r3, [r7, #23]
 8018ce8:	b29b      	uxth	r3, r3
 8018cea:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018cee:	4619      	mov	r1, r3
 8018cf0:	2036      	movs	r0, #54	; 0x36
 8018cf2:	f7fa f8ed 	bl	8012ed0 <pbuf_alloc>
 8018cf6:	6138      	str	r0, [r7, #16]
 8018cf8:	693b      	ldr	r3, [r7, #16]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d109      	bne.n	8018d12 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	8b5b      	ldrh	r3, [r3, #26]
 8018d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d06:	b29a      	uxth	r2, r3
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8018d10:	e095      	b.n	8018e3e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8018d12:	693b      	ldr	r3, [r7, #16]
 8018d14:	895a      	ldrh	r2, [r3, #10]
 8018d16:	7dfb      	ldrb	r3, [r7, #23]
 8018d18:	b29b      	uxth	r3, r3
 8018d1a:	429a      	cmp	r2, r3
 8018d1c:	d206      	bcs.n	8018d2c <tcp_enqueue_flags+0xa0>
 8018d1e:	4b4a      	ldr	r3, [pc, #296]	; (8018e48 <tcp_enqueue_flags+0x1bc>)
 8018d20:	f240 4239 	movw	r2, #1081	; 0x439
 8018d24:	494c      	ldr	r1, [pc, #304]	; (8018e58 <tcp_enqueue_flags+0x1cc>)
 8018d26:	484a      	ldr	r0, [pc, #296]	; (8018e50 <tcp_enqueue_flags+0x1c4>)
 8018d28:	f006 fde0 	bl	801f8ec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8018d30:	78fa      	ldrb	r2, [r7, #3]
 8018d32:	7ffb      	ldrb	r3, [r7, #31]
 8018d34:	9300      	str	r3, [sp, #0]
 8018d36:	460b      	mov	r3, r1
 8018d38:	6939      	ldr	r1, [r7, #16]
 8018d3a:	6878      	ldr	r0, [r7, #4]
 8018d3c:	f7ff f918 	bl	8017f70 <tcp_create_segment>
 8018d40:	60f8      	str	r0, [r7, #12]
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d109      	bne.n	8018d5c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	8b5b      	ldrh	r3, [r3, #26]
 8018d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d50:	b29a      	uxth	r2, r3
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018d56:	f04f 33ff 	mov.w	r3, #4294967295
 8018d5a:	e070      	b.n	8018e3e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	68db      	ldr	r3, [r3, #12]
 8018d60:	f003 0303 	and.w	r3, r3, #3
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d006      	beq.n	8018d76 <tcp_enqueue_flags+0xea>
 8018d68:	4b37      	ldr	r3, [pc, #220]	; (8018e48 <tcp_enqueue_flags+0x1bc>)
 8018d6a:	f240 4242 	movw	r2, #1090	; 0x442
 8018d6e:	493b      	ldr	r1, [pc, #236]	; (8018e5c <tcp_enqueue_flags+0x1d0>)
 8018d70:	4837      	ldr	r0, [pc, #220]	; (8018e50 <tcp_enqueue_flags+0x1c4>)
 8018d72:	f006 fdbb 	bl	801f8ec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	891b      	ldrh	r3, [r3, #8]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d006      	beq.n	8018d8c <tcp_enqueue_flags+0x100>
 8018d7e:	4b32      	ldr	r3, [pc, #200]	; (8018e48 <tcp_enqueue_flags+0x1bc>)
 8018d80:	f240 4243 	movw	r2, #1091	; 0x443
 8018d84:	4936      	ldr	r1, [pc, #216]	; (8018e60 <tcp_enqueue_flags+0x1d4>)
 8018d86:	4832      	ldr	r0, [pc, #200]	; (8018e50 <tcp_enqueue_flags+0x1c4>)
 8018d88:	f006 fdb0 	bl	801f8ec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d103      	bne.n	8018d9c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	68fa      	ldr	r2, [r7, #12]
 8018d98:	66da      	str	r2, [r3, #108]	; 0x6c
 8018d9a:	e00d      	b.n	8018db8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018da0:	61bb      	str	r3, [r7, #24]
 8018da2:	e002      	b.n	8018daa <tcp_enqueue_flags+0x11e>
 8018da4:	69bb      	ldr	r3, [r7, #24]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	61bb      	str	r3, [r7, #24]
 8018daa:	69bb      	ldr	r3, [r7, #24]
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d1f8      	bne.n	8018da4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8018db2:	69bb      	ldr	r3, [r7, #24]
 8018db4:	68fa      	ldr	r2, [r7, #12]
 8018db6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018dc0:	78fb      	ldrb	r3, [r7, #3]
 8018dc2:	f003 0302 	and.w	r3, r3, #2
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d104      	bne.n	8018dd4 <tcp_enqueue_flags+0x148>
 8018dca:	78fb      	ldrb	r3, [r7, #3]
 8018dcc:	f003 0301 	and.w	r3, r3, #1
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d004      	beq.n	8018dde <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018dd8:	1c5a      	adds	r2, r3, #1
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018dde:	78fb      	ldrb	r3, [r7, #3]
 8018de0:	f003 0301 	and.w	r3, r3, #1
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d006      	beq.n	8018df6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	8b5b      	ldrh	r3, [r3, #26]
 8018dec:	f043 0320 	orr.w	r3, r3, #32
 8018df0:	b29a      	uxth	r2, r3
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	685b      	ldr	r3, [r3, #4]
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7fa fbda 	bl	80135b4 <pbuf_clen>
 8018e00:	4603      	mov	r3, r0
 8018e02:	461a      	mov	r2, r3
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018e0a:	4413      	add	r3, r2
 8018e0c:	b29a      	uxth	r2, r3
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d00e      	beq.n	8018e3c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d10a      	bne.n	8018e3c <tcp_enqueue_flags+0x1b0>
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d106      	bne.n	8018e3c <tcp_enqueue_flags+0x1b0>
 8018e2e:	4b06      	ldr	r3, [pc, #24]	; (8018e48 <tcp_enqueue_flags+0x1bc>)
 8018e30:	f240 4265 	movw	r2, #1125	; 0x465
 8018e34:	490b      	ldr	r1, [pc, #44]	; (8018e64 <tcp_enqueue_flags+0x1d8>)
 8018e36:	4806      	ldr	r0, [pc, #24]	; (8018e50 <tcp_enqueue_flags+0x1c4>)
 8018e38:	f006 fd58 	bl	801f8ec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018e3c:	2300      	movs	r3, #0
}
 8018e3e:	4618      	mov	r0, r3
 8018e40:	3720      	adds	r7, #32
 8018e42:	46bd      	mov	sp, r7
 8018e44:	bd80      	pop	{r7, pc}
 8018e46:	bf00      	nop
 8018e48:	08023c20 	.word	0x08023c20
 8018e4c:	08024044 	.word	0x08024044
 8018e50:	08023c74 	.word	0x08023c74
 8018e54:	0802409c 	.word	0x0802409c
 8018e58:	080240bc 	.word	0x080240bc
 8018e5c:	080240f8 	.word	0x080240f8
 8018e60:	08024110 	.word	0x08024110
 8018e64:	0802413c 	.word	0x0802413c

08018e68 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018e68:	b5b0      	push	{r4, r5, r7, lr}
 8018e6a:	b08a      	sub	sp, #40	; 0x28
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d106      	bne.n	8018e84 <tcp_output+0x1c>
 8018e76:	4b9e      	ldr	r3, [pc, #632]	; (80190f0 <tcp_output+0x288>)
 8018e78:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8018e7c:	499d      	ldr	r1, [pc, #628]	; (80190f4 <tcp_output+0x28c>)
 8018e7e:	489e      	ldr	r0, [pc, #632]	; (80190f8 <tcp_output+0x290>)
 8018e80:	f006 fd34 	bl	801f8ec <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	7d1b      	ldrb	r3, [r3, #20]
 8018e88:	2b01      	cmp	r3, #1
 8018e8a:	d106      	bne.n	8018e9a <tcp_output+0x32>
 8018e8c:	4b98      	ldr	r3, [pc, #608]	; (80190f0 <tcp_output+0x288>)
 8018e8e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8018e92:	499a      	ldr	r1, [pc, #616]	; (80190fc <tcp_output+0x294>)
 8018e94:	4898      	ldr	r0, [pc, #608]	; (80190f8 <tcp_output+0x290>)
 8018e96:	f006 fd29 	bl	801f8ec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018e9a:	4b99      	ldr	r3, [pc, #612]	; (8019100 <tcp_output+0x298>)
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	687a      	ldr	r2, [r7, #4]
 8018ea0:	429a      	cmp	r2, r3
 8018ea2:	d101      	bne.n	8018ea8 <tcp_output+0x40>
    return ERR_OK;
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	e1ce      	b.n	8019246 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018eb4:	4293      	cmp	r3, r2
 8018eb6:	bf28      	it	cs
 8018eb8:	4613      	movcs	r3, r2
 8018eba:	b29b      	uxth	r3, r3
 8018ebc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ec2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8018ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d10b      	bne.n	8018ee2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	8b5b      	ldrh	r3, [r3, #26]
 8018ece:	f003 0302 	and.w	r3, r3, #2
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	f000 81aa 	beq.w	801922c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018ed8:	6878      	ldr	r0, [r7, #4]
 8018eda:	f000 fdcb 	bl	8019a74 <tcp_send_empty_ack>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	e1b1      	b.n	8019246 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8018ee2:	6879      	ldr	r1, [r7, #4]
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	3304      	adds	r3, #4
 8018ee8:	461a      	mov	r2, r3
 8018eea:	6878      	ldr	r0, [r7, #4]
 8018eec:	f7ff f824 	bl	8017f38 <tcp_route>
 8018ef0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8018ef2:	697b      	ldr	r3, [r7, #20]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d102      	bne.n	8018efe <tcp_output+0x96>
    return ERR_RTE;
 8018ef8:	f06f 0303 	mvn.w	r3, #3
 8018efc:	e1a3      	b.n	8019246 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d003      	beq.n	8018f0c <tcp_output+0xa4>
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d111      	bne.n	8018f30 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018f0c:	697b      	ldr	r3, [r7, #20]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d002      	beq.n	8018f18 <tcp_output+0xb0>
 8018f12:	697b      	ldr	r3, [r7, #20]
 8018f14:	3304      	adds	r3, #4
 8018f16:	e000      	b.n	8018f1a <tcp_output+0xb2>
 8018f18:	2300      	movs	r3, #0
 8018f1a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018f1c:	693b      	ldr	r3, [r7, #16]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d102      	bne.n	8018f28 <tcp_output+0xc0>
      return ERR_RTE;
 8018f22:	f06f 0303 	mvn.w	r3, #3
 8018f26:	e18e      	b.n	8019246 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	681a      	ldr	r2, [r3, #0]
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f32:	68db      	ldr	r3, [r3, #12]
 8018f34:	685b      	ldr	r3, [r3, #4]
 8018f36:	4618      	mov	r0, r3
 8018f38:	f7f7 ff35 	bl	8010da6 <lwip_htonl>
 8018f3c:	4602      	mov	r2, r0
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f42:	1ad3      	subs	r3, r2, r3
 8018f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f46:	8912      	ldrh	r2, [r2, #8]
 8018f48:	4413      	add	r3, r2
 8018f4a:	69ba      	ldr	r2, [r7, #24]
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d227      	bcs.n	8018fa0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018f56:	461a      	mov	r2, r3
 8018f58:	69bb      	ldr	r3, [r7, #24]
 8018f5a:	4293      	cmp	r3, r2
 8018f5c:	d114      	bne.n	8018f88 <tcp_output+0x120>
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d110      	bne.n	8018f88 <tcp_output+0x120>
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d10b      	bne.n	8018f88 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	2200      	movs	r2, #0
 8018f74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	2201      	movs	r2, #1
 8018f7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2200      	movs	r2, #0
 8018f84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	8b5b      	ldrh	r3, [r3, #26]
 8018f8c:	f003 0302 	and.w	r3, r3, #2
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	f000 814d 	beq.w	8019230 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018f96:	6878      	ldr	r0, [r7, #4]
 8018f98:	f000 fd6c 	bl	8019a74 <tcp_send_empty_ack>
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	e152      	b.n	8019246 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fac:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018fae:	6a3b      	ldr	r3, [r7, #32]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	f000 811c 	beq.w	80191ee <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018fb6:	e002      	b.n	8018fbe <tcp_output+0x156>
 8018fb8:	6a3b      	ldr	r3, [r7, #32]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	623b      	str	r3, [r7, #32]
 8018fbe:	6a3b      	ldr	r3, [r7, #32]
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d1f8      	bne.n	8018fb8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018fc6:	e112      	b.n	80191ee <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fca:	68db      	ldr	r3, [r3, #12]
 8018fcc:	899b      	ldrh	r3, [r3, #12]
 8018fce:	b29b      	uxth	r3, r3
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f7f7 fed3 	bl	8010d7c <lwip_htons>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	b2db      	uxtb	r3, r3
 8018fda:	f003 0304 	and.w	r3, r3, #4
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d006      	beq.n	8018ff0 <tcp_output+0x188>
 8018fe2:	4b43      	ldr	r3, [pc, #268]	; (80190f0 <tcp_output+0x288>)
 8018fe4:	f240 5236 	movw	r2, #1334	; 0x536
 8018fe8:	4946      	ldr	r1, [pc, #280]	; (8019104 <tcp_output+0x29c>)
 8018fea:	4843      	ldr	r0, [pc, #268]	; (80190f8 <tcp_output+0x290>)
 8018fec:	f006 fc7e 	bl	801f8ec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d01f      	beq.n	8019038 <tcp_output+0x1d0>
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	8b5b      	ldrh	r3, [r3, #26]
 8018ffc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019000:	2b00      	cmp	r3, #0
 8019002:	d119      	bne.n	8019038 <tcp_output+0x1d0>
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019008:	2b00      	cmp	r3, #0
 801900a:	d00b      	beq.n	8019024 <tcp_output+0x1bc>
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d110      	bne.n	8019038 <tcp_output+0x1d0>
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801901a:	891a      	ldrh	r2, [r3, #8]
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019020:	429a      	cmp	r2, r3
 8019022:	d209      	bcs.n	8019038 <tcp_output+0x1d0>
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801902a:	2b00      	cmp	r3, #0
 801902c:	d004      	beq.n	8019038 <tcp_output+0x1d0>
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019034:	2b08      	cmp	r3, #8
 8019036:	d901      	bls.n	801903c <tcp_output+0x1d4>
 8019038:	2301      	movs	r3, #1
 801903a:	e000      	b.n	801903e <tcp_output+0x1d6>
 801903c:	2300      	movs	r3, #0
 801903e:	2b00      	cmp	r3, #0
 8019040:	d106      	bne.n	8019050 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	8b5b      	ldrh	r3, [r3, #26]
 8019046:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801904a:	2b00      	cmp	r3, #0
 801904c:	f000 80e4 	beq.w	8019218 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	7d1b      	ldrb	r3, [r3, #20]
 8019054:	2b02      	cmp	r3, #2
 8019056:	d00d      	beq.n	8019074 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801905a:	68db      	ldr	r3, [r3, #12]
 801905c:	899b      	ldrh	r3, [r3, #12]
 801905e:	b29c      	uxth	r4, r3
 8019060:	2010      	movs	r0, #16
 8019062:	f7f7 fe8b 	bl	8010d7c <lwip_htons>
 8019066:	4603      	mov	r3, r0
 8019068:	461a      	mov	r2, r3
 801906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801906c:	68db      	ldr	r3, [r3, #12]
 801906e:	4322      	orrs	r2, r4
 8019070:	b292      	uxth	r2, r2
 8019072:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019074:	697a      	ldr	r2, [r7, #20]
 8019076:	6879      	ldr	r1, [r7, #4]
 8019078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801907a:	f000 f909 	bl	8019290 <tcp_output_segment>
 801907e:	4603      	mov	r3, r0
 8019080:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d009      	beq.n	801909e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	8b5b      	ldrh	r3, [r3, #26]
 801908e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019092:	b29a      	uxth	r2, r3
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	835a      	strh	r2, [r3, #26]
      return err;
 8019098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801909c:	e0d3      	b.n	8019246 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190a0:	681a      	ldr	r2, [r3, #0]
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	7d1b      	ldrb	r3, [r3, #20]
 80190aa:	2b02      	cmp	r3, #2
 80190ac:	d006      	beq.n	80190bc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	8b5b      	ldrh	r3, [r3, #26]
 80190b2:	f023 0303 	bic.w	r3, r3, #3
 80190b6:	b29a      	uxth	r2, r3
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80190bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190be:	68db      	ldr	r3, [r3, #12]
 80190c0:	685b      	ldr	r3, [r3, #4]
 80190c2:	4618      	mov	r0, r3
 80190c4:	f7f7 fe6f 	bl	8010da6 <lwip_htonl>
 80190c8:	4604      	mov	r4, r0
 80190ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190cc:	891b      	ldrh	r3, [r3, #8]
 80190ce:	461d      	mov	r5, r3
 80190d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190d2:	68db      	ldr	r3, [r3, #12]
 80190d4:	899b      	ldrh	r3, [r3, #12]
 80190d6:	b29b      	uxth	r3, r3
 80190d8:	4618      	mov	r0, r3
 80190da:	f7f7 fe4f 	bl	8010d7c <lwip_htons>
 80190de:	4603      	mov	r3, r0
 80190e0:	b2db      	uxtb	r3, r3
 80190e2:	f003 0303 	and.w	r3, r3, #3
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d00e      	beq.n	8019108 <tcp_output+0x2a0>
 80190ea:	2301      	movs	r3, #1
 80190ec:	e00d      	b.n	801910a <tcp_output+0x2a2>
 80190ee:	bf00      	nop
 80190f0:	08023c20 	.word	0x08023c20
 80190f4:	08024164 	.word	0x08024164
 80190f8:	08023c74 	.word	0x08023c74
 80190fc:	0802417c 	.word	0x0802417c
 8019100:	20016ba4 	.word	0x20016ba4
 8019104:	080241a4 	.word	0x080241a4
 8019108:	2300      	movs	r3, #0
 801910a:	442b      	add	r3, r5
 801910c:	4423      	add	r3, r4
 801910e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	1ad3      	subs	r3, r2, r3
 8019118:	2b00      	cmp	r3, #0
 801911a:	da02      	bge.n	8019122 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	68ba      	ldr	r2, [r7, #8]
 8019120:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019124:	891b      	ldrh	r3, [r3, #8]
 8019126:	461c      	mov	r4, r3
 8019128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801912a:	68db      	ldr	r3, [r3, #12]
 801912c:	899b      	ldrh	r3, [r3, #12]
 801912e:	b29b      	uxth	r3, r3
 8019130:	4618      	mov	r0, r3
 8019132:	f7f7 fe23 	bl	8010d7c <lwip_htons>
 8019136:	4603      	mov	r3, r0
 8019138:	b2db      	uxtb	r3, r3
 801913a:	f003 0303 	and.w	r3, r3, #3
 801913e:	2b00      	cmp	r3, #0
 8019140:	d001      	beq.n	8019146 <tcp_output+0x2de>
 8019142:	2301      	movs	r3, #1
 8019144:	e000      	b.n	8019148 <tcp_output+0x2e0>
 8019146:	2300      	movs	r3, #0
 8019148:	4423      	add	r3, r4
 801914a:	2b00      	cmp	r3, #0
 801914c:	d049      	beq.n	80191e2 <tcp_output+0x37a>
      seg->next = NULL;
 801914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019150:	2200      	movs	r2, #0
 8019152:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019158:	2b00      	cmp	r3, #0
 801915a:	d105      	bne.n	8019168 <tcp_output+0x300>
        pcb->unacked = seg;
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019160:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019164:	623b      	str	r3, [r7, #32]
 8019166:	e03f      	b.n	80191e8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801916a:	68db      	ldr	r3, [r3, #12]
 801916c:	685b      	ldr	r3, [r3, #4]
 801916e:	4618      	mov	r0, r3
 8019170:	f7f7 fe19 	bl	8010da6 <lwip_htonl>
 8019174:	4604      	mov	r4, r0
 8019176:	6a3b      	ldr	r3, [r7, #32]
 8019178:	68db      	ldr	r3, [r3, #12]
 801917a:	685b      	ldr	r3, [r3, #4]
 801917c:	4618      	mov	r0, r3
 801917e:	f7f7 fe12 	bl	8010da6 <lwip_htonl>
 8019182:	4603      	mov	r3, r0
 8019184:	1ae3      	subs	r3, r4, r3
 8019186:	2b00      	cmp	r3, #0
 8019188:	da24      	bge.n	80191d4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	3370      	adds	r3, #112	; 0x70
 801918e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019190:	e002      	b.n	8019198 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019192:	69fb      	ldr	r3, [r7, #28]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019198:	69fb      	ldr	r3, [r7, #28]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	2b00      	cmp	r3, #0
 801919e:	d011      	beq.n	80191c4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80191a0:	69fb      	ldr	r3, [r7, #28]
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	68db      	ldr	r3, [r3, #12]
 80191a6:	685b      	ldr	r3, [r3, #4]
 80191a8:	4618      	mov	r0, r3
 80191aa:	f7f7 fdfc 	bl	8010da6 <lwip_htonl>
 80191ae:	4604      	mov	r4, r0
 80191b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191b2:	68db      	ldr	r3, [r3, #12]
 80191b4:	685b      	ldr	r3, [r3, #4]
 80191b6:	4618      	mov	r0, r3
 80191b8:	f7f7 fdf5 	bl	8010da6 <lwip_htonl>
 80191bc:	4603      	mov	r3, r0
 80191be:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	dbe6      	blt.n	8019192 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80191c4:	69fb      	ldr	r3, [r7, #28]
 80191c6:	681a      	ldr	r2, [r3, #0]
 80191c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191ca:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80191cc:	69fb      	ldr	r3, [r7, #28]
 80191ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191d0:	601a      	str	r2, [r3, #0]
 80191d2:	e009      	b.n	80191e8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80191d4:	6a3b      	ldr	r3, [r7, #32]
 80191d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191d8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80191da:	6a3b      	ldr	r3, [r7, #32]
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	623b      	str	r3, [r7, #32]
 80191e0:	e002      	b.n	80191e8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80191e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80191e4:	f7fb ff1d 	bl	8015022 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80191ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80191ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d012      	beq.n	801921a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80191f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191f6:	68db      	ldr	r3, [r3, #12]
 80191f8:	685b      	ldr	r3, [r3, #4]
 80191fa:	4618      	mov	r0, r3
 80191fc:	f7f7 fdd3 	bl	8010da6 <lwip_htonl>
 8019200:	4602      	mov	r2, r0
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019206:	1ad3      	subs	r3, r2, r3
 8019208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801920a:	8912      	ldrh	r2, [r2, #8]
 801920c:	4413      	add	r3, r2
  while (seg != NULL &&
 801920e:	69ba      	ldr	r2, [r7, #24]
 8019210:	429a      	cmp	r2, r3
 8019212:	f4bf aed9 	bcs.w	8018fc8 <tcp_output+0x160>
 8019216:	e000      	b.n	801921a <tcp_output+0x3b2>
      break;
 8019218:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801921e:	2b00      	cmp	r3, #0
 8019220:	d108      	bne.n	8019234 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	2200      	movs	r2, #0
 8019226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801922a:	e004      	b.n	8019236 <tcp_output+0x3ce>
    goto output_done;
 801922c:	bf00      	nop
 801922e:	e002      	b.n	8019236 <tcp_output+0x3ce>
    goto output_done;
 8019230:	bf00      	nop
 8019232:	e000      	b.n	8019236 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019234:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	8b5b      	ldrh	r3, [r3, #26]
 801923a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801923e:	b29a      	uxth	r2, r3
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019244:	2300      	movs	r3, #0
}
 8019246:	4618      	mov	r0, r3
 8019248:	3728      	adds	r7, #40	; 0x28
 801924a:	46bd      	mov	sp, r7
 801924c:	bdb0      	pop	{r4, r5, r7, pc}
 801924e:	bf00      	nop

08019250 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b082      	sub	sp, #8
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d106      	bne.n	801926c <tcp_output_segment_busy+0x1c>
 801925e:	4b09      	ldr	r3, [pc, #36]	; (8019284 <tcp_output_segment_busy+0x34>)
 8019260:	f240 529a 	movw	r2, #1434	; 0x59a
 8019264:	4908      	ldr	r1, [pc, #32]	; (8019288 <tcp_output_segment_busy+0x38>)
 8019266:	4809      	ldr	r0, [pc, #36]	; (801928c <tcp_output_segment_busy+0x3c>)
 8019268:	f006 fb40 	bl	801f8ec <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	685b      	ldr	r3, [r3, #4]
 8019270:	7b9b      	ldrb	r3, [r3, #14]
 8019272:	2b01      	cmp	r3, #1
 8019274:	d001      	beq.n	801927a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019276:	2301      	movs	r3, #1
 8019278:	e000      	b.n	801927c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801927a:	2300      	movs	r3, #0
}
 801927c:	4618      	mov	r0, r3
 801927e:	3708      	adds	r7, #8
 8019280:	46bd      	mov	sp, r7
 8019282:	bd80      	pop	{r7, pc}
 8019284:	08023c20 	.word	0x08023c20
 8019288:	080241bc 	.word	0x080241bc
 801928c:	08023c74 	.word	0x08023c74

08019290 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019290:	b5b0      	push	{r4, r5, r7, lr}
 8019292:	b08c      	sub	sp, #48	; 0x30
 8019294:	af04      	add	r7, sp, #16
 8019296:	60f8      	str	r0, [r7, #12]
 8019298:	60b9      	str	r1, [r7, #8]
 801929a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d106      	bne.n	80192b0 <tcp_output_segment+0x20>
 80192a2:	4b63      	ldr	r3, [pc, #396]	; (8019430 <tcp_output_segment+0x1a0>)
 80192a4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80192a8:	4962      	ldr	r1, [pc, #392]	; (8019434 <tcp_output_segment+0x1a4>)
 80192aa:	4863      	ldr	r0, [pc, #396]	; (8019438 <tcp_output_segment+0x1a8>)
 80192ac:	f006 fb1e 	bl	801f8ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80192b0:	68bb      	ldr	r3, [r7, #8]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d106      	bne.n	80192c4 <tcp_output_segment+0x34>
 80192b6:	4b5e      	ldr	r3, [pc, #376]	; (8019430 <tcp_output_segment+0x1a0>)
 80192b8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80192bc:	495f      	ldr	r1, [pc, #380]	; (801943c <tcp_output_segment+0x1ac>)
 80192be:	485e      	ldr	r0, [pc, #376]	; (8019438 <tcp_output_segment+0x1a8>)
 80192c0:	f006 fb14 	bl	801f8ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d106      	bne.n	80192d8 <tcp_output_segment+0x48>
 80192ca:	4b59      	ldr	r3, [pc, #356]	; (8019430 <tcp_output_segment+0x1a0>)
 80192cc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80192d0:	495b      	ldr	r1, [pc, #364]	; (8019440 <tcp_output_segment+0x1b0>)
 80192d2:	4859      	ldr	r0, [pc, #356]	; (8019438 <tcp_output_segment+0x1a8>)
 80192d4:	f006 fb0a 	bl	801f8ec <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80192d8:	68f8      	ldr	r0, [r7, #12]
 80192da:	f7ff ffb9 	bl	8019250 <tcp_output_segment_busy>
 80192de:	4603      	mov	r3, r0
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d001      	beq.n	80192e8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80192e4:	2300      	movs	r3, #0
 80192e6:	e09f      	b.n	8019428 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80192e8:	68bb      	ldr	r3, [r7, #8]
 80192ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	68dc      	ldr	r4, [r3, #12]
 80192f0:	4610      	mov	r0, r2
 80192f2:	f7f7 fd58 	bl	8010da6 <lwip_htonl>
 80192f6:	4603      	mov	r3, r0
 80192f8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80192fa:	68bb      	ldr	r3, [r7, #8]
 80192fc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	68dc      	ldr	r4, [r3, #12]
 8019302:	4610      	mov	r0, r2
 8019304:	f7f7 fd3a 	bl	8010d7c <lwip_htons>
 8019308:	4603      	mov	r3, r0
 801930a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801930c:	68bb      	ldr	r3, [r7, #8]
 801930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019310:	68ba      	ldr	r2, [r7, #8]
 8019312:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019314:	441a      	add	r2, r3
 8019316:	68bb      	ldr	r3, [r7, #8]
 8019318:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	68db      	ldr	r3, [r3, #12]
 801931e:	3314      	adds	r3, #20
 8019320:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	7a9b      	ldrb	r3, [r3, #10]
 8019326:	f003 0301 	and.w	r3, r3, #1
 801932a:	2b00      	cmp	r3, #0
 801932c:	d015      	beq.n	801935a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801932e:	68bb      	ldr	r3, [r7, #8]
 8019330:	3304      	adds	r3, #4
 8019332:	461a      	mov	r2, r3
 8019334:	6879      	ldr	r1, [r7, #4]
 8019336:	f44f 7006 	mov.w	r0, #536	; 0x218
 801933a:	f7fc fa37 	bl	80157ac <tcp_eff_send_mss_netif>
 801933e:	4603      	mov	r3, r0
 8019340:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019342:	8b7b      	ldrh	r3, [r7, #26]
 8019344:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8019348:	4618      	mov	r0, r3
 801934a:	f7f7 fd2c 	bl	8010da6 <lwip_htonl>
 801934e:	4602      	mov	r2, r0
 8019350:	69fb      	ldr	r3, [r7, #28]
 8019352:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019354:	69fb      	ldr	r3, [r7, #28]
 8019356:	3304      	adds	r3, #4
 8019358:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801935a:	68bb      	ldr	r3, [r7, #8]
 801935c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019360:	2b00      	cmp	r3, #0
 8019362:	da02      	bge.n	801936a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019364:	68bb      	ldr	r3, [r7, #8]
 8019366:	2200      	movs	r2, #0
 8019368:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801936a:	68bb      	ldr	r3, [r7, #8]
 801936c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801936e:	2b00      	cmp	r3, #0
 8019370:	d10c      	bne.n	801938c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8019372:	4b34      	ldr	r3, [pc, #208]	; (8019444 <tcp_output_segment+0x1b4>)
 8019374:	681a      	ldr	r2, [r3, #0]
 8019376:	68bb      	ldr	r3, [r7, #8]
 8019378:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	68db      	ldr	r3, [r3, #12]
 801937e:	685b      	ldr	r3, [r3, #4]
 8019380:	4618      	mov	r0, r3
 8019382:	f7f7 fd10 	bl	8010da6 <lwip_htonl>
 8019386:	4602      	mov	r2, r0
 8019388:	68bb      	ldr	r3, [r7, #8]
 801938a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	68da      	ldr	r2, [r3, #12]
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	685b      	ldr	r3, [r3, #4]
 8019394:	685b      	ldr	r3, [r3, #4]
 8019396:	1ad3      	subs	r3, r2, r3
 8019398:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	685b      	ldr	r3, [r3, #4]
 801939e:	8959      	ldrh	r1, [r3, #10]
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	685b      	ldr	r3, [r3, #4]
 80193a4:	8b3a      	ldrh	r2, [r7, #24]
 80193a6:	1a8a      	subs	r2, r1, r2
 80193a8:	b292      	uxth	r2, r2
 80193aa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	685b      	ldr	r3, [r3, #4]
 80193b0:	8919      	ldrh	r1, [r3, #8]
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	685b      	ldr	r3, [r3, #4]
 80193b6:	8b3a      	ldrh	r2, [r7, #24]
 80193b8:	1a8a      	subs	r2, r1, r2
 80193ba:	b292      	uxth	r2, r2
 80193bc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	685b      	ldr	r3, [r3, #4]
 80193c2:	68fa      	ldr	r2, [r7, #12]
 80193c4:	68d2      	ldr	r2, [r2, #12]
 80193c6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	68db      	ldr	r3, [r3, #12]
 80193cc:	2200      	movs	r2, #0
 80193ce:	741a      	strb	r2, [r3, #16]
 80193d0:	2200      	movs	r2, #0
 80193d2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	68db      	ldr	r3, [r3, #12]
 80193d8:	f103 0214 	add.w	r2, r3, #20
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	7a9b      	ldrb	r3, [r3, #10]
 80193e0:	009b      	lsls	r3, r3, #2
 80193e2:	f003 0304 	and.w	r3, r3, #4
 80193e6:	4413      	add	r3, r2
 80193e8:	69fa      	ldr	r2, [r7, #28]
 80193ea:	429a      	cmp	r2, r3
 80193ec:	d006      	beq.n	80193fc <tcp_output_segment+0x16c>
 80193ee:	4b10      	ldr	r3, [pc, #64]	; (8019430 <tcp_output_segment+0x1a0>)
 80193f0:	f240 621c 	movw	r2, #1564	; 0x61c
 80193f4:	4914      	ldr	r1, [pc, #80]	; (8019448 <tcp_output_segment+0x1b8>)
 80193f6:	4810      	ldr	r0, [pc, #64]	; (8019438 <tcp_output_segment+0x1a8>)
 80193f8:	f006 fa78 	bl	801f8ec <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	6858      	ldr	r0, [r3, #4]
 8019400:	68b9      	ldr	r1, [r7, #8]
 8019402:	68bb      	ldr	r3, [r7, #8]
 8019404:	1d1c      	adds	r4, r3, #4
 8019406:	68bb      	ldr	r3, [r7, #8]
 8019408:	7add      	ldrb	r5, [r3, #11]
 801940a:	68bb      	ldr	r3, [r7, #8]
 801940c:	7a9b      	ldrb	r3, [r3, #10]
 801940e:	687a      	ldr	r2, [r7, #4]
 8019410:	9202      	str	r2, [sp, #8]
 8019412:	2206      	movs	r2, #6
 8019414:	9201      	str	r2, [sp, #4]
 8019416:	9300      	str	r3, [sp, #0]
 8019418:	462b      	mov	r3, r5
 801941a:	4622      	mov	r2, r4
 801941c:	f004 fd30 	bl	801de80 <ip4_output_if>
 8019420:	4603      	mov	r3, r0
 8019422:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019424:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019428:	4618      	mov	r0, r3
 801942a:	3720      	adds	r7, #32
 801942c:	46bd      	mov	sp, r7
 801942e:	bdb0      	pop	{r4, r5, r7, pc}
 8019430:	08023c20 	.word	0x08023c20
 8019434:	080241e4 	.word	0x080241e4
 8019438:	08023c74 	.word	0x08023c74
 801943c:	08024204 	.word	0x08024204
 8019440:	08024224 	.word	0x08024224
 8019444:	20016b94 	.word	0x20016b94
 8019448:	08024248 	.word	0x08024248

0801944c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801944c:	b5b0      	push	{r4, r5, r7, lr}
 801944e:	b084      	sub	sp, #16
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d106      	bne.n	8019468 <tcp_rexmit_rto_prepare+0x1c>
 801945a:	4b31      	ldr	r3, [pc, #196]	; (8019520 <tcp_rexmit_rto_prepare+0xd4>)
 801945c:	f240 6263 	movw	r2, #1635	; 0x663
 8019460:	4930      	ldr	r1, [pc, #192]	; (8019524 <tcp_rexmit_rto_prepare+0xd8>)
 8019462:	4831      	ldr	r0, [pc, #196]	; (8019528 <tcp_rexmit_rto_prepare+0xdc>)
 8019464:	f006 fa42 	bl	801f8ec <iprintf>

  if (pcb->unacked == NULL) {
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801946c:	2b00      	cmp	r3, #0
 801946e:	d102      	bne.n	8019476 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019470:	f06f 0305 	mvn.w	r3, #5
 8019474:	e050      	b.n	8019518 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801947a:	60fb      	str	r3, [r7, #12]
 801947c:	e00b      	b.n	8019496 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801947e:	68f8      	ldr	r0, [r7, #12]
 8019480:	f7ff fee6 	bl	8019250 <tcp_output_segment_busy>
 8019484:	4603      	mov	r3, r0
 8019486:	2b00      	cmp	r3, #0
 8019488:	d002      	beq.n	8019490 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801948a:	f06f 0305 	mvn.w	r3, #5
 801948e:	e043      	b.n	8019518 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	60fb      	str	r3, [r7, #12]
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d1ef      	bne.n	801947e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801949e:	68f8      	ldr	r0, [r7, #12]
 80194a0:	f7ff fed6 	bl	8019250 <tcp_output_segment_busy>
 80194a4:	4603      	mov	r3, r0
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d002      	beq.n	80194b0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80194aa:	f06f 0305 	mvn.w	r3, #5
 80194ae:	e033      	b.n	8019518 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	2200      	movs	r2, #0
 80194c4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	8b5b      	ldrh	r3, [r3, #26]
 80194ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80194ce:	b29a      	uxth	r2, r3
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	68db      	ldr	r3, [r3, #12]
 80194d8:	685b      	ldr	r3, [r3, #4]
 80194da:	4618      	mov	r0, r3
 80194dc:	f7f7 fc63 	bl	8010da6 <lwip_htonl>
 80194e0:	4604      	mov	r4, r0
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	891b      	ldrh	r3, [r3, #8]
 80194e6:	461d      	mov	r5, r3
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	68db      	ldr	r3, [r3, #12]
 80194ec:	899b      	ldrh	r3, [r3, #12]
 80194ee:	b29b      	uxth	r3, r3
 80194f0:	4618      	mov	r0, r3
 80194f2:	f7f7 fc43 	bl	8010d7c <lwip_htons>
 80194f6:	4603      	mov	r3, r0
 80194f8:	b2db      	uxtb	r3, r3
 80194fa:	f003 0303 	and.w	r3, r3, #3
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d001      	beq.n	8019506 <tcp_rexmit_rto_prepare+0xba>
 8019502:	2301      	movs	r3, #1
 8019504:	e000      	b.n	8019508 <tcp_rexmit_rto_prepare+0xbc>
 8019506:	2300      	movs	r3, #0
 8019508:	442b      	add	r3, r5
 801950a:	18e2      	adds	r2, r4, r3
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	2200      	movs	r2, #0
 8019514:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8019516:	2300      	movs	r3, #0
}
 8019518:	4618      	mov	r0, r3
 801951a:	3710      	adds	r7, #16
 801951c:	46bd      	mov	sp, r7
 801951e:	bdb0      	pop	{r4, r5, r7, pc}
 8019520:	08023c20 	.word	0x08023c20
 8019524:	0802425c 	.word	0x0802425c
 8019528:	08023c74 	.word	0x08023c74

0801952c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801952c:	b580      	push	{r7, lr}
 801952e:	b082      	sub	sp, #8
 8019530:	af00      	add	r7, sp, #0
 8019532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	2b00      	cmp	r3, #0
 8019538:	d106      	bne.n	8019548 <tcp_rexmit_rto_commit+0x1c>
 801953a:	4b0d      	ldr	r3, [pc, #52]	; (8019570 <tcp_rexmit_rto_commit+0x44>)
 801953c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8019540:	490c      	ldr	r1, [pc, #48]	; (8019574 <tcp_rexmit_rto_commit+0x48>)
 8019542:	480d      	ldr	r0, [pc, #52]	; (8019578 <tcp_rexmit_rto_commit+0x4c>)
 8019544:	f006 f9d2 	bl	801f8ec <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801954e:	2bff      	cmp	r3, #255	; 0xff
 8019550:	d007      	beq.n	8019562 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019558:	3301      	adds	r3, #1
 801955a:	b2da      	uxtb	r2, r3
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019562:	6878      	ldr	r0, [r7, #4]
 8019564:	f7ff fc80 	bl	8018e68 <tcp_output>
}
 8019568:	bf00      	nop
 801956a:	3708      	adds	r7, #8
 801956c:	46bd      	mov	sp, r7
 801956e:	bd80      	pop	{r7, pc}
 8019570:	08023c20 	.word	0x08023c20
 8019574:	08024280 	.word	0x08024280
 8019578:	08023c74 	.word	0x08023c74

0801957c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b082      	sub	sp, #8
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d106      	bne.n	8019598 <tcp_rexmit_rto+0x1c>
 801958a:	4b0a      	ldr	r3, [pc, #40]	; (80195b4 <tcp_rexmit_rto+0x38>)
 801958c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8019590:	4909      	ldr	r1, [pc, #36]	; (80195b8 <tcp_rexmit_rto+0x3c>)
 8019592:	480a      	ldr	r0, [pc, #40]	; (80195bc <tcp_rexmit_rto+0x40>)
 8019594:	f006 f9aa 	bl	801f8ec <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019598:	6878      	ldr	r0, [r7, #4]
 801959a:	f7ff ff57 	bl	801944c <tcp_rexmit_rto_prepare>
 801959e:	4603      	mov	r3, r0
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d102      	bne.n	80195aa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80195a4:	6878      	ldr	r0, [r7, #4]
 80195a6:	f7ff ffc1 	bl	801952c <tcp_rexmit_rto_commit>
  }
}
 80195aa:	bf00      	nop
 80195ac:	3708      	adds	r7, #8
 80195ae:	46bd      	mov	sp, r7
 80195b0:	bd80      	pop	{r7, pc}
 80195b2:	bf00      	nop
 80195b4:	08023c20 	.word	0x08023c20
 80195b8:	080242a4 	.word	0x080242a4
 80195bc:	08023c74 	.word	0x08023c74

080195c0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80195c0:	b590      	push	{r4, r7, lr}
 80195c2:	b085      	sub	sp, #20
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d106      	bne.n	80195dc <tcp_rexmit+0x1c>
 80195ce:	4b2f      	ldr	r3, [pc, #188]	; (801968c <tcp_rexmit+0xcc>)
 80195d0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80195d4:	492e      	ldr	r1, [pc, #184]	; (8019690 <tcp_rexmit+0xd0>)
 80195d6:	482f      	ldr	r0, [pc, #188]	; (8019694 <tcp_rexmit+0xd4>)
 80195d8:	f006 f988 	bl	801f8ec <iprintf>

  if (pcb->unacked == NULL) {
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d102      	bne.n	80195ea <tcp_rexmit+0x2a>
    return ERR_VAL;
 80195e4:	f06f 0305 	mvn.w	r3, #5
 80195e8:	e04c      	b.n	8019684 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195ee:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80195f0:	68b8      	ldr	r0, [r7, #8]
 80195f2:	f7ff fe2d 	bl	8019250 <tcp_output_segment_busy>
 80195f6:	4603      	mov	r3, r0
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d002      	beq.n	8019602 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80195fc:	f06f 0305 	mvn.w	r3, #5
 8019600:	e040      	b.n	8019684 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019602:	68bb      	ldr	r3, [r7, #8]
 8019604:	681a      	ldr	r2, [r3, #0]
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	336c      	adds	r3, #108	; 0x6c
 801960e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019610:	e002      	b.n	8019618 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d011      	beq.n	8019644 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	68db      	ldr	r3, [r3, #12]
 8019626:	685b      	ldr	r3, [r3, #4]
 8019628:	4618      	mov	r0, r3
 801962a:	f7f7 fbbc 	bl	8010da6 <lwip_htonl>
 801962e:	4604      	mov	r4, r0
 8019630:	68bb      	ldr	r3, [r7, #8]
 8019632:	68db      	ldr	r3, [r3, #12]
 8019634:	685b      	ldr	r3, [r3, #4]
 8019636:	4618      	mov	r0, r3
 8019638:	f7f7 fbb5 	bl	8010da6 <lwip_htonl>
 801963c:	4603      	mov	r3, r0
 801963e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019640:	2b00      	cmp	r3, #0
 8019642:	dbe6      	blt.n	8019612 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	681a      	ldr	r2, [r3, #0]
 8019648:	68bb      	ldr	r3, [r7, #8]
 801964a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	68ba      	ldr	r2, [r7, #8]
 8019650:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019652:	68bb      	ldr	r3, [r7, #8]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d103      	bne.n	8019662 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	2200      	movs	r2, #0
 801965e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019668:	2bff      	cmp	r3, #255	; 0xff
 801966a:	d007      	beq.n	801967c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019672:	3301      	adds	r3, #1
 8019674:	b2da      	uxtb	r2, r3
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	2200      	movs	r2, #0
 8019680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8019682:	2300      	movs	r3, #0
}
 8019684:	4618      	mov	r0, r3
 8019686:	3714      	adds	r7, #20
 8019688:	46bd      	mov	sp, r7
 801968a:	bd90      	pop	{r4, r7, pc}
 801968c:	08023c20 	.word	0x08023c20
 8019690:	080242c0 	.word	0x080242c0
 8019694:	08023c74 	.word	0x08023c74

08019698 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019698:	b580      	push	{r7, lr}
 801969a:	b082      	sub	sp, #8
 801969c:	af00      	add	r7, sp, #0
 801969e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d106      	bne.n	80196b4 <tcp_rexmit_fast+0x1c>
 80196a6:	4b2a      	ldr	r3, [pc, #168]	; (8019750 <tcp_rexmit_fast+0xb8>)
 80196a8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80196ac:	4929      	ldr	r1, [pc, #164]	; (8019754 <tcp_rexmit_fast+0xbc>)
 80196ae:	482a      	ldr	r0, [pc, #168]	; (8019758 <tcp_rexmit_fast+0xc0>)
 80196b0:	f006 f91c 	bl	801f8ec <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d044      	beq.n	8019746 <tcp_rexmit_fast+0xae>
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	8b5b      	ldrh	r3, [r3, #26]
 80196c0:	f003 0304 	and.w	r3, r3, #4
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d13e      	bne.n	8019746 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80196c8:	6878      	ldr	r0, [r7, #4]
 80196ca:	f7ff ff79 	bl	80195c0 <tcp_rexmit>
 80196ce:	4603      	mov	r3, r0
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d138      	bne.n	8019746 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80196e0:	4293      	cmp	r3, r2
 80196e2:	bf28      	it	cs
 80196e4:	4613      	movcs	r3, r2
 80196e6:	b29b      	uxth	r3, r3
 80196e8:	0fda      	lsrs	r2, r3, #31
 80196ea:	4413      	add	r3, r2
 80196ec:	105b      	asrs	r3, r3, #1
 80196ee:	b29a      	uxth	r2, r3
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80196fc:	461a      	mov	r2, r3
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019702:	005b      	lsls	r3, r3, #1
 8019704:	429a      	cmp	r2, r3
 8019706:	d206      	bcs.n	8019716 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801970c:	005b      	lsls	r3, r3, #1
 801970e:	b29a      	uxth	r2, r3
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019720:	4619      	mov	r1, r3
 8019722:	0049      	lsls	r1, r1, #1
 8019724:	440b      	add	r3, r1
 8019726:	b29b      	uxth	r3, r3
 8019728:	4413      	add	r3, r2
 801972a:	b29a      	uxth	r2, r3
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	8b5b      	ldrh	r3, [r3, #26]
 8019736:	f043 0304 	orr.w	r3, r3, #4
 801973a:	b29a      	uxth	r2, r3
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	2200      	movs	r2, #0
 8019744:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8019746:	bf00      	nop
 8019748:	3708      	adds	r7, #8
 801974a:	46bd      	mov	sp, r7
 801974c:	bd80      	pop	{r7, pc}
 801974e:	bf00      	nop
 8019750:	08023c20 	.word	0x08023c20
 8019754:	080242d8 	.word	0x080242d8
 8019758:	08023c74 	.word	0x08023c74

0801975c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801975c:	b580      	push	{r7, lr}
 801975e:	b086      	sub	sp, #24
 8019760:	af00      	add	r7, sp, #0
 8019762:	60f8      	str	r0, [r7, #12]
 8019764:	607b      	str	r3, [r7, #4]
 8019766:	460b      	mov	r3, r1
 8019768:	817b      	strh	r3, [r7, #10]
 801976a:	4613      	mov	r3, r2
 801976c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801976e:	897a      	ldrh	r2, [r7, #10]
 8019770:	893b      	ldrh	r3, [r7, #8]
 8019772:	4413      	add	r3, r2
 8019774:	b29b      	uxth	r3, r3
 8019776:	3314      	adds	r3, #20
 8019778:	b29b      	uxth	r3, r3
 801977a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801977e:	4619      	mov	r1, r3
 8019780:	2022      	movs	r0, #34	; 0x22
 8019782:	f7f9 fba5 	bl	8012ed0 <pbuf_alloc>
 8019786:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019788:	697b      	ldr	r3, [r7, #20]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d04d      	beq.n	801982a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801978e:	897b      	ldrh	r3, [r7, #10]
 8019790:	3313      	adds	r3, #19
 8019792:	697a      	ldr	r2, [r7, #20]
 8019794:	8952      	ldrh	r2, [r2, #10]
 8019796:	4293      	cmp	r3, r2
 8019798:	db06      	blt.n	80197a8 <tcp_output_alloc_header_common+0x4c>
 801979a:	4b26      	ldr	r3, [pc, #152]	; (8019834 <tcp_output_alloc_header_common+0xd8>)
 801979c:	f240 7223 	movw	r2, #1827	; 0x723
 80197a0:	4925      	ldr	r1, [pc, #148]	; (8019838 <tcp_output_alloc_header_common+0xdc>)
 80197a2:	4826      	ldr	r0, [pc, #152]	; (801983c <tcp_output_alloc_header_common+0xe0>)
 80197a4:	f006 f8a2 	bl	801f8ec <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80197a8:	697b      	ldr	r3, [r7, #20]
 80197aa:	685b      	ldr	r3, [r3, #4]
 80197ac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80197ae:	8c3b      	ldrh	r3, [r7, #32]
 80197b0:	4618      	mov	r0, r3
 80197b2:	f7f7 fae3 	bl	8010d7c <lwip_htons>
 80197b6:	4603      	mov	r3, r0
 80197b8:	461a      	mov	r2, r3
 80197ba:	693b      	ldr	r3, [r7, #16]
 80197bc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80197be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80197c0:	4618      	mov	r0, r3
 80197c2:	f7f7 fadb 	bl	8010d7c <lwip_htons>
 80197c6:	4603      	mov	r3, r0
 80197c8:	461a      	mov	r2, r3
 80197ca:	693b      	ldr	r3, [r7, #16]
 80197cc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80197ce:	693b      	ldr	r3, [r7, #16]
 80197d0:	687a      	ldr	r2, [r7, #4]
 80197d2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80197d4:	68f8      	ldr	r0, [r7, #12]
 80197d6:	f7f7 fae6 	bl	8010da6 <lwip_htonl>
 80197da:	4602      	mov	r2, r0
 80197dc:	693b      	ldr	r3, [r7, #16]
 80197de:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80197e0:	897b      	ldrh	r3, [r7, #10]
 80197e2:	089b      	lsrs	r3, r3, #2
 80197e4:	b29b      	uxth	r3, r3
 80197e6:	3305      	adds	r3, #5
 80197e8:	b29b      	uxth	r3, r3
 80197ea:	031b      	lsls	r3, r3, #12
 80197ec:	b29a      	uxth	r2, r3
 80197ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80197f2:	b29b      	uxth	r3, r3
 80197f4:	4313      	orrs	r3, r2
 80197f6:	b29b      	uxth	r3, r3
 80197f8:	4618      	mov	r0, r3
 80197fa:	f7f7 fabf 	bl	8010d7c <lwip_htons>
 80197fe:	4603      	mov	r3, r0
 8019800:	461a      	mov	r2, r3
 8019802:	693b      	ldr	r3, [r7, #16]
 8019804:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019806:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019808:	4618      	mov	r0, r3
 801980a:	f7f7 fab7 	bl	8010d7c <lwip_htons>
 801980e:	4603      	mov	r3, r0
 8019810:	461a      	mov	r2, r3
 8019812:	693b      	ldr	r3, [r7, #16]
 8019814:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8019816:	693b      	ldr	r3, [r7, #16]
 8019818:	2200      	movs	r2, #0
 801981a:	741a      	strb	r2, [r3, #16]
 801981c:	2200      	movs	r2, #0
 801981e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019820:	693b      	ldr	r3, [r7, #16]
 8019822:	2200      	movs	r2, #0
 8019824:	749a      	strb	r2, [r3, #18]
 8019826:	2200      	movs	r2, #0
 8019828:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801982a:	697b      	ldr	r3, [r7, #20]
}
 801982c:	4618      	mov	r0, r3
 801982e:	3718      	adds	r7, #24
 8019830:	46bd      	mov	sp, r7
 8019832:	bd80      	pop	{r7, pc}
 8019834:	08023c20 	.word	0x08023c20
 8019838:	080242f8 	.word	0x080242f8
 801983c:	08023c74 	.word	0x08023c74

08019840 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019840:	b5b0      	push	{r4, r5, r7, lr}
 8019842:	b08a      	sub	sp, #40	; 0x28
 8019844:	af04      	add	r7, sp, #16
 8019846:	60f8      	str	r0, [r7, #12]
 8019848:	607b      	str	r3, [r7, #4]
 801984a:	460b      	mov	r3, r1
 801984c:	817b      	strh	r3, [r7, #10]
 801984e:	4613      	mov	r3, r2
 8019850:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d106      	bne.n	8019866 <tcp_output_alloc_header+0x26>
 8019858:	4b15      	ldr	r3, [pc, #84]	; (80198b0 <tcp_output_alloc_header+0x70>)
 801985a:	f240 7242 	movw	r2, #1858	; 0x742
 801985e:	4915      	ldr	r1, [pc, #84]	; (80198b4 <tcp_output_alloc_header+0x74>)
 8019860:	4815      	ldr	r0, [pc, #84]	; (80198b8 <tcp_output_alloc_header+0x78>)
 8019862:	f006 f843 	bl	801f8ec <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	8adb      	ldrh	r3, [r3, #22]
 801986e:	68fa      	ldr	r2, [r7, #12]
 8019870:	8b12      	ldrh	r2, [r2, #24]
 8019872:	68f9      	ldr	r1, [r7, #12]
 8019874:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8019876:	893d      	ldrh	r5, [r7, #8]
 8019878:	897c      	ldrh	r4, [r7, #10]
 801987a:	9103      	str	r1, [sp, #12]
 801987c:	2110      	movs	r1, #16
 801987e:	9102      	str	r1, [sp, #8]
 8019880:	9201      	str	r2, [sp, #4]
 8019882:	9300      	str	r3, [sp, #0]
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	462a      	mov	r2, r5
 8019888:	4621      	mov	r1, r4
 801988a:	f7ff ff67 	bl	801975c <tcp_output_alloc_header_common>
 801988e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019890:	697b      	ldr	r3, [r7, #20]
 8019892:	2b00      	cmp	r3, #0
 8019894:	d006      	beq.n	80198a4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801989a:	68fa      	ldr	r2, [r7, #12]
 801989c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801989e:	441a      	add	r2, r3
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80198a4:	697b      	ldr	r3, [r7, #20]
}
 80198a6:	4618      	mov	r0, r3
 80198a8:	3718      	adds	r7, #24
 80198aa:	46bd      	mov	sp, r7
 80198ac:	bdb0      	pop	{r4, r5, r7, pc}
 80198ae:	bf00      	nop
 80198b0:	08023c20 	.word	0x08023c20
 80198b4:	08024328 	.word	0x08024328
 80198b8:	08023c74 	.word	0x08023c74

080198bc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	b088      	sub	sp, #32
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	60f8      	str	r0, [r7, #12]
 80198c4:	60b9      	str	r1, [r7, #8]
 80198c6:	4611      	mov	r1, r2
 80198c8:	461a      	mov	r2, r3
 80198ca:	460b      	mov	r3, r1
 80198cc:	71fb      	strb	r3, [r7, #7]
 80198ce:	4613      	mov	r3, r2
 80198d0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80198d2:	2300      	movs	r3, #0
 80198d4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80198d6:	68bb      	ldr	r3, [r7, #8]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d106      	bne.n	80198ea <tcp_output_fill_options+0x2e>
 80198dc:	4b13      	ldr	r3, [pc, #76]	; (801992c <tcp_output_fill_options+0x70>)
 80198de:	f240 7256 	movw	r2, #1878	; 0x756
 80198e2:	4913      	ldr	r1, [pc, #76]	; (8019930 <tcp_output_fill_options+0x74>)
 80198e4:	4813      	ldr	r0, [pc, #76]	; (8019934 <tcp_output_fill_options+0x78>)
 80198e6:	f006 f801 	bl	801f8ec <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80198ea:	68bb      	ldr	r3, [r7, #8]
 80198ec:	685b      	ldr	r3, [r3, #4]
 80198ee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80198f0:	69bb      	ldr	r3, [r7, #24]
 80198f2:	3314      	adds	r3, #20
 80198f4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80198f6:	69bb      	ldr	r3, [r7, #24]
 80198f8:	f103 0214 	add.w	r2, r3, #20
 80198fc:	8bfb      	ldrh	r3, [r7, #30]
 80198fe:	009b      	lsls	r3, r3, #2
 8019900:	4619      	mov	r1, r3
 8019902:	79fb      	ldrb	r3, [r7, #7]
 8019904:	009b      	lsls	r3, r3, #2
 8019906:	f003 0304 	and.w	r3, r3, #4
 801990a:	440b      	add	r3, r1
 801990c:	4413      	add	r3, r2
 801990e:	697a      	ldr	r2, [r7, #20]
 8019910:	429a      	cmp	r2, r3
 8019912:	d006      	beq.n	8019922 <tcp_output_fill_options+0x66>
 8019914:	4b05      	ldr	r3, [pc, #20]	; (801992c <tcp_output_fill_options+0x70>)
 8019916:	f240 7275 	movw	r2, #1909	; 0x775
 801991a:	4907      	ldr	r1, [pc, #28]	; (8019938 <tcp_output_fill_options+0x7c>)
 801991c:	4805      	ldr	r0, [pc, #20]	; (8019934 <tcp_output_fill_options+0x78>)
 801991e:	f005 ffe5 	bl	801f8ec <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8019922:	bf00      	nop
 8019924:	3720      	adds	r7, #32
 8019926:	46bd      	mov	sp, r7
 8019928:	bd80      	pop	{r7, pc}
 801992a:	bf00      	nop
 801992c:	08023c20 	.word	0x08023c20
 8019930:	08024350 	.word	0x08024350
 8019934:	08023c74 	.word	0x08023c74
 8019938:	08024248 	.word	0x08024248

0801993c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b08a      	sub	sp, #40	; 0x28
 8019940:	af04      	add	r7, sp, #16
 8019942:	60f8      	str	r0, [r7, #12]
 8019944:	60b9      	str	r1, [r7, #8]
 8019946:	607a      	str	r2, [r7, #4]
 8019948:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801994a:	68bb      	ldr	r3, [r7, #8]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d106      	bne.n	801995e <tcp_output_control_segment+0x22>
 8019950:	4b1c      	ldr	r3, [pc, #112]	; (80199c4 <tcp_output_control_segment+0x88>)
 8019952:	f240 7287 	movw	r2, #1927	; 0x787
 8019956:	491c      	ldr	r1, [pc, #112]	; (80199c8 <tcp_output_control_segment+0x8c>)
 8019958:	481c      	ldr	r0, [pc, #112]	; (80199cc <tcp_output_control_segment+0x90>)
 801995a:	f005 ffc7 	bl	801f8ec <iprintf>

  netif = tcp_route(pcb, src, dst);
 801995e:	683a      	ldr	r2, [r7, #0]
 8019960:	6879      	ldr	r1, [r7, #4]
 8019962:	68f8      	ldr	r0, [r7, #12]
 8019964:	f7fe fae8 	bl	8017f38 <tcp_route>
 8019968:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801996a:	693b      	ldr	r3, [r7, #16]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d102      	bne.n	8019976 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019970:	23fc      	movs	r3, #252	; 0xfc
 8019972:	75fb      	strb	r3, [r7, #23]
 8019974:	e01c      	b.n	80199b0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d006      	beq.n	801998a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	7adb      	ldrb	r3, [r3, #11]
 8019980:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	7a9b      	ldrb	r3, [r3, #10]
 8019986:	757b      	strb	r3, [r7, #21]
 8019988:	e003      	b.n	8019992 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801998a:	23ff      	movs	r3, #255	; 0xff
 801998c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801998e:	2300      	movs	r3, #0
 8019990:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019992:	7dba      	ldrb	r2, [r7, #22]
 8019994:	693b      	ldr	r3, [r7, #16]
 8019996:	9302      	str	r3, [sp, #8]
 8019998:	2306      	movs	r3, #6
 801999a:	9301      	str	r3, [sp, #4]
 801999c:	7d7b      	ldrb	r3, [r7, #21]
 801999e:	9300      	str	r3, [sp, #0]
 80199a0:	4613      	mov	r3, r2
 80199a2:	683a      	ldr	r2, [r7, #0]
 80199a4:	6879      	ldr	r1, [r7, #4]
 80199a6:	68b8      	ldr	r0, [r7, #8]
 80199a8:	f004 fa6a 	bl	801de80 <ip4_output_if>
 80199ac:	4603      	mov	r3, r0
 80199ae:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80199b0:	68b8      	ldr	r0, [r7, #8]
 80199b2:	f7f9 fd71 	bl	8013498 <pbuf_free>
  return err;
 80199b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80199ba:	4618      	mov	r0, r3
 80199bc:	3718      	adds	r7, #24
 80199be:	46bd      	mov	sp, r7
 80199c0:	bd80      	pop	{r7, pc}
 80199c2:	bf00      	nop
 80199c4:	08023c20 	.word	0x08023c20
 80199c8:	08024378 	.word	0x08024378
 80199cc:	08023c74 	.word	0x08023c74

080199d0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80199d0:	b590      	push	{r4, r7, lr}
 80199d2:	b08b      	sub	sp, #44	; 0x2c
 80199d4:	af04      	add	r7, sp, #16
 80199d6:	60f8      	str	r0, [r7, #12]
 80199d8:	60b9      	str	r1, [r7, #8]
 80199da:	607a      	str	r2, [r7, #4]
 80199dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80199de:	683b      	ldr	r3, [r7, #0]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d106      	bne.n	80199f2 <tcp_rst+0x22>
 80199e4:	4b1f      	ldr	r3, [pc, #124]	; (8019a64 <tcp_rst+0x94>)
 80199e6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80199ea:	491f      	ldr	r1, [pc, #124]	; (8019a68 <tcp_rst+0x98>)
 80199ec:	481f      	ldr	r0, [pc, #124]	; (8019a6c <tcp_rst+0x9c>)
 80199ee:	f005 ff7d 	bl	801f8ec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80199f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d106      	bne.n	8019a06 <tcp_rst+0x36>
 80199f8:	4b1a      	ldr	r3, [pc, #104]	; (8019a64 <tcp_rst+0x94>)
 80199fa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80199fe:	491c      	ldr	r1, [pc, #112]	; (8019a70 <tcp_rst+0xa0>)
 8019a00:	481a      	ldr	r0, [pc, #104]	; (8019a6c <tcp_rst+0x9c>)
 8019a02:	f005 ff73 	bl	801f8ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019a06:	2300      	movs	r3, #0
 8019a08:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8019a0a:	f246 0308 	movw	r3, #24584	; 0x6008
 8019a0e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8019a10:	7dfb      	ldrb	r3, [r7, #23]
 8019a12:	b29c      	uxth	r4, r3
 8019a14:	68b8      	ldr	r0, [r7, #8]
 8019a16:	f7f7 f9c6 	bl	8010da6 <lwip_htonl>
 8019a1a:	4602      	mov	r2, r0
 8019a1c:	8abb      	ldrh	r3, [r7, #20]
 8019a1e:	9303      	str	r3, [sp, #12]
 8019a20:	2314      	movs	r3, #20
 8019a22:	9302      	str	r3, [sp, #8]
 8019a24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019a26:	9301      	str	r3, [sp, #4]
 8019a28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019a2a:	9300      	str	r3, [sp, #0]
 8019a2c:	4613      	mov	r3, r2
 8019a2e:	2200      	movs	r2, #0
 8019a30:	4621      	mov	r1, r4
 8019a32:	6878      	ldr	r0, [r7, #4]
 8019a34:	f7ff fe92 	bl	801975c <tcp_output_alloc_header_common>
 8019a38:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8019a3a:	693b      	ldr	r3, [r7, #16]
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d00c      	beq.n	8019a5a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019a40:	7dfb      	ldrb	r3, [r7, #23]
 8019a42:	2200      	movs	r2, #0
 8019a44:	6939      	ldr	r1, [r7, #16]
 8019a46:	68f8      	ldr	r0, [r7, #12]
 8019a48:	f7ff ff38 	bl	80198bc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a4e:	683a      	ldr	r2, [r7, #0]
 8019a50:	6939      	ldr	r1, [r7, #16]
 8019a52:	68f8      	ldr	r0, [r7, #12]
 8019a54:	f7ff ff72 	bl	801993c <tcp_output_control_segment>
 8019a58:	e000      	b.n	8019a5c <tcp_rst+0x8c>
    return;
 8019a5a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019a5c:	371c      	adds	r7, #28
 8019a5e:	46bd      	mov	sp, r7
 8019a60:	bd90      	pop	{r4, r7, pc}
 8019a62:	bf00      	nop
 8019a64:	08023c20 	.word	0x08023c20
 8019a68:	080243a4 	.word	0x080243a4
 8019a6c:	08023c74 	.word	0x08023c74
 8019a70:	080243c0 	.word	0x080243c0

08019a74 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019a74:	b590      	push	{r4, r7, lr}
 8019a76:	b087      	sub	sp, #28
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019a80:	2300      	movs	r3, #0
 8019a82:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d106      	bne.n	8019a98 <tcp_send_empty_ack+0x24>
 8019a8a:	4b28      	ldr	r3, [pc, #160]	; (8019b2c <tcp_send_empty_ack+0xb8>)
 8019a8c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8019a90:	4927      	ldr	r1, [pc, #156]	; (8019b30 <tcp_send_empty_ack+0xbc>)
 8019a92:	4828      	ldr	r0, [pc, #160]	; (8019b34 <tcp_send_empty_ack+0xc0>)
 8019a94:	f005 ff2a 	bl	801f8ec <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019a98:	7dfb      	ldrb	r3, [r7, #23]
 8019a9a:	009b      	lsls	r3, r3, #2
 8019a9c:	b2db      	uxtb	r3, r3
 8019a9e:	f003 0304 	and.w	r3, r3, #4
 8019aa2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019aa4:	7d7b      	ldrb	r3, [r7, #21]
 8019aa6:	b29c      	uxth	r4, r3
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019aac:	4618      	mov	r0, r3
 8019aae:	f7f7 f97a 	bl	8010da6 <lwip_htonl>
 8019ab2:	4603      	mov	r3, r0
 8019ab4:	2200      	movs	r2, #0
 8019ab6:	4621      	mov	r1, r4
 8019ab8:	6878      	ldr	r0, [r7, #4]
 8019aba:	f7ff fec1 	bl	8019840 <tcp_output_alloc_header>
 8019abe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019ac0:	693b      	ldr	r3, [r7, #16]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d109      	bne.n	8019ada <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	8b5b      	ldrh	r3, [r3, #26]
 8019aca:	f043 0303 	orr.w	r3, r3, #3
 8019ace:	b29a      	uxth	r2, r3
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019ad4:	f06f 0301 	mvn.w	r3, #1
 8019ad8:	e023      	b.n	8019b22 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019ada:	7dbb      	ldrb	r3, [r7, #22]
 8019adc:	7dfa      	ldrb	r2, [r7, #23]
 8019ade:	6939      	ldr	r1, [r7, #16]
 8019ae0:	6878      	ldr	r0, [r7, #4]
 8019ae2:	f7ff feeb 	bl	80198bc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019ae6:	687a      	ldr	r2, [r7, #4]
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	3304      	adds	r3, #4
 8019aec:	6939      	ldr	r1, [r7, #16]
 8019aee:	6878      	ldr	r0, [r7, #4]
 8019af0:	f7ff ff24 	bl	801993c <tcp_output_control_segment>
 8019af4:	4603      	mov	r3, r0
 8019af6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d007      	beq.n	8019b10 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	8b5b      	ldrh	r3, [r3, #26]
 8019b04:	f043 0303 	orr.w	r3, r3, #3
 8019b08:	b29a      	uxth	r2, r3
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	835a      	strh	r2, [r3, #26]
 8019b0e:	e006      	b.n	8019b1e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	8b5b      	ldrh	r3, [r3, #26]
 8019b14:	f023 0303 	bic.w	r3, r3, #3
 8019b18:	b29a      	uxth	r2, r3
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8019b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019b22:	4618      	mov	r0, r3
 8019b24:	371c      	adds	r7, #28
 8019b26:	46bd      	mov	sp, r7
 8019b28:	bd90      	pop	{r4, r7, pc}
 8019b2a:	bf00      	nop
 8019b2c:	08023c20 	.word	0x08023c20
 8019b30:	080243dc 	.word	0x080243dc
 8019b34:	08023c74 	.word	0x08023c74

08019b38 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019b38:	b590      	push	{r4, r7, lr}
 8019b3a:	b087      	sub	sp, #28
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019b40:	2300      	movs	r3, #0
 8019b42:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d106      	bne.n	8019b58 <tcp_keepalive+0x20>
 8019b4a:	4b18      	ldr	r3, [pc, #96]	; (8019bac <tcp_keepalive+0x74>)
 8019b4c:	f640 0224 	movw	r2, #2084	; 0x824
 8019b50:	4917      	ldr	r1, [pc, #92]	; (8019bb0 <tcp_keepalive+0x78>)
 8019b52:	4818      	ldr	r0, [pc, #96]	; (8019bb4 <tcp_keepalive+0x7c>)
 8019b54:	f005 feca 	bl	801f8ec <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019b58:	7dfb      	ldrb	r3, [r7, #23]
 8019b5a:	b29c      	uxth	r4, r3
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b60:	3b01      	subs	r3, #1
 8019b62:	4618      	mov	r0, r3
 8019b64:	f7f7 f91f 	bl	8010da6 <lwip_htonl>
 8019b68:	4603      	mov	r3, r0
 8019b6a:	2200      	movs	r2, #0
 8019b6c:	4621      	mov	r1, r4
 8019b6e:	6878      	ldr	r0, [r7, #4]
 8019b70:	f7ff fe66 	bl	8019840 <tcp_output_alloc_header>
 8019b74:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019b76:	693b      	ldr	r3, [r7, #16]
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d102      	bne.n	8019b82 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8019b80:	e010      	b.n	8019ba4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019b82:	7dfb      	ldrb	r3, [r7, #23]
 8019b84:	2200      	movs	r2, #0
 8019b86:	6939      	ldr	r1, [r7, #16]
 8019b88:	6878      	ldr	r0, [r7, #4]
 8019b8a:	f7ff fe97 	bl	80198bc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019b8e:	687a      	ldr	r2, [r7, #4]
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	3304      	adds	r3, #4
 8019b94:	6939      	ldr	r1, [r7, #16]
 8019b96:	6878      	ldr	r0, [r7, #4]
 8019b98:	f7ff fed0 	bl	801993c <tcp_output_control_segment>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	371c      	adds	r7, #28
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bd90      	pop	{r4, r7, pc}
 8019bac:	08023c20 	.word	0x08023c20
 8019bb0:	080243fc 	.word	0x080243fc
 8019bb4:	08023c74 	.word	0x08023c74

08019bb8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019bb8:	b590      	push	{r4, r7, lr}
 8019bba:	b08b      	sub	sp, #44	; 0x2c
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d106      	bne.n	8019bda <tcp_zero_window_probe+0x22>
 8019bcc:	4b4c      	ldr	r3, [pc, #304]	; (8019d00 <tcp_zero_window_probe+0x148>)
 8019bce:	f640 024f 	movw	r2, #2127	; 0x84f
 8019bd2:	494c      	ldr	r1, [pc, #304]	; (8019d04 <tcp_zero_window_probe+0x14c>)
 8019bd4:	484c      	ldr	r0, [pc, #304]	; (8019d08 <tcp_zero_window_probe+0x150>)
 8019bd6:	f005 fe89 	bl	801f8ec <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019bde:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019be0:	6a3b      	ldr	r3, [r7, #32]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d101      	bne.n	8019bea <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019be6:	2300      	movs	r3, #0
 8019be8:	e086      	b.n	8019cf8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019bf0:	2bff      	cmp	r3, #255	; 0xff
 8019bf2:	d007      	beq.n	8019c04 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019bfa:	3301      	adds	r3, #1
 8019bfc:	b2da      	uxtb	r2, r3
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019c04:	6a3b      	ldr	r3, [r7, #32]
 8019c06:	68db      	ldr	r3, [r3, #12]
 8019c08:	899b      	ldrh	r3, [r3, #12]
 8019c0a:	b29b      	uxth	r3, r3
 8019c0c:	4618      	mov	r0, r3
 8019c0e:	f7f7 f8b5 	bl	8010d7c <lwip_htons>
 8019c12:	4603      	mov	r3, r0
 8019c14:	b2db      	uxtb	r3, r3
 8019c16:	f003 0301 	and.w	r3, r3, #1
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d005      	beq.n	8019c2a <tcp_zero_window_probe+0x72>
 8019c1e:	6a3b      	ldr	r3, [r7, #32]
 8019c20:	891b      	ldrh	r3, [r3, #8]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d101      	bne.n	8019c2a <tcp_zero_window_probe+0x72>
 8019c26:	2301      	movs	r3, #1
 8019c28:	e000      	b.n	8019c2c <tcp_zero_window_probe+0x74>
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8019c2e:	7ffb      	ldrb	r3, [r7, #31]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	bf0c      	ite	eq
 8019c34:	2301      	moveq	r3, #1
 8019c36:	2300      	movne	r3, #0
 8019c38:	b2db      	uxtb	r3, r3
 8019c3a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019c40:	b299      	uxth	r1, r3
 8019c42:	6a3b      	ldr	r3, [r7, #32]
 8019c44:	68db      	ldr	r3, [r3, #12]
 8019c46:	685b      	ldr	r3, [r3, #4]
 8019c48:	8bba      	ldrh	r2, [r7, #28]
 8019c4a:	6878      	ldr	r0, [r7, #4]
 8019c4c:	f7ff fdf8 	bl	8019840 <tcp_output_alloc_header>
 8019c50:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019c52:	69bb      	ldr	r3, [r7, #24]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d102      	bne.n	8019c5e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019c58:	f04f 33ff 	mov.w	r3, #4294967295
 8019c5c:	e04c      	b.n	8019cf8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019c5e:	69bb      	ldr	r3, [r7, #24]
 8019c60:	685b      	ldr	r3, [r3, #4]
 8019c62:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019c64:	7ffb      	ldrb	r3, [r7, #31]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d011      	beq.n	8019c8e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019c6a:	697b      	ldr	r3, [r7, #20]
 8019c6c:	899b      	ldrh	r3, [r3, #12]
 8019c6e:	b29b      	uxth	r3, r3
 8019c70:	b21b      	sxth	r3, r3
 8019c72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019c76:	b21c      	sxth	r4, r3
 8019c78:	2011      	movs	r0, #17
 8019c7a:	f7f7 f87f 	bl	8010d7c <lwip_htons>
 8019c7e:	4603      	mov	r3, r0
 8019c80:	b21b      	sxth	r3, r3
 8019c82:	4323      	orrs	r3, r4
 8019c84:	b21b      	sxth	r3, r3
 8019c86:	b29a      	uxth	r2, r3
 8019c88:	697b      	ldr	r3, [r7, #20]
 8019c8a:	819a      	strh	r2, [r3, #12]
 8019c8c:	e010      	b.n	8019cb0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019c8e:	69bb      	ldr	r3, [r7, #24]
 8019c90:	685b      	ldr	r3, [r3, #4]
 8019c92:	3314      	adds	r3, #20
 8019c94:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019c96:	6a3b      	ldr	r3, [r7, #32]
 8019c98:	6858      	ldr	r0, [r3, #4]
 8019c9a:	6a3b      	ldr	r3, [r7, #32]
 8019c9c:	685b      	ldr	r3, [r3, #4]
 8019c9e:	891a      	ldrh	r2, [r3, #8]
 8019ca0:	6a3b      	ldr	r3, [r7, #32]
 8019ca2:	891b      	ldrh	r3, [r3, #8]
 8019ca4:	1ad3      	subs	r3, r2, r3
 8019ca6:	b29b      	uxth	r3, r3
 8019ca8:	2201      	movs	r2, #1
 8019caa:	6939      	ldr	r1, [r7, #16]
 8019cac:	f7f9 fdfa 	bl	80138a4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019cb0:	6a3b      	ldr	r3, [r7, #32]
 8019cb2:	68db      	ldr	r3, [r3, #12]
 8019cb4:	685b      	ldr	r3, [r3, #4]
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	f7f7 f875 	bl	8010da6 <lwip_htonl>
 8019cbc:	4603      	mov	r3, r0
 8019cbe:	3301      	adds	r3, #1
 8019cc0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	1ad3      	subs	r3, r2, r3
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	da02      	bge.n	8019cd4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	68fa      	ldr	r2, [r7, #12]
 8019cd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019cd8:	2200      	movs	r2, #0
 8019cda:	69b9      	ldr	r1, [r7, #24]
 8019cdc:	6878      	ldr	r0, [r7, #4]
 8019cde:	f7ff fded 	bl	80198bc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019ce2:	687a      	ldr	r2, [r7, #4]
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	3304      	adds	r3, #4
 8019ce8:	69b9      	ldr	r1, [r7, #24]
 8019cea:	6878      	ldr	r0, [r7, #4]
 8019cec:	f7ff fe26 	bl	801993c <tcp_output_control_segment>
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019cf4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	372c      	adds	r7, #44	; 0x2c
 8019cfc:	46bd      	mov	sp, r7
 8019cfe:	bd90      	pop	{r4, r7, pc}
 8019d00:	08023c20 	.word	0x08023c20
 8019d04:	08024418 	.word	0x08024418
 8019d08:	08023c74 	.word	0x08023c74

08019d0c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019d0c:	b580      	push	{r7, lr}
 8019d0e:	b082      	sub	sp, #8
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019d14:	f7fa f830 	bl	8013d78 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019d18:	4b0a      	ldr	r3, [pc, #40]	; (8019d44 <tcpip_tcp_timer+0x38>)
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d103      	bne.n	8019d28 <tcpip_tcp_timer+0x1c>
 8019d20:	4b09      	ldr	r3, [pc, #36]	; (8019d48 <tcpip_tcp_timer+0x3c>)
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d005      	beq.n	8019d34 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019d28:	2200      	movs	r2, #0
 8019d2a:	4908      	ldr	r1, [pc, #32]	; (8019d4c <tcpip_tcp_timer+0x40>)
 8019d2c:	20fa      	movs	r0, #250	; 0xfa
 8019d2e:	f000 f8f3 	bl	8019f18 <sys_timeout>
 8019d32:	e003      	b.n	8019d3c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019d34:	4b06      	ldr	r3, [pc, #24]	; (8019d50 <tcpip_tcp_timer+0x44>)
 8019d36:	2200      	movs	r2, #0
 8019d38:	601a      	str	r2, [r3, #0]
  }
}
 8019d3a:	bf00      	nop
 8019d3c:	bf00      	nop
 8019d3e:	3708      	adds	r7, #8
 8019d40:	46bd      	mov	sp, r7
 8019d42:	bd80      	pop	{r7, pc}
 8019d44:	20016b90 	.word	0x20016b90
 8019d48:	20016ba0 	.word	0x20016ba0
 8019d4c:	08019d0d 	.word	0x08019d0d
 8019d50:	20005540 	.word	0x20005540

08019d54 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019d58:	4b0a      	ldr	r3, [pc, #40]	; (8019d84 <tcp_timer_needed+0x30>)
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d10f      	bne.n	8019d80 <tcp_timer_needed+0x2c>
 8019d60:	4b09      	ldr	r3, [pc, #36]	; (8019d88 <tcp_timer_needed+0x34>)
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d103      	bne.n	8019d70 <tcp_timer_needed+0x1c>
 8019d68:	4b08      	ldr	r3, [pc, #32]	; (8019d8c <tcp_timer_needed+0x38>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d007      	beq.n	8019d80 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019d70:	4b04      	ldr	r3, [pc, #16]	; (8019d84 <tcp_timer_needed+0x30>)
 8019d72:	2201      	movs	r2, #1
 8019d74:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019d76:	2200      	movs	r2, #0
 8019d78:	4905      	ldr	r1, [pc, #20]	; (8019d90 <tcp_timer_needed+0x3c>)
 8019d7a:	20fa      	movs	r0, #250	; 0xfa
 8019d7c:	f000 f8cc 	bl	8019f18 <sys_timeout>
  }
}
 8019d80:	bf00      	nop
 8019d82:	bd80      	pop	{r7, pc}
 8019d84:	20005540 	.word	0x20005540
 8019d88:	20016b90 	.word	0x20016b90
 8019d8c:	20016ba0 	.word	0x20016ba0
 8019d90:	08019d0d 	.word	0x08019d0d

08019d94 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b086      	sub	sp, #24
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	60f8      	str	r0, [r7, #12]
 8019d9c:	60b9      	str	r1, [r7, #8]
 8019d9e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019da0:	200a      	movs	r0, #10
 8019da2:	f7f8 fc77 	bl	8012694 <memp_malloc>
 8019da6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019da8:	693b      	ldr	r3, [r7, #16]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d109      	bne.n	8019dc2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019dae:	693b      	ldr	r3, [r7, #16]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d151      	bne.n	8019e58 <sys_timeout_abs+0xc4>
 8019db4:	4b2a      	ldr	r3, [pc, #168]	; (8019e60 <sys_timeout_abs+0xcc>)
 8019db6:	22be      	movs	r2, #190	; 0xbe
 8019db8:	492a      	ldr	r1, [pc, #168]	; (8019e64 <sys_timeout_abs+0xd0>)
 8019dba:	482b      	ldr	r0, [pc, #172]	; (8019e68 <sys_timeout_abs+0xd4>)
 8019dbc:	f005 fd96 	bl	801f8ec <iprintf>
    return;
 8019dc0:	e04a      	b.n	8019e58 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8019dc2:	693b      	ldr	r3, [r7, #16]
 8019dc4:	2200      	movs	r2, #0
 8019dc6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019dc8:	693b      	ldr	r3, [r7, #16]
 8019dca:	68ba      	ldr	r2, [r7, #8]
 8019dcc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019dce:	693b      	ldr	r3, [r7, #16]
 8019dd0:	687a      	ldr	r2, [r7, #4]
 8019dd2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019dd4:	693b      	ldr	r3, [r7, #16]
 8019dd6:	68fa      	ldr	r2, [r7, #12]
 8019dd8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019dda:	4b24      	ldr	r3, [pc, #144]	; (8019e6c <sys_timeout_abs+0xd8>)
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d103      	bne.n	8019dea <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8019de2:	4a22      	ldr	r2, [pc, #136]	; (8019e6c <sys_timeout_abs+0xd8>)
 8019de4:	693b      	ldr	r3, [r7, #16]
 8019de6:	6013      	str	r3, [r2, #0]
    return;
 8019de8:	e037      	b.n	8019e5a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019dea:	693b      	ldr	r3, [r7, #16]
 8019dec:	685a      	ldr	r2, [r3, #4]
 8019dee:	4b1f      	ldr	r3, [pc, #124]	; (8019e6c <sys_timeout_abs+0xd8>)
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	685b      	ldr	r3, [r3, #4]
 8019df4:	1ad3      	subs	r3, r2, r3
 8019df6:	0fdb      	lsrs	r3, r3, #31
 8019df8:	f003 0301 	and.w	r3, r3, #1
 8019dfc:	b2db      	uxtb	r3, r3
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d007      	beq.n	8019e12 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8019e02:	4b1a      	ldr	r3, [pc, #104]	; (8019e6c <sys_timeout_abs+0xd8>)
 8019e04:	681a      	ldr	r2, [r3, #0]
 8019e06:	693b      	ldr	r3, [r7, #16]
 8019e08:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019e0a:	4a18      	ldr	r2, [pc, #96]	; (8019e6c <sys_timeout_abs+0xd8>)
 8019e0c:	693b      	ldr	r3, [r7, #16]
 8019e0e:	6013      	str	r3, [r2, #0]
 8019e10:	e023      	b.n	8019e5a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8019e12:	4b16      	ldr	r3, [pc, #88]	; (8019e6c <sys_timeout_abs+0xd8>)
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	617b      	str	r3, [r7, #20]
 8019e18:	e01a      	b.n	8019e50 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019e1a:	697b      	ldr	r3, [r7, #20]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d00b      	beq.n	8019e3a <sys_timeout_abs+0xa6>
 8019e22:	693b      	ldr	r3, [r7, #16]
 8019e24:	685a      	ldr	r2, [r3, #4]
 8019e26:	697b      	ldr	r3, [r7, #20]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	685b      	ldr	r3, [r3, #4]
 8019e2c:	1ad3      	subs	r3, r2, r3
 8019e2e:	0fdb      	lsrs	r3, r3, #31
 8019e30:	f003 0301 	and.w	r3, r3, #1
 8019e34:	b2db      	uxtb	r3, r3
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d007      	beq.n	8019e4a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019e3a:	697b      	ldr	r3, [r7, #20]
 8019e3c:	681a      	ldr	r2, [r3, #0]
 8019e3e:	693b      	ldr	r3, [r7, #16]
 8019e40:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8019e42:	697b      	ldr	r3, [r7, #20]
 8019e44:	693a      	ldr	r2, [r7, #16]
 8019e46:	601a      	str	r2, [r3, #0]
        break;
 8019e48:	e007      	b.n	8019e5a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019e4a:	697b      	ldr	r3, [r7, #20]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	617b      	str	r3, [r7, #20]
 8019e50:	697b      	ldr	r3, [r7, #20]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d1e1      	bne.n	8019e1a <sys_timeout_abs+0x86>
 8019e56:	e000      	b.n	8019e5a <sys_timeout_abs+0xc6>
    return;
 8019e58:	bf00      	nop
      }
    }
  }
}
 8019e5a:	3718      	adds	r7, #24
 8019e5c:	46bd      	mov	sp, r7
 8019e5e:	bd80      	pop	{r7, pc}
 8019e60:	0802443c 	.word	0x0802443c
 8019e64:	08024470 	.word	0x08024470
 8019e68:	080244b0 	.word	0x080244b0
 8019e6c:	20005538 	.word	0x20005538

08019e70 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b086      	sub	sp, #24
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019e7c:	697b      	ldr	r3, [r7, #20]
 8019e7e:	685b      	ldr	r3, [r3, #4]
 8019e80:	4798      	blx	r3

  now = sys_now();
 8019e82:	f7ef fe39 	bl	8009af8 <sys_now>
 8019e86:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019e88:	697b      	ldr	r3, [r7, #20]
 8019e8a:	681a      	ldr	r2, [r3, #0]
 8019e8c:	4b0f      	ldr	r3, [pc, #60]	; (8019ecc <lwip_cyclic_timer+0x5c>)
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	4413      	add	r3, r2
 8019e92:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019e94:	68fa      	ldr	r2, [r7, #12]
 8019e96:	693b      	ldr	r3, [r7, #16]
 8019e98:	1ad3      	subs	r3, r2, r3
 8019e9a:	0fdb      	lsrs	r3, r3, #31
 8019e9c:	f003 0301 	and.w	r3, r3, #1
 8019ea0:	b2db      	uxtb	r3, r3
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d009      	beq.n	8019eba <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019ea6:	697b      	ldr	r3, [r7, #20]
 8019ea8:	681a      	ldr	r2, [r3, #0]
 8019eaa:	693b      	ldr	r3, [r7, #16]
 8019eac:	4413      	add	r3, r2
 8019eae:	687a      	ldr	r2, [r7, #4]
 8019eb0:	4907      	ldr	r1, [pc, #28]	; (8019ed0 <lwip_cyclic_timer+0x60>)
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	f7ff ff6e 	bl	8019d94 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019eb8:	e004      	b.n	8019ec4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019eba:	687a      	ldr	r2, [r7, #4]
 8019ebc:	4904      	ldr	r1, [pc, #16]	; (8019ed0 <lwip_cyclic_timer+0x60>)
 8019ebe:	68f8      	ldr	r0, [r7, #12]
 8019ec0:	f7ff ff68 	bl	8019d94 <sys_timeout_abs>
}
 8019ec4:	bf00      	nop
 8019ec6:	3718      	adds	r7, #24
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	bd80      	pop	{r7, pc}
 8019ecc:	2000553c 	.word	0x2000553c
 8019ed0:	08019e71 	.word	0x08019e71

08019ed4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019ed4:	b580      	push	{r7, lr}
 8019ed6:	b082      	sub	sp, #8
 8019ed8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019eda:	2301      	movs	r3, #1
 8019edc:	607b      	str	r3, [r7, #4]
 8019ede:	e00e      	b.n	8019efe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019ee0:	4a0b      	ldr	r2, [pc, #44]	; (8019f10 <sys_timeouts_init+0x3c>)
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	00db      	lsls	r3, r3, #3
 8019eec:	4a08      	ldr	r2, [pc, #32]	; (8019f10 <sys_timeouts_init+0x3c>)
 8019eee:	4413      	add	r3, r2
 8019ef0:	461a      	mov	r2, r3
 8019ef2:	4908      	ldr	r1, [pc, #32]	; (8019f14 <sys_timeouts_init+0x40>)
 8019ef4:	f000 f810 	bl	8019f18 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	3301      	adds	r3, #1
 8019efc:	607b      	str	r3, [r7, #4]
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	2b05      	cmp	r3, #5
 8019f02:	d9ed      	bls.n	8019ee0 <sys_timeouts_init+0xc>
  }
}
 8019f04:	bf00      	nop
 8019f06:	bf00      	nop
 8019f08:	3708      	adds	r7, #8
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	bd80      	pop	{r7, pc}
 8019f0e:	bf00      	nop
 8019f10:	08025684 	.word	0x08025684
 8019f14:	08019e71 	.word	0x08019e71

08019f18 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b086      	sub	sp, #24
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	60f8      	str	r0, [r7, #12]
 8019f20:	60b9      	str	r1, [r7, #8]
 8019f22:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019f2a:	d306      	bcc.n	8019f3a <sys_timeout+0x22>
 8019f2c:	4b0a      	ldr	r3, [pc, #40]	; (8019f58 <sys_timeout+0x40>)
 8019f2e:	f240 1229 	movw	r2, #297	; 0x129
 8019f32:	490a      	ldr	r1, [pc, #40]	; (8019f5c <sys_timeout+0x44>)
 8019f34:	480a      	ldr	r0, [pc, #40]	; (8019f60 <sys_timeout+0x48>)
 8019f36:	f005 fcd9 	bl	801f8ec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019f3a:	f7ef fddd 	bl	8009af8 <sys_now>
 8019f3e:	4602      	mov	r2, r0
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	4413      	add	r3, r2
 8019f44:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8019f46:	687a      	ldr	r2, [r7, #4]
 8019f48:	68b9      	ldr	r1, [r7, #8]
 8019f4a:	6978      	ldr	r0, [r7, #20]
 8019f4c:	f7ff ff22 	bl	8019d94 <sys_timeout_abs>
#endif
}
 8019f50:	bf00      	nop
 8019f52:	3718      	adds	r7, #24
 8019f54:	46bd      	mov	sp, r7
 8019f56:	bd80      	pop	{r7, pc}
 8019f58:	0802443c 	.word	0x0802443c
 8019f5c:	080244d8 	.word	0x080244d8
 8019f60:	080244b0 	.word	0x080244b0

08019f64 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b084      	sub	sp, #16
 8019f68:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019f6a:	f7ef fdc5 	bl	8009af8 <sys_now>
 8019f6e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019f70:	4b17      	ldr	r3, [pc, #92]	; (8019fd0 <sys_check_timeouts+0x6c>)
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019f76:	68bb      	ldr	r3, [r7, #8]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d022      	beq.n	8019fc2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019f7c:	68bb      	ldr	r3, [r7, #8]
 8019f7e:	685b      	ldr	r3, [r3, #4]
 8019f80:	68fa      	ldr	r2, [r7, #12]
 8019f82:	1ad3      	subs	r3, r2, r3
 8019f84:	0fdb      	lsrs	r3, r3, #31
 8019f86:	f003 0301 	and.w	r3, r3, #1
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d11a      	bne.n	8019fc6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019f90:	68bb      	ldr	r3, [r7, #8]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	4a0e      	ldr	r2, [pc, #56]	; (8019fd0 <sys_check_timeouts+0x6c>)
 8019f96:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019f98:	68bb      	ldr	r3, [r7, #8]
 8019f9a:	689b      	ldr	r3, [r3, #8]
 8019f9c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019f9e:	68bb      	ldr	r3, [r7, #8]
 8019fa0:	68db      	ldr	r3, [r3, #12]
 8019fa2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019fa4:	68bb      	ldr	r3, [r7, #8]
 8019fa6:	685b      	ldr	r3, [r3, #4]
 8019fa8:	4a0a      	ldr	r2, [pc, #40]	; (8019fd4 <sys_check_timeouts+0x70>)
 8019faa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019fac:	68b9      	ldr	r1, [r7, #8]
 8019fae:	200a      	movs	r0, #10
 8019fb0:	f7f8 fbc2 	bl	8012738 <memp_free>
    if (handler != NULL) {
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d0da      	beq.n	8019f70 <sys_check_timeouts+0xc>
      handler(arg);
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	6838      	ldr	r0, [r7, #0]
 8019fbe:	4798      	blx	r3
  do {
 8019fc0:	e7d6      	b.n	8019f70 <sys_check_timeouts+0xc>
      return;
 8019fc2:	bf00      	nop
 8019fc4:	e000      	b.n	8019fc8 <sys_check_timeouts+0x64>
      return;
 8019fc6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019fc8:	3710      	adds	r7, #16
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd80      	pop	{r7, pc}
 8019fce:	bf00      	nop
 8019fd0:	20005538 	.word	0x20005538
 8019fd4:	2000553c 	.word	0x2000553c

08019fd8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b082      	sub	sp, #8
 8019fdc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019fde:	4b16      	ldr	r3, [pc, #88]	; (801a038 <sys_timeouts_sleeptime+0x60>)
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d102      	bne.n	8019fec <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8019fea:	e020      	b.n	801a02e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019fec:	f7ef fd84 	bl	8009af8 <sys_now>
 8019ff0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019ff2:	4b11      	ldr	r3, [pc, #68]	; (801a038 <sys_timeouts_sleeptime+0x60>)
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	685a      	ldr	r2, [r3, #4]
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	1ad3      	subs	r3, r2, r3
 8019ffc:	0fdb      	lsrs	r3, r3, #31
 8019ffe:	f003 0301 	and.w	r3, r3, #1
 801a002:	b2db      	uxtb	r3, r3
 801a004:	2b00      	cmp	r3, #0
 801a006:	d001      	beq.n	801a00c <sys_timeouts_sleeptime+0x34>
    return 0;
 801a008:	2300      	movs	r3, #0
 801a00a:	e010      	b.n	801a02e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801a00c:	4b0a      	ldr	r3, [pc, #40]	; (801a038 <sys_timeouts_sleeptime+0x60>)
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	685a      	ldr	r2, [r3, #4]
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	1ad3      	subs	r3, r2, r3
 801a016:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801a018:	683b      	ldr	r3, [r7, #0]
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	da06      	bge.n	801a02c <sys_timeouts_sleeptime+0x54>
 801a01e:	4b07      	ldr	r3, [pc, #28]	; (801a03c <sys_timeouts_sleeptime+0x64>)
 801a020:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801a024:	4906      	ldr	r1, [pc, #24]	; (801a040 <sys_timeouts_sleeptime+0x68>)
 801a026:	4807      	ldr	r0, [pc, #28]	; (801a044 <sys_timeouts_sleeptime+0x6c>)
 801a028:	f005 fc60 	bl	801f8ec <iprintf>
    return ret;
 801a02c:	683b      	ldr	r3, [r7, #0]
  }
}
 801a02e:	4618      	mov	r0, r3
 801a030:	3708      	adds	r7, #8
 801a032:	46bd      	mov	sp, r7
 801a034:	bd80      	pop	{r7, pc}
 801a036:	bf00      	nop
 801a038:	20005538 	.word	0x20005538
 801a03c:	0802443c 	.word	0x0802443c
 801a040:	08024510 	.word	0x08024510
 801a044:	080244b0 	.word	0x080244b0

0801a048 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a048:	b580      	push	{r7, lr}
 801a04a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a04c:	f005 fd0a 	bl	801fa64 <rand>
 801a050:	4603      	mov	r3, r0
 801a052:	b29b      	uxth	r3, r3
 801a054:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a058:	b29b      	uxth	r3, r3
 801a05a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801a05e:	b29a      	uxth	r2, r3
 801a060:	4b01      	ldr	r3, [pc, #4]	; (801a068 <udp_init+0x20>)
 801a062:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a064:	bf00      	nop
 801a066:	bd80      	pop	{r7, pc}
 801a068:	20000344 	.word	0x20000344

0801a06c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801a06c:	b480      	push	{r7}
 801a06e:	b083      	sub	sp, #12
 801a070:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801a072:	2300      	movs	r3, #0
 801a074:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801a076:	4b17      	ldr	r3, [pc, #92]	; (801a0d4 <udp_new_port+0x68>)
 801a078:	881b      	ldrh	r3, [r3, #0]
 801a07a:	1c5a      	adds	r2, r3, #1
 801a07c:	b291      	uxth	r1, r2
 801a07e:	4a15      	ldr	r2, [pc, #84]	; (801a0d4 <udp_new_port+0x68>)
 801a080:	8011      	strh	r1, [r2, #0]
 801a082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a086:	4293      	cmp	r3, r2
 801a088:	d103      	bne.n	801a092 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801a08a:	4b12      	ldr	r3, [pc, #72]	; (801a0d4 <udp_new_port+0x68>)
 801a08c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801a090:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a092:	4b11      	ldr	r3, [pc, #68]	; (801a0d8 <udp_new_port+0x6c>)
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	603b      	str	r3, [r7, #0]
 801a098:	e011      	b.n	801a0be <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801a09a:	683b      	ldr	r3, [r7, #0]
 801a09c:	8a5a      	ldrh	r2, [r3, #18]
 801a09e:	4b0d      	ldr	r3, [pc, #52]	; (801a0d4 <udp_new_port+0x68>)
 801a0a0:	881b      	ldrh	r3, [r3, #0]
 801a0a2:	429a      	cmp	r2, r3
 801a0a4:	d108      	bne.n	801a0b8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801a0a6:	88fb      	ldrh	r3, [r7, #6]
 801a0a8:	3301      	adds	r3, #1
 801a0aa:	80fb      	strh	r3, [r7, #6]
 801a0ac:	88fb      	ldrh	r3, [r7, #6]
 801a0ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a0b2:	d3e0      	bcc.n	801a076 <udp_new_port+0xa>
        return 0;
 801a0b4:	2300      	movs	r3, #0
 801a0b6:	e007      	b.n	801a0c8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a0b8:	683b      	ldr	r3, [r7, #0]
 801a0ba:	68db      	ldr	r3, [r3, #12]
 801a0bc:	603b      	str	r3, [r7, #0]
 801a0be:	683b      	ldr	r3, [r7, #0]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d1ea      	bne.n	801a09a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801a0c4:	4b03      	ldr	r3, [pc, #12]	; (801a0d4 <udp_new_port+0x68>)
 801a0c6:	881b      	ldrh	r3, [r3, #0]
}
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	370c      	adds	r7, #12
 801a0cc:	46bd      	mov	sp, r7
 801a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d2:	4770      	bx	lr
 801a0d4:	20000344 	.word	0x20000344
 801a0d8:	20016ba8 	.word	0x20016ba8

0801a0dc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b084      	sub	sp, #16
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	60f8      	str	r0, [r7, #12]
 801a0e4:	60b9      	str	r1, [r7, #8]
 801a0e6:	4613      	mov	r3, r2
 801a0e8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d105      	bne.n	801a0fc <udp_input_local_match+0x20>
 801a0f0:	4b27      	ldr	r3, [pc, #156]	; (801a190 <udp_input_local_match+0xb4>)
 801a0f2:	2287      	movs	r2, #135	; 0x87
 801a0f4:	4927      	ldr	r1, [pc, #156]	; (801a194 <udp_input_local_match+0xb8>)
 801a0f6:	4828      	ldr	r0, [pc, #160]	; (801a198 <udp_input_local_match+0xbc>)
 801a0f8:	f005 fbf8 	bl	801f8ec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a0fc:	68bb      	ldr	r3, [r7, #8]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d105      	bne.n	801a10e <udp_input_local_match+0x32>
 801a102:	4b23      	ldr	r3, [pc, #140]	; (801a190 <udp_input_local_match+0xb4>)
 801a104:	2288      	movs	r2, #136	; 0x88
 801a106:	4925      	ldr	r1, [pc, #148]	; (801a19c <udp_input_local_match+0xc0>)
 801a108:	4823      	ldr	r0, [pc, #140]	; (801a198 <udp_input_local_match+0xbc>)
 801a10a:	f005 fbef 	bl	801f8ec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	7a1b      	ldrb	r3, [r3, #8]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d00b      	beq.n	801a12e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	7a1a      	ldrb	r2, [r3, #8]
 801a11a:	4b21      	ldr	r3, [pc, #132]	; (801a1a0 <udp_input_local_match+0xc4>)
 801a11c:	685b      	ldr	r3, [r3, #4]
 801a11e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a122:	3301      	adds	r3, #1
 801a124:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a126:	429a      	cmp	r2, r3
 801a128:	d001      	beq.n	801a12e <udp_input_local_match+0x52>
    return 0;
 801a12a:	2300      	movs	r3, #0
 801a12c:	e02b      	b.n	801a186 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a12e:	79fb      	ldrb	r3, [r7, #7]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d018      	beq.n	801a166 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d013      	beq.n	801a162 <udp_input_local_match+0x86>
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d00f      	beq.n	801a162 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a142:	4b17      	ldr	r3, [pc, #92]	; (801a1a0 <udp_input_local_match+0xc4>)
 801a144:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a14a:	d00a      	beq.n	801a162 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	681a      	ldr	r2, [r3, #0]
 801a150:	4b13      	ldr	r3, [pc, #76]	; (801a1a0 <udp_input_local_match+0xc4>)
 801a152:	695b      	ldr	r3, [r3, #20]
 801a154:	405a      	eors	r2, r3
 801a156:	68bb      	ldr	r3, [r7, #8]
 801a158:	3308      	adds	r3, #8
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d110      	bne.n	801a184 <udp_input_local_match+0xa8>
          return 1;
 801a162:	2301      	movs	r3, #1
 801a164:	e00f      	b.n	801a186 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d009      	beq.n	801a180 <udp_input_local_match+0xa4>
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d005      	beq.n	801a180 <udp_input_local_match+0xa4>
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	681a      	ldr	r2, [r3, #0]
 801a178:	4b09      	ldr	r3, [pc, #36]	; (801a1a0 <udp_input_local_match+0xc4>)
 801a17a:	695b      	ldr	r3, [r3, #20]
 801a17c:	429a      	cmp	r2, r3
 801a17e:	d101      	bne.n	801a184 <udp_input_local_match+0xa8>
        return 1;
 801a180:	2301      	movs	r3, #1
 801a182:	e000      	b.n	801a186 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801a184:	2300      	movs	r3, #0
}
 801a186:	4618      	mov	r0, r3
 801a188:	3710      	adds	r7, #16
 801a18a:	46bd      	mov	sp, r7
 801a18c:	bd80      	pop	{r7, pc}
 801a18e:	bf00      	nop
 801a190:	08024524 	.word	0x08024524
 801a194:	08024554 	.word	0x08024554
 801a198:	08024578 	.word	0x08024578
 801a19c:	080245a0 	.word	0x080245a0
 801a1a0:	200133b0 	.word	0x200133b0

0801a1a4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a1a4:	b590      	push	{r4, r7, lr}
 801a1a6:	b08d      	sub	sp, #52	; 0x34
 801a1a8:	af02      	add	r7, sp, #8
 801a1aa:	6078      	str	r0, [r7, #4]
 801a1ac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a1ae:	2300      	movs	r3, #0
 801a1b0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d105      	bne.n	801a1c4 <udp_input+0x20>
 801a1b8:	4b7c      	ldr	r3, [pc, #496]	; (801a3ac <udp_input+0x208>)
 801a1ba:	22cf      	movs	r2, #207	; 0xcf
 801a1bc:	497c      	ldr	r1, [pc, #496]	; (801a3b0 <udp_input+0x20c>)
 801a1be:	487d      	ldr	r0, [pc, #500]	; (801a3b4 <udp_input+0x210>)
 801a1c0:	f005 fb94 	bl	801f8ec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801a1c4:	683b      	ldr	r3, [r7, #0]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d105      	bne.n	801a1d6 <udp_input+0x32>
 801a1ca:	4b78      	ldr	r3, [pc, #480]	; (801a3ac <udp_input+0x208>)
 801a1cc:	22d0      	movs	r2, #208	; 0xd0
 801a1ce:	497a      	ldr	r1, [pc, #488]	; (801a3b8 <udp_input+0x214>)
 801a1d0:	4878      	ldr	r0, [pc, #480]	; (801a3b4 <udp_input+0x210>)
 801a1d2:	f005 fb8b 	bl	801f8ec <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	895b      	ldrh	r3, [r3, #10]
 801a1da:	2b07      	cmp	r3, #7
 801a1dc:	d803      	bhi.n	801a1e6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801a1de:	6878      	ldr	r0, [r7, #4]
 801a1e0:	f7f9 f95a 	bl	8013498 <pbuf_free>
    goto end;
 801a1e4:	e0de      	b.n	801a3a4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	685b      	ldr	r3, [r3, #4]
 801a1ea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a1ec:	4b73      	ldr	r3, [pc, #460]	; (801a3bc <udp_input+0x218>)
 801a1ee:	695b      	ldr	r3, [r3, #20]
 801a1f0:	4a72      	ldr	r2, [pc, #456]	; (801a3bc <udp_input+0x218>)
 801a1f2:	6812      	ldr	r2, [r2, #0]
 801a1f4:	4611      	mov	r1, r2
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	f003 ff1a 	bl	801e030 <ip4_addr_isbroadcast_u32>
 801a1fc:	4603      	mov	r3, r0
 801a1fe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801a200:	697b      	ldr	r3, [r7, #20]
 801a202:	881b      	ldrh	r3, [r3, #0]
 801a204:	b29b      	uxth	r3, r3
 801a206:	4618      	mov	r0, r3
 801a208:	f7f6 fdb8 	bl	8010d7c <lwip_htons>
 801a20c:	4603      	mov	r3, r0
 801a20e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801a210:	697b      	ldr	r3, [r7, #20]
 801a212:	885b      	ldrh	r3, [r3, #2]
 801a214:	b29b      	uxth	r3, r3
 801a216:	4618      	mov	r0, r3
 801a218:	f7f6 fdb0 	bl	8010d7c <lwip_htons>
 801a21c:	4603      	mov	r3, r0
 801a21e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801a220:	2300      	movs	r3, #0
 801a222:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801a224:	2300      	movs	r3, #0
 801a226:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801a228:	2300      	movs	r3, #0
 801a22a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a22c:	4b64      	ldr	r3, [pc, #400]	; (801a3c0 <udp_input+0x21c>)
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	627b      	str	r3, [r7, #36]	; 0x24
 801a232:	e054      	b.n	801a2de <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a236:	8a5b      	ldrh	r3, [r3, #18]
 801a238:	89fa      	ldrh	r2, [r7, #14]
 801a23a:	429a      	cmp	r2, r3
 801a23c:	d14a      	bne.n	801a2d4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801a23e:	7cfb      	ldrb	r3, [r7, #19]
 801a240:	461a      	mov	r2, r3
 801a242:	6839      	ldr	r1, [r7, #0]
 801a244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a246:	f7ff ff49 	bl	801a0dc <udp_input_local_match>
 801a24a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d041      	beq.n	801a2d4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a252:	7c1b      	ldrb	r3, [r3, #16]
 801a254:	f003 0304 	and.w	r3, r3, #4
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d11d      	bne.n	801a298 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801a25c:	69fb      	ldr	r3, [r7, #28]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d102      	bne.n	801a268 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a264:	61fb      	str	r3, [r7, #28]
 801a266:	e017      	b.n	801a298 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801a268:	7cfb      	ldrb	r3, [r7, #19]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d014      	beq.n	801a298 <udp_input+0xf4>
 801a26e:	4b53      	ldr	r3, [pc, #332]	; (801a3bc <udp_input+0x218>)
 801a270:	695b      	ldr	r3, [r3, #20]
 801a272:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a276:	d10f      	bne.n	801a298 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801a278:	69fb      	ldr	r3, [r7, #28]
 801a27a:	681a      	ldr	r2, [r3, #0]
 801a27c:	683b      	ldr	r3, [r7, #0]
 801a27e:	3304      	adds	r3, #4
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	429a      	cmp	r2, r3
 801a284:	d008      	beq.n	801a298 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a288:	681a      	ldr	r2, [r3, #0]
 801a28a:	683b      	ldr	r3, [r7, #0]
 801a28c:	3304      	adds	r3, #4
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	429a      	cmp	r2, r3
 801a292:	d101      	bne.n	801a298 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a296:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a29a:	8a9b      	ldrh	r3, [r3, #20]
 801a29c:	8a3a      	ldrh	r2, [r7, #16]
 801a29e:	429a      	cmp	r2, r3
 801a2a0:	d118      	bne.n	801a2d4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2a4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d005      	beq.n	801a2b6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2ac:	685a      	ldr	r2, [r3, #4]
 801a2ae:	4b43      	ldr	r3, [pc, #268]	; (801a3bc <udp_input+0x218>)
 801a2b0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a2b2:	429a      	cmp	r2, r3
 801a2b4:	d10e      	bne.n	801a2d4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a2b6:	6a3b      	ldr	r3, [r7, #32]
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d014      	beq.n	801a2e6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2be:	68da      	ldr	r2, [r3, #12]
 801a2c0:	6a3b      	ldr	r3, [r7, #32]
 801a2c2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a2c4:	4b3e      	ldr	r3, [pc, #248]	; (801a3c0 <udp_input+0x21c>)
 801a2c6:	681a      	ldr	r2, [r3, #0]
 801a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2ca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a2cc:	4a3c      	ldr	r2, [pc, #240]	; (801a3c0 <udp_input+0x21c>)
 801a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2d0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a2d2:	e008      	b.n	801a2e6 <udp_input+0x142>
      }
    }

    prev = pcb;
 801a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2d6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2da:	68db      	ldr	r3, [r3, #12]
 801a2dc:	627b      	str	r3, [r7, #36]	; 0x24
 801a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d1a7      	bne.n	801a234 <udp_input+0x90>
 801a2e4:	e000      	b.n	801a2e8 <udp_input+0x144>
        break;
 801a2e6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d101      	bne.n	801a2f2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801a2ee:	69fb      	ldr	r3, [r7, #28]
 801a2f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d002      	beq.n	801a2fe <udp_input+0x15a>
    for_us = 1;
 801a2f8:	2301      	movs	r3, #1
 801a2fa:	76fb      	strb	r3, [r7, #27]
 801a2fc:	e00a      	b.n	801a314 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a2fe:	683b      	ldr	r3, [r7, #0]
 801a300:	3304      	adds	r3, #4
 801a302:	681a      	ldr	r2, [r3, #0]
 801a304:	4b2d      	ldr	r3, [pc, #180]	; (801a3bc <udp_input+0x218>)
 801a306:	695b      	ldr	r3, [r3, #20]
 801a308:	429a      	cmp	r2, r3
 801a30a:	bf0c      	ite	eq
 801a30c:	2301      	moveq	r3, #1
 801a30e:	2300      	movne	r3, #0
 801a310:	b2db      	uxtb	r3, r3
 801a312:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a314:	7efb      	ldrb	r3, [r7, #27]
 801a316:	2b00      	cmp	r3, #0
 801a318:	d041      	beq.n	801a39e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801a31a:	2108      	movs	r1, #8
 801a31c:	6878      	ldr	r0, [r7, #4]
 801a31e:	f7f9 f835 	bl	801338c <pbuf_remove_header>
 801a322:	4603      	mov	r3, r0
 801a324:	2b00      	cmp	r3, #0
 801a326:	d00a      	beq.n	801a33e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801a328:	4b20      	ldr	r3, [pc, #128]	; (801a3ac <udp_input+0x208>)
 801a32a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801a32e:	4925      	ldr	r1, [pc, #148]	; (801a3c4 <udp_input+0x220>)
 801a330:	4820      	ldr	r0, [pc, #128]	; (801a3b4 <udp_input+0x210>)
 801a332:	f005 fadb 	bl	801f8ec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a336:	6878      	ldr	r0, [r7, #4]
 801a338:	f7f9 f8ae 	bl	8013498 <pbuf_free>
      goto end;
 801a33c:	e032      	b.n	801a3a4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a340:	2b00      	cmp	r3, #0
 801a342:	d012      	beq.n	801a36a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a346:	699b      	ldr	r3, [r3, #24]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d00a      	beq.n	801a362 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a34e:	699c      	ldr	r4, [r3, #24]
 801a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a352:	69d8      	ldr	r0, [r3, #28]
 801a354:	8a3b      	ldrh	r3, [r7, #16]
 801a356:	9300      	str	r3, [sp, #0]
 801a358:	4b1b      	ldr	r3, [pc, #108]	; (801a3c8 <udp_input+0x224>)
 801a35a:	687a      	ldr	r2, [r7, #4]
 801a35c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a35e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a360:	e021      	b.n	801a3a6 <udp_input+0x202>
        pbuf_free(p);
 801a362:	6878      	ldr	r0, [r7, #4]
 801a364:	f7f9 f898 	bl	8013498 <pbuf_free>
        goto end;
 801a368:	e01c      	b.n	801a3a4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a36a:	7cfb      	ldrb	r3, [r7, #19]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d112      	bne.n	801a396 <udp_input+0x1f2>
 801a370:	4b12      	ldr	r3, [pc, #72]	; (801a3bc <udp_input+0x218>)
 801a372:	695b      	ldr	r3, [r3, #20]
 801a374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a378:	2be0      	cmp	r3, #224	; 0xe0
 801a37a:	d00c      	beq.n	801a396 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a37c:	4b0f      	ldr	r3, [pc, #60]	; (801a3bc <udp_input+0x218>)
 801a37e:	899b      	ldrh	r3, [r3, #12]
 801a380:	3308      	adds	r3, #8
 801a382:	b29b      	uxth	r3, r3
 801a384:	b21b      	sxth	r3, r3
 801a386:	4619      	mov	r1, r3
 801a388:	6878      	ldr	r0, [r7, #4]
 801a38a:	f7f9 f872 	bl	8013472 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a38e:	2103      	movs	r1, #3
 801a390:	6878      	ldr	r0, [r7, #4]
 801a392:	f003 fb0f 	bl	801d9b4 <icmp_dest_unreach>
      pbuf_free(p);
 801a396:	6878      	ldr	r0, [r7, #4]
 801a398:	f7f9 f87e 	bl	8013498 <pbuf_free>
  return;
 801a39c:	e003      	b.n	801a3a6 <udp_input+0x202>
    pbuf_free(p);
 801a39e:	6878      	ldr	r0, [r7, #4]
 801a3a0:	f7f9 f87a 	bl	8013498 <pbuf_free>
  return;
 801a3a4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a3a6:	372c      	adds	r7, #44	; 0x2c
 801a3a8:	46bd      	mov	sp, r7
 801a3aa:	bd90      	pop	{r4, r7, pc}
 801a3ac:	08024524 	.word	0x08024524
 801a3b0:	080245c8 	.word	0x080245c8
 801a3b4:	08024578 	.word	0x08024578
 801a3b8:	080245e0 	.word	0x080245e0
 801a3bc:	200133b0 	.word	0x200133b0
 801a3c0:	20016ba8 	.word	0x20016ba8
 801a3c4:	080245fc 	.word	0x080245fc
 801a3c8:	200133c0 	.word	0x200133c0

0801a3cc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	b082      	sub	sp, #8
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	6078      	str	r0, [r7, #4]
 801a3d4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d109      	bne.n	801a3f0 <udp_send+0x24>
 801a3dc:	4b11      	ldr	r3, [pc, #68]	; (801a424 <udp_send+0x58>)
 801a3de:	f240 12d5 	movw	r2, #469	; 0x1d5
 801a3e2:	4911      	ldr	r1, [pc, #68]	; (801a428 <udp_send+0x5c>)
 801a3e4:	4811      	ldr	r0, [pc, #68]	; (801a42c <udp_send+0x60>)
 801a3e6:	f005 fa81 	bl	801f8ec <iprintf>
 801a3ea:	f06f 030f 	mvn.w	r3, #15
 801a3ee:	e015      	b.n	801a41c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801a3f0:	683b      	ldr	r3, [r7, #0]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d109      	bne.n	801a40a <udp_send+0x3e>
 801a3f6:	4b0b      	ldr	r3, [pc, #44]	; (801a424 <udp_send+0x58>)
 801a3f8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801a3fc:	490c      	ldr	r1, [pc, #48]	; (801a430 <udp_send+0x64>)
 801a3fe:	480b      	ldr	r0, [pc, #44]	; (801a42c <udp_send+0x60>)
 801a400:	f005 fa74 	bl	801f8ec <iprintf>
 801a404:	f06f 030f 	mvn.w	r3, #15
 801a408:	e008      	b.n	801a41c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	1d1a      	adds	r2, r3, #4
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	8a9b      	ldrh	r3, [r3, #20]
 801a412:	6839      	ldr	r1, [r7, #0]
 801a414:	6878      	ldr	r0, [r7, #4]
 801a416:	f000 f80d 	bl	801a434 <udp_sendto>
 801a41a:	4603      	mov	r3, r0
}
 801a41c:	4618      	mov	r0, r3
 801a41e:	3708      	adds	r7, #8
 801a420:	46bd      	mov	sp, r7
 801a422:	bd80      	pop	{r7, pc}
 801a424:	08024524 	.word	0x08024524
 801a428:	08024618 	.word	0x08024618
 801a42c:	08024578 	.word	0x08024578
 801a430:	08024630 	.word	0x08024630

0801a434 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801a434:	b580      	push	{r7, lr}
 801a436:	b088      	sub	sp, #32
 801a438:	af02      	add	r7, sp, #8
 801a43a:	60f8      	str	r0, [r7, #12]
 801a43c:	60b9      	str	r1, [r7, #8]
 801a43e:	607a      	str	r2, [r7, #4]
 801a440:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	2b00      	cmp	r3, #0
 801a446:	d109      	bne.n	801a45c <udp_sendto+0x28>
 801a448:	4b23      	ldr	r3, [pc, #140]	; (801a4d8 <udp_sendto+0xa4>)
 801a44a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a44e:	4923      	ldr	r1, [pc, #140]	; (801a4dc <udp_sendto+0xa8>)
 801a450:	4823      	ldr	r0, [pc, #140]	; (801a4e0 <udp_sendto+0xac>)
 801a452:	f005 fa4b 	bl	801f8ec <iprintf>
 801a456:	f06f 030f 	mvn.w	r3, #15
 801a45a:	e038      	b.n	801a4ce <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801a45c:	68bb      	ldr	r3, [r7, #8]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d109      	bne.n	801a476 <udp_sendto+0x42>
 801a462:	4b1d      	ldr	r3, [pc, #116]	; (801a4d8 <udp_sendto+0xa4>)
 801a464:	f240 2219 	movw	r2, #537	; 0x219
 801a468:	491e      	ldr	r1, [pc, #120]	; (801a4e4 <udp_sendto+0xb0>)
 801a46a:	481d      	ldr	r0, [pc, #116]	; (801a4e0 <udp_sendto+0xac>)
 801a46c:	f005 fa3e 	bl	801f8ec <iprintf>
 801a470:	f06f 030f 	mvn.w	r3, #15
 801a474:	e02b      	b.n	801a4ce <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d109      	bne.n	801a490 <udp_sendto+0x5c>
 801a47c:	4b16      	ldr	r3, [pc, #88]	; (801a4d8 <udp_sendto+0xa4>)
 801a47e:	f240 221a 	movw	r2, #538	; 0x21a
 801a482:	4919      	ldr	r1, [pc, #100]	; (801a4e8 <udp_sendto+0xb4>)
 801a484:	4816      	ldr	r0, [pc, #88]	; (801a4e0 <udp_sendto+0xac>)
 801a486:	f005 fa31 	bl	801f8ec <iprintf>
 801a48a:	f06f 030f 	mvn.w	r3, #15
 801a48e:	e01e      	b.n	801a4ce <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	7a1b      	ldrb	r3, [r3, #8]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d006      	beq.n	801a4a6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801a498:	68fb      	ldr	r3, [r7, #12]
 801a49a:	7a1b      	ldrb	r3, [r3, #8]
 801a49c:	4618      	mov	r0, r3
 801a49e:	f7f8 fc6d 	bl	8012d7c <netif_get_by_index>
 801a4a2:	6178      	str	r0, [r7, #20]
 801a4a4:	e003      	b.n	801a4ae <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801a4a6:	6878      	ldr	r0, [r7, #4]
 801a4a8:	f003 fb0e 	bl	801dac8 <ip4_route>
 801a4ac:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801a4ae:	697b      	ldr	r3, [r7, #20]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d102      	bne.n	801a4ba <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801a4b4:	f06f 0303 	mvn.w	r3, #3
 801a4b8:	e009      	b.n	801a4ce <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801a4ba:	887a      	ldrh	r2, [r7, #2]
 801a4bc:	697b      	ldr	r3, [r7, #20]
 801a4be:	9300      	str	r3, [sp, #0]
 801a4c0:	4613      	mov	r3, r2
 801a4c2:	687a      	ldr	r2, [r7, #4]
 801a4c4:	68b9      	ldr	r1, [r7, #8]
 801a4c6:	68f8      	ldr	r0, [r7, #12]
 801a4c8:	f000 f810 	bl	801a4ec <udp_sendto_if>
 801a4cc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	3718      	adds	r7, #24
 801a4d2:	46bd      	mov	sp, r7
 801a4d4:	bd80      	pop	{r7, pc}
 801a4d6:	bf00      	nop
 801a4d8:	08024524 	.word	0x08024524
 801a4dc:	08024648 	.word	0x08024648
 801a4e0:	08024578 	.word	0x08024578
 801a4e4:	08024660 	.word	0x08024660
 801a4e8:	0802467c 	.word	0x0802467c

0801a4ec <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801a4ec:	b580      	push	{r7, lr}
 801a4ee:	b088      	sub	sp, #32
 801a4f0:	af02      	add	r7, sp, #8
 801a4f2:	60f8      	str	r0, [r7, #12]
 801a4f4:	60b9      	str	r1, [r7, #8]
 801a4f6:	607a      	str	r2, [r7, #4]
 801a4f8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d109      	bne.n	801a514 <udp_sendto_if+0x28>
 801a500:	4b2e      	ldr	r3, [pc, #184]	; (801a5bc <udp_sendto_if+0xd0>)
 801a502:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a506:	492e      	ldr	r1, [pc, #184]	; (801a5c0 <udp_sendto_if+0xd4>)
 801a508:	482e      	ldr	r0, [pc, #184]	; (801a5c4 <udp_sendto_if+0xd8>)
 801a50a:	f005 f9ef 	bl	801f8ec <iprintf>
 801a50e:	f06f 030f 	mvn.w	r3, #15
 801a512:	e04f      	b.n	801a5b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801a514:	68bb      	ldr	r3, [r7, #8]
 801a516:	2b00      	cmp	r3, #0
 801a518:	d109      	bne.n	801a52e <udp_sendto_if+0x42>
 801a51a:	4b28      	ldr	r3, [pc, #160]	; (801a5bc <udp_sendto_if+0xd0>)
 801a51c:	f240 2281 	movw	r2, #641	; 0x281
 801a520:	4929      	ldr	r1, [pc, #164]	; (801a5c8 <udp_sendto_if+0xdc>)
 801a522:	4828      	ldr	r0, [pc, #160]	; (801a5c4 <udp_sendto_if+0xd8>)
 801a524:	f005 f9e2 	bl	801f8ec <iprintf>
 801a528:	f06f 030f 	mvn.w	r3, #15
 801a52c:	e042      	b.n	801a5b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	2b00      	cmp	r3, #0
 801a532:	d109      	bne.n	801a548 <udp_sendto_if+0x5c>
 801a534:	4b21      	ldr	r3, [pc, #132]	; (801a5bc <udp_sendto_if+0xd0>)
 801a536:	f240 2282 	movw	r2, #642	; 0x282
 801a53a:	4924      	ldr	r1, [pc, #144]	; (801a5cc <udp_sendto_if+0xe0>)
 801a53c:	4821      	ldr	r0, [pc, #132]	; (801a5c4 <udp_sendto_if+0xd8>)
 801a53e:	f005 f9d5 	bl	801f8ec <iprintf>
 801a542:	f06f 030f 	mvn.w	r3, #15
 801a546:	e035      	b.n	801a5b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801a548:	6a3b      	ldr	r3, [r7, #32]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d109      	bne.n	801a562 <udp_sendto_if+0x76>
 801a54e:	4b1b      	ldr	r3, [pc, #108]	; (801a5bc <udp_sendto_if+0xd0>)
 801a550:	f240 2283 	movw	r2, #643	; 0x283
 801a554:	491e      	ldr	r1, [pc, #120]	; (801a5d0 <udp_sendto_if+0xe4>)
 801a556:	481b      	ldr	r0, [pc, #108]	; (801a5c4 <udp_sendto_if+0xd8>)
 801a558:	f005 f9c8 	bl	801f8ec <iprintf>
 801a55c:	f06f 030f 	mvn.w	r3, #15
 801a560:	e028      	b.n	801a5b4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d009      	beq.n	801a57c <udp_sendto_if+0x90>
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d005      	beq.n	801a57c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a578:	2be0      	cmp	r3, #224	; 0xe0
 801a57a:	d103      	bne.n	801a584 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801a57c:	6a3b      	ldr	r3, [r7, #32]
 801a57e:	3304      	adds	r3, #4
 801a580:	617b      	str	r3, [r7, #20]
 801a582:	e00b      	b.n	801a59c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	681a      	ldr	r2, [r3, #0]
 801a588:	6a3b      	ldr	r3, [r7, #32]
 801a58a:	3304      	adds	r3, #4
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	429a      	cmp	r2, r3
 801a590:	d002      	beq.n	801a598 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801a592:	f06f 0303 	mvn.w	r3, #3
 801a596:	e00d      	b.n	801a5b4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801a59c:	887a      	ldrh	r2, [r7, #2]
 801a59e:	697b      	ldr	r3, [r7, #20]
 801a5a0:	9301      	str	r3, [sp, #4]
 801a5a2:	6a3b      	ldr	r3, [r7, #32]
 801a5a4:	9300      	str	r3, [sp, #0]
 801a5a6:	4613      	mov	r3, r2
 801a5a8:	687a      	ldr	r2, [r7, #4]
 801a5aa:	68b9      	ldr	r1, [r7, #8]
 801a5ac:	68f8      	ldr	r0, [r7, #12]
 801a5ae:	f000 f811 	bl	801a5d4 <udp_sendto_if_src>
 801a5b2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	3718      	adds	r7, #24
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	bd80      	pop	{r7, pc}
 801a5bc:	08024524 	.word	0x08024524
 801a5c0:	08024698 	.word	0x08024698
 801a5c4:	08024578 	.word	0x08024578
 801a5c8:	080246b4 	.word	0x080246b4
 801a5cc:	080246d0 	.word	0x080246d0
 801a5d0:	080246f0 	.word	0x080246f0

0801a5d4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801a5d4:	b580      	push	{r7, lr}
 801a5d6:	b08c      	sub	sp, #48	; 0x30
 801a5d8:	af04      	add	r7, sp, #16
 801a5da:	60f8      	str	r0, [r7, #12]
 801a5dc:	60b9      	str	r1, [r7, #8]
 801a5de:	607a      	str	r2, [r7, #4]
 801a5e0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d109      	bne.n	801a5fc <udp_sendto_if_src+0x28>
 801a5e8:	4b65      	ldr	r3, [pc, #404]	; (801a780 <udp_sendto_if_src+0x1ac>)
 801a5ea:	f240 22d1 	movw	r2, #721	; 0x2d1
 801a5ee:	4965      	ldr	r1, [pc, #404]	; (801a784 <udp_sendto_if_src+0x1b0>)
 801a5f0:	4865      	ldr	r0, [pc, #404]	; (801a788 <udp_sendto_if_src+0x1b4>)
 801a5f2:	f005 f97b 	bl	801f8ec <iprintf>
 801a5f6:	f06f 030f 	mvn.w	r3, #15
 801a5fa:	e0bc      	b.n	801a776 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d109      	bne.n	801a616 <udp_sendto_if_src+0x42>
 801a602:	4b5f      	ldr	r3, [pc, #380]	; (801a780 <udp_sendto_if_src+0x1ac>)
 801a604:	f240 22d2 	movw	r2, #722	; 0x2d2
 801a608:	4960      	ldr	r1, [pc, #384]	; (801a78c <udp_sendto_if_src+0x1b8>)
 801a60a:	485f      	ldr	r0, [pc, #380]	; (801a788 <udp_sendto_if_src+0x1b4>)
 801a60c:	f005 f96e 	bl	801f8ec <iprintf>
 801a610:	f06f 030f 	mvn.w	r3, #15
 801a614:	e0af      	b.n	801a776 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d109      	bne.n	801a630 <udp_sendto_if_src+0x5c>
 801a61c:	4b58      	ldr	r3, [pc, #352]	; (801a780 <udp_sendto_if_src+0x1ac>)
 801a61e:	f240 22d3 	movw	r2, #723	; 0x2d3
 801a622:	495b      	ldr	r1, [pc, #364]	; (801a790 <udp_sendto_if_src+0x1bc>)
 801a624:	4858      	ldr	r0, [pc, #352]	; (801a788 <udp_sendto_if_src+0x1b4>)
 801a626:	f005 f961 	bl	801f8ec <iprintf>
 801a62a:	f06f 030f 	mvn.w	r3, #15
 801a62e:	e0a2      	b.n	801a776 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801a630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a632:	2b00      	cmp	r3, #0
 801a634:	d109      	bne.n	801a64a <udp_sendto_if_src+0x76>
 801a636:	4b52      	ldr	r3, [pc, #328]	; (801a780 <udp_sendto_if_src+0x1ac>)
 801a638:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801a63c:	4955      	ldr	r1, [pc, #340]	; (801a794 <udp_sendto_if_src+0x1c0>)
 801a63e:	4852      	ldr	r0, [pc, #328]	; (801a788 <udp_sendto_if_src+0x1b4>)
 801a640:	f005 f954 	bl	801f8ec <iprintf>
 801a644:	f06f 030f 	mvn.w	r3, #15
 801a648:	e095      	b.n	801a776 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d109      	bne.n	801a664 <udp_sendto_if_src+0x90>
 801a650:	4b4b      	ldr	r3, [pc, #300]	; (801a780 <udp_sendto_if_src+0x1ac>)
 801a652:	f240 22d5 	movw	r2, #725	; 0x2d5
 801a656:	4950      	ldr	r1, [pc, #320]	; (801a798 <udp_sendto_if_src+0x1c4>)
 801a658:	484b      	ldr	r0, [pc, #300]	; (801a788 <udp_sendto_if_src+0x1b4>)
 801a65a:	f005 f947 	bl	801f8ec <iprintf>
 801a65e:	f06f 030f 	mvn.w	r3, #15
 801a662:	e088      	b.n	801a776 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	8a5b      	ldrh	r3, [r3, #18]
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d10f      	bne.n	801a68c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a66c:	68f9      	ldr	r1, [r7, #12]
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	8a5b      	ldrh	r3, [r3, #18]
 801a672:	461a      	mov	r2, r3
 801a674:	68f8      	ldr	r0, [r7, #12]
 801a676:	f000 f893 	bl	801a7a0 <udp_bind>
 801a67a:	4603      	mov	r3, r0
 801a67c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801a67e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a682:	2b00      	cmp	r3, #0
 801a684:	d002      	beq.n	801a68c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801a686:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a68a:	e074      	b.n	801a776 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801a68c:	68bb      	ldr	r3, [r7, #8]
 801a68e:	891b      	ldrh	r3, [r3, #8]
 801a690:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801a694:	4293      	cmp	r3, r2
 801a696:	d902      	bls.n	801a69e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801a698:	f04f 33ff 	mov.w	r3, #4294967295
 801a69c:	e06b      	b.n	801a776 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801a69e:	2108      	movs	r1, #8
 801a6a0:	68b8      	ldr	r0, [r7, #8]
 801a6a2:	f7f8 fe63 	bl	801336c <pbuf_add_header>
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d015      	beq.n	801a6d8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801a6ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a6b0:	2108      	movs	r1, #8
 801a6b2:	2022      	movs	r0, #34	; 0x22
 801a6b4:	f7f8 fc0c 	bl	8012ed0 <pbuf_alloc>
 801a6b8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801a6ba:	69fb      	ldr	r3, [r7, #28]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d102      	bne.n	801a6c6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801a6c0:	f04f 33ff 	mov.w	r3, #4294967295
 801a6c4:	e057      	b.n	801a776 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801a6c6:	68bb      	ldr	r3, [r7, #8]
 801a6c8:	891b      	ldrh	r3, [r3, #8]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d006      	beq.n	801a6dc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801a6ce:	68b9      	ldr	r1, [r7, #8]
 801a6d0:	69f8      	ldr	r0, [r7, #28]
 801a6d2:	f7f9 f805 	bl	80136e0 <pbuf_chain>
 801a6d6:	e001      	b.n	801a6dc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801a6d8:	68bb      	ldr	r3, [r7, #8]
 801a6da:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801a6dc:	69fb      	ldr	r3, [r7, #28]
 801a6de:	895b      	ldrh	r3, [r3, #10]
 801a6e0:	2b07      	cmp	r3, #7
 801a6e2:	d806      	bhi.n	801a6f2 <udp_sendto_if_src+0x11e>
 801a6e4:	4b26      	ldr	r3, [pc, #152]	; (801a780 <udp_sendto_if_src+0x1ac>)
 801a6e6:	f240 320d 	movw	r2, #781	; 0x30d
 801a6ea:	492c      	ldr	r1, [pc, #176]	; (801a79c <udp_sendto_if_src+0x1c8>)
 801a6ec:	4826      	ldr	r0, [pc, #152]	; (801a788 <udp_sendto_if_src+0x1b4>)
 801a6ee:	f005 f8fd 	bl	801f8ec <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801a6f2:	69fb      	ldr	r3, [r7, #28]
 801a6f4:	685b      	ldr	r3, [r3, #4]
 801a6f6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	8a5b      	ldrh	r3, [r3, #18]
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	f7f6 fb3d 	bl	8010d7c <lwip_htons>
 801a702:	4603      	mov	r3, r0
 801a704:	461a      	mov	r2, r3
 801a706:	697b      	ldr	r3, [r7, #20]
 801a708:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801a70a:	887b      	ldrh	r3, [r7, #2]
 801a70c:	4618      	mov	r0, r3
 801a70e:	f7f6 fb35 	bl	8010d7c <lwip_htons>
 801a712:	4603      	mov	r3, r0
 801a714:	461a      	mov	r2, r3
 801a716:	697b      	ldr	r3, [r7, #20]
 801a718:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801a71a:	697b      	ldr	r3, [r7, #20]
 801a71c:	2200      	movs	r2, #0
 801a71e:	719a      	strb	r2, [r3, #6]
 801a720:	2200      	movs	r2, #0
 801a722:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801a724:	69fb      	ldr	r3, [r7, #28]
 801a726:	891b      	ldrh	r3, [r3, #8]
 801a728:	4618      	mov	r0, r3
 801a72a:	f7f6 fb27 	bl	8010d7c <lwip_htons>
 801a72e:	4603      	mov	r3, r0
 801a730:	461a      	mov	r2, r3
 801a732:	697b      	ldr	r3, [r7, #20]
 801a734:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801a736:	2311      	movs	r3, #17
 801a738:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	7adb      	ldrb	r3, [r3, #11]
 801a73e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	7a9b      	ldrb	r3, [r3, #10]
 801a744:	7cb9      	ldrb	r1, [r7, #18]
 801a746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a748:	9202      	str	r2, [sp, #8]
 801a74a:	7cfa      	ldrb	r2, [r7, #19]
 801a74c:	9201      	str	r2, [sp, #4]
 801a74e:	9300      	str	r3, [sp, #0]
 801a750:	460b      	mov	r3, r1
 801a752:	687a      	ldr	r2, [r7, #4]
 801a754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a756:	69f8      	ldr	r0, [r7, #28]
 801a758:	f003 fbbc 	bl	801ded4 <ip4_output_if_src>
 801a75c:	4603      	mov	r3, r0
 801a75e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801a760:	69fa      	ldr	r2, [r7, #28]
 801a762:	68bb      	ldr	r3, [r7, #8]
 801a764:	429a      	cmp	r2, r3
 801a766:	d004      	beq.n	801a772 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801a768:	69f8      	ldr	r0, [r7, #28]
 801a76a:	f7f8 fe95 	bl	8013498 <pbuf_free>
    q = NULL;
 801a76e:	2300      	movs	r3, #0
 801a770:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801a772:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801a776:	4618      	mov	r0, r3
 801a778:	3720      	adds	r7, #32
 801a77a:	46bd      	mov	sp, r7
 801a77c:	bd80      	pop	{r7, pc}
 801a77e:	bf00      	nop
 801a780:	08024524 	.word	0x08024524
 801a784:	08024710 	.word	0x08024710
 801a788:	08024578 	.word	0x08024578
 801a78c:	08024730 	.word	0x08024730
 801a790:	08024750 	.word	0x08024750
 801a794:	08024774 	.word	0x08024774
 801a798:	08024798 	.word	0x08024798
 801a79c:	080247bc 	.word	0x080247bc

0801a7a0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b086      	sub	sp, #24
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	60f8      	str	r0, [r7, #12]
 801a7a8:	60b9      	str	r1, [r7, #8]
 801a7aa:	4613      	mov	r3, r2
 801a7ac:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a7ae:	68bb      	ldr	r3, [r7, #8]
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d101      	bne.n	801a7b8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801a7b4:	4b39      	ldr	r3, [pc, #228]	; (801a89c <udp_bind+0xfc>)
 801a7b6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d109      	bne.n	801a7d2 <udp_bind+0x32>
 801a7be:	4b38      	ldr	r3, [pc, #224]	; (801a8a0 <udp_bind+0x100>)
 801a7c0:	f240 32b7 	movw	r2, #951	; 0x3b7
 801a7c4:	4937      	ldr	r1, [pc, #220]	; (801a8a4 <udp_bind+0x104>)
 801a7c6:	4838      	ldr	r0, [pc, #224]	; (801a8a8 <udp_bind+0x108>)
 801a7c8:	f005 f890 	bl	801f8ec <iprintf>
 801a7cc:	f06f 030f 	mvn.w	r3, #15
 801a7d0:	e060      	b.n	801a894 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801a7d2:	2300      	movs	r3, #0
 801a7d4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a7d6:	4b35      	ldr	r3, [pc, #212]	; (801a8ac <udp_bind+0x10c>)
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	617b      	str	r3, [r7, #20]
 801a7dc:	e009      	b.n	801a7f2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801a7de:	68fa      	ldr	r2, [r7, #12]
 801a7e0:	697b      	ldr	r3, [r7, #20]
 801a7e2:	429a      	cmp	r2, r3
 801a7e4:	d102      	bne.n	801a7ec <udp_bind+0x4c>
      rebind = 1;
 801a7e6:	2301      	movs	r3, #1
 801a7e8:	74fb      	strb	r3, [r7, #19]
      break;
 801a7ea:	e005      	b.n	801a7f8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a7ec:	697b      	ldr	r3, [r7, #20]
 801a7ee:	68db      	ldr	r3, [r3, #12]
 801a7f0:	617b      	str	r3, [r7, #20]
 801a7f2:	697b      	ldr	r3, [r7, #20]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d1f2      	bne.n	801a7de <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801a7f8:	88fb      	ldrh	r3, [r7, #6]
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d109      	bne.n	801a812 <udp_bind+0x72>
    port = udp_new_port();
 801a7fe:	f7ff fc35 	bl	801a06c <udp_new_port>
 801a802:	4603      	mov	r3, r0
 801a804:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a806:	88fb      	ldrh	r3, [r7, #6]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d12c      	bne.n	801a866 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801a80c:	f06f 0307 	mvn.w	r3, #7
 801a810:	e040      	b.n	801a894 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a812:	4b26      	ldr	r3, [pc, #152]	; (801a8ac <udp_bind+0x10c>)
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	617b      	str	r3, [r7, #20]
 801a818:	e022      	b.n	801a860 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801a81a:	68fa      	ldr	r2, [r7, #12]
 801a81c:	697b      	ldr	r3, [r7, #20]
 801a81e:	429a      	cmp	r2, r3
 801a820:	d01b      	beq.n	801a85a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a822:	697b      	ldr	r3, [r7, #20]
 801a824:	8a5b      	ldrh	r3, [r3, #18]
 801a826:	88fa      	ldrh	r2, [r7, #6]
 801a828:	429a      	cmp	r2, r3
 801a82a:	d116      	bne.n	801a85a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a82c:	697b      	ldr	r3, [r7, #20]
 801a82e:	681a      	ldr	r2, [r3, #0]
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801a834:	429a      	cmp	r2, r3
 801a836:	d00d      	beq.n	801a854 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a838:	68bb      	ldr	r3, [r7, #8]
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d00a      	beq.n	801a854 <udp_bind+0xb4>
 801a83e:	68bb      	ldr	r3, [r7, #8]
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	2b00      	cmp	r3, #0
 801a844:	d006      	beq.n	801a854 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a846:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d003      	beq.n	801a854 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a84c:	697b      	ldr	r3, [r7, #20]
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	2b00      	cmp	r3, #0
 801a852:	d102      	bne.n	801a85a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801a854:	f06f 0307 	mvn.w	r3, #7
 801a858:	e01c      	b.n	801a894 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a85a:	697b      	ldr	r3, [r7, #20]
 801a85c:	68db      	ldr	r3, [r3, #12]
 801a85e:	617b      	str	r3, [r7, #20]
 801a860:	697b      	ldr	r3, [r7, #20]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d1d9      	bne.n	801a81a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a866:	68bb      	ldr	r3, [r7, #8]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d002      	beq.n	801a872 <udp_bind+0xd2>
 801a86c:	68bb      	ldr	r3, [r7, #8]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	e000      	b.n	801a874 <udp_bind+0xd4>
 801a872:	2300      	movs	r3, #0
 801a874:	68fa      	ldr	r2, [r7, #12]
 801a876:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	88fa      	ldrh	r2, [r7, #6]
 801a87c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a87e:	7cfb      	ldrb	r3, [r7, #19]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d106      	bne.n	801a892 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a884:	4b09      	ldr	r3, [pc, #36]	; (801a8ac <udp_bind+0x10c>)
 801a886:	681a      	ldr	r2, [r3, #0]
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801a88c:	4a07      	ldr	r2, [pc, #28]	; (801a8ac <udp_bind+0x10c>)
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a892:	2300      	movs	r3, #0
}
 801a894:	4618      	mov	r0, r3
 801a896:	3718      	adds	r7, #24
 801a898:	46bd      	mov	sp, r7
 801a89a:	bd80      	pop	{r7, pc}
 801a89c:	080256b4 	.word	0x080256b4
 801a8a0:	08024524 	.word	0x08024524
 801a8a4:	080247ec 	.word	0x080247ec
 801a8a8:	08024578 	.word	0x08024578
 801a8ac:	20016ba8 	.word	0x20016ba8

0801a8b0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a8b0:	b580      	push	{r7, lr}
 801a8b2:	b086      	sub	sp, #24
 801a8b4:	af00      	add	r7, sp, #0
 801a8b6:	60f8      	str	r0, [r7, #12]
 801a8b8:	60b9      	str	r1, [r7, #8]
 801a8ba:	4613      	mov	r3, r2
 801a8bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d109      	bne.n	801a8d8 <udp_connect+0x28>
 801a8c4:	4b2c      	ldr	r3, [pc, #176]	; (801a978 <udp_connect+0xc8>)
 801a8c6:	f240 4235 	movw	r2, #1077	; 0x435
 801a8ca:	492c      	ldr	r1, [pc, #176]	; (801a97c <udp_connect+0xcc>)
 801a8cc:	482c      	ldr	r0, [pc, #176]	; (801a980 <udp_connect+0xd0>)
 801a8ce:	f005 f80d 	bl	801f8ec <iprintf>
 801a8d2:	f06f 030f 	mvn.w	r3, #15
 801a8d6:	e04b      	b.n	801a970 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d109      	bne.n	801a8f2 <udp_connect+0x42>
 801a8de:	4b26      	ldr	r3, [pc, #152]	; (801a978 <udp_connect+0xc8>)
 801a8e0:	f240 4236 	movw	r2, #1078	; 0x436
 801a8e4:	4927      	ldr	r1, [pc, #156]	; (801a984 <udp_connect+0xd4>)
 801a8e6:	4826      	ldr	r0, [pc, #152]	; (801a980 <udp_connect+0xd0>)
 801a8e8:	f005 f800 	bl	801f8ec <iprintf>
 801a8ec:	f06f 030f 	mvn.w	r3, #15
 801a8f0:	e03e      	b.n	801a970 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	8a5b      	ldrh	r3, [r3, #18]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d10f      	bne.n	801a91a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a8fa:	68f9      	ldr	r1, [r7, #12]
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	8a5b      	ldrh	r3, [r3, #18]
 801a900:	461a      	mov	r2, r3
 801a902:	68f8      	ldr	r0, [r7, #12]
 801a904:	f7ff ff4c 	bl	801a7a0 <udp_bind>
 801a908:	4603      	mov	r3, r0
 801a90a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801a90c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d002      	beq.n	801a91a <udp_connect+0x6a>
      return err;
 801a914:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a918:	e02a      	b.n	801a970 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801a91a:	68bb      	ldr	r3, [r7, #8]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d002      	beq.n	801a926 <udp_connect+0x76>
 801a920:	68bb      	ldr	r3, [r7, #8]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	e000      	b.n	801a928 <udp_connect+0x78>
 801a926:	2300      	movs	r3, #0
 801a928:	68fa      	ldr	r2, [r7, #12]
 801a92a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801a92c:	68fb      	ldr	r3, [r7, #12]
 801a92e:	88fa      	ldrh	r2, [r7, #6]
 801a930:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	7c1b      	ldrb	r3, [r3, #16]
 801a936:	f043 0304 	orr.w	r3, r3, #4
 801a93a:	b2da      	uxtb	r2, r3
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a940:	4b11      	ldr	r3, [pc, #68]	; (801a988 <udp_connect+0xd8>)
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	617b      	str	r3, [r7, #20]
 801a946:	e008      	b.n	801a95a <udp_connect+0xaa>
    if (pcb == ipcb) {
 801a948:	68fa      	ldr	r2, [r7, #12]
 801a94a:	697b      	ldr	r3, [r7, #20]
 801a94c:	429a      	cmp	r2, r3
 801a94e:	d101      	bne.n	801a954 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801a950:	2300      	movs	r3, #0
 801a952:	e00d      	b.n	801a970 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a954:	697b      	ldr	r3, [r7, #20]
 801a956:	68db      	ldr	r3, [r3, #12]
 801a958:	617b      	str	r3, [r7, #20]
 801a95a:	697b      	ldr	r3, [r7, #20]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d1f3      	bne.n	801a948 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801a960:	4b09      	ldr	r3, [pc, #36]	; (801a988 <udp_connect+0xd8>)
 801a962:	681a      	ldr	r2, [r3, #0]
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801a968:	4a07      	ldr	r2, [pc, #28]	; (801a988 <udp_connect+0xd8>)
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801a96e:	2300      	movs	r3, #0
}
 801a970:	4618      	mov	r0, r3
 801a972:	3718      	adds	r7, #24
 801a974:	46bd      	mov	sp, r7
 801a976:	bd80      	pop	{r7, pc}
 801a978:	08024524 	.word	0x08024524
 801a97c:	08024804 	.word	0x08024804
 801a980:	08024578 	.word	0x08024578
 801a984:	08024820 	.word	0x08024820
 801a988:	20016ba8 	.word	0x20016ba8

0801a98c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801a98c:	b580      	push	{r7, lr}
 801a98e:	b082      	sub	sp, #8
 801a990:	af00      	add	r7, sp, #0
 801a992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d107      	bne.n	801a9aa <udp_disconnect+0x1e>
 801a99a:	4b0d      	ldr	r3, [pc, #52]	; (801a9d0 <udp_disconnect+0x44>)
 801a99c:	f240 426a 	movw	r2, #1130	; 0x46a
 801a9a0:	490c      	ldr	r1, [pc, #48]	; (801a9d4 <udp_disconnect+0x48>)
 801a9a2:	480d      	ldr	r0, [pc, #52]	; (801a9d8 <udp_disconnect+0x4c>)
 801a9a4:	f004 ffa2 	bl	801f8ec <iprintf>
 801a9a8:	e00f      	b.n	801a9ca <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	2200      	movs	r2, #0
 801a9b4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	7c1b      	ldrb	r3, [r3, #16]
 801a9c0:	f023 0304 	bic.w	r3, r3, #4
 801a9c4:	b2da      	uxtb	r2, r3
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	741a      	strb	r2, [r3, #16]
}
 801a9ca:	3708      	adds	r7, #8
 801a9cc:	46bd      	mov	sp, r7
 801a9ce:	bd80      	pop	{r7, pc}
 801a9d0:	08024524 	.word	0x08024524
 801a9d4:	0802483c 	.word	0x0802483c
 801a9d8:	08024578 	.word	0x08024578

0801a9dc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b084      	sub	sp, #16
 801a9e0:	af00      	add	r7, sp, #0
 801a9e2:	60f8      	str	r0, [r7, #12]
 801a9e4:	60b9      	str	r1, [r7, #8]
 801a9e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d107      	bne.n	801a9fe <udp_recv+0x22>
 801a9ee:	4b08      	ldr	r3, [pc, #32]	; (801aa10 <udp_recv+0x34>)
 801a9f0:	f240 428a 	movw	r2, #1162	; 0x48a
 801a9f4:	4907      	ldr	r1, [pc, #28]	; (801aa14 <udp_recv+0x38>)
 801a9f6:	4808      	ldr	r0, [pc, #32]	; (801aa18 <udp_recv+0x3c>)
 801a9f8:	f004 ff78 	bl	801f8ec <iprintf>
 801a9fc:	e005      	b.n	801aa0a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a9fe:	68fb      	ldr	r3, [r7, #12]
 801aa00:	68ba      	ldr	r2, [r7, #8]
 801aa02:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	687a      	ldr	r2, [r7, #4]
 801aa08:	61da      	str	r2, [r3, #28]
}
 801aa0a:	3710      	adds	r7, #16
 801aa0c:	46bd      	mov	sp, r7
 801aa0e:	bd80      	pop	{r7, pc}
 801aa10:	08024524 	.word	0x08024524
 801aa14:	08024858 	.word	0x08024858
 801aa18:	08024578 	.word	0x08024578

0801aa1c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b084      	sub	sp, #16
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d107      	bne.n	801aa3a <udp_remove+0x1e>
 801aa2a:	4b19      	ldr	r3, [pc, #100]	; (801aa90 <udp_remove+0x74>)
 801aa2c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801aa30:	4918      	ldr	r1, [pc, #96]	; (801aa94 <udp_remove+0x78>)
 801aa32:	4819      	ldr	r0, [pc, #100]	; (801aa98 <udp_remove+0x7c>)
 801aa34:	f004 ff5a 	bl	801f8ec <iprintf>
 801aa38:	e026      	b.n	801aa88 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801aa3a:	4b18      	ldr	r3, [pc, #96]	; (801aa9c <udp_remove+0x80>)
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	687a      	ldr	r2, [r7, #4]
 801aa40:	429a      	cmp	r2, r3
 801aa42:	d105      	bne.n	801aa50 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801aa44:	4b15      	ldr	r3, [pc, #84]	; (801aa9c <udp_remove+0x80>)
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	68db      	ldr	r3, [r3, #12]
 801aa4a:	4a14      	ldr	r2, [pc, #80]	; (801aa9c <udp_remove+0x80>)
 801aa4c:	6013      	str	r3, [r2, #0]
 801aa4e:	e017      	b.n	801aa80 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801aa50:	4b12      	ldr	r3, [pc, #72]	; (801aa9c <udp_remove+0x80>)
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	60fb      	str	r3, [r7, #12]
 801aa56:	e010      	b.n	801aa7a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	68db      	ldr	r3, [r3, #12]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d009      	beq.n	801aa74 <udp_remove+0x58>
 801aa60:	68fb      	ldr	r3, [r7, #12]
 801aa62:	68db      	ldr	r3, [r3, #12]
 801aa64:	687a      	ldr	r2, [r7, #4]
 801aa66:	429a      	cmp	r2, r3
 801aa68:	d104      	bne.n	801aa74 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	68da      	ldr	r2, [r3, #12]
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	60da      	str	r2, [r3, #12]
        break;
 801aa72:	e005      	b.n	801aa80 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	68db      	ldr	r3, [r3, #12]
 801aa78:	60fb      	str	r3, [r7, #12]
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d1eb      	bne.n	801aa58 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801aa80:	6879      	ldr	r1, [r7, #4]
 801aa82:	2000      	movs	r0, #0
 801aa84:	f7f7 fe58 	bl	8012738 <memp_free>
}
 801aa88:	3710      	adds	r7, #16
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	bd80      	pop	{r7, pc}
 801aa8e:	bf00      	nop
 801aa90:	08024524 	.word	0x08024524
 801aa94:	08024870 	.word	0x08024870
 801aa98:	08024578 	.word	0x08024578
 801aa9c:	20016ba8 	.word	0x20016ba8

0801aaa0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b082      	sub	sp, #8
 801aaa4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801aaa6:	2000      	movs	r0, #0
 801aaa8:	f7f7 fdf4 	bl	8012694 <memp_malloc>
 801aaac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d007      	beq.n	801aac4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801aab4:	2220      	movs	r2, #32
 801aab6:	2100      	movs	r1, #0
 801aab8:	6878      	ldr	r0, [r7, #4]
 801aaba:	f004 fe55 	bl	801f768 <memset>
    pcb->ttl = UDP_TTL;
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	22ff      	movs	r2, #255	; 0xff
 801aac2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801aac4:	687b      	ldr	r3, [r7, #4]
}
 801aac6:	4618      	mov	r0, r3
 801aac8:	3708      	adds	r7, #8
 801aaca:	46bd      	mov	sp, r7
 801aacc:	bd80      	pop	{r7, pc}

0801aace <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801aace:	b580      	push	{r7, lr}
 801aad0:	b084      	sub	sp, #16
 801aad2:	af00      	add	r7, sp, #0
 801aad4:	4603      	mov	r3, r0
 801aad6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801aad8:	f7ff ffe2 	bl	801aaa0 <udp_new>
 801aadc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801aade:	68fb      	ldr	r3, [r7, #12]
}
 801aae0:	4618      	mov	r0, r3
 801aae2:	3710      	adds	r7, #16
 801aae4:	46bd      	mov	sp, r7
 801aae6:	bd80      	pop	{r7, pc}

0801aae8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801aae8:	b480      	push	{r7}
 801aaea:	b085      	sub	sp, #20
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
 801aaf0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d01e      	beq.n	801ab36 <udp_netif_ip_addr_changed+0x4e>
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d01a      	beq.n	801ab36 <udp_netif_ip_addr_changed+0x4e>
 801ab00:	683b      	ldr	r3, [r7, #0]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d017      	beq.n	801ab36 <udp_netif_ip_addr_changed+0x4e>
 801ab06:	683b      	ldr	r3, [r7, #0]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d013      	beq.n	801ab36 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ab0e:	4b0d      	ldr	r3, [pc, #52]	; (801ab44 <udp_netif_ip_addr_changed+0x5c>)
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	60fb      	str	r3, [r7, #12]
 801ab14:	e00c      	b.n	801ab30 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	681a      	ldr	r2, [r3, #0]
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	429a      	cmp	r2, r3
 801ab20:	d103      	bne.n	801ab2a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ab22:	683b      	ldr	r3, [r7, #0]
 801ab24:	681a      	ldr	r2, [r3, #0]
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ab2a:	68fb      	ldr	r3, [r7, #12]
 801ab2c:	68db      	ldr	r3, [r3, #12]
 801ab2e:	60fb      	str	r3, [r7, #12]
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d1ef      	bne.n	801ab16 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ab36:	bf00      	nop
 801ab38:	3714      	adds	r7, #20
 801ab3a:	46bd      	mov	sp, r7
 801ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab40:	4770      	bx	lr
 801ab42:	bf00      	nop
 801ab44:	20016ba8 	.word	0x20016ba8

0801ab48 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801ab48:	b580      	push	{r7, lr}
 801ab4a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801ab4c:	4b20      	ldr	r3, [pc, #128]	; (801abd0 <dhcp_inc_pcb_refcount+0x88>)
 801ab4e:	781b      	ldrb	r3, [r3, #0]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d133      	bne.n	801abbc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801ab54:	4b1f      	ldr	r3, [pc, #124]	; (801abd4 <dhcp_inc_pcb_refcount+0x8c>)
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d005      	beq.n	801ab68 <dhcp_inc_pcb_refcount+0x20>
 801ab5c:	4b1e      	ldr	r3, [pc, #120]	; (801abd8 <dhcp_inc_pcb_refcount+0x90>)
 801ab5e:	22e5      	movs	r2, #229	; 0xe5
 801ab60:	491e      	ldr	r1, [pc, #120]	; (801abdc <dhcp_inc_pcb_refcount+0x94>)
 801ab62:	481f      	ldr	r0, [pc, #124]	; (801abe0 <dhcp_inc_pcb_refcount+0x98>)
 801ab64:	f004 fec2 	bl	801f8ec <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801ab68:	f7ff ff9a 	bl	801aaa0 <udp_new>
 801ab6c:	4603      	mov	r3, r0
 801ab6e:	4a19      	ldr	r2, [pc, #100]	; (801abd4 <dhcp_inc_pcb_refcount+0x8c>)
 801ab70:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801ab72:	4b18      	ldr	r3, [pc, #96]	; (801abd4 <dhcp_inc_pcb_refcount+0x8c>)
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d102      	bne.n	801ab80 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801ab7a:	f04f 33ff 	mov.w	r3, #4294967295
 801ab7e:	e024      	b.n	801abca <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801ab80:	4b14      	ldr	r3, [pc, #80]	; (801abd4 <dhcp_inc_pcb_refcount+0x8c>)
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	7a5a      	ldrb	r2, [r3, #9]
 801ab86:	4b13      	ldr	r3, [pc, #76]	; (801abd4 <dhcp_inc_pcb_refcount+0x8c>)
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	f042 0220 	orr.w	r2, r2, #32
 801ab8e:	b2d2      	uxtb	r2, r2
 801ab90:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801ab92:	4b10      	ldr	r3, [pc, #64]	; (801abd4 <dhcp_inc_pcb_refcount+0x8c>)
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	2244      	movs	r2, #68	; 0x44
 801ab98:	4912      	ldr	r1, [pc, #72]	; (801abe4 <dhcp_inc_pcb_refcount+0x9c>)
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	f7ff fe00 	bl	801a7a0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801aba0:	4b0c      	ldr	r3, [pc, #48]	; (801abd4 <dhcp_inc_pcb_refcount+0x8c>)
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	2243      	movs	r2, #67	; 0x43
 801aba6:	490f      	ldr	r1, [pc, #60]	; (801abe4 <dhcp_inc_pcb_refcount+0x9c>)
 801aba8:	4618      	mov	r0, r3
 801abaa:	f7ff fe81 	bl	801a8b0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801abae:	4b09      	ldr	r3, [pc, #36]	; (801abd4 <dhcp_inc_pcb_refcount+0x8c>)
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	2200      	movs	r2, #0
 801abb4:	490c      	ldr	r1, [pc, #48]	; (801abe8 <dhcp_inc_pcb_refcount+0xa0>)
 801abb6:	4618      	mov	r0, r3
 801abb8:	f7ff ff10 	bl	801a9dc <udp_recv>
  }

  dhcp_pcb_refcount++;
 801abbc:	4b04      	ldr	r3, [pc, #16]	; (801abd0 <dhcp_inc_pcb_refcount+0x88>)
 801abbe:	781b      	ldrb	r3, [r3, #0]
 801abc0:	3301      	adds	r3, #1
 801abc2:	b2da      	uxtb	r2, r3
 801abc4:	4b02      	ldr	r3, [pc, #8]	; (801abd0 <dhcp_inc_pcb_refcount+0x88>)
 801abc6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801abc8:	2300      	movs	r3, #0
}
 801abca:	4618      	mov	r0, r3
 801abcc:	bd80      	pop	{r7, pc}
 801abce:	bf00      	nop
 801abd0:	20005548 	.word	0x20005548
 801abd4:	20005544 	.word	0x20005544
 801abd8:	08024888 	.word	0x08024888
 801abdc:	080248c0 	.word	0x080248c0
 801abe0:	080248e8 	.word	0x080248e8
 801abe4:	080256b4 	.word	0x080256b4
 801abe8:	0801c51d 	.word	0x0801c51d

0801abec <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801abec:	b580      	push	{r7, lr}
 801abee:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801abf0:	4b0e      	ldr	r3, [pc, #56]	; (801ac2c <dhcp_dec_pcb_refcount+0x40>)
 801abf2:	781b      	ldrb	r3, [r3, #0]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d105      	bne.n	801ac04 <dhcp_dec_pcb_refcount+0x18>
 801abf8:	4b0d      	ldr	r3, [pc, #52]	; (801ac30 <dhcp_dec_pcb_refcount+0x44>)
 801abfa:	22ff      	movs	r2, #255	; 0xff
 801abfc:	490d      	ldr	r1, [pc, #52]	; (801ac34 <dhcp_dec_pcb_refcount+0x48>)
 801abfe:	480e      	ldr	r0, [pc, #56]	; (801ac38 <dhcp_dec_pcb_refcount+0x4c>)
 801ac00:	f004 fe74 	bl	801f8ec <iprintf>
  dhcp_pcb_refcount--;
 801ac04:	4b09      	ldr	r3, [pc, #36]	; (801ac2c <dhcp_dec_pcb_refcount+0x40>)
 801ac06:	781b      	ldrb	r3, [r3, #0]
 801ac08:	3b01      	subs	r3, #1
 801ac0a:	b2da      	uxtb	r2, r3
 801ac0c:	4b07      	ldr	r3, [pc, #28]	; (801ac2c <dhcp_dec_pcb_refcount+0x40>)
 801ac0e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801ac10:	4b06      	ldr	r3, [pc, #24]	; (801ac2c <dhcp_dec_pcb_refcount+0x40>)
 801ac12:	781b      	ldrb	r3, [r3, #0]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d107      	bne.n	801ac28 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801ac18:	4b08      	ldr	r3, [pc, #32]	; (801ac3c <dhcp_dec_pcb_refcount+0x50>)
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	f7ff fefd 	bl	801aa1c <udp_remove>
    dhcp_pcb = NULL;
 801ac22:	4b06      	ldr	r3, [pc, #24]	; (801ac3c <dhcp_dec_pcb_refcount+0x50>)
 801ac24:	2200      	movs	r2, #0
 801ac26:	601a      	str	r2, [r3, #0]
  }
}
 801ac28:	bf00      	nop
 801ac2a:	bd80      	pop	{r7, pc}
 801ac2c:	20005548 	.word	0x20005548
 801ac30:	08024888 	.word	0x08024888
 801ac34:	08024910 	.word	0x08024910
 801ac38:	080248e8 	.word	0x080248e8
 801ac3c:	20005544 	.word	0x20005544

0801ac40 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801ac40:	b580      	push	{r7, lr}
 801ac42:	b084      	sub	sp, #16
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac4c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801ac4e:	210c      	movs	r1, #12
 801ac50:	68f8      	ldr	r0, [r7, #12]
 801ac52:	f001 f875 	bl	801bd40 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801ac56:	4b06      	ldr	r3, [pc, #24]	; (801ac70 <dhcp_handle_nak+0x30>)
 801ac58:	4a05      	ldr	r2, [pc, #20]	; (801ac70 <dhcp_handle_nak+0x30>)
 801ac5a:	4905      	ldr	r1, [pc, #20]	; (801ac70 <dhcp_handle_nak+0x30>)
 801ac5c:	6878      	ldr	r0, [r7, #4]
 801ac5e:	f7f7 ff0d 	bl	8012a7c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801ac62:	6878      	ldr	r0, [r7, #4]
 801ac64:	f000 fc68 	bl	801b538 <dhcp_discover>
}
 801ac68:	bf00      	nop
 801ac6a:	3710      	adds	r7, #16
 801ac6c:	46bd      	mov	sp, r7
 801ac6e:	bd80      	pop	{r7, pc}
 801ac70:	080256b4 	.word	0x080256b4

0801ac74 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801ac74:	b580      	push	{r7, lr}
 801ac76:	b084      	sub	sp, #16
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac80:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801ac82:	2108      	movs	r1, #8
 801ac84:	68f8      	ldr	r0, [r7, #12]
 801ac86:	f001 f85b 	bl	801bd40 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	331c      	adds	r3, #28
 801ac8e:	2200      	movs	r2, #0
 801ac90:	4619      	mov	r1, r3
 801ac92:	6878      	ldr	r0, [r7, #4]
 801ac94:	f002 fb8c 	bl	801d3b0 <etharp_query>
 801ac98:	4603      	mov	r3, r0
 801ac9a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	799b      	ldrb	r3, [r3, #6]
 801aca0:	2bff      	cmp	r3, #255	; 0xff
 801aca2:	d005      	beq.n	801acb0 <dhcp_check+0x3c>
    dhcp->tries++;
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	799b      	ldrb	r3, [r3, #6]
 801aca8:	3301      	adds	r3, #1
 801acaa:	b2da      	uxtb	r2, r3
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801acb0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801acb4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801acb6:	893b      	ldrh	r3, [r7, #8]
 801acb8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801acbc:	4a06      	ldr	r2, [pc, #24]	; (801acd8 <dhcp_check+0x64>)
 801acbe:	fb82 1203 	smull	r1, r2, r2, r3
 801acc2:	1152      	asrs	r2, r2, #5
 801acc4:	17db      	asrs	r3, r3, #31
 801acc6:	1ad3      	subs	r3, r2, r3
 801acc8:	b29a      	uxth	r2, r3
 801acca:	68fb      	ldr	r3, [r7, #12]
 801accc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801acce:	bf00      	nop
 801acd0:	3710      	adds	r7, #16
 801acd2:	46bd      	mov	sp, r7
 801acd4:	bd80      	pop	{r7, pc}
 801acd6:	bf00      	nop
 801acd8:	10624dd3 	.word	0x10624dd3

0801acdc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b084      	sub	sp, #16
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	6078      	str	r0, [r7, #4]
 801ace4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801acec:	4b0c      	ldr	r3, [pc, #48]	; (801ad20 <dhcp_handle_offer+0x44>)
 801acee:	789b      	ldrb	r3, [r3, #2]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d011      	beq.n	801ad18 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	2200      	movs	r2, #0
 801acf8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801acfa:	4b0a      	ldr	r3, [pc, #40]	; (801ad24 <dhcp_handle_offer+0x48>)
 801acfc:	689b      	ldr	r3, [r3, #8]
 801acfe:	4618      	mov	r0, r3
 801ad00:	f7f6 f851 	bl	8010da6 <lwip_htonl>
 801ad04:	4602      	mov	r2, r0
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801ad0a:	683b      	ldr	r3, [r7, #0]
 801ad0c:	691a      	ldr	r2, [r3, #16]
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801ad12:	6878      	ldr	r0, [r7, #4]
 801ad14:	f000 f808 	bl	801ad28 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801ad18:	bf00      	nop
 801ad1a:	3710      	adds	r7, #16
 801ad1c:	46bd      	mov	sp, r7
 801ad1e:	bd80      	pop	{r7, pc}
 801ad20:	20016bac 	.word	0x20016bac
 801ad24:	20016bb8 	.word	0x20016bb8

0801ad28 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801ad28:	b5b0      	push	{r4, r5, r7, lr}
 801ad2a:	b08a      	sub	sp, #40	; 0x28
 801ad2c:	af02      	add	r7, sp, #8
 801ad2e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d109      	bne.n	801ad4a <dhcp_select+0x22>
 801ad36:	4b71      	ldr	r3, [pc, #452]	; (801aefc <dhcp_select+0x1d4>)
 801ad38:	f240 1277 	movw	r2, #375	; 0x177
 801ad3c:	4970      	ldr	r1, [pc, #448]	; (801af00 <dhcp_select+0x1d8>)
 801ad3e:	4871      	ldr	r0, [pc, #452]	; (801af04 <dhcp_select+0x1dc>)
 801ad40:	f004 fdd4 	bl	801f8ec <iprintf>
 801ad44:	f06f 030f 	mvn.w	r3, #15
 801ad48:	e0d3      	b.n	801aef2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad4e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801ad50:	69bb      	ldr	r3, [r7, #24]
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d109      	bne.n	801ad6a <dhcp_select+0x42>
 801ad56:	4b69      	ldr	r3, [pc, #420]	; (801aefc <dhcp_select+0x1d4>)
 801ad58:	f240 1279 	movw	r2, #377	; 0x179
 801ad5c:	496a      	ldr	r1, [pc, #424]	; (801af08 <dhcp_select+0x1e0>)
 801ad5e:	4869      	ldr	r0, [pc, #420]	; (801af04 <dhcp_select+0x1dc>)
 801ad60:	f004 fdc4 	bl	801f8ec <iprintf>
 801ad64:	f06f 0305 	mvn.w	r3, #5
 801ad68:	e0c3      	b.n	801aef2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801ad6a:	2101      	movs	r1, #1
 801ad6c:	69b8      	ldr	r0, [r7, #24]
 801ad6e:	f000 ffe7 	bl	801bd40 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ad72:	f107 030c 	add.w	r3, r7, #12
 801ad76:	2203      	movs	r2, #3
 801ad78:	69b9      	ldr	r1, [r7, #24]
 801ad7a:	6878      	ldr	r0, [r7, #4]
 801ad7c:	f001 fc9c 	bl	801c6b8 <dhcp_create_msg>
 801ad80:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ad82:	697b      	ldr	r3, [r7, #20]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	f000 8085 	beq.w	801ae94 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ad8a:	697b      	ldr	r3, [r7, #20]
 801ad8c:	685b      	ldr	r3, [r3, #4]
 801ad8e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ad90:	89b8      	ldrh	r0, [r7, #12]
 801ad92:	693b      	ldr	r3, [r7, #16]
 801ad94:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ad98:	2302      	movs	r3, #2
 801ad9a:	2239      	movs	r2, #57	; 0x39
 801ad9c:	f000 ffea 	bl	801bd74 <dhcp_option>
 801ada0:	4603      	mov	r3, r0
 801ada2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ada4:	89b8      	ldrh	r0, [r7, #12]
 801ada6:	693b      	ldr	r3, [r7, #16]
 801ada8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801adb0:	461a      	mov	r2, r3
 801adb2:	f001 f839 	bl	801be28 <dhcp_option_short>
 801adb6:	4603      	mov	r3, r0
 801adb8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801adba:	89b8      	ldrh	r0, [r7, #12]
 801adbc:	693b      	ldr	r3, [r7, #16]
 801adbe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801adc2:	2304      	movs	r3, #4
 801adc4:	2232      	movs	r2, #50	; 0x32
 801adc6:	f000 ffd5 	bl	801bd74 <dhcp_option>
 801adca:	4603      	mov	r3, r0
 801adcc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801adce:	89bc      	ldrh	r4, [r7, #12]
 801add0:	693b      	ldr	r3, [r7, #16]
 801add2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801add6:	69bb      	ldr	r3, [r7, #24]
 801add8:	69db      	ldr	r3, [r3, #28]
 801adda:	4618      	mov	r0, r3
 801addc:	f7f5 ffe3 	bl	8010da6 <lwip_htonl>
 801ade0:	4603      	mov	r3, r0
 801ade2:	461a      	mov	r2, r3
 801ade4:	4629      	mov	r1, r5
 801ade6:	4620      	mov	r0, r4
 801ade8:	f001 f850 	bl	801be8c <dhcp_option_long>
 801adec:	4603      	mov	r3, r0
 801adee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801adf0:	89b8      	ldrh	r0, [r7, #12]
 801adf2:	693b      	ldr	r3, [r7, #16]
 801adf4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801adf8:	2304      	movs	r3, #4
 801adfa:	2236      	movs	r2, #54	; 0x36
 801adfc:	f000 ffba 	bl	801bd74 <dhcp_option>
 801ae00:	4603      	mov	r3, r0
 801ae02:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801ae04:	89bc      	ldrh	r4, [r7, #12]
 801ae06:	693b      	ldr	r3, [r7, #16]
 801ae08:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801ae0c:	69bb      	ldr	r3, [r7, #24]
 801ae0e:	699b      	ldr	r3, [r3, #24]
 801ae10:	4618      	mov	r0, r3
 801ae12:	f7f5 ffc8 	bl	8010da6 <lwip_htonl>
 801ae16:	4603      	mov	r3, r0
 801ae18:	461a      	mov	r2, r3
 801ae1a:	4629      	mov	r1, r5
 801ae1c:	4620      	mov	r0, r4
 801ae1e:	f001 f835 	bl	801be8c <dhcp_option_long>
 801ae22:	4603      	mov	r3, r0
 801ae24:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ae26:	89b8      	ldrh	r0, [r7, #12]
 801ae28:	693b      	ldr	r3, [r7, #16]
 801ae2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ae2e:	2304      	movs	r3, #4
 801ae30:	2237      	movs	r2, #55	; 0x37
 801ae32:	f000 ff9f 	bl	801bd74 <dhcp_option>
 801ae36:	4603      	mov	r3, r0
 801ae38:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ae3a:	2300      	movs	r3, #0
 801ae3c:	77bb      	strb	r3, [r7, #30]
 801ae3e:	e00e      	b.n	801ae5e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ae40:	89b8      	ldrh	r0, [r7, #12]
 801ae42:	693b      	ldr	r3, [r7, #16]
 801ae44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ae48:	7fbb      	ldrb	r3, [r7, #30]
 801ae4a:	4a30      	ldr	r2, [pc, #192]	; (801af0c <dhcp_select+0x1e4>)
 801ae4c:	5cd3      	ldrb	r3, [r2, r3]
 801ae4e:	461a      	mov	r2, r3
 801ae50:	f000 ffc4 	bl	801bddc <dhcp_option_byte>
 801ae54:	4603      	mov	r3, r0
 801ae56:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ae58:	7fbb      	ldrb	r3, [r7, #30]
 801ae5a:	3301      	adds	r3, #1
 801ae5c:	77bb      	strb	r3, [r7, #30]
 801ae5e:	7fbb      	ldrb	r3, [r7, #30]
 801ae60:	2b03      	cmp	r3, #3
 801ae62:	d9ed      	bls.n	801ae40 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ae64:	89b8      	ldrh	r0, [r7, #12]
 801ae66:	693b      	ldr	r3, [r7, #16]
 801ae68:	33f0      	adds	r3, #240	; 0xf0
 801ae6a:	697a      	ldr	r2, [r7, #20]
 801ae6c:	4619      	mov	r1, r3
 801ae6e:	f001 fcf9 	bl	801c864 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801ae72:	4b27      	ldr	r3, [pc, #156]	; (801af10 <dhcp_select+0x1e8>)
 801ae74:	6818      	ldr	r0, [r3, #0]
 801ae76:	4b27      	ldr	r3, [pc, #156]	; (801af14 <dhcp_select+0x1ec>)
 801ae78:	9301      	str	r3, [sp, #4]
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	9300      	str	r3, [sp, #0]
 801ae7e:	2343      	movs	r3, #67	; 0x43
 801ae80:	4a25      	ldr	r2, [pc, #148]	; (801af18 <dhcp_select+0x1f0>)
 801ae82:	6979      	ldr	r1, [r7, #20]
 801ae84:	f7ff fba6 	bl	801a5d4 <udp_sendto_if_src>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801ae8c:	6978      	ldr	r0, [r7, #20]
 801ae8e:	f7f8 fb03 	bl	8013498 <pbuf_free>
 801ae92:	e001      	b.n	801ae98 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801ae94:	23ff      	movs	r3, #255	; 0xff
 801ae96:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801ae98:	69bb      	ldr	r3, [r7, #24]
 801ae9a:	799b      	ldrb	r3, [r3, #6]
 801ae9c:	2bff      	cmp	r3, #255	; 0xff
 801ae9e:	d005      	beq.n	801aeac <dhcp_select+0x184>
    dhcp->tries++;
 801aea0:	69bb      	ldr	r3, [r7, #24]
 801aea2:	799b      	ldrb	r3, [r3, #6]
 801aea4:	3301      	adds	r3, #1
 801aea6:	b2da      	uxtb	r2, r3
 801aea8:	69bb      	ldr	r3, [r7, #24]
 801aeaa:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801aeac:	69bb      	ldr	r3, [r7, #24]
 801aeae:	799b      	ldrb	r3, [r3, #6]
 801aeb0:	2b05      	cmp	r3, #5
 801aeb2:	d80d      	bhi.n	801aed0 <dhcp_select+0x1a8>
 801aeb4:	69bb      	ldr	r3, [r7, #24]
 801aeb6:	799b      	ldrb	r3, [r3, #6]
 801aeb8:	461a      	mov	r2, r3
 801aeba:	2301      	movs	r3, #1
 801aebc:	4093      	lsls	r3, r2
 801aebe:	b29b      	uxth	r3, r3
 801aec0:	461a      	mov	r2, r3
 801aec2:	0152      	lsls	r2, r2, #5
 801aec4:	1ad2      	subs	r2, r2, r3
 801aec6:	0092      	lsls	r2, r2, #2
 801aec8:	4413      	add	r3, r2
 801aeca:	00db      	lsls	r3, r3, #3
 801aecc:	b29b      	uxth	r3, r3
 801aece:	e001      	b.n	801aed4 <dhcp_select+0x1ac>
 801aed0:	f64e 2360 	movw	r3, #60000	; 0xea60
 801aed4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801aed6:	89fb      	ldrh	r3, [r7, #14]
 801aed8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801aedc:	4a0f      	ldr	r2, [pc, #60]	; (801af1c <dhcp_select+0x1f4>)
 801aede:	fb82 1203 	smull	r1, r2, r2, r3
 801aee2:	1152      	asrs	r2, r2, #5
 801aee4:	17db      	asrs	r3, r3, #31
 801aee6:	1ad3      	subs	r3, r2, r3
 801aee8:	b29a      	uxth	r2, r3
 801aeea:	69bb      	ldr	r3, [r7, #24]
 801aeec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801aeee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801aef2:	4618      	mov	r0, r3
 801aef4:	3720      	adds	r7, #32
 801aef6:	46bd      	mov	sp, r7
 801aef8:	bdb0      	pop	{r4, r5, r7, pc}
 801aefa:	bf00      	nop
 801aefc:	08024888 	.word	0x08024888
 801af00:	08024934 	.word	0x08024934
 801af04:	080248e8 	.word	0x080248e8
 801af08:	08024950 	.word	0x08024950
 801af0c:	20000348 	.word	0x20000348
 801af10:	20005544 	.word	0x20005544
 801af14:	080256b4 	.word	0x080256b4
 801af18:	080256b8 	.word	0x080256b8
 801af1c:	10624dd3 	.word	0x10624dd3

0801af20 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801af20:	b580      	push	{r7, lr}
 801af22:	b082      	sub	sp, #8
 801af24:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801af26:	4b27      	ldr	r3, [pc, #156]	; (801afc4 <dhcp_coarse_tmr+0xa4>)
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	607b      	str	r3, [r7, #4]
 801af2c:	e042      	b.n	801afb4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af32:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801af34:	683b      	ldr	r3, [r7, #0]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d039      	beq.n	801afae <dhcp_coarse_tmr+0x8e>
 801af3a:	683b      	ldr	r3, [r7, #0]
 801af3c:	795b      	ldrb	r3, [r3, #5]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d035      	beq.n	801afae <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801af42:	683b      	ldr	r3, [r7, #0]
 801af44:	8a9b      	ldrh	r3, [r3, #20]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d012      	beq.n	801af70 <dhcp_coarse_tmr+0x50>
 801af4a:	683b      	ldr	r3, [r7, #0]
 801af4c:	8a5b      	ldrh	r3, [r3, #18]
 801af4e:	3301      	adds	r3, #1
 801af50:	b29a      	uxth	r2, r3
 801af52:	683b      	ldr	r3, [r7, #0]
 801af54:	825a      	strh	r2, [r3, #18]
 801af56:	683b      	ldr	r3, [r7, #0]
 801af58:	8a5a      	ldrh	r2, [r3, #18]
 801af5a:	683b      	ldr	r3, [r7, #0]
 801af5c:	8a9b      	ldrh	r3, [r3, #20]
 801af5e:	429a      	cmp	r2, r3
 801af60:	d106      	bne.n	801af70 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801af62:	6878      	ldr	r0, [r7, #4]
 801af64:	f000 fe52 	bl	801bc0c <dhcp_release_and_stop>
        dhcp_start(netif);
 801af68:	6878      	ldr	r0, [r7, #4]
 801af6a:	f000 f989 	bl	801b280 <dhcp_start>
 801af6e:	e01e      	b.n	801afae <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801af70:	683b      	ldr	r3, [r7, #0]
 801af72:	8a1b      	ldrh	r3, [r3, #16]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d00b      	beq.n	801af90 <dhcp_coarse_tmr+0x70>
 801af78:	683b      	ldr	r3, [r7, #0]
 801af7a:	8a1b      	ldrh	r3, [r3, #16]
 801af7c:	1e5a      	subs	r2, r3, #1
 801af7e:	b291      	uxth	r1, r2
 801af80:	683a      	ldr	r2, [r7, #0]
 801af82:	8211      	strh	r1, [r2, #16]
 801af84:	2b01      	cmp	r3, #1
 801af86:	d103      	bne.n	801af90 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801af88:	6878      	ldr	r0, [r7, #4]
 801af8a:	f000 f8c6 	bl	801b11a <dhcp_t2_timeout>
 801af8e:	e00e      	b.n	801afae <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	89db      	ldrh	r3, [r3, #14]
 801af94:	2b00      	cmp	r3, #0
 801af96:	d00a      	beq.n	801afae <dhcp_coarse_tmr+0x8e>
 801af98:	683b      	ldr	r3, [r7, #0]
 801af9a:	89db      	ldrh	r3, [r3, #14]
 801af9c:	1e5a      	subs	r2, r3, #1
 801af9e:	b291      	uxth	r1, r2
 801afa0:	683a      	ldr	r2, [r7, #0]
 801afa2:	81d1      	strh	r1, [r2, #14]
 801afa4:	2b01      	cmp	r3, #1
 801afa6:	d102      	bne.n	801afae <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801afa8:	6878      	ldr	r0, [r7, #4]
 801afaa:	f000 f888 	bl	801b0be <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	607b      	str	r3, [r7, #4]
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d1b9      	bne.n	801af2e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801afba:	bf00      	nop
 801afbc:	bf00      	nop
 801afbe:	3708      	adds	r7, #8
 801afc0:	46bd      	mov	sp, r7
 801afc2:	bd80      	pop	{r7, pc}
 801afc4:	20016b80 	.word	0x20016b80

0801afc8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801afc8:	b580      	push	{r7, lr}
 801afca:	b082      	sub	sp, #8
 801afcc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801afce:	4b16      	ldr	r3, [pc, #88]	; (801b028 <dhcp_fine_tmr+0x60>)
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	607b      	str	r3, [r7, #4]
 801afd4:	e020      	b.n	801b018 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afda:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801afdc:	683b      	ldr	r3, [r7, #0]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d017      	beq.n	801b012 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801afe2:	683b      	ldr	r3, [r7, #0]
 801afe4:	891b      	ldrh	r3, [r3, #8]
 801afe6:	2b01      	cmp	r3, #1
 801afe8:	d906      	bls.n	801aff8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801afea:	683b      	ldr	r3, [r7, #0]
 801afec:	891b      	ldrh	r3, [r3, #8]
 801afee:	3b01      	subs	r3, #1
 801aff0:	b29a      	uxth	r2, r3
 801aff2:	683b      	ldr	r3, [r7, #0]
 801aff4:	811a      	strh	r2, [r3, #8]
 801aff6:	e00c      	b.n	801b012 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801aff8:	683b      	ldr	r3, [r7, #0]
 801affa:	891b      	ldrh	r3, [r3, #8]
 801affc:	2b01      	cmp	r3, #1
 801affe:	d108      	bne.n	801b012 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801b000:	683b      	ldr	r3, [r7, #0]
 801b002:	891b      	ldrh	r3, [r3, #8]
 801b004:	3b01      	subs	r3, #1
 801b006:	b29a      	uxth	r2, r3
 801b008:	683b      	ldr	r3, [r7, #0]
 801b00a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801b00c:	6878      	ldr	r0, [r7, #4]
 801b00e:	f000 f80d 	bl	801b02c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	607b      	str	r3, [r7, #4]
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d1db      	bne.n	801afd6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801b01e:	bf00      	nop
 801b020:	bf00      	nop
 801b022:	3708      	adds	r7, #8
 801b024:	46bd      	mov	sp, r7
 801b026:	bd80      	pop	{r7, pc}
 801b028:	20016b80 	.word	0x20016b80

0801b02c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b084      	sub	sp, #16
 801b030:	af00      	add	r7, sp, #0
 801b032:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b038:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	795b      	ldrb	r3, [r3, #5]
 801b03e:	2b0c      	cmp	r3, #12
 801b040:	d003      	beq.n	801b04a <dhcp_timeout+0x1e>
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	795b      	ldrb	r3, [r3, #5]
 801b046:	2b06      	cmp	r3, #6
 801b048:	d103      	bne.n	801b052 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801b04a:	6878      	ldr	r0, [r7, #4]
 801b04c:	f000 fa74 	bl	801b538 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801b050:	e031      	b.n	801b0b6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801b052:	68fb      	ldr	r3, [r7, #12]
 801b054:	795b      	ldrb	r3, [r3, #5]
 801b056:	2b01      	cmp	r3, #1
 801b058:	d10e      	bne.n	801b078 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801b05a:	68fb      	ldr	r3, [r7, #12]
 801b05c:	799b      	ldrb	r3, [r3, #6]
 801b05e:	2b05      	cmp	r3, #5
 801b060:	d803      	bhi.n	801b06a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801b062:	6878      	ldr	r0, [r7, #4]
 801b064:	f7ff fe60 	bl	801ad28 <dhcp_select>
}
 801b068:	e025      	b.n	801b0b6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801b06a:	6878      	ldr	r0, [r7, #4]
 801b06c:	f000 fdce 	bl	801bc0c <dhcp_release_and_stop>
      dhcp_start(netif);
 801b070:	6878      	ldr	r0, [r7, #4]
 801b072:	f000 f905 	bl	801b280 <dhcp_start>
}
 801b076:	e01e      	b.n	801b0b6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	795b      	ldrb	r3, [r3, #5]
 801b07c:	2b08      	cmp	r3, #8
 801b07e:	d10b      	bne.n	801b098 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	799b      	ldrb	r3, [r3, #6]
 801b084:	2b01      	cmp	r3, #1
 801b086:	d803      	bhi.n	801b090 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801b088:	6878      	ldr	r0, [r7, #4]
 801b08a:	f7ff fdf3 	bl	801ac74 <dhcp_check>
}
 801b08e:	e012      	b.n	801b0b6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801b090:	6878      	ldr	r0, [r7, #4]
 801b092:	f000 faf3 	bl	801b67c <dhcp_bind>
}
 801b096:	e00e      	b.n	801b0b6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	795b      	ldrb	r3, [r3, #5]
 801b09c:	2b03      	cmp	r3, #3
 801b09e:	d10a      	bne.n	801b0b6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	799b      	ldrb	r3, [r3, #6]
 801b0a4:	2b01      	cmp	r3, #1
 801b0a6:	d803      	bhi.n	801b0b0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801b0a8:	6878      	ldr	r0, [r7, #4]
 801b0aa:	f000 fcf9 	bl	801baa0 <dhcp_reboot>
}
 801b0ae:	e002      	b.n	801b0b6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801b0b0:	6878      	ldr	r0, [r7, #4]
 801b0b2:	f000 fa41 	bl	801b538 <dhcp_discover>
}
 801b0b6:	bf00      	nop
 801b0b8:	3710      	adds	r7, #16
 801b0ba:	46bd      	mov	sp, r7
 801b0bc:	bd80      	pop	{r7, pc}

0801b0be <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801b0be:	b580      	push	{r7, lr}
 801b0c0:	b084      	sub	sp, #16
 801b0c2:	af00      	add	r7, sp, #0
 801b0c4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	795b      	ldrb	r3, [r3, #5]
 801b0d0:	2b01      	cmp	r3, #1
 801b0d2:	d007      	beq.n	801b0e4 <dhcp_t1_timeout+0x26>
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	795b      	ldrb	r3, [r3, #5]
 801b0d8:	2b0a      	cmp	r3, #10
 801b0da:	d003      	beq.n	801b0e4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801b0e0:	2b05      	cmp	r3, #5
 801b0e2:	d116      	bne.n	801b112 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801b0e4:	6878      	ldr	r0, [r7, #4]
 801b0e6:	f000 fba3 	bl	801b830 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	899b      	ldrh	r3, [r3, #12]
 801b0ee:	461a      	mov	r2, r3
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	8a5b      	ldrh	r3, [r3, #18]
 801b0f4:	1ad3      	subs	r3, r2, r3
 801b0f6:	2b01      	cmp	r3, #1
 801b0f8:	dd0b      	ble.n	801b112 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	899b      	ldrh	r3, [r3, #12]
 801b0fe:	461a      	mov	r2, r3
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	8a5b      	ldrh	r3, [r3, #18]
 801b104:	1ad3      	subs	r3, r2, r3
 801b106:	0fda      	lsrs	r2, r3, #31
 801b108:	4413      	add	r3, r2
 801b10a:	105b      	asrs	r3, r3, #1
 801b10c:	b29a      	uxth	r2, r3
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801b112:	bf00      	nop
 801b114:	3710      	adds	r7, #16
 801b116:	46bd      	mov	sp, r7
 801b118:	bd80      	pop	{r7, pc}

0801b11a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801b11a:	b580      	push	{r7, lr}
 801b11c:	b084      	sub	sp, #16
 801b11e:	af00      	add	r7, sp, #0
 801b120:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b126:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	795b      	ldrb	r3, [r3, #5]
 801b12c:	2b01      	cmp	r3, #1
 801b12e:	d00b      	beq.n	801b148 <dhcp_t2_timeout+0x2e>
 801b130:	68fb      	ldr	r3, [r7, #12]
 801b132:	795b      	ldrb	r3, [r3, #5]
 801b134:	2b0a      	cmp	r3, #10
 801b136:	d007      	beq.n	801b148 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801b138:	68fb      	ldr	r3, [r7, #12]
 801b13a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801b13c:	2b05      	cmp	r3, #5
 801b13e:	d003      	beq.n	801b148 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	795b      	ldrb	r3, [r3, #5]
 801b144:	2b04      	cmp	r3, #4
 801b146:	d116      	bne.n	801b176 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801b148:	6878      	ldr	r0, [r7, #4]
 801b14a:	f000 fc0d 	bl	801b968 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	8a9b      	ldrh	r3, [r3, #20]
 801b152:	461a      	mov	r2, r3
 801b154:	68fb      	ldr	r3, [r7, #12]
 801b156:	8a5b      	ldrh	r3, [r3, #18]
 801b158:	1ad3      	subs	r3, r2, r3
 801b15a:	2b01      	cmp	r3, #1
 801b15c:	dd0b      	ble.n	801b176 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801b15e:	68fb      	ldr	r3, [r7, #12]
 801b160:	8a9b      	ldrh	r3, [r3, #20]
 801b162:	461a      	mov	r2, r3
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	8a5b      	ldrh	r3, [r3, #18]
 801b168:	1ad3      	subs	r3, r2, r3
 801b16a:	0fda      	lsrs	r2, r3, #31
 801b16c:	4413      	add	r3, r2
 801b16e:	105b      	asrs	r3, r3, #1
 801b170:	b29a      	uxth	r2, r3
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801b176:	bf00      	nop
 801b178:	3710      	adds	r7, #16
 801b17a:	46bd      	mov	sp, r7
 801b17c:	bd80      	pop	{r7, pc}
	...

0801b180 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801b180:	b580      	push	{r7, lr}
 801b182:	b086      	sub	sp, #24
 801b184:	af00      	add	r7, sp, #0
 801b186:	6078      	str	r0, [r7, #4]
 801b188:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b18e:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801b190:	693b      	ldr	r3, [r7, #16]
 801b192:	2200      	movs	r2, #0
 801b194:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801b196:	693b      	ldr	r3, [r7, #16]
 801b198:	2200      	movs	r2, #0
 801b19a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801b19c:	4b36      	ldr	r3, [pc, #216]	; (801b278 <dhcp_handle_ack+0xf8>)
 801b19e:	78db      	ldrb	r3, [r3, #3]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d003      	beq.n	801b1ac <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801b1a4:	4b35      	ldr	r3, [pc, #212]	; (801b27c <dhcp_handle_ack+0xfc>)
 801b1a6:	68da      	ldr	r2, [r3, #12]
 801b1a8:	693b      	ldr	r3, [r7, #16]
 801b1aa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801b1ac:	4b32      	ldr	r3, [pc, #200]	; (801b278 <dhcp_handle_ack+0xf8>)
 801b1ae:	791b      	ldrb	r3, [r3, #4]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d004      	beq.n	801b1be <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801b1b4:	4b31      	ldr	r3, [pc, #196]	; (801b27c <dhcp_handle_ack+0xfc>)
 801b1b6:	691a      	ldr	r2, [r3, #16]
 801b1b8:	693b      	ldr	r3, [r7, #16]
 801b1ba:	62da      	str	r2, [r3, #44]	; 0x2c
 801b1bc:	e004      	b.n	801b1c8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801b1be:	693b      	ldr	r3, [r7, #16]
 801b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1c2:	085a      	lsrs	r2, r3, #1
 801b1c4:	693b      	ldr	r3, [r7, #16]
 801b1c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801b1c8:	4b2b      	ldr	r3, [pc, #172]	; (801b278 <dhcp_handle_ack+0xf8>)
 801b1ca:	795b      	ldrb	r3, [r3, #5]
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d004      	beq.n	801b1da <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801b1d0:	4b2a      	ldr	r3, [pc, #168]	; (801b27c <dhcp_handle_ack+0xfc>)
 801b1d2:	695a      	ldr	r2, [r3, #20]
 801b1d4:	693b      	ldr	r3, [r7, #16]
 801b1d6:	631a      	str	r2, [r3, #48]	; 0x30
 801b1d8:	e007      	b.n	801b1ea <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801b1da:	693b      	ldr	r3, [r7, #16]
 801b1dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b1de:	4613      	mov	r3, r2
 801b1e0:	00db      	lsls	r3, r3, #3
 801b1e2:	1a9b      	subs	r3, r3, r2
 801b1e4:	08da      	lsrs	r2, r3, #3
 801b1e6:	693b      	ldr	r3, [r7, #16]
 801b1e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801b1ea:	683b      	ldr	r3, [r7, #0]
 801b1ec:	691a      	ldr	r2, [r3, #16]
 801b1ee:	693b      	ldr	r3, [r7, #16]
 801b1f0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801b1f2:	4b21      	ldr	r3, [pc, #132]	; (801b278 <dhcp_handle_ack+0xf8>)
 801b1f4:	799b      	ldrb	r3, [r3, #6]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d00b      	beq.n	801b212 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801b1fa:	4b20      	ldr	r3, [pc, #128]	; (801b27c <dhcp_handle_ack+0xfc>)
 801b1fc:	699b      	ldr	r3, [r3, #24]
 801b1fe:	4618      	mov	r0, r3
 801b200:	f7f5 fdd1 	bl	8010da6 <lwip_htonl>
 801b204:	4602      	mov	r2, r0
 801b206:	693b      	ldr	r3, [r7, #16]
 801b208:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801b20a:	693b      	ldr	r3, [r7, #16]
 801b20c:	2201      	movs	r2, #1
 801b20e:	71da      	strb	r2, [r3, #7]
 801b210:	e002      	b.n	801b218 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801b212:	693b      	ldr	r3, [r7, #16]
 801b214:	2200      	movs	r2, #0
 801b216:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801b218:	4b17      	ldr	r3, [pc, #92]	; (801b278 <dhcp_handle_ack+0xf8>)
 801b21a:	79db      	ldrb	r3, [r3, #7]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d007      	beq.n	801b230 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801b220:	4b16      	ldr	r3, [pc, #88]	; (801b27c <dhcp_handle_ack+0xfc>)
 801b222:	69db      	ldr	r3, [r3, #28]
 801b224:	4618      	mov	r0, r3
 801b226:	f7f5 fdbe 	bl	8010da6 <lwip_htonl>
 801b22a:	4602      	mov	r2, r0
 801b22c:	693b      	ldr	r3, [r7, #16]
 801b22e:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801b230:	2300      	movs	r3, #0
 801b232:	75fb      	strb	r3, [r7, #23]
 801b234:	e013      	b.n	801b25e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801b236:	7dfb      	ldrb	r3, [r7, #23]
 801b238:	3308      	adds	r3, #8
 801b23a:	4a10      	ldr	r2, [pc, #64]	; (801b27c <dhcp_handle_ack+0xfc>)
 801b23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b240:	4618      	mov	r0, r3
 801b242:	f7f5 fdb0 	bl	8010da6 <lwip_htonl>
 801b246:	4603      	mov	r3, r0
 801b248:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 801b24a:	f107 020c 	add.w	r2, r7, #12
 801b24e:	7dfb      	ldrb	r3, [r7, #23]
 801b250:	4611      	mov	r1, r2
 801b252:	4618      	mov	r0, r3
 801b254:	f7f5 fe02 	bl	8010e5c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801b258:	7dfb      	ldrb	r3, [r7, #23]
 801b25a:	3301      	adds	r3, #1
 801b25c:	75fb      	strb	r3, [r7, #23]
 801b25e:	7dfb      	ldrb	r3, [r7, #23]
 801b260:	2b01      	cmp	r3, #1
 801b262:	d805      	bhi.n	801b270 <dhcp_handle_ack+0xf0>
 801b264:	7dfb      	ldrb	r3, [r7, #23]
 801b266:	3308      	adds	r3, #8
 801b268:	4a03      	ldr	r2, [pc, #12]	; (801b278 <dhcp_handle_ack+0xf8>)
 801b26a:	5cd3      	ldrb	r3, [r2, r3]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d1e2      	bne.n	801b236 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801b270:	bf00      	nop
 801b272:	3718      	adds	r7, #24
 801b274:	46bd      	mov	sp, r7
 801b276:	bd80      	pop	{r7, pc}
 801b278:	20016bac 	.word	0x20016bac
 801b27c:	20016bb8 	.word	0x20016bb8

0801b280 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801b280:	b580      	push	{r7, lr}
 801b282:	b084      	sub	sp, #16
 801b284:	af00      	add	r7, sp, #0
 801b286:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d109      	bne.n	801b2a2 <dhcp_start+0x22>
 801b28e:	4b37      	ldr	r3, [pc, #220]	; (801b36c <dhcp_start+0xec>)
 801b290:	f240 22e7 	movw	r2, #743	; 0x2e7
 801b294:	4936      	ldr	r1, [pc, #216]	; (801b370 <dhcp_start+0xf0>)
 801b296:	4837      	ldr	r0, [pc, #220]	; (801b374 <dhcp_start+0xf4>)
 801b298:	f004 fb28 	bl	801f8ec <iprintf>
 801b29c:	f06f 030f 	mvn.w	r3, #15
 801b2a0:	e060      	b.n	801b364 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b2a8:	f003 0301 	and.w	r3, r3, #1
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d109      	bne.n	801b2c4 <dhcp_start+0x44>
 801b2b0:	4b2e      	ldr	r3, [pc, #184]	; (801b36c <dhcp_start+0xec>)
 801b2b2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801b2b6:	4930      	ldr	r1, [pc, #192]	; (801b378 <dhcp_start+0xf8>)
 801b2b8:	482e      	ldr	r0, [pc, #184]	; (801b374 <dhcp_start+0xf4>)
 801b2ba:	f004 fb17 	bl	801f8ec <iprintf>
 801b2be:	f06f 030f 	mvn.w	r3, #15
 801b2c2:	e04f      	b.n	801b364 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2c8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b2ce:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801b2d2:	d202      	bcs.n	801b2da <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801b2d4:	f04f 33ff 	mov.w	r3, #4294967295
 801b2d8:	e044      	b.n	801b364 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801b2da:	68fb      	ldr	r3, [r7, #12]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d10d      	bne.n	801b2fc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801b2e0:	2034      	movs	r0, #52	; 0x34
 801b2e2:	f7f7 f855 	bl	8012390 <mem_malloc>
 801b2e6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801b2e8:	68fb      	ldr	r3, [r7, #12]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d102      	bne.n	801b2f4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801b2ee:	f04f 33ff 	mov.w	r3, #4294967295
 801b2f2:	e037      	b.n	801b364 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	68fa      	ldr	r2, [r7, #12]
 801b2f8:	625a      	str	r2, [r3, #36]	; 0x24
 801b2fa:	e005      	b.n	801b308 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	791b      	ldrb	r3, [r3, #4]
 801b300:	2b00      	cmp	r3, #0
 801b302:	d001      	beq.n	801b308 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801b304:	f7ff fc72 	bl	801abec <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801b308:	2234      	movs	r2, #52	; 0x34
 801b30a:	2100      	movs	r1, #0
 801b30c:	68f8      	ldr	r0, [r7, #12]
 801b30e:	f004 fa2b 	bl	801f768 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801b312:	f7ff fc19 	bl	801ab48 <dhcp_inc_pcb_refcount>
 801b316:	4603      	mov	r3, r0
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d002      	beq.n	801b322 <dhcp_start+0xa2>
    return ERR_MEM;
 801b31c:	f04f 33ff 	mov.w	r3, #4294967295
 801b320:	e020      	b.n	801b364 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	2201      	movs	r2, #1
 801b326:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b32e:	f003 0304 	and.w	r3, r3, #4
 801b332:	2b00      	cmp	r3, #0
 801b334:	d105      	bne.n	801b342 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801b336:	2102      	movs	r1, #2
 801b338:	68f8      	ldr	r0, [r7, #12]
 801b33a:	f000 fd01 	bl	801bd40 <dhcp_set_state>
    return ERR_OK;
 801b33e:	2300      	movs	r3, #0
 801b340:	e010      	b.n	801b364 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801b342:	6878      	ldr	r0, [r7, #4]
 801b344:	f000 f8f8 	bl	801b538 <dhcp_discover>
 801b348:	4603      	mov	r3, r0
 801b34a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801b34c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d005      	beq.n	801b360 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801b354:	6878      	ldr	r0, [r7, #4]
 801b356:	f000 fc59 	bl	801bc0c <dhcp_release_and_stop>
    return ERR_MEM;
 801b35a:	f04f 33ff 	mov.w	r3, #4294967295
 801b35e:	e001      	b.n	801b364 <dhcp_start+0xe4>
  }
  return result;
 801b360:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b364:	4618      	mov	r0, r3
 801b366:	3710      	adds	r7, #16
 801b368:	46bd      	mov	sp, r7
 801b36a:	bd80      	pop	{r7, pc}
 801b36c:	08024888 	.word	0x08024888
 801b370:	0802496c 	.word	0x0802496c
 801b374:	080248e8 	.word	0x080248e8
 801b378:	080249b0 	.word	0x080249b0

0801b37c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b084      	sub	sp, #16
 801b380:	af00      	add	r7, sp, #0
 801b382:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b388:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d025      	beq.n	801b3dc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	795b      	ldrb	r3, [r3, #5]
 801b394:	2b0a      	cmp	r3, #10
 801b396:	d008      	beq.n	801b3aa <dhcp_network_changed+0x2e>
 801b398:	2b0a      	cmp	r3, #10
 801b39a:	dc0d      	bgt.n	801b3b8 <dhcp_network_changed+0x3c>
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d01f      	beq.n	801b3e0 <dhcp_network_changed+0x64>
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	db09      	blt.n	801b3b8 <dhcp_network_changed+0x3c>
 801b3a4:	3b03      	subs	r3, #3
 801b3a6:	2b02      	cmp	r3, #2
 801b3a8:	d806      	bhi.n	801b3b8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	2200      	movs	r2, #0
 801b3ae:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801b3b0:	6878      	ldr	r0, [r7, #4]
 801b3b2:	f000 fb75 	bl	801baa0 <dhcp_reboot>
      break;
 801b3b6:	e014      	b.n	801b3e2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801b3b8:	68fb      	ldr	r3, [r7, #12]
 801b3ba:	795b      	ldrb	r3, [r3, #5]
 801b3bc:	2b0c      	cmp	r3, #12
 801b3be:	d906      	bls.n	801b3ce <dhcp_network_changed+0x52>
 801b3c0:	4b09      	ldr	r3, [pc, #36]	; (801b3e8 <dhcp_network_changed+0x6c>)
 801b3c2:	f240 326d 	movw	r2, #877	; 0x36d
 801b3c6:	4909      	ldr	r1, [pc, #36]	; (801b3ec <dhcp_network_changed+0x70>)
 801b3c8:	4809      	ldr	r0, [pc, #36]	; (801b3f0 <dhcp_network_changed+0x74>)
 801b3ca:	f004 fa8f 	bl	801f8ec <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801b3ce:	68fb      	ldr	r3, [r7, #12]
 801b3d0:	2200      	movs	r2, #0
 801b3d2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801b3d4:	6878      	ldr	r0, [r7, #4]
 801b3d6:	f000 f8af 	bl	801b538 <dhcp_discover>
      break;
 801b3da:	e002      	b.n	801b3e2 <dhcp_network_changed+0x66>
    return;
 801b3dc:	bf00      	nop
 801b3de:	e000      	b.n	801b3e2 <dhcp_network_changed+0x66>
      break;
 801b3e0:	bf00      	nop
  }
}
 801b3e2:	3710      	adds	r7, #16
 801b3e4:	46bd      	mov	sp, r7
 801b3e6:	bd80      	pop	{r7, pc}
 801b3e8:	08024888 	.word	0x08024888
 801b3ec:	080249d4 	.word	0x080249d4
 801b3f0:	080248e8 	.word	0x080248e8

0801b3f4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b084      	sub	sp, #16
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
 801b3fc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d107      	bne.n	801b414 <dhcp_arp_reply+0x20>
 801b404:	4b0e      	ldr	r3, [pc, #56]	; (801b440 <dhcp_arp_reply+0x4c>)
 801b406:	f240 328b 	movw	r2, #907	; 0x38b
 801b40a:	490e      	ldr	r1, [pc, #56]	; (801b444 <dhcp_arp_reply+0x50>)
 801b40c:	480e      	ldr	r0, [pc, #56]	; (801b448 <dhcp_arp_reply+0x54>)
 801b40e:	f004 fa6d 	bl	801f8ec <iprintf>
 801b412:	e012      	b.n	801b43a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b418:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801b41a:	68fb      	ldr	r3, [r7, #12]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d00c      	beq.n	801b43a <dhcp_arp_reply+0x46>
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	795b      	ldrb	r3, [r3, #5]
 801b424:	2b08      	cmp	r3, #8
 801b426:	d108      	bne.n	801b43a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801b428:	683b      	ldr	r3, [r7, #0]
 801b42a:	681a      	ldr	r2, [r3, #0]
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	69db      	ldr	r3, [r3, #28]
 801b430:	429a      	cmp	r2, r3
 801b432:	d102      	bne.n	801b43a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801b434:	6878      	ldr	r0, [r7, #4]
 801b436:	f000 f809 	bl	801b44c <dhcp_decline>
    }
  }
}
 801b43a:	3710      	adds	r7, #16
 801b43c:	46bd      	mov	sp, r7
 801b43e:	bd80      	pop	{r7, pc}
 801b440:	08024888 	.word	0x08024888
 801b444:	0802496c 	.word	0x0802496c
 801b448:	080248e8 	.word	0x080248e8

0801b44c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801b44c:	b5b0      	push	{r4, r5, r7, lr}
 801b44e:	b08a      	sub	sp, #40	; 0x28
 801b450:	af02      	add	r7, sp, #8
 801b452:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b458:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801b45a:	210c      	movs	r1, #12
 801b45c:	69b8      	ldr	r0, [r7, #24]
 801b45e:	f000 fc6f 	bl	801bd40 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801b462:	f107 030c 	add.w	r3, r7, #12
 801b466:	2204      	movs	r2, #4
 801b468:	69b9      	ldr	r1, [r7, #24]
 801b46a:	6878      	ldr	r0, [r7, #4]
 801b46c:	f001 f924 	bl	801c6b8 <dhcp_create_msg>
 801b470:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b472:	697b      	ldr	r3, [r7, #20]
 801b474:	2b00      	cmp	r3, #0
 801b476:	d035      	beq.n	801b4e4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b478:	697b      	ldr	r3, [r7, #20]
 801b47a:	685b      	ldr	r3, [r3, #4]
 801b47c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801b47e:	89b8      	ldrh	r0, [r7, #12]
 801b480:	693b      	ldr	r3, [r7, #16]
 801b482:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b486:	2304      	movs	r3, #4
 801b488:	2232      	movs	r2, #50	; 0x32
 801b48a:	f000 fc73 	bl	801bd74 <dhcp_option>
 801b48e:	4603      	mov	r3, r0
 801b490:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801b492:	89bc      	ldrh	r4, [r7, #12]
 801b494:	693b      	ldr	r3, [r7, #16]
 801b496:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b49a:	69bb      	ldr	r3, [r7, #24]
 801b49c:	69db      	ldr	r3, [r3, #28]
 801b49e:	4618      	mov	r0, r3
 801b4a0:	f7f5 fc81 	bl	8010da6 <lwip_htonl>
 801b4a4:	4603      	mov	r3, r0
 801b4a6:	461a      	mov	r2, r3
 801b4a8:	4629      	mov	r1, r5
 801b4aa:	4620      	mov	r0, r4
 801b4ac:	f000 fcee 	bl	801be8c <dhcp_option_long>
 801b4b0:	4603      	mov	r3, r0
 801b4b2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b4b4:	89b8      	ldrh	r0, [r7, #12]
 801b4b6:	693b      	ldr	r3, [r7, #16]
 801b4b8:	33f0      	adds	r3, #240	; 0xf0
 801b4ba:	697a      	ldr	r2, [r7, #20]
 801b4bc:	4619      	mov	r1, r3
 801b4be:	f001 f9d1 	bl	801c864 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801b4c2:	4b19      	ldr	r3, [pc, #100]	; (801b528 <dhcp_decline+0xdc>)
 801b4c4:	6818      	ldr	r0, [r3, #0]
 801b4c6:	4b19      	ldr	r3, [pc, #100]	; (801b52c <dhcp_decline+0xe0>)
 801b4c8:	9301      	str	r3, [sp, #4]
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	9300      	str	r3, [sp, #0]
 801b4ce:	2343      	movs	r3, #67	; 0x43
 801b4d0:	4a17      	ldr	r2, [pc, #92]	; (801b530 <dhcp_decline+0xe4>)
 801b4d2:	6979      	ldr	r1, [r7, #20]
 801b4d4:	f7ff f87e 	bl	801a5d4 <udp_sendto_if_src>
 801b4d8:	4603      	mov	r3, r0
 801b4da:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b4dc:	6978      	ldr	r0, [r7, #20]
 801b4de:	f7f7 ffdb 	bl	8013498 <pbuf_free>
 801b4e2:	e001      	b.n	801b4e8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b4e4:	23ff      	movs	r3, #255	; 0xff
 801b4e6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b4e8:	69bb      	ldr	r3, [r7, #24]
 801b4ea:	799b      	ldrb	r3, [r3, #6]
 801b4ec:	2bff      	cmp	r3, #255	; 0xff
 801b4ee:	d005      	beq.n	801b4fc <dhcp_decline+0xb0>
    dhcp->tries++;
 801b4f0:	69bb      	ldr	r3, [r7, #24]
 801b4f2:	799b      	ldrb	r3, [r3, #6]
 801b4f4:	3301      	adds	r3, #1
 801b4f6:	b2da      	uxtb	r2, r3
 801b4f8:	69bb      	ldr	r3, [r7, #24]
 801b4fa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801b4fc:	f242 7310 	movw	r3, #10000	; 0x2710
 801b500:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b502:	89fb      	ldrh	r3, [r7, #14]
 801b504:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b508:	4a0a      	ldr	r2, [pc, #40]	; (801b534 <dhcp_decline+0xe8>)
 801b50a:	fb82 1203 	smull	r1, r2, r2, r3
 801b50e:	1152      	asrs	r2, r2, #5
 801b510:	17db      	asrs	r3, r3, #31
 801b512:	1ad3      	subs	r3, r2, r3
 801b514:	b29a      	uxth	r2, r3
 801b516:	69bb      	ldr	r3, [r7, #24]
 801b518:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b51a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b51e:	4618      	mov	r0, r3
 801b520:	3720      	adds	r7, #32
 801b522:	46bd      	mov	sp, r7
 801b524:	bdb0      	pop	{r4, r5, r7, pc}
 801b526:	bf00      	nop
 801b528:	20005544 	.word	0x20005544
 801b52c:	080256b4 	.word	0x080256b4
 801b530:	080256b8 	.word	0x080256b8
 801b534:	10624dd3 	.word	0x10624dd3

0801b538 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801b538:	b580      	push	{r7, lr}
 801b53a:	b08a      	sub	sp, #40	; 0x28
 801b53c:	af02      	add	r7, sp, #8
 801b53e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b544:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801b546:	2300      	movs	r3, #0
 801b548:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801b54a:	69bb      	ldr	r3, [r7, #24]
 801b54c:	2200      	movs	r2, #0
 801b54e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801b550:	2106      	movs	r1, #6
 801b552:	69b8      	ldr	r0, [r7, #24]
 801b554:	f000 fbf4 	bl	801bd40 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801b558:	f107 0308 	add.w	r3, r7, #8
 801b55c:	2201      	movs	r2, #1
 801b55e:	69b9      	ldr	r1, [r7, #24]
 801b560:	6878      	ldr	r0, [r7, #4]
 801b562:	f001 f8a9 	bl	801c6b8 <dhcp_create_msg>
 801b566:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801b568:	693b      	ldr	r3, [r7, #16]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d04b      	beq.n	801b606 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b56e:	693b      	ldr	r3, [r7, #16]
 801b570:	685b      	ldr	r3, [r3, #4]
 801b572:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b574:	8938      	ldrh	r0, [r7, #8]
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b57c:	2302      	movs	r3, #2
 801b57e:	2239      	movs	r2, #57	; 0x39
 801b580:	f000 fbf8 	bl	801bd74 <dhcp_option>
 801b584:	4603      	mov	r3, r0
 801b586:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801b588:	8938      	ldrh	r0, [r7, #8]
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b594:	461a      	mov	r2, r3
 801b596:	f000 fc47 	bl	801be28 <dhcp_option_short>
 801b59a:	4603      	mov	r3, r0
 801b59c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b59e:	8938      	ldrh	r0, [r7, #8]
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b5a6:	2304      	movs	r3, #4
 801b5a8:	2237      	movs	r2, #55	; 0x37
 801b5aa:	f000 fbe3 	bl	801bd74 <dhcp_option>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	77fb      	strb	r3, [r7, #31]
 801b5b6:	e00e      	b.n	801b5d6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b5b8:	8938      	ldrh	r0, [r7, #8]
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b5c0:	7ffb      	ldrb	r3, [r7, #31]
 801b5c2:	4a29      	ldr	r2, [pc, #164]	; (801b668 <dhcp_discover+0x130>)
 801b5c4:	5cd3      	ldrb	r3, [r2, r3]
 801b5c6:	461a      	mov	r2, r3
 801b5c8:	f000 fc08 	bl	801bddc <dhcp_option_byte>
 801b5cc:	4603      	mov	r3, r0
 801b5ce:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b5d0:	7ffb      	ldrb	r3, [r7, #31]
 801b5d2:	3301      	adds	r3, #1
 801b5d4:	77fb      	strb	r3, [r7, #31]
 801b5d6:	7ffb      	ldrb	r3, [r7, #31]
 801b5d8:	2b03      	cmp	r3, #3
 801b5da:	d9ed      	bls.n	801b5b8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b5dc:	8938      	ldrh	r0, [r7, #8]
 801b5de:	68fb      	ldr	r3, [r7, #12]
 801b5e0:	33f0      	adds	r3, #240	; 0xf0
 801b5e2:	693a      	ldr	r2, [r7, #16]
 801b5e4:	4619      	mov	r1, r3
 801b5e6:	f001 f93d 	bl	801c864 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801b5ea:	4b20      	ldr	r3, [pc, #128]	; (801b66c <dhcp_discover+0x134>)
 801b5ec:	6818      	ldr	r0, [r3, #0]
 801b5ee:	4b20      	ldr	r3, [pc, #128]	; (801b670 <dhcp_discover+0x138>)
 801b5f0:	9301      	str	r3, [sp, #4]
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	9300      	str	r3, [sp, #0]
 801b5f6:	2343      	movs	r3, #67	; 0x43
 801b5f8:	4a1e      	ldr	r2, [pc, #120]	; (801b674 <dhcp_discover+0x13c>)
 801b5fa:	6939      	ldr	r1, [r7, #16]
 801b5fc:	f7fe ffea 	bl	801a5d4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801b600:	6938      	ldr	r0, [r7, #16]
 801b602:	f7f7 ff49 	bl	8013498 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801b606:	69bb      	ldr	r3, [r7, #24]
 801b608:	799b      	ldrb	r3, [r3, #6]
 801b60a:	2bff      	cmp	r3, #255	; 0xff
 801b60c:	d005      	beq.n	801b61a <dhcp_discover+0xe2>
    dhcp->tries++;
 801b60e:	69bb      	ldr	r3, [r7, #24]
 801b610:	799b      	ldrb	r3, [r3, #6]
 801b612:	3301      	adds	r3, #1
 801b614:	b2da      	uxtb	r2, r3
 801b616:	69bb      	ldr	r3, [r7, #24]
 801b618:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801b61a:	69bb      	ldr	r3, [r7, #24]
 801b61c:	799b      	ldrb	r3, [r3, #6]
 801b61e:	2b05      	cmp	r3, #5
 801b620:	d80d      	bhi.n	801b63e <dhcp_discover+0x106>
 801b622:	69bb      	ldr	r3, [r7, #24]
 801b624:	799b      	ldrb	r3, [r3, #6]
 801b626:	461a      	mov	r2, r3
 801b628:	2301      	movs	r3, #1
 801b62a:	4093      	lsls	r3, r2
 801b62c:	b29b      	uxth	r3, r3
 801b62e:	461a      	mov	r2, r3
 801b630:	0152      	lsls	r2, r2, #5
 801b632:	1ad2      	subs	r2, r2, r3
 801b634:	0092      	lsls	r2, r2, #2
 801b636:	4413      	add	r3, r2
 801b638:	00db      	lsls	r3, r3, #3
 801b63a:	b29b      	uxth	r3, r3
 801b63c:	e001      	b.n	801b642 <dhcp_discover+0x10a>
 801b63e:	f64e 2360 	movw	r3, #60000	; 0xea60
 801b642:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b644:	897b      	ldrh	r3, [r7, #10]
 801b646:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b64a:	4a0b      	ldr	r2, [pc, #44]	; (801b678 <dhcp_discover+0x140>)
 801b64c:	fb82 1203 	smull	r1, r2, r2, r3
 801b650:	1152      	asrs	r2, r2, #5
 801b652:	17db      	asrs	r3, r3, #31
 801b654:	1ad3      	subs	r3, r2, r3
 801b656:	b29a      	uxth	r2, r3
 801b658:	69bb      	ldr	r3, [r7, #24]
 801b65a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b65c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b660:	4618      	mov	r0, r3
 801b662:	3720      	adds	r7, #32
 801b664:	46bd      	mov	sp, r7
 801b666:	bd80      	pop	{r7, pc}
 801b668:	20000348 	.word	0x20000348
 801b66c:	20005544 	.word	0x20005544
 801b670:	080256b4 	.word	0x080256b4
 801b674:	080256b8 	.word	0x080256b8
 801b678:	10624dd3 	.word	0x10624dd3

0801b67c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801b67c:	b580      	push	{r7, lr}
 801b67e:	b088      	sub	sp, #32
 801b680:	af00      	add	r7, sp, #0
 801b682:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	2b00      	cmp	r3, #0
 801b688:	d107      	bne.n	801b69a <dhcp_bind+0x1e>
 801b68a:	4b64      	ldr	r3, [pc, #400]	; (801b81c <dhcp_bind+0x1a0>)
 801b68c:	f240 4215 	movw	r2, #1045	; 0x415
 801b690:	4963      	ldr	r1, [pc, #396]	; (801b820 <dhcp_bind+0x1a4>)
 801b692:	4864      	ldr	r0, [pc, #400]	; (801b824 <dhcp_bind+0x1a8>)
 801b694:	f004 f92a 	bl	801f8ec <iprintf>
 801b698:	e0bc      	b.n	801b814 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b69e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801b6a0:	69bb      	ldr	r3, [r7, #24]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d107      	bne.n	801b6b6 <dhcp_bind+0x3a>
 801b6a6:	4b5d      	ldr	r3, [pc, #372]	; (801b81c <dhcp_bind+0x1a0>)
 801b6a8:	f240 4217 	movw	r2, #1047	; 0x417
 801b6ac:	495e      	ldr	r1, [pc, #376]	; (801b828 <dhcp_bind+0x1ac>)
 801b6ae:	485d      	ldr	r0, [pc, #372]	; (801b824 <dhcp_bind+0x1a8>)
 801b6b0:	f004 f91c 	bl	801f8ec <iprintf>
 801b6b4:	e0ae      	b.n	801b814 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801b6b6:	69bb      	ldr	r3, [r7, #24]
 801b6b8:	2200      	movs	r2, #0
 801b6ba:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801b6bc:	69bb      	ldr	r3, [r7, #24]
 801b6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b6c4:	d019      	beq.n	801b6fa <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801b6c6:	69bb      	ldr	r3, [r7, #24]
 801b6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6ca:	331e      	adds	r3, #30
 801b6cc:	4a57      	ldr	r2, [pc, #348]	; (801b82c <dhcp_bind+0x1b0>)
 801b6ce:	fba2 2303 	umull	r2, r3, r2, r3
 801b6d2:	095b      	lsrs	r3, r3, #5
 801b6d4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801b6d6:	69fb      	ldr	r3, [r7, #28]
 801b6d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b6dc:	d302      	bcc.n	801b6e4 <dhcp_bind+0x68>
      timeout = 0xffff;
 801b6de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b6e2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801b6e4:	69fb      	ldr	r3, [r7, #28]
 801b6e6:	b29a      	uxth	r2, r3
 801b6e8:	69bb      	ldr	r3, [r7, #24]
 801b6ea:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801b6ec:	69bb      	ldr	r3, [r7, #24]
 801b6ee:	8a9b      	ldrh	r3, [r3, #20]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d102      	bne.n	801b6fa <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801b6f4:	69bb      	ldr	r3, [r7, #24]
 801b6f6:	2201      	movs	r2, #1
 801b6f8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801b6fa:	69bb      	ldr	r3, [r7, #24]
 801b6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b702:	d01d      	beq.n	801b740 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801b704:	69bb      	ldr	r3, [r7, #24]
 801b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b708:	331e      	adds	r3, #30
 801b70a:	4a48      	ldr	r2, [pc, #288]	; (801b82c <dhcp_bind+0x1b0>)
 801b70c:	fba2 2303 	umull	r2, r3, r2, r3
 801b710:	095b      	lsrs	r3, r3, #5
 801b712:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801b714:	69fb      	ldr	r3, [r7, #28]
 801b716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b71a:	d302      	bcc.n	801b722 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801b71c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b720:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801b722:	69fb      	ldr	r3, [r7, #28]
 801b724:	b29a      	uxth	r2, r3
 801b726:	69bb      	ldr	r3, [r7, #24]
 801b728:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801b72a:	69bb      	ldr	r3, [r7, #24]
 801b72c:	895b      	ldrh	r3, [r3, #10]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d102      	bne.n	801b738 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801b732:	69bb      	ldr	r3, [r7, #24]
 801b734:	2201      	movs	r2, #1
 801b736:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801b738:	69bb      	ldr	r3, [r7, #24]
 801b73a:	895a      	ldrh	r2, [r3, #10]
 801b73c:	69bb      	ldr	r3, [r7, #24]
 801b73e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801b740:	69bb      	ldr	r3, [r7, #24]
 801b742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b744:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b748:	d01d      	beq.n	801b786 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801b74a:	69bb      	ldr	r3, [r7, #24]
 801b74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b74e:	331e      	adds	r3, #30
 801b750:	4a36      	ldr	r2, [pc, #216]	; (801b82c <dhcp_bind+0x1b0>)
 801b752:	fba2 2303 	umull	r2, r3, r2, r3
 801b756:	095b      	lsrs	r3, r3, #5
 801b758:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801b75a:	69fb      	ldr	r3, [r7, #28]
 801b75c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b760:	d302      	bcc.n	801b768 <dhcp_bind+0xec>
      timeout = 0xffff;
 801b762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b766:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801b768:	69fb      	ldr	r3, [r7, #28]
 801b76a:	b29a      	uxth	r2, r3
 801b76c:	69bb      	ldr	r3, [r7, #24]
 801b76e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801b770:	69bb      	ldr	r3, [r7, #24]
 801b772:	899b      	ldrh	r3, [r3, #12]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d102      	bne.n	801b77e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801b778:	69bb      	ldr	r3, [r7, #24]
 801b77a:	2201      	movs	r2, #1
 801b77c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801b77e:	69bb      	ldr	r3, [r7, #24]
 801b780:	899a      	ldrh	r2, [r3, #12]
 801b782:	69bb      	ldr	r3, [r7, #24]
 801b784:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801b786:	69bb      	ldr	r3, [r7, #24]
 801b788:	895a      	ldrh	r2, [r3, #10]
 801b78a:	69bb      	ldr	r3, [r7, #24]
 801b78c:	899b      	ldrh	r3, [r3, #12]
 801b78e:	429a      	cmp	r2, r3
 801b790:	d306      	bcc.n	801b7a0 <dhcp_bind+0x124>
 801b792:	69bb      	ldr	r3, [r7, #24]
 801b794:	899b      	ldrh	r3, [r3, #12]
 801b796:	2b00      	cmp	r3, #0
 801b798:	d002      	beq.n	801b7a0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801b79a:	69bb      	ldr	r3, [r7, #24]
 801b79c:	2200      	movs	r2, #0
 801b79e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801b7a0:	69bb      	ldr	r3, [r7, #24]
 801b7a2:	79db      	ldrb	r3, [r3, #7]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d003      	beq.n	801b7b0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801b7a8:	69bb      	ldr	r3, [r7, #24]
 801b7aa:	6a1b      	ldr	r3, [r3, #32]
 801b7ac:	613b      	str	r3, [r7, #16]
 801b7ae:	e014      	b.n	801b7da <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801b7b0:	69bb      	ldr	r3, [r7, #24]
 801b7b2:	331c      	adds	r3, #28
 801b7b4:	781b      	ldrb	r3, [r3, #0]
 801b7b6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801b7b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	db02      	blt.n	801b7c6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801b7c0:	23ff      	movs	r3, #255	; 0xff
 801b7c2:	613b      	str	r3, [r7, #16]
 801b7c4:	e009      	b.n	801b7da <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801b7c6:	7dfb      	ldrb	r3, [r7, #23]
 801b7c8:	2bbf      	cmp	r3, #191	; 0xbf
 801b7ca:	d903      	bls.n	801b7d4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801b7cc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801b7d0:	613b      	str	r3, [r7, #16]
 801b7d2:	e002      	b.n	801b7da <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801b7d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b7d8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801b7da:	69bb      	ldr	r3, [r7, #24]
 801b7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b7de:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d108      	bne.n	801b7f8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801b7e6:	69bb      	ldr	r3, [r7, #24]
 801b7e8:	69da      	ldr	r2, [r3, #28]
 801b7ea:	693b      	ldr	r3, [r7, #16]
 801b7ec:	4013      	ands	r3, r2
 801b7ee:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b7f6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801b7f8:	210a      	movs	r1, #10
 801b7fa:	69b8      	ldr	r0, [r7, #24]
 801b7fc:	f000 faa0 	bl	801bd40 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801b800:	69bb      	ldr	r3, [r7, #24]
 801b802:	f103 011c 	add.w	r1, r3, #28
 801b806:	f107 030c 	add.w	r3, r7, #12
 801b80a:	f107 0210 	add.w	r2, r7, #16
 801b80e:	6878      	ldr	r0, [r7, #4]
 801b810:	f7f7 f934 	bl	8012a7c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801b814:	3720      	adds	r7, #32
 801b816:	46bd      	mov	sp, r7
 801b818:	bd80      	pop	{r7, pc}
 801b81a:	bf00      	nop
 801b81c:	08024888 	.word	0x08024888
 801b820:	080249e8 	.word	0x080249e8
 801b824:	080248e8 	.word	0x080248e8
 801b828:	08024a04 	.word	0x08024a04
 801b82c:	88888889 	.word	0x88888889

0801b830 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801b830:	b580      	push	{r7, lr}
 801b832:	b08a      	sub	sp, #40	; 0x28
 801b834:	af02      	add	r7, sp, #8
 801b836:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b83c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801b83e:	2105      	movs	r1, #5
 801b840:	69b8      	ldr	r0, [r7, #24]
 801b842:	f000 fa7d 	bl	801bd40 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801b846:	f107 030c 	add.w	r3, r7, #12
 801b84a:	2203      	movs	r2, #3
 801b84c:	69b9      	ldr	r1, [r7, #24]
 801b84e:	6878      	ldr	r0, [r7, #4]
 801b850:	f000 ff32 	bl	801c6b8 <dhcp_create_msg>
 801b854:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b856:	697b      	ldr	r3, [r7, #20]
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d04e      	beq.n	801b8fa <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b85c:	697b      	ldr	r3, [r7, #20]
 801b85e:	685b      	ldr	r3, [r3, #4]
 801b860:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b862:	89b8      	ldrh	r0, [r7, #12]
 801b864:	693b      	ldr	r3, [r7, #16]
 801b866:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b86a:	2302      	movs	r3, #2
 801b86c:	2239      	movs	r2, #57	; 0x39
 801b86e:	f000 fa81 	bl	801bd74 <dhcp_option>
 801b872:	4603      	mov	r3, r0
 801b874:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801b876:	89b8      	ldrh	r0, [r7, #12]
 801b878:	693b      	ldr	r3, [r7, #16]
 801b87a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b882:	461a      	mov	r2, r3
 801b884:	f000 fad0 	bl	801be28 <dhcp_option_short>
 801b888:	4603      	mov	r3, r0
 801b88a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b88c:	89b8      	ldrh	r0, [r7, #12]
 801b88e:	693b      	ldr	r3, [r7, #16]
 801b890:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b894:	2304      	movs	r3, #4
 801b896:	2237      	movs	r2, #55	; 0x37
 801b898:	f000 fa6c 	bl	801bd74 <dhcp_option>
 801b89c:	4603      	mov	r3, r0
 801b89e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b8a0:	2300      	movs	r3, #0
 801b8a2:	77bb      	strb	r3, [r7, #30]
 801b8a4:	e00e      	b.n	801b8c4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b8a6:	89b8      	ldrh	r0, [r7, #12]
 801b8a8:	693b      	ldr	r3, [r7, #16]
 801b8aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b8ae:	7fbb      	ldrb	r3, [r7, #30]
 801b8b0:	4a2a      	ldr	r2, [pc, #168]	; (801b95c <dhcp_renew+0x12c>)
 801b8b2:	5cd3      	ldrb	r3, [r2, r3]
 801b8b4:	461a      	mov	r2, r3
 801b8b6:	f000 fa91 	bl	801bddc <dhcp_option_byte>
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b8be:	7fbb      	ldrb	r3, [r7, #30]
 801b8c0:	3301      	adds	r3, #1
 801b8c2:	77bb      	strb	r3, [r7, #30]
 801b8c4:	7fbb      	ldrb	r3, [r7, #30]
 801b8c6:	2b03      	cmp	r3, #3
 801b8c8:	d9ed      	bls.n	801b8a6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b8ca:	89b8      	ldrh	r0, [r7, #12]
 801b8cc:	693b      	ldr	r3, [r7, #16]
 801b8ce:	33f0      	adds	r3, #240	; 0xf0
 801b8d0:	697a      	ldr	r2, [r7, #20]
 801b8d2:	4619      	mov	r1, r3
 801b8d4:	f000 ffc6 	bl	801c864 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b8d8:	4b21      	ldr	r3, [pc, #132]	; (801b960 <dhcp_renew+0x130>)
 801b8da:	6818      	ldr	r0, [r3, #0]
 801b8dc:	69bb      	ldr	r3, [r7, #24]
 801b8de:	f103 0218 	add.w	r2, r3, #24
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	9300      	str	r3, [sp, #0]
 801b8e6:	2343      	movs	r3, #67	; 0x43
 801b8e8:	6979      	ldr	r1, [r7, #20]
 801b8ea:	f7fe fdff 	bl	801a4ec <udp_sendto_if>
 801b8ee:	4603      	mov	r3, r0
 801b8f0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b8f2:	6978      	ldr	r0, [r7, #20]
 801b8f4:	f7f7 fdd0 	bl	8013498 <pbuf_free>
 801b8f8:	e001      	b.n	801b8fe <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b8fa:	23ff      	movs	r3, #255	; 0xff
 801b8fc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b8fe:	69bb      	ldr	r3, [r7, #24]
 801b900:	799b      	ldrb	r3, [r3, #6]
 801b902:	2bff      	cmp	r3, #255	; 0xff
 801b904:	d005      	beq.n	801b912 <dhcp_renew+0xe2>
    dhcp->tries++;
 801b906:	69bb      	ldr	r3, [r7, #24]
 801b908:	799b      	ldrb	r3, [r3, #6]
 801b90a:	3301      	adds	r3, #1
 801b90c:	b2da      	uxtb	r2, r3
 801b90e:	69bb      	ldr	r3, [r7, #24]
 801b910:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801b912:	69bb      	ldr	r3, [r7, #24]
 801b914:	799b      	ldrb	r3, [r3, #6]
 801b916:	2b09      	cmp	r3, #9
 801b918:	d80a      	bhi.n	801b930 <dhcp_renew+0x100>
 801b91a:	69bb      	ldr	r3, [r7, #24]
 801b91c:	799b      	ldrb	r3, [r3, #6]
 801b91e:	b29b      	uxth	r3, r3
 801b920:	461a      	mov	r2, r3
 801b922:	0152      	lsls	r2, r2, #5
 801b924:	1ad2      	subs	r2, r2, r3
 801b926:	0092      	lsls	r2, r2, #2
 801b928:	4413      	add	r3, r2
 801b92a:	011b      	lsls	r3, r3, #4
 801b92c:	b29b      	uxth	r3, r3
 801b92e:	e001      	b.n	801b934 <dhcp_renew+0x104>
 801b930:	f644 6320 	movw	r3, #20000	; 0x4e20
 801b934:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b936:	89fb      	ldrh	r3, [r7, #14]
 801b938:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b93c:	4a09      	ldr	r2, [pc, #36]	; (801b964 <dhcp_renew+0x134>)
 801b93e:	fb82 1203 	smull	r1, r2, r2, r3
 801b942:	1152      	asrs	r2, r2, #5
 801b944:	17db      	asrs	r3, r3, #31
 801b946:	1ad3      	subs	r3, r2, r3
 801b948:	b29a      	uxth	r2, r3
 801b94a:	69bb      	ldr	r3, [r7, #24]
 801b94c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b94e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b952:	4618      	mov	r0, r3
 801b954:	3720      	adds	r7, #32
 801b956:	46bd      	mov	sp, r7
 801b958:	bd80      	pop	{r7, pc}
 801b95a:	bf00      	nop
 801b95c:	20000348 	.word	0x20000348
 801b960:	20005544 	.word	0x20005544
 801b964:	10624dd3 	.word	0x10624dd3

0801b968 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801b968:	b580      	push	{r7, lr}
 801b96a:	b08a      	sub	sp, #40	; 0x28
 801b96c:	af02      	add	r7, sp, #8
 801b96e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b974:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801b976:	2104      	movs	r1, #4
 801b978:	69b8      	ldr	r0, [r7, #24]
 801b97a:	f000 f9e1 	bl	801bd40 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801b97e:	f107 030c 	add.w	r3, r7, #12
 801b982:	2203      	movs	r2, #3
 801b984:	69b9      	ldr	r1, [r7, #24]
 801b986:	6878      	ldr	r0, [r7, #4]
 801b988:	f000 fe96 	bl	801c6b8 <dhcp_create_msg>
 801b98c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b98e:	697b      	ldr	r3, [r7, #20]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d04c      	beq.n	801ba2e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b994:	697b      	ldr	r3, [r7, #20]
 801b996:	685b      	ldr	r3, [r3, #4]
 801b998:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b99a:	89b8      	ldrh	r0, [r7, #12]
 801b99c:	693b      	ldr	r3, [r7, #16]
 801b99e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b9a2:	2302      	movs	r3, #2
 801b9a4:	2239      	movs	r2, #57	; 0x39
 801b9a6:	f000 f9e5 	bl	801bd74 <dhcp_option>
 801b9aa:	4603      	mov	r3, r0
 801b9ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801b9ae:	89b8      	ldrh	r0, [r7, #12]
 801b9b0:	693b      	ldr	r3, [r7, #16]
 801b9b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b9ba:	461a      	mov	r2, r3
 801b9bc:	f000 fa34 	bl	801be28 <dhcp_option_short>
 801b9c0:	4603      	mov	r3, r0
 801b9c2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b9c4:	89b8      	ldrh	r0, [r7, #12]
 801b9c6:	693b      	ldr	r3, [r7, #16]
 801b9c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b9cc:	2304      	movs	r3, #4
 801b9ce:	2237      	movs	r2, #55	; 0x37
 801b9d0:	f000 f9d0 	bl	801bd74 <dhcp_option>
 801b9d4:	4603      	mov	r3, r0
 801b9d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b9d8:	2300      	movs	r3, #0
 801b9da:	77bb      	strb	r3, [r7, #30]
 801b9dc:	e00e      	b.n	801b9fc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b9de:	89b8      	ldrh	r0, [r7, #12]
 801b9e0:	693b      	ldr	r3, [r7, #16]
 801b9e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b9e6:	7fbb      	ldrb	r3, [r7, #30]
 801b9e8:	4a29      	ldr	r2, [pc, #164]	; (801ba90 <dhcp_rebind+0x128>)
 801b9ea:	5cd3      	ldrb	r3, [r2, r3]
 801b9ec:	461a      	mov	r2, r3
 801b9ee:	f000 f9f5 	bl	801bddc <dhcp_option_byte>
 801b9f2:	4603      	mov	r3, r0
 801b9f4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b9f6:	7fbb      	ldrb	r3, [r7, #30]
 801b9f8:	3301      	adds	r3, #1
 801b9fa:	77bb      	strb	r3, [r7, #30]
 801b9fc:	7fbb      	ldrb	r3, [r7, #30]
 801b9fe:	2b03      	cmp	r3, #3
 801ba00:	d9ed      	bls.n	801b9de <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ba02:	89b8      	ldrh	r0, [r7, #12]
 801ba04:	693b      	ldr	r3, [r7, #16]
 801ba06:	33f0      	adds	r3, #240	; 0xf0
 801ba08:	697a      	ldr	r2, [r7, #20]
 801ba0a:	4619      	mov	r1, r3
 801ba0c:	f000 ff2a 	bl	801c864 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801ba10:	4b20      	ldr	r3, [pc, #128]	; (801ba94 <dhcp_rebind+0x12c>)
 801ba12:	6818      	ldr	r0, [r3, #0]
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	9300      	str	r3, [sp, #0]
 801ba18:	2343      	movs	r3, #67	; 0x43
 801ba1a:	4a1f      	ldr	r2, [pc, #124]	; (801ba98 <dhcp_rebind+0x130>)
 801ba1c:	6979      	ldr	r1, [r7, #20]
 801ba1e:	f7fe fd65 	bl	801a4ec <udp_sendto_if>
 801ba22:	4603      	mov	r3, r0
 801ba24:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801ba26:	6978      	ldr	r0, [r7, #20]
 801ba28:	f7f7 fd36 	bl	8013498 <pbuf_free>
 801ba2c:	e001      	b.n	801ba32 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801ba2e:	23ff      	movs	r3, #255	; 0xff
 801ba30:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801ba32:	69bb      	ldr	r3, [r7, #24]
 801ba34:	799b      	ldrb	r3, [r3, #6]
 801ba36:	2bff      	cmp	r3, #255	; 0xff
 801ba38:	d005      	beq.n	801ba46 <dhcp_rebind+0xde>
    dhcp->tries++;
 801ba3a:	69bb      	ldr	r3, [r7, #24]
 801ba3c:	799b      	ldrb	r3, [r3, #6]
 801ba3e:	3301      	adds	r3, #1
 801ba40:	b2da      	uxtb	r2, r3
 801ba42:	69bb      	ldr	r3, [r7, #24]
 801ba44:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801ba46:	69bb      	ldr	r3, [r7, #24]
 801ba48:	799b      	ldrb	r3, [r3, #6]
 801ba4a:	2b09      	cmp	r3, #9
 801ba4c:	d80a      	bhi.n	801ba64 <dhcp_rebind+0xfc>
 801ba4e:	69bb      	ldr	r3, [r7, #24]
 801ba50:	799b      	ldrb	r3, [r3, #6]
 801ba52:	b29b      	uxth	r3, r3
 801ba54:	461a      	mov	r2, r3
 801ba56:	0152      	lsls	r2, r2, #5
 801ba58:	1ad2      	subs	r2, r2, r3
 801ba5a:	0092      	lsls	r2, r2, #2
 801ba5c:	4413      	add	r3, r2
 801ba5e:	00db      	lsls	r3, r3, #3
 801ba60:	b29b      	uxth	r3, r3
 801ba62:	e001      	b.n	801ba68 <dhcp_rebind+0x100>
 801ba64:	f242 7310 	movw	r3, #10000	; 0x2710
 801ba68:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ba6a:	89fb      	ldrh	r3, [r7, #14]
 801ba6c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ba70:	4a0a      	ldr	r2, [pc, #40]	; (801ba9c <dhcp_rebind+0x134>)
 801ba72:	fb82 1203 	smull	r1, r2, r2, r3
 801ba76:	1152      	asrs	r2, r2, #5
 801ba78:	17db      	asrs	r3, r3, #31
 801ba7a:	1ad3      	subs	r3, r2, r3
 801ba7c:	b29a      	uxth	r2, r3
 801ba7e:	69bb      	ldr	r3, [r7, #24]
 801ba80:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ba82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ba86:	4618      	mov	r0, r3
 801ba88:	3720      	adds	r7, #32
 801ba8a:	46bd      	mov	sp, r7
 801ba8c:	bd80      	pop	{r7, pc}
 801ba8e:	bf00      	nop
 801ba90:	20000348 	.word	0x20000348
 801ba94:	20005544 	.word	0x20005544
 801ba98:	080256b8 	.word	0x080256b8
 801ba9c:	10624dd3 	.word	0x10624dd3

0801baa0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801baa0:	b5b0      	push	{r4, r5, r7, lr}
 801baa2:	b08a      	sub	sp, #40	; 0x28
 801baa4:	af02      	add	r7, sp, #8
 801baa6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801baac:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801baae:	2103      	movs	r1, #3
 801bab0:	69b8      	ldr	r0, [r7, #24]
 801bab2:	f000 f945 	bl	801bd40 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801bab6:	f107 030c 	add.w	r3, r7, #12
 801baba:	2203      	movs	r2, #3
 801babc:	69b9      	ldr	r1, [r7, #24]
 801babe:	6878      	ldr	r0, [r7, #4]
 801bac0:	f000 fdfa 	bl	801c6b8 <dhcp_create_msg>
 801bac4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801bac6:	697b      	ldr	r3, [r7, #20]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d066      	beq.n	801bb9a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801bacc:	697b      	ldr	r3, [r7, #20]
 801bace:	685b      	ldr	r3, [r3, #4]
 801bad0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bad2:	89b8      	ldrh	r0, [r7, #12]
 801bad4:	693b      	ldr	r3, [r7, #16]
 801bad6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bada:	2302      	movs	r3, #2
 801badc:	2239      	movs	r2, #57	; 0x39
 801bade:	f000 f949 	bl	801bd74 <dhcp_option>
 801bae2:	4603      	mov	r3, r0
 801bae4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801bae6:	89b8      	ldrh	r0, [r7, #12]
 801bae8:	693b      	ldr	r3, [r7, #16]
 801baea:	33f0      	adds	r3, #240	; 0xf0
 801baec:	f44f 7210 	mov.w	r2, #576	; 0x240
 801baf0:	4619      	mov	r1, r3
 801baf2:	f000 f999 	bl	801be28 <dhcp_option_short>
 801baf6:	4603      	mov	r3, r0
 801baf8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801bafa:	89b8      	ldrh	r0, [r7, #12]
 801bafc:	693b      	ldr	r3, [r7, #16]
 801bafe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bb02:	2304      	movs	r3, #4
 801bb04:	2232      	movs	r2, #50	; 0x32
 801bb06:	f000 f935 	bl	801bd74 <dhcp_option>
 801bb0a:	4603      	mov	r3, r0
 801bb0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bb0e:	89bc      	ldrh	r4, [r7, #12]
 801bb10:	693b      	ldr	r3, [r7, #16]
 801bb12:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801bb16:	69bb      	ldr	r3, [r7, #24]
 801bb18:	69db      	ldr	r3, [r3, #28]
 801bb1a:	4618      	mov	r0, r3
 801bb1c:	f7f5 f943 	bl	8010da6 <lwip_htonl>
 801bb20:	4603      	mov	r3, r0
 801bb22:	461a      	mov	r2, r3
 801bb24:	4629      	mov	r1, r5
 801bb26:	4620      	mov	r0, r4
 801bb28:	f000 f9b0 	bl	801be8c <dhcp_option_long>
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bb30:	89b8      	ldrh	r0, [r7, #12]
 801bb32:	693b      	ldr	r3, [r7, #16]
 801bb34:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bb38:	2304      	movs	r3, #4
 801bb3a:	2237      	movs	r2, #55	; 0x37
 801bb3c:	f000 f91a 	bl	801bd74 <dhcp_option>
 801bb40:	4603      	mov	r3, r0
 801bb42:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bb44:	2300      	movs	r3, #0
 801bb46:	77bb      	strb	r3, [r7, #30]
 801bb48:	e00e      	b.n	801bb68 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801bb4a:	89b8      	ldrh	r0, [r7, #12]
 801bb4c:	693b      	ldr	r3, [r7, #16]
 801bb4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bb52:	7fbb      	ldrb	r3, [r7, #30]
 801bb54:	4a29      	ldr	r2, [pc, #164]	; (801bbfc <dhcp_reboot+0x15c>)
 801bb56:	5cd3      	ldrb	r3, [r2, r3]
 801bb58:	461a      	mov	r2, r3
 801bb5a:	f000 f93f 	bl	801bddc <dhcp_option_byte>
 801bb5e:	4603      	mov	r3, r0
 801bb60:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bb62:	7fbb      	ldrb	r3, [r7, #30]
 801bb64:	3301      	adds	r3, #1
 801bb66:	77bb      	strb	r3, [r7, #30]
 801bb68:	7fbb      	ldrb	r3, [r7, #30]
 801bb6a:	2b03      	cmp	r3, #3
 801bb6c:	d9ed      	bls.n	801bb4a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801bb6e:	89b8      	ldrh	r0, [r7, #12]
 801bb70:	693b      	ldr	r3, [r7, #16]
 801bb72:	33f0      	adds	r3, #240	; 0xf0
 801bb74:	697a      	ldr	r2, [r7, #20]
 801bb76:	4619      	mov	r1, r3
 801bb78:	f000 fe74 	bl	801c864 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801bb7c:	4b20      	ldr	r3, [pc, #128]	; (801bc00 <dhcp_reboot+0x160>)
 801bb7e:	6818      	ldr	r0, [r3, #0]
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	9300      	str	r3, [sp, #0]
 801bb84:	2343      	movs	r3, #67	; 0x43
 801bb86:	4a1f      	ldr	r2, [pc, #124]	; (801bc04 <dhcp_reboot+0x164>)
 801bb88:	6979      	ldr	r1, [r7, #20]
 801bb8a:	f7fe fcaf 	bl	801a4ec <udp_sendto_if>
 801bb8e:	4603      	mov	r3, r0
 801bb90:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801bb92:	6978      	ldr	r0, [r7, #20]
 801bb94:	f7f7 fc80 	bl	8013498 <pbuf_free>
 801bb98:	e001      	b.n	801bb9e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801bb9a:	23ff      	movs	r3, #255	; 0xff
 801bb9c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801bb9e:	69bb      	ldr	r3, [r7, #24]
 801bba0:	799b      	ldrb	r3, [r3, #6]
 801bba2:	2bff      	cmp	r3, #255	; 0xff
 801bba4:	d005      	beq.n	801bbb2 <dhcp_reboot+0x112>
    dhcp->tries++;
 801bba6:	69bb      	ldr	r3, [r7, #24]
 801bba8:	799b      	ldrb	r3, [r3, #6]
 801bbaa:	3301      	adds	r3, #1
 801bbac:	b2da      	uxtb	r2, r3
 801bbae:	69bb      	ldr	r3, [r7, #24]
 801bbb0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801bbb2:	69bb      	ldr	r3, [r7, #24]
 801bbb4:	799b      	ldrb	r3, [r3, #6]
 801bbb6:	2b09      	cmp	r3, #9
 801bbb8:	d80a      	bhi.n	801bbd0 <dhcp_reboot+0x130>
 801bbba:	69bb      	ldr	r3, [r7, #24]
 801bbbc:	799b      	ldrb	r3, [r3, #6]
 801bbbe:	b29b      	uxth	r3, r3
 801bbc0:	461a      	mov	r2, r3
 801bbc2:	0152      	lsls	r2, r2, #5
 801bbc4:	1ad2      	subs	r2, r2, r3
 801bbc6:	0092      	lsls	r2, r2, #2
 801bbc8:	4413      	add	r3, r2
 801bbca:	00db      	lsls	r3, r3, #3
 801bbcc:	b29b      	uxth	r3, r3
 801bbce:	e001      	b.n	801bbd4 <dhcp_reboot+0x134>
 801bbd0:	f242 7310 	movw	r3, #10000	; 0x2710
 801bbd4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801bbd6:	89fb      	ldrh	r3, [r7, #14]
 801bbd8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801bbdc:	4a0a      	ldr	r2, [pc, #40]	; (801bc08 <dhcp_reboot+0x168>)
 801bbde:	fb82 1203 	smull	r1, r2, r2, r3
 801bbe2:	1152      	asrs	r2, r2, #5
 801bbe4:	17db      	asrs	r3, r3, #31
 801bbe6:	1ad3      	subs	r3, r2, r3
 801bbe8:	b29a      	uxth	r2, r3
 801bbea:	69bb      	ldr	r3, [r7, #24]
 801bbec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801bbee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801bbf2:	4618      	mov	r0, r3
 801bbf4:	3720      	adds	r7, #32
 801bbf6:	46bd      	mov	sp, r7
 801bbf8:	bdb0      	pop	{r4, r5, r7, pc}
 801bbfa:	bf00      	nop
 801bbfc:	20000348 	.word	0x20000348
 801bc00:	20005544 	.word	0x20005544
 801bc04:	080256b8 	.word	0x080256b8
 801bc08:	10624dd3 	.word	0x10624dd3

0801bc0c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801bc0c:	b5b0      	push	{r4, r5, r7, lr}
 801bc0e:	b08a      	sub	sp, #40	; 0x28
 801bc10:	af02      	add	r7, sp, #8
 801bc12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc18:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801bc1a:	69fb      	ldr	r3, [r7, #28]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	f000 8084 	beq.w	801bd2a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801bc22:	69fb      	ldr	r3, [r7, #28]
 801bc24:	795b      	ldrb	r3, [r3, #5]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	f000 8081 	beq.w	801bd2e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801bc2c:	69fb      	ldr	r3, [r7, #28]
 801bc2e:	699b      	ldr	r3, [r3, #24]
 801bc30:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801bc32:	69fb      	ldr	r3, [r7, #28]
 801bc34:	2200      	movs	r2, #0
 801bc36:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801bc38:	69fb      	ldr	r3, [r7, #28]
 801bc3a:	2200      	movs	r2, #0
 801bc3c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801bc3e:	69fb      	ldr	r3, [r7, #28]
 801bc40:	2200      	movs	r2, #0
 801bc42:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801bc44:	69fb      	ldr	r3, [r7, #28]
 801bc46:	2200      	movs	r2, #0
 801bc48:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801bc4a:	69fb      	ldr	r3, [r7, #28]
 801bc4c:	2200      	movs	r2, #0
 801bc4e:	631a      	str	r2, [r3, #48]	; 0x30
 801bc50:	69fb      	ldr	r3, [r7, #28]
 801bc52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bc54:	69fb      	ldr	r3, [r7, #28]
 801bc56:	62da      	str	r2, [r3, #44]	; 0x2c
 801bc58:	69fb      	ldr	r3, [r7, #28]
 801bc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc5c:	69fb      	ldr	r3, [r7, #28]
 801bc5e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801bc60:	69fb      	ldr	r3, [r7, #28]
 801bc62:	2200      	movs	r2, #0
 801bc64:	829a      	strh	r2, [r3, #20]
 801bc66:	69fb      	ldr	r3, [r7, #28]
 801bc68:	8a9a      	ldrh	r2, [r3, #20]
 801bc6a:	69fb      	ldr	r3, [r7, #28]
 801bc6c:	825a      	strh	r2, [r3, #18]
 801bc6e:	69fb      	ldr	r3, [r7, #28]
 801bc70:	8a5a      	ldrh	r2, [r3, #18]
 801bc72:	69fb      	ldr	r3, [r7, #28]
 801bc74:	821a      	strh	r2, [r3, #16]
 801bc76:	69fb      	ldr	r3, [r7, #28]
 801bc78:	8a1a      	ldrh	r2, [r3, #16]
 801bc7a:	69fb      	ldr	r3, [r7, #28]
 801bc7c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801bc7e:	6878      	ldr	r0, [r7, #4]
 801bc80:	f000 fe1e 	bl	801c8c0 <dhcp_supplied_address>
 801bc84:	4603      	mov	r3, r0
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d03b      	beq.n	801bd02 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801bc8a:	f107 030e 	add.w	r3, r7, #14
 801bc8e:	2207      	movs	r2, #7
 801bc90:	69f9      	ldr	r1, [r7, #28]
 801bc92:	6878      	ldr	r0, [r7, #4]
 801bc94:	f000 fd10 	bl	801c6b8 <dhcp_create_msg>
 801bc98:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801bc9a:	69bb      	ldr	r3, [r7, #24]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d030      	beq.n	801bd02 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801bca0:	69bb      	ldr	r3, [r7, #24]
 801bca2:	685b      	ldr	r3, [r3, #4]
 801bca4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801bca6:	89f8      	ldrh	r0, [r7, #14]
 801bca8:	697b      	ldr	r3, [r7, #20]
 801bcaa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bcae:	2304      	movs	r3, #4
 801bcb0:	2236      	movs	r2, #54	; 0x36
 801bcb2:	f000 f85f 	bl	801bd74 <dhcp_option>
 801bcb6:	4603      	mov	r3, r0
 801bcb8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801bcba:	89fc      	ldrh	r4, [r7, #14]
 801bcbc:	697b      	ldr	r3, [r7, #20]
 801bcbe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801bcc2:	693b      	ldr	r3, [r7, #16]
 801bcc4:	4618      	mov	r0, r3
 801bcc6:	f7f5 f86e 	bl	8010da6 <lwip_htonl>
 801bcca:	4603      	mov	r3, r0
 801bccc:	461a      	mov	r2, r3
 801bcce:	4629      	mov	r1, r5
 801bcd0:	4620      	mov	r0, r4
 801bcd2:	f000 f8db 	bl	801be8c <dhcp_option_long>
 801bcd6:	4603      	mov	r3, r0
 801bcd8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801bcda:	89f8      	ldrh	r0, [r7, #14]
 801bcdc:	697b      	ldr	r3, [r7, #20]
 801bcde:	33f0      	adds	r3, #240	; 0xf0
 801bce0:	69ba      	ldr	r2, [r7, #24]
 801bce2:	4619      	mov	r1, r3
 801bce4:	f000 fdbe 	bl	801c864 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801bce8:	4b13      	ldr	r3, [pc, #76]	; (801bd38 <dhcp_release_and_stop+0x12c>)
 801bcea:	6818      	ldr	r0, [r3, #0]
 801bcec:	f107 0210 	add.w	r2, r7, #16
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	9300      	str	r3, [sp, #0]
 801bcf4:	2343      	movs	r3, #67	; 0x43
 801bcf6:	69b9      	ldr	r1, [r7, #24]
 801bcf8:	f7fe fbf8 	bl	801a4ec <udp_sendto_if>
      pbuf_free(p_out);
 801bcfc:	69b8      	ldr	r0, [r7, #24]
 801bcfe:	f7f7 fbcb 	bl	8013498 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801bd02:	4b0e      	ldr	r3, [pc, #56]	; (801bd3c <dhcp_release_and_stop+0x130>)
 801bd04:	4a0d      	ldr	r2, [pc, #52]	; (801bd3c <dhcp_release_and_stop+0x130>)
 801bd06:	490d      	ldr	r1, [pc, #52]	; (801bd3c <dhcp_release_and_stop+0x130>)
 801bd08:	6878      	ldr	r0, [r7, #4]
 801bd0a:	f7f6 feb7 	bl	8012a7c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801bd0e:	2100      	movs	r1, #0
 801bd10:	69f8      	ldr	r0, [r7, #28]
 801bd12:	f000 f815 	bl	801bd40 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801bd16:	69fb      	ldr	r3, [r7, #28]
 801bd18:	791b      	ldrb	r3, [r3, #4]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d008      	beq.n	801bd30 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801bd1e:	f7fe ff65 	bl	801abec <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801bd22:	69fb      	ldr	r3, [r7, #28]
 801bd24:	2200      	movs	r2, #0
 801bd26:	711a      	strb	r2, [r3, #4]
 801bd28:	e002      	b.n	801bd30 <dhcp_release_and_stop+0x124>
    return;
 801bd2a:	bf00      	nop
 801bd2c:	e000      	b.n	801bd30 <dhcp_release_and_stop+0x124>
    return;
 801bd2e:	bf00      	nop
  }
}
 801bd30:	3720      	adds	r7, #32
 801bd32:	46bd      	mov	sp, r7
 801bd34:	bdb0      	pop	{r4, r5, r7, pc}
 801bd36:	bf00      	nop
 801bd38:	20005544 	.word	0x20005544
 801bd3c:	080256b4 	.word	0x080256b4

0801bd40 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801bd40:	b480      	push	{r7}
 801bd42:	b083      	sub	sp, #12
 801bd44:	af00      	add	r7, sp, #0
 801bd46:	6078      	str	r0, [r7, #4]
 801bd48:	460b      	mov	r3, r1
 801bd4a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	795b      	ldrb	r3, [r3, #5]
 801bd50:	78fa      	ldrb	r2, [r7, #3]
 801bd52:	429a      	cmp	r2, r3
 801bd54:	d008      	beq.n	801bd68 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	78fa      	ldrb	r2, [r7, #3]
 801bd5a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	2200      	movs	r2, #0
 801bd60:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	2200      	movs	r2, #0
 801bd66:	811a      	strh	r2, [r3, #8]
  }
}
 801bd68:	bf00      	nop
 801bd6a:	370c      	adds	r7, #12
 801bd6c:	46bd      	mov	sp, r7
 801bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd72:	4770      	bx	lr

0801bd74 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801bd74:	b580      	push	{r7, lr}
 801bd76:	b082      	sub	sp, #8
 801bd78:	af00      	add	r7, sp, #0
 801bd7a:	6039      	str	r1, [r7, #0]
 801bd7c:	4611      	mov	r1, r2
 801bd7e:	461a      	mov	r2, r3
 801bd80:	4603      	mov	r3, r0
 801bd82:	80fb      	strh	r3, [r7, #6]
 801bd84:	460b      	mov	r3, r1
 801bd86:	717b      	strb	r3, [r7, #5]
 801bd88:	4613      	mov	r3, r2
 801bd8a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801bd8c:	88fa      	ldrh	r2, [r7, #6]
 801bd8e:	793b      	ldrb	r3, [r7, #4]
 801bd90:	4413      	add	r3, r2
 801bd92:	3302      	adds	r3, #2
 801bd94:	2b44      	cmp	r3, #68	; 0x44
 801bd96:	d906      	bls.n	801bda6 <dhcp_option+0x32>
 801bd98:	4b0d      	ldr	r3, [pc, #52]	; (801bdd0 <dhcp_option+0x5c>)
 801bd9a:	f240 529a 	movw	r2, #1434	; 0x59a
 801bd9e:	490d      	ldr	r1, [pc, #52]	; (801bdd4 <dhcp_option+0x60>)
 801bda0:	480d      	ldr	r0, [pc, #52]	; (801bdd8 <dhcp_option+0x64>)
 801bda2:	f003 fda3 	bl	801f8ec <iprintf>
  options[options_out_len++] = option_type;
 801bda6:	88fb      	ldrh	r3, [r7, #6]
 801bda8:	1c5a      	adds	r2, r3, #1
 801bdaa:	80fa      	strh	r2, [r7, #6]
 801bdac:	461a      	mov	r2, r3
 801bdae:	683b      	ldr	r3, [r7, #0]
 801bdb0:	4413      	add	r3, r2
 801bdb2:	797a      	ldrb	r2, [r7, #5]
 801bdb4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801bdb6:	88fb      	ldrh	r3, [r7, #6]
 801bdb8:	1c5a      	adds	r2, r3, #1
 801bdba:	80fa      	strh	r2, [r7, #6]
 801bdbc:	461a      	mov	r2, r3
 801bdbe:	683b      	ldr	r3, [r7, #0]
 801bdc0:	4413      	add	r3, r2
 801bdc2:	793a      	ldrb	r2, [r7, #4]
 801bdc4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801bdc6:	88fb      	ldrh	r3, [r7, #6]
}
 801bdc8:	4618      	mov	r0, r3
 801bdca:	3708      	adds	r7, #8
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	bd80      	pop	{r7, pc}
 801bdd0:	08024888 	.word	0x08024888
 801bdd4:	08024a1c 	.word	0x08024a1c
 801bdd8:	080248e8 	.word	0x080248e8

0801bddc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801bddc:	b580      	push	{r7, lr}
 801bdde:	b082      	sub	sp, #8
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	4603      	mov	r3, r0
 801bde4:	6039      	str	r1, [r7, #0]
 801bde6:	80fb      	strh	r3, [r7, #6]
 801bde8:	4613      	mov	r3, r2
 801bdea:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801bdec:	88fb      	ldrh	r3, [r7, #6]
 801bdee:	2b43      	cmp	r3, #67	; 0x43
 801bdf0:	d906      	bls.n	801be00 <dhcp_option_byte+0x24>
 801bdf2:	4b0a      	ldr	r3, [pc, #40]	; (801be1c <dhcp_option_byte+0x40>)
 801bdf4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801bdf8:	4909      	ldr	r1, [pc, #36]	; (801be20 <dhcp_option_byte+0x44>)
 801bdfa:	480a      	ldr	r0, [pc, #40]	; (801be24 <dhcp_option_byte+0x48>)
 801bdfc:	f003 fd76 	bl	801f8ec <iprintf>
  options[options_out_len++] = value;
 801be00:	88fb      	ldrh	r3, [r7, #6]
 801be02:	1c5a      	adds	r2, r3, #1
 801be04:	80fa      	strh	r2, [r7, #6]
 801be06:	461a      	mov	r2, r3
 801be08:	683b      	ldr	r3, [r7, #0]
 801be0a:	4413      	add	r3, r2
 801be0c:	797a      	ldrb	r2, [r7, #5]
 801be0e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801be10:	88fb      	ldrh	r3, [r7, #6]
}
 801be12:	4618      	mov	r0, r3
 801be14:	3708      	adds	r7, #8
 801be16:	46bd      	mov	sp, r7
 801be18:	bd80      	pop	{r7, pc}
 801be1a:	bf00      	nop
 801be1c:	08024888 	.word	0x08024888
 801be20:	08024a60 	.word	0x08024a60
 801be24:	080248e8 	.word	0x080248e8

0801be28 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801be28:	b580      	push	{r7, lr}
 801be2a:	b082      	sub	sp, #8
 801be2c:	af00      	add	r7, sp, #0
 801be2e:	4603      	mov	r3, r0
 801be30:	6039      	str	r1, [r7, #0]
 801be32:	80fb      	strh	r3, [r7, #6]
 801be34:	4613      	mov	r3, r2
 801be36:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801be38:	88fb      	ldrh	r3, [r7, #6]
 801be3a:	3302      	adds	r3, #2
 801be3c:	2b44      	cmp	r3, #68	; 0x44
 801be3e:	d906      	bls.n	801be4e <dhcp_option_short+0x26>
 801be40:	4b0f      	ldr	r3, [pc, #60]	; (801be80 <dhcp_option_short+0x58>)
 801be42:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801be46:	490f      	ldr	r1, [pc, #60]	; (801be84 <dhcp_option_short+0x5c>)
 801be48:	480f      	ldr	r0, [pc, #60]	; (801be88 <dhcp_option_short+0x60>)
 801be4a:	f003 fd4f 	bl	801f8ec <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801be4e:	88bb      	ldrh	r3, [r7, #4]
 801be50:	0a1b      	lsrs	r3, r3, #8
 801be52:	b29a      	uxth	r2, r3
 801be54:	88fb      	ldrh	r3, [r7, #6]
 801be56:	1c59      	adds	r1, r3, #1
 801be58:	80f9      	strh	r1, [r7, #6]
 801be5a:	4619      	mov	r1, r3
 801be5c:	683b      	ldr	r3, [r7, #0]
 801be5e:	440b      	add	r3, r1
 801be60:	b2d2      	uxtb	r2, r2
 801be62:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801be64:	88fb      	ldrh	r3, [r7, #6]
 801be66:	1c5a      	adds	r2, r3, #1
 801be68:	80fa      	strh	r2, [r7, #6]
 801be6a:	461a      	mov	r2, r3
 801be6c:	683b      	ldr	r3, [r7, #0]
 801be6e:	4413      	add	r3, r2
 801be70:	88ba      	ldrh	r2, [r7, #4]
 801be72:	b2d2      	uxtb	r2, r2
 801be74:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801be76:	88fb      	ldrh	r3, [r7, #6]
}
 801be78:	4618      	mov	r0, r3
 801be7a:	3708      	adds	r7, #8
 801be7c:	46bd      	mov	sp, r7
 801be7e:	bd80      	pop	{r7, pc}
 801be80:	08024888 	.word	0x08024888
 801be84:	08024a98 	.word	0x08024a98
 801be88:	080248e8 	.word	0x080248e8

0801be8c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801be8c:	b580      	push	{r7, lr}
 801be8e:	b084      	sub	sp, #16
 801be90:	af00      	add	r7, sp, #0
 801be92:	4603      	mov	r3, r0
 801be94:	60b9      	str	r1, [r7, #8]
 801be96:	607a      	str	r2, [r7, #4]
 801be98:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801be9a:	89fb      	ldrh	r3, [r7, #14]
 801be9c:	3304      	adds	r3, #4
 801be9e:	2b44      	cmp	r3, #68	; 0x44
 801bea0:	d906      	bls.n	801beb0 <dhcp_option_long+0x24>
 801bea2:	4b19      	ldr	r3, [pc, #100]	; (801bf08 <dhcp_option_long+0x7c>)
 801bea4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801bea8:	4918      	ldr	r1, [pc, #96]	; (801bf0c <dhcp_option_long+0x80>)
 801beaa:	4819      	ldr	r0, [pc, #100]	; (801bf10 <dhcp_option_long+0x84>)
 801beac:	f003 fd1e 	bl	801f8ec <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	0e1a      	lsrs	r2, r3, #24
 801beb4:	89fb      	ldrh	r3, [r7, #14]
 801beb6:	1c59      	adds	r1, r3, #1
 801beb8:	81f9      	strh	r1, [r7, #14]
 801beba:	4619      	mov	r1, r3
 801bebc:	68bb      	ldr	r3, [r7, #8]
 801bebe:	440b      	add	r3, r1
 801bec0:	b2d2      	uxtb	r2, r2
 801bec2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	0c1a      	lsrs	r2, r3, #16
 801bec8:	89fb      	ldrh	r3, [r7, #14]
 801beca:	1c59      	adds	r1, r3, #1
 801becc:	81f9      	strh	r1, [r7, #14]
 801bece:	4619      	mov	r1, r3
 801bed0:	68bb      	ldr	r3, [r7, #8]
 801bed2:	440b      	add	r3, r1
 801bed4:	b2d2      	uxtb	r2, r2
 801bed6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	0a1a      	lsrs	r2, r3, #8
 801bedc:	89fb      	ldrh	r3, [r7, #14]
 801bede:	1c59      	adds	r1, r3, #1
 801bee0:	81f9      	strh	r1, [r7, #14]
 801bee2:	4619      	mov	r1, r3
 801bee4:	68bb      	ldr	r3, [r7, #8]
 801bee6:	440b      	add	r3, r1
 801bee8:	b2d2      	uxtb	r2, r2
 801beea:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801beec:	89fb      	ldrh	r3, [r7, #14]
 801beee:	1c5a      	adds	r2, r3, #1
 801bef0:	81fa      	strh	r2, [r7, #14]
 801bef2:	461a      	mov	r2, r3
 801bef4:	68bb      	ldr	r3, [r7, #8]
 801bef6:	4413      	add	r3, r2
 801bef8:	687a      	ldr	r2, [r7, #4]
 801befa:	b2d2      	uxtb	r2, r2
 801befc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801befe:	89fb      	ldrh	r3, [r7, #14]
}
 801bf00:	4618      	mov	r0, r3
 801bf02:	3710      	adds	r7, #16
 801bf04:	46bd      	mov	sp, r7
 801bf06:	bd80      	pop	{r7, pc}
 801bf08:	08024888 	.word	0x08024888
 801bf0c:	08024ad4 	.word	0x08024ad4
 801bf10:	080248e8 	.word	0x080248e8

0801bf14 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801bf14:	b580      	push	{r7, lr}
 801bf16:	b090      	sub	sp, #64	; 0x40
 801bf18:	af00      	add	r7, sp, #0
 801bf1a:	6078      	str	r0, [r7, #4]
 801bf1c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801bf1e:	2300      	movs	r3, #0
 801bf20:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801bf22:	2300      	movs	r3, #0
 801bf24:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801bf26:	220a      	movs	r2, #10
 801bf28:	2100      	movs	r1, #0
 801bf2a:	48ba      	ldr	r0, [pc, #744]	; (801c214 <dhcp_parse_reply+0x300>)
 801bf2c:	f003 fc1c 	bl	801f768 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	895b      	ldrh	r3, [r3, #10]
 801bf34:	2b2b      	cmp	r3, #43	; 0x2b
 801bf36:	d802      	bhi.n	801bf3e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801bf38:	f06f 0301 	mvn.w	r3, #1
 801bf3c:	e2e9      	b.n	801c512 <dhcp_parse_reply+0x5fe>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	685b      	ldr	r3, [r3, #4]
 801bf42:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801bf44:	23f0      	movs	r3, #240	; 0xf0
 801bf46:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	891b      	ldrh	r3, [r3, #8]
 801bf4c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801bf52:	e00c      	b.n	801bf6e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf56:	895b      	ldrh	r3, [r3, #10]
 801bf58:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801bf5a:	1ad3      	subs	r3, r2, r3
 801bf5c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf60:	895b      	ldrh	r3, [r3, #10]
 801bf62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801bf64:	1ad3      	subs	r3, r2, r3
 801bf66:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d004      	beq.n	801bf7e <dhcp_parse_reply+0x6a>
 801bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf76:	895b      	ldrh	r3, [r3, #10]
 801bf78:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801bf7a:	429a      	cmp	r2, r3
 801bf7c:	d2ea      	bcs.n	801bf54 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d102      	bne.n	801bf8a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801bf84:	f06f 0301 	mvn.w	r3, #1
 801bf88:	e2c3      	b.n	801c512 <dhcp_parse_reply+0x5fe>
  }
  offset = options_idx;
 801bf8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801bf8c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801bf8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bf90:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf94:	685b      	ldr	r3, [r3, #4]
 801bf96:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801bf98:	e267      	b.n	801c46a <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 801bf9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bf9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bf9e:	4413      	add	r3, r2
 801bfa0:	781b      	ldrb	r3, [r3, #0]
 801bfa2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801bfa4:	2300      	movs	r3, #0
 801bfa6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801bfaa:	f04f 33ff 	mov.w	r3, #4294967295
 801bfae:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801bfb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bfb2:	3302      	adds	r3, #2
 801bfb4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801bfb6:	8bfa      	ldrh	r2, [r7, #30]
 801bfb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bfba:	429a      	cmp	r2, r3
 801bfbc:	d202      	bcs.n	801bfc4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801bfbe:	f06f 0301 	mvn.w	r3, #1
 801bfc2:	e2a6      	b.n	801c512 <dhcp_parse_reply+0x5fe>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801bfc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bfc6:	3301      	adds	r3, #1
 801bfc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bfca:	8952      	ldrh	r2, [r2, #10]
 801bfcc:	4293      	cmp	r3, r2
 801bfce:	da07      	bge.n	801bfe0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801bfd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bfd2:	3301      	adds	r3, #1
 801bfd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bfd6:	4413      	add	r3, r2
 801bfd8:	781b      	ldrb	r3, [r3, #0]
 801bfda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bfde:	e00b      	b.n	801bff8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d004      	beq.n	801bff2 <dhcp_parse_reply+0xde>
 801bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	685b      	ldr	r3, [r3, #4]
 801bfee:	781b      	ldrb	r3, [r3, #0]
 801bff0:	e000      	b.n	801bff4 <dhcp_parse_reply+0xe0>
 801bff2:	2300      	movs	r3, #0
 801bff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801bff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801c000:	7dfb      	ldrb	r3, [r7, #23]
 801c002:	2b3b      	cmp	r3, #59	; 0x3b
 801c004:	f200 815a 	bhi.w	801c2bc <dhcp_parse_reply+0x3a8>
 801c008:	a201      	add	r2, pc, #4	; (adr r2, 801c010 <dhcp_parse_reply+0xfc>)
 801c00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c00e:	bf00      	nop
 801c010:	0801c101 	.word	0x0801c101
 801c014:	0801c111 	.word	0x0801c111
 801c018:	0801c2bd 	.word	0x0801c2bd
 801c01c:	0801c133 	.word	0x0801c133
 801c020:	0801c2bd 	.word	0x0801c2bd
 801c024:	0801c2bd 	.word	0x0801c2bd
 801c028:	0801c15f 	.word	0x0801c15f
 801c02c:	0801c2bd 	.word	0x0801c2bd
 801c030:	0801c2bd 	.word	0x0801c2bd
 801c034:	0801c2bd 	.word	0x0801c2bd
 801c038:	0801c2bd 	.word	0x0801c2bd
 801c03c:	0801c2bd 	.word	0x0801c2bd
 801c040:	0801c2bd 	.word	0x0801c2bd
 801c044:	0801c2bd 	.word	0x0801c2bd
 801c048:	0801c2bd 	.word	0x0801c2bd
 801c04c:	0801c2bd 	.word	0x0801c2bd
 801c050:	0801c2bd 	.word	0x0801c2bd
 801c054:	0801c2bd 	.word	0x0801c2bd
 801c058:	0801c2bd 	.word	0x0801c2bd
 801c05c:	0801c2bd 	.word	0x0801c2bd
 801c060:	0801c2bd 	.word	0x0801c2bd
 801c064:	0801c2bd 	.word	0x0801c2bd
 801c068:	0801c2bd 	.word	0x0801c2bd
 801c06c:	0801c2bd 	.word	0x0801c2bd
 801c070:	0801c2bd 	.word	0x0801c2bd
 801c074:	0801c2bd 	.word	0x0801c2bd
 801c078:	0801c2bd 	.word	0x0801c2bd
 801c07c:	0801c2bd 	.word	0x0801c2bd
 801c080:	0801c2bd 	.word	0x0801c2bd
 801c084:	0801c2bd 	.word	0x0801c2bd
 801c088:	0801c2bd 	.word	0x0801c2bd
 801c08c:	0801c2bd 	.word	0x0801c2bd
 801c090:	0801c2bd 	.word	0x0801c2bd
 801c094:	0801c2bd 	.word	0x0801c2bd
 801c098:	0801c2bd 	.word	0x0801c2bd
 801c09c:	0801c2bd 	.word	0x0801c2bd
 801c0a0:	0801c2bd 	.word	0x0801c2bd
 801c0a4:	0801c2bd 	.word	0x0801c2bd
 801c0a8:	0801c2bd 	.word	0x0801c2bd
 801c0ac:	0801c2bd 	.word	0x0801c2bd
 801c0b0:	0801c2bd 	.word	0x0801c2bd
 801c0b4:	0801c2bd 	.word	0x0801c2bd
 801c0b8:	0801c2bd 	.word	0x0801c2bd
 801c0bc:	0801c2bd 	.word	0x0801c2bd
 801c0c0:	0801c2bd 	.word	0x0801c2bd
 801c0c4:	0801c2bd 	.word	0x0801c2bd
 801c0c8:	0801c2bd 	.word	0x0801c2bd
 801c0cc:	0801c2bd 	.word	0x0801c2bd
 801c0d0:	0801c2bd 	.word	0x0801c2bd
 801c0d4:	0801c2bd 	.word	0x0801c2bd
 801c0d8:	0801c2bd 	.word	0x0801c2bd
 801c0dc:	0801c1b5 	.word	0x0801c1b5
 801c0e0:	0801c1d7 	.word	0x0801c1d7
 801c0e4:	0801c235 	.word	0x0801c235
 801c0e8:	0801c257 	.word	0x0801c257
 801c0ec:	0801c2bd 	.word	0x0801c2bd
 801c0f0:	0801c2bd 	.word	0x0801c2bd
 801c0f4:	0801c2bd 	.word	0x0801c2bd
 801c0f8:	0801c279 	.word	0x0801c279
 801c0fc:	0801c29b 	.word	0x0801c29b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801c100:	2300      	movs	r3, #0
 801c102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c10a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801c10e:	e0d9      	b.n	801c2c4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c114:	2b04      	cmp	r3, #4
 801c116:	d009      	beq.n	801c12c <dhcp_parse_reply+0x218>
 801c118:	4b3f      	ldr	r3, [pc, #252]	; (801c218 <dhcp_parse_reply+0x304>)
 801c11a:	f240 622e 	movw	r2, #1582	; 0x62e
 801c11e:	493f      	ldr	r1, [pc, #252]	; (801c21c <dhcp_parse_reply+0x308>)
 801c120:	483f      	ldr	r0, [pc, #252]	; (801c220 <dhcp_parse_reply+0x30c>)
 801c122:	f003 fbe3 	bl	801f8ec <iprintf>
 801c126:	f06f 0305 	mvn.w	r3, #5
 801c12a:	e1f2      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801c12c:	2306      	movs	r3, #6
 801c12e:	623b      	str	r3, [r7, #32]
        break;
 801c130:	e0c8      	b.n	801c2c4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801c132:	2304      	movs	r3, #4
 801c134:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801c138:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c13c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c140:	429a      	cmp	r2, r3
 801c142:	d209      	bcs.n	801c158 <dhcp_parse_reply+0x244>
 801c144:	4b34      	ldr	r3, [pc, #208]	; (801c218 <dhcp_parse_reply+0x304>)
 801c146:	f240 6233 	movw	r2, #1587	; 0x633
 801c14a:	4936      	ldr	r1, [pc, #216]	; (801c224 <dhcp_parse_reply+0x310>)
 801c14c:	4834      	ldr	r0, [pc, #208]	; (801c220 <dhcp_parse_reply+0x30c>)
 801c14e:	f003 fbcd 	bl	801f8ec <iprintf>
 801c152:	f06f 0305 	mvn.w	r3, #5
 801c156:	e1dc      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801c158:	2307      	movs	r3, #7
 801c15a:	623b      	str	r3, [r7, #32]
        break;
 801c15c:	e0b2      	b.n	801c2c4 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801c15e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c162:	f003 0303 	and.w	r3, r3, #3
 801c166:	b2db      	uxtb	r3, r3
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d009      	beq.n	801c180 <dhcp_parse_reply+0x26c>
 801c16c:	4b2a      	ldr	r3, [pc, #168]	; (801c218 <dhcp_parse_reply+0x304>)
 801c16e:	f240 6239 	movw	r2, #1593	; 0x639
 801c172:	492d      	ldr	r1, [pc, #180]	; (801c228 <dhcp_parse_reply+0x314>)
 801c174:	482a      	ldr	r0, [pc, #168]	; (801c220 <dhcp_parse_reply+0x30c>)
 801c176:	f003 fbb9 	bl	801f8ec <iprintf>
 801c17a:	f06f 0305 	mvn.w	r3, #5
 801c17e:	e1c8      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801c180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c184:	2b08      	cmp	r3, #8
 801c186:	bf28      	it	cs
 801c188:	2308      	movcs	r3, #8
 801c18a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801c18e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c192:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c196:	429a      	cmp	r2, r3
 801c198:	d209      	bcs.n	801c1ae <dhcp_parse_reply+0x29a>
 801c19a:	4b1f      	ldr	r3, [pc, #124]	; (801c218 <dhcp_parse_reply+0x304>)
 801c19c:	f240 623c 	movw	r2, #1596	; 0x63c
 801c1a0:	4920      	ldr	r1, [pc, #128]	; (801c224 <dhcp_parse_reply+0x310>)
 801c1a2:	481f      	ldr	r0, [pc, #124]	; (801c220 <dhcp_parse_reply+0x30c>)
 801c1a4:	f003 fba2 	bl	801f8ec <iprintf>
 801c1a8:	f06f 0305 	mvn.w	r3, #5
 801c1ac:	e1b1      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801c1ae:	2308      	movs	r3, #8
 801c1b0:	623b      	str	r3, [r7, #32]
        break;
 801c1b2:	e087      	b.n	801c2c4 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c1b8:	2b04      	cmp	r3, #4
 801c1ba:	d009      	beq.n	801c1d0 <dhcp_parse_reply+0x2bc>
 801c1bc:	4b16      	ldr	r3, [pc, #88]	; (801c218 <dhcp_parse_reply+0x304>)
 801c1be:	f240 6241 	movw	r2, #1601	; 0x641
 801c1c2:	4916      	ldr	r1, [pc, #88]	; (801c21c <dhcp_parse_reply+0x308>)
 801c1c4:	4816      	ldr	r0, [pc, #88]	; (801c220 <dhcp_parse_reply+0x30c>)
 801c1c6:	f003 fb91 	bl	801f8ec <iprintf>
 801c1ca:	f06f 0305 	mvn.w	r3, #5
 801c1ce:	e1a0      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801c1d0:	2303      	movs	r3, #3
 801c1d2:	623b      	str	r3, [r7, #32]
        break;
 801c1d4:	e076      	b.n	801c2c4 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801c1d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c1da:	2b01      	cmp	r3, #1
 801c1dc:	d009      	beq.n	801c1f2 <dhcp_parse_reply+0x2de>
 801c1de:	4b0e      	ldr	r3, [pc, #56]	; (801c218 <dhcp_parse_reply+0x304>)
 801c1e0:	f240 624f 	movw	r2, #1615	; 0x64f
 801c1e4:	4911      	ldr	r1, [pc, #68]	; (801c22c <dhcp_parse_reply+0x318>)
 801c1e6:	480e      	ldr	r0, [pc, #56]	; (801c220 <dhcp_parse_reply+0x30c>)
 801c1e8:	f003 fb80 	bl	801f8ec <iprintf>
 801c1ec:	f06f 0305 	mvn.w	r3, #5
 801c1f0:	e18f      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801c1f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c1f4:	2bf0      	cmp	r3, #240	; 0xf0
 801c1f6:	d009      	beq.n	801c20c <dhcp_parse_reply+0x2f8>
 801c1f8:	4b07      	ldr	r3, [pc, #28]	; (801c218 <dhcp_parse_reply+0x304>)
 801c1fa:	f240 6251 	movw	r2, #1617	; 0x651
 801c1fe:	490c      	ldr	r1, [pc, #48]	; (801c230 <dhcp_parse_reply+0x31c>)
 801c200:	4807      	ldr	r0, [pc, #28]	; (801c220 <dhcp_parse_reply+0x30c>)
 801c202:	f003 fb73 	bl	801f8ec <iprintf>
 801c206:	f06f 0305 	mvn.w	r3, #5
 801c20a:	e182      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801c20c:	2300      	movs	r3, #0
 801c20e:	623b      	str	r3, [r7, #32]
        break;
 801c210:	e058      	b.n	801c2c4 <dhcp_parse_reply+0x3b0>
 801c212:	bf00      	nop
 801c214:	20016bac 	.word	0x20016bac
 801c218:	08024888 	.word	0x08024888
 801c21c:	08024b10 	.word	0x08024b10
 801c220:	080248e8 	.word	0x080248e8
 801c224:	08024b1c 	.word	0x08024b1c
 801c228:	08024b30 	.word	0x08024b30
 801c22c:	08024b40 	.word	0x08024b40
 801c230:	08024b4c 	.word	0x08024b4c
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801c234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c238:	2b01      	cmp	r3, #1
 801c23a:	d009      	beq.n	801c250 <dhcp_parse_reply+0x33c>
 801c23c:	4ba5      	ldr	r3, [pc, #660]	; (801c4d4 <dhcp_parse_reply+0x5c0>)
 801c23e:	f240 6255 	movw	r2, #1621	; 0x655
 801c242:	49a5      	ldr	r1, [pc, #660]	; (801c4d8 <dhcp_parse_reply+0x5c4>)
 801c244:	48a5      	ldr	r0, [pc, #660]	; (801c4dc <dhcp_parse_reply+0x5c8>)
 801c246:	f003 fb51 	bl	801f8ec <iprintf>
 801c24a:	f06f 0305 	mvn.w	r3, #5
 801c24e:	e160      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801c250:	2301      	movs	r3, #1
 801c252:	623b      	str	r3, [r7, #32]
        break;
 801c254:	e036      	b.n	801c2c4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c25a:	2b04      	cmp	r3, #4
 801c25c:	d009      	beq.n	801c272 <dhcp_parse_reply+0x35e>
 801c25e:	4b9d      	ldr	r3, [pc, #628]	; (801c4d4 <dhcp_parse_reply+0x5c0>)
 801c260:	f240 6259 	movw	r2, #1625	; 0x659
 801c264:	499e      	ldr	r1, [pc, #632]	; (801c4e0 <dhcp_parse_reply+0x5cc>)
 801c266:	489d      	ldr	r0, [pc, #628]	; (801c4dc <dhcp_parse_reply+0x5c8>)
 801c268:	f003 fb40 	bl	801f8ec <iprintf>
 801c26c:	f06f 0305 	mvn.w	r3, #5
 801c270:	e14f      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801c272:	2302      	movs	r3, #2
 801c274:	623b      	str	r3, [r7, #32]
        break;
 801c276:	e025      	b.n	801c2c4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c27c:	2b04      	cmp	r3, #4
 801c27e:	d009      	beq.n	801c294 <dhcp_parse_reply+0x380>
 801c280:	4b94      	ldr	r3, [pc, #592]	; (801c4d4 <dhcp_parse_reply+0x5c0>)
 801c282:	f240 625d 	movw	r2, #1629	; 0x65d
 801c286:	4996      	ldr	r1, [pc, #600]	; (801c4e0 <dhcp_parse_reply+0x5cc>)
 801c288:	4894      	ldr	r0, [pc, #592]	; (801c4dc <dhcp_parse_reply+0x5c8>)
 801c28a:	f003 fb2f 	bl	801f8ec <iprintf>
 801c28e:	f06f 0305 	mvn.w	r3, #5
 801c292:	e13e      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T1;
 801c294:	2304      	movs	r3, #4
 801c296:	623b      	str	r3, [r7, #32]
        break;
 801c298:	e014      	b.n	801c2c4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c29a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c29e:	2b04      	cmp	r3, #4
 801c2a0:	d009      	beq.n	801c2b6 <dhcp_parse_reply+0x3a2>
 801c2a2:	4b8c      	ldr	r3, [pc, #560]	; (801c4d4 <dhcp_parse_reply+0x5c0>)
 801c2a4:	f240 6261 	movw	r2, #1633	; 0x661
 801c2a8:	498d      	ldr	r1, [pc, #564]	; (801c4e0 <dhcp_parse_reply+0x5cc>)
 801c2aa:	488c      	ldr	r0, [pc, #560]	; (801c4dc <dhcp_parse_reply+0x5c8>)
 801c2ac:	f003 fb1e 	bl	801f8ec <iprintf>
 801c2b0:	f06f 0305 	mvn.w	r3, #5
 801c2b4:	e12d      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T2;
 801c2b6:	2305      	movs	r3, #5
 801c2b8:	623b      	str	r3, [r7, #32]
        break;
 801c2ba:	e003      	b.n	801c2c4 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 801c2bc:	2300      	movs	r3, #0
 801c2be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801c2c2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801c2c4:	7dfb      	ldrb	r3, [r7, #23]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d103      	bne.n	801c2d2 <dhcp_parse_reply+0x3be>
      offset++;
 801c2ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c2cc:	3301      	adds	r3, #1
 801c2ce:	877b      	strh	r3, [r7, #58]	; 0x3a
 801c2d0:	e0a1      	b.n	801c416 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801c2d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c2d8:	4413      	add	r3, r2
 801c2da:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801c2de:	4293      	cmp	r3, r2
 801c2e0:	dd02      	ble.n	801c2e8 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 801c2e2:	f06f 0301 	mvn.w	r3, #1
 801c2e6:	e114      	b.n	801c512 <dhcp_parse_reply+0x5fe>
      }
      offset = (u16_t)(offset + len + 2);
 801c2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c2ec:	b29a      	uxth	r2, r3
 801c2ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c2f0:	4413      	add	r3, r2
 801c2f2:	b29b      	uxth	r3, r3
 801c2f4:	3302      	adds	r3, #2
 801c2f6:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801c2f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	f000 808a 	beq.w	801c416 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 801c302:	2300      	movs	r3, #0
 801c304:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801c306:	6a3b      	ldr	r3, [r7, #32]
 801c308:	2b00      	cmp	r3, #0
 801c30a:	db02      	blt.n	801c312 <dhcp_parse_reply+0x3fe>
 801c30c:	6a3b      	ldr	r3, [r7, #32]
 801c30e:	2b09      	cmp	r3, #9
 801c310:	dd06      	ble.n	801c320 <dhcp_parse_reply+0x40c>
 801c312:	4b70      	ldr	r3, [pc, #448]	; (801c4d4 <dhcp_parse_reply+0x5c0>)
 801c314:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801c318:	4972      	ldr	r1, [pc, #456]	; (801c4e4 <dhcp_parse_reply+0x5d0>)
 801c31a:	4870      	ldr	r0, [pc, #448]	; (801c4dc <dhcp_parse_reply+0x5c8>)
 801c31c:	f003 fae6 	bl	801f8ec <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801c320:	4a71      	ldr	r2, [pc, #452]	; (801c4e8 <dhcp_parse_reply+0x5d4>)
 801c322:	6a3b      	ldr	r3, [r7, #32]
 801c324:	4413      	add	r3, r2
 801c326:	781b      	ldrb	r3, [r3, #0]
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d174      	bne.n	801c416 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 801c32c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c330:	2b04      	cmp	r3, #4
 801c332:	bf28      	it	cs
 801c334:	2304      	movcs	r3, #4
 801c336:	b2db      	uxtb	r3, r3
 801c338:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c33a:	8bfb      	ldrh	r3, [r7, #30]
 801c33c:	8aba      	ldrh	r2, [r7, #20]
 801c33e:	f107 0108 	add.w	r1, r7, #8
 801c342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c344:	f7f7 faae 	bl	80138a4 <pbuf_copy_partial>
 801c348:	4603      	mov	r3, r0
 801c34a:	461a      	mov	r2, r3
 801c34c:	8abb      	ldrh	r3, [r7, #20]
 801c34e:	4293      	cmp	r3, r2
 801c350:	d002      	beq.n	801c358 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801c352:	f06f 0301 	mvn.w	r3, #1
 801c356:	e0dc      	b.n	801c512 <dhcp_parse_reply+0x5fe>
          }
          if (decode_len > 4) {
 801c358:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c35c:	2b04      	cmp	r3, #4
 801c35e:	d933      	bls.n	801c3c8 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801c360:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c364:	f003 0303 	and.w	r3, r3, #3
 801c368:	b2db      	uxtb	r3, r3
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d009      	beq.n	801c382 <dhcp_parse_reply+0x46e>
 801c36e:	4b59      	ldr	r3, [pc, #356]	; (801c4d4 <dhcp_parse_reply+0x5c0>)
 801c370:	f240 6281 	movw	r2, #1665	; 0x681
 801c374:	495d      	ldr	r1, [pc, #372]	; (801c4ec <dhcp_parse_reply+0x5d8>)
 801c376:	4859      	ldr	r0, [pc, #356]	; (801c4dc <dhcp_parse_reply+0x5c8>)
 801c378:	f003 fab8 	bl	801f8ec <iprintf>
 801c37c:	f06f 0305 	mvn.w	r3, #5
 801c380:	e0c7      	b.n	801c512 <dhcp_parse_reply+0x5fe>
            dhcp_got_option(dhcp, decode_idx);
 801c382:	4a59      	ldr	r2, [pc, #356]	; (801c4e8 <dhcp_parse_reply+0x5d4>)
 801c384:	6a3b      	ldr	r3, [r7, #32]
 801c386:	4413      	add	r3, r2
 801c388:	2201      	movs	r2, #1
 801c38a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801c38c:	68bb      	ldr	r3, [r7, #8]
 801c38e:	4618      	mov	r0, r3
 801c390:	f7f4 fd09 	bl	8010da6 <lwip_htonl>
 801c394:	4602      	mov	r2, r0
 801c396:	4956      	ldr	r1, [pc, #344]	; (801c4f0 <dhcp_parse_reply+0x5dc>)
 801c398:	6a3b      	ldr	r3, [r7, #32]
 801c39a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801c39e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c3a2:	3b04      	subs	r3, #4
 801c3a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801c3a8:	8bfb      	ldrh	r3, [r7, #30]
 801c3aa:	3304      	adds	r3, #4
 801c3ac:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801c3ae:	8a7a      	ldrh	r2, [r7, #18]
 801c3b0:	8bfb      	ldrh	r3, [r7, #30]
 801c3b2:	429a      	cmp	r2, r3
 801c3b4:	d202      	bcs.n	801c3bc <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801c3b6:	f06f 0301 	mvn.w	r3, #1
 801c3ba:	e0aa      	b.n	801c512 <dhcp_parse_reply+0x5fe>
            }
            val_offset = next_val_offset;
 801c3bc:	8a7b      	ldrh	r3, [r7, #18]
 801c3be:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801c3c0:	6a3b      	ldr	r3, [r7, #32]
 801c3c2:	3301      	adds	r3, #1
 801c3c4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801c3c6:	e79e      	b.n	801c306 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801c3c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c3cc:	2b04      	cmp	r3, #4
 801c3ce:	d106      	bne.n	801c3de <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 801c3d0:	68bb      	ldr	r3, [r7, #8]
 801c3d2:	4618      	mov	r0, r3
 801c3d4:	f7f4 fce7 	bl	8010da6 <lwip_htonl>
 801c3d8:	4603      	mov	r3, r0
 801c3da:	60bb      	str	r3, [r7, #8]
 801c3dc:	e011      	b.n	801c402 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801c3de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c3e2:	2b01      	cmp	r3, #1
 801c3e4:	d009      	beq.n	801c3fa <dhcp_parse_reply+0x4e6>
 801c3e6:	4b3b      	ldr	r3, [pc, #236]	; (801c4d4 <dhcp_parse_reply+0x5c0>)
 801c3e8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801c3ec:	4941      	ldr	r1, [pc, #260]	; (801c4f4 <dhcp_parse_reply+0x5e0>)
 801c3ee:	483b      	ldr	r0, [pc, #236]	; (801c4dc <dhcp_parse_reply+0x5c8>)
 801c3f0:	f003 fa7c 	bl	801f8ec <iprintf>
 801c3f4:	f06f 0305 	mvn.w	r3, #5
 801c3f8:	e08b      	b.n	801c512 <dhcp_parse_reply+0x5fe>
            value = ((u8_t *)&value)[0];
 801c3fa:	f107 0308 	add.w	r3, r7, #8
 801c3fe:	781b      	ldrb	r3, [r3, #0]
 801c400:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801c402:	4a39      	ldr	r2, [pc, #228]	; (801c4e8 <dhcp_parse_reply+0x5d4>)
 801c404:	6a3b      	ldr	r3, [r7, #32]
 801c406:	4413      	add	r3, r2
 801c408:	2201      	movs	r2, #1
 801c40a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801c40c:	68ba      	ldr	r2, [r7, #8]
 801c40e:	4938      	ldr	r1, [pc, #224]	; (801c4f0 <dhcp_parse_reply+0x5dc>)
 801c410:	6a3b      	ldr	r3, [r7, #32]
 801c412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c418:	895b      	ldrh	r3, [r3, #10]
 801c41a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c41c:	429a      	cmp	r2, r3
 801c41e:	d324      	bcc.n	801c46a <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 801c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c422:	895b      	ldrh	r3, [r3, #10]
 801c424:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c426:	1ad3      	subs	r3, r2, r3
 801c428:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c42c:	895b      	ldrh	r3, [r3, #10]
 801c42e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801c430:	1ad3      	subs	r3, r2, r3
 801c432:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801c434:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c436:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801c438:	429a      	cmp	r2, r3
 801c43a:	d213      	bcs.n	801c464 <dhcp_parse_reply+0x550>
        q = q->next;
 801c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c444:	2b00      	cmp	r3, #0
 801c446:	d109      	bne.n	801c45c <dhcp_parse_reply+0x548>
 801c448:	4b22      	ldr	r3, [pc, #136]	; (801c4d4 <dhcp_parse_reply+0x5c0>)
 801c44a:	f240 629d 	movw	r2, #1693	; 0x69d
 801c44e:	492a      	ldr	r1, [pc, #168]	; (801c4f8 <dhcp_parse_reply+0x5e4>)
 801c450:	4822      	ldr	r0, [pc, #136]	; (801c4dc <dhcp_parse_reply+0x5c8>)
 801c452:	f003 fa4b 	bl	801f8ec <iprintf>
 801c456:	f06f 0305 	mvn.w	r3, #5
 801c45a:	e05a      	b.n	801c512 <dhcp_parse_reply+0x5fe>
        options = (u8_t *)q->payload;
 801c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c45e:	685b      	ldr	r3, [r3, #4]
 801c460:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c462:	e002      	b.n	801c46a <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801c464:	f06f 0301 	mvn.w	r3, #1
 801c468:	e053      	b.n	801c512 <dhcp_parse_reply+0x5fe>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801c46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d00a      	beq.n	801c486 <dhcp_parse_reply+0x572>
 801c470:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c472:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801c474:	429a      	cmp	r2, r3
 801c476:	d206      	bcs.n	801c486 <dhcp_parse_reply+0x572>
 801c478:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c47a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c47c:	4413      	add	r3, r2
 801c47e:	781b      	ldrb	r3, [r3, #0]
 801c480:	2bff      	cmp	r3, #255	; 0xff
 801c482:	f47f ad8a 	bne.w	801bf9a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801c486:	4b18      	ldr	r3, [pc, #96]	; (801c4e8 <dhcp_parse_reply+0x5d4>)
 801c488:	781b      	ldrb	r3, [r3, #0]
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d018      	beq.n	801c4c0 <dhcp_parse_reply+0x5ac>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801c48e:	4b18      	ldr	r3, [pc, #96]	; (801c4f0 <dhcp_parse_reply+0x5dc>)
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801c494:	4b14      	ldr	r3, [pc, #80]	; (801c4e8 <dhcp_parse_reply+0x5d4>)
 801c496:	2200      	movs	r2, #0
 801c498:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	2b01      	cmp	r3, #1
 801c49e:	d102      	bne.n	801c4a6 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801c4a0:	2301      	movs	r3, #1
 801c4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c4a4:	e00c      	b.n	801c4c0 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	2b02      	cmp	r3, #2
 801c4aa:	d102      	bne.n	801c4b2 <dhcp_parse_reply+0x59e>
      parse_sname_as_options = 1;
 801c4ac:	2301      	movs	r3, #1
 801c4ae:	62bb      	str	r3, [r7, #40]	; 0x28
 801c4b0:	e006      	b.n	801c4c0 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	2b03      	cmp	r3, #3
 801c4b6:	d103      	bne.n	801c4c0 <dhcp_parse_reply+0x5ac>
      parse_sname_as_options = 1;
 801c4b8:	2301      	movs	r3, #1
 801c4ba:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801c4bc:	2301      	movs	r3, #1
 801c4be:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801c4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d01a      	beq.n	801c4fc <dhcp_parse_reply+0x5e8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801c4c6:	2300      	movs	r3, #0
 801c4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801c4ca:	236c      	movs	r3, #108	; 0x6c
 801c4cc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801c4ce:	23ec      	movs	r3, #236	; 0xec
 801c4d0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801c4d2:	e53c      	b.n	801bf4e <dhcp_parse_reply+0x3a>
 801c4d4:	08024888 	.word	0x08024888
 801c4d8:	08024b40 	.word	0x08024b40
 801c4dc:	080248e8 	.word	0x080248e8
 801c4e0:	08024b10 	.word	0x08024b10
 801c4e4:	08024b64 	.word	0x08024b64
 801c4e8:	20016bac 	.word	0x20016bac
 801c4ec:	08024b78 	.word	0x08024b78
 801c4f0:	20016bb8 	.word	0x20016bb8
 801c4f4:	08024b90 	.word	0x08024b90
 801c4f8:	08024ba4 	.word	0x08024ba4
  } else if (parse_sname_as_options) {
 801c4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d006      	beq.n	801c510 <dhcp_parse_reply+0x5fc>
    parse_sname_as_options = 0;
 801c502:	2300      	movs	r3, #0
 801c504:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801c506:	232c      	movs	r3, #44	; 0x2c
 801c508:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801c50a:	236c      	movs	r3, #108	; 0x6c
 801c50c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801c50e:	e51e      	b.n	801bf4e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801c510:	2300      	movs	r3, #0
}
 801c512:	4618      	mov	r0, r3
 801c514:	3740      	adds	r7, #64	; 0x40
 801c516:	46bd      	mov	sp, r7
 801c518:	bd80      	pop	{r7, pc}
 801c51a:	bf00      	nop

0801c51c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801c51c:	b580      	push	{r7, lr}
 801c51e:	b08a      	sub	sp, #40	; 0x28
 801c520:	af00      	add	r7, sp, #0
 801c522:	60f8      	str	r0, [r7, #12]
 801c524:	60b9      	str	r1, [r7, #8]
 801c526:	607a      	str	r2, [r7, #4]
 801c528:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801c52a:	4b60      	ldr	r3, [pc, #384]	; (801c6ac <dhcp_recv+0x190>)
 801c52c:	685b      	ldr	r3, [r3, #4]
 801c52e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c530:	6a3b      	ldr	r3, [r7, #32]
 801c532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c534:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	685b      	ldr	r3, [r3, #4]
 801c53a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801c53c:	69fb      	ldr	r3, [r7, #28]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	f000 809d 	beq.w	801c67e <dhcp_recv+0x162>
 801c544:	69fb      	ldr	r3, [r7, #28]
 801c546:	791b      	ldrb	r3, [r3, #4]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	f000 8098 	beq.w	801c67e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	895b      	ldrh	r3, [r3, #10]
 801c552:	2b2b      	cmp	r3, #43	; 0x2b
 801c554:	f240 8095 	bls.w	801c682 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801c558:	69bb      	ldr	r3, [r7, #24]
 801c55a:	781b      	ldrb	r3, [r3, #0]
 801c55c:	2b02      	cmp	r3, #2
 801c55e:	f040 8092 	bne.w	801c686 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c562:	2300      	movs	r3, #0
 801c564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c568:	e012      	b.n	801c590 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801c56a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c56e:	6a3a      	ldr	r2, [r7, #32]
 801c570:	4413      	add	r3, r2
 801c572:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801c576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c57a:	69b9      	ldr	r1, [r7, #24]
 801c57c:	440b      	add	r3, r1
 801c57e:	7f1b      	ldrb	r3, [r3, #28]
 801c580:	429a      	cmp	r2, r3
 801c582:	f040 8082 	bne.w	801c68a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c58a:	3301      	adds	r3, #1
 801c58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c590:	6a3b      	ldr	r3, [r7, #32]
 801c592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c596:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c59a:	429a      	cmp	r2, r3
 801c59c:	d203      	bcs.n	801c5a6 <dhcp_recv+0x8a>
 801c59e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c5a2:	2b05      	cmp	r3, #5
 801c5a4:	d9e1      	bls.n	801c56a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801c5a6:	69bb      	ldr	r3, [r7, #24]
 801c5a8:	685b      	ldr	r3, [r3, #4]
 801c5aa:	4618      	mov	r0, r3
 801c5ac:	f7f4 fbfb 	bl	8010da6 <lwip_htonl>
 801c5b0:	4602      	mov	r2, r0
 801c5b2:	69fb      	ldr	r3, [r7, #28]
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	429a      	cmp	r2, r3
 801c5b8:	d169      	bne.n	801c68e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801c5ba:	69f9      	ldr	r1, [r7, #28]
 801c5bc:	6878      	ldr	r0, [r7, #4]
 801c5be:	f7ff fca9 	bl	801bf14 <dhcp_parse_reply>
 801c5c2:	4603      	mov	r3, r0
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d164      	bne.n	801c692 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801c5c8:	4b39      	ldr	r3, [pc, #228]	; (801c6b0 <dhcp_recv+0x194>)
 801c5ca:	785b      	ldrb	r3, [r3, #1]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d062      	beq.n	801c696 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	685b      	ldr	r3, [r3, #4]
 801c5d4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801c5d6:	4b37      	ldr	r3, [pc, #220]	; (801c6b4 <dhcp_recv+0x198>)
 801c5d8:	685b      	ldr	r3, [r3, #4]
 801c5da:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801c5dc:	7cfb      	ldrb	r3, [r7, #19]
 801c5de:	2b05      	cmp	r3, #5
 801c5e0:	d12a      	bne.n	801c638 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801c5e2:	69fb      	ldr	r3, [r7, #28]
 801c5e4:	795b      	ldrb	r3, [r3, #5]
 801c5e6:	2b01      	cmp	r3, #1
 801c5e8:	d112      	bne.n	801c610 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801c5ea:	6979      	ldr	r1, [r7, #20]
 801c5ec:	6a38      	ldr	r0, [r7, #32]
 801c5ee:	f7fe fdc7 	bl	801b180 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801c5f2:	6a3b      	ldr	r3, [r7, #32]
 801c5f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c5f8:	f003 0308 	and.w	r3, r3, #8
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d003      	beq.n	801c608 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801c600:	6a38      	ldr	r0, [r7, #32]
 801c602:	f7fe fb37 	bl	801ac74 <dhcp_check>
 801c606:	e049      	b.n	801c69c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801c608:	6a38      	ldr	r0, [r7, #32]
 801c60a:	f7ff f837 	bl	801b67c <dhcp_bind>
 801c60e:	e045      	b.n	801c69c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801c610:	69fb      	ldr	r3, [r7, #28]
 801c612:	795b      	ldrb	r3, [r3, #5]
 801c614:	2b03      	cmp	r3, #3
 801c616:	d007      	beq.n	801c628 <dhcp_recv+0x10c>
 801c618:	69fb      	ldr	r3, [r7, #28]
 801c61a:	795b      	ldrb	r3, [r3, #5]
 801c61c:	2b04      	cmp	r3, #4
 801c61e:	d003      	beq.n	801c628 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801c620:	69fb      	ldr	r3, [r7, #28]
 801c622:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801c624:	2b05      	cmp	r3, #5
 801c626:	d139      	bne.n	801c69c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801c628:	6979      	ldr	r1, [r7, #20]
 801c62a:	6a38      	ldr	r0, [r7, #32]
 801c62c:	f7fe fda8 	bl	801b180 <dhcp_handle_ack>
      dhcp_bind(netif);
 801c630:	6a38      	ldr	r0, [r7, #32]
 801c632:	f7ff f823 	bl	801b67c <dhcp_bind>
 801c636:	e031      	b.n	801c69c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801c638:	7cfb      	ldrb	r3, [r7, #19]
 801c63a:	2b06      	cmp	r3, #6
 801c63c:	d113      	bne.n	801c666 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801c63e:	69fb      	ldr	r3, [r7, #28]
 801c640:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801c642:	2b03      	cmp	r3, #3
 801c644:	d00b      	beq.n	801c65e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801c646:	69fb      	ldr	r3, [r7, #28]
 801c648:	795b      	ldrb	r3, [r3, #5]
 801c64a:	2b01      	cmp	r3, #1
 801c64c:	d007      	beq.n	801c65e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801c64e:	69fb      	ldr	r3, [r7, #28]
 801c650:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801c652:	2b04      	cmp	r3, #4
 801c654:	d003      	beq.n	801c65e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801c656:	69fb      	ldr	r3, [r7, #28]
 801c658:	795b      	ldrb	r3, [r3, #5]
 801c65a:	2b05      	cmp	r3, #5
 801c65c:	d103      	bne.n	801c666 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801c65e:	6a38      	ldr	r0, [r7, #32]
 801c660:	f7fe faee 	bl	801ac40 <dhcp_handle_nak>
 801c664:	e01a      	b.n	801c69c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801c666:	7cfb      	ldrb	r3, [r7, #19]
 801c668:	2b02      	cmp	r3, #2
 801c66a:	d116      	bne.n	801c69a <dhcp_recv+0x17e>
 801c66c:	69fb      	ldr	r3, [r7, #28]
 801c66e:	795b      	ldrb	r3, [r3, #5]
 801c670:	2b06      	cmp	r3, #6
 801c672:	d112      	bne.n	801c69a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801c674:	6979      	ldr	r1, [r7, #20]
 801c676:	6a38      	ldr	r0, [r7, #32]
 801c678:	f7fe fb30 	bl	801acdc <dhcp_handle_offer>
 801c67c:	e00e      	b.n	801c69c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801c67e:	bf00      	nop
 801c680:	e00c      	b.n	801c69c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801c682:	bf00      	nop
 801c684:	e00a      	b.n	801c69c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801c686:	bf00      	nop
 801c688:	e008      	b.n	801c69c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801c68a:	bf00      	nop
 801c68c:	e006      	b.n	801c69c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801c68e:	bf00      	nop
 801c690:	e004      	b.n	801c69c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801c692:	bf00      	nop
 801c694:	e002      	b.n	801c69c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801c696:	bf00      	nop
 801c698:	e000      	b.n	801c69c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801c69a:	bf00      	nop
  pbuf_free(p);
 801c69c:	6878      	ldr	r0, [r7, #4]
 801c69e:	f7f6 fefb 	bl	8013498 <pbuf_free>
}
 801c6a2:	bf00      	nop
 801c6a4:	3728      	adds	r7, #40	; 0x28
 801c6a6:	46bd      	mov	sp, r7
 801c6a8:	bd80      	pop	{r7, pc}
 801c6aa:	bf00      	nop
 801c6ac:	200133b0 	.word	0x200133b0
 801c6b0:	20016bac 	.word	0x20016bac
 801c6b4:	20016bb8 	.word	0x20016bb8

0801c6b8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	b088      	sub	sp, #32
 801c6bc:	af00      	add	r7, sp, #0
 801c6be:	60f8      	str	r0, [r7, #12]
 801c6c0:	60b9      	str	r1, [r7, #8]
 801c6c2:	603b      	str	r3, [r7, #0]
 801c6c4:	4613      	mov	r3, r2
 801c6c6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d108      	bne.n	801c6e0 <dhcp_create_msg+0x28>
 801c6ce:	4b5f      	ldr	r3, [pc, #380]	; (801c84c <dhcp_create_msg+0x194>)
 801c6d0:	f240 7269 	movw	r2, #1897	; 0x769
 801c6d4:	495e      	ldr	r1, [pc, #376]	; (801c850 <dhcp_create_msg+0x198>)
 801c6d6:	485f      	ldr	r0, [pc, #380]	; (801c854 <dhcp_create_msg+0x19c>)
 801c6d8:	f003 f908 	bl	801f8ec <iprintf>
 801c6dc:	2300      	movs	r3, #0
 801c6de:	e0b1      	b.n	801c844 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801c6e0:	68bb      	ldr	r3, [r7, #8]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d108      	bne.n	801c6f8 <dhcp_create_msg+0x40>
 801c6e6:	4b59      	ldr	r3, [pc, #356]	; (801c84c <dhcp_create_msg+0x194>)
 801c6e8:	f240 726a 	movw	r2, #1898	; 0x76a
 801c6ec:	495a      	ldr	r1, [pc, #360]	; (801c858 <dhcp_create_msg+0x1a0>)
 801c6ee:	4859      	ldr	r0, [pc, #356]	; (801c854 <dhcp_create_msg+0x19c>)
 801c6f0:	f003 f8fc 	bl	801f8ec <iprintf>
 801c6f4:	2300      	movs	r3, #0
 801c6f6:	e0a5      	b.n	801c844 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801c6f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c6fc:	f44f 719a 	mov.w	r1, #308	; 0x134
 801c700:	2036      	movs	r0, #54	; 0x36
 801c702:	f7f6 fbe5 	bl	8012ed0 <pbuf_alloc>
 801c706:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801c708:	69bb      	ldr	r3, [r7, #24]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d101      	bne.n	801c712 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801c70e:	2300      	movs	r3, #0
 801c710:	e098      	b.n	801c844 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801c712:	69bb      	ldr	r3, [r7, #24]
 801c714:	895b      	ldrh	r3, [r3, #10]
 801c716:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801c71a:	d206      	bcs.n	801c72a <dhcp_create_msg+0x72>
 801c71c:	4b4b      	ldr	r3, [pc, #300]	; (801c84c <dhcp_create_msg+0x194>)
 801c71e:	f240 7271 	movw	r2, #1905	; 0x771
 801c722:	494e      	ldr	r1, [pc, #312]	; (801c85c <dhcp_create_msg+0x1a4>)
 801c724:	484b      	ldr	r0, [pc, #300]	; (801c854 <dhcp_create_msg+0x19c>)
 801c726:	f003 f8e1 	bl	801f8ec <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801c72a:	79fb      	ldrb	r3, [r7, #7]
 801c72c:	2b03      	cmp	r3, #3
 801c72e:	d103      	bne.n	801c738 <dhcp_create_msg+0x80>
 801c730:	68bb      	ldr	r3, [r7, #8]
 801c732:	795b      	ldrb	r3, [r3, #5]
 801c734:	2b03      	cmp	r3, #3
 801c736:	d10d      	bne.n	801c754 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801c738:	68bb      	ldr	r3, [r7, #8]
 801c73a:	799b      	ldrb	r3, [r3, #6]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d105      	bne.n	801c74c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801c740:	f003 f990 	bl	801fa64 <rand>
 801c744:	4603      	mov	r3, r0
 801c746:	461a      	mov	r2, r3
 801c748:	4b45      	ldr	r3, [pc, #276]	; (801c860 <dhcp_create_msg+0x1a8>)
 801c74a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801c74c:	4b44      	ldr	r3, [pc, #272]	; (801c860 <dhcp_create_msg+0x1a8>)
 801c74e:	681a      	ldr	r2, [r3, #0]
 801c750:	68bb      	ldr	r3, [r7, #8]
 801c752:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801c754:	69bb      	ldr	r3, [r7, #24]
 801c756:	685b      	ldr	r3, [r3, #4]
 801c758:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801c75a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801c75e:	2100      	movs	r1, #0
 801c760:	6978      	ldr	r0, [r7, #20]
 801c762:	f003 f801 	bl	801f768 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801c766:	697b      	ldr	r3, [r7, #20]
 801c768:	2201      	movs	r2, #1
 801c76a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801c76c:	697b      	ldr	r3, [r7, #20]
 801c76e:	2201      	movs	r2, #1
 801c770:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801c778:	697b      	ldr	r3, [r7, #20]
 801c77a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801c77c:	68bb      	ldr	r3, [r7, #8]
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	4618      	mov	r0, r3
 801c782:	f7f4 fb10 	bl	8010da6 <lwip_htonl>
 801c786:	4602      	mov	r2, r0
 801c788:	697b      	ldr	r3, [r7, #20]
 801c78a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801c78c:	79fb      	ldrb	r3, [r7, #7]
 801c78e:	2b08      	cmp	r3, #8
 801c790:	d010      	beq.n	801c7b4 <dhcp_create_msg+0xfc>
 801c792:	79fb      	ldrb	r3, [r7, #7]
 801c794:	2b04      	cmp	r3, #4
 801c796:	d00d      	beq.n	801c7b4 <dhcp_create_msg+0xfc>
 801c798:	79fb      	ldrb	r3, [r7, #7]
 801c79a:	2b07      	cmp	r3, #7
 801c79c:	d00a      	beq.n	801c7b4 <dhcp_create_msg+0xfc>
 801c79e:	79fb      	ldrb	r3, [r7, #7]
 801c7a0:	2b03      	cmp	r3, #3
 801c7a2:	d10c      	bne.n	801c7be <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801c7a4:	68bb      	ldr	r3, [r7, #8]
 801c7a6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801c7a8:	2b05      	cmp	r3, #5
 801c7aa:	d003      	beq.n	801c7b4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801c7ac:	68bb      	ldr	r3, [r7, #8]
 801c7ae:	795b      	ldrb	r3, [r3, #5]
 801c7b0:	2b04      	cmp	r3, #4
 801c7b2:	d104      	bne.n	801c7be <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	3304      	adds	r3, #4
 801c7b8:	681a      	ldr	r2, [r3, #0]
 801c7ba:	697b      	ldr	r3, [r7, #20]
 801c7bc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c7be:	2300      	movs	r3, #0
 801c7c0:	83fb      	strh	r3, [r7, #30]
 801c7c2:	e00c      	b.n	801c7de <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801c7c4:	8bfa      	ldrh	r2, [r7, #30]
 801c7c6:	8bfb      	ldrh	r3, [r7, #30]
 801c7c8:	68f9      	ldr	r1, [r7, #12]
 801c7ca:	440a      	add	r2, r1
 801c7cc:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801c7d0:	697a      	ldr	r2, [r7, #20]
 801c7d2:	4413      	add	r3, r2
 801c7d4:	460a      	mov	r2, r1
 801c7d6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c7d8:	8bfb      	ldrh	r3, [r7, #30]
 801c7da:	3301      	adds	r3, #1
 801c7dc:	83fb      	strh	r3, [r7, #30]
 801c7de:	8bfb      	ldrh	r3, [r7, #30]
 801c7e0:	2b05      	cmp	r3, #5
 801c7e2:	d9ef      	bls.n	801c7c4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801c7e4:	697b      	ldr	r3, [r7, #20]
 801c7e6:	2200      	movs	r2, #0
 801c7e8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801c7ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801c7f0:	2200      	movs	r2, #0
 801c7f2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801c7f6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801c7fa:	2200      	movs	r2, #0
 801c7fc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801c800:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801c804:	2200      	movs	r2, #0
 801c806:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801c80a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801c80e:	697b      	ldr	r3, [r7, #20]
 801c810:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c814:	2301      	movs	r3, #1
 801c816:	2235      	movs	r2, #53	; 0x35
 801c818:	2000      	movs	r0, #0
 801c81a:	f7ff faab 	bl	801bd74 <dhcp_option>
 801c81e:	4603      	mov	r3, r0
 801c820:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801c822:	697b      	ldr	r3, [r7, #20]
 801c824:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c828:	79fa      	ldrb	r2, [r7, #7]
 801c82a:	8a7b      	ldrh	r3, [r7, #18]
 801c82c:	4618      	mov	r0, r3
 801c82e:	f7ff fad5 	bl	801bddc <dhcp_option_byte>
 801c832:	4603      	mov	r3, r0
 801c834:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801c836:	683b      	ldr	r3, [r7, #0]
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d002      	beq.n	801c842 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801c83c:	683b      	ldr	r3, [r7, #0]
 801c83e:	8a7a      	ldrh	r2, [r7, #18]
 801c840:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801c842:	69bb      	ldr	r3, [r7, #24]
}
 801c844:	4618      	mov	r0, r3
 801c846:	3720      	adds	r7, #32
 801c848:	46bd      	mov	sp, r7
 801c84a:	bd80      	pop	{r7, pc}
 801c84c:	08024888 	.word	0x08024888
 801c850:	08024bb8 	.word	0x08024bb8
 801c854:	080248e8 	.word	0x080248e8
 801c858:	08024bd8 	.word	0x08024bd8
 801c85c:	08024bf8 	.word	0x08024bf8
 801c860:	2000554c 	.word	0x2000554c

0801c864 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801c864:	b580      	push	{r7, lr}
 801c866:	b084      	sub	sp, #16
 801c868:	af00      	add	r7, sp, #0
 801c86a:	4603      	mov	r3, r0
 801c86c:	60b9      	str	r1, [r7, #8]
 801c86e:	607a      	str	r2, [r7, #4]
 801c870:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801c872:	89fb      	ldrh	r3, [r7, #14]
 801c874:	1c5a      	adds	r2, r3, #1
 801c876:	81fa      	strh	r2, [r7, #14]
 801c878:	461a      	mov	r2, r3
 801c87a:	68bb      	ldr	r3, [r7, #8]
 801c87c:	4413      	add	r3, r2
 801c87e:	22ff      	movs	r2, #255	; 0xff
 801c880:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801c882:	e007      	b.n	801c894 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801c884:	89fb      	ldrh	r3, [r7, #14]
 801c886:	1c5a      	adds	r2, r3, #1
 801c888:	81fa      	strh	r2, [r7, #14]
 801c88a:	461a      	mov	r2, r3
 801c88c:	68bb      	ldr	r3, [r7, #8]
 801c88e:	4413      	add	r3, r2
 801c890:	2200      	movs	r2, #0
 801c892:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801c894:	89fb      	ldrh	r3, [r7, #14]
 801c896:	2b43      	cmp	r3, #67	; 0x43
 801c898:	d904      	bls.n	801c8a4 <dhcp_option_trailer+0x40>
 801c89a:	89fb      	ldrh	r3, [r7, #14]
 801c89c:	f003 0303 	and.w	r3, r3, #3
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d002      	beq.n	801c8aa <dhcp_option_trailer+0x46>
 801c8a4:	89fb      	ldrh	r3, [r7, #14]
 801c8a6:	2b43      	cmp	r3, #67	; 0x43
 801c8a8:	d9ec      	bls.n	801c884 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801c8aa:	89fb      	ldrh	r3, [r7, #14]
 801c8ac:	33f0      	adds	r3, #240	; 0xf0
 801c8ae:	b29b      	uxth	r3, r3
 801c8b0:	4619      	mov	r1, r3
 801c8b2:	6878      	ldr	r0, [r7, #4]
 801c8b4:	f7f6 fc6a 	bl	801318c <pbuf_realloc>
}
 801c8b8:	bf00      	nop
 801c8ba:	3710      	adds	r7, #16
 801c8bc:	46bd      	mov	sp, r7
 801c8be:	bd80      	pop	{r7, pc}

0801c8c0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801c8c0:	b480      	push	{r7}
 801c8c2:	b085      	sub	sp, #20
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d017      	beq.n	801c8fe <dhcp_supplied_address+0x3e>
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d013      	beq.n	801c8fe <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8da:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	795b      	ldrb	r3, [r3, #5]
 801c8e0:	2b0a      	cmp	r3, #10
 801c8e2:	d007      	beq.n	801c8f4 <dhcp_supplied_address+0x34>
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	795b      	ldrb	r3, [r3, #5]
 801c8e8:	2b05      	cmp	r3, #5
 801c8ea:	d003      	beq.n	801c8f4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801c8f0:	2b04      	cmp	r3, #4
 801c8f2:	d101      	bne.n	801c8f8 <dhcp_supplied_address+0x38>
 801c8f4:	2301      	movs	r3, #1
 801c8f6:	e000      	b.n	801c8fa <dhcp_supplied_address+0x3a>
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	b2db      	uxtb	r3, r3
 801c8fc:	e000      	b.n	801c900 <dhcp_supplied_address+0x40>
  }
  return 0;
 801c8fe:	2300      	movs	r3, #0
}
 801c900:	4618      	mov	r0, r3
 801c902:	3714      	adds	r7, #20
 801c904:	46bd      	mov	sp, r7
 801c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c90a:	4770      	bx	lr

0801c90c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c90c:	b580      	push	{r7, lr}
 801c90e:	b082      	sub	sp, #8
 801c910:	af00      	add	r7, sp, #0
 801c912:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c914:	4915      	ldr	r1, [pc, #84]	; (801c96c <etharp_free_entry+0x60>)
 801c916:	687a      	ldr	r2, [r7, #4]
 801c918:	4613      	mov	r3, r2
 801c91a:	005b      	lsls	r3, r3, #1
 801c91c:	4413      	add	r3, r2
 801c91e:	00db      	lsls	r3, r3, #3
 801c920:	440b      	add	r3, r1
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	2b00      	cmp	r3, #0
 801c926:	d013      	beq.n	801c950 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c928:	4910      	ldr	r1, [pc, #64]	; (801c96c <etharp_free_entry+0x60>)
 801c92a:	687a      	ldr	r2, [r7, #4]
 801c92c:	4613      	mov	r3, r2
 801c92e:	005b      	lsls	r3, r3, #1
 801c930:	4413      	add	r3, r2
 801c932:	00db      	lsls	r3, r3, #3
 801c934:	440b      	add	r3, r1
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	4618      	mov	r0, r3
 801c93a:	f7f6 fdad 	bl	8013498 <pbuf_free>
    arp_table[i].q = NULL;
 801c93e:	490b      	ldr	r1, [pc, #44]	; (801c96c <etharp_free_entry+0x60>)
 801c940:	687a      	ldr	r2, [r7, #4]
 801c942:	4613      	mov	r3, r2
 801c944:	005b      	lsls	r3, r3, #1
 801c946:	4413      	add	r3, r2
 801c948:	00db      	lsls	r3, r3, #3
 801c94a:	440b      	add	r3, r1
 801c94c:	2200      	movs	r2, #0
 801c94e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c950:	4906      	ldr	r1, [pc, #24]	; (801c96c <etharp_free_entry+0x60>)
 801c952:	687a      	ldr	r2, [r7, #4]
 801c954:	4613      	mov	r3, r2
 801c956:	005b      	lsls	r3, r3, #1
 801c958:	4413      	add	r3, r2
 801c95a:	00db      	lsls	r3, r3, #3
 801c95c:	440b      	add	r3, r1
 801c95e:	3314      	adds	r3, #20
 801c960:	2200      	movs	r2, #0
 801c962:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801c964:	bf00      	nop
 801c966:	3708      	adds	r7, #8
 801c968:	46bd      	mov	sp, r7
 801c96a:	bd80      	pop	{r7, pc}
 801c96c:	20005550 	.word	0x20005550

0801c970 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c970:	b580      	push	{r7, lr}
 801c972:	b082      	sub	sp, #8
 801c974:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c976:	2300      	movs	r3, #0
 801c978:	607b      	str	r3, [r7, #4]
 801c97a:	e096      	b.n	801caaa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c97c:	494f      	ldr	r1, [pc, #316]	; (801cabc <etharp_tmr+0x14c>)
 801c97e:	687a      	ldr	r2, [r7, #4]
 801c980:	4613      	mov	r3, r2
 801c982:	005b      	lsls	r3, r3, #1
 801c984:	4413      	add	r3, r2
 801c986:	00db      	lsls	r3, r3, #3
 801c988:	440b      	add	r3, r1
 801c98a:	3314      	adds	r3, #20
 801c98c:	781b      	ldrb	r3, [r3, #0]
 801c98e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c990:	78fb      	ldrb	r3, [r7, #3]
 801c992:	2b00      	cmp	r3, #0
 801c994:	f000 8086 	beq.w	801caa4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c998:	4948      	ldr	r1, [pc, #288]	; (801cabc <etharp_tmr+0x14c>)
 801c99a:	687a      	ldr	r2, [r7, #4]
 801c99c:	4613      	mov	r3, r2
 801c99e:	005b      	lsls	r3, r3, #1
 801c9a0:	4413      	add	r3, r2
 801c9a2:	00db      	lsls	r3, r3, #3
 801c9a4:	440b      	add	r3, r1
 801c9a6:	3312      	adds	r3, #18
 801c9a8:	881b      	ldrh	r3, [r3, #0]
 801c9aa:	3301      	adds	r3, #1
 801c9ac:	b298      	uxth	r0, r3
 801c9ae:	4943      	ldr	r1, [pc, #268]	; (801cabc <etharp_tmr+0x14c>)
 801c9b0:	687a      	ldr	r2, [r7, #4]
 801c9b2:	4613      	mov	r3, r2
 801c9b4:	005b      	lsls	r3, r3, #1
 801c9b6:	4413      	add	r3, r2
 801c9b8:	00db      	lsls	r3, r3, #3
 801c9ba:	440b      	add	r3, r1
 801c9bc:	3312      	adds	r3, #18
 801c9be:	4602      	mov	r2, r0
 801c9c0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c9c2:	493e      	ldr	r1, [pc, #248]	; (801cabc <etharp_tmr+0x14c>)
 801c9c4:	687a      	ldr	r2, [r7, #4]
 801c9c6:	4613      	mov	r3, r2
 801c9c8:	005b      	lsls	r3, r3, #1
 801c9ca:	4413      	add	r3, r2
 801c9cc:	00db      	lsls	r3, r3, #3
 801c9ce:	440b      	add	r3, r1
 801c9d0:	3312      	adds	r3, #18
 801c9d2:	881b      	ldrh	r3, [r3, #0]
 801c9d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801c9d8:	d215      	bcs.n	801ca06 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c9da:	4938      	ldr	r1, [pc, #224]	; (801cabc <etharp_tmr+0x14c>)
 801c9dc:	687a      	ldr	r2, [r7, #4]
 801c9de:	4613      	mov	r3, r2
 801c9e0:	005b      	lsls	r3, r3, #1
 801c9e2:	4413      	add	r3, r2
 801c9e4:	00db      	lsls	r3, r3, #3
 801c9e6:	440b      	add	r3, r1
 801c9e8:	3314      	adds	r3, #20
 801c9ea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c9ec:	2b01      	cmp	r3, #1
 801c9ee:	d10e      	bne.n	801ca0e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c9f0:	4932      	ldr	r1, [pc, #200]	; (801cabc <etharp_tmr+0x14c>)
 801c9f2:	687a      	ldr	r2, [r7, #4]
 801c9f4:	4613      	mov	r3, r2
 801c9f6:	005b      	lsls	r3, r3, #1
 801c9f8:	4413      	add	r3, r2
 801c9fa:	00db      	lsls	r3, r3, #3
 801c9fc:	440b      	add	r3, r1
 801c9fe:	3312      	adds	r3, #18
 801ca00:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ca02:	2b04      	cmp	r3, #4
 801ca04:	d903      	bls.n	801ca0e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ca06:	6878      	ldr	r0, [r7, #4]
 801ca08:	f7ff ff80 	bl	801c90c <etharp_free_entry>
 801ca0c:	e04a      	b.n	801caa4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ca0e:	492b      	ldr	r1, [pc, #172]	; (801cabc <etharp_tmr+0x14c>)
 801ca10:	687a      	ldr	r2, [r7, #4]
 801ca12:	4613      	mov	r3, r2
 801ca14:	005b      	lsls	r3, r3, #1
 801ca16:	4413      	add	r3, r2
 801ca18:	00db      	lsls	r3, r3, #3
 801ca1a:	440b      	add	r3, r1
 801ca1c:	3314      	adds	r3, #20
 801ca1e:	781b      	ldrb	r3, [r3, #0]
 801ca20:	2b03      	cmp	r3, #3
 801ca22:	d10a      	bne.n	801ca3a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ca24:	4925      	ldr	r1, [pc, #148]	; (801cabc <etharp_tmr+0x14c>)
 801ca26:	687a      	ldr	r2, [r7, #4]
 801ca28:	4613      	mov	r3, r2
 801ca2a:	005b      	lsls	r3, r3, #1
 801ca2c:	4413      	add	r3, r2
 801ca2e:	00db      	lsls	r3, r3, #3
 801ca30:	440b      	add	r3, r1
 801ca32:	3314      	adds	r3, #20
 801ca34:	2204      	movs	r2, #4
 801ca36:	701a      	strb	r2, [r3, #0]
 801ca38:	e034      	b.n	801caa4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ca3a:	4920      	ldr	r1, [pc, #128]	; (801cabc <etharp_tmr+0x14c>)
 801ca3c:	687a      	ldr	r2, [r7, #4]
 801ca3e:	4613      	mov	r3, r2
 801ca40:	005b      	lsls	r3, r3, #1
 801ca42:	4413      	add	r3, r2
 801ca44:	00db      	lsls	r3, r3, #3
 801ca46:	440b      	add	r3, r1
 801ca48:	3314      	adds	r3, #20
 801ca4a:	781b      	ldrb	r3, [r3, #0]
 801ca4c:	2b04      	cmp	r3, #4
 801ca4e:	d10a      	bne.n	801ca66 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801ca50:	491a      	ldr	r1, [pc, #104]	; (801cabc <etharp_tmr+0x14c>)
 801ca52:	687a      	ldr	r2, [r7, #4]
 801ca54:	4613      	mov	r3, r2
 801ca56:	005b      	lsls	r3, r3, #1
 801ca58:	4413      	add	r3, r2
 801ca5a:	00db      	lsls	r3, r3, #3
 801ca5c:	440b      	add	r3, r1
 801ca5e:	3314      	adds	r3, #20
 801ca60:	2202      	movs	r2, #2
 801ca62:	701a      	strb	r2, [r3, #0]
 801ca64:	e01e      	b.n	801caa4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ca66:	4915      	ldr	r1, [pc, #84]	; (801cabc <etharp_tmr+0x14c>)
 801ca68:	687a      	ldr	r2, [r7, #4]
 801ca6a:	4613      	mov	r3, r2
 801ca6c:	005b      	lsls	r3, r3, #1
 801ca6e:	4413      	add	r3, r2
 801ca70:	00db      	lsls	r3, r3, #3
 801ca72:	440b      	add	r3, r1
 801ca74:	3314      	adds	r3, #20
 801ca76:	781b      	ldrb	r3, [r3, #0]
 801ca78:	2b01      	cmp	r3, #1
 801ca7a:	d113      	bne.n	801caa4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801ca7c:	490f      	ldr	r1, [pc, #60]	; (801cabc <etharp_tmr+0x14c>)
 801ca7e:	687a      	ldr	r2, [r7, #4]
 801ca80:	4613      	mov	r3, r2
 801ca82:	005b      	lsls	r3, r3, #1
 801ca84:	4413      	add	r3, r2
 801ca86:	00db      	lsls	r3, r3, #3
 801ca88:	440b      	add	r3, r1
 801ca8a:	3308      	adds	r3, #8
 801ca8c:	6818      	ldr	r0, [r3, #0]
 801ca8e:	687a      	ldr	r2, [r7, #4]
 801ca90:	4613      	mov	r3, r2
 801ca92:	005b      	lsls	r3, r3, #1
 801ca94:	4413      	add	r3, r2
 801ca96:	00db      	lsls	r3, r3, #3
 801ca98:	4a08      	ldr	r2, [pc, #32]	; (801cabc <etharp_tmr+0x14c>)
 801ca9a:	4413      	add	r3, r2
 801ca9c:	3304      	adds	r3, #4
 801ca9e:	4619      	mov	r1, r3
 801caa0:	f000 fe72 	bl	801d788 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	3301      	adds	r3, #1
 801caa8:	607b      	str	r3, [r7, #4]
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	2b09      	cmp	r3, #9
 801caae:	f77f af65 	ble.w	801c97c <etharp_tmr+0xc>
      }
    }
  }
}
 801cab2:	bf00      	nop
 801cab4:	bf00      	nop
 801cab6:	3708      	adds	r7, #8
 801cab8:	46bd      	mov	sp, r7
 801caba:	bd80      	pop	{r7, pc}
 801cabc:	20005550 	.word	0x20005550

0801cac0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801cac0:	b580      	push	{r7, lr}
 801cac2:	b08a      	sub	sp, #40	; 0x28
 801cac4:	af00      	add	r7, sp, #0
 801cac6:	60f8      	str	r0, [r7, #12]
 801cac8:	460b      	mov	r3, r1
 801caca:	607a      	str	r2, [r7, #4]
 801cacc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801cace:	230a      	movs	r3, #10
 801cad0:	84fb      	strh	r3, [r7, #38]	; 0x26
 801cad2:	230a      	movs	r3, #10
 801cad4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801cad6:	230a      	movs	r3, #10
 801cad8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801cada:	2300      	movs	r3, #0
 801cadc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801cade:	230a      	movs	r3, #10
 801cae0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801cae2:	2300      	movs	r3, #0
 801cae4:	83bb      	strh	r3, [r7, #28]
 801cae6:	2300      	movs	r3, #0
 801cae8:	837b      	strh	r3, [r7, #26]
 801caea:	2300      	movs	r3, #0
 801caec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801caee:	2300      	movs	r3, #0
 801caf0:	843b      	strh	r3, [r7, #32]
 801caf2:	e0ae      	b.n	801cc52 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801caf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801caf8:	49a6      	ldr	r1, [pc, #664]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cafa:	4613      	mov	r3, r2
 801cafc:	005b      	lsls	r3, r3, #1
 801cafe:	4413      	add	r3, r2
 801cb00:	00db      	lsls	r3, r3, #3
 801cb02:	440b      	add	r3, r1
 801cb04:	3314      	adds	r3, #20
 801cb06:	781b      	ldrb	r3, [r3, #0]
 801cb08:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801cb0a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cb0e:	2b0a      	cmp	r3, #10
 801cb10:	d105      	bne.n	801cb1e <etharp_find_entry+0x5e>
 801cb12:	7dfb      	ldrb	r3, [r7, #23]
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d102      	bne.n	801cb1e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801cb18:	8c3b      	ldrh	r3, [r7, #32]
 801cb1a:	847b      	strh	r3, [r7, #34]	; 0x22
 801cb1c:	e095      	b.n	801cc4a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801cb1e:	7dfb      	ldrb	r3, [r7, #23]
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	f000 8092 	beq.w	801cc4a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801cb26:	7dfb      	ldrb	r3, [r7, #23]
 801cb28:	2b01      	cmp	r3, #1
 801cb2a:	d009      	beq.n	801cb40 <etharp_find_entry+0x80>
 801cb2c:	7dfb      	ldrb	r3, [r7, #23]
 801cb2e:	2b01      	cmp	r3, #1
 801cb30:	d806      	bhi.n	801cb40 <etharp_find_entry+0x80>
 801cb32:	4b99      	ldr	r3, [pc, #612]	; (801cd98 <etharp_find_entry+0x2d8>)
 801cb34:	f240 1223 	movw	r2, #291	; 0x123
 801cb38:	4998      	ldr	r1, [pc, #608]	; (801cd9c <etharp_find_entry+0x2dc>)
 801cb3a:	4899      	ldr	r0, [pc, #612]	; (801cda0 <etharp_find_entry+0x2e0>)
 801cb3c:	f002 fed6 	bl	801f8ec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d020      	beq.n	801cb88 <etharp_find_entry+0xc8>
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	6819      	ldr	r1, [r3, #0]
 801cb4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb4e:	4891      	ldr	r0, [pc, #580]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cb50:	4613      	mov	r3, r2
 801cb52:	005b      	lsls	r3, r3, #1
 801cb54:	4413      	add	r3, r2
 801cb56:	00db      	lsls	r3, r3, #3
 801cb58:	4403      	add	r3, r0
 801cb5a:	3304      	adds	r3, #4
 801cb5c:	681b      	ldr	r3, [r3, #0]
 801cb5e:	4299      	cmp	r1, r3
 801cb60:	d112      	bne.n	801cb88 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d00c      	beq.n	801cb82 <etharp_find_entry+0xc2>
 801cb68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb6c:	4989      	ldr	r1, [pc, #548]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cb6e:	4613      	mov	r3, r2
 801cb70:	005b      	lsls	r3, r3, #1
 801cb72:	4413      	add	r3, r2
 801cb74:	00db      	lsls	r3, r3, #3
 801cb76:	440b      	add	r3, r1
 801cb78:	3308      	adds	r3, #8
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	687a      	ldr	r2, [r7, #4]
 801cb7e:	429a      	cmp	r2, r3
 801cb80:	d102      	bne.n	801cb88 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801cb82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cb86:	e100      	b.n	801cd8a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801cb88:	7dfb      	ldrb	r3, [r7, #23]
 801cb8a:	2b01      	cmp	r3, #1
 801cb8c:	d140      	bne.n	801cc10 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801cb8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb92:	4980      	ldr	r1, [pc, #512]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cb94:	4613      	mov	r3, r2
 801cb96:	005b      	lsls	r3, r3, #1
 801cb98:	4413      	add	r3, r2
 801cb9a:	00db      	lsls	r3, r3, #3
 801cb9c:	440b      	add	r3, r1
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d01a      	beq.n	801cbda <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801cba4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cba8:	497a      	ldr	r1, [pc, #488]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cbaa:	4613      	mov	r3, r2
 801cbac:	005b      	lsls	r3, r3, #1
 801cbae:	4413      	add	r3, r2
 801cbb0:	00db      	lsls	r3, r3, #3
 801cbb2:	440b      	add	r3, r1
 801cbb4:	3312      	adds	r3, #18
 801cbb6:	881b      	ldrh	r3, [r3, #0]
 801cbb8:	8bba      	ldrh	r2, [r7, #28]
 801cbba:	429a      	cmp	r2, r3
 801cbbc:	d845      	bhi.n	801cc4a <etharp_find_entry+0x18a>
            old_queue = i;
 801cbbe:	8c3b      	ldrh	r3, [r7, #32]
 801cbc0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801cbc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cbc6:	4973      	ldr	r1, [pc, #460]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cbc8:	4613      	mov	r3, r2
 801cbca:	005b      	lsls	r3, r3, #1
 801cbcc:	4413      	add	r3, r2
 801cbce:	00db      	lsls	r3, r3, #3
 801cbd0:	440b      	add	r3, r1
 801cbd2:	3312      	adds	r3, #18
 801cbd4:	881b      	ldrh	r3, [r3, #0]
 801cbd6:	83bb      	strh	r3, [r7, #28]
 801cbd8:	e037      	b.n	801cc4a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801cbda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cbde:	496d      	ldr	r1, [pc, #436]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cbe0:	4613      	mov	r3, r2
 801cbe2:	005b      	lsls	r3, r3, #1
 801cbe4:	4413      	add	r3, r2
 801cbe6:	00db      	lsls	r3, r3, #3
 801cbe8:	440b      	add	r3, r1
 801cbea:	3312      	adds	r3, #18
 801cbec:	881b      	ldrh	r3, [r3, #0]
 801cbee:	8b7a      	ldrh	r2, [r7, #26]
 801cbf0:	429a      	cmp	r2, r3
 801cbf2:	d82a      	bhi.n	801cc4a <etharp_find_entry+0x18a>
            old_pending = i;
 801cbf4:	8c3b      	ldrh	r3, [r7, #32]
 801cbf6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801cbf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cbfc:	4965      	ldr	r1, [pc, #404]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cbfe:	4613      	mov	r3, r2
 801cc00:	005b      	lsls	r3, r3, #1
 801cc02:	4413      	add	r3, r2
 801cc04:	00db      	lsls	r3, r3, #3
 801cc06:	440b      	add	r3, r1
 801cc08:	3312      	adds	r3, #18
 801cc0a:	881b      	ldrh	r3, [r3, #0]
 801cc0c:	837b      	strh	r3, [r7, #26]
 801cc0e:	e01c      	b.n	801cc4a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801cc10:	7dfb      	ldrb	r3, [r7, #23]
 801cc12:	2b01      	cmp	r3, #1
 801cc14:	d919      	bls.n	801cc4a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801cc16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cc1a:	495e      	ldr	r1, [pc, #376]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cc1c:	4613      	mov	r3, r2
 801cc1e:	005b      	lsls	r3, r3, #1
 801cc20:	4413      	add	r3, r2
 801cc22:	00db      	lsls	r3, r3, #3
 801cc24:	440b      	add	r3, r1
 801cc26:	3312      	adds	r3, #18
 801cc28:	881b      	ldrh	r3, [r3, #0]
 801cc2a:	8b3a      	ldrh	r2, [r7, #24]
 801cc2c:	429a      	cmp	r2, r3
 801cc2e:	d80c      	bhi.n	801cc4a <etharp_find_entry+0x18a>
            old_stable = i;
 801cc30:	8c3b      	ldrh	r3, [r7, #32]
 801cc32:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801cc34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cc38:	4956      	ldr	r1, [pc, #344]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cc3a:	4613      	mov	r3, r2
 801cc3c:	005b      	lsls	r3, r3, #1
 801cc3e:	4413      	add	r3, r2
 801cc40:	00db      	lsls	r3, r3, #3
 801cc42:	440b      	add	r3, r1
 801cc44:	3312      	adds	r3, #18
 801cc46:	881b      	ldrh	r3, [r3, #0]
 801cc48:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cc4a:	8c3b      	ldrh	r3, [r7, #32]
 801cc4c:	3301      	adds	r3, #1
 801cc4e:	b29b      	uxth	r3, r3
 801cc50:	843b      	strh	r3, [r7, #32]
 801cc52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cc56:	2b09      	cmp	r3, #9
 801cc58:	f77f af4c 	ble.w	801caf4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801cc5c:	7afb      	ldrb	r3, [r7, #11]
 801cc5e:	f003 0302 	and.w	r3, r3, #2
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d108      	bne.n	801cc78 <etharp_find_entry+0x1b8>
 801cc66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cc6a:	2b0a      	cmp	r3, #10
 801cc6c:	d107      	bne.n	801cc7e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801cc6e:	7afb      	ldrb	r3, [r7, #11]
 801cc70:	f003 0301 	and.w	r3, r3, #1
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d102      	bne.n	801cc7e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801cc78:	f04f 33ff 	mov.w	r3, #4294967295
 801cc7c:	e085      	b.n	801cd8a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801cc7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cc82:	2b09      	cmp	r3, #9
 801cc84:	dc02      	bgt.n	801cc8c <etharp_find_entry+0x1cc>
    i = empty;
 801cc86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cc88:	843b      	strh	r3, [r7, #32]
 801cc8a:	e039      	b.n	801cd00 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801cc8c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cc90:	2b09      	cmp	r3, #9
 801cc92:	dc14      	bgt.n	801ccbe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801cc94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cc96:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801cc98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cc9c:	493d      	ldr	r1, [pc, #244]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cc9e:	4613      	mov	r3, r2
 801cca0:	005b      	lsls	r3, r3, #1
 801cca2:	4413      	add	r3, r2
 801cca4:	00db      	lsls	r3, r3, #3
 801cca6:	440b      	add	r3, r1
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d018      	beq.n	801cce0 <etharp_find_entry+0x220>
 801ccae:	4b3a      	ldr	r3, [pc, #232]	; (801cd98 <etharp_find_entry+0x2d8>)
 801ccb0:	f240 126d 	movw	r2, #365	; 0x16d
 801ccb4:	493b      	ldr	r1, [pc, #236]	; (801cda4 <etharp_find_entry+0x2e4>)
 801ccb6:	483a      	ldr	r0, [pc, #232]	; (801cda0 <etharp_find_entry+0x2e0>)
 801ccb8:	f002 fe18 	bl	801f8ec <iprintf>
 801ccbc:	e010      	b.n	801cce0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ccbe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ccc2:	2b09      	cmp	r3, #9
 801ccc4:	dc02      	bgt.n	801cccc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ccc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ccc8:	843b      	strh	r3, [r7, #32]
 801ccca:	e009      	b.n	801cce0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801cccc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ccd0:	2b09      	cmp	r3, #9
 801ccd2:	dc02      	bgt.n	801ccda <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ccd4:	8bfb      	ldrh	r3, [r7, #30]
 801ccd6:	843b      	strh	r3, [r7, #32]
 801ccd8:	e002      	b.n	801cce0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801ccda:	f04f 33ff 	mov.w	r3, #4294967295
 801ccde:	e054      	b.n	801cd8a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cce0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cce4:	2b09      	cmp	r3, #9
 801cce6:	dd06      	ble.n	801ccf6 <etharp_find_entry+0x236>
 801cce8:	4b2b      	ldr	r3, [pc, #172]	; (801cd98 <etharp_find_entry+0x2d8>)
 801ccea:	f240 127f 	movw	r2, #383	; 0x17f
 801ccee:	492e      	ldr	r1, [pc, #184]	; (801cda8 <etharp_find_entry+0x2e8>)
 801ccf0:	482b      	ldr	r0, [pc, #172]	; (801cda0 <etharp_find_entry+0x2e0>)
 801ccf2:	f002 fdfb 	bl	801f8ec <iprintf>
    etharp_free_entry(i);
 801ccf6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ccfa:	4618      	mov	r0, r3
 801ccfc:	f7ff fe06 	bl	801c90c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cd00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cd04:	2b09      	cmp	r3, #9
 801cd06:	dd06      	ble.n	801cd16 <etharp_find_entry+0x256>
 801cd08:	4b23      	ldr	r3, [pc, #140]	; (801cd98 <etharp_find_entry+0x2d8>)
 801cd0a:	f240 1283 	movw	r2, #387	; 0x183
 801cd0e:	4926      	ldr	r1, [pc, #152]	; (801cda8 <etharp_find_entry+0x2e8>)
 801cd10:	4823      	ldr	r0, [pc, #140]	; (801cda0 <etharp_find_entry+0x2e0>)
 801cd12:	f002 fdeb 	bl	801f8ec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801cd16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd1a:	491e      	ldr	r1, [pc, #120]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cd1c:	4613      	mov	r3, r2
 801cd1e:	005b      	lsls	r3, r3, #1
 801cd20:	4413      	add	r3, r2
 801cd22:	00db      	lsls	r3, r3, #3
 801cd24:	440b      	add	r3, r1
 801cd26:	3314      	adds	r3, #20
 801cd28:	781b      	ldrb	r3, [r3, #0]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d006      	beq.n	801cd3c <etharp_find_entry+0x27c>
 801cd2e:	4b1a      	ldr	r3, [pc, #104]	; (801cd98 <etharp_find_entry+0x2d8>)
 801cd30:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801cd34:	491d      	ldr	r1, [pc, #116]	; (801cdac <etharp_find_entry+0x2ec>)
 801cd36:	481a      	ldr	r0, [pc, #104]	; (801cda0 <etharp_find_entry+0x2e0>)
 801cd38:	f002 fdd8 	bl	801f8ec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801cd3c:	68fb      	ldr	r3, [r7, #12]
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d00b      	beq.n	801cd5a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801cd42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd46:	68fb      	ldr	r3, [r7, #12]
 801cd48:	6819      	ldr	r1, [r3, #0]
 801cd4a:	4812      	ldr	r0, [pc, #72]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cd4c:	4613      	mov	r3, r2
 801cd4e:	005b      	lsls	r3, r3, #1
 801cd50:	4413      	add	r3, r2
 801cd52:	00db      	lsls	r3, r3, #3
 801cd54:	4403      	add	r3, r0
 801cd56:	3304      	adds	r3, #4
 801cd58:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801cd5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd5e:	490d      	ldr	r1, [pc, #52]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cd60:	4613      	mov	r3, r2
 801cd62:	005b      	lsls	r3, r3, #1
 801cd64:	4413      	add	r3, r2
 801cd66:	00db      	lsls	r3, r3, #3
 801cd68:	440b      	add	r3, r1
 801cd6a:	3312      	adds	r3, #18
 801cd6c:	2200      	movs	r2, #0
 801cd6e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801cd70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd74:	4907      	ldr	r1, [pc, #28]	; (801cd94 <etharp_find_entry+0x2d4>)
 801cd76:	4613      	mov	r3, r2
 801cd78:	005b      	lsls	r3, r3, #1
 801cd7a:	4413      	add	r3, r2
 801cd7c:	00db      	lsls	r3, r3, #3
 801cd7e:	440b      	add	r3, r1
 801cd80:	3308      	adds	r3, #8
 801cd82:	687a      	ldr	r2, [r7, #4]
 801cd84:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801cd86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801cd8a:	4618      	mov	r0, r3
 801cd8c:	3728      	adds	r7, #40	; 0x28
 801cd8e:	46bd      	mov	sp, r7
 801cd90:	bd80      	pop	{r7, pc}
 801cd92:	bf00      	nop
 801cd94:	20005550 	.word	0x20005550
 801cd98:	08024c38 	.word	0x08024c38
 801cd9c:	08024c70 	.word	0x08024c70
 801cda0:	08024cb0 	.word	0x08024cb0
 801cda4:	08024cd8 	.word	0x08024cd8
 801cda8:	08024cf0 	.word	0x08024cf0
 801cdac:	08024d04 	.word	0x08024d04

0801cdb0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801cdb0:	b580      	push	{r7, lr}
 801cdb2:	b088      	sub	sp, #32
 801cdb4:	af02      	add	r7, sp, #8
 801cdb6:	60f8      	str	r0, [r7, #12]
 801cdb8:	60b9      	str	r1, [r7, #8]
 801cdba:	607a      	str	r2, [r7, #4]
 801cdbc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801cdbe:	68fb      	ldr	r3, [r7, #12]
 801cdc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801cdc4:	2b06      	cmp	r3, #6
 801cdc6:	d006      	beq.n	801cdd6 <etharp_update_arp_entry+0x26>
 801cdc8:	4b48      	ldr	r3, [pc, #288]	; (801ceec <etharp_update_arp_entry+0x13c>)
 801cdca:	f240 12a9 	movw	r2, #425	; 0x1a9
 801cdce:	4948      	ldr	r1, [pc, #288]	; (801cef0 <etharp_update_arp_entry+0x140>)
 801cdd0:	4848      	ldr	r0, [pc, #288]	; (801cef4 <etharp_update_arp_entry+0x144>)
 801cdd2:	f002 fd8b 	bl	801f8ec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801cdd6:	68bb      	ldr	r3, [r7, #8]
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d012      	beq.n	801ce02 <etharp_update_arp_entry+0x52>
 801cddc:	68bb      	ldr	r3, [r7, #8]
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d00e      	beq.n	801ce02 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cde4:	68bb      	ldr	r3, [r7, #8]
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	68f9      	ldr	r1, [r7, #12]
 801cdea:	4618      	mov	r0, r3
 801cdec:	f001 f920 	bl	801e030 <ip4_addr_isbroadcast_u32>
 801cdf0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	d105      	bne.n	801ce02 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801cdf6:	68bb      	ldr	r3, [r7, #8]
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cdfe:	2be0      	cmp	r3, #224	; 0xe0
 801ce00:	d102      	bne.n	801ce08 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ce02:	f06f 030f 	mvn.w	r3, #15
 801ce06:	e06c      	b.n	801cee2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ce08:	78fb      	ldrb	r3, [r7, #3]
 801ce0a:	68fa      	ldr	r2, [r7, #12]
 801ce0c:	4619      	mov	r1, r3
 801ce0e:	68b8      	ldr	r0, [r7, #8]
 801ce10:	f7ff fe56 	bl	801cac0 <etharp_find_entry>
 801ce14:	4603      	mov	r3, r0
 801ce16:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ce18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	da02      	bge.n	801ce26 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ce20:	8afb      	ldrh	r3, [r7, #22]
 801ce22:	b25b      	sxtb	r3, r3
 801ce24:	e05d      	b.n	801cee2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ce26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ce2a:	4933      	ldr	r1, [pc, #204]	; (801cef8 <etharp_update_arp_entry+0x148>)
 801ce2c:	4613      	mov	r3, r2
 801ce2e:	005b      	lsls	r3, r3, #1
 801ce30:	4413      	add	r3, r2
 801ce32:	00db      	lsls	r3, r3, #3
 801ce34:	440b      	add	r3, r1
 801ce36:	3314      	adds	r3, #20
 801ce38:	2202      	movs	r2, #2
 801ce3a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ce3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ce40:	492d      	ldr	r1, [pc, #180]	; (801cef8 <etharp_update_arp_entry+0x148>)
 801ce42:	4613      	mov	r3, r2
 801ce44:	005b      	lsls	r3, r3, #1
 801ce46:	4413      	add	r3, r2
 801ce48:	00db      	lsls	r3, r3, #3
 801ce4a:	440b      	add	r3, r1
 801ce4c:	3308      	adds	r3, #8
 801ce4e:	68fa      	ldr	r2, [r7, #12]
 801ce50:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801ce52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ce56:	4613      	mov	r3, r2
 801ce58:	005b      	lsls	r3, r3, #1
 801ce5a:	4413      	add	r3, r2
 801ce5c:	00db      	lsls	r3, r3, #3
 801ce5e:	3308      	adds	r3, #8
 801ce60:	4a25      	ldr	r2, [pc, #148]	; (801cef8 <etharp_update_arp_entry+0x148>)
 801ce62:	4413      	add	r3, r2
 801ce64:	3304      	adds	r3, #4
 801ce66:	2206      	movs	r2, #6
 801ce68:	6879      	ldr	r1, [r7, #4]
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	f002 fc54 	bl	801f718 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ce70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ce74:	4920      	ldr	r1, [pc, #128]	; (801cef8 <etharp_update_arp_entry+0x148>)
 801ce76:	4613      	mov	r3, r2
 801ce78:	005b      	lsls	r3, r3, #1
 801ce7a:	4413      	add	r3, r2
 801ce7c:	00db      	lsls	r3, r3, #3
 801ce7e:	440b      	add	r3, r1
 801ce80:	3312      	adds	r3, #18
 801ce82:	2200      	movs	r2, #0
 801ce84:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ce86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ce8a:	491b      	ldr	r1, [pc, #108]	; (801cef8 <etharp_update_arp_entry+0x148>)
 801ce8c:	4613      	mov	r3, r2
 801ce8e:	005b      	lsls	r3, r3, #1
 801ce90:	4413      	add	r3, r2
 801ce92:	00db      	lsls	r3, r3, #3
 801ce94:	440b      	add	r3, r1
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	d021      	beq.n	801cee0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ce9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cea0:	4915      	ldr	r1, [pc, #84]	; (801cef8 <etharp_update_arp_entry+0x148>)
 801cea2:	4613      	mov	r3, r2
 801cea4:	005b      	lsls	r3, r3, #1
 801cea6:	4413      	add	r3, r2
 801cea8:	00db      	lsls	r3, r3, #3
 801ceaa:	440b      	add	r3, r1
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ceb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ceb4:	4910      	ldr	r1, [pc, #64]	; (801cef8 <etharp_update_arp_entry+0x148>)
 801ceb6:	4613      	mov	r3, r2
 801ceb8:	005b      	lsls	r3, r3, #1
 801ceba:	4413      	add	r3, r2
 801cebc:	00db      	lsls	r3, r3, #3
 801cebe:	440b      	add	r3, r1
 801cec0:	2200      	movs	r2, #0
 801cec2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801cec4:	68fb      	ldr	r3, [r7, #12]
 801cec6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801ceca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cece:	9300      	str	r3, [sp, #0]
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	6939      	ldr	r1, [r7, #16]
 801ced4:	68f8      	ldr	r0, [r7, #12]
 801ced6:	f002 f8dd 	bl	801f094 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801ceda:	6938      	ldr	r0, [r7, #16]
 801cedc:	f7f6 fadc 	bl	8013498 <pbuf_free>
  }
  return ERR_OK;
 801cee0:	2300      	movs	r3, #0
}
 801cee2:	4618      	mov	r0, r3
 801cee4:	3718      	adds	r7, #24
 801cee6:	46bd      	mov	sp, r7
 801cee8:	bd80      	pop	{r7, pc}
 801ceea:	bf00      	nop
 801ceec:	08024c38 	.word	0x08024c38
 801cef0:	08024d30 	.word	0x08024d30
 801cef4:	08024cb0 	.word	0x08024cb0
 801cef8:	20005550 	.word	0x20005550

0801cefc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801cefc:	b580      	push	{r7, lr}
 801cefe:	b084      	sub	sp, #16
 801cf00:	af00      	add	r7, sp, #0
 801cf02:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cf04:	2300      	movs	r3, #0
 801cf06:	60fb      	str	r3, [r7, #12]
 801cf08:	e01e      	b.n	801cf48 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801cf0a:	4913      	ldr	r1, [pc, #76]	; (801cf58 <etharp_cleanup_netif+0x5c>)
 801cf0c:	68fa      	ldr	r2, [r7, #12]
 801cf0e:	4613      	mov	r3, r2
 801cf10:	005b      	lsls	r3, r3, #1
 801cf12:	4413      	add	r3, r2
 801cf14:	00db      	lsls	r3, r3, #3
 801cf16:	440b      	add	r3, r1
 801cf18:	3314      	adds	r3, #20
 801cf1a:	781b      	ldrb	r3, [r3, #0]
 801cf1c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801cf1e:	7afb      	ldrb	r3, [r7, #11]
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d00e      	beq.n	801cf42 <etharp_cleanup_netif+0x46>
 801cf24:	490c      	ldr	r1, [pc, #48]	; (801cf58 <etharp_cleanup_netif+0x5c>)
 801cf26:	68fa      	ldr	r2, [r7, #12]
 801cf28:	4613      	mov	r3, r2
 801cf2a:	005b      	lsls	r3, r3, #1
 801cf2c:	4413      	add	r3, r2
 801cf2e:	00db      	lsls	r3, r3, #3
 801cf30:	440b      	add	r3, r1
 801cf32:	3308      	adds	r3, #8
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	687a      	ldr	r2, [r7, #4]
 801cf38:	429a      	cmp	r2, r3
 801cf3a:	d102      	bne.n	801cf42 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801cf3c:	68f8      	ldr	r0, [r7, #12]
 801cf3e:	f7ff fce5 	bl	801c90c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	3301      	adds	r3, #1
 801cf46:	60fb      	str	r3, [r7, #12]
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	2b09      	cmp	r3, #9
 801cf4c:	dddd      	ble.n	801cf0a <etharp_cleanup_netif+0xe>
    }
  }
}
 801cf4e:	bf00      	nop
 801cf50:	bf00      	nop
 801cf52:	3710      	adds	r7, #16
 801cf54:	46bd      	mov	sp, r7
 801cf56:	bd80      	pop	{r7, pc}
 801cf58:	20005550 	.word	0x20005550

0801cf5c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801cf5c:	b5b0      	push	{r4, r5, r7, lr}
 801cf5e:	b08a      	sub	sp, #40	; 0x28
 801cf60:	af04      	add	r7, sp, #16
 801cf62:	6078      	str	r0, [r7, #4]
 801cf64:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cf66:	683b      	ldr	r3, [r7, #0]
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	d107      	bne.n	801cf7c <etharp_input+0x20>
 801cf6c:	4b3f      	ldr	r3, [pc, #252]	; (801d06c <etharp_input+0x110>)
 801cf6e:	f240 228a 	movw	r2, #650	; 0x28a
 801cf72:	493f      	ldr	r1, [pc, #252]	; (801d070 <etharp_input+0x114>)
 801cf74:	483f      	ldr	r0, [pc, #252]	; (801d074 <etharp_input+0x118>)
 801cf76:	f002 fcb9 	bl	801f8ec <iprintf>
 801cf7a:	e074      	b.n	801d066 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	685b      	ldr	r3, [r3, #4]
 801cf80:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cf82:	693b      	ldr	r3, [r7, #16]
 801cf84:	881b      	ldrh	r3, [r3, #0]
 801cf86:	b29b      	uxth	r3, r3
 801cf88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cf8c:	d10c      	bne.n	801cfa8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cf8e:	693b      	ldr	r3, [r7, #16]
 801cf90:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cf92:	2b06      	cmp	r3, #6
 801cf94:	d108      	bne.n	801cfa8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cf96:	693b      	ldr	r3, [r7, #16]
 801cf98:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cf9a:	2b04      	cmp	r3, #4
 801cf9c:	d104      	bne.n	801cfa8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801cf9e:	693b      	ldr	r3, [r7, #16]
 801cfa0:	885b      	ldrh	r3, [r3, #2]
 801cfa2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cfa4:	2b08      	cmp	r3, #8
 801cfa6:	d003      	beq.n	801cfb0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801cfa8:	6878      	ldr	r0, [r7, #4]
 801cfaa:	f7f6 fa75 	bl	8013498 <pbuf_free>
    return;
 801cfae:	e05a      	b.n	801d066 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801cfb0:	693b      	ldr	r3, [r7, #16]
 801cfb2:	330e      	adds	r3, #14
 801cfb4:	681b      	ldr	r3, [r3, #0]
 801cfb6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801cfb8:	693b      	ldr	r3, [r7, #16]
 801cfba:	3318      	adds	r3, #24
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801cfc0:	683b      	ldr	r3, [r7, #0]
 801cfc2:	3304      	adds	r3, #4
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d102      	bne.n	801cfd0 <etharp_input+0x74>
    for_us = 0;
 801cfca:	2300      	movs	r3, #0
 801cfcc:	75fb      	strb	r3, [r7, #23]
 801cfce:	e009      	b.n	801cfe4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801cfd0:	68ba      	ldr	r2, [r7, #8]
 801cfd2:	683b      	ldr	r3, [r7, #0]
 801cfd4:	3304      	adds	r3, #4
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	429a      	cmp	r2, r3
 801cfda:	bf0c      	ite	eq
 801cfdc:	2301      	moveq	r3, #1
 801cfde:	2300      	movne	r3, #0
 801cfe0:	b2db      	uxtb	r3, r3
 801cfe2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801cfe4:	693b      	ldr	r3, [r7, #16]
 801cfe6:	f103 0208 	add.w	r2, r3, #8
 801cfea:	7dfb      	ldrb	r3, [r7, #23]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d001      	beq.n	801cff4 <etharp_input+0x98>
 801cff0:	2301      	movs	r3, #1
 801cff2:	e000      	b.n	801cff6 <etharp_input+0x9a>
 801cff4:	2302      	movs	r3, #2
 801cff6:	f107 010c 	add.w	r1, r7, #12
 801cffa:	6838      	ldr	r0, [r7, #0]
 801cffc:	f7ff fed8 	bl	801cdb0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801d000:	693b      	ldr	r3, [r7, #16]
 801d002:	88db      	ldrh	r3, [r3, #6]
 801d004:	b29b      	uxth	r3, r3
 801d006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d00a:	d003      	beq.n	801d014 <etharp_input+0xb8>
 801d00c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d010:	d01e      	beq.n	801d050 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801d012:	e025      	b.n	801d060 <etharp_input+0x104>
      if (for_us) {
 801d014:	7dfb      	ldrb	r3, [r7, #23]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d021      	beq.n	801d05e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d01a:	683b      	ldr	r3, [r7, #0]
 801d01c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801d020:	693b      	ldr	r3, [r7, #16]
 801d022:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d026:	683b      	ldr	r3, [r7, #0]
 801d028:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801d02c:	683b      	ldr	r3, [r7, #0]
 801d02e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801d030:	693a      	ldr	r2, [r7, #16]
 801d032:	3208      	adds	r2, #8
        etharp_raw(netif,
 801d034:	2102      	movs	r1, #2
 801d036:	9103      	str	r1, [sp, #12]
 801d038:	f107 010c 	add.w	r1, r7, #12
 801d03c:	9102      	str	r1, [sp, #8]
 801d03e:	9201      	str	r2, [sp, #4]
 801d040:	9300      	str	r3, [sp, #0]
 801d042:	462b      	mov	r3, r5
 801d044:	4622      	mov	r2, r4
 801d046:	4601      	mov	r1, r0
 801d048:	6838      	ldr	r0, [r7, #0]
 801d04a:	f000 faef 	bl	801d62c <etharp_raw>
      break;
 801d04e:	e006      	b.n	801d05e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801d050:	f107 030c 	add.w	r3, r7, #12
 801d054:	4619      	mov	r1, r3
 801d056:	6838      	ldr	r0, [r7, #0]
 801d058:	f7fe f9cc 	bl	801b3f4 <dhcp_arp_reply>
      break;
 801d05c:	e000      	b.n	801d060 <etharp_input+0x104>
      break;
 801d05e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801d060:	6878      	ldr	r0, [r7, #4]
 801d062:	f7f6 fa19 	bl	8013498 <pbuf_free>
}
 801d066:	3718      	adds	r7, #24
 801d068:	46bd      	mov	sp, r7
 801d06a:	bdb0      	pop	{r4, r5, r7, pc}
 801d06c:	08024c38 	.word	0x08024c38
 801d070:	08024d88 	.word	0x08024d88
 801d074:	08024cb0 	.word	0x08024cb0

0801d078 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801d078:	b580      	push	{r7, lr}
 801d07a:	b086      	sub	sp, #24
 801d07c:	af02      	add	r7, sp, #8
 801d07e:	60f8      	str	r0, [r7, #12]
 801d080:	60b9      	str	r1, [r7, #8]
 801d082:	4613      	mov	r3, r2
 801d084:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d086:	79fa      	ldrb	r2, [r7, #7]
 801d088:	4944      	ldr	r1, [pc, #272]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d08a:	4613      	mov	r3, r2
 801d08c:	005b      	lsls	r3, r3, #1
 801d08e:	4413      	add	r3, r2
 801d090:	00db      	lsls	r3, r3, #3
 801d092:	440b      	add	r3, r1
 801d094:	3314      	adds	r3, #20
 801d096:	781b      	ldrb	r3, [r3, #0]
 801d098:	2b01      	cmp	r3, #1
 801d09a:	d806      	bhi.n	801d0aa <etharp_output_to_arp_index+0x32>
 801d09c:	4b40      	ldr	r3, [pc, #256]	; (801d1a0 <etharp_output_to_arp_index+0x128>)
 801d09e:	f240 22ee 	movw	r2, #750	; 0x2ee
 801d0a2:	4940      	ldr	r1, [pc, #256]	; (801d1a4 <etharp_output_to_arp_index+0x12c>)
 801d0a4:	4840      	ldr	r0, [pc, #256]	; (801d1a8 <etharp_output_to_arp_index+0x130>)
 801d0a6:	f002 fc21 	bl	801f8ec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d0aa:	79fa      	ldrb	r2, [r7, #7]
 801d0ac:	493b      	ldr	r1, [pc, #236]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d0ae:	4613      	mov	r3, r2
 801d0b0:	005b      	lsls	r3, r3, #1
 801d0b2:	4413      	add	r3, r2
 801d0b4:	00db      	lsls	r3, r3, #3
 801d0b6:	440b      	add	r3, r1
 801d0b8:	3314      	adds	r3, #20
 801d0ba:	781b      	ldrb	r3, [r3, #0]
 801d0bc:	2b02      	cmp	r3, #2
 801d0be:	d153      	bne.n	801d168 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d0c0:	79fa      	ldrb	r2, [r7, #7]
 801d0c2:	4936      	ldr	r1, [pc, #216]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d0c4:	4613      	mov	r3, r2
 801d0c6:	005b      	lsls	r3, r3, #1
 801d0c8:	4413      	add	r3, r2
 801d0ca:	00db      	lsls	r3, r3, #3
 801d0cc:	440b      	add	r3, r1
 801d0ce:	3312      	adds	r3, #18
 801d0d0:	881b      	ldrh	r3, [r3, #0]
 801d0d2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801d0d6:	d919      	bls.n	801d10c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d0d8:	79fa      	ldrb	r2, [r7, #7]
 801d0da:	4613      	mov	r3, r2
 801d0dc:	005b      	lsls	r3, r3, #1
 801d0de:	4413      	add	r3, r2
 801d0e0:	00db      	lsls	r3, r3, #3
 801d0e2:	4a2e      	ldr	r2, [pc, #184]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d0e4:	4413      	add	r3, r2
 801d0e6:	3304      	adds	r3, #4
 801d0e8:	4619      	mov	r1, r3
 801d0ea:	68f8      	ldr	r0, [r7, #12]
 801d0ec:	f000 fb4c 	bl	801d788 <etharp_request>
 801d0f0:	4603      	mov	r3, r0
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d138      	bne.n	801d168 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d0f6:	79fa      	ldrb	r2, [r7, #7]
 801d0f8:	4928      	ldr	r1, [pc, #160]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d0fa:	4613      	mov	r3, r2
 801d0fc:	005b      	lsls	r3, r3, #1
 801d0fe:	4413      	add	r3, r2
 801d100:	00db      	lsls	r3, r3, #3
 801d102:	440b      	add	r3, r1
 801d104:	3314      	adds	r3, #20
 801d106:	2203      	movs	r2, #3
 801d108:	701a      	strb	r2, [r3, #0]
 801d10a:	e02d      	b.n	801d168 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d10c:	79fa      	ldrb	r2, [r7, #7]
 801d10e:	4923      	ldr	r1, [pc, #140]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d110:	4613      	mov	r3, r2
 801d112:	005b      	lsls	r3, r3, #1
 801d114:	4413      	add	r3, r2
 801d116:	00db      	lsls	r3, r3, #3
 801d118:	440b      	add	r3, r1
 801d11a:	3312      	adds	r3, #18
 801d11c:	881b      	ldrh	r3, [r3, #0]
 801d11e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801d122:	d321      	bcc.n	801d168 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d124:	79fa      	ldrb	r2, [r7, #7]
 801d126:	4613      	mov	r3, r2
 801d128:	005b      	lsls	r3, r3, #1
 801d12a:	4413      	add	r3, r2
 801d12c:	00db      	lsls	r3, r3, #3
 801d12e:	4a1b      	ldr	r2, [pc, #108]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d130:	4413      	add	r3, r2
 801d132:	1d19      	adds	r1, r3, #4
 801d134:	79fa      	ldrb	r2, [r7, #7]
 801d136:	4613      	mov	r3, r2
 801d138:	005b      	lsls	r3, r3, #1
 801d13a:	4413      	add	r3, r2
 801d13c:	00db      	lsls	r3, r3, #3
 801d13e:	3308      	adds	r3, #8
 801d140:	4a16      	ldr	r2, [pc, #88]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d142:	4413      	add	r3, r2
 801d144:	3304      	adds	r3, #4
 801d146:	461a      	mov	r2, r3
 801d148:	68f8      	ldr	r0, [r7, #12]
 801d14a:	f000 fafb 	bl	801d744 <etharp_request_dst>
 801d14e:	4603      	mov	r3, r0
 801d150:	2b00      	cmp	r3, #0
 801d152:	d109      	bne.n	801d168 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d154:	79fa      	ldrb	r2, [r7, #7]
 801d156:	4911      	ldr	r1, [pc, #68]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d158:	4613      	mov	r3, r2
 801d15a:	005b      	lsls	r3, r3, #1
 801d15c:	4413      	add	r3, r2
 801d15e:	00db      	lsls	r3, r3, #3
 801d160:	440b      	add	r3, r1
 801d162:	3314      	adds	r3, #20
 801d164:	2203      	movs	r2, #3
 801d166:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801d168:	68fb      	ldr	r3, [r7, #12]
 801d16a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801d16e:	79fa      	ldrb	r2, [r7, #7]
 801d170:	4613      	mov	r3, r2
 801d172:	005b      	lsls	r3, r3, #1
 801d174:	4413      	add	r3, r2
 801d176:	00db      	lsls	r3, r3, #3
 801d178:	3308      	adds	r3, #8
 801d17a:	4a08      	ldr	r2, [pc, #32]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d17c:	4413      	add	r3, r2
 801d17e:	3304      	adds	r3, #4
 801d180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d184:	9200      	str	r2, [sp, #0]
 801d186:	460a      	mov	r2, r1
 801d188:	68b9      	ldr	r1, [r7, #8]
 801d18a:	68f8      	ldr	r0, [r7, #12]
 801d18c:	f001 ff82 	bl	801f094 <ethernet_output>
 801d190:	4603      	mov	r3, r0
}
 801d192:	4618      	mov	r0, r3
 801d194:	3710      	adds	r7, #16
 801d196:	46bd      	mov	sp, r7
 801d198:	bd80      	pop	{r7, pc}
 801d19a:	bf00      	nop
 801d19c:	20005550 	.word	0x20005550
 801d1a0:	08024c38 	.word	0x08024c38
 801d1a4:	08024da8 	.word	0x08024da8
 801d1a8:	08024cb0 	.word	0x08024cb0

0801d1ac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801d1ac:	b580      	push	{r7, lr}
 801d1ae:	b08a      	sub	sp, #40	; 0x28
 801d1b0:	af02      	add	r7, sp, #8
 801d1b2:	60f8      	str	r0, [r7, #12]
 801d1b4:	60b9      	str	r1, [r7, #8]
 801d1b6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d106      	bne.n	801d1d0 <etharp_output+0x24>
 801d1c2:	4b73      	ldr	r3, [pc, #460]	; (801d390 <etharp_output+0x1e4>)
 801d1c4:	f240 321e 	movw	r2, #798	; 0x31e
 801d1c8:	4972      	ldr	r1, [pc, #456]	; (801d394 <etharp_output+0x1e8>)
 801d1ca:	4873      	ldr	r0, [pc, #460]	; (801d398 <etharp_output+0x1ec>)
 801d1cc:	f002 fb8e 	bl	801f8ec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801d1d0:	68bb      	ldr	r3, [r7, #8]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d106      	bne.n	801d1e4 <etharp_output+0x38>
 801d1d6:	4b6e      	ldr	r3, [pc, #440]	; (801d390 <etharp_output+0x1e4>)
 801d1d8:	f240 321f 	movw	r2, #799	; 0x31f
 801d1dc:	496f      	ldr	r1, [pc, #444]	; (801d39c <etharp_output+0x1f0>)
 801d1de:	486e      	ldr	r0, [pc, #440]	; (801d398 <etharp_output+0x1ec>)
 801d1e0:	f002 fb84 	bl	801f8ec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d106      	bne.n	801d1f8 <etharp_output+0x4c>
 801d1ea:	4b69      	ldr	r3, [pc, #420]	; (801d390 <etharp_output+0x1e4>)
 801d1ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 801d1f0:	496b      	ldr	r1, [pc, #428]	; (801d3a0 <etharp_output+0x1f4>)
 801d1f2:	4869      	ldr	r0, [pc, #420]	; (801d398 <etharp_output+0x1ec>)
 801d1f4:	f002 fb7a 	bl	801f8ec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	68f9      	ldr	r1, [r7, #12]
 801d1fe:	4618      	mov	r0, r3
 801d200:	f000 ff16 	bl	801e030 <ip4_addr_isbroadcast_u32>
 801d204:	4603      	mov	r3, r0
 801d206:	2b00      	cmp	r3, #0
 801d208:	d002      	beq.n	801d210 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801d20a:	4b66      	ldr	r3, [pc, #408]	; (801d3a4 <etharp_output+0x1f8>)
 801d20c:	61fb      	str	r3, [r7, #28]
 801d20e:	e0af      	b.n	801d370 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d218:	2be0      	cmp	r3, #224	; 0xe0
 801d21a:	d118      	bne.n	801d24e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d21c:	2301      	movs	r3, #1
 801d21e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d220:	2300      	movs	r3, #0
 801d222:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801d224:	235e      	movs	r3, #94	; 0x5e
 801d226:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	3301      	adds	r3, #1
 801d22c:	781b      	ldrb	r3, [r3, #0]
 801d22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d232:	b2db      	uxtb	r3, r3
 801d234:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	3302      	adds	r3, #2
 801d23a:	781b      	ldrb	r3, [r3, #0]
 801d23c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	3303      	adds	r3, #3
 801d242:	781b      	ldrb	r3, [r3, #0]
 801d244:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801d246:	f107 0310 	add.w	r3, r7, #16
 801d24a:	61fb      	str	r3, [r7, #28]
 801d24c:	e090      	b.n	801d370 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	681a      	ldr	r2, [r3, #0]
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	3304      	adds	r3, #4
 801d256:	681b      	ldr	r3, [r3, #0]
 801d258:	405a      	eors	r2, r3
 801d25a:	68fb      	ldr	r3, [r7, #12]
 801d25c:	3308      	adds	r3, #8
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	4013      	ands	r3, r2
 801d262:	2b00      	cmp	r3, #0
 801d264:	d012      	beq.n	801d28c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	681b      	ldr	r3, [r3, #0]
 801d26a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d26c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801d270:	4293      	cmp	r3, r2
 801d272:	d00b      	beq.n	801d28c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	330c      	adds	r3, #12
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d003      	beq.n	801d286 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	330c      	adds	r3, #12
 801d282:	61bb      	str	r3, [r7, #24]
 801d284:	e002      	b.n	801d28c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801d286:	f06f 0303 	mvn.w	r3, #3
 801d28a:	e07d      	b.n	801d388 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d28c:	4b46      	ldr	r3, [pc, #280]	; (801d3a8 <etharp_output+0x1fc>)
 801d28e:	781b      	ldrb	r3, [r3, #0]
 801d290:	4619      	mov	r1, r3
 801d292:	4a46      	ldr	r2, [pc, #280]	; (801d3ac <etharp_output+0x200>)
 801d294:	460b      	mov	r3, r1
 801d296:	005b      	lsls	r3, r3, #1
 801d298:	440b      	add	r3, r1
 801d29a:	00db      	lsls	r3, r3, #3
 801d29c:	4413      	add	r3, r2
 801d29e:	3314      	adds	r3, #20
 801d2a0:	781b      	ldrb	r3, [r3, #0]
 801d2a2:	2b01      	cmp	r3, #1
 801d2a4:	d925      	bls.n	801d2f2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d2a6:	4b40      	ldr	r3, [pc, #256]	; (801d3a8 <etharp_output+0x1fc>)
 801d2a8:	781b      	ldrb	r3, [r3, #0]
 801d2aa:	4619      	mov	r1, r3
 801d2ac:	4a3f      	ldr	r2, [pc, #252]	; (801d3ac <etharp_output+0x200>)
 801d2ae:	460b      	mov	r3, r1
 801d2b0:	005b      	lsls	r3, r3, #1
 801d2b2:	440b      	add	r3, r1
 801d2b4:	00db      	lsls	r3, r3, #3
 801d2b6:	4413      	add	r3, r2
 801d2b8:	3308      	adds	r3, #8
 801d2ba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d2bc:	68fa      	ldr	r2, [r7, #12]
 801d2be:	429a      	cmp	r2, r3
 801d2c0:	d117      	bne.n	801d2f2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801d2c2:	69bb      	ldr	r3, [r7, #24]
 801d2c4:	681a      	ldr	r2, [r3, #0]
 801d2c6:	4b38      	ldr	r3, [pc, #224]	; (801d3a8 <etharp_output+0x1fc>)
 801d2c8:	781b      	ldrb	r3, [r3, #0]
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	4937      	ldr	r1, [pc, #220]	; (801d3ac <etharp_output+0x200>)
 801d2ce:	4603      	mov	r3, r0
 801d2d0:	005b      	lsls	r3, r3, #1
 801d2d2:	4403      	add	r3, r0
 801d2d4:	00db      	lsls	r3, r3, #3
 801d2d6:	440b      	add	r3, r1
 801d2d8:	3304      	adds	r3, #4
 801d2da:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d2dc:	429a      	cmp	r2, r3
 801d2de:	d108      	bne.n	801d2f2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d2e0:	4b31      	ldr	r3, [pc, #196]	; (801d3a8 <etharp_output+0x1fc>)
 801d2e2:	781b      	ldrb	r3, [r3, #0]
 801d2e4:	461a      	mov	r2, r3
 801d2e6:	68b9      	ldr	r1, [r7, #8]
 801d2e8:	68f8      	ldr	r0, [r7, #12]
 801d2ea:	f7ff fec5 	bl	801d078 <etharp_output_to_arp_index>
 801d2ee:	4603      	mov	r3, r0
 801d2f0:	e04a      	b.n	801d388 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d2f2:	2300      	movs	r3, #0
 801d2f4:	75fb      	strb	r3, [r7, #23]
 801d2f6:	e031      	b.n	801d35c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d2f8:	7dfa      	ldrb	r2, [r7, #23]
 801d2fa:	492c      	ldr	r1, [pc, #176]	; (801d3ac <etharp_output+0x200>)
 801d2fc:	4613      	mov	r3, r2
 801d2fe:	005b      	lsls	r3, r3, #1
 801d300:	4413      	add	r3, r2
 801d302:	00db      	lsls	r3, r3, #3
 801d304:	440b      	add	r3, r1
 801d306:	3314      	adds	r3, #20
 801d308:	781b      	ldrb	r3, [r3, #0]
 801d30a:	2b01      	cmp	r3, #1
 801d30c:	d923      	bls.n	801d356 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801d30e:	7dfa      	ldrb	r2, [r7, #23]
 801d310:	4926      	ldr	r1, [pc, #152]	; (801d3ac <etharp_output+0x200>)
 801d312:	4613      	mov	r3, r2
 801d314:	005b      	lsls	r3, r3, #1
 801d316:	4413      	add	r3, r2
 801d318:	00db      	lsls	r3, r3, #3
 801d31a:	440b      	add	r3, r1
 801d31c:	3308      	adds	r3, #8
 801d31e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d320:	68fa      	ldr	r2, [r7, #12]
 801d322:	429a      	cmp	r2, r3
 801d324:	d117      	bne.n	801d356 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801d326:	69bb      	ldr	r3, [r7, #24]
 801d328:	6819      	ldr	r1, [r3, #0]
 801d32a:	7dfa      	ldrb	r2, [r7, #23]
 801d32c:	481f      	ldr	r0, [pc, #124]	; (801d3ac <etharp_output+0x200>)
 801d32e:	4613      	mov	r3, r2
 801d330:	005b      	lsls	r3, r3, #1
 801d332:	4413      	add	r3, r2
 801d334:	00db      	lsls	r3, r3, #3
 801d336:	4403      	add	r3, r0
 801d338:	3304      	adds	r3, #4
 801d33a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801d33c:	4299      	cmp	r1, r3
 801d33e:	d10a      	bne.n	801d356 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801d340:	4a19      	ldr	r2, [pc, #100]	; (801d3a8 <etharp_output+0x1fc>)
 801d342:	7dfb      	ldrb	r3, [r7, #23]
 801d344:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801d346:	7dfb      	ldrb	r3, [r7, #23]
 801d348:	461a      	mov	r2, r3
 801d34a:	68b9      	ldr	r1, [r7, #8]
 801d34c:	68f8      	ldr	r0, [r7, #12]
 801d34e:	f7ff fe93 	bl	801d078 <etharp_output_to_arp_index>
 801d352:	4603      	mov	r3, r0
 801d354:	e018      	b.n	801d388 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d356:	7dfb      	ldrb	r3, [r7, #23]
 801d358:	3301      	adds	r3, #1
 801d35a:	75fb      	strb	r3, [r7, #23]
 801d35c:	7dfb      	ldrb	r3, [r7, #23]
 801d35e:	2b09      	cmp	r3, #9
 801d360:	d9ca      	bls.n	801d2f8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801d362:	68ba      	ldr	r2, [r7, #8]
 801d364:	69b9      	ldr	r1, [r7, #24]
 801d366:	68f8      	ldr	r0, [r7, #12]
 801d368:	f000 f822 	bl	801d3b0 <etharp_query>
 801d36c:	4603      	mov	r3, r0
 801d36e:	e00b      	b.n	801d388 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801d370:	68fb      	ldr	r3, [r7, #12]
 801d372:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801d376:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d37a:	9300      	str	r3, [sp, #0]
 801d37c:	69fb      	ldr	r3, [r7, #28]
 801d37e:	68b9      	ldr	r1, [r7, #8]
 801d380:	68f8      	ldr	r0, [r7, #12]
 801d382:	f001 fe87 	bl	801f094 <ethernet_output>
 801d386:	4603      	mov	r3, r0
}
 801d388:	4618      	mov	r0, r3
 801d38a:	3720      	adds	r7, #32
 801d38c:	46bd      	mov	sp, r7
 801d38e:	bd80      	pop	{r7, pc}
 801d390:	08024c38 	.word	0x08024c38
 801d394:	08024d88 	.word	0x08024d88
 801d398:	08024cb0 	.word	0x08024cb0
 801d39c:	08024dd8 	.word	0x08024dd8
 801d3a0:	08024d78 	.word	0x08024d78
 801d3a4:	080256bc 	.word	0x080256bc
 801d3a8:	20005640 	.word	0x20005640
 801d3ac:	20005550 	.word	0x20005550

0801d3b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801d3b0:	b580      	push	{r7, lr}
 801d3b2:	b08c      	sub	sp, #48	; 0x30
 801d3b4:	af02      	add	r7, sp, #8
 801d3b6:	60f8      	str	r0, [r7, #12]
 801d3b8:	60b9      	str	r1, [r7, #8]
 801d3ba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	332a      	adds	r3, #42	; 0x2a
 801d3c0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801d3c2:	23ff      	movs	r3, #255	; 0xff
 801d3c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801d3c8:	2300      	movs	r3, #0
 801d3ca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d3cc:	68bb      	ldr	r3, [r7, #8]
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	68f9      	ldr	r1, [r7, #12]
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	f000 fe2c 	bl	801e030 <ip4_addr_isbroadcast_u32>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d10c      	bne.n	801d3f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d3de:	68bb      	ldr	r3, [r7, #8]
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d3e6:	2be0      	cmp	r3, #224	; 0xe0
 801d3e8:	d006      	beq.n	801d3f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d3ea:	68bb      	ldr	r3, [r7, #8]
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d003      	beq.n	801d3f8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d3f0:	68bb      	ldr	r3, [r7, #8]
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d102      	bne.n	801d3fe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d3f8:	f06f 030f 	mvn.w	r3, #15
 801d3fc:	e101      	b.n	801d602 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d3fe:	68fa      	ldr	r2, [r7, #12]
 801d400:	2101      	movs	r1, #1
 801d402:	68b8      	ldr	r0, [r7, #8]
 801d404:	f7ff fb5c 	bl	801cac0 <etharp_find_entry>
 801d408:	4603      	mov	r3, r0
 801d40a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801d40c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d410:	2b00      	cmp	r3, #0
 801d412:	da02      	bge.n	801d41a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801d414:	8a7b      	ldrh	r3, [r7, #18]
 801d416:	b25b      	sxtb	r3, r3
 801d418:	e0f3      	b.n	801d602 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d41a:	8a7b      	ldrh	r3, [r7, #18]
 801d41c:	2b7e      	cmp	r3, #126	; 0x7e
 801d41e:	d906      	bls.n	801d42e <etharp_query+0x7e>
 801d420:	4b7a      	ldr	r3, [pc, #488]	; (801d60c <etharp_query+0x25c>)
 801d422:	f240 32c1 	movw	r2, #961	; 0x3c1
 801d426:	497a      	ldr	r1, [pc, #488]	; (801d610 <etharp_query+0x260>)
 801d428:	487a      	ldr	r0, [pc, #488]	; (801d614 <etharp_query+0x264>)
 801d42a:	f002 fa5f 	bl	801f8ec <iprintf>
  i = (netif_addr_idx_t)i_err;
 801d42e:	8a7b      	ldrh	r3, [r7, #18]
 801d430:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d432:	7c7a      	ldrb	r2, [r7, #17]
 801d434:	4978      	ldr	r1, [pc, #480]	; (801d618 <etharp_query+0x268>)
 801d436:	4613      	mov	r3, r2
 801d438:	005b      	lsls	r3, r3, #1
 801d43a:	4413      	add	r3, r2
 801d43c:	00db      	lsls	r3, r3, #3
 801d43e:	440b      	add	r3, r1
 801d440:	3314      	adds	r3, #20
 801d442:	781b      	ldrb	r3, [r3, #0]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d115      	bne.n	801d474 <etharp_query+0xc4>
    is_new_entry = 1;
 801d448:	2301      	movs	r3, #1
 801d44a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d44c:	7c7a      	ldrb	r2, [r7, #17]
 801d44e:	4972      	ldr	r1, [pc, #456]	; (801d618 <etharp_query+0x268>)
 801d450:	4613      	mov	r3, r2
 801d452:	005b      	lsls	r3, r3, #1
 801d454:	4413      	add	r3, r2
 801d456:	00db      	lsls	r3, r3, #3
 801d458:	440b      	add	r3, r1
 801d45a:	3314      	adds	r3, #20
 801d45c:	2201      	movs	r2, #1
 801d45e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d460:	7c7a      	ldrb	r2, [r7, #17]
 801d462:	496d      	ldr	r1, [pc, #436]	; (801d618 <etharp_query+0x268>)
 801d464:	4613      	mov	r3, r2
 801d466:	005b      	lsls	r3, r3, #1
 801d468:	4413      	add	r3, r2
 801d46a:	00db      	lsls	r3, r3, #3
 801d46c:	440b      	add	r3, r1
 801d46e:	3308      	adds	r3, #8
 801d470:	68fa      	ldr	r2, [r7, #12]
 801d472:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d474:	7c7a      	ldrb	r2, [r7, #17]
 801d476:	4968      	ldr	r1, [pc, #416]	; (801d618 <etharp_query+0x268>)
 801d478:	4613      	mov	r3, r2
 801d47a:	005b      	lsls	r3, r3, #1
 801d47c:	4413      	add	r3, r2
 801d47e:	00db      	lsls	r3, r3, #3
 801d480:	440b      	add	r3, r1
 801d482:	3314      	adds	r3, #20
 801d484:	781b      	ldrb	r3, [r3, #0]
 801d486:	2b01      	cmp	r3, #1
 801d488:	d011      	beq.n	801d4ae <etharp_query+0xfe>
 801d48a:	7c7a      	ldrb	r2, [r7, #17]
 801d48c:	4962      	ldr	r1, [pc, #392]	; (801d618 <etharp_query+0x268>)
 801d48e:	4613      	mov	r3, r2
 801d490:	005b      	lsls	r3, r3, #1
 801d492:	4413      	add	r3, r2
 801d494:	00db      	lsls	r3, r3, #3
 801d496:	440b      	add	r3, r1
 801d498:	3314      	adds	r3, #20
 801d49a:	781b      	ldrb	r3, [r3, #0]
 801d49c:	2b01      	cmp	r3, #1
 801d49e:	d806      	bhi.n	801d4ae <etharp_query+0xfe>
 801d4a0:	4b5a      	ldr	r3, [pc, #360]	; (801d60c <etharp_query+0x25c>)
 801d4a2:	f240 32cd 	movw	r2, #973	; 0x3cd
 801d4a6:	495d      	ldr	r1, [pc, #372]	; (801d61c <etharp_query+0x26c>)
 801d4a8:	485a      	ldr	r0, [pc, #360]	; (801d614 <etharp_query+0x264>)
 801d4aa:	f002 fa1f 	bl	801f8ec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801d4ae:	6a3b      	ldr	r3, [r7, #32]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d102      	bne.n	801d4ba <etharp_query+0x10a>
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	d10c      	bne.n	801d4d4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801d4ba:	68b9      	ldr	r1, [r7, #8]
 801d4bc:	68f8      	ldr	r0, [r7, #12]
 801d4be:	f000 f963 	bl	801d788 <etharp_request>
 801d4c2:	4603      	mov	r3, r0
 801d4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d102      	bne.n	801d4d4 <etharp_query+0x124>
      return result;
 801d4ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801d4d2:	e096      	b.n	801d602 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d106      	bne.n	801d4e8 <etharp_query+0x138>
 801d4da:	4b4c      	ldr	r3, [pc, #304]	; (801d60c <etharp_query+0x25c>)
 801d4dc:	f240 32e1 	movw	r2, #993	; 0x3e1
 801d4e0:	494f      	ldr	r1, [pc, #316]	; (801d620 <etharp_query+0x270>)
 801d4e2:	484c      	ldr	r0, [pc, #304]	; (801d614 <etharp_query+0x264>)
 801d4e4:	f002 fa02 	bl	801f8ec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d4e8:	7c7a      	ldrb	r2, [r7, #17]
 801d4ea:	494b      	ldr	r1, [pc, #300]	; (801d618 <etharp_query+0x268>)
 801d4ec:	4613      	mov	r3, r2
 801d4ee:	005b      	lsls	r3, r3, #1
 801d4f0:	4413      	add	r3, r2
 801d4f2:	00db      	lsls	r3, r3, #3
 801d4f4:	440b      	add	r3, r1
 801d4f6:	3314      	adds	r3, #20
 801d4f8:	781b      	ldrb	r3, [r3, #0]
 801d4fa:	2b01      	cmp	r3, #1
 801d4fc:	d917      	bls.n	801d52e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801d4fe:	4a49      	ldr	r2, [pc, #292]	; (801d624 <etharp_query+0x274>)
 801d500:	7c7b      	ldrb	r3, [r7, #17]
 801d502:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d504:	7c7a      	ldrb	r2, [r7, #17]
 801d506:	4613      	mov	r3, r2
 801d508:	005b      	lsls	r3, r3, #1
 801d50a:	4413      	add	r3, r2
 801d50c:	00db      	lsls	r3, r3, #3
 801d50e:	3308      	adds	r3, #8
 801d510:	4a41      	ldr	r2, [pc, #260]	; (801d618 <etharp_query+0x268>)
 801d512:	4413      	add	r3, r2
 801d514:	3304      	adds	r3, #4
 801d516:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d51a:	9200      	str	r2, [sp, #0]
 801d51c:	697a      	ldr	r2, [r7, #20]
 801d51e:	6879      	ldr	r1, [r7, #4]
 801d520:	68f8      	ldr	r0, [r7, #12]
 801d522:	f001 fdb7 	bl	801f094 <ethernet_output>
 801d526:	4603      	mov	r3, r0
 801d528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d52c:	e067      	b.n	801d5fe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d52e:	7c7a      	ldrb	r2, [r7, #17]
 801d530:	4939      	ldr	r1, [pc, #228]	; (801d618 <etharp_query+0x268>)
 801d532:	4613      	mov	r3, r2
 801d534:	005b      	lsls	r3, r3, #1
 801d536:	4413      	add	r3, r2
 801d538:	00db      	lsls	r3, r3, #3
 801d53a:	440b      	add	r3, r1
 801d53c:	3314      	adds	r3, #20
 801d53e:	781b      	ldrb	r3, [r3, #0]
 801d540:	2b01      	cmp	r3, #1
 801d542:	d15c      	bne.n	801d5fe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d544:	2300      	movs	r3, #0
 801d546:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d54c:	e01c      	b.n	801d588 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d54e:	69fb      	ldr	r3, [r7, #28]
 801d550:	895a      	ldrh	r2, [r3, #10]
 801d552:	69fb      	ldr	r3, [r7, #28]
 801d554:	891b      	ldrh	r3, [r3, #8]
 801d556:	429a      	cmp	r2, r3
 801d558:	d10a      	bne.n	801d570 <etharp_query+0x1c0>
 801d55a:	69fb      	ldr	r3, [r7, #28]
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d006      	beq.n	801d570 <etharp_query+0x1c0>
 801d562:	4b2a      	ldr	r3, [pc, #168]	; (801d60c <etharp_query+0x25c>)
 801d564:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801d568:	492f      	ldr	r1, [pc, #188]	; (801d628 <etharp_query+0x278>)
 801d56a:	482a      	ldr	r0, [pc, #168]	; (801d614 <etharp_query+0x264>)
 801d56c:	f002 f9be 	bl	801f8ec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801d570:	69fb      	ldr	r3, [r7, #28]
 801d572:	7b1b      	ldrb	r3, [r3, #12]
 801d574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d002      	beq.n	801d582 <etharp_query+0x1d2>
        copy_needed = 1;
 801d57c:	2301      	movs	r3, #1
 801d57e:	61bb      	str	r3, [r7, #24]
        break;
 801d580:	e005      	b.n	801d58e <etharp_query+0x1de>
      }
      p = p->next;
 801d582:	69fb      	ldr	r3, [r7, #28]
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d588:	69fb      	ldr	r3, [r7, #28]
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d1df      	bne.n	801d54e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801d58e:	69bb      	ldr	r3, [r7, #24]
 801d590:	2b00      	cmp	r3, #0
 801d592:	d007      	beq.n	801d5a4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d594:	687a      	ldr	r2, [r7, #4]
 801d596:	f44f 7120 	mov.w	r1, #640	; 0x280
 801d59a:	200e      	movs	r0, #14
 801d59c:	f7f6 fb2c 	bl	8013bf8 <pbuf_clone>
 801d5a0:	61f8      	str	r0, [r7, #28]
 801d5a2:	e004      	b.n	801d5ae <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d5a8:	69f8      	ldr	r0, [r7, #28]
 801d5aa:	f7f6 f81b 	bl	80135e4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d5ae:	69fb      	ldr	r3, [r7, #28]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d021      	beq.n	801d5f8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d5b4:	7c7a      	ldrb	r2, [r7, #17]
 801d5b6:	4918      	ldr	r1, [pc, #96]	; (801d618 <etharp_query+0x268>)
 801d5b8:	4613      	mov	r3, r2
 801d5ba:	005b      	lsls	r3, r3, #1
 801d5bc:	4413      	add	r3, r2
 801d5be:	00db      	lsls	r3, r3, #3
 801d5c0:	440b      	add	r3, r1
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d00a      	beq.n	801d5de <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d5c8:	7c7a      	ldrb	r2, [r7, #17]
 801d5ca:	4913      	ldr	r1, [pc, #76]	; (801d618 <etharp_query+0x268>)
 801d5cc:	4613      	mov	r3, r2
 801d5ce:	005b      	lsls	r3, r3, #1
 801d5d0:	4413      	add	r3, r2
 801d5d2:	00db      	lsls	r3, r3, #3
 801d5d4:	440b      	add	r3, r1
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	4618      	mov	r0, r3
 801d5da:	f7f5 ff5d 	bl	8013498 <pbuf_free>
      }
      arp_table[i].q = p;
 801d5de:	7c7a      	ldrb	r2, [r7, #17]
 801d5e0:	490d      	ldr	r1, [pc, #52]	; (801d618 <etharp_query+0x268>)
 801d5e2:	4613      	mov	r3, r2
 801d5e4:	005b      	lsls	r3, r3, #1
 801d5e6:	4413      	add	r3, r2
 801d5e8:	00db      	lsls	r3, r3, #3
 801d5ea:	440b      	add	r3, r1
 801d5ec:	69fa      	ldr	r2, [r7, #28]
 801d5ee:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d5f0:	2300      	movs	r3, #0
 801d5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d5f6:	e002      	b.n	801d5fe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d5f8:	23ff      	movs	r3, #255	; 0xff
 801d5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801d5fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801d602:	4618      	mov	r0, r3
 801d604:	3728      	adds	r7, #40	; 0x28
 801d606:	46bd      	mov	sp, r7
 801d608:	bd80      	pop	{r7, pc}
 801d60a:	bf00      	nop
 801d60c:	08024c38 	.word	0x08024c38
 801d610:	08024de4 	.word	0x08024de4
 801d614:	08024cb0 	.word	0x08024cb0
 801d618:	20005550 	.word	0x20005550
 801d61c:	08024df4 	.word	0x08024df4
 801d620:	08024dd8 	.word	0x08024dd8
 801d624:	20005640 	.word	0x20005640
 801d628:	08024e1c 	.word	0x08024e1c

0801d62c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d62c:	b580      	push	{r7, lr}
 801d62e:	b08a      	sub	sp, #40	; 0x28
 801d630:	af02      	add	r7, sp, #8
 801d632:	60f8      	str	r0, [r7, #12]
 801d634:	60b9      	str	r1, [r7, #8]
 801d636:	607a      	str	r2, [r7, #4]
 801d638:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d63a:	2300      	movs	r3, #0
 801d63c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d63e:	68fb      	ldr	r3, [r7, #12]
 801d640:	2b00      	cmp	r3, #0
 801d642:	d106      	bne.n	801d652 <etharp_raw+0x26>
 801d644:	4b3a      	ldr	r3, [pc, #232]	; (801d730 <etharp_raw+0x104>)
 801d646:	f240 4257 	movw	r2, #1111	; 0x457
 801d64a:	493a      	ldr	r1, [pc, #232]	; (801d734 <etharp_raw+0x108>)
 801d64c:	483a      	ldr	r0, [pc, #232]	; (801d738 <etharp_raw+0x10c>)
 801d64e:	f002 f94d 	bl	801f8ec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d652:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d656:	211c      	movs	r1, #28
 801d658:	200e      	movs	r0, #14
 801d65a:	f7f5 fc39 	bl	8012ed0 <pbuf_alloc>
 801d65e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d660:	69bb      	ldr	r3, [r7, #24]
 801d662:	2b00      	cmp	r3, #0
 801d664:	d102      	bne.n	801d66c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801d666:	f04f 33ff 	mov.w	r3, #4294967295
 801d66a:	e05d      	b.n	801d728 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d66c:	69bb      	ldr	r3, [r7, #24]
 801d66e:	895b      	ldrh	r3, [r3, #10]
 801d670:	2b1b      	cmp	r3, #27
 801d672:	d806      	bhi.n	801d682 <etharp_raw+0x56>
 801d674:	4b2e      	ldr	r3, [pc, #184]	; (801d730 <etharp_raw+0x104>)
 801d676:	f240 4262 	movw	r2, #1122	; 0x462
 801d67a:	4930      	ldr	r1, [pc, #192]	; (801d73c <etharp_raw+0x110>)
 801d67c:	482e      	ldr	r0, [pc, #184]	; (801d738 <etharp_raw+0x10c>)
 801d67e:	f002 f935 	bl	801f8ec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d682:	69bb      	ldr	r3, [r7, #24]
 801d684:	685b      	ldr	r3, [r3, #4]
 801d686:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d688:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d68a:	4618      	mov	r0, r3
 801d68c:	f7f3 fb76 	bl	8010d7c <lwip_htons>
 801d690:	4603      	mov	r3, r0
 801d692:	461a      	mov	r2, r3
 801d694:	697b      	ldr	r3, [r7, #20]
 801d696:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d698:	68fb      	ldr	r3, [r7, #12]
 801d69a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d69e:	2b06      	cmp	r3, #6
 801d6a0:	d006      	beq.n	801d6b0 <etharp_raw+0x84>
 801d6a2:	4b23      	ldr	r3, [pc, #140]	; (801d730 <etharp_raw+0x104>)
 801d6a4:	f240 4269 	movw	r2, #1129	; 0x469
 801d6a8:	4925      	ldr	r1, [pc, #148]	; (801d740 <etharp_raw+0x114>)
 801d6aa:	4823      	ldr	r0, [pc, #140]	; (801d738 <etharp_raw+0x10c>)
 801d6ac:	f002 f91e 	bl	801f8ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d6b0:	697b      	ldr	r3, [r7, #20]
 801d6b2:	3308      	adds	r3, #8
 801d6b4:	2206      	movs	r2, #6
 801d6b6:	6839      	ldr	r1, [r7, #0]
 801d6b8:	4618      	mov	r0, r3
 801d6ba:	f002 f82d 	bl	801f718 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d6be:	697b      	ldr	r3, [r7, #20]
 801d6c0:	3312      	adds	r3, #18
 801d6c2:	2206      	movs	r2, #6
 801d6c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d6c6:	4618      	mov	r0, r3
 801d6c8:	f002 f826 	bl	801f718 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d6cc:	697b      	ldr	r3, [r7, #20]
 801d6ce:	330e      	adds	r3, #14
 801d6d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d6d2:	6812      	ldr	r2, [r2, #0]
 801d6d4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d6d6:	697b      	ldr	r3, [r7, #20]
 801d6d8:	3318      	adds	r3, #24
 801d6da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d6dc:	6812      	ldr	r2, [r2, #0]
 801d6de:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d6e0:	697b      	ldr	r3, [r7, #20]
 801d6e2:	2200      	movs	r2, #0
 801d6e4:	701a      	strb	r2, [r3, #0]
 801d6e6:	2200      	movs	r2, #0
 801d6e8:	f042 0201 	orr.w	r2, r2, #1
 801d6ec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d6ee:	697b      	ldr	r3, [r7, #20]
 801d6f0:	2200      	movs	r2, #0
 801d6f2:	f042 0208 	orr.w	r2, r2, #8
 801d6f6:	709a      	strb	r2, [r3, #2]
 801d6f8:	2200      	movs	r2, #0
 801d6fa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d6fc:	697b      	ldr	r3, [r7, #20]
 801d6fe:	2206      	movs	r2, #6
 801d700:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d702:	697b      	ldr	r3, [r7, #20]
 801d704:	2204      	movs	r2, #4
 801d706:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d708:	f640 0306 	movw	r3, #2054	; 0x806
 801d70c:	9300      	str	r3, [sp, #0]
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	68ba      	ldr	r2, [r7, #8]
 801d712:	69b9      	ldr	r1, [r7, #24]
 801d714:	68f8      	ldr	r0, [r7, #12]
 801d716:	f001 fcbd 	bl	801f094 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801d71a:	69b8      	ldr	r0, [r7, #24]
 801d71c:	f7f5 febc 	bl	8013498 <pbuf_free>
  p = NULL;
 801d720:	2300      	movs	r3, #0
 801d722:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d724:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d728:	4618      	mov	r0, r3
 801d72a:	3720      	adds	r7, #32
 801d72c:	46bd      	mov	sp, r7
 801d72e:	bd80      	pop	{r7, pc}
 801d730:	08024c38 	.word	0x08024c38
 801d734:	08024d88 	.word	0x08024d88
 801d738:	08024cb0 	.word	0x08024cb0
 801d73c:	08024e38 	.word	0x08024e38
 801d740:	08024e6c 	.word	0x08024e6c

0801d744 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801d744:	b580      	push	{r7, lr}
 801d746:	b088      	sub	sp, #32
 801d748:	af04      	add	r7, sp, #16
 801d74a:	60f8      	str	r0, [r7, #12]
 801d74c:	60b9      	str	r1, [r7, #8]
 801d74e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801d75c:	68fb      	ldr	r3, [r7, #12]
 801d75e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d760:	2201      	movs	r2, #1
 801d762:	9203      	str	r2, [sp, #12]
 801d764:	68ba      	ldr	r2, [r7, #8]
 801d766:	9202      	str	r2, [sp, #8]
 801d768:	4a06      	ldr	r2, [pc, #24]	; (801d784 <etharp_request_dst+0x40>)
 801d76a:	9201      	str	r2, [sp, #4]
 801d76c:	9300      	str	r3, [sp, #0]
 801d76e:	4603      	mov	r3, r0
 801d770:	687a      	ldr	r2, [r7, #4]
 801d772:	68f8      	ldr	r0, [r7, #12]
 801d774:	f7ff ff5a 	bl	801d62c <etharp_raw>
 801d778:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d77a:	4618      	mov	r0, r3
 801d77c:	3710      	adds	r7, #16
 801d77e:	46bd      	mov	sp, r7
 801d780:	bd80      	pop	{r7, pc}
 801d782:	bf00      	nop
 801d784:	080256c4 	.word	0x080256c4

0801d788 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d788:	b580      	push	{r7, lr}
 801d78a:	b082      	sub	sp, #8
 801d78c:	af00      	add	r7, sp, #0
 801d78e:	6078      	str	r0, [r7, #4]
 801d790:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d792:	4a05      	ldr	r2, [pc, #20]	; (801d7a8 <etharp_request+0x20>)
 801d794:	6839      	ldr	r1, [r7, #0]
 801d796:	6878      	ldr	r0, [r7, #4]
 801d798:	f7ff ffd4 	bl	801d744 <etharp_request_dst>
 801d79c:	4603      	mov	r3, r0
}
 801d79e:	4618      	mov	r0, r3
 801d7a0:	3708      	adds	r7, #8
 801d7a2:	46bd      	mov	sp, r7
 801d7a4:	bd80      	pop	{r7, pc}
 801d7a6:	bf00      	nop
 801d7a8:	080256bc 	.word	0x080256bc

0801d7ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d7ac:	b580      	push	{r7, lr}
 801d7ae:	b08e      	sub	sp, #56	; 0x38
 801d7b0:	af04      	add	r7, sp, #16
 801d7b2:	6078      	str	r0, [r7, #4]
 801d7b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d7b6:	4b79      	ldr	r3, [pc, #484]	; (801d99c <icmp_input+0x1f0>)
 801d7b8:	689b      	ldr	r3, [r3, #8]
 801d7ba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7be:	781b      	ldrb	r3, [r3, #0]
 801d7c0:	f003 030f 	and.w	r3, r3, #15
 801d7c4:	b2db      	uxtb	r3, r3
 801d7c6:	009b      	lsls	r3, r3, #2
 801d7c8:	b2db      	uxtb	r3, r3
 801d7ca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801d7cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d7ce:	2b13      	cmp	r3, #19
 801d7d0:	f240 80cd 	bls.w	801d96e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	895b      	ldrh	r3, [r3, #10]
 801d7d8:	2b03      	cmp	r3, #3
 801d7da:	f240 80ca 	bls.w	801d972 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	685b      	ldr	r3, [r3, #4]
 801d7e2:	781b      	ldrb	r3, [r3, #0]
 801d7e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d7e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	f000 80b7 	beq.w	801d960 <icmp_input+0x1b4>
 801d7f2:	2b08      	cmp	r3, #8
 801d7f4:	f040 80b7 	bne.w	801d966 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d7f8:	4b69      	ldr	r3, [pc, #420]	; (801d9a0 <icmp_input+0x1f4>)
 801d7fa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d7fc:	4b67      	ldr	r3, [pc, #412]	; (801d99c <icmp_input+0x1f0>)
 801d7fe:	695b      	ldr	r3, [r3, #20]
 801d800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d804:	2be0      	cmp	r3, #224	; 0xe0
 801d806:	f000 80bb 	beq.w	801d980 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d80a:	4b64      	ldr	r3, [pc, #400]	; (801d99c <icmp_input+0x1f0>)
 801d80c:	695b      	ldr	r3, [r3, #20]
 801d80e:	4a63      	ldr	r2, [pc, #396]	; (801d99c <icmp_input+0x1f0>)
 801d810:	6812      	ldr	r2, [r2, #0]
 801d812:	4611      	mov	r1, r2
 801d814:	4618      	mov	r0, r3
 801d816:	f000 fc0b 	bl	801e030 <ip4_addr_isbroadcast_u32>
 801d81a:	4603      	mov	r3, r0
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	f040 80b1 	bne.w	801d984 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	891b      	ldrh	r3, [r3, #8]
 801d826:	2b07      	cmp	r3, #7
 801d828:	f240 80a5 	bls.w	801d976 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d82c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d82e:	330e      	adds	r3, #14
 801d830:	4619      	mov	r1, r3
 801d832:	6878      	ldr	r0, [r7, #4]
 801d834:	f7f5 fd9a 	bl	801336c <pbuf_add_header>
 801d838:	4603      	mov	r3, r0
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d04b      	beq.n	801d8d6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	891a      	ldrh	r2, [r3, #8]
 801d842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d844:	4413      	add	r3, r2
 801d846:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	891b      	ldrh	r3, [r3, #8]
 801d84c:	8b7a      	ldrh	r2, [r7, #26]
 801d84e:	429a      	cmp	r2, r3
 801d850:	f0c0 809a 	bcc.w	801d988 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d854:	8b7b      	ldrh	r3, [r7, #26]
 801d856:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d85a:	4619      	mov	r1, r3
 801d85c:	200e      	movs	r0, #14
 801d85e:	f7f5 fb37 	bl	8012ed0 <pbuf_alloc>
 801d862:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d864:	697b      	ldr	r3, [r7, #20]
 801d866:	2b00      	cmp	r3, #0
 801d868:	f000 8090 	beq.w	801d98c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d86c:	697b      	ldr	r3, [r7, #20]
 801d86e:	895b      	ldrh	r3, [r3, #10]
 801d870:	461a      	mov	r2, r3
 801d872:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d874:	3308      	adds	r3, #8
 801d876:	429a      	cmp	r2, r3
 801d878:	d203      	bcs.n	801d882 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801d87a:	6978      	ldr	r0, [r7, #20]
 801d87c:	f7f5 fe0c 	bl	8013498 <pbuf_free>
          goto icmperr;
 801d880:	e085      	b.n	801d98e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d882:	697b      	ldr	r3, [r7, #20]
 801d884:	685b      	ldr	r3, [r3, #4]
 801d886:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801d888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d88a:	4618      	mov	r0, r3
 801d88c:	f001 ff44 	bl	801f718 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d892:	4619      	mov	r1, r3
 801d894:	6978      	ldr	r0, [r7, #20]
 801d896:	f7f5 fd79 	bl	801338c <pbuf_remove_header>
 801d89a:	4603      	mov	r3, r0
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d009      	beq.n	801d8b4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d8a0:	4b40      	ldr	r3, [pc, #256]	; (801d9a4 <icmp_input+0x1f8>)
 801d8a2:	22b6      	movs	r2, #182	; 0xb6
 801d8a4:	4940      	ldr	r1, [pc, #256]	; (801d9a8 <icmp_input+0x1fc>)
 801d8a6:	4841      	ldr	r0, [pc, #260]	; (801d9ac <icmp_input+0x200>)
 801d8a8:	f002 f820 	bl	801f8ec <iprintf>
          pbuf_free(r);
 801d8ac:	6978      	ldr	r0, [r7, #20]
 801d8ae:	f7f5 fdf3 	bl	8013498 <pbuf_free>
          goto icmperr;
 801d8b2:	e06c      	b.n	801d98e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d8b4:	6879      	ldr	r1, [r7, #4]
 801d8b6:	6978      	ldr	r0, [r7, #20]
 801d8b8:	f7f5 ff22 	bl	8013700 <pbuf_copy>
 801d8bc:	4603      	mov	r3, r0
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d003      	beq.n	801d8ca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801d8c2:	6978      	ldr	r0, [r7, #20]
 801d8c4:	f7f5 fde8 	bl	8013498 <pbuf_free>
          goto icmperr;
 801d8c8:	e061      	b.n	801d98e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801d8ca:	6878      	ldr	r0, [r7, #4]
 801d8cc:	f7f5 fde4 	bl	8013498 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d8d0:	697b      	ldr	r3, [r7, #20]
 801d8d2:	607b      	str	r3, [r7, #4]
 801d8d4:	e00f      	b.n	801d8f6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d8d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d8d8:	330e      	adds	r3, #14
 801d8da:	4619      	mov	r1, r3
 801d8dc:	6878      	ldr	r0, [r7, #4]
 801d8de:	f7f5 fd55 	bl	801338c <pbuf_remove_header>
 801d8e2:	4603      	mov	r3, r0
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d006      	beq.n	801d8f6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d8e8:	4b2e      	ldr	r3, [pc, #184]	; (801d9a4 <icmp_input+0x1f8>)
 801d8ea:	22c7      	movs	r2, #199	; 0xc7
 801d8ec:	4930      	ldr	r1, [pc, #192]	; (801d9b0 <icmp_input+0x204>)
 801d8ee:	482f      	ldr	r0, [pc, #188]	; (801d9ac <icmp_input+0x200>)
 801d8f0:	f001 fffc 	bl	801f8ec <iprintf>
          goto icmperr;
 801d8f4:	e04b      	b.n	801d98e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	685b      	ldr	r3, [r3, #4]
 801d8fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d8fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d8fe:	4619      	mov	r1, r3
 801d900:	6878      	ldr	r0, [r7, #4]
 801d902:	f7f5 fd33 	bl	801336c <pbuf_add_header>
 801d906:	4603      	mov	r3, r0
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d12b      	bne.n	801d964 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	685b      	ldr	r3, [r3, #4]
 801d910:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d912:	69fb      	ldr	r3, [r7, #28]
 801d914:	681a      	ldr	r2, [r3, #0]
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d91a:	4b20      	ldr	r3, [pc, #128]	; (801d99c <icmp_input+0x1f0>)
 801d91c:	691a      	ldr	r2, [r3, #16]
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d922:	693b      	ldr	r3, [r7, #16]
 801d924:	2200      	movs	r2, #0
 801d926:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801d928:	693b      	ldr	r3, [r7, #16]
 801d92a:	2200      	movs	r2, #0
 801d92c:	709a      	strb	r2, [r3, #2]
 801d92e:	2200      	movs	r2, #0
 801d930:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d932:	68fb      	ldr	r3, [r7, #12]
 801d934:	22ff      	movs	r2, #255	; 0xff
 801d936:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	2200      	movs	r2, #0
 801d93c:	729a      	strb	r2, [r3, #10]
 801d93e:	2200      	movs	r2, #0
 801d940:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d942:	683b      	ldr	r3, [r7, #0]
 801d944:	9302      	str	r3, [sp, #8]
 801d946:	2301      	movs	r3, #1
 801d948:	9301      	str	r3, [sp, #4]
 801d94a:	2300      	movs	r3, #0
 801d94c:	9300      	str	r3, [sp, #0]
 801d94e:	23ff      	movs	r3, #255	; 0xff
 801d950:	2200      	movs	r2, #0
 801d952:	69f9      	ldr	r1, [r7, #28]
 801d954:	6878      	ldr	r0, [r7, #4]
 801d956:	f000 fa93 	bl	801de80 <ip4_output_if>
 801d95a:	4603      	mov	r3, r0
 801d95c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d95e:	e001      	b.n	801d964 <icmp_input+0x1b8>
      break;
 801d960:	bf00      	nop
 801d962:	e000      	b.n	801d966 <icmp_input+0x1ba>
      break;
 801d964:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801d966:	6878      	ldr	r0, [r7, #4]
 801d968:	f7f5 fd96 	bl	8013498 <pbuf_free>
  return;
 801d96c:	e013      	b.n	801d996 <icmp_input+0x1ea>
    goto lenerr;
 801d96e:	bf00      	nop
 801d970:	e002      	b.n	801d978 <icmp_input+0x1cc>
    goto lenerr;
 801d972:	bf00      	nop
 801d974:	e000      	b.n	801d978 <icmp_input+0x1cc>
        goto lenerr;
 801d976:	bf00      	nop
lenerr:
  pbuf_free(p);
 801d978:	6878      	ldr	r0, [r7, #4]
 801d97a:	f7f5 fd8d 	bl	8013498 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d97e:	e00a      	b.n	801d996 <icmp_input+0x1ea>
        goto icmperr;
 801d980:	bf00      	nop
 801d982:	e004      	b.n	801d98e <icmp_input+0x1e2>
        goto icmperr;
 801d984:	bf00      	nop
 801d986:	e002      	b.n	801d98e <icmp_input+0x1e2>
          goto icmperr;
 801d988:	bf00      	nop
 801d98a:	e000      	b.n	801d98e <icmp_input+0x1e2>
          goto icmperr;
 801d98c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d98e:	6878      	ldr	r0, [r7, #4]
 801d990:	f7f5 fd82 	bl	8013498 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d994:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d996:	3728      	adds	r7, #40	; 0x28
 801d998:	46bd      	mov	sp, r7
 801d99a:	bd80      	pop	{r7, pc}
 801d99c:	200133b0 	.word	0x200133b0
 801d9a0:	200133c4 	.word	0x200133c4
 801d9a4:	08024eb0 	.word	0x08024eb0
 801d9a8:	08024ee8 	.word	0x08024ee8
 801d9ac:	08024f20 	.word	0x08024f20
 801d9b0:	08024f48 	.word	0x08024f48

0801d9b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d9b4:	b580      	push	{r7, lr}
 801d9b6:	b082      	sub	sp, #8
 801d9b8:	af00      	add	r7, sp, #0
 801d9ba:	6078      	str	r0, [r7, #4]
 801d9bc:	460b      	mov	r3, r1
 801d9be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d9c0:	78fb      	ldrb	r3, [r7, #3]
 801d9c2:	461a      	mov	r2, r3
 801d9c4:	2103      	movs	r1, #3
 801d9c6:	6878      	ldr	r0, [r7, #4]
 801d9c8:	f000 f814 	bl	801d9f4 <icmp_send_response>
}
 801d9cc:	bf00      	nop
 801d9ce:	3708      	adds	r7, #8
 801d9d0:	46bd      	mov	sp, r7
 801d9d2:	bd80      	pop	{r7, pc}

0801d9d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d9d4:	b580      	push	{r7, lr}
 801d9d6:	b082      	sub	sp, #8
 801d9d8:	af00      	add	r7, sp, #0
 801d9da:	6078      	str	r0, [r7, #4]
 801d9dc:	460b      	mov	r3, r1
 801d9de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d9e0:	78fb      	ldrb	r3, [r7, #3]
 801d9e2:	461a      	mov	r2, r3
 801d9e4:	210b      	movs	r1, #11
 801d9e6:	6878      	ldr	r0, [r7, #4]
 801d9e8:	f000 f804 	bl	801d9f4 <icmp_send_response>
}
 801d9ec:	bf00      	nop
 801d9ee:	3708      	adds	r7, #8
 801d9f0:	46bd      	mov	sp, r7
 801d9f2:	bd80      	pop	{r7, pc}

0801d9f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d9f4:	b580      	push	{r7, lr}
 801d9f6:	b08c      	sub	sp, #48	; 0x30
 801d9f8:	af04      	add	r7, sp, #16
 801d9fa:	6078      	str	r0, [r7, #4]
 801d9fc:	460b      	mov	r3, r1
 801d9fe:	70fb      	strb	r3, [r7, #3]
 801da00:	4613      	mov	r3, r2
 801da02:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801da04:	f44f 7220 	mov.w	r2, #640	; 0x280
 801da08:	2124      	movs	r1, #36	; 0x24
 801da0a:	2022      	movs	r0, #34	; 0x22
 801da0c:	f7f5 fa60 	bl	8012ed0 <pbuf_alloc>
 801da10:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801da12:	69fb      	ldr	r3, [r7, #28]
 801da14:	2b00      	cmp	r3, #0
 801da16:	d04c      	beq.n	801dab2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801da18:	69fb      	ldr	r3, [r7, #28]
 801da1a:	895b      	ldrh	r3, [r3, #10]
 801da1c:	2b23      	cmp	r3, #35	; 0x23
 801da1e:	d806      	bhi.n	801da2e <icmp_send_response+0x3a>
 801da20:	4b26      	ldr	r3, [pc, #152]	; (801dabc <icmp_send_response+0xc8>)
 801da22:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801da26:	4926      	ldr	r1, [pc, #152]	; (801dac0 <icmp_send_response+0xcc>)
 801da28:	4826      	ldr	r0, [pc, #152]	; (801dac4 <icmp_send_response+0xd0>)
 801da2a:	f001 ff5f 	bl	801f8ec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	685b      	ldr	r3, [r3, #4]
 801da32:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801da34:	69fb      	ldr	r3, [r7, #28]
 801da36:	685b      	ldr	r3, [r3, #4]
 801da38:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801da3a:	697b      	ldr	r3, [r7, #20]
 801da3c:	78fa      	ldrb	r2, [r7, #3]
 801da3e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801da40:	697b      	ldr	r3, [r7, #20]
 801da42:	78ba      	ldrb	r2, [r7, #2]
 801da44:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801da46:	697b      	ldr	r3, [r7, #20]
 801da48:	2200      	movs	r2, #0
 801da4a:	711a      	strb	r2, [r3, #4]
 801da4c:	2200      	movs	r2, #0
 801da4e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801da50:	697b      	ldr	r3, [r7, #20]
 801da52:	2200      	movs	r2, #0
 801da54:	719a      	strb	r2, [r3, #6]
 801da56:	2200      	movs	r2, #0
 801da58:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801da5a:	69fb      	ldr	r3, [r7, #28]
 801da5c:	685b      	ldr	r3, [r3, #4]
 801da5e:	f103 0008 	add.w	r0, r3, #8
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	685b      	ldr	r3, [r3, #4]
 801da66:	221c      	movs	r2, #28
 801da68:	4619      	mov	r1, r3
 801da6a:	f001 fe55 	bl	801f718 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801da6e:	69bb      	ldr	r3, [r7, #24]
 801da70:	68db      	ldr	r3, [r3, #12]
 801da72:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801da74:	f107 030c 	add.w	r3, r7, #12
 801da78:	4618      	mov	r0, r3
 801da7a:	f000 f825 	bl	801dac8 <ip4_route>
 801da7e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801da80:	693b      	ldr	r3, [r7, #16]
 801da82:	2b00      	cmp	r3, #0
 801da84:	d011      	beq.n	801daaa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801da86:	697b      	ldr	r3, [r7, #20]
 801da88:	2200      	movs	r2, #0
 801da8a:	709a      	strb	r2, [r3, #2]
 801da8c:	2200      	movs	r2, #0
 801da8e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801da90:	f107 020c 	add.w	r2, r7, #12
 801da94:	693b      	ldr	r3, [r7, #16]
 801da96:	9302      	str	r3, [sp, #8]
 801da98:	2301      	movs	r3, #1
 801da9a:	9301      	str	r3, [sp, #4]
 801da9c:	2300      	movs	r3, #0
 801da9e:	9300      	str	r3, [sp, #0]
 801daa0:	23ff      	movs	r3, #255	; 0xff
 801daa2:	2100      	movs	r1, #0
 801daa4:	69f8      	ldr	r0, [r7, #28]
 801daa6:	f000 f9eb 	bl	801de80 <ip4_output_if>
  }
  pbuf_free(q);
 801daaa:	69f8      	ldr	r0, [r7, #28]
 801daac:	f7f5 fcf4 	bl	8013498 <pbuf_free>
 801dab0:	e000      	b.n	801dab4 <icmp_send_response+0xc0>
    return;
 801dab2:	bf00      	nop
}
 801dab4:	3720      	adds	r7, #32
 801dab6:	46bd      	mov	sp, r7
 801dab8:	bd80      	pop	{r7, pc}
 801daba:	bf00      	nop
 801dabc:	08024eb0 	.word	0x08024eb0
 801dac0:	08024f7c 	.word	0x08024f7c
 801dac4:	08024f20 	.word	0x08024f20

0801dac8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801dac8:	b480      	push	{r7}
 801daca:	b085      	sub	sp, #20
 801dacc:	af00      	add	r7, sp, #0
 801dace:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801dad0:	4b33      	ldr	r3, [pc, #204]	; (801dba0 <ip4_route+0xd8>)
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	60fb      	str	r3, [r7, #12]
 801dad6:	e036      	b.n	801db46 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dade:	f003 0301 	and.w	r3, r3, #1
 801dae2:	b2db      	uxtb	r3, r3
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d02b      	beq.n	801db40 <ip4_route+0x78>
 801dae8:	68fb      	ldr	r3, [r7, #12]
 801daea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801daee:	089b      	lsrs	r3, r3, #2
 801daf0:	f003 0301 	and.w	r3, r3, #1
 801daf4:	b2db      	uxtb	r3, r3
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d022      	beq.n	801db40 <ip4_route+0x78>
 801dafa:	68fb      	ldr	r3, [r7, #12]
 801dafc:	3304      	adds	r3, #4
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	2b00      	cmp	r3, #0
 801db02:	d01d      	beq.n	801db40 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	681a      	ldr	r2, [r3, #0]
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	3304      	adds	r3, #4
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	405a      	eors	r2, r3
 801db10:	68fb      	ldr	r3, [r7, #12]
 801db12:	3308      	adds	r3, #8
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	4013      	ands	r3, r2
 801db18:	2b00      	cmp	r3, #0
 801db1a:	d101      	bne.n	801db20 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801db1c:	68fb      	ldr	r3, [r7, #12]
 801db1e:	e038      	b.n	801db92 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801db26:	f003 0302 	and.w	r3, r3, #2
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	d108      	bne.n	801db40 <ip4_route+0x78>
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	681a      	ldr	r2, [r3, #0]
 801db32:	68fb      	ldr	r3, [r7, #12]
 801db34:	330c      	adds	r3, #12
 801db36:	681b      	ldr	r3, [r3, #0]
 801db38:	429a      	cmp	r2, r3
 801db3a:	d101      	bne.n	801db40 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	e028      	b.n	801db92 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	60fb      	str	r3, [r7, #12]
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d1c5      	bne.n	801dad8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801db4c:	4b15      	ldr	r3, [pc, #84]	; (801dba4 <ip4_route+0xdc>)
 801db4e:	681b      	ldr	r3, [r3, #0]
 801db50:	2b00      	cmp	r3, #0
 801db52:	d01a      	beq.n	801db8a <ip4_route+0xc2>
 801db54:	4b13      	ldr	r3, [pc, #76]	; (801dba4 <ip4_route+0xdc>)
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801db5c:	f003 0301 	and.w	r3, r3, #1
 801db60:	2b00      	cmp	r3, #0
 801db62:	d012      	beq.n	801db8a <ip4_route+0xc2>
 801db64:	4b0f      	ldr	r3, [pc, #60]	; (801dba4 <ip4_route+0xdc>)
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801db6c:	f003 0304 	and.w	r3, r3, #4
 801db70:	2b00      	cmp	r3, #0
 801db72:	d00a      	beq.n	801db8a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801db74:	4b0b      	ldr	r3, [pc, #44]	; (801dba4 <ip4_route+0xdc>)
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	3304      	adds	r3, #4
 801db7a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d004      	beq.n	801db8a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	b2db      	uxtb	r3, r3
 801db86:	2b7f      	cmp	r3, #127	; 0x7f
 801db88:	d101      	bne.n	801db8e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801db8a:	2300      	movs	r3, #0
 801db8c:	e001      	b.n	801db92 <ip4_route+0xca>
  }

  return netif_default;
 801db8e:	4b05      	ldr	r3, [pc, #20]	; (801dba4 <ip4_route+0xdc>)
 801db90:	681b      	ldr	r3, [r3, #0]
}
 801db92:	4618      	mov	r0, r3
 801db94:	3714      	adds	r7, #20
 801db96:	46bd      	mov	sp, r7
 801db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db9c:	4770      	bx	lr
 801db9e:	bf00      	nop
 801dba0:	20016b80 	.word	0x20016b80
 801dba4:	20016b84 	.word	0x20016b84

0801dba8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b082      	sub	sp, #8
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dbb6:	f003 0301 	and.w	r3, r3, #1
 801dbba:	b2db      	uxtb	r3, r3
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	d016      	beq.n	801dbee <ip4_input_accept+0x46>
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	3304      	adds	r3, #4
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	d011      	beq.n	801dbee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801dbca:	4b0b      	ldr	r3, [pc, #44]	; (801dbf8 <ip4_input_accept+0x50>)
 801dbcc:	695a      	ldr	r2, [r3, #20]
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	3304      	adds	r3, #4
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	429a      	cmp	r2, r3
 801dbd6:	d008      	beq.n	801dbea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801dbd8:	4b07      	ldr	r3, [pc, #28]	; (801dbf8 <ip4_input_accept+0x50>)
 801dbda:	695b      	ldr	r3, [r3, #20]
 801dbdc:	6879      	ldr	r1, [r7, #4]
 801dbde:	4618      	mov	r0, r3
 801dbe0:	f000 fa26 	bl	801e030 <ip4_addr_isbroadcast_u32>
 801dbe4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	d001      	beq.n	801dbee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801dbea:	2301      	movs	r3, #1
 801dbec:	e000      	b.n	801dbf0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801dbee:	2300      	movs	r3, #0
}
 801dbf0:	4618      	mov	r0, r3
 801dbf2:	3708      	adds	r7, #8
 801dbf4:	46bd      	mov	sp, r7
 801dbf6:	bd80      	pop	{r7, pc}
 801dbf8:	200133b0 	.word	0x200133b0

0801dbfc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801dbfc:	b580      	push	{r7, lr}
 801dbfe:	b088      	sub	sp, #32
 801dc00:	af00      	add	r7, sp, #0
 801dc02:	6078      	str	r0, [r7, #4]
 801dc04:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801dc06:	2301      	movs	r3, #1
 801dc08:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	685b      	ldr	r3, [r3, #4]
 801dc0e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801dc10:	69fb      	ldr	r3, [r7, #28]
 801dc12:	781b      	ldrb	r3, [r3, #0]
 801dc14:	091b      	lsrs	r3, r3, #4
 801dc16:	b2db      	uxtb	r3, r3
 801dc18:	2b04      	cmp	r3, #4
 801dc1a:	d004      	beq.n	801dc26 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801dc1c:	6878      	ldr	r0, [r7, #4]
 801dc1e:	f7f5 fc3b 	bl	8013498 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801dc22:	2300      	movs	r3, #0
 801dc24:	e123      	b.n	801de6e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801dc26:	69fb      	ldr	r3, [r7, #28]
 801dc28:	781b      	ldrb	r3, [r3, #0]
 801dc2a:	f003 030f 	and.w	r3, r3, #15
 801dc2e:	b2db      	uxtb	r3, r3
 801dc30:	009b      	lsls	r3, r3, #2
 801dc32:	b2db      	uxtb	r3, r3
 801dc34:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801dc36:	69fb      	ldr	r3, [r7, #28]
 801dc38:	885b      	ldrh	r3, [r3, #2]
 801dc3a:	b29b      	uxth	r3, r3
 801dc3c:	4618      	mov	r0, r3
 801dc3e:	f7f3 f89d 	bl	8010d7c <lwip_htons>
 801dc42:	4603      	mov	r3, r0
 801dc44:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	891b      	ldrh	r3, [r3, #8]
 801dc4a:	8a3a      	ldrh	r2, [r7, #16]
 801dc4c:	429a      	cmp	r2, r3
 801dc4e:	d204      	bcs.n	801dc5a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801dc50:	8a3b      	ldrh	r3, [r7, #16]
 801dc52:	4619      	mov	r1, r3
 801dc54:	6878      	ldr	r0, [r7, #4]
 801dc56:	f7f5 fa99 	bl	801318c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	895b      	ldrh	r3, [r3, #10]
 801dc5e:	8a7a      	ldrh	r2, [r7, #18]
 801dc60:	429a      	cmp	r2, r3
 801dc62:	d807      	bhi.n	801dc74 <ip4_input+0x78>
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	891b      	ldrh	r3, [r3, #8]
 801dc68:	8a3a      	ldrh	r2, [r7, #16]
 801dc6a:	429a      	cmp	r2, r3
 801dc6c:	d802      	bhi.n	801dc74 <ip4_input+0x78>
 801dc6e:	8a7b      	ldrh	r3, [r7, #18]
 801dc70:	2b13      	cmp	r3, #19
 801dc72:	d804      	bhi.n	801dc7e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801dc74:	6878      	ldr	r0, [r7, #4]
 801dc76:	f7f5 fc0f 	bl	8013498 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801dc7a:	2300      	movs	r3, #0
 801dc7c:	e0f7      	b.n	801de6e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801dc7e:	69fb      	ldr	r3, [r7, #28]
 801dc80:	691b      	ldr	r3, [r3, #16]
 801dc82:	4a7d      	ldr	r2, [pc, #500]	; (801de78 <ip4_input+0x27c>)
 801dc84:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801dc86:	69fb      	ldr	r3, [r7, #28]
 801dc88:	68db      	ldr	r3, [r3, #12]
 801dc8a:	4a7b      	ldr	r2, [pc, #492]	; (801de78 <ip4_input+0x27c>)
 801dc8c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dc8e:	4b7a      	ldr	r3, [pc, #488]	; (801de78 <ip4_input+0x27c>)
 801dc90:	695b      	ldr	r3, [r3, #20]
 801dc92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801dc96:	2be0      	cmp	r3, #224	; 0xe0
 801dc98:	d112      	bne.n	801dcc0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801dc9a:	683b      	ldr	r3, [r7, #0]
 801dc9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dca0:	f003 0301 	and.w	r3, r3, #1
 801dca4:	b2db      	uxtb	r3, r3
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d007      	beq.n	801dcba <ip4_input+0xbe>
 801dcaa:	683b      	ldr	r3, [r7, #0]
 801dcac:	3304      	adds	r3, #4
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d002      	beq.n	801dcba <ip4_input+0xbe>
      netif = inp;
 801dcb4:	683b      	ldr	r3, [r7, #0]
 801dcb6:	61bb      	str	r3, [r7, #24]
 801dcb8:	e02a      	b.n	801dd10 <ip4_input+0x114>
    } else {
      netif = NULL;
 801dcba:	2300      	movs	r3, #0
 801dcbc:	61bb      	str	r3, [r7, #24]
 801dcbe:	e027      	b.n	801dd10 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801dcc0:	6838      	ldr	r0, [r7, #0]
 801dcc2:	f7ff ff71 	bl	801dba8 <ip4_input_accept>
 801dcc6:	4603      	mov	r3, r0
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	d002      	beq.n	801dcd2 <ip4_input+0xd6>
      netif = inp;
 801dccc:	683b      	ldr	r3, [r7, #0]
 801dcce:	61bb      	str	r3, [r7, #24]
 801dcd0:	e01e      	b.n	801dd10 <ip4_input+0x114>
    } else {
      netif = NULL;
 801dcd2:	2300      	movs	r3, #0
 801dcd4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801dcd6:	4b68      	ldr	r3, [pc, #416]	; (801de78 <ip4_input+0x27c>)
 801dcd8:	695b      	ldr	r3, [r3, #20]
 801dcda:	b2db      	uxtb	r3, r3
 801dcdc:	2b7f      	cmp	r3, #127	; 0x7f
 801dcde:	d017      	beq.n	801dd10 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801dce0:	4b66      	ldr	r3, [pc, #408]	; (801de7c <ip4_input+0x280>)
 801dce2:	681b      	ldr	r3, [r3, #0]
 801dce4:	61bb      	str	r3, [r7, #24]
 801dce6:	e00e      	b.n	801dd06 <ip4_input+0x10a>
          if (netif == inp) {
 801dce8:	69ba      	ldr	r2, [r7, #24]
 801dcea:	683b      	ldr	r3, [r7, #0]
 801dcec:	429a      	cmp	r2, r3
 801dcee:	d006      	beq.n	801dcfe <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801dcf0:	69b8      	ldr	r0, [r7, #24]
 801dcf2:	f7ff ff59 	bl	801dba8 <ip4_input_accept>
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d108      	bne.n	801dd0e <ip4_input+0x112>
 801dcfc:	e000      	b.n	801dd00 <ip4_input+0x104>
            continue;
 801dcfe:	bf00      	nop
        NETIF_FOREACH(netif) {
 801dd00:	69bb      	ldr	r3, [r7, #24]
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	61bb      	str	r3, [r7, #24]
 801dd06:	69bb      	ldr	r3, [r7, #24]
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d1ed      	bne.n	801dce8 <ip4_input+0xec>
 801dd0c:	e000      	b.n	801dd10 <ip4_input+0x114>
            break;
 801dd0e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801dd10:	69bb      	ldr	r3, [r7, #24]
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	d111      	bne.n	801dd3a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801dd16:	69fb      	ldr	r3, [r7, #28]
 801dd18:	7a5b      	ldrb	r3, [r3, #9]
 801dd1a:	2b11      	cmp	r3, #17
 801dd1c:	d10d      	bne.n	801dd3a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801dd1e:	8a7b      	ldrh	r3, [r7, #18]
 801dd20:	69fa      	ldr	r2, [r7, #28]
 801dd22:	4413      	add	r3, r2
 801dd24:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801dd26:	68fb      	ldr	r3, [r7, #12]
 801dd28:	885b      	ldrh	r3, [r3, #2]
 801dd2a:	b29b      	uxth	r3, r3
 801dd2c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801dd30:	d103      	bne.n	801dd3a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801dd32:	683b      	ldr	r3, [r7, #0]
 801dd34:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801dd36:	2300      	movs	r3, #0
 801dd38:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801dd3a:	697b      	ldr	r3, [r7, #20]
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	d017      	beq.n	801dd70 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801dd40:	4b4d      	ldr	r3, [pc, #308]	; (801de78 <ip4_input+0x27c>)
 801dd42:	691b      	ldr	r3, [r3, #16]
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	d013      	beq.n	801dd70 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801dd48:	4b4b      	ldr	r3, [pc, #300]	; (801de78 <ip4_input+0x27c>)
 801dd4a:	691b      	ldr	r3, [r3, #16]
 801dd4c:	6839      	ldr	r1, [r7, #0]
 801dd4e:	4618      	mov	r0, r3
 801dd50:	f000 f96e 	bl	801e030 <ip4_addr_isbroadcast_u32>
 801dd54:	4603      	mov	r3, r0
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d105      	bne.n	801dd66 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801dd5a:	4b47      	ldr	r3, [pc, #284]	; (801de78 <ip4_input+0x27c>)
 801dd5c:	691b      	ldr	r3, [r3, #16]
 801dd5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801dd62:	2be0      	cmp	r3, #224	; 0xe0
 801dd64:	d104      	bne.n	801dd70 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801dd66:	6878      	ldr	r0, [r7, #4]
 801dd68:	f7f5 fb96 	bl	8013498 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801dd6c:	2300      	movs	r3, #0
 801dd6e:	e07e      	b.n	801de6e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801dd70:	69bb      	ldr	r3, [r7, #24]
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	d104      	bne.n	801dd80 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801dd76:	6878      	ldr	r0, [r7, #4]
 801dd78:	f7f5 fb8e 	bl	8013498 <pbuf_free>
    return ERR_OK;
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	e076      	b.n	801de6e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801dd80:	69fb      	ldr	r3, [r7, #28]
 801dd82:	88db      	ldrh	r3, [r3, #6]
 801dd84:	b29b      	uxth	r3, r3
 801dd86:	461a      	mov	r2, r3
 801dd88:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801dd8c:	4013      	ands	r3, r2
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d00b      	beq.n	801ddaa <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801dd92:	6878      	ldr	r0, [r7, #4]
 801dd94:	f000 fdbc 	bl	801e910 <ip4_reass>
 801dd98:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	d101      	bne.n	801dda4 <ip4_input+0x1a8>
      return ERR_OK;
 801dda0:	2300      	movs	r3, #0
 801dda2:	e064      	b.n	801de6e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	685b      	ldr	r3, [r3, #4]
 801dda8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801ddaa:	4a33      	ldr	r2, [pc, #204]	; (801de78 <ip4_input+0x27c>)
 801ddac:	69bb      	ldr	r3, [r7, #24]
 801ddae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801ddb0:	4a31      	ldr	r2, [pc, #196]	; (801de78 <ip4_input+0x27c>)
 801ddb2:	683b      	ldr	r3, [r7, #0]
 801ddb4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801ddb6:	4a30      	ldr	r2, [pc, #192]	; (801de78 <ip4_input+0x27c>)
 801ddb8:	69fb      	ldr	r3, [r7, #28]
 801ddba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801ddbc:	69fb      	ldr	r3, [r7, #28]
 801ddbe:	781b      	ldrb	r3, [r3, #0]
 801ddc0:	f003 030f 	and.w	r3, r3, #15
 801ddc4:	b2db      	uxtb	r3, r3
 801ddc6:	009b      	lsls	r3, r3, #2
 801ddc8:	b2db      	uxtb	r3, r3
 801ddca:	b29a      	uxth	r2, r3
 801ddcc:	4b2a      	ldr	r3, [pc, #168]	; (801de78 <ip4_input+0x27c>)
 801ddce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801ddd0:	8a7b      	ldrh	r3, [r7, #18]
 801ddd2:	4619      	mov	r1, r3
 801ddd4:	6878      	ldr	r0, [r7, #4]
 801ddd6:	f7f5 fad9 	bl	801338c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801ddda:	69fb      	ldr	r3, [r7, #28]
 801dddc:	7a5b      	ldrb	r3, [r3, #9]
 801ddde:	2b11      	cmp	r3, #17
 801dde0:	d006      	beq.n	801ddf0 <ip4_input+0x1f4>
 801dde2:	2b11      	cmp	r3, #17
 801dde4:	dc13      	bgt.n	801de0e <ip4_input+0x212>
 801dde6:	2b01      	cmp	r3, #1
 801dde8:	d00c      	beq.n	801de04 <ip4_input+0x208>
 801ddea:	2b06      	cmp	r3, #6
 801ddec:	d005      	beq.n	801ddfa <ip4_input+0x1fe>
 801ddee:	e00e      	b.n	801de0e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ddf0:	6839      	ldr	r1, [r7, #0]
 801ddf2:	6878      	ldr	r0, [r7, #4]
 801ddf4:	f7fc f9d6 	bl	801a1a4 <udp_input>
        break;
 801ddf8:	e026      	b.n	801de48 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801ddfa:	6839      	ldr	r1, [r7, #0]
 801ddfc:	6878      	ldr	r0, [r7, #4]
 801ddfe:	f7f7 fd93 	bl	8015928 <tcp_input>
        break;
 801de02:	e021      	b.n	801de48 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801de04:	6839      	ldr	r1, [r7, #0]
 801de06:	6878      	ldr	r0, [r7, #4]
 801de08:	f7ff fcd0 	bl	801d7ac <icmp_input>
        break;
 801de0c:	e01c      	b.n	801de48 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801de0e:	4b1a      	ldr	r3, [pc, #104]	; (801de78 <ip4_input+0x27c>)
 801de10:	695b      	ldr	r3, [r3, #20]
 801de12:	69b9      	ldr	r1, [r7, #24]
 801de14:	4618      	mov	r0, r3
 801de16:	f000 f90b 	bl	801e030 <ip4_addr_isbroadcast_u32>
 801de1a:	4603      	mov	r3, r0
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d10f      	bne.n	801de40 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801de20:	4b15      	ldr	r3, [pc, #84]	; (801de78 <ip4_input+0x27c>)
 801de22:	695b      	ldr	r3, [r3, #20]
 801de24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801de28:	2be0      	cmp	r3, #224	; 0xe0
 801de2a:	d009      	beq.n	801de40 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801de2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801de30:	4619      	mov	r1, r3
 801de32:	6878      	ldr	r0, [r7, #4]
 801de34:	f7f5 fb1d 	bl	8013472 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801de38:	2102      	movs	r1, #2
 801de3a:	6878      	ldr	r0, [r7, #4]
 801de3c:	f7ff fdba 	bl	801d9b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801de40:	6878      	ldr	r0, [r7, #4]
 801de42:	f7f5 fb29 	bl	8013498 <pbuf_free>
        break;
 801de46:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801de48:	4b0b      	ldr	r3, [pc, #44]	; (801de78 <ip4_input+0x27c>)
 801de4a:	2200      	movs	r2, #0
 801de4c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801de4e:	4b0a      	ldr	r3, [pc, #40]	; (801de78 <ip4_input+0x27c>)
 801de50:	2200      	movs	r2, #0
 801de52:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801de54:	4b08      	ldr	r3, [pc, #32]	; (801de78 <ip4_input+0x27c>)
 801de56:	2200      	movs	r2, #0
 801de58:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801de5a:	4b07      	ldr	r3, [pc, #28]	; (801de78 <ip4_input+0x27c>)
 801de5c:	2200      	movs	r2, #0
 801de5e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801de60:	4b05      	ldr	r3, [pc, #20]	; (801de78 <ip4_input+0x27c>)
 801de62:	2200      	movs	r2, #0
 801de64:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801de66:	4b04      	ldr	r3, [pc, #16]	; (801de78 <ip4_input+0x27c>)
 801de68:	2200      	movs	r2, #0
 801de6a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801de6c:	2300      	movs	r3, #0
}
 801de6e:	4618      	mov	r0, r3
 801de70:	3720      	adds	r7, #32
 801de72:	46bd      	mov	sp, r7
 801de74:	bd80      	pop	{r7, pc}
 801de76:	bf00      	nop
 801de78:	200133b0 	.word	0x200133b0
 801de7c:	20016b80 	.word	0x20016b80

0801de80 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801de80:	b580      	push	{r7, lr}
 801de82:	b08a      	sub	sp, #40	; 0x28
 801de84:	af04      	add	r7, sp, #16
 801de86:	60f8      	str	r0, [r7, #12]
 801de88:	60b9      	str	r1, [r7, #8]
 801de8a:	607a      	str	r2, [r7, #4]
 801de8c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801de8e:	68bb      	ldr	r3, [r7, #8]
 801de90:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d009      	beq.n	801deac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801de98:	68bb      	ldr	r3, [r7, #8]
 801de9a:	2b00      	cmp	r3, #0
 801de9c:	d003      	beq.n	801dea6 <ip4_output_if+0x26>
 801de9e:	68bb      	ldr	r3, [r7, #8]
 801dea0:	681b      	ldr	r3, [r3, #0]
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d102      	bne.n	801deac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dea8:	3304      	adds	r3, #4
 801deaa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801deac:	78fa      	ldrb	r2, [r7, #3]
 801deae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801deb0:	9302      	str	r3, [sp, #8]
 801deb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801deb6:	9301      	str	r3, [sp, #4]
 801deb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801debc:	9300      	str	r3, [sp, #0]
 801debe:	4613      	mov	r3, r2
 801dec0:	687a      	ldr	r2, [r7, #4]
 801dec2:	6979      	ldr	r1, [r7, #20]
 801dec4:	68f8      	ldr	r0, [r7, #12]
 801dec6:	f000 f805 	bl	801ded4 <ip4_output_if_src>
 801deca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801decc:	4618      	mov	r0, r3
 801dece:	3718      	adds	r7, #24
 801ded0:	46bd      	mov	sp, r7
 801ded2:	bd80      	pop	{r7, pc}

0801ded4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801ded4:	b580      	push	{r7, lr}
 801ded6:	b088      	sub	sp, #32
 801ded8:	af00      	add	r7, sp, #0
 801deda:	60f8      	str	r0, [r7, #12]
 801dedc:	60b9      	str	r1, [r7, #8]
 801dede:	607a      	str	r2, [r7, #4]
 801dee0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	7b9b      	ldrb	r3, [r3, #14]
 801dee6:	2b01      	cmp	r3, #1
 801dee8:	d006      	beq.n	801def8 <ip4_output_if_src+0x24>
 801deea:	4b4b      	ldr	r3, [pc, #300]	; (801e018 <ip4_output_if_src+0x144>)
 801deec:	f44f 7255 	mov.w	r2, #852	; 0x354
 801def0:	494a      	ldr	r1, [pc, #296]	; (801e01c <ip4_output_if_src+0x148>)
 801def2:	484b      	ldr	r0, [pc, #300]	; (801e020 <ip4_output_if_src+0x14c>)
 801def4:	f001 fcfa 	bl	801f8ec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801def8:	687b      	ldr	r3, [r7, #4]
 801defa:	2b00      	cmp	r3, #0
 801defc:	d060      	beq.n	801dfc0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801defe:	2314      	movs	r3, #20
 801df00:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801df02:	2114      	movs	r1, #20
 801df04:	68f8      	ldr	r0, [r7, #12]
 801df06:	f7f5 fa31 	bl	801336c <pbuf_add_header>
 801df0a:	4603      	mov	r3, r0
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d002      	beq.n	801df16 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801df10:	f06f 0301 	mvn.w	r3, #1
 801df14:	e07c      	b.n	801e010 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801df16:	68fb      	ldr	r3, [r7, #12]
 801df18:	685b      	ldr	r3, [r3, #4]
 801df1a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	895b      	ldrh	r3, [r3, #10]
 801df20:	2b13      	cmp	r3, #19
 801df22:	d806      	bhi.n	801df32 <ip4_output_if_src+0x5e>
 801df24:	4b3c      	ldr	r3, [pc, #240]	; (801e018 <ip4_output_if_src+0x144>)
 801df26:	f44f 7262 	mov.w	r2, #904	; 0x388
 801df2a:	493e      	ldr	r1, [pc, #248]	; (801e024 <ip4_output_if_src+0x150>)
 801df2c:	483c      	ldr	r0, [pc, #240]	; (801e020 <ip4_output_if_src+0x14c>)
 801df2e:	f001 fcdd 	bl	801f8ec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801df32:	69fb      	ldr	r3, [r7, #28]
 801df34:	78fa      	ldrb	r2, [r7, #3]
 801df36:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801df38:	69fb      	ldr	r3, [r7, #28]
 801df3a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801df3e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	681a      	ldr	r2, [r3, #0]
 801df44:	69fb      	ldr	r3, [r7, #28]
 801df46:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801df48:	8b7b      	ldrh	r3, [r7, #26]
 801df4a:	089b      	lsrs	r3, r3, #2
 801df4c:	b29b      	uxth	r3, r3
 801df4e:	b2db      	uxtb	r3, r3
 801df50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801df54:	b2da      	uxtb	r2, r3
 801df56:	69fb      	ldr	r3, [r7, #28]
 801df58:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801df5a:	69fb      	ldr	r3, [r7, #28]
 801df5c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801df60:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	891b      	ldrh	r3, [r3, #8]
 801df66:	4618      	mov	r0, r3
 801df68:	f7f2 ff08 	bl	8010d7c <lwip_htons>
 801df6c:	4603      	mov	r3, r0
 801df6e:	461a      	mov	r2, r3
 801df70:	69fb      	ldr	r3, [r7, #28]
 801df72:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801df74:	69fb      	ldr	r3, [r7, #28]
 801df76:	2200      	movs	r2, #0
 801df78:	719a      	strb	r2, [r3, #6]
 801df7a:	2200      	movs	r2, #0
 801df7c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801df7e:	4b2a      	ldr	r3, [pc, #168]	; (801e028 <ip4_output_if_src+0x154>)
 801df80:	881b      	ldrh	r3, [r3, #0]
 801df82:	4618      	mov	r0, r3
 801df84:	f7f2 fefa 	bl	8010d7c <lwip_htons>
 801df88:	4603      	mov	r3, r0
 801df8a:	461a      	mov	r2, r3
 801df8c:	69fb      	ldr	r3, [r7, #28]
 801df8e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801df90:	4b25      	ldr	r3, [pc, #148]	; (801e028 <ip4_output_if_src+0x154>)
 801df92:	881b      	ldrh	r3, [r3, #0]
 801df94:	3301      	adds	r3, #1
 801df96:	b29a      	uxth	r2, r3
 801df98:	4b23      	ldr	r3, [pc, #140]	; (801e028 <ip4_output_if_src+0x154>)
 801df9a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801df9c:	68bb      	ldr	r3, [r7, #8]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d104      	bne.n	801dfac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801dfa2:	4b22      	ldr	r3, [pc, #136]	; (801e02c <ip4_output_if_src+0x158>)
 801dfa4:	681a      	ldr	r2, [r3, #0]
 801dfa6:	69fb      	ldr	r3, [r7, #28]
 801dfa8:	60da      	str	r2, [r3, #12]
 801dfaa:	e003      	b.n	801dfb4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801dfac:	68bb      	ldr	r3, [r7, #8]
 801dfae:	681a      	ldr	r2, [r3, #0]
 801dfb0:	69fb      	ldr	r3, [r7, #28]
 801dfb2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801dfb4:	69fb      	ldr	r3, [r7, #28]
 801dfb6:	2200      	movs	r2, #0
 801dfb8:	729a      	strb	r2, [r3, #10]
 801dfba:	2200      	movs	r2, #0
 801dfbc:	72da      	strb	r2, [r3, #11]
 801dfbe:	e00f      	b.n	801dfe0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801dfc0:	68fb      	ldr	r3, [r7, #12]
 801dfc2:	895b      	ldrh	r3, [r3, #10]
 801dfc4:	2b13      	cmp	r3, #19
 801dfc6:	d802      	bhi.n	801dfce <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dfc8:	f06f 0301 	mvn.w	r3, #1
 801dfcc:	e020      	b.n	801e010 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801dfce:	68fb      	ldr	r3, [r7, #12]
 801dfd0:	685b      	ldr	r3, [r3, #4]
 801dfd2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801dfd4:	69fb      	ldr	r3, [r7, #28]
 801dfd6:	691b      	ldr	r3, [r3, #16]
 801dfd8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801dfda:	f107 0314 	add.w	r3, r7, #20
 801dfde:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801dfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	d00c      	beq.n	801e002 <ip4_output_if_src+0x12e>
 801dfe8:	68fb      	ldr	r3, [r7, #12]
 801dfea:	891a      	ldrh	r2, [r3, #8]
 801dfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dff0:	429a      	cmp	r2, r3
 801dff2:	d906      	bls.n	801e002 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801dff4:	687a      	ldr	r2, [r7, #4]
 801dff6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dff8:	68f8      	ldr	r0, [r7, #12]
 801dffa:	f000 fe77 	bl	801ecec <ip4_frag>
 801dffe:	4603      	mov	r3, r0
 801e000:	e006      	b.n	801e010 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e004:	695b      	ldr	r3, [r3, #20]
 801e006:	687a      	ldr	r2, [r7, #4]
 801e008:	68f9      	ldr	r1, [r7, #12]
 801e00a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e00c:	4798      	blx	r3
 801e00e:	4603      	mov	r3, r0
}
 801e010:	4618      	mov	r0, r3
 801e012:	3720      	adds	r7, #32
 801e014:	46bd      	mov	sp, r7
 801e016:	bd80      	pop	{r7, pc}
 801e018:	08024fa8 	.word	0x08024fa8
 801e01c:	08024fdc 	.word	0x08024fdc
 801e020:	08024fe8 	.word	0x08024fe8
 801e024:	08025010 	.word	0x08025010
 801e028:	20005642 	.word	0x20005642
 801e02c:	080256b4 	.word	0x080256b4

0801e030 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801e030:	b480      	push	{r7}
 801e032:	b085      	sub	sp, #20
 801e034:	af00      	add	r7, sp, #0
 801e036:	6078      	str	r0, [r7, #4]
 801e038:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801e03a:	687b      	ldr	r3, [r7, #4]
 801e03c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e044:	d002      	beq.n	801e04c <ip4_addr_isbroadcast_u32+0x1c>
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d101      	bne.n	801e050 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801e04c:	2301      	movs	r3, #1
 801e04e:	e02a      	b.n	801e0a6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e050:	683b      	ldr	r3, [r7, #0]
 801e052:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e056:	f003 0302 	and.w	r3, r3, #2
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	d101      	bne.n	801e062 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801e05e:	2300      	movs	r3, #0
 801e060:	e021      	b.n	801e0a6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e062:	683b      	ldr	r3, [r7, #0]
 801e064:	3304      	adds	r3, #4
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	687a      	ldr	r2, [r7, #4]
 801e06a:	429a      	cmp	r2, r3
 801e06c:	d101      	bne.n	801e072 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801e06e:	2300      	movs	r3, #0
 801e070:	e019      	b.n	801e0a6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e072:	68fa      	ldr	r2, [r7, #12]
 801e074:	683b      	ldr	r3, [r7, #0]
 801e076:	3304      	adds	r3, #4
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	405a      	eors	r2, r3
 801e07c:	683b      	ldr	r3, [r7, #0]
 801e07e:	3308      	adds	r3, #8
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	4013      	ands	r3, r2
 801e084:	2b00      	cmp	r3, #0
 801e086:	d10d      	bne.n	801e0a4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e088:	683b      	ldr	r3, [r7, #0]
 801e08a:	3308      	adds	r3, #8
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	43da      	mvns	r2, r3
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801e094:	683b      	ldr	r3, [r7, #0]
 801e096:	3308      	adds	r3, #8
 801e098:	681b      	ldr	r3, [r3, #0]
 801e09a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e09c:	429a      	cmp	r2, r3
 801e09e:	d101      	bne.n	801e0a4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801e0a0:	2301      	movs	r3, #1
 801e0a2:	e000      	b.n	801e0a6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801e0a4:	2300      	movs	r3, #0
  }
}
 801e0a6:	4618      	mov	r0, r3
 801e0a8:	3714      	adds	r7, #20
 801e0aa:	46bd      	mov	sp, r7
 801e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0b0:	4770      	bx	lr
	...

0801e0b4 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801e0b4:	b580      	push	{r7, lr}
 801e0b6:	b08a      	sub	sp, #40	; 0x28
 801e0b8:	af00      	add	r7, sp, #0
 801e0ba:	6078      	str	r0, [r7, #4]
 801e0bc:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801e0be:	f107 030c 	add.w	r3, r7, #12
 801e0c2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	781b      	ldrb	r3, [r3, #0]
 801e0c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801e0cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e0d0:	3301      	adds	r3, #1
 801e0d2:	4a89      	ldr	r2, [pc, #548]	; (801e2f8 <ip4addr_aton+0x244>)
 801e0d4:	4413      	add	r3, r2
 801e0d6:	781b      	ldrb	r3, [r3, #0]
 801e0d8:	f003 0304 	and.w	r3, r3, #4
 801e0dc:	2b00      	cmp	r3, #0
 801e0de:	d101      	bne.n	801e0e4 <ip4addr_aton+0x30>
      return 0;
 801e0e0:	2300      	movs	r3, #0
 801e0e2:	e105      	b.n	801e2f0 <ip4addr_aton+0x23c>
    }
    val = 0;
 801e0e4:	2300      	movs	r3, #0
 801e0e6:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801e0e8:	230a      	movs	r3, #10
 801e0ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801e0ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e0f2:	2b30      	cmp	r3, #48	; 0x30
 801e0f4:	d11c      	bne.n	801e130 <ip4addr_aton+0x7c>
      c = *++cp;
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	3301      	adds	r3, #1
 801e0fa:	607b      	str	r3, [r7, #4]
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	781b      	ldrb	r3, [r3, #0]
 801e100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801e104:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e108:	2b78      	cmp	r3, #120	; 0x78
 801e10a:	d003      	beq.n	801e114 <ip4addr_aton+0x60>
 801e10c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e110:	2b58      	cmp	r3, #88	; 0x58
 801e112:	d10a      	bne.n	801e12a <ip4addr_aton+0x76>
        base = 16;
 801e114:	2310      	movs	r3, #16
 801e116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	3301      	adds	r3, #1
 801e11e:	607b      	str	r3, [r7, #4]
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	781b      	ldrb	r3, [r3, #0]
 801e124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801e128:	e002      	b.n	801e130 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801e12a:	2308      	movs	r3, #8
 801e12c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801e130:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e134:	3301      	adds	r3, #1
 801e136:	4a70      	ldr	r2, [pc, #448]	; (801e2f8 <ip4addr_aton+0x244>)
 801e138:	4413      	add	r3, r2
 801e13a:	781b      	ldrb	r3, [r3, #0]
 801e13c:	f003 0304 	and.w	r3, r3, #4
 801e140:	2b00      	cmp	r3, #0
 801e142:	d011      	beq.n	801e168 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801e144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e14a:	fb02 f203 	mul.w	r2, r2, r3
 801e14e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e152:	4413      	add	r3, r2
 801e154:	3b30      	subs	r3, #48	; 0x30
 801e156:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	3301      	adds	r3, #1
 801e15c:	607b      	str	r3, [r7, #4]
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	781b      	ldrb	r3, [r3, #0]
 801e162:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801e166:	e7e3      	b.n	801e130 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801e168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e16c:	2b10      	cmp	r3, #16
 801e16e:	d127      	bne.n	801e1c0 <ip4addr_aton+0x10c>
 801e170:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e174:	3301      	adds	r3, #1
 801e176:	4a60      	ldr	r2, [pc, #384]	; (801e2f8 <ip4addr_aton+0x244>)
 801e178:	4413      	add	r3, r2
 801e17a:	781b      	ldrb	r3, [r3, #0]
 801e17c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801e180:	2b00      	cmp	r3, #0
 801e182:	d01d      	beq.n	801e1c0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e186:	011b      	lsls	r3, r3, #4
 801e188:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801e18c:	f102 010a 	add.w	r1, r2, #10
 801e190:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801e194:	3201      	adds	r2, #1
 801e196:	4858      	ldr	r0, [pc, #352]	; (801e2f8 <ip4addr_aton+0x244>)
 801e198:	4402      	add	r2, r0
 801e19a:	7812      	ldrb	r2, [r2, #0]
 801e19c:	f002 0203 	and.w	r2, r2, #3
 801e1a0:	2a02      	cmp	r2, #2
 801e1a2:	d101      	bne.n	801e1a8 <ip4addr_aton+0xf4>
 801e1a4:	2261      	movs	r2, #97	; 0x61
 801e1a6:	e000      	b.n	801e1aa <ip4addr_aton+0xf6>
 801e1a8:	2241      	movs	r2, #65	; 0x41
 801e1aa:	1a8a      	subs	r2, r1, r2
 801e1ac:	4313      	orrs	r3, r2
 801e1ae:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	3301      	adds	r3, #1
 801e1b4:	607b      	str	r3, [r7, #4]
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	781b      	ldrb	r3, [r3, #0]
 801e1ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801e1be:	e7b7      	b.n	801e130 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801e1c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e1c4:	2b2e      	cmp	r3, #46	; 0x2e
 801e1c6:	d114      	bne.n	801e1f2 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801e1c8:	f107 030c 	add.w	r3, r7, #12
 801e1cc:	330c      	adds	r3, #12
 801e1ce:	69fa      	ldr	r2, [r7, #28]
 801e1d0:	429a      	cmp	r2, r3
 801e1d2:	d301      	bcc.n	801e1d8 <ip4addr_aton+0x124>
        return 0;
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	e08b      	b.n	801e2f0 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801e1d8:	69fb      	ldr	r3, [r7, #28]
 801e1da:	1d1a      	adds	r2, r3, #4
 801e1dc:	61fa      	str	r2, [r7, #28]
 801e1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e1e0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	3301      	adds	r3, #1
 801e1e6:	607b      	str	r3, [r7, #4]
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	781b      	ldrb	r3, [r3, #0]
 801e1ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801e1f0:	e76c      	b.n	801e0cc <ip4addr_aton+0x18>
    } else {
      break;
 801e1f2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801e1f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d00b      	beq.n	801e214 <ip4addr_aton+0x160>
 801e1fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e200:	3301      	adds	r3, #1
 801e202:	4a3d      	ldr	r2, [pc, #244]	; (801e2f8 <ip4addr_aton+0x244>)
 801e204:	4413      	add	r3, r2
 801e206:	781b      	ldrb	r3, [r3, #0]
 801e208:	f003 0308 	and.w	r3, r3, #8
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	d101      	bne.n	801e214 <ip4addr_aton+0x160>
    return 0;
 801e210:	2300      	movs	r3, #0
 801e212:	e06d      	b.n	801e2f0 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801e214:	f107 030c 	add.w	r3, r7, #12
 801e218:	69fa      	ldr	r2, [r7, #28]
 801e21a:	1ad3      	subs	r3, r2, r3
 801e21c:	109b      	asrs	r3, r3, #2
 801e21e:	3301      	adds	r3, #1
 801e220:	2b04      	cmp	r3, #4
 801e222:	d853      	bhi.n	801e2cc <ip4addr_aton+0x218>
 801e224:	a201      	add	r2, pc, #4	; (adr r2, 801e22c <ip4addr_aton+0x178>)
 801e226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e22a:	bf00      	nop
 801e22c:	0801e241 	.word	0x0801e241
 801e230:	0801e2db 	.word	0x0801e2db
 801e234:	0801e245 	.word	0x0801e245
 801e238:	0801e267 	.word	0x0801e267
 801e23c:	0801e295 	.word	0x0801e295

    case 0:
      return 0;       /* initial nondigit */
 801e240:	2300      	movs	r3, #0
 801e242:	e055      	b.n	801e2f0 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801e244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e246:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801e24a:	d301      	bcc.n	801e250 <ip4addr_aton+0x19c>
        return 0;
 801e24c:	2300      	movs	r3, #0
 801e24e:	e04f      	b.n	801e2f0 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801e250:	68fb      	ldr	r3, [r7, #12]
 801e252:	2bff      	cmp	r3, #255	; 0xff
 801e254:	d901      	bls.n	801e25a <ip4addr_aton+0x1a6>
        return 0;
 801e256:	2300      	movs	r3, #0
 801e258:	e04a      	b.n	801e2f0 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801e25a:	68fb      	ldr	r3, [r7, #12]
 801e25c:	061b      	lsls	r3, r3, #24
 801e25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e260:	4313      	orrs	r3, r2
 801e262:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801e264:	e03a      	b.n	801e2dc <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801e266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e26c:	d301      	bcc.n	801e272 <ip4addr_aton+0x1be>
        return 0;
 801e26e:	2300      	movs	r3, #0
 801e270:	e03e      	b.n	801e2f0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	2bff      	cmp	r3, #255	; 0xff
 801e276:	d802      	bhi.n	801e27e <ip4addr_aton+0x1ca>
 801e278:	693b      	ldr	r3, [r7, #16]
 801e27a:	2bff      	cmp	r3, #255	; 0xff
 801e27c:	d901      	bls.n	801e282 <ip4addr_aton+0x1ce>
        return 0;
 801e27e:	2300      	movs	r3, #0
 801e280:	e036      	b.n	801e2f0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	061a      	lsls	r2, r3, #24
 801e286:	693b      	ldr	r3, [r7, #16]
 801e288:	041b      	lsls	r3, r3, #16
 801e28a:	4313      	orrs	r3, r2
 801e28c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e28e:	4313      	orrs	r3, r2
 801e290:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801e292:	e023      	b.n	801e2dc <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e296:	2bff      	cmp	r3, #255	; 0xff
 801e298:	d901      	bls.n	801e29e <ip4addr_aton+0x1ea>
        return 0;
 801e29a:	2300      	movs	r3, #0
 801e29c:	e028      	b.n	801e2f0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	2bff      	cmp	r3, #255	; 0xff
 801e2a2:	d805      	bhi.n	801e2b0 <ip4addr_aton+0x1fc>
 801e2a4:	693b      	ldr	r3, [r7, #16]
 801e2a6:	2bff      	cmp	r3, #255	; 0xff
 801e2a8:	d802      	bhi.n	801e2b0 <ip4addr_aton+0x1fc>
 801e2aa:	697b      	ldr	r3, [r7, #20]
 801e2ac:	2bff      	cmp	r3, #255	; 0xff
 801e2ae:	d901      	bls.n	801e2b4 <ip4addr_aton+0x200>
        return 0;
 801e2b0:	2300      	movs	r3, #0
 801e2b2:	e01d      	b.n	801e2f0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	061a      	lsls	r2, r3, #24
 801e2b8:	693b      	ldr	r3, [r7, #16]
 801e2ba:	041b      	lsls	r3, r3, #16
 801e2bc:	431a      	orrs	r2, r3
 801e2be:	697b      	ldr	r3, [r7, #20]
 801e2c0:	021b      	lsls	r3, r3, #8
 801e2c2:	4313      	orrs	r3, r2
 801e2c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e2c6:	4313      	orrs	r3, r2
 801e2c8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801e2ca:	e007      	b.n	801e2dc <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801e2cc:	4b0b      	ldr	r3, [pc, #44]	; (801e2fc <ip4addr_aton+0x248>)
 801e2ce:	22f9      	movs	r2, #249	; 0xf9
 801e2d0:	490b      	ldr	r1, [pc, #44]	; (801e300 <ip4addr_aton+0x24c>)
 801e2d2:	480c      	ldr	r0, [pc, #48]	; (801e304 <ip4addr_aton+0x250>)
 801e2d4:	f001 fb0a 	bl	801f8ec <iprintf>
      break;
 801e2d8:	e000      	b.n	801e2dc <ip4addr_aton+0x228>
      break;
 801e2da:	bf00      	nop
  }
  if (addr) {
 801e2dc:	683b      	ldr	r3, [r7, #0]
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	d005      	beq.n	801e2ee <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801e2e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e2e4:	f7f2 fd5f 	bl	8010da6 <lwip_htonl>
 801e2e8:	4602      	mov	r2, r0
 801e2ea:	683b      	ldr	r3, [r7, #0]
 801e2ec:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801e2ee:	2301      	movs	r3, #1
}
 801e2f0:	4618      	mov	r0, r3
 801e2f2:	3728      	adds	r7, #40	; 0x28
 801e2f4:	46bd      	mov	sp, r7
 801e2f6:	bd80      	pop	{r7, pc}
 801e2f8:	080256ca 	.word	0x080256ca
 801e2fc:	08025040 	.word	0x08025040
 801e300:	0802507c 	.word	0x0802507c
 801e304:	08025088 	.word	0x08025088

0801e308 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801e308:	b580      	push	{r7, lr}
 801e30a:	b084      	sub	sp, #16
 801e30c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801e30e:	2300      	movs	r3, #0
 801e310:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801e312:	4b12      	ldr	r3, [pc, #72]	; (801e35c <ip_reass_tmr+0x54>)
 801e314:	681b      	ldr	r3, [r3, #0]
 801e316:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801e318:	e018      	b.n	801e34c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801e31a:	68fb      	ldr	r3, [r7, #12]
 801e31c:	7fdb      	ldrb	r3, [r3, #31]
 801e31e:	2b00      	cmp	r3, #0
 801e320:	d00b      	beq.n	801e33a <ip_reass_tmr+0x32>
      r->timer--;
 801e322:	68fb      	ldr	r3, [r7, #12]
 801e324:	7fdb      	ldrb	r3, [r3, #31]
 801e326:	3b01      	subs	r3, #1
 801e328:	b2da      	uxtb	r2, r3
 801e32a:	68fb      	ldr	r3, [r7, #12]
 801e32c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	60fb      	str	r3, [r7, #12]
 801e338:	e008      	b.n	801e34c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801e33a:	68fb      	ldr	r3, [r7, #12]
 801e33c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801e33e:	68fb      	ldr	r3, [r7, #12]
 801e340:	681b      	ldr	r3, [r3, #0]
 801e342:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801e344:	68b9      	ldr	r1, [r7, #8]
 801e346:	6878      	ldr	r0, [r7, #4]
 801e348:	f000 f80a 	bl	801e360 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d1e3      	bne.n	801e31a <ip_reass_tmr+0x12>
    }
  }
}
 801e352:	bf00      	nop
 801e354:	bf00      	nop
 801e356:	3710      	adds	r7, #16
 801e358:	46bd      	mov	sp, r7
 801e35a:	bd80      	pop	{r7, pc}
 801e35c:	20005644 	.word	0x20005644

0801e360 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e360:	b580      	push	{r7, lr}
 801e362:	b088      	sub	sp, #32
 801e364:	af00      	add	r7, sp, #0
 801e366:	6078      	str	r0, [r7, #4]
 801e368:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801e36a:	2300      	movs	r3, #0
 801e36c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e36e:	683a      	ldr	r2, [r7, #0]
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	429a      	cmp	r2, r3
 801e374:	d105      	bne.n	801e382 <ip_reass_free_complete_datagram+0x22>
 801e376:	4b45      	ldr	r3, [pc, #276]	; (801e48c <ip_reass_free_complete_datagram+0x12c>)
 801e378:	22ab      	movs	r2, #171	; 0xab
 801e37a:	4945      	ldr	r1, [pc, #276]	; (801e490 <ip_reass_free_complete_datagram+0x130>)
 801e37c:	4845      	ldr	r0, [pc, #276]	; (801e494 <ip_reass_free_complete_datagram+0x134>)
 801e37e:	f001 fab5 	bl	801f8ec <iprintf>
  if (prev != NULL) {
 801e382:	683b      	ldr	r3, [r7, #0]
 801e384:	2b00      	cmp	r3, #0
 801e386:	d00a      	beq.n	801e39e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801e388:	683b      	ldr	r3, [r7, #0]
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	687a      	ldr	r2, [r7, #4]
 801e38e:	429a      	cmp	r2, r3
 801e390:	d005      	beq.n	801e39e <ip_reass_free_complete_datagram+0x3e>
 801e392:	4b3e      	ldr	r3, [pc, #248]	; (801e48c <ip_reass_free_complete_datagram+0x12c>)
 801e394:	22ad      	movs	r2, #173	; 0xad
 801e396:	4940      	ldr	r1, [pc, #256]	; (801e498 <ip_reass_free_complete_datagram+0x138>)
 801e398:	483e      	ldr	r0, [pc, #248]	; (801e494 <ip_reass_free_complete_datagram+0x134>)
 801e39a:	f001 faa7 	bl	801f8ec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	685b      	ldr	r3, [r3, #4]
 801e3a2:	685b      	ldr	r3, [r3, #4]
 801e3a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801e3a6:	697b      	ldr	r3, [r7, #20]
 801e3a8:	889b      	ldrh	r3, [r3, #4]
 801e3aa:	b29b      	uxth	r3, r3
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	d12a      	bne.n	801e406 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	685b      	ldr	r3, [r3, #4]
 801e3b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801e3b6:	697b      	ldr	r3, [r7, #20]
 801e3b8:	681a      	ldr	r2, [r3, #0]
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e3be:	69bb      	ldr	r3, [r7, #24]
 801e3c0:	6858      	ldr	r0, [r3, #4]
 801e3c2:	687b      	ldr	r3, [r7, #4]
 801e3c4:	3308      	adds	r3, #8
 801e3c6:	2214      	movs	r2, #20
 801e3c8:	4619      	mov	r1, r3
 801e3ca:	f001 f9a5 	bl	801f718 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e3ce:	2101      	movs	r1, #1
 801e3d0:	69b8      	ldr	r0, [r7, #24]
 801e3d2:	f7ff faff 	bl	801d9d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801e3d6:	69b8      	ldr	r0, [r7, #24]
 801e3d8:	f7f5 f8ec 	bl	80135b4 <pbuf_clen>
 801e3dc:	4603      	mov	r3, r0
 801e3de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e3e0:	8bfa      	ldrh	r2, [r7, #30]
 801e3e2:	8a7b      	ldrh	r3, [r7, #18]
 801e3e4:	4413      	add	r3, r2
 801e3e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e3ea:	db05      	blt.n	801e3f8 <ip_reass_free_complete_datagram+0x98>
 801e3ec:	4b27      	ldr	r3, [pc, #156]	; (801e48c <ip_reass_free_complete_datagram+0x12c>)
 801e3ee:	22bc      	movs	r2, #188	; 0xbc
 801e3f0:	492a      	ldr	r1, [pc, #168]	; (801e49c <ip_reass_free_complete_datagram+0x13c>)
 801e3f2:	4828      	ldr	r0, [pc, #160]	; (801e494 <ip_reass_free_complete_datagram+0x134>)
 801e3f4:	f001 fa7a 	bl	801f8ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e3f8:	8bfa      	ldrh	r2, [r7, #30]
 801e3fa:	8a7b      	ldrh	r3, [r7, #18]
 801e3fc:	4413      	add	r3, r2
 801e3fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801e400:	69b8      	ldr	r0, [r7, #24]
 801e402:	f7f5 f849 	bl	8013498 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	685b      	ldr	r3, [r3, #4]
 801e40a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801e40c:	e01f      	b.n	801e44e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801e40e:	69bb      	ldr	r3, [r7, #24]
 801e410:	685b      	ldr	r3, [r3, #4]
 801e412:	617b      	str	r3, [r7, #20]
    pcur = p;
 801e414:	69bb      	ldr	r3, [r7, #24]
 801e416:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801e418:	697b      	ldr	r3, [r7, #20]
 801e41a:	681b      	ldr	r3, [r3, #0]
 801e41c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801e41e:	68f8      	ldr	r0, [r7, #12]
 801e420:	f7f5 f8c8 	bl	80135b4 <pbuf_clen>
 801e424:	4603      	mov	r3, r0
 801e426:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e428:	8bfa      	ldrh	r2, [r7, #30]
 801e42a:	8a7b      	ldrh	r3, [r7, #18]
 801e42c:	4413      	add	r3, r2
 801e42e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e432:	db05      	blt.n	801e440 <ip_reass_free_complete_datagram+0xe0>
 801e434:	4b15      	ldr	r3, [pc, #84]	; (801e48c <ip_reass_free_complete_datagram+0x12c>)
 801e436:	22cc      	movs	r2, #204	; 0xcc
 801e438:	4918      	ldr	r1, [pc, #96]	; (801e49c <ip_reass_free_complete_datagram+0x13c>)
 801e43a:	4816      	ldr	r0, [pc, #88]	; (801e494 <ip_reass_free_complete_datagram+0x134>)
 801e43c:	f001 fa56 	bl	801f8ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e440:	8bfa      	ldrh	r2, [r7, #30]
 801e442:	8a7b      	ldrh	r3, [r7, #18]
 801e444:	4413      	add	r3, r2
 801e446:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801e448:	68f8      	ldr	r0, [r7, #12]
 801e44a:	f7f5 f825 	bl	8013498 <pbuf_free>
  while (p != NULL) {
 801e44e:	69bb      	ldr	r3, [r7, #24]
 801e450:	2b00      	cmp	r3, #0
 801e452:	d1dc      	bne.n	801e40e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801e454:	6839      	ldr	r1, [r7, #0]
 801e456:	6878      	ldr	r0, [r7, #4]
 801e458:	f000 f8c2 	bl	801e5e0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e45c:	4b10      	ldr	r3, [pc, #64]	; (801e4a0 <ip_reass_free_complete_datagram+0x140>)
 801e45e:	881b      	ldrh	r3, [r3, #0]
 801e460:	8bfa      	ldrh	r2, [r7, #30]
 801e462:	429a      	cmp	r2, r3
 801e464:	d905      	bls.n	801e472 <ip_reass_free_complete_datagram+0x112>
 801e466:	4b09      	ldr	r3, [pc, #36]	; (801e48c <ip_reass_free_complete_datagram+0x12c>)
 801e468:	22d2      	movs	r2, #210	; 0xd2
 801e46a:	490e      	ldr	r1, [pc, #56]	; (801e4a4 <ip_reass_free_complete_datagram+0x144>)
 801e46c:	4809      	ldr	r0, [pc, #36]	; (801e494 <ip_reass_free_complete_datagram+0x134>)
 801e46e:	f001 fa3d 	bl	801f8ec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e472:	4b0b      	ldr	r3, [pc, #44]	; (801e4a0 <ip_reass_free_complete_datagram+0x140>)
 801e474:	881a      	ldrh	r2, [r3, #0]
 801e476:	8bfb      	ldrh	r3, [r7, #30]
 801e478:	1ad3      	subs	r3, r2, r3
 801e47a:	b29a      	uxth	r2, r3
 801e47c:	4b08      	ldr	r3, [pc, #32]	; (801e4a0 <ip_reass_free_complete_datagram+0x140>)
 801e47e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801e480:	8bfb      	ldrh	r3, [r7, #30]
}
 801e482:	4618      	mov	r0, r3
 801e484:	3720      	adds	r7, #32
 801e486:	46bd      	mov	sp, r7
 801e488:	bd80      	pop	{r7, pc}
 801e48a:	bf00      	nop
 801e48c:	080250b0 	.word	0x080250b0
 801e490:	080250ec 	.word	0x080250ec
 801e494:	080250f8 	.word	0x080250f8
 801e498:	08025120 	.word	0x08025120
 801e49c:	08025134 	.word	0x08025134
 801e4a0:	20005648 	.word	0x20005648
 801e4a4:	08025154 	.word	0x08025154

0801e4a8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801e4a8:	b580      	push	{r7, lr}
 801e4aa:	b08a      	sub	sp, #40	; 0x28
 801e4ac:	af00      	add	r7, sp, #0
 801e4ae:	6078      	str	r0, [r7, #4]
 801e4b0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801e4b2:	2300      	movs	r3, #0
 801e4b4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801e4b6:	2300      	movs	r3, #0
 801e4b8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801e4ba:	2300      	movs	r3, #0
 801e4bc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801e4be:	2300      	movs	r3, #0
 801e4c0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801e4c2:	2300      	movs	r3, #0
 801e4c4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801e4c6:	4b28      	ldr	r3, [pc, #160]	; (801e568 <ip_reass_remove_oldest_datagram+0xc0>)
 801e4c8:	681b      	ldr	r3, [r3, #0]
 801e4ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e4cc:	e030      	b.n	801e530 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4d0:	695a      	ldr	r2, [r3, #20]
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	68db      	ldr	r3, [r3, #12]
 801e4d6:	429a      	cmp	r2, r3
 801e4d8:	d10c      	bne.n	801e4f4 <ip_reass_remove_oldest_datagram+0x4c>
 801e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4dc:	699a      	ldr	r2, [r3, #24]
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	691b      	ldr	r3, [r3, #16]
 801e4e2:	429a      	cmp	r2, r3
 801e4e4:	d106      	bne.n	801e4f4 <ip_reass_remove_oldest_datagram+0x4c>
 801e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4e8:	899a      	ldrh	r2, [r3, #12]
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	889b      	ldrh	r3, [r3, #4]
 801e4ee:	b29b      	uxth	r3, r3
 801e4f0:	429a      	cmp	r2, r3
 801e4f2:	d014      	beq.n	801e51e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801e4f4:	693b      	ldr	r3, [r7, #16]
 801e4f6:	3301      	adds	r3, #1
 801e4f8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801e4fa:	6a3b      	ldr	r3, [r7, #32]
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	d104      	bne.n	801e50a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e502:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e504:	69fb      	ldr	r3, [r7, #28]
 801e506:	61bb      	str	r3, [r7, #24]
 801e508:	e009      	b.n	801e51e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801e50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e50c:	7fda      	ldrb	r2, [r3, #31]
 801e50e:	6a3b      	ldr	r3, [r7, #32]
 801e510:	7fdb      	ldrb	r3, [r3, #31]
 801e512:	429a      	cmp	r2, r3
 801e514:	d803      	bhi.n	801e51e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801e516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e518:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e51a:	69fb      	ldr	r3, [r7, #28]
 801e51c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801e51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e520:	681b      	ldr	r3, [r3, #0]
 801e522:	2b00      	cmp	r3, #0
 801e524:	d001      	beq.n	801e52a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e528:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e532:	2b00      	cmp	r3, #0
 801e534:	d1cb      	bne.n	801e4ce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801e536:	6a3b      	ldr	r3, [r7, #32]
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d008      	beq.n	801e54e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e53c:	69b9      	ldr	r1, [r7, #24]
 801e53e:	6a38      	ldr	r0, [r7, #32]
 801e540:	f7ff ff0e 	bl	801e360 <ip_reass_free_complete_datagram>
 801e544:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801e546:	697a      	ldr	r2, [r7, #20]
 801e548:	68fb      	ldr	r3, [r7, #12]
 801e54a:	4413      	add	r3, r2
 801e54c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e54e:	697a      	ldr	r2, [r7, #20]
 801e550:	683b      	ldr	r3, [r7, #0]
 801e552:	429a      	cmp	r2, r3
 801e554:	da02      	bge.n	801e55c <ip_reass_remove_oldest_datagram+0xb4>
 801e556:	693b      	ldr	r3, [r7, #16]
 801e558:	2b01      	cmp	r3, #1
 801e55a:	dcac      	bgt.n	801e4b6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801e55c:	697b      	ldr	r3, [r7, #20]
}
 801e55e:	4618      	mov	r0, r3
 801e560:	3728      	adds	r7, #40	; 0x28
 801e562:	46bd      	mov	sp, r7
 801e564:	bd80      	pop	{r7, pc}
 801e566:	bf00      	nop
 801e568:	20005644 	.word	0x20005644

0801e56c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801e56c:	b580      	push	{r7, lr}
 801e56e:	b084      	sub	sp, #16
 801e570:	af00      	add	r7, sp, #0
 801e572:	6078      	str	r0, [r7, #4]
 801e574:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e576:	2004      	movs	r0, #4
 801e578:	f7f4 f88c 	bl	8012694 <memp_malloc>
 801e57c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801e57e:	68fb      	ldr	r3, [r7, #12]
 801e580:	2b00      	cmp	r3, #0
 801e582:	d110      	bne.n	801e5a6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e584:	6839      	ldr	r1, [r7, #0]
 801e586:	6878      	ldr	r0, [r7, #4]
 801e588:	f7ff ff8e 	bl	801e4a8 <ip_reass_remove_oldest_datagram>
 801e58c:	4602      	mov	r2, r0
 801e58e:	683b      	ldr	r3, [r7, #0]
 801e590:	4293      	cmp	r3, r2
 801e592:	dc03      	bgt.n	801e59c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e594:	2004      	movs	r0, #4
 801e596:	f7f4 f87d 	bl	8012694 <memp_malloc>
 801e59a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801e59c:	68fb      	ldr	r3, [r7, #12]
 801e59e:	2b00      	cmp	r3, #0
 801e5a0:	d101      	bne.n	801e5a6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801e5a2:	2300      	movs	r3, #0
 801e5a4:	e016      	b.n	801e5d4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e5a6:	2220      	movs	r2, #32
 801e5a8:	2100      	movs	r1, #0
 801e5aa:	68f8      	ldr	r0, [r7, #12]
 801e5ac:	f001 f8dc 	bl	801f768 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	220f      	movs	r2, #15
 801e5b4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801e5b6:	4b09      	ldr	r3, [pc, #36]	; (801e5dc <ip_reass_enqueue_new_datagram+0x70>)
 801e5b8:	681a      	ldr	r2, [r3, #0]
 801e5ba:	68fb      	ldr	r3, [r7, #12]
 801e5bc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801e5be:	4a07      	ldr	r2, [pc, #28]	; (801e5dc <ip_reass_enqueue_new_datagram+0x70>)
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e5c4:	68fb      	ldr	r3, [r7, #12]
 801e5c6:	3308      	adds	r3, #8
 801e5c8:	2214      	movs	r2, #20
 801e5ca:	6879      	ldr	r1, [r7, #4]
 801e5cc:	4618      	mov	r0, r3
 801e5ce:	f001 f8a3 	bl	801f718 <memcpy>
  return ipr;
 801e5d2:	68fb      	ldr	r3, [r7, #12]
}
 801e5d4:	4618      	mov	r0, r3
 801e5d6:	3710      	adds	r7, #16
 801e5d8:	46bd      	mov	sp, r7
 801e5da:	bd80      	pop	{r7, pc}
 801e5dc:	20005644 	.word	0x20005644

0801e5e0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e5e0:	b580      	push	{r7, lr}
 801e5e2:	b082      	sub	sp, #8
 801e5e4:	af00      	add	r7, sp, #0
 801e5e6:	6078      	str	r0, [r7, #4]
 801e5e8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e5ea:	4b10      	ldr	r3, [pc, #64]	; (801e62c <ip_reass_dequeue_datagram+0x4c>)
 801e5ec:	681b      	ldr	r3, [r3, #0]
 801e5ee:	687a      	ldr	r2, [r7, #4]
 801e5f0:	429a      	cmp	r2, r3
 801e5f2:	d104      	bne.n	801e5fe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	681b      	ldr	r3, [r3, #0]
 801e5f8:	4a0c      	ldr	r2, [pc, #48]	; (801e62c <ip_reass_dequeue_datagram+0x4c>)
 801e5fa:	6013      	str	r3, [r2, #0]
 801e5fc:	e00d      	b.n	801e61a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e5fe:	683b      	ldr	r3, [r7, #0]
 801e600:	2b00      	cmp	r3, #0
 801e602:	d106      	bne.n	801e612 <ip_reass_dequeue_datagram+0x32>
 801e604:	4b0a      	ldr	r3, [pc, #40]	; (801e630 <ip_reass_dequeue_datagram+0x50>)
 801e606:	f240 1245 	movw	r2, #325	; 0x145
 801e60a:	490a      	ldr	r1, [pc, #40]	; (801e634 <ip_reass_dequeue_datagram+0x54>)
 801e60c:	480a      	ldr	r0, [pc, #40]	; (801e638 <ip_reass_dequeue_datagram+0x58>)
 801e60e:	f001 f96d 	bl	801f8ec <iprintf>
    prev->next = ipr->next;
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	681a      	ldr	r2, [r3, #0]
 801e616:	683b      	ldr	r3, [r7, #0]
 801e618:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e61a:	6879      	ldr	r1, [r7, #4]
 801e61c:	2004      	movs	r0, #4
 801e61e:	f7f4 f88b 	bl	8012738 <memp_free>
}
 801e622:	bf00      	nop
 801e624:	3708      	adds	r7, #8
 801e626:	46bd      	mov	sp, r7
 801e628:	bd80      	pop	{r7, pc}
 801e62a:	bf00      	nop
 801e62c:	20005644 	.word	0x20005644
 801e630:	080250b0 	.word	0x080250b0
 801e634:	08025178 	.word	0x08025178
 801e638:	080250f8 	.word	0x080250f8

0801e63c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801e63c:	b580      	push	{r7, lr}
 801e63e:	b08c      	sub	sp, #48	; 0x30
 801e640:	af00      	add	r7, sp, #0
 801e642:	60f8      	str	r0, [r7, #12]
 801e644:	60b9      	str	r1, [r7, #8]
 801e646:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801e648:	2300      	movs	r3, #0
 801e64a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801e64c:	2301      	movs	r3, #1
 801e64e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e650:	68bb      	ldr	r3, [r7, #8]
 801e652:	685b      	ldr	r3, [r3, #4]
 801e654:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e656:	69fb      	ldr	r3, [r7, #28]
 801e658:	885b      	ldrh	r3, [r3, #2]
 801e65a:	b29b      	uxth	r3, r3
 801e65c:	4618      	mov	r0, r3
 801e65e:	f7f2 fb8d 	bl	8010d7c <lwip_htons>
 801e662:	4603      	mov	r3, r0
 801e664:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e666:	69fb      	ldr	r3, [r7, #28]
 801e668:	781b      	ldrb	r3, [r3, #0]
 801e66a:	f003 030f 	and.w	r3, r3, #15
 801e66e:	b2db      	uxtb	r3, r3
 801e670:	009b      	lsls	r3, r3, #2
 801e672:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e674:	7e7b      	ldrb	r3, [r7, #25]
 801e676:	b29b      	uxth	r3, r3
 801e678:	8b7a      	ldrh	r2, [r7, #26]
 801e67a:	429a      	cmp	r2, r3
 801e67c:	d202      	bcs.n	801e684 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e67e:	f04f 33ff 	mov.w	r3, #4294967295
 801e682:	e135      	b.n	801e8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e684:	7e7b      	ldrb	r3, [r7, #25]
 801e686:	b29b      	uxth	r3, r3
 801e688:	8b7a      	ldrh	r2, [r7, #26]
 801e68a:	1ad3      	subs	r3, r2, r3
 801e68c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e68e:	69fb      	ldr	r3, [r7, #28]
 801e690:	88db      	ldrh	r3, [r3, #6]
 801e692:	b29b      	uxth	r3, r3
 801e694:	4618      	mov	r0, r3
 801e696:	f7f2 fb71 	bl	8010d7c <lwip_htons>
 801e69a:	4603      	mov	r3, r0
 801e69c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e6a0:	b29b      	uxth	r3, r3
 801e6a2:	00db      	lsls	r3, r3, #3
 801e6a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e6a6:	68bb      	ldr	r3, [r7, #8]
 801e6a8:	685b      	ldr	r3, [r3, #4]
 801e6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801e6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6ae:	2200      	movs	r2, #0
 801e6b0:	701a      	strb	r2, [r3, #0]
 801e6b2:	2200      	movs	r2, #0
 801e6b4:	705a      	strb	r2, [r3, #1]
 801e6b6:	2200      	movs	r2, #0
 801e6b8:	709a      	strb	r2, [r3, #2]
 801e6ba:	2200      	movs	r2, #0
 801e6bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6c0:	8afa      	ldrh	r2, [r7, #22]
 801e6c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e6c4:	8afa      	ldrh	r2, [r7, #22]
 801e6c6:	8b7b      	ldrh	r3, [r7, #26]
 801e6c8:	4413      	add	r3, r2
 801e6ca:	b29a      	uxth	r2, r3
 801e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6d2:	88db      	ldrh	r3, [r3, #6]
 801e6d4:	b29b      	uxth	r3, r3
 801e6d6:	8afa      	ldrh	r2, [r7, #22]
 801e6d8:	429a      	cmp	r2, r3
 801e6da:	d902      	bls.n	801e6e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e6dc:	f04f 33ff 	mov.w	r3, #4294967295
 801e6e0:	e106      	b.n	801e8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e6e2:	68fb      	ldr	r3, [r7, #12]
 801e6e4:	685b      	ldr	r3, [r3, #4]
 801e6e6:	627b      	str	r3, [r7, #36]	; 0x24
 801e6e8:	e068      	b.n	801e7bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6ec:	685b      	ldr	r3, [r3, #4]
 801e6ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6f2:	889b      	ldrh	r3, [r3, #4]
 801e6f4:	b29a      	uxth	r2, r3
 801e6f6:	693b      	ldr	r3, [r7, #16]
 801e6f8:	889b      	ldrh	r3, [r3, #4]
 801e6fa:	b29b      	uxth	r3, r3
 801e6fc:	429a      	cmp	r2, r3
 801e6fe:	d235      	bcs.n	801e76c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e704:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e708:	2b00      	cmp	r3, #0
 801e70a:	d020      	beq.n	801e74e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e70e:	889b      	ldrh	r3, [r3, #4]
 801e710:	b29a      	uxth	r2, r3
 801e712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e714:	88db      	ldrh	r3, [r3, #6]
 801e716:	b29b      	uxth	r3, r3
 801e718:	429a      	cmp	r2, r3
 801e71a:	d307      	bcc.n	801e72c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e71e:	88db      	ldrh	r3, [r3, #6]
 801e720:	b29a      	uxth	r2, r3
 801e722:	693b      	ldr	r3, [r7, #16]
 801e724:	889b      	ldrh	r3, [r3, #4]
 801e726:	b29b      	uxth	r3, r3
 801e728:	429a      	cmp	r2, r3
 801e72a:	d902      	bls.n	801e732 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e72c:	f04f 33ff 	mov.w	r3, #4294967295
 801e730:	e0de      	b.n	801e8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e734:	68ba      	ldr	r2, [r7, #8]
 801e736:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e73a:	88db      	ldrh	r3, [r3, #6]
 801e73c:	b29a      	uxth	r2, r3
 801e73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e740:	889b      	ldrh	r3, [r3, #4]
 801e742:	b29b      	uxth	r3, r3
 801e744:	429a      	cmp	r2, r3
 801e746:	d03d      	beq.n	801e7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e748:	2300      	movs	r3, #0
 801e74a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e74c:	e03a      	b.n	801e7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e750:	88db      	ldrh	r3, [r3, #6]
 801e752:	b29a      	uxth	r2, r3
 801e754:	693b      	ldr	r3, [r7, #16]
 801e756:	889b      	ldrh	r3, [r3, #4]
 801e758:	b29b      	uxth	r3, r3
 801e75a:	429a      	cmp	r2, r3
 801e75c:	d902      	bls.n	801e764 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e75e:	f04f 33ff 	mov.w	r3, #4294967295
 801e762:	e0c5      	b.n	801e8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e764:	68fb      	ldr	r3, [r7, #12]
 801e766:	68ba      	ldr	r2, [r7, #8]
 801e768:	605a      	str	r2, [r3, #4]
      break;
 801e76a:	e02b      	b.n	801e7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e76e:	889b      	ldrh	r3, [r3, #4]
 801e770:	b29a      	uxth	r2, r3
 801e772:	693b      	ldr	r3, [r7, #16]
 801e774:	889b      	ldrh	r3, [r3, #4]
 801e776:	b29b      	uxth	r3, r3
 801e778:	429a      	cmp	r2, r3
 801e77a:	d102      	bne.n	801e782 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e77c:	f04f 33ff 	mov.w	r3, #4294967295
 801e780:	e0b6      	b.n	801e8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e784:	889b      	ldrh	r3, [r3, #4]
 801e786:	b29a      	uxth	r2, r3
 801e788:	693b      	ldr	r3, [r7, #16]
 801e78a:	88db      	ldrh	r3, [r3, #6]
 801e78c:	b29b      	uxth	r3, r3
 801e78e:	429a      	cmp	r2, r3
 801e790:	d202      	bcs.n	801e798 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e792:	f04f 33ff 	mov.w	r3, #4294967295
 801e796:	e0ab      	b.n	801e8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d009      	beq.n	801e7b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7a0:	88db      	ldrh	r3, [r3, #6]
 801e7a2:	b29a      	uxth	r2, r3
 801e7a4:	693b      	ldr	r3, [r7, #16]
 801e7a6:	889b      	ldrh	r3, [r3, #4]
 801e7a8:	b29b      	uxth	r3, r3
 801e7aa:	429a      	cmp	r2, r3
 801e7ac:	d001      	beq.n	801e7b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e7ae:	2300      	movs	r3, #0
 801e7b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e7b2:	693b      	ldr	r3, [r7, #16]
 801e7b4:	681b      	ldr	r3, [r3, #0]
 801e7b6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801e7b8:	693b      	ldr	r3, [r7, #16]
 801e7ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7be:	2b00      	cmp	r3, #0
 801e7c0:	d193      	bne.n	801e6ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e7c2:	e000      	b.n	801e7c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e7c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d12d      	bne.n	801e828 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d01c      	beq.n	801e80c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7d4:	88db      	ldrh	r3, [r3, #6]
 801e7d6:	b29a      	uxth	r2, r3
 801e7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7da:	889b      	ldrh	r3, [r3, #4]
 801e7dc:	b29b      	uxth	r3, r3
 801e7de:	429a      	cmp	r2, r3
 801e7e0:	d906      	bls.n	801e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e7e2:	4b45      	ldr	r3, [pc, #276]	; (801e8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e7e4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801e7e8:	4944      	ldr	r1, [pc, #272]	; (801e8fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e7ea:	4845      	ldr	r0, [pc, #276]	; (801e900 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e7ec:	f001 f87e 	bl	801f8ec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7f2:	68ba      	ldr	r2, [r7, #8]
 801e7f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7f8:	88db      	ldrh	r3, [r3, #6]
 801e7fa:	b29a      	uxth	r2, r3
 801e7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7fe:	889b      	ldrh	r3, [r3, #4]
 801e800:	b29b      	uxth	r3, r3
 801e802:	429a      	cmp	r2, r3
 801e804:	d010      	beq.n	801e828 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e806:	2300      	movs	r3, #0
 801e808:	623b      	str	r3, [r7, #32]
 801e80a:	e00d      	b.n	801e828 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e80c:	68fb      	ldr	r3, [r7, #12]
 801e80e:	685b      	ldr	r3, [r3, #4]
 801e810:	2b00      	cmp	r3, #0
 801e812:	d006      	beq.n	801e822 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e814:	4b38      	ldr	r3, [pc, #224]	; (801e8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e816:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801e81a:	493a      	ldr	r1, [pc, #232]	; (801e904 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e81c:	4838      	ldr	r0, [pc, #224]	; (801e900 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e81e:	f001 f865 	bl	801f8ec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e822:	68fb      	ldr	r3, [r7, #12]
 801e824:	68ba      	ldr	r2, [r7, #8]
 801e826:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d105      	bne.n	801e83a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801e82e:	68fb      	ldr	r3, [r7, #12]
 801e830:	7f9b      	ldrb	r3, [r3, #30]
 801e832:	f003 0301 	and.w	r3, r3, #1
 801e836:	2b00      	cmp	r3, #0
 801e838:	d059      	beq.n	801e8ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801e83a:	6a3b      	ldr	r3, [r7, #32]
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	d04f      	beq.n	801e8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e840:	68fb      	ldr	r3, [r7, #12]
 801e842:	685b      	ldr	r3, [r3, #4]
 801e844:	2b00      	cmp	r3, #0
 801e846:	d006      	beq.n	801e856 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801e848:	68fb      	ldr	r3, [r7, #12]
 801e84a:	685b      	ldr	r3, [r3, #4]
 801e84c:	685b      	ldr	r3, [r3, #4]
 801e84e:	889b      	ldrh	r3, [r3, #4]
 801e850:	b29b      	uxth	r3, r3
 801e852:	2b00      	cmp	r3, #0
 801e854:	d002      	beq.n	801e85c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801e856:	2300      	movs	r3, #0
 801e858:	623b      	str	r3, [r7, #32]
 801e85a:	e041      	b.n	801e8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801e85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e85e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e862:	681b      	ldr	r3, [r3, #0]
 801e864:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e866:	e012      	b.n	801e88e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e86a:	685b      	ldr	r3, [r3, #4]
 801e86c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801e86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e870:	88db      	ldrh	r3, [r3, #6]
 801e872:	b29a      	uxth	r2, r3
 801e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e876:	889b      	ldrh	r3, [r3, #4]
 801e878:	b29b      	uxth	r3, r3
 801e87a:	429a      	cmp	r2, r3
 801e87c:	d002      	beq.n	801e884 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e87e:	2300      	movs	r3, #0
 801e880:	623b      	str	r3, [r7, #32]
            break;
 801e882:	e007      	b.n	801e894 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e886:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e88a:	681b      	ldr	r3, [r3, #0]
 801e88c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e890:	2b00      	cmp	r3, #0
 801e892:	d1e9      	bne.n	801e868 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e894:	6a3b      	ldr	r3, [r7, #32]
 801e896:	2b00      	cmp	r3, #0
 801e898:	d022      	beq.n	801e8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e89a:	68fb      	ldr	r3, [r7, #12]
 801e89c:	685b      	ldr	r3, [r3, #4]
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	d106      	bne.n	801e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e8a2:	4b15      	ldr	r3, [pc, #84]	; (801e8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e8a4:	f240 12df 	movw	r2, #479	; 0x1df
 801e8a8:	4917      	ldr	r1, [pc, #92]	; (801e908 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e8aa:	4815      	ldr	r0, [pc, #84]	; (801e900 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e8ac:	f001 f81e 	bl	801f8ec <iprintf>
          LWIP_ASSERT("sanity check",
 801e8b0:	68fb      	ldr	r3, [r7, #12]
 801e8b2:	685b      	ldr	r3, [r3, #4]
 801e8b4:	685b      	ldr	r3, [r3, #4]
 801e8b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e8b8:	429a      	cmp	r2, r3
 801e8ba:	d106      	bne.n	801e8ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e8bc:	4b0e      	ldr	r3, [pc, #56]	; (801e8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e8be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801e8c2:	4911      	ldr	r1, [pc, #68]	; (801e908 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e8c4:	480e      	ldr	r0, [pc, #56]	; (801e900 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e8c6:	f001 f811 	bl	801f8ec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e8cc:	681b      	ldr	r3, [r3, #0]
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d006      	beq.n	801e8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e8d2:	4b09      	ldr	r3, [pc, #36]	; (801e8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e8d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801e8d8:	490c      	ldr	r1, [pc, #48]	; (801e90c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e8da:	4809      	ldr	r0, [pc, #36]	; (801e900 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e8dc:	f001 f806 	bl	801f8ec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e8e0:	6a3b      	ldr	r3, [r7, #32]
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	bf14      	ite	ne
 801e8e6:	2301      	movne	r3, #1
 801e8e8:	2300      	moveq	r3, #0
 801e8ea:	b2db      	uxtb	r3, r3
 801e8ec:	e000      	b.n	801e8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e8ee:	2300      	movs	r3, #0
}
 801e8f0:	4618      	mov	r0, r3
 801e8f2:	3730      	adds	r7, #48	; 0x30
 801e8f4:	46bd      	mov	sp, r7
 801e8f6:	bd80      	pop	{r7, pc}
 801e8f8:	080250b0 	.word	0x080250b0
 801e8fc:	08025194 	.word	0x08025194
 801e900:	080250f8 	.word	0x080250f8
 801e904:	080251b4 	.word	0x080251b4
 801e908:	080251ec 	.word	0x080251ec
 801e90c:	080251fc 	.word	0x080251fc

0801e910 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e910:	b580      	push	{r7, lr}
 801e912:	b08e      	sub	sp, #56	; 0x38
 801e914:	af00      	add	r7, sp, #0
 801e916:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e918:	687b      	ldr	r3, [r7, #4]
 801e91a:	685b      	ldr	r3, [r3, #4]
 801e91c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e920:	781b      	ldrb	r3, [r3, #0]
 801e922:	f003 030f 	and.w	r3, r3, #15
 801e926:	b2db      	uxtb	r3, r3
 801e928:	009b      	lsls	r3, r3, #2
 801e92a:	b2db      	uxtb	r3, r3
 801e92c:	2b14      	cmp	r3, #20
 801e92e:	f040 8167 	bne.w	801ec00 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e934:	88db      	ldrh	r3, [r3, #6]
 801e936:	b29b      	uxth	r3, r3
 801e938:	4618      	mov	r0, r3
 801e93a:	f7f2 fa1f 	bl	8010d7c <lwip_htons>
 801e93e:	4603      	mov	r3, r0
 801e940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e944:	b29b      	uxth	r3, r3
 801e946:	00db      	lsls	r3, r3, #3
 801e948:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e94c:	885b      	ldrh	r3, [r3, #2]
 801e94e:	b29b      	uxth	r3, r3
 801e950:	4618      	mov	r0, r3
 801e952:	f7f2 fa13 	bl	8010d7c <lwip_htons>
 801e956:	4603      	mov	r3, r0
 801e958:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e95c:	781b      	ldrb	r3, [r3, #0]
 801e95e:	f003 030f 	and.w	r3, r3, #15
 801e962:	b2db      	uxtb	r3, r3
 801e964:	009b      	lsls	r3, r3, #2
 801e966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801e96a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e96e:	b29b      	uxth	r3, r3
 801e970:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e972:	429a      	cmp	r2, r3
 801e974:	f0c0 8146 	bcc.w	801ec04 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e978:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e97c:	b29b      	uxth	r3, r3
 801e97e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e980:	1ad3      	subs	r3, r2, r3
 801e982:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e984:	6878      	ldr	r0, [r7, #4]
 801e986:	f7f4 fe15 	bl	80135b4 <pbuf_clen>
 801e98a:	4603      	mov	r3, r0
 801e98c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e98e:	4b9f      	ldr	r3, [pc, #636]	; (801ec0c <ip4_reass+0x2fc>)
 801e990:	881b      	ldrh	r3, [r3, #0]
 801e992:	461a      	mov	r2, r3
 801e994:	8c3b      	ldrh	r3, [r7, #32]
 801e996:	4413      	add	r3, r2
 801e998:	2b0a      	cmp	r3, #10
 801e99a:	dd10      	ble.n	801e9be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e99c:	8c3b      	ldrh	r3, [r7, #32]
 801e99e:	4619      	mov	r1, r3
 801e9a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e9a2:	f7ff fd81 	bl	801e4a8 <ip_reass_remove_oldest_datagram>
 801e9a6:	4603      	mov	r3, r0
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	f000 812d 	beq.w	801ec08 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e9ae:	4b97      	ldr	r3, [pc, #604]	; (801ec0c <ip4_reass+0x2fc>)
 801e9b0:	881b      	ldrh	r3, [r3, #0]
 801e9b2:	461a      	mov	r2, r3
 801e9b4:	8c3b      	ldrh	r3, [r7, #32]
 801e9b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e9b8:	2b0a      	cmp	r3, #10
 801e9ba:	f300 8125 	bgt.w	801ec08 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e9be:	4b94      	ldr	r3, [pc, #592]	; (801ec10 <ip4_reass+0x300>)
 801e9c0:	681b      	ldr	r3, [r3, #0]
 801e9c2:	633b      	str	r3, [r7, #48]	; 0x30
 801e9c4:	e015      	b.n	801e9f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9c8:	695a      	ldr	r2, [r3, #20]
 801e9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e9cc:	68db      	ldr	r3, [r3, #12]
 801e9ce:	429a      	cmp	r2, r3
 801e9d0:	d10c      	bne.n	801e9ec <ip4_reass+0xdc>
 801e9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9d4:	699a      	ldr	r2, [r3, #24]
 801e9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e9d8:	691b      	ldr	r3, [r3, #16]
 801e9da:	429a      	cmp	r2, r3
 801e9dc:	d106      	bne.n	801e9ec <ip4_reass+0xdc>
 801e9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9e0:	899a      	ldrh	r2, [r3, #12]
 801e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e9e4:	889b      	ldrh	r3, [r3, #4]
 801e9e6:	b29b      	uxth	r3, r3
 801e9e8:	429a      	cmp	r2, r3
 801e9ea:	d006      	beq.n	801e9fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	633b      	str	r3, [r7, #48]	; 0x30
 801e9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	d1e6      	bne.n	801e9c6 <ip4_reass+0xb6>
 801e9f8:	e000      	b.n	801e9fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801e9fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801e9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d109      	bne.n	801ea16 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801ea02:	8c3b      	ldrh	r3, [r7, #32]
 801ea04:	4619      	mov	r1, r3
 801ea06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ea08:	f7ff fdb0 	bl	801e56c <ip_reass_enqueue_new_datagram>
 801ea0c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ea0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea10:	2b00      	cmp	r3, #0
 801ea12:	d11c      	bne.n	801ea4e <ip4_reass+0x13e>
      goto nullreturn;
 801ea14:	e109      	b.n	801ec2a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ea16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea18:	88db      	ldrh	r3, [r3, #6]
 801ea1a:	b29b      	uxth	r3, r3
 801ea1c:	4618      	mov	r0, r3
 801ea1e:	f7f2 f9ad 	bl	8010d7c <lwip_htons>
 801ea22:	4603      	mov	r3, r0
 801ea24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d110      	bne.n	801ea4e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ea2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea2e:	89db      	ldrh	r3, [r3, #14]
 801ea30:	4618      	mov	r0, r3
 801ea32:	f7f2 f9a3 	bl	8010d7c <lwip_htons>
 801ea36:	4603      	mov	r3, r0
 801ea38:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	d006      	beq.n	801ea4e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ea40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea42:	3308      	adds	r3, #8
 801ea44:	2214      	movs	r2, #20
 801ea46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ea48:	4618      	mov	r0, r3
 801ea4a:	f000 fe65 	bl	801f718 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ea4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea50:	88db      	ldrh	r3, [r3, #6]
 801ea52:	b29b      	uxth	r3, r3
 801ea54:	f003 0320 	and.w	r3, r3, #32
 801ea58:	2b00      	cmp	r3, #0
 801ea5a:	bf0c      	ite	eq
 801ea5c:	2301      	moveq	r3, #1
 801ea5e:	2300      	movne	r3, #0
 801ea60:	b2db      	uxtb	r3, r3
 801ea62:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ea64:	69fb      	ldr	r3, [r7, #28]
 801ea66:	2b00      	cmp	r3, #0
 801ea68:	d00e      	beq.n	801ea88 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ea6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ea6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ea6e:	4413      	add	r3, r2
 801ea70:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ea72:	8b7a      	ldrh	r2, [r7, #26]
 801ea74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ea76:	429a      	cmp	r2, r3
 801ea78:	f0c0 80a0 	bcc.w	801ebbc <ip4_reass+0x2ac>
 801ea7c:	8b7b      	ldrh	r3, [r7, #26]
 801ea7e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801ea82:	4293      	cmp	r3, r2
 801ea84:	f200 809a 	bhi.w	801ebbc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ea88:	69fa      	ldr	r2, [r7, #28]
 801ea8a:	6879      	ldr	r1, [r7, #4]
 801ea8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ea8e:	f7ff fdd5 	bl	801e63c <ip_reass_chain_frag_into_datagram_and_validate>
 801ea92:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ea94:	697b      	ldr	r3, [r7, #20]
 801ea96:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ea9a:	f000 8091 	beq.w	801ebc0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ea9e:	4b5b      	ldr	r3, [pc, #364]	; (801ec0c <ip4_reass+0x2fc>)
 801eaa0:	881a      	ldrh	r2, [r3, #0]
 801eaa2:	8c3b      	ldrh	r3, [r7, #32]
 801eaa4:	4413      	add	r3, r2
 801eaa6:	b29a      	uxth	r2, r3
 801eaa8:	4b58      	ldr	r3, [pc, #352]	; (801ec0c <ip4_reass+0x2fc>)
 801eaaa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801eaac:	69fb      	ldr	r3, [r7, #28]
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	d00d      	beq.n	801eace <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801eab2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801eab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801eab6:	4413      	add	r3, r2
 801eab8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801eaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eabc:	8a7a      	ldrh	r2, [r7, #18]
 801eabe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801eac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eac2:	7f9b      	ldrb	r3, [r3, #30]
 801eac4:	f043 0301 	orr.w	r3, r3, #1
 801eac8:	b2da      	uxtb	r2, r3
 801eaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eacc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801eace:	697b      	ldr	r3, [r7, #20]
 801ead0:	2b01      	cmp	r3, #1
 801ead2:	d171      	bne.n	801ebb8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ead4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ead6:	8b9b      	ldrh	r3, [r3, #28]
 801ead8:	3314      	adds	r3, #20
 801eada:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801eadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eade:	685b      	ldr	r3, [r3, #4]
 801eae0:	685b      	ldr	r3, [r3, #4]
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801eae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eae8:	685b      	ldr	r3, [r3, #4]
 801eaea:	685b      	ldr	r3, [r3, #4]
 801eaec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801eaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eaf0:	3308      	adds	r3, #8
 801eaf2:	2214      	movs	r2, #20
 801eaf4:	4619      	mov	r1, r3
 801eaf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eaf8:	f000 fe0e 	bl	801f718 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801eafc:	8a3b      	ldrh	r3, [r7, #16]
 801eafe:	4618      	mov	r0, r3
 801eb00:	f7f2 f93c 	bl	8010d7c <lwip_htons>
 801eb04:	4603      	mov	r3, r0
 801eb06:	461a      	mov	r2, r3
 801eb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eb0a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eb0e:	2200      	movs	r2, #0
 801eb10:	719a      	strb	r2, [r3, #6]
 801eb12:	2200      	movs	r2, #0
 801eb14:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801eb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eb18:	2200      	movs	r2, #0
 801eb1a:	729a      	strb	r2, [r3, #10]
 801eb1c:	2200      	movs	r2, #0
 801eb1e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801eb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eb22:	685b      	ldr	r3, [r3, #4]
 801eb24:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801eb26:	e00d      	b.n	801eb44 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801eb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb2a:	685b      	ldr	r3, [r3, #4]
 801eb2c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801eb2e:	2114      	movs	r1, #20
 801eb30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801eb32:	f7f4 fc2b 	bl	801338c <pbuf_remove_header>
      pbuf_cat(p, r);
 801eb36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801eb38:	6878      	ldr	r0, [r7, #4]
 801eb3a:	f7f4 fd7b 	bl	8013634 <pbuf_cat>
      r = iprh->next_pbuf;
 801eb3e:	68fb      	ldr	r3, [r7, #12]
 801eb40:	681b      	ldr	r3, [r3, #0]
 801eb42:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801eb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	d1ee      	bne.n	801eb28 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801eb4a:	4b31      	ldr	r3, [pc, #196]	; (801ec10 <ip4_reass+0x300>)
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eb50:	429a      	cmp	r2, r3
 801eb52:	d102      	bne.n	801eb5a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801eb54:	2300      	movs	r3, #0
 801eb56:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eb58:	e010      	b.n	801eb7c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801eb5a:	4b2d      	ldr	r3, [pc, #180]	; (801ec10 <ip4_reass+0x300>)
 801eb5c:	681b      	ldr	r3, [r3, #0]
 801eb5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eb60:	e007      	b.n	801eb72 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801eb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb64:	681b      	ldr	r3, [r3, #0]
 801eb66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eb68:	429a      	cmp	r2, r3
 801eb6a:	d006      	beq.n	801eb7a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801eb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb6e:	681b      	ldr	r3, [r3, #0]
 801eb70:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d1f4      	bne.n	801eb62 <ip4_reass+0x252>
 801eb78:	e000      	b.n	801eb7c <ip4_reass+0x26c>
          break;
 801eb7a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801eb7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801eb7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801eb80:	f7ff fd2e 	bl	801e5e0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801eb84:	6878      	ldr	r0, [r7, #4]
 801eb86:	f7f4 fd15 	bl	80135b4 <pbuf_clen>
 801eb8a:	4603      	mov	r3, r0
 801eb8c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801eb8e:	4b1f      	ldr	r3, [pc, #124]	; (801ec0c <ip4_reass+0x2fc>)
 801eb90:	881b      	ldrh	r3, [r3, #0]
 801eb92:	8c3a      	ldrh	r2, [r7, #32]
 801eb94:	429a      	cmp	r2, r3
 801eb96:	d906      	bls.n	801eba6 <ip4_reass+0x296>
 801eb98:	4b1e      	ldr	r3, [pc, #120]	; (801ec14 <ip4_reass+0x304>)
 801eb9a:	f240 229b 	movw	r2, #667	; 0x29b
 801eb9e:	491e      	ldr	r1, [pc, #120]	; (801ec18 <ip4_reass+0x308>)
 801eba0:	481e      	ldr	r0, [pc, #120]	; (801ec1c <ip4_reass+0x30c>)
 801eba2:	f000 fea3 	bl	801f8ec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801eba6:	4b19      	ldr	r3, [pc, #100]	; (801ec0c <ip4_reass+0x2fc>)
 801eba8:	881a      	ldrh	r2, [r3, #0]
 801ebaa:	8c3b      	ldrh	r3, [r7, #32]
 801ebac:	1ad3      	subs	r3, r2, r3
 801ebae:	b29a      	uxth	r2, r3
 801ebb0:	4b16      	ldr	r3, [pc, #88]	; (801ec0c <ip4_reass+0x2fc>)
 801ebb2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	e03c      	b.n	801ec32 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801ebb8:	2300      	movs	r3, #0
 801ebba:	e03a      	b.n	801ec32 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801ebbc:	bf00      	nop
 801ebbe:	e000      	b.n	801ebc2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801ebc0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801ebc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	d106      	bne.n	801ebd6 <ip4_reass+0x2c6>
 801ebc8:	4b12      	ldr	r3, [pc, #72]	; (801ec14 <ip4_reass+0x304>)
 801ebca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801ebce:	4914      	ldr	r1, [pc, #80]	; (801ec20 <ip4_reass+0x310>)
 801ebd0:	4812      	ldr	r0, [pc, #72]	; (801ec1c <ip4_reass+0x30c>)
 801ebd2:	f000 fe8b 	bl	801f8ec <iprintf>
  if (ipr->p == NULL) {
 801ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ebd8:	685b      	ldr	r3, [r3, #4]
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d124      	bne.n	801ec28 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801ebde:	4b0c      	ldr	r3, [pc, #48]	; (801ec10 <ip4_reass+0x300>)
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ebe4:	429a      	cmp	r2, r3
 801ebe6:	d006      	beq.n	801ebf6 <ip4_reass+0x2e6>
 801ebe8:	4b0a      	ldr	r3, [pc, #40]	; (801ec14 <ip4_reass+0x304>)
 801ebea:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ebee:	490d      	ldr	r1, [pc, #52]	; (801ec24 <ip4_reass+0x314>)
 801ebf0:	480a      	ldr	r0, [pc, #40]	; (801ec1c <ip4_reass+0x30c>)
 801ebf2:	f000 fe7b 	bl	801f8ec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ebf6:	2100      	movs	r1, #0
 801ebf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ebfa:	f7ff fcf1 	bl	801e5e0 <ip_reass_dequeue_datagram>
 801ebfe:	e014      	b.n	801ec2a <ip4_reass+0x31a>
    goto nullreturn;
 801ec00:	bf00      	nop
 801ec02:	e012      	b.n	801ec2a <ip4_reass+0x31a>
    goto nullreturn;
 801ec04:	bf00      	nop
 801ec06:	e010      	b.n	801ec2a <ip4_reass+0x31a>
      goto nullreturn;
 801ec08:	bf00      	nop
 801ec0a:	e00e      	b.n	801ec2a <ip4_reass+0x31a>
 801ec0c:	20005648 	.word	0x20005648
 801ec10:	20005644 	.word	0x20005644
 801ec14:	080250b0 	.word	0x080250b0
 801ec18:	08025220 	.word	0x08025220
 801ec1c:	080250f8 	.word	0x080250f8
 801ec20:	0802523c 	.word	0x0802523c
 801ec24:	08025248 	.word	0x08025248
  }

nullreturn:
 801ec28:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801ec2a:	6878      	ldr	r0, [r7, #4]
 801ec2c:	f7f4 fc34 	bl	8013498 <pbuf_free>
  return NULL;
 801ec30:	2300      	movs	r3, #0
}
 801ec32:	4618      	mov	r0, r3
 801ec34:	3738      	adds	r7, #56	; 0x38
 801ec36:	46bd      	mov	sp, r7
 801ec38:	bd80      	pop	{r7, pc}
 801ec3a:	bf00      	nop

0801ec3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801ec3c:	b580      	push	{r7, lr}
 801ec3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ec40:	2005      	movs	r0, #5
 801ec42:	f7f3 fd27 	bl	8012694 <memp_malloc>
 801ec46:	4603      	mov	r3, r0
}
 801ec48:	4618      	mov	r0, r3
 801ec4a:	bd80      	pop	{r7, pc}

0801ec4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ec4c:	b580      	push	{r7, lr}
 801ec4e:	b082      	sub	sp, #8
 801ec50:	af00      	add	r7, sp, #0
 801ec52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	2b00      	cmp	r3, #0
 801ec58:	d106      	bne.n	801ec68 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ec5a:	4b07      	ldr	r3, [pc, #28]	; (801ec78 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ec5c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801ec60:	4906      	ldr	r1, [pc, #24]	; (801ec7c <ip_frag_free_pbuf_custom_ref+0x30>)
 801ec62:	4807      	ldr	r0, [pc, #28]	; (801ec80 <ip_frag_free_pbuf_custom_ref+0x34>)
 801ec64:	f000 fe42 	bl	801f8ec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ec68:	6879      	ldr	r1, [r7, #4]
 801ec6a:	2005      	movs	r0, #5
 801ec6c:	f7f3 fd64 	bl	8012738 <memp_free>
}
 801ec70:	bf00      	nop
 801ec72:	3708      	adds	r7, #8
 801ec74:	46bd      	mov	sp, r7
 801ec76:	bd80      	pop	{r7, pc}
 801ec78:	080250b0 	.word	0x080250b0
 801ec7c:	08025268 	.word	0x08025268
 801ec80:	080250f8 	.word	0x080250f8

0801ec84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ec84:	b580      	push	{r7, lr}
 801ec86:	b084      	sub	sp, #16
 801ec88:	af00      	add	r7, sp, #0
 801ec8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ec90:	68fb      	ldr	r3, [r7, #12]
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d106      	bne.n	801eca4 <ipfrag_free_pbuf_custom+0x20>
 801ec96:	4b11      	ldr	r3, [pc, #68]	; (801ecdc <ipfrag_free_pbuf_custom+0x58>)
 801ec98:	f240 22ce 	movw	r2, #718	; 0x2ce
 801ec9c:	4910      	ldr	r1, [pc, #64]	; (801ece0 <ipfrag_free_pbuf_custom+0x5c>)
 801ec9e:	4811      	ldr	r0, [pc, #68]	; (801ece4 <ipfrag_free_pbuf_custom+0x60>)
 801eca0:	f000 fe24 	bl	801f8ec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801eca4:	68fa      	ldr	r2, [r7, #12]
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	429a      	cmp	r2, r3
 801ecaa:	d006      	beq.n	801ecba <ipfrag_free_pbuf_custom+0x36>
 801ecac:	4b0b      	ldr	r3, [pc, #44]	; (801ecdc <ipfrag_free_pbuf_custom+0x58>)
 801ecae:	f240 22cf 	movw	r2, #719	; 0x2cf
 801ecb2:	490d      	ldr	r1, [pc, #52]	; (801ece8 <ipfrag_free_pbuf_custom+0x64>)
 801ecb4:	480b      	ldr	r0, [pc, #44]	; (801ece4 <ipfrag_free_pbuf_custom+0x60>)
 801ecb6:	f000 fe19 	bl	801f8ec <iprintf>
  if (pcr->original != NULL) {
 801ecba:	68fb      	ldr	r3, [r7, #12]
 801ecbc:	695b      	ldr	r3, [r3, #20]
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d004      	beq.n	801eccc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ecc2:	68fb      	ldr	r3, [r7, #12]
 801ecc4:	695b      	ldr	r3, [r3, #20]
 801ecc6:	4618      	mov	r0, r3
 801ecc8:	f7f4 fbe6 	bl	8013498 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801eccc:	68f8      	ldr	r0, [r7, #12]
 801ecce:	f7ff ffbd 	bl	801ec4c <ip_frag_free_pbuf_custom_ref>
}
 801ecd2:	bf00      	nop
 801ecd4:	3710      	adds	r7, #16
 801ecd6:	46bd      	mov	sp, r7
 801ecd8:	bd80      	pop	{r7, pc}
 801ecda:	bf00      	nop
 801ecdc:	080250b0 	.word	0x080250b0
 801ece0:	08025274 	.word	0x08025274
 801ece4:	080250f8 	.word	0x080250f8
 801ece8:	08025280 	.word	0x08025280

0801ecec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ecec:	b580      	push	{r7, lr}
 801ecee:	b094      	sub	sp, #80	; 0x50
 801ecf0:	af02      	add	r7, sp, #8
 801ecf2:	60f8      	str	r0, [r7, #12]
 801ecf4:	60b9      	str	r1, [r7, #8]
 801ecf6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ecf8:	2300      	movs	r3, #0
 801ecfa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ecfe:	68bb      	ldr	r3, [r7, #8]
 801ed00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ed02:	3b14      	subs	r3, #20
 801ed04:	2b00      	cmp	r3, #0
 801ed06:	da00      	bge.n	801ed0a <ip4_frag+0x1e>
 801ed08:	3307      	adds	r3, #7
 801ed0a:	10db      	asrs	r3, r3, #3
 801ed0c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ed0e:	2314      	movs	r3, #20
 801ed10:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ed12:	68fb      	ldr	r3, [r7, #12]
 801ed14:	685b      	ldr	r3, [r3, #4]
 801ed16:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801ed18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ed1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ed1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed1e:	781b      	ldrb	r3, [r3, #0]
 801ed20:	f003 030f 	and.w	r3, r3, #15
 801ed24:	b2db      	uxtb	r3, r3
 801ed26:	009b      	lsls	r3, r3, #2
 801ed28:	b2db      	uxtb	r3, r3
 801ed2a:	2b14      	cmp	r3, #20
 801ed2c:	d002      	beq.n	801ed34 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ed2e:	f06f 0305 	mvn.w	r3, #5
 801ed32:	e110      	b.n	801ef56 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ed34:	68fb      	ldr	r3, [r7, #12]
 801ed36:	895b      	ldrh	r3, [r3, #10]
 801ed38:	2b13      	cmp	r3, #19
 801ed3a:	d809      	bhi.n	801ed50 <ip4_frag+0x64>
 801ed3c:	4b88      	ldr	r3, [pc, #544]	; (801ef60 <ip4_frag+0x274>)
 801ed3e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801ed42:	4988      	ldr	r1, [pc, #544]	; (801ef64 <ip4_frag+0x278>)
 801ed44:	4888      	ldr	r0, [pc, #544]	; (801ef68 <ip4_frag+0x27c>)
 801ed46:	f000 fdd1 	bl	801f8ec <iprintf>
 801ed4a:	f06f 0305 	mvn.w	r3, #5
 801ed4e:	e102      	b.n	801ef56 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ed50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed52:	88db      	ldrh	r3, [r3, #6]
 801ed54:	b29b      	uxth	r3, r3
 801ed56:	4618      	mov	r0, r3
 801ed58:	f7f2 f810 	bl	8010d7c <lwip_htons>
 801ed5c:	4603      	mov	r3, r0
 801ed5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801ed60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ed62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ed66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ed6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ed6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ed70:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ed72:	68fb      	ldr	r3, [r7, #12]
 801ed74:	891b      	ldrh	r3, [r3, #8]
 801ed76:	3b14      	subs	r3, #20
 801ed78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801ed7c:	e0e1      	b.n	801ef42 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ed7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ed80:	00db      	lsls	r3, r3, #3
 801ed82:	b29b      	uxth	r3, r3
 801ed84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ed88:	4293      	cmp	r3, r2
 801ed8a:	bf28      	it	cs
 801ed8c:	4613      	movcs	r3, r2
 801ed8e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ed90:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ed94:	2114      	movs	r1, #20
 801ed96:	200e      	movs	r0, #14
 801ed98:	f7f4 f89a 	bl	8012ed0 <pbuf_alloc>
 801ed9c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801ed9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eda0:	2b00      	cmp	r3, #0
 801eda2:	f000 80d5 	beq.w	801ef50 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801eda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eda8:	895b      	ldrh	r3, [r3, #10]
 801edaa:	2b13      	cmp	r3, #19
 801edac:	d806      	bhi.n	801edbc <ip4_frag+0xd0>
 801edae:	4b6c      	ldr	r3, [pc, #432]	; (801ef60 <ip4_frag+0x274>)
 801edb0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801edb4:	496d      	ldr	r1, [pc, #436]	; (801ef6c <ip4_frag+0x280>)
 801edb6:	486c      	ldr	r0, [pc, #432]	; (801ef68 <ip4_frag+0x27c>)
 801edb8:	f000 fd98 	bl	801f8ec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edbe:	685b      	ldr	r3, [r3, #4]
 801edc0:	2214      	movs	r2, #20
 801edc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801edc4:	4618      	mov	r0, r3
 801edc6:	f000 fca7 	bl	801f718 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801edca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edcc:	685b      	ldr	r3, [r3, #4]
 801edce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801edd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801edd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801edd6:	e064      	b.n	801eea2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801edd8:	68fb      	ldr	r3, [r7, #12]
 801edda:	895a      	ldrh	r2, [r3, #10]
 801eddc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801edde:	1ad3      	subs	r3, r2, r3
 801ede0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ede2:	68fb      	ldr	r3, [r7, #12]
 801ede4:	895b      	ldrh	r3, [r3, #10]
 801ede6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ede8:	429a      	cmp	r2, r3
 801edea:	d906      	bls.n	801edfa <ip4_frag+0x10e>
 801edec:	4b5c      	ldr	r3, [pc, #368]	; (801ef60 <ip4_frag+0x274>)
 801edee:	f240 322d 	movw	r2, #813	; 0x32d
 801edf2:	495f      	ldr	r1, [pc, #380]	; (801ef70 <ip4_frag+0x284>)
 801edf4:	485c      	ldr	r0, [pc, #368]	; (801ef68 <ip4_frag+0x27c>)
 801edf6:	f000 fd79 	bl	801f8ec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801edfa:	8bfa      	ldrh	r2, [r7, #30]
 801edfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ee00:	4293      	cmp	r3, r2
 801ee02:	bf28      	it	cs
 801ee04:	4613      	movcs	r3, r2
 801ee06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ee0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d105      	bne.n	801ee1e <ip4_frag+0x132>
        poff = 0;
 801ee12:	2300      	movs	r3, #0
 801ee14:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ee16:	68fb      	ldr	r3, [r7, #12]
 801ee18:	681b      	ldr	r3, [r3, #0]
 801ee1a:	60fb      	str	r3, [r7, #12]
        continue;
 801ee1c:	e041      	b.n	801eea2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ee1e:	f7ff ff0d 	bl	801ec3c <ip_frag_alloc_pbuf_custom_ref>
 801ee22:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ee24:	69bb      	ldr	r3, [r7, #24]
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	d103      	bne.n	801ee32 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801ee2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ee2c:	f7f4 fb34 	bl	8013498 <pbuf_free>
        goto memerr;
 801ee30:	e08f      	b.n	801ef52 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ee32:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801ee34:	68fb      	ldr	r3, [r7, #12]
 801ee36:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ee38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ee3a:	4413      	add	r3, r2
 801ee3c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801ee40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ee44:	9201      	str	r2, [sp, #4]
 801ee46:	9300      	str	r3, [sp, #0]
 801ee48:	4603      	mov	r3, r0
 801ee4a:	2241      	movs	r2, #65	; 0x41
 801ee4c:	2000      	movs	r0, #0
 801ee4e:	f7f4 f969 	bl	8013124 <pbuf_alloced_custom>
 801ee52:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ee54:	697b      	ldr	r3, [r7, #20]
 801ee56:	2b00      	cmp	r3, #0
 801ee58:	d106      	bne.n	801ee68 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ee5a:	69b8      	ldr	r0, [r7, #24]
 801ee5c:	f7ff fef6 	bl	801ec4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ee60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ee62:	f7f4 fb19 	bl	8013498 <pbuf_free>
        goto memerr;
 801ee66:	e074      	b.n	801ef52 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801ee68:	68f8      	ldr	r0, [r7, #12]
 801ee6a:	f7f4 fbbb 	bl	80135e4 <pbuf_ref>
      pcr->original = p;
 801ee6e:	69bb      	ldr	r3, [r7, #24]
 801ee70:	68fa      	ldr	r2, [r7, #12]
 801ee72:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ee74:	69bb      	ldr	r3, [r7, #24]
 801ee76:	4a3f      	ldr	r2, [pc, #252]	; (801ef74 <ip4_frag+0x288>)
 801ee78:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ee7a:	6979      	ldr	r1, [r7, #20]
 801ee7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ee7e:	f7f4 fbd9 	bl	8013634 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ee82:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ee86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ee8a:	1ad3      	subs	r3, r2, r3
 801ee8c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ee90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ee94:	2b00      	cmp	r3, #0
 801ee96:	d004      	beq.n	801eea2 <ip4_frag+0x1b6>
        poff = 0;
 801ee98:	2300      	movs	r3, #0
 801ee9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ee9c:	68fb      	ldr	r3, [r7, #12]
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801eea2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	d196      	bne.n	801edd8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801eeaa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801eeac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801eeb0:	4413      	add	r3, r2
 801eeb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801eeb4:	68bb      	ldr	r3, [r7, #8]
 801eeb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801eeb8:	f1a3 0213 	sub.w	r2, r3, #19
 801eebc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801eec0:	429a      	cmp	r2, r3
 801eec2:	bfcc      	ite	gt
 801eec4:	2301      	movgt	r3, #1
 801eec6:	2300      	movle	r3, #0
 801eec8:	b2db      	uxtb	r3, r3
 801eeca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801eecc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801eed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eed4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801eed6:	6a3b      	ldr	r3, [r7, #32]
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d002      	beq.n	801eee2 <ip4_frag+0x1f6>
 801eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d003      	beq.n	801eeea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801eee2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801eee4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801eee8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801eeea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801eeec:	4618      	mov	r0, r3
 801eeee:	f7f1 ff45 	bl	8010d7c <lwip_htons>
 801eef2:	4603      	mov	r3, r0
 801eef4:	461a      	mov	r2, r3
 801eef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eef8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801eefa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801eefc:	3314      	adds	r3, #20
 801eefe:	b29b      	uxth	r3, r3
 801ef00:	4618      	mov	r0, r3
 801ef02:	f7f1 ff3b 	bl	8010d7c <lwip_htons>
 801ef06:	4603      	mov	r3, r0
 801ef08:	461a      	mov	r2, r3
 801ef0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef0c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ef0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef10:	2200      	movs	r2, #0
 801ef12:	729a      	strb	r2, [r3, #10]
 801ef14:	2200      	movs	r2, #0
 801ef16:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ef18:	68bb      	ldr	r3, [r7, #8]
 801ef1a:	695b      	ldr	r3, [r3, #20]
 801ef1c:	687a      	ldr	r2, [r7, #4]
 801ef1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ef20:	68b8      	ldr	r0, [r7, #8]
 801ef22:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ef24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ef26:	f7f4 fab7 	bl	8013498 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ef2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ef2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ef30:	1ad3      	subs	r3, r2, r3
 801ef32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801ef36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ef3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ef3c:	4413      	add	r3, r2
 801ef3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801ef42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	f47f af19 	bne.w	801ed7e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	e002      	b.n	801ef56 <ip4_frag+0x26a>
      goto memerr;
 801ef50:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ef52:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ef56:	4618      	mov	r0, r3
 801ef58:	3748      	adds	r7, #72	; 0x48
 801ef5a:	46bd      	mov	sp, r7
 801ef5c:	bd80      	pop	{r7, pc}
 801ef5e:	bf00      	nop
 801ef60:	080250b0 	.word	0x080250b0
 801ef64:	0802528c 	.word	0x0802528c
 801ef68:	080250f8 	.word	0x080250f8
 801ef6c:	080252a8 	.word	0x080252a8
 801ef70:	080252c8 	.word	0x080252c8
 801ef74:	0801ec85 	.word	0x0801ec85

0801ef78 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ef78:	b580      	push	{r7, lr}
 801ef7a:	b086      	sub	sp, #24
 801ef7c:	af00      	add	r7, sp, #0
 801ef7e:	6078      	str	r0, [r7, #4]
 801ef80:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ef82:	230e      	movs	r3, #14
 801ef84:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	895b      	ldrh	r3, [r3, #10]
 801ef8a:	2b0e      	cmp	r3, #14
 801ef8c:	d96e      	bls.n	801f06c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ef8e:	687b      	ldr	r3, [r7, #4]
 801ef90:	7bdb      	ldrb	r3, [r3, #15]
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	d106      	bne.n	801efa4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ef96:	683b      	ldr	r3, [r7, #0]
 801ef98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ef9c:	3301      	adds	r3, #1
 801ef9e:	b2da      	uxtb	r2, r3
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	685b      	ldr	r3, [r3, #4]
 801efa8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801efaa:	693b      	ldr	r3, [r7, #16]
 801efac:	7b1a      	ldrb	r2, [r3, #12]
 801efae:	7b5b      	ldrb	r3, [r3, #13]
 801efb0:	021b      	lsls	r3, r3, #8
 801efb2:	4313      	orrs	r3, r2
 801efb4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801efb6:	693b      	ldr	r3, [r7, #16]
 801efb8:	781b      	ldrb	r3, [r3, #0]
 801efba:	f003 0301 	and.w	r3, r3, #1
 801efbe:	2b00      	cmp	r3, #0
 801efc0:	d023      	beq.n	801f00a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801efc2:	693b      	ldr	r3, [r7, #16]
 801efc4:	781b      	ldrb	r3, [r3, #0]
 801efc6:	2b01      	cmp	r3, #1
 801efc8:	d10f      	bne.n	801efea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801efca:	693b      	ldr	r3, [r7, #16]
 801efcc:	785b      	ldrb	r3, [r3, #1]
 801efce:	2b00      	cmp	r3, #0
 801efd0:	d11b      	bne.n	801f00a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801efd2:	693b      	ldr	r3, [r7, #16]
 801efd4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801efd6:	2b5e      	cmp	r3, #94	; 0x5e
 801efd8:	d117      	bne.n	801f00a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	7b5b      	ldrb	r3, [r3, #13]
 801efde:	f043 0310 	orr.w	r3, r3, #16
 801efe2:	b2da      	uxtb	r2, r3
 801efe4:	687b      	ldr	r3, [r7, #4]
 801efe6:	735a      	strb	r2, [r3, #13]
 801efe8:	e00f      	b.n	801f00a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801efea:	693b      	ldr	r3, [r7, #16]
 801efec:	2206      	movs	r2, #6
 801efee:	4928      	ldr	r1, [pc, #160]	; (801f090 <ethernet_input+0x118>)
 801eff0:	4618      	mov	r0, r3
 801eff2:	f000 fb83 	bl	801f6fc <memcmp>
 801eff6:	4603      	mov	r3, r0
 801eff8:	2b00      	cmp	r3, #0
 801effa:	d106      	bne.n	801f00a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	7b5b      	ldrb	r3, [r3, #13]
 801f000:	f043 0308 	orr.w	r3, r3, #8
 801f004:	b2da      	uxtb	r2, r3
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801f00a:	89fb      	ldrh	r3, [r7, #14]
 801f00c:	2b08      	cmp	r3, #8
 801f00e:	d003      	beq.n	801f018 <ethernet_input+0xa0>
 801f010:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801f014:	d014      	beq.n	801f040 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801f016:	e032      	b.n	801f07e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f018:	683b      	ldr	r3, [r7, #0]
 801f01a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f01e:	f003 0308 	and.w	r3, r3, #8
 801f022:	2b00      	cmp	r3, #0
 801f024:	d024      	beq.n	801f070 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f026:	8afb      	ldrh	r3, [r7, #22]
 801f028:	4619      	mov	r1, r3
 801f02a:	6878      	ldr	r0, [r7, #4]
 801f02c:	f7f4 f9ae 	bl	801338c <pbuf_remove_header>
 801f030:	4603      	mov	r3, r0
 801f032:	2b00      	cmp	r3, #0
 801f034:	d11e      	bne.n	801f074 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801f036:	6839      	ldr	r1, [r7, #0]
 801f038:	6878      	ldr	r0, [r7, #4]
 801f03a:	f7fe fddf 	bl	801dbfc <ip4_input>
      break;
 801f03e:	e013      	b.n	801f068 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f040:	683b      	ldr	r3, [r7, #0]
 801f042:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f046:	f003 0308 	and.w	r3, r3, #8
 801f04a:	2b00      	cmp	r3, #0
 801f04c:	d014      	beq.n	801f078 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f04e:	8afb      	ldrh	r3, [r7, #22]
 801f050:	4619      	mov	r1, r3
 801f052:	6878      	ldr	r0, [r7, #4]
 801f054:	f7f4 f99a 	bl	801338c <pbuf_remove_header>
 801f058:	4603      	mov	r3, r0
 801f05a:	2b00      	cmp	r3, #0
 801f05c:	d10e      	bne.n	801f07c <ethernet_input+0x104>
        etharp_input(p, netif);
 801f05e:	6839      	ldr	r1, [r7, #0]
 801f060:	6878      	ldr	r0, [r7, #4]
 801f062:	f7fd ff7b 	bl	801cf5c <etharp_input>
      break;
 801f066:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801f068:	2300      	movs	r3, #0
 801f06a:	e00c      	b.n	801f086 <ethernet_input+0x10e>
    goto free_and_return;
 801f06c:	bf00      	nop
 801f06e:	e006      	b.n	801f07e <ethernet_input+0x106>
        goto free_and_return;
 801f070:	bf00      	nop
 801f072:	e004      	b.n	801f07e <ethernet_input+0x106>
        goto free_and_return;
 801f074:	bf00      	nop
 801f076:	e002      	b.n	801f07e <ethernet_input+0x106>
        goto free_and_return;
 801f078:	bf00      	nop
 801f07a:	e000      	b.n	801f07e <ethernet_input+0x106>
        goto free_and_return;
 801f07c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801f07e:	6878      	ldr	r0, [r7, #4]
 801f080:	f7f4 fa0a 	bl	8013498 <pbuf_free>
  return ERR_OK;
 801f084:	2300      	movs	r3, #0
}
 801f086:	4618      	mov	r0, r3
 801f088:	3718      	adds	r7, #24
 801f08a:	46bd      	mov	sp, r7
 801f08c:	bd80      	pop	{r7, pc}
 801f08e:	bf00      	nop
 801f090:	080256bc 	.word	0x080256bc

0801f094 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801f094:	b580      	push	{r7, lr}
 801f096:	b086      	sub	sp, #24
 801f098:	af00      	add	r7, sp, #0
 801f09a:	60f8      	str	r0, [r7, #12]
 801f09c:	60b9      	str	r1, [r7, #8]
 801f09e:	607a      	str	r2, [r7, #4]
 801f0a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801f0a2:	8c3b      	ldrh	r3, [r7, #32]
 801f0a4:	4618      	mov	r0, r3
 801f0a6:	f7f1 fe69 	bl	8010d7c <lwip_htons>
 801f0aa:	4603      	mov	r3, r0
 801f0ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801f0ae:	210e      	movs	r1, #14
 801f0b0:	68b8      	ldr	r0, [r7, #8]
 801f0b2:	f7f4 f95b 	bl	801336c <pbuf_add_header>
 801f0b6:	4603      	mov	r3, r0
 801f0b8:	2b00      	cmp	r3, #0
 801f0ba:	d125      	bne.n	801f108 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801f0bc:	68bb      	ldr	r3, [r7, #8]
 801f0be:	685b      	ldr	r3, [r3, #4]
 801f0c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801f0c2:	693b      	ldr	r3, [r7, #16]
 801f0c4:	8afa      	ldrh	r2, [r7, #22]
 801f0c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801f0c8:	693b      	ldr	r3, [r7, #16]
 801f0ca:	2206      	movs	r2, #6
 801f0cc:	6839      	ldr	r1, [r7, #0]
 801f0ce:	4618      	mov	r0, r3
 801f0d0:	f000 fb22 	bl	801f718 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801f0d4:	693b      	ldr	r3, [r7, #16]
 801f0d6:	3306      	adds	r3, #6
 801f0d8:	2206      	movs	r2, #6
 801f0da:	6879      	ldr	r1, [r7, #4]
 801f0dc:	4618      	mov	r0, r3
 801f0de:	f000 fb1b 	bl	801f718 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801f0e2:	68fb      	ldr	r3, [r7, #12]
 801f0e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f0e8:	2b06      	cmp	r3, #6
 801f0ea:	d006      	beq.n	801f0fa <ethernet_output+0x66>
 801f0ec:	4b0a      	ldr	r3, [pc, #40]	; (801f118 <ethernet_output+0x84>)
 801f0ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 801f0f2:	490a      	ldr	r1, [pc, #40]	; (801f11c <ethernet_output+0x88>)
 801f0f4:	480a      	ldr	r0, [pc, #40]	; (801f120 <ethernet_output+0x8c>)
 801f0f6:	f000 fbf9 	bl	801f8ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801f0fa:	68fb      	ldr	r3, [r7, #12]
 801f0fc:	699b      	ldr	r3, [r3, #24]
 801f0fe:	68b9      	ldr	r1, [r7, #8]
 801f100:	68f8      	ldr	r0, [r7, #12]
 801f102:	4798      	blx	r3
 801f104:	4603      	mov	r3, r0
 801f106:	e002      	b.n	801f10e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801f108:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801f10a:	f06f 0301 	mvn.w	r3, #1
}
 801f10e:	4618      	mov	r0, r3
 801f110:	3718      	adds	r7, #24
 801f112:	46bd      	mov	sp, r7
 801f114:	bd80      	pop	{r7, pc}
 801f116:	bf00      	nop
 801f118:	080252d8 	.word	0x080252d8
 801f11c:	08025310 	.word	0x08025310
 801f120:	08025344 	.word	0x08025344

0801f124 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801f124:	b580      	push	{r7, lr}
 801f126:	b082      	sub	sp, #8
 801f128:	af00      	add	r7, sp, #0
 801f12a:	6078      	str	r0, [r7, #4]
 801f12c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801f12e:	683b      	ldr	r3, [r7, #0]
 801f130:	2200      	movs	r2, #0
 801f132:	2104      	movs	r1, #4
 801f134:	4618      	mov	r0, r3
 801f136:	f7eb fb7d 	bl	800a834 <osMessageQueueNew>
 801f13a:	4602      	mov	r2, r0
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	681b      	ldr	r3, [r3, #0]
 801f144:	2b00      	cmp	r3, #0
 801f146:	d102      	bne.n	801f14e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801f148:	f04f 33ff 	mov.w	r3, #4294967295
 801f14c:	e000      	b.n	801f150 <sys_mbox_new+0x2c>

  return ERR_OK;
 801f14e:	2300      	movs	r3, #0
}
 801f150:	4618      	mov	r0, r3
 801f152:	3708      	adds	r7, #8
 801f154:	46bd      	mov	sp, r7
 801f156:	bd80      	pop	{r7, pc}

0801f158 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801f158:	b580      	push	{r7, lr}
 801f15a:	b082      	sub	sp, #8
 801f15c:	af00      	add	r7, sp, #0
 801f15e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	4618      	mov	r0, r3
 801f166:	f7eb fc97 	bl	800aa98 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	681b      	ldr	r3, [r3, #0]
 801f16e:	4618      	mov	r0, r3
 801f170:	f7eb fcd4 	bl	800ab1c <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801f174:	bf00      	nop
 801f176:	3708      	adds	r7, #8
 801f178:	46bd      	mov	sp, r7
 801f17a:	bd80      	pop	{r7, pc}

0801f17c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801f17c:	b580      	push	{r7, lr}
 801f17e:	b084      	sub	sp, #16
 801f180:	af00      	add	r7, sp, #0
 801f182:	6078      	str	r0, [r7, #4]
 801f184:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	6818      	ldr	r0, [r3, #0]
 801f18a:	4639      	mov	r1, r7
 801f18c:	2300      	movs	r3, #0
 801f18e:	2200      	movs	r2, #0
 801f190:	f7eb fbc4 	bl	800a91c <osMessageQueuePut>
 801f194:	4603      	mov	r3, r0
 801f196:	2b00      	cmp	r3, #0
 801f198:	d102      	bne.n	801f1a0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801f19a:	2300      	movs	r3, #0
 801f19c:	73fb      	strb	r3, [r7, #15]
 801f19e:	e001      	b.n	801f1a4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801f1a0:	23ff      	movs	r3, #255	; 0xff
 801f1a2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801f1a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f1a8:	4618      	mov	r0, r3
 801f1aa:	3710      	adds	r7, #16
 801f1ac:	46bd      	mov	sp, r7
 801f1ae:	bd80      	pop	{r7, pc}

0801f1b0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801f1b0:	b580      	push	{r7, lr}
 801f1b2:	b086      	sub	sp, #24
 801f1b4:	af00      	add	r7, sp, #0
 801f1b6:	60f8      	str	r0, [r7, #12]
 801f1b8:	60b9      	str	r1, [r7, #8]
 801f1ba:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801f1bc:	f7ea fdf4 	bl	8009da8 <osKernelGetTickCount>
 801f1c0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	d013      	beq.n	801f1f0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801f1c8:	68fb      	ldr	r3, [r7, #12]
 801f1ca:	6818      	ldr	r0, [r3, #0]
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	2200      	movs	r2, #0
 801f1d0:	68b9      	ldr	r1, [r7, #8]
 801f1d2:	f7eb fc03 	bl	800a9dc <osMessageQueueGet>
 801f1d6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801f1d8:	693b      	ldr	r3, [r7, #16]
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	d105      	bne.n	801f1ea <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801f1de:	f7ea fde3 	bl	8009da8 <osKernelGetTickCount>
 801f1e2:	4602      	mov	r2, r0
 801f1e4:	697b      	ldr	r3, [r7, #20]
 801f1e6:	1ad3      	subs	r3, r2, r3
 801f1e8:	e00f      	b.n	801f20a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f1ea:	f04f 33ff 	mov.w	r3, #4294967295
 801f1ee:	e00c      	b.n	801f20a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801f1f0:	68fb      	ldr	r3, [r7, #12]
 801f1f2:	6818      	ldr	r0, [r3, #0]
 801f1f4:	f04f 33ff 	mov.w	r3, #4294967295
 801f1f8:	2200      	movs	r2, #0
 801f1fa:	68b9      	ldr	r1, [r7, #8]
 801f1fc:	f7eb fbee 	bl	800a9dc <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801f200:	f7ea fdd2 	bl	8009da8 <osKernelGetTickCount>
 801f204:	4602      	mov	r2, r0
 801f206:	697b      	ldr	r3, [r7, #20]
 801f208:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801f20a:	4618      	mov	r0, r3
 801f20c:	3718      	adds	r7, #24
 801f20e:	46bd      	mov	sp, r7
 801f210:	bd80      	pop	{r7, pc}

0801f212 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801f212:	b580      	push	{r7, lr}
 801f214:	b082      	sub	sp, #8
 801f216:	af00      	add	r7, sp, #0
 801f218:	6078      	str	r0, [r7, #4]
 801f21a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	6818      	ldr	r0, [r3, #0]
 801f220:	2300      	movs	r3, #0
 801f222:	2200      	movs	r2, #0
 801f224:	6839      	ldr	r1, [r7, #0]
 801f226:	f7eb fbd9 	bl	800a9dc <osMessageQueueGet>
 801f22a:	4603      	mov	r3, r0
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	d101      	bne.n	801f234 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801f230:	2300      	movs	r3, #0
 801f232:	e001      	b.n	801f238 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801f234:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801f238:	4618      	mov	r0, r3
 801f23a:	3708      	adds	r7, #8
 801f23c:	46bd      	mov	sp, r7
 801f23e:	bd80      	pop	{r7, pc}

0801f240 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801f240:	b480      	push	{r7}
 801f242:	b083      	sub	sp, #12
 801f244:	af00      	add	r7, sp, #0
 801f246:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	681b      	ldr	r3, [r3, #0]
 801f24c:	2b00      	cmp	r3, #0
 801f24e:	d101      	bne.n	801f254 <sys_mbox_valid+0x14>
    return 0;
 801f250:	2300      	movs	r3, #0
 801f252:	e000      	b.n	801f256 <sys_mbox_valid+0x16>
  else
    return 1;
 801f254:	2301      	movs	r3, #1
}
 801f256:	4618      	mov	r0, r3
 801f258:	370c      	adds	r7, #12
 801f25a:	46bd      	mov	sp, r7
 801f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f260:	4770      	bx	lr

0801f262 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801f262:	b480      	push	{r7}
 801f264:	b083      	sub	sp, #12
 801f266:	af00      	add	r7, sp, #0
 801f268:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801f26a:	687b      	ldr	r3, [r7, #4]
 801f26c:	2200      	movs	r2, #0
 801f26e:	601a      	str	r2, [r3, #0]
}
 801f270:	bf00      	nop
 801f272:	370c      	adds	r7, #12
 801f274:	46bd      	mov	sp, r7
 801f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f27a:	4770      	bx	lr

0801f27c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801f27c:	b580      	push	{r7, lr}
 801f27e:	b082      	sub	sp, #8
 801f280:	af00      	add	r7, sp, #0
 801f282:	6078      	str	r0, [r7, #4]
 801f284:	460b      	mov	r3, r1
 801f286:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801f288:	78fb      	ldrb	r3, [r7, #3]
 801f28a:	2200      	movs	r2, #0
 801f28c:	4619      	mov	r1, r3
 801f28e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801f292:	f7eb f98c 	bl	800a5ae <osSemaphoreNew>
 801f296:	4602      	mov	r2, r0
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	681b      	ldr	r3, [r3, #0]
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	d102      	bne.n	801f2aa <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801f2a4:	f04f 33ff 	mov.w	r3, #4294967295
 801f2a8:	e009      	b.n	801f2be <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801f2aa:	78fb      	ldrb	r3, [r7, #3]
 801f2ac:	2b00      	cmp	r3, #0
 801f2ae:	d105      	bne.n	801f2bc <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	681b      	ldr	r3, [r3, #0]
 801f2b4:	2100      	movs	r1, #0
 801f2b6:	4618      	mov	r0, r3
 801f2b8:	f7eb fa02 	bl	800a6c0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801f2bc:	2300      	movs	r3, #0
}
 801f2be:	4618      	mov	r0, r3
 801f2c0:	3708      	adds	r7, #8
 801f2c2:	46bd      	mov	sp, r7
 801f2c4:	bd80      	pop	{r7, pc}

0801f2c6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801f2c6:	b580      	push	{r7, lr}
 801f2c8:	b084      	sub	sp, #16
 801f2ca:	af00      	add	r7, sp, #0
 801f2cc:	6078      	str	r0, [r7, #4]
 801f2ce:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801f2d0:	f7ea fd6a 	bl	8009da8 <osKernelGetTickCount>
 801f2d4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801f2d6:	683b      	ldr	r3, [r7, #0]
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d011      	beq.n	801f300 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801f2dc:	687b      	ldr	r3, [r7, #4]
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	6839      	ldr	r1, [r7, #0]
 801f2e2:	4618      	mov	r0, r3
 801f2e4:	f7eb f9ec 	bl	800a6c0 <osSemaphoreAcquire>
 801f2e8:	4603      	mov	r3, r0
 801f2ea:	2b00      	cmp	r3, #0
 801f2ec:	d105      	bne.n	801f2fa <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801f2ee:	f7ea fd5b 	bl	8009da8 <osKernelGetTickCount>
 801f2f2:	4602      	mov	r2, r0
 801f2f4:	68fb      	ldr	r3, [r7, #12]
 801f2f6:	1ad3      	subs	r3, r2, r3
 801f2f8:	e012      	b.n	801f320 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f2fa:	f04f 33ff 	mov.w	r3, #4294967295
 801f2fe:	e00f      	b.n	801f320 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801f300:	bf00      	nop
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	681b      	ldr	r3, [r3, #0]
 801f306:	f04f 31ff 	mov.w	r1, #4294967295
 801f30a:	4618      	mov	r0, r3
 801f30c:	f7eb f9d8 	bl	800a6c0 <osSemaphoreAcquire>
 801f310:	4603      	mov	r3, r0
 801f312:	2b00      	cmp	r3, #0
 801f314:	d1f5      	bne.n	801f302 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801f316:	f7ea fd47 	bl	8009da8 <osKernelGetTickCount>
 801f31a:	4602      	mov	r2, r0
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801f320:	4618      	mov	r0, r3
 801f322:	3710      	adds	r7, #16
 801f324:	46bd      	mov	sp, r7
 801f326:	bd80      	pop	{r7, pc}

0801f328 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801f328:	b580      	push	{r7, lr}
 801f32a:	b082      	sub	sp, #8
 801f32c:	af00      	add	r7, sp, #0
 801f32e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	4618      	mov	r0, r3
 801f336:	f7eb fa15 	bl	800a764 <osSemaphoreRelease>
}
 801f33a:	bf00      	nop
 801f33c:	3708      	adds	r7, #8
 801f33e:	46bd      	mov	sp, r7
 801f340:	bd80      	pop	{r7, pc}

0801f342 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801f342:	b580      	push	{r7, lr}
 801f344:	b082      	sub	sp, #8
 801f346:	af00      	add	r7, sp, #0
 801f348:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	681b      	ldr	r3, [r3, #0]
 801f34e:	4618      	mov	r0, r3
 801f350:	f7eb fa4c 	bl	800a7ec <osSemaphoreDelete>
}
 801f354:	bf00      	nop
 801f356:	3708      	adds	r7, #8
 801f358:	46bd      	mov	sp, r7
 801f35a:	bd80      	pop	{r7, pc}

0801f35c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801f35c:	b480      	push	{r7}
 801f35e:	b083      	sub	sp, #12
 801f360:	af00      	add	r7, sp, #0
 801f362:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	681b      	ldr	r3, [r3, #0]
 801f368:	2b00      	cmp	r3, #0
 801f36a:	d101      	bne.n	801f370 <sys_sem_valid+0x14>
    return 0;
 801f36c:	2300      	movs	r3, #0
 801f36e:	e000      	b.n	801f372 <sys_sem_valid+0x16>
  else
    return 1;
 801f370:	2301      	movs	r3, #1
}
 801f372:	4618      	mov	r0, r3
 801f374:	370c      	adds	r7, #12
 801f376:	46bd      	mov	sp, r7
 801f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f37c:	4770      	bx	lr

0801f37e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801f37e:	b480      	push	{r7}
 801f380:	b083      	sub	sp, #12
 801f382:	af00      	add	r7, sp, #0
 801f384:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	2200      	movs	r2, #0
 801f38a:	601a      	str	r2, [r3, #0]
}
 801f38c:	bf00      	nop
 801f38e:	370c      	adds	r7, #12
 801f390:	46bd      	mov	sp, r7
 801f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f396:	4770      	bx	lr

0801f398 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801f398:	b580      	push	{r7, lr}
 801f39a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801f39c:	2000      	movs	r0, #0
 801f39e:	f7ea fff8 	bl	800a392 <osMutexNew>
 801f3a2:	4603      	mov	r3, r0
 801f3a4:	4a01      	ldr	r2, [pc, #4]	; (801f3ac <sys_init+0x14>)
 801f3a6:	6013      	str	r3, [r2, #0]
#endif
}
 801f3a8:	bf00      	nop
 801f3aa:	bd80      	pop	{r7, pc}
 801f3ac:	20016be4 	.word	0x20016be4

0801f3b0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801f3b0:	b580      	push	{r7, lr}
 801f3b2:	b082      	sub	sp, #8
 801f3b4:	af00      	add	r7, sp, #0
 801f3b6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801f3b8:	2000      	movs	r0, #0
 801f3ba:	f7ea ffea 	bl	800a392 <osMutexNew>
 801f3be:	4602      	mov	r2, r0
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d102      	bne.n	801f3d2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801f3cc:	f04f 33ff 	mov.w	r3, #4294967295
 801f3d0:	e000      	b.n	801f3d4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801f3d2:	2300      	movs	r3, #0
}
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	3708      	adds	r7, #8
 801f3d8:	46bd      	mov	sp, r7
 801f3da:	bd80      	pop	{r7, pc}

0801f3dc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801f3dc:	b580      	push	{r7, lr}
 801f3de:	b082      	sub	sp, #8
 801f3e0:	af00      	add	r7, sp, #0
 801f3e2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	681b      	ldr	r3, [r3, #0]
 801f3e8:	f04f 31ff 	mov.w	r1, #4294967295
 801f3ec:	4618      	mov	r0, r3
 801f3ee:	f7eb f856 	bl	800a49e <osMutexAcquire>
#endif
}
 801f3f2:	bf00      	nop
 801f3f4:	3708      	adds	r7, #8
 801f3f6:	46bd      	mov	sp, r7
 801f3f8:	bd80      	pop	{r7, pc}

0801f3fa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801f3fa:	b580      	push	{r7, lr}
 801f3fc:	b082      	sub	sp, #8
 801f3fe:	af00      	add	r7, sp, #0
 801f400:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801f402:	687b      	ldr	r3, [r7, #4]
 801f404:	681b      	ldr	r3, [r3, #0]
 801f406:	4618      	mov	r0, r3
 801f408:	f7eb f894 	bl	800a534 <osMutexRelease>
}
 801f40c:	bf00      	nop
 801f40e:	3708      	adds	r7, #8
 801f410:	46bd      	mov	sp, r7
 801f412:	bd80      	pop	{r7, pc}

0801f414 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801f414:	b580      	push	{r7, lr}
 801f416:	b08e      	sub	sp, #56	; 0x38
 801f418:	af00      	add	r7, sp, #0
 801f41a:	60f8      	str	r0, [r7, #12]
 801f41c:	60b9      	str	r1, [r7, #8]
 801f41e:	607a      	str	r2, [r7, #4]
 801f420:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801f422:	f107 0314 	add.w	r3, r7, #20
 801f426:	2224      	movs	r2, #36	; 0x24
 801f428:	2100      	movs	r1, #0
 801f42a:	4618      	mov	r0, r3
 801f42c:	f000 f99c 	bl	801f768 <memset>
 801f430:	68fb      	ldr	r3, [r7, #12]
 801f432:	617b      	str	r3, [r7, #20]
 801f434:	683b      	ldr	r3, [r7, #0]
 801f436:	62bb      	str	r3, [r7, #40]	; 0x28
 801f438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f43a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801f43c:	f107 0314 	add.w	r3, r7, #20
 801f440:	461a      	mov	r2, r3
 801f442:	6879      	ldr	r1, [r7, #4]
 801f444:	68b8      	ldr	r0, [r7, #8]
 801f446:	f7ea fcc4 	bl	8009dd2 <osThreadNew>
 801f44a:	4603      	mov	r3, r0
#endif
}
 801f44c:	4618      	mov	r0, r3
 801f44e:	3738      	adds	r7, #56	; 0x38
 801f450:	46bd      	mov	sp, r7
 801f452:	bd80      	pop	{r7, pc}

0801f454 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801f454:	b580      	push	{r7, lr}
 801f456:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801f458:	4b04      	ldr	r3, [pc, #16]	; (801f46c <sys_arch_protect+0x18>)
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	f04f 31ff 	mov.w	r1, #4294967295
 801f460:	4618      	mov	r0, r3
 801f462:	f7eb f81c 	bl	800a49e <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801f466:	2301      	movs	r3, #1
}
 801f468:	4618      	mov	r0, r3
 801f46a:	bd80      	pop	{r7, pc}
 801f46c:	20016be4 	.word	0x20016be4

0801f470 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801f470:	b580      	push	{r7, lr}
 801f472:	b082      	sub	sp, #8
 801f474:	af00      	add	r7, sp, #0
 801f476:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801f478:	4b04      	ldr	r3, [pc, #16]	; (801f48c <sys_arch_unprotect+0x1c>)
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	4618      	mov	r0, r3
 801f47e:	f7eb f859 	bl	800a534 <osMutexRelease>
}
 801f482:	bf00      	nop
 801f484:	3708      	adds	r7, #8
 801f486:	46bd      	mov	sp, r7
 801f488:	bd80      	pop	{r7, pc}
 801f48a:	bf00      	nop
 801f48c:	20016be4 	.word	0x20016be4

0801f490 <calloc>:
 801f490:	4b02      	ldr	r3, [pc, #8]	; (801f49c <calloc+0xc>)
 801f492:	460a      	mov	r2, r1
 801f494:	4601      	mov	r1, r0
 801f496:	6818      	ldr	r0, [r3, #0]
 801f498:	f000 b96e 	b.w	801f778 <_calloc_r>
 801f49c:	2000034c 	.word	0x2000034c

0801f4a0 <std>:
 801f4a0:	2300      	movs	r3, #0
 801f4a2:	b510      	push	{r4, lr}
 801f4a4:	4604      	mov	r4, r0
 801f4a6:	e9c0 3300 	strd	r3, r3, [r0]
 801f4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f4ae:	6083      	str	r3, [r0, #8]
 801f4b0:	8181      	strh	r1, [r0, #12]
 801f4b2:	6643      	str	r3, [r0, #100]	; 0x64
 801f4b4:	81c2      	strh	r2, [r0, #14]
 801f4b6:	6183      	str	r3, [r0, #24]
 801f4b8:	4619      	mov	r1, r3
 801f4ba:	2208      	movs	r2, #8
 801f4bc:	305c      	adds	r0, #92	; 0x5c
 801f4be:	f000 f953 	bl	801f768 <memset>
 801f4c2:	4b05      	ldr	r3, [pc, #20]	; (801f4d8 <std+0x38>)
 801f4c4:	6263      	str	r3, [r4, #36]	; 0x24
 801f4c6:	4b05      	ldr	r3, [pc, #20]	; (801f4dc <std+0x3c>)
 801f4c8:	62a3      	str	r3, [r4, #40]	; 0x28
 801f4ca:	4b05      	ldr	r3, [pc, #20]	; (801f4e0 <std+0x40>)
 801f4cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f4ce:	4b05      	ldr	r3, [pc, #20]	; (801f4e4 <std+0x44>)
 801f4d0:	6224      	str	r4, [r4, #32]
 801f4d2:	6323      	str	r3, [r4, #48]	; 0x30
 801f4d4:	bd10      	pop	{r4, pc}
 801f4d6:	bf00      	nop
 801f4d8:	0801fc19 	.word	0x0801fc19
 801f4dc:	0801fc3b 	.word	0x0801fc3b
 801f4e0:	0801fc73 	.word	0x0801fc73
 801f4e4:	0801fc97 	.word	0x0801fc97

0801f4e8 <_cleanup_r>:
 801f4e8:	4901      	ldr	r1, [pc, #4]	; (801f4f0 <_cleanup_r+0x8>)
 801f4ea:	f000 b8af 	b.w	801f64c <_fwalk_reent>
 801f4ee:	bf00      	nop
 801f4f0:	08020029 	.word	0x08020029

0801f4f4 <__sfmoreglue>:
 801f4f4:	b570      	push	{r4, r5, r6, lr}
 801f4f6:	1e4a      	subs	r2, r1, #1
 801f4f8:	2568      	movs	r5, #104	; 0x68
 801f4fa:	4355      	muls	r5, r2
 801f4fc:	460e      	mov	r6, r1
 801f4fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f502:	f000 f999 	bl	801f838 <_malloc_r>
 801f506:	4604      	mov	r4, r0
 801f508:	b140      	cbz	r0, 801f51c <__sfmoreglue+0x28>
 801f50a:	2100      	movs	r1, #0
 801f50c:	e9c0 1600 	strd	r1, r6, [r0]
 801f510:	300c      	adds	r0, #12
 801f512:	60a0      	str	r0, [r4, #8]
 801f514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f518:	f000 f926 	bl	801f768 <memset>
 801f51c:	4620      	mov	r0, r4
 801f51e:	bd70      	pop	{r4, r5, r6, pc}

0801f520 <__sfp_lock_acquire>:
 801f520:	4801      	ldr	r0, [pc, #4]	; (801f528 <__sfp_lock_acquire+0x8>)
 801f522:	f000 b8d8 	b.w	801f6d6 <__retarget_lock_acquire_recursive>
 801f526:	bf00      	nop
 801f528:	20016bf0 	.word	0x20016bf0

0801f52c <__sfp_lock_release>:
 801f52c:	4801      	ldr	r0, [pc, #4]	; (801f534 <__sfp_lock_release+0x8>)
 801f52e:	f000 b8d3 	b.w	801f6d8 <__retarget_lock_release_recursive>
 801f532:	bf00      	nop
 801f534:	20016bf0 	.word	0x20016bf0

0801f538 <__sinit_lock_acquire>:
 801f538:	4801      	ldr	r0, [pc, #4]	; (801f540 <__sinit_lock_acquire+0x8>)
 801f53a:	f000 b8cc 	b.w	801f6d6 <__retarget_lock_acquire_recursive>
 801f53e:	bf00      	nop
 801f540:	20016beb 	.word	0x20016beb

0801f544 <__sinit_lock_release>:
 801f544:	4801      	ldr	r0, [pc, #4]	; (801f54c <__sinit_lock_release+0x8>)
 801f546:	f000 b8c7 	b.w	801f6d8 <__retarget_lock_release_recursive>
 801f54a:	bf00      	nop
 801f54c:	20016beb 	.word	0x20016beb

0801f550 <__sinit>:
 801f550:	b510      	push	{r4, lr}
 801f552:	4604      	mov	r4, r0
 801f554:	f7ff fff0 	bl	801f538 <__sinit_lock_acquire>
 801f558:	69a3      	ldr	r3, [r4, #24]
 801f55a:	b11b      	cbz	r3, 801f564 <__sinit+0x14>
 801f55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f560:	f7ff bff0 	b.w	801f544 <__sinit_lock_release>
 801f564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f568:	6523      	str	r3, [r4, #80]	; 0x50
 801f56a:	4b13      	ldr	r3, [pc, #76]	; (801f5b8 <__sinit+0x68>)
 801f56c:	4a13      	ldr	r2, [pc, #76]	; (801f5bc <__sinit+0x6c>)
 801f56e:	681b      	ldr	r3, [r3, #0]
 801f570:	62a2      	str	r2, [r4, #40]	; 0x28
 801f572:	42a3      	cmp	r3, r4
 801f574:	bf04      	itt	eq
 801f576:	2301      	moveq	r3, #1
 801f578:	61a3      	streq	r3, [r4, #24]
 801f57a:	4620      	mov	r0, r4
 801f57c:	f000 f820 	bl	801f5c0 <__sfp>
 801f580:	6060      	str	r0, [r4, #4]
 801f582:	4620      	mov	r0, r4
 801f584:	f000 f81c 	bl	801f5c0 <__sfp>
 801f588:	60a0      	str	r0, [r4, #8]
 801f58a:	4620      	mov	r0, r4
 801f58c:	f000 f818 	bl	801f5c0 <__sfp>
 801f590:	2200      	movs	r2, #0
 801f592:	60e0      	str	r0, [r4, #12]
 801f594:	2104      	movs	r1, #4
 801f596:	6860      	ldr	r0, [r4, #4]
 801f598:	f7ff ff82 	bl	801f4a0 <std>
 801f59c:	68a0      	ldr	r0, [r4, #8]
 801f59e:	2201      	movs	r2, #1
 801f5a0:	2109      	movs	r1, #9
 801f5a2:	f7ff ff7d 	bl	801f4a0 <std>
 801f5a6:	68e0      	ldr	r0, [r4, #12]
 801f5a8:	2202      	movs	r2, #2
 801f5aa:	2112      	movs	r1, #18
 801f5ac:	f7ff ff78 	bl	801f4a0 <std>
 801f5b0:	2301      	movs	r3, #1
 801f5b2:	61a3      	str	r3, [r4, #24]
 801f5b4:	e7d2      	b.n	801f55c <__sinit+0xc>
 801f5b6:	bf00      	nop
 801f5b8:	0802582c 	.word	0x0802582c
 801f5bc:	0801f4e9 	.word	0x0801f4e9

0801f5c0 <__sfp>:
 801f5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5c2:	4607      	mov	r7, r0
 801f5c4:	f7ff ffac 	bl	801f520 <__sfp_lock_acquire>
 801f5c8:	4b1e      	ldr	r3, [pc, #120]	; (801f644 <__sfp+0x84>)
 801f5ca:	681e      	ldr	r6, [r3, #0]
 801f5cc:	69b3      	ldr	r3, [r6, #24]
 801f5ce:	b913      	cbnz	r3, 801f5d6 <__sfp+0x16>
 801f5d0:	4630      	mov	r0, r6
 801f5d2:	f7ff ffbd 	bl	801f550 <__sinit>
 801f5d6:	3648      	adds	r6, #72	; 0x48
 801f5d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f5dc:	3b01      	subs	r3, #1
 801f5de:	d503      	bpl.n	801f5e8 <__sfp+0x28>
 801f5e0:	6833      	ldr	r3, [r6, #0]
 801f5e2:	b30b      	cbz	r3, 801f628 <__sfp+0x68>
 801f5e4:	6836      	ldr	r6, [r6, #0]
 801f5e6:	e7f7      	b.n	801f5d8 <__sfp+0x18>
 801f5e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f5ec:	b9d5      	cbnz	r5, 801f624 <__sfp+0x64>
 801f5ee:	4b16      	ldr	r3, [pc, #88]	; (801f648 <__sfp+0x88>)
 801f5f0:	60e3      	str	r3, [r4, #12]
 801f5f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f5f6:	6665      	str	r5, [r4, #100]	; 0x64
 801f5f8:	f000 f86c 	bl	801f6d4 <__retarget_lock_init_recursive>
 801f5fc:	f7ff ff96 	bl	801f52c <__sfp_lock_release>
 801f600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f608:	6025      	str	r5, [r4, #0]
 801f60a:	61a5      	str	r5, [r4, #24]
 801f60c:	2208      	movs	r2, #8
 801f60e:	4629      	mov	r1, r5
 801f610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f614:	f000 f8a8 	bl	801f768 <memset>
 801f618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f61c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f620:	4620      	mov	r0, r4
 801f622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f624:	3468      	adds	r4, #104	; 0x68
 801f626:	e7d9      	b.n	801f5dc <__sfp+0x1c>
 801f628:	2104      	movs	r1, #4
 801f62a:	4638      	mov	r0, r7
 801f62c:	f7ff ff62 	bl	801f4f4 <__sfmoreglue>
 801f630:	4604      	mov	r4, r0
 801f632:	6030      	str	r0, [r6, #0]
 801f634:	2800      	cmp	r0, #0
 801f636:	d1d5      	bne.n	801f5e4 <__sfp+0x24>
 801f638:	f7ff ff78 	bl	801f52c <__sfp_lock_release>
 801f63c:	230c      	movs	r3, #12
 801f63e:	603b      	str	r3, [r7, #0]
 801f640:	e7ee      	b.n	801f620 <__sfp+0x60>
 801f642:	bf00      	nop
 801f644:	0802582c 	.word	0x0802582c
 801f648:	ffff0001 	.word	0xffff0001

0801f64c <_fwalk_reent>:
 801f64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f650:	4606      	mov	r6, r0
 801f652:	4688      	mov	r8, r1
 801f654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f658:	2700      	movs	r7, #0
 801f65a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f65e:	f1b9 0901 	subs.w	r9, r9, #1
 801f662:	d505      	bpl.n	801f670 <_fwalk_reent+0x24>
 801f664:	6824      	ldr	r4, [r4, #0]
 801f666:	2c00      	cmp	r4, #0
 801f668:	d1f7      	bne.n	801f65a <_fwalk_reent+0xe>
 801f66a:	4638      	mov	r0, r7
 801f66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f670:	89ab      	ldrh	r3, [r5, #12]
 801f672:	2b01      	cmp	r3, #1
 801f674:	d907      	bls.n	801f686 <_fwalk_reent+0x3a>
 801f676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f67a:	3301      	adds	r3, #1
 801f67c:	d003      	beq.n	801f686 <_fwalk_reent+0x3a>
 801f67e:	4629      	mov	r1, r5
 801f680:	4630      	mov	r0, r6
 801f682:	47c0      	blx	r8
 801f684:	4307      	orrs	r7, r0
 801f686:	3568      	adds	r5, #104	; 0x68
 801f688:	e7e9      	b.n	801f65e <_fwalk_reent+0x12>
	...

0801f68c <__libc_init_array>:
 801f68c:	b570      	push	{r4, r5, r6, lr}
 801f68e:	4d0d      	ldr	r5, [pc, #52]	; (801f6c4 <__libc_init_array+0x38>)
 801f690:	4c0d      	ldr	r4, [pc, #52]	; (801f6c8 <__libc_init_array+0x3c>)
 801f692:	1b64      	subs	r4, r4, r5
 801f694:	10a4      	asrs	r4, r4, #2
 801f696:	2600      	movs	r6, #0
 801f698:	42a6      	cmp	r6, r4
 801f69a:	d109      	bne.n	801f6b0 <__libc_init_array+0x24>
 801f69c:	4d0b      	ldr	r5, [pc, #44]	; (801f6cc <__libc_init_array+0x40>)
 801f69e:	4c0c      	ldr	r4, [pc, #48]	; (801f6d0 <__libc_init_array+0x44>)
 801f6a0:	f001 faa4 	bl	8020bec <_init>
 801f6a4:	1b64      	subs	r4, r4, r5
 801f6a6:	10a4      	asrs	r4, r4, #2
 801f6a8:	2600      	movs	r6, #0
 801f6aa:	42a6      	cmp	r6, r4
 801f6ac:	d105      	bne.n	801f6ba <__libc_init_array+0x2e>
 801f6ae:	bd70      	pop	{r4, r5, r6, pc}
 801f6b0:	f855 3b04 	ldr.w	r3, [r5], #4
 801f6b4:	4798      	blx	r3
 801f6b6:	3601      	adds	r6, #1
 801f6b8:	e7ee      	b.n	801f698 <__libc_init_array+0xc>
 801f6ba:	f855 3b04 	ldr.w	r3, [r5], #4
 801f6be:	4798      	blx	r3
 801f6c0:	3601      	adds	r6, #1
 801f6c2:	e7f2      	b.n	801f6aa <__libc_init_array+0x1e>
 801f6c4:	08025920 	.word	0x08025920
 801f6c8:	08025920 	.word	0x08025920
 801f6cc:	08025920 	.word	0x08025920
 801f6d0:	08025924 	.word	0x08025924

0801f6d4 <__retarget_lock_init_recursive>:
 801f6d4:	4770      	bx	lr

0801f6d6 <__retarget_lock_acquire_recursive>:
 801f6d6:	4770      	bx	lr

0801f6d8 <__retarget_lock_release_recursive>:
 801f6d8:	4770      	bx	lr
	...

0801f6dc <malloc>:
 801f6dc:	4b02      	ldr	r3, [pc, #8]	; (801f6e8 <malloc+0xc>)
 801f6de:	4601      	mov	r1, r0
 801f6e0:	6818      	ldr	r0, [r3, #0]
 801f6e2:	f000 b8a9 	b.w	801f838 <_malloc_r>
 801f6e6:	bf00      	nop
 801f6e8:	2000034c 	.word	0x2000034c

0801f6ec <free>:
 801f6ec:	4b02      	ldr	r3, [pc, #8]	; (801f6f8 <free+0xc>)
 801f6ee:	4601      	mov	r1, r0
 801f6f0:	6818      	ldr	r0, [r3, #0]
 801f6f2:	f000 b851 	b.w	801f798 <_free_r>
 801f6f6:	bf00      	nop
 801f6f8:	2000034c 	.word	0x2000034c

0801f6fc <memcmp>:
 801f6fc:	b530      	push	{r4, r5, lr}
 801f6fe:	3901      	subs	r1, #1
 801f700:	2400      	movs	r4, #0
 801f702:	42a2      	cmp	r2, r4
 801f704:	d101      	bne.n	801f70a <memcmp+0xe>
 801f706:	2000      	movs	r0, #0
 801f708:	e005      	b.n	801f716 <memcmp+0x1a>
 801f70a:	5d03      	ldrb	r3, [r0, r4]
 801f70c:	3401      	adds	r4, #1
 801f70e:	5d0d      	ldrb	r5, [r1, r4]
 801f710:	42ab      	cmp	r3, r5
 801f712:	d0f6      	beq.n	801f702 <memcmp+0x6>
 801f714:	1b58      	subs	r0, r3, r5
 801f716:	bd30      	pop	{r4, r5, pc}

0801f718 <memcpy>:
 801f718:	440a      	add	r2, r1
 801f71a:	4291      	cmp	r1, r2
 801f71c:	f100 33ff 	add.w	r3, r0, #4294967295
 801f720:	d100      	bne.n	801f724 <memcpy+0xc>
 801f722:	4770      	bx	lr
 801f724:	b510      	push	{r4, lr}
 801f726:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f72a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f72e:	4291      	cmp	r1, r2
 801f730:	d1f9      	bne.n	801f726 <memcpy+0xe>
 801f732:	bd10      	pop	{r4, pc}

0801f734 <memmove>:
 801f734:	4288      	cmp	r0, r1
 801f736:	b510      	push	{r4, lr}
 801f738:	eb01 0402 	add.w	r4, r1, r2
 801f73c:	d902      	bls.n	801f744 <memmove+0x10>
 801f73e:	4284      	cmp	r4, r0
 801f740:	4623      	mov	r3, r4
 801f742:	d807      	bhi.n	801f754 <memmove+0x20>
 801f744:	1e43      	subs	r3, r0, #1
 801f746:	42a1      	cmp	r1, r4
 801f748:	d008      	beq.n	801f75c <memmove+0x28>
 801f74a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f74e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f752:	e7f8      	b.n	801f746 <memmove+0x12>
 801f754:	4402      	add	r2, r0
 801f756:	4601      	mov	r1, r0
 801f758:	428a      	cmp	r2, r1
 801f75a:	d100      	bne.n	801f75e <memmove+0x2a>
 801f75c:	bd10      	pop	{r4, pc}
 801f75e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f766:	e7f7      	b.n	801f758 <memmove+0x24>

0801f768 <memset>:
 801f768:	4402      	add	r2, r0
 801f76a:	4603      	mov	r3, r0
 801f76c:	4293      	cmp	r3, r2
 801f76e:	d100      	bne.n	801f772 <memset+0xa>
 801f770:	4770      	bx	lr
 801f772:	f803 1b01 	strb.w	r1, [r3], #1
 801f776:	e7f9      	b.n	801f76c <memset+0x4>

0801f778 <_calloc_r>:
 801f778:	b513      	push	{r0, r1, r4, lr}
 801f77a:	434a      	muls	r2, r1
 801f77c:	4611      	mov	r1, r2
 801f77e:	9201      	str	r2, [sp, #4]
 801f780:	f000 f85a 	bl	801f838 <_malloc_r>
 801f784:	4604      	mov	r4, r0
 801f786:	b118      	cbz	r0, 801f790 <_calloc_r+0x18>
 801f788:	9a01      	ldr	r2, [sp, #4]
 801f78a:	2100      	movs	r1, #0
 801f78c:	f7ff ffec 	bl	801f768 <memset>
 801f790:	4620      	mov	r0, r4
 801f792:	b002      	add	sp, #8
 801f794:	bd10      	pop	{r4, pc}
	...

0801f798 <_free_r>:
 801f798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f79a:	2900      	cmp	r1, #0
 801f79c:	d048      	beq.n	801f830 <_free_r+0x98>
 801f79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f7a2:	9001      	str	r0, [sp, #4]
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	f1a1 0404 	sub.w	r4, r1, #4
 801f7aa:	bfb8      	it	lt
 801f7ac:	18e4      	addlt	r4, r4, r3
 801f7ae:	f000 fd11 	bl	80201d4 <__malloc_lock>
 801f7b2:	4a20      	ldr	r2, [pc, #128]	; (801f834 <_free_r+0x9c>)
 801f7b4:	9801      	ldr	r0, [sp, #4]
 801f7b6:	6813      	ldr	r3, [r2, #0]
 801f7b8:	4615      	mov	r5, r2
 801f7ba:	b933      	cbnz	r3, 801f7ca <_free_r+0x32>
 801f7bc:	6063      	str	r3, [r4, #4]
 801f7be:	6014      	str	r4, [r2, #0]
 801f7c0:	b003      	add	sp, #12
 801f7c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f7c6:	f000 bd0b 	b.w	80201e0 <__malloc_unlock>
 801f7ca:	42a3      	cmp	r3, r4
 801f7cc:	d90b      	bls.n	801f7e6 <_free_r+0x4e>
 801f7ce:	6821      	ldr	r1, [r4, #0]
 801f7d0:	1862      	adds	r2, r4, r1
 801f7d2:	4293      	cmp	r3, r2
 801f7d4:	bf04      	itt	eq
 801f7d6:	681a      	ldreq	r2, [r3, #0]
 801f7d8:	685b      	ldreq	r3, [r3, #4]
 801f7da:	6063      	str	r3, [r4, #4]
 801f7dc:	bf04      	itt	eq
 801f7de:	1852      	addeq	r2, r2, r1
 801f7e0:	6022      	streq	r2, [r4, #0]
 801f7e2:	602c      	str	r4, [r5, #0]
 801f7e4:	e7ec      	b.n	801f7c0 <_free_r+0x28>
 801f7e6:	461a      	mov	r2, r3
 801f7e8:	685b      	ldr	r3, [r3, #4]
 801f7ea:	b10b      	cbz	r3, 801f7f0 <_free_r+0x58>
 801f7ec:	42a3      	cmp	r3, r4
 801f7ee:	d9fa      	bls.n	801f7e6 <_free_r+0x4e>
 801f7f0:	6811      	ldr	r1, [r2, #0]
 801f7f2:	1855      	adds	r5, r2, r1
 801f7f4:	42a5      	cmp	r5, r4
 801f7f6:	d10b      	bne.n	801f810 <_free_r+0x78>
 801f7f8:	6824      	ldr	r4, [r4, #0]
 801f7fa:	4421      	add	r1, r4
 801f7fc:	1854      	adds	r4, r2, r1
 801f7fe:	42a3      	cmp	r3, r4
 801f800:	6011      	str	r1, [r2, #0]
 801f802:	d1dd      	bne.n	801f7c0 <_free_r+0x28>
 801f804:	681c      	ldr	r4, [r3, #0]
 801f806:	685b      	ldr	r3, [r3, #4]
 801f808:	6053      	str	r3, [r2, #4]
 801f80a:	4421      	add	r1, r4
 801f80c:	6011      	str	r1, [r2, #0]
 801f80e:	e7d7      	b.n	801f7c0 <_free_r+0x28>
 801f810:	d902      	bls.n	801f818 <_free_r+0x80>
 801f812:	230c      	movs	r3, #12
 801f814:	6003      	str	r3, [r0, #0]
 801f816:	e7d3      	b.n	801f7c0 <_free_r+0x28>
 801f818:	6825      	ldr	r5, [r4, #0]
 801f81a:	1961      	adds	r1, r4, r5
 801f81c:	428b      	cmp	r3, r1
 801f81e:	bf04      	itt	eq
 801f820:	6819      	ldreq	r1, [r3, #0]
 801f822:	685b      	ldreq	r3, [r3, #4]
 801f824:	6063      	str	r3, [r4, #4]
 801f826:	bf04      	itt	eq
 801f828:	1949      	addeq	r1, r1, r5
 801f82a:	6021      	streq	r1, [r4, #0]
 801f82c:	6054      	str	r4, [r2, #4]
 801f82e:	e7c7      	b.n	801f7c0 <_free_r+0x28>
 801f830:	b003      	add	sp, #12
 801f832:	bd30      	pop	{r4, r5, pc}
 801f834:	2000564c 	.word	0x2000564c

0801f838 <_malloc_r>:
 801f838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f83a:	1ccd      	adds	r5, r1, #3
 801f83c:	f025 0503 	bic.w	r5, r5, #3
 801f840:	3508      	adds	r5, #8
 801f842:	2d0c      	cmp	r5, #12
 801f844:	bf38      	it	cc
 801f846:	250c      	movcc	r5, #12
 801f848:	2d00      	cmp	r5, #0
 801f84a:	4606      	mov	r6, r0
 801f84c:	db01      	blt.n	801f852 <_malloc_r+0x1a>
 801f84e:	42a9      	cmp	r1, r5
 801f850:	d903      	bls.n	801f85a <_malloc_r+0x22>
 801f852:	230c      	movs	r3, #12
 801f854:	6033      	str	r3, [r6, #0]
 801f856:	2000      	movs	r0, #0
 801f858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f85a:	f000 fcbb 	bl	80201d4 <__malloc_lock>
 801f85e:	4921      	ldr	r1, [pc, #132]	; (801f8e4 <_malloc_r+0xac>)
 801f860:	680a      	ldr	r2, [r1, #0]
 801f862:	4614      	mov	r4, r2
 801f864:	b99c      	cbnz	r4, 801f88e <_malloc_r+0x56>
 801f866:	4f20      	ldr	r7, [pc, #128]	; (801f8e8 <_malloc_r+0xb0>)
 801f868:	683b      	ldr	r3, [r7, #0]
 801f86a:	b923      	cbnz	r3, 801f876 <_malloc_r+0x3e>
 801f86c:	4621      	mov	r1, r4
 801f86e:	4630      	mov	r0, r6
 801f870:	f000 f9a2 	bl	801fbb8 <_sbrk_r>
 801f874:	6038      	str	r0, [r7, #0]
 801f876:	4629      	mov	r1, r5
 801f878:	4630      	mov	r0, r6
 801f87a:	f000 f99d 	bl	801fbb8 <_sbrk_r>
 801f87e:	1c43      	adds	r3, r0, #1
 801f880:	d123      	bne.n	801f8ca <_malloc_r+0x92>
 801f882:	230c      	movs	r3, #12
 801f884:	6033      	str	r3, [r6, #0]
 801f886:	4630      	mov	r0, r6
 801f888:	f000 fcaa 	bl	80201e0 <__malloc_unlock>
 801f88c:	e7e3      	b.n	801f856 <_malloc_r+0x1e>
 801f88e:	6823      	ldr	r3, [r4, #0]
 801f890:	1b5b      	subs	r3, r3, r5
 801f892:	d417      	bmi.n	801f8c4 <_malloc_r+0x8c>
 801f894:	2b0b      	cmp	r3, #11
 801f896:	d903      	bls.n	801f8a0 <_malloc_r+0x68>
 801f898:	6023      	str	r3, [r4, #0]
 801f89a:	441c      	add	r4, r3
 801f89c:	6025      	str	r5, [r4, #0]
 801f89e:	e004      	b.n	801f8aa <_malloc_r+0x72>
 801f8a0:	6863      	ldr	r3, [r4, #4]
 801f8a2:	42a2      	cmp	r2, r4
 801f8a4:	bf0c      	ite	eq
 801f8a6:	600b      	streq	r3, [r1, #0]
 801f8a8:	6053      	strne	r3, [r2, #4]
 801f8aa:	4630      	mov	r0, r6
 801f8ac:	f000 fc98 	bl	80201e0 <__malloc_unlock>
 801f8b0:	f104 000b 	add.w	r0, r4, #11
 801f8b4:	1d23      	adds	r3, r4, #4
 801f8b6:	f020 0007 	bic.w	r0, r0, #7
 801f8ba:	1ac2      	subs	r2, r0, r3
 801f8bc:	d0cc      	beq.n	801f858 <_malloc_r+0x20>
 801f8be:	1a1b      	subs	r3, r3, r0
 801f8c0:	50a3      	str	r3, [r4, r2]
 801f8c2:	e7c9      	b.n	801f858 <_malloc_r+0x20>
 801f8c4:	4622      	mov	r2, r4
 801f8c6:	6864      	ldr	r4, [r4, #4]
 801f8c8:	e7cc      	b.n	801f864 <_malloc_r+0x2c>
 801f8ca:	1cc4      	adds	r4, r0, #3
 801f8cc:	f024 0403 	bic.w	r4, r4, #3
 801f8d0:	42a0      	cmp	r0, r4
 801f8d2:	d0e3      	beq.n	801f89c <_malloc_r+0x64>
 801f8d4:	1a21      	subs	r1, r4, r0
 801f8d6:	4630      	mov	r0, r6
 801f8d8:	f000 f96e 	bl	801fbb8 <_sbrk_r>
 801f8dc:	3001      	adds	r0, #1
 801f8de:	d1dd      	bne.n	801f89c <_malloc_r+0x64>
 801f8e0:	e7cf      	b.n	801f882 <_malloc_r+0x4a>
 801f8e2:	bf00      	nop
 801f8e4:	2000564c 	.word	0x2000564c
 801f8e8:	20005650 	.word	0x20005650

0801f8ec <iprintf>:
 801f8ec:	b40f      	push	{r0, r1, r2, r3}
 801f8ee:	4b0a      	ldr	r3, [pc, #40]	; (801f918 <iprintf+0x2c>)
 801f8f0:	b513      	push	{r0, r1, r4, lr}
 801f8f2:	681c      	ldr	r4, [r3, #0]
 801f8f4:	b124      	cbz	r4, 801f900 <iprintf+0x14>
 801f8f6:	69a3      	ldr	r3, [r4, #24]
 801f8f8:	b913      	cbnz	r3, 801f900 <iprintf+0x14>
 801f8fa:	4620      	mov	r0, r4
 801f8fc:	f7ff fe28 	bl	801f550 <__sinit>
 801f900:	ab05      	add	r3, sp, #20
 801f902:	9a04      	ldr	r2, [sp, #16]
 801f904:	68a1      	ldr	r1, [r4, #8]
 801f906:	9301      	str	r3, [sp, #4]
 801f908:	4620      	mov	r0, r4
 801f90a:	f000 fdf5 	bl	80204f8 <_vfiprintf_r>
 801f90e:	b002      	add	sp, #8
 801f910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f914:	b004      	add	sp, #16
 801f916:	4770      	bx	lr
 801f918:	2000034c 	.word	0x2000034c

0801f91c <_puts_r>:
 801f91c:	b570      	push	{r4, r5, r6, lr}
 801f91e:	460e      	mov	r6, r1
 801f920:	4605      	mov	r5, r0
 801f922:	b118      	cbz	r0, 801f92c <_puts_r+0x10>
 801f924:	6983      	ldr	r3, [r0, #24]
 801f926:	b90b      	cbnz	r3, 801f92c <_puts_r+0x10>
 801f928:	f7ff fe12 	bl	801f550 <__sinit>
 801f92c:	69ab      	ldr	r3, [r5, #24]
 801f92e:	68ac      	ldr	r4, [r5, #8]
 801f930:	b913      	cbnz	r3, 801f938 <_puts_r+0x1c>
 801f932:	4628      	mov	r0, r5
 801f934:	f7ff fe0c 	bl	801f550 <__sinit>
 801f938:	4b2c      	ldr	r3, [pc, #176]	; (801f9ec <_puts_r+0xd0>)
 801f93a:	429c      	cmp	r4, r3
 801f93c:	d120      	bne.n	801f980 <_puts_r+0x64>
 801f93e:	686c      	ldr	r4, [r5, #4]
 801f940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f942:	07db      	lsls	r3, r3, #31
 801f944:	d405      	bmi.n	801f952 <_puts_r+0x36>
 801f946:	89a3      	ldrh	r3, [r4, #12]
 801f948:	0598      	lsls	r0, r3, #22
 801f94a:	d402      	bmi.n	801f952 <_puts_r+0x36>
 801f94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f94e:	f7ff fec2 	bl	801f6d6 <__retarget_lock_acquire_recursive>
 801f952:	89a3      	ldrh	r3, [r4, #12]
 801f954:	0719      	lsls	r1, r3, #28
 801f956:	d51d      	bpl.n	801f994 <_puts_r+0x78>
 801f958:	6923      	ldr	r3, [r4, #16]
 801f95a:	b1db      	cbz	r3, 801f994 <_puts_r+0x78>
 801f95c:	3e01      	subs	r6, #1
 801f95e:	68a3      	ldr	r3, [r4, #8]
 801f960:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f964:	3b01      	subs	r3, #1
 801f966:	60a3      	str	r3, [r4, #8]
 801f968:	bb39      	cbnz	r1, 801f9ba <_puts_r+0x9e>
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	da38      	bge.n	801f9e0 <_puts_r+0xc4>
 801f96e:	4622      	mov	r2, r4
 801f970:	210a      	movs	r1, #10
 801f972:	4628      	mov	r0, r5
 801f974:	f000 f9d2 	bl	801fd1c <__swbuf_r>
 801f978:	3001      	adds	r0, #1
 801f97a:	d011      	beq.n	801f9a0 <_puts_r+0x84>
 801f97c:	250a      	movs	r5, #10
 801f97e:	e011      	b.n	801f9a4 <_puts_r+0x88>
 801f980:	4b1b      	ldr	r3, [pc, #108]	; (801f9f0 <_puts_r+0xd4>)
 801f982:	429c      	cmp	r4, r3
 801f984:	d101      	bne.n	801f98a <_puts_r+0x6e>
 801f986:	68ac      	ldr	r4, [r5, #8]
 801f988:	e7da      	b.n	801f940 <_puts_r+0x24>
 801f98a:	4b1a      	ldr	r3, [pc, #104]	; (801f9f4 <_puts_r+0xd8>)
 801f98c:	429c      	cmp	r4, r3
 801f98e:	bf08      	it	eq
 801f990:	68ec      	ldreq	r4, [r5, #12]
 801f992:	e7d5      	b.n	801f940 <_puts_r+0x24>
 801f994:	4621      	mov	r1, r4
 801f996:	4628      	mov	r0, r5
 801f998:	f000 fa24 	bl	801fde4 <__swsetup_r>
 801f99c:	2800      	cmp	r0, #0
 801f99e:	d0dd      	beq.n	801f95c <_puts_r+0x40>
 801f9a0:	f04f 35ff 	mov.w	r5, #4294967295
 801f9a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f9a6:	07da      	lsls	r2, r3, #31
 801f9a8:	d405      	bmi.n	801f9b6 <_puts_r+0x9a>
 801f9aa:	89a3      	ldrh	r3, [r4, #12]
 801f9ac:	059b      	lsls	r3, r3, #22
 801f9ae:	d402      	bmi.n	801f9b6 <_puts_r+0x9a>
 801f9b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f9b2:	f7ff fe91 	bl	801f6d8 <__retarget_lock_release_recursive>
 801f9b6:	4628      	mov	r0, r5
 801f9b8:	bd70      	pop	{r4, r5, r6, pc}
 801f9ba:	2b00      	cmp	r3, #0
 801f9bc:	da04      	bge.n	801f9c8 <_puts_r+0xac>
 801f9be:	69a2      	ldr	r2, [r4, #24]
 801f9c0:	429a      	cmp	r2, r3
 801f9c2:	dc06      	bgt.n	801f9d2 <_puts_r+0xb6>
 801f9c4:	290a      	cmp	r1, #10
 801f9c6:	d004      	beq.n	801f9d2 <_puts_r+0xb6>
 801f9c8:	6823      	ldr	r3, [r4, #0]
 801f9ca:	1c5a      	adds	r2, r3, #1
 801f9cc:	6022      	str	r2, [r4, #0]
 801f9ce:	7019      	strb	r1, [r3, #0]
 801f9d0:	e7c5      	b.n	801f95e <_puts_r+0x42>
 801f9d2:	4622      	mov	r2, r4
 801f9d4:	4628      	mov	r0, r5
 801f9d6:	f000 f9a1 	bl	801fd1c <__swbuf_r>
 801f9da:	3001      	adds	r0, #1
 801f9dc:	d1bf      	bne.n	801f95e <_puts_r+0x42>
 801f9de:	e7df      	b.n	801f9a0 <_puts_r+0x84>
 801f9e0:	6823      	ldr	r3, [r4, #0]
 801f9e2:	250a      	movs	r5, #10
 801f9e4:	1c5a      	adds	r2, r3, #1
 801f9e6:	6022      	str	r2, [r4, #0]
 801f9e8:	701d      	strb	r5, [r3, #0]
 801f9ea:	e7db      	b.n	801f9a4 <_puts_r+0x88>
 801f9ec:	080257ec 	.word	0x080257ec
 801f9f0:	0802580c 	.word	0x0802580c
 801f9f4:	080257cc 	.word	0x080257cc

0801f9f8 <puts>:
 801f9f8:	4b02      	ldr	r3, [pc, #8]	; (801fa04 <puts+0xc>)
 801f9fa:	4601      	mov	r1, r0
 801f9fc:	6818      	ldr	r0, [r3, #0]
 801f9fe:	f7ff bf8d 	b.w	801f91c <_puts_r>
 801fa02:	bf00      	nop
 801fa04:	2000034c 	.word	0x2000034c

0801fa08 <srand>:
 801fa08:	b538      	push	{r3, r4, r5, lr}
 801fa0a:	4b10      	ldr	r3, [pc, #64]	; (801fa4c <srand+0x44>)
 801fa0c:	681d      	ldr	r5, [r3, #0]
 801fa0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801fa10:	4604      	mov	r4, r0
 801fa12:	b9b3      	cbnz	r3, 801fa42 <srand+0x3a>
 801fa14:	2018      	movs	r0, #24
 801fa16:	f7ff fe61 	bl	801f6dc <malloc>
 801fa1a:	4602      	mov	r2, r0
 801fa1c:	63a8      	str	r0, [r5, #56]	; 0x38
 801fa1e:	b920      	cbnz	r0, 801fa2a <srand+0x22>
 801fa20:	4b0b      	ldr	r3, [pc, #44]	; (801fa50 <srand+0x48>)
 801fa22:	480c      	ldr	r0, [pc, #48]	; (801fa54 <srand+0x4c>)
 801fa24:	2142      	movs	r1, #66	; 0x42
 801fa26:	f000 fa4b 	bl	801fec0 <__assert_func>
 801fa2a:	490b      	ldr	r1, [pc, #44]	; (801fa58 <srand+0x50>)
 801fa2c:	4b0b      	ldr	r3, [pc, #44]	; (801fa5c <srand+0x54>)
 801fa2e:	e9c0 1300 	strd	r1, r3, [r0]
 801fa32:	4b0b      	ldr	r3, [pc, #44]	; (801fa60 <srand+0x58>)
 801fa34:	6083      	str	r3, [r0, #8]
 801fa36:	230b      	movs	r3, #11
 801fa38:	8183      	strh	r3, [r0, #12]
 801fa3a:	2100      	movs	r1, #0
 801fa3c:	2001      	movs	r0, #1
 801fa3e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801fa42:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801fa44:	2200      	movs	r2, #0
 801fa46:	611c      	str	r4, [r3, #16]
 801fa48:	615a      	str	r2, [r3, #20]
 801fa4a:	bd38      	pop	{r3, r4, r5, pc}
 801fa4c:	2000034c 	.word	0x2000034c
 801fa50:	08025830 	.word	0x08025830
 801fa54:	08025847 	.word	0x08025847
 801fa58:	abcd330e 	.word	0xabcd330e
 801fa5c:	e66d1234 	.word	0xe66d1234
 801fa60:	0005deec 	.word	0x0005deec

0801fa64 <rand>:
 801fa64:	4b17      	ldr	r3, [pc, #92]	; (801fac4 <rand+0x60>)
 801fa66:	b510      	push	{r4, lr}
 801fa68:	681c      	ldr	r4, [r3, #0]
 801fa6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fa6c:	b9b3      	cbnz	r3, 801fa9c <rand+0x38>
 801fa6e:	2018      	movs	r0, #24
 801fa70:	f7ff fe34 	bl	801f6dc <malloc>
 801fa74:	63a0      	str	r0, [r4, #56]	; 0x38
 801fa76:	b928      	cbnz	r0, 801fa84 <rand+0x20>
 801fa78:	4602      	mov	r2, r0
 801fa7a:	4b13      	ldr	r3, [pc, #76]	; (801fac8 <rand+0x64>)
 801fa7c:	4813      	ldr	r0, [pc, #76]	; (801facc <rand+0x68>)
 801fa7e:	214e      	movs	r1, #78	; 0x4e
 801fa80:	f000 fa1e 	bl	801fec0 <__assert_func>
 801fa84:	4a12      	ldr	r2, [pc, #72]	; (801fad0 <rand+0x6c>)
 801fa86:	4b13      	ldr	r3, [pc, #76]	; (801fad4 <rand+0x70>)
 801fa88:	e9c0 2300 	strd	r2, r3, [r0]
 801fa8c:	4b12      	ldr	r3, [pc, #72]	; (801fad8 <rand+0x74>)
 801fa8e:	6083      	str	r3, [r0, #8]
 801fa90:	230b      	movs	r3, #11
 801fa92:	8183      	strh	r3, [r0, #12]
 801fa94:	2201      	movs	r2, #1
 801fa96:	2300      	movs	r3, #0
 801fa98:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801fa9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fa9e:	480f      	ldr	r0, [pc, #60]	; (801fadc <rand+0x78>)
 801faa0:	690a      	ldr	r2, [r1, #16]
 801faa2:	694b      	ldr	r3, [r1, #20]
 801faa4:	4c0e      	ldr	r4, [pc, #56]	; (801fae0 <rand+0x7c>)
 801faa6:	4350      	muls	r0, r2
 801faa8:	fb04 0003 	mla	r0, r4, r3, r0
 801faac:	fba2 3404 	umull	r3, r4, r2, r4
 801fab0:	1c5a      	adds	r2, r3, #1
 801fab2:	4404      	add	r4, r0
 801fab4:	f144 0000 	adc.w	r0, r4, #0
 801fab8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801fabc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801fac0:	bd10      	pop	{r4, pc}
 801fac2:	bf00      	nop
 801fac4:	2000034c 	.word	0x2000034c
 801fac8:	08025830 	.word	0x08025830
 801facc:	08025847 	.word	0x08025847
 801fad0:	abcd330e 	.word	0xabcd330e
 801fad4:	e66d1234 	.word	0xe66d1234
 801fad8:	0005deec 	.word	0x0005deec
 801fadc:	5851f42d 	.word	0x5851f42d
 801fae0:	4c957f2d 	.word	0x4c957f2d

0801fae4 <cleanup_glue>:
 801fae4:	b538      	push	{r3, r4, r5, lr}
 801fae6:	460c      	mov	r4, r1
 801fae8:	6809      	ldr	r1, [r1, #0]
 801faea:	4605      	mov	r5, r0
 801faec:	b109      	cbz	r1, 801faf2 <cleanup_glue+0xe>
 801faee:	f7ff fff9 	bl	801fae4 <cleanup_glue>
 801faf2:	4621      	mov	r1, r4
 801faf4:	4628      	mov	r0, r5
 801faf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fafa:	f7ff be4d 	b.w	801f798 <_free_r>
	...

0801fb00 <_reclaim_reent>:
 801fb00:	4b2c      	ldr	r3, [pc, #176]	; (801fbb4 <_reclaim_reent+0xb4>)
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	4283      	cmp	r3, r0
 801fb06:	b570      	push	{r4, r5, r6, lr}
 801fb08:	4604      	mov	r4, r0
 801fb0a:	d051      	beq.n	801fbb0 <_reclaim_reent+0xb0>
 801fb0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801fb0e:	b143      	cbz	r3, 801fb22 <_reclaim_reent+0x22>
 801fb10:	68db      	ldr	r3, [r3, #12]
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d14a      	bne.n	801fbac <_reclaim_reent+0xac>
 801fb16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb18:	6819      	ldr	r1, [r3, #0]
 801fb1a:	b111      	cbz	r1, 801fb22 <_reclaim_reent+0x22>
 801fb1c:	4620      	mov	r0, r4
 801fb1e:	f7ff fe3b 	bl	801f798 <_free_r>
 801fb22:	6961      	ldr	r1, [r4, #20]
 801fb24:	b111      	cbz	r1, 801fb2c <_reclaim_reent+0x2c>
 801fb26:	4620      	mov	r0, r4
 801fb28:	f7ff fe36 	bl	801f798 <_free_r>
 801fb2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801fb2e:	b111      	cbz	r1, 801fb36 <_reclaim_reent+0x36>
 801fb30:	4620      	mov	r0, r4
 801fb32:	f7ff fe31 	bl	801f798 <_free_r>
 801fb36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fb38:	b111      	cbz	r1, 801fb40 <_reclaim_reent+0x40>
 801fb3a:	4620      	mov	r0, r4
 801fb3c:	f7ff fe2c 	bl	801f798 <_free_r>
 801fb40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801fb42:	b111      	cbz	r1, 801fb4a <_reclaim_reent+0x4a>
 801fb44:	4620      	mov	r0, r4
 801fb46:	f7ff fe27 	bl	801f798 <_free_r>
 801fb4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fb4c:	b111      	cbz	r1, 801fb54 <_reclaim_reent+0x54>
 801fb4e:	4620      	mov	r0, r4
 801fb50:	f7ff fe22 	bl	801f798 <_free_r>
 801fb54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801fb56:	b111      	cbz	r1, 801fb5e <_reclaim_reent+0x5e>
 801fb58:	4620      	mov	r0, r4
 801fb5a:	f7ff fe1d 	bl	801f798 <_free_r>
 801fb5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801fb60:	b111      	cbz	r1, 801fb68 <_reclaim_reent+0x68>
 801fb62:	4620      	mov	r0, r4
 801fb64:	f7ff fe18 	bl	801f798 <_free_r>
 801fb68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fb6a:	b111      	cbz	r1, 801fb72 <_reclaim_reent+0x72>
 801fb6c:	4620      	mov	r0, r4
 801fb6e:	f7ff fe13 	bl	801f798 <_free_r>
 801fb72:	69a3      	ldr	r3, [r4, #24]
 801fb74:	b1e3      	cbz	r3, 801fbb0 <_reclaim_reent+0xb0>
 801fb76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fb78:	4620      	mov	r0, r4
 801fb7a:	4798      	blx	r3
 801fb7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801fb7e:	b1b9      	cbz	r1, 801fbb0 <_reclaim_reent+0xb0>
 801fb80:	4620      	mov	r0, r4
 801fb82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fb86:	f7ff bfad 	b.w	801fae4 <cleanup_glue>
 801fb8a:	5949      	ldr	r1, [r1, r5]
 801fb8c:	b941      	cbnz	r1, 801fba0 <_reclaim_reent+0xa0>
 801fb8e:	3504      	adds	r5, #4
 801fb90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb92:	2d80      	cmp	r5, #128	; 0x80
 801fb94:	68d9      	ldr	r1, [r3, #12]
 801fb96:	d1f8      	bne.n	801fb8a <_reclaim_reent+0x8a>
 801fb98:	4620      	mov	r0, r4
 801fb9a:	f7ff fdfd 	bl	801f798 <_free_r>
 801fb9e:	e7ba      	b.n	801fb16 <_reclaim_reent+0x16>
 801fba0:	680e      	ldr	r6, [r1, #0]
 801fba2:	4620      	mov	r0, r4
 801fba4:	f7ff fdf8 	bl	801f798 <_free_r>
 801fba8:	4631      	mov	r1, r6
 801fbaa:	e7ef      	b.n	801fb8c <_reclaim_reent+0x8c>
 801fbac:	2500      	movs	r5, #0
 801fbae:	e7ef      	b.n	801fb90 <_reclaim_reent+0x90>
 801fbb0:	bd70      	pop	{r4, r5, r6, pc}
 801fbb2:	bf00      	nop
 801fbb4:	2000034c 	.word	0x2000034c

0801fbb8 <_sbrk_r>:
 801fbb8:	b538      	push	{r3, r4, r5, lr}
 801fbba:	4d06      	ldr	r5, [pc, #24]	; (801fbd4 <_sbrk_r+0x1c>)
 801fbbc:	2300      	movs	r3, #0
 801fbbe:	4604      	mov	r4, r0
 801fbc0:	4608      	mov	r0, r1
 801fbc2:	602b      	str	r3, [r5, #0]
 801fbc4:	f7e1 fe34 	bl	8001830 <_sbrk>
 801fbc8:	1c43      	adds	r3, r0, #1
 801fbca:	d102      	bne.n	801fbd2 <_sbrk_r+0x1a>
 801fbcc:	682b      	ldr	r3, [r5, #0]
 801fbce:	b103      	cbz	r3, 801fbd2 <_sbrk_r+0x1a>
 801fbd0:	6023      	str	r3, [r4, #0]
 801fbd2:	bd38      	pop	{r3, r4, r5, pc}
 801fbd4:	20016be0 	.word	0x20016be0

0801fbd8 <siprintf>:
 801fbd8:	b40e      	push	{r1, r2, r3}
 801fbda:	b500      	push	{lr}
 801fbdc:	b09c      	sub	sp, #112	; 0x70
 801fbde:	ab1d      	add	r3, sp, #116	; 0x74
 801fbe0:	9002      	str	r0, [sp, #8]
 801fbe2:	9006      	str	r0, [sp, #24]
 801fbe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fbe8:	4809      	ldr	r0, [pc, #36]	; (801fc10 <siprintf+0x38>)
 801fbea:	9107      	str	r1, [sp, #28]
 801fbec:	9104      	str	r1, [sp, #16]
 801fbee:	4909      	ldr	r1, [pc, #36]	; (801fc14 <siprintf+0x3c>)
 801fbf0:	f853 2b04 	ldr.w	r2, [r3], #4
 801fbf4:	9105      	str	r1, [sp, #20]
 801fbf6:	6800      	ldr	r0, [r0, #0]
 801fbf8:	9301      	str	r3, [sp, #4]
 801fbfa:	a902      	add	r1, sp, #8
 801fbfc:	f000 fb52 	bl	80202a4 <_svfiprintf_r>
 801fc00:	9b02      	ldr	r3, [sp, #8]
 801fc02:	2200      	movs	r2, #0
 801fc04:	701a      	strb	r2, [r3, #0]
 801fc06:	b01c      	add	sp, #112	; 0x70
 801fc08:	f85d eb04 	ldr.w	lr, [sp], #4
 801fc0c:	b003      	add	sp, #12
 801fc0e:	4770      	bx	lr
 801fc10:	2000034c 	.word	0x2000034c
 801fc14:	ffff0208 	.word	0xffff0208

0801fc18 <__sread>:
 801fc18:	b510      	push	{r4, lr}
 801fc1a:	460c      	mov	r4, r1
 801fc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc20:	f000 ff2e 	bl	8020a80 <_read_r>
 801fc24:	2800      	cmp	r0, #0
 801fc26:	bfab      	itete	ge
 801fc28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fc2a:	89a3      	ldrhlt	r3, [r4, #12]
 801fc2c:	181b      	addge	r3, r3, r0
 801fc2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fc32:	bfac      	ite	ge
 801fc34:	6563      	strge	r3, [r4, #84]	; 0x54
 801fc36:	81a3      	strhlt	r3, [r4, #12]
 801fc38:	bd10      	pop	{r4, pc}

0801fc3a <__swrite>:
 801fc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc3e:	461f      	mov	r7, r3
 801fc40:	898b      	ldrh	r3, [r1, #12]
 801fc42:	05db      	lsls	r3, r3, #23
 801fc44:	4605      	mov	r5, r0
 801fc46:	460c      	mov	r4, r1
 801fc48:	4616      	mov	r6, r2
 801fc4a:	d505      	bpl.n	801fc58 <__swrite+0x1e>
 801fc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc50:	2302      	movs	r3, #2
 801fc52:	2200      	movs	r2, #0
 801fc54:	f000 fa48 	bl	80200e8 <_lseek_r>
 801fc58:	89a3      	ldrh	r3, [r4, #12]
 801fc5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fc5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fc62:	81a3      	strh	r3, [r4, #12]
 801fc64:	4632      	mov	r2, r6
 801fc66:	463b      	mov	r3, r7
 801fc68:	4628      	mov	r0, r5
 801fc6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fc6e:	f000 b8a7 	b.w	801fdc0 <_write_r>

0801fc72 <__sseek>:
 801fc72:	b510      	push	{r4, lr}
 801fc74:	460c      	mov	r4, r1
 801fc76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc7a:	f000 fa35 	bl	80200e8 <_lseek_r>
 801fc7e:	1c43      	adds	r3, r0, #1
 801fc80:	89a3      	ldrh	r3, [r4, #12]
 801fc82:	bf15      	itete	ne
 801fc84:	6560      	strne	r0, [r4, #84]	; 0x54
 801fc86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fc8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fc8e:	81a3      	strheq	r3, [r4, #12]
 801fc90:	bf18      	it	ne
 801fc92:	81a3      	strhne	r3, [r4, #12]
 801fc94:	bd10      	pop	{r4, pc}

0801fc96 <__sclose>:
 801fc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc9a:	f000 b92f 	b.w	801fefc <_close_r>

0801fc9e <strchr>:
 801fc9e:	b2c9      	uxtb	r1, r1
 801fca0:	4603      	mov	r3, r0
 801fca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fca6:	b11a      	cbz	r2, 801fcb0 <strchr+0x12>
 801fca8:	428a      	cmp	r2, r1
 801fcaa:	d1f9      	bne.n	801fca0 <strchr+0x2>
 801fcac:	4618      	mov	r0, r3
 801fcae:	4770      	bx	lr
 801fcb0:	2900      	cmp	r1, #0
 801fcb2:	bf18      	it	ne
 801fcb4:	2300      	movne	r3, #0
 801fcb6:	e7f9      	b.n	801fcac <strchr+0xe>

0801fcb8 <strstr>:
 801fcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fcba:	780c      	ldrb	r4, [r1, #0]
 801fcbc:	b164      	cbz	r4, 801fcd8 <strstr+0x20>
 801fcbe:	4603      	mov	r3, r0
 801fcc0:	781a      	ldrb	r2, [r3, #0]
 801fcc2:	4618      	mov	r0, r3
 801fcc4:	1c5e      	adds	r6, r3, #1
 801fcc6:	b90a      	cbnz	r2, 801fccc <strstr+0x14>
 801fcc8:	4610      	mov	r0, r2
 801fcca:	e005      	b.n	801fcd8 <strstr+0x20>
 801fccc:	4294      	cmp	r4, r2
 801fcce:	d108      	bne.n	801fce2 <strstr+0x2a>
 801fcd0:	460d      	mov	r5, r1
 801fcd2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801fcd6:	b902      	cbnz	r2, 801fcda <strstr+0x22>
 801fcd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fcda:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801fcde:	4297      	cmp	r7, r2
 801fce0:	d0f7      	beq.n	801fcd2 <strstr+0x1a>
 801fce2:	4633      	mov	r3, r6
 801fce4:	e7ec      	b.n	801fcc0 <strstr+0x8>
	...

0801fce8 <time>:
 801fce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fcea:	4b0b      	ldr	r3, [pc, #44]	; (801fd18 <time+0x30>)
 801fcec:	2200      	movs	r2, #0
 801fcee:	4669      	mov	r1, sp
 801fcf0:	4604      	mov	r4, r0
 801fcf2:	6818      	ldr	r0, [r3, #0]
 801fcf4:	f000 f9e6 	bl	80200c4 <_gettimeofday_r>
 801fcf8:	2800      	cmp	r0, #0
 801fcfa:	bfbe      	ittt	lt
 801fcfc:	f04f 32ff 	movlt.w	r2, #4294967295
 801fd00:	f04f 33ff 	movlt.w	r3, #4294967295
 801fd04:	e9cd 2300 	strdlt	r2, r3, [sp]
 801fd08:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fd0c:	b10c      	cbz	r4, 801fd12 <time+0x2a>
 801fd0e:	e9c4 0100 	strd	r0, r1, [r4]
 801fd12:	b004      	add	sp, #16
 801fd14:	bd10      	pop	{r4, pc}
 801fd16:	bf00      	nop
 801fd18:	2000034c 	.word	0x2000034c

0801fd1c <__swbuf_r>:
 801fd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd1e:	460e      	mov	r6, r1
 801fd20:	4614      	mov	r4, r2
 801fd22:	4605      	mov	r5, r0
 801fd24:	b118      	cbz	r0, 801fd2e <__swbuf_r+0x12>
 801fd26:	6983      	ldr	r3, [r0, #24]
 801fd28:	b90b      	cbnz	r3, 801fd2e <__swbuf_r+0x12>
 801fd2a:	f7ff fc11 	bl	801f550 <__sinit>
 801fd2e:	4b21      	ldr	r3, [pc, #132]	; (801fdb4 <__swbuf_r+0x98>)
 801fd30:	429c      	cmp	r4, r3
 801fd32:	d12b      	bne.n	801fd8c <__swbuf_r+0x70>
 801fd34:	686c      	ldr	r4, [r5, #4]
 801fd36:	69a3      	ldr	r3, [r4, #24]
 801fd38:	60a3      	str	r3, [r4, #8]
 801fd3a:	89a3      	ldrh	r3, [r4, #12]
 801fd3c:	071a      	lsls	r2, r3, #28
 801fd3e:	d52f      	bpl.n	801fda0 <__swbuf_r+0x84>
 801fd40:	6923      	ldr	r3, [r4, #16]
 801fd42:	b36b      	cbz	r3, 801fda0 <__swbuf_r+0x84>
 801fd44:	6923      	ldr	r3, [r4, #16]
 801fd46:	6820      	ldr	r0, [r4, #0]
 801fd48:	1ac0      	subs	r0, r0, r3
 801fd4a:	6963      	ldr	r3, [r4, #20]
 801fd4c:	b2f6      	uxtb	r6, r6
 801fd4e:	4283      	cmp	r3, r0
 801fd50:	4637      	mov	r7, r6
 801fd52:	dc04      	bgt.n	801fd5e <__swbuf_r+0x42>
 801fd54:	4621      	mov	r1, r4
 801fd56:	4628      	mov	r0, r5
 801fd58:	f000 f966 	bl	8020028 <_fflush_r>
 801fd5c:	bb30      	cbnz	r0, 801fdac <__swbuf_r+0x90>
 801fd5e:	68a3      	ldr	r3, [r4, #8]
 801fd60:	3b01      	subs	r3, #1
 801fd62:	60a3      	str	r3, [r4, #8]
 801fd64:	6823      	ldr	r3, [r4, #0]
 801fd66:	1c5a      	adds	r2, r3, #1
 801fd68:	6022      	str	r2, [r4, #0]
 801fd6a:	701e      	strb	r6, [r3, #0]
 801fd6c:	6963      	ldr	r3, [r4, #20]
 801fd6e:	3001      	adds	r0, #1
 801fd70:	4283      	cmp	r3, r0
 801fd72:	d004      	beq.n	801fd7e <__swbuf_r+0x62>
 801fd74:	89a3      	ldrh	r3, [r4, #12]
 801fd76:	07db      	lsls	r3, r3, #31
 801fd78:	d506      	bpl.n	801fd88 <__swbuf_r+0x6c>
 801fd7a:	2e0a      	cmp	r6, #10
 801fd7c:	d104      	bne.n	801fd88 <__swbuf_r+0x6c>
 801fd7e:	4621      	mov	r1, r4
 801fd80:	4628      	mov	r0, r5
 801fd82:	f000 f951 	bl	8020028 <_fflush_r>
 801fd86:	b988      	cbnz	r0, 801fdac <__swbuf_r+0x90>
 801fd88:	4638      	mov	r0, r7
 801fd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd8c:	4b0a      	ldr	r3, [pc, #40]	; (801fdb8 <__swbuf_r+0x9c>)
 801fd8e:	429c      	cmp	r4, r3
 801fd90:	d101      	bne.n	801fd96 <__swbuf_r+0x7a>
 801fd92:	68ac      	ldr	r4, [r5, #8]
 801fd94:	e7cf      	b.n	801fd36 <__swbuf_r+0x1a>
 801fd96:	4b09      	ldr	r3, [pc, #36]	; (801fdbc <__swbuf_r+0xa0>)
 801fd98:	429c      	cmp	r4, r3
 801fd9a:	bf08      	it	eq
 801fd9c:	68ec      	ldreq	r4, [r5, #12]
 801fd9e:	e7ca      	b.n	801fd36 <__swbuf_r+0x1a>
 801fda0:	4621      	mov	r1, r4
 801fda2:	4628      	mov	r0, r5
 801fda4:	f000 f81e 	bl	801fde4 <__swsetup_r>
 801fda8:	2800      	cmp	r0, #0
 801fdaa:	d0cb      	beq.n	801fd44 <__swbuf_r+0x28>
 801fdac:	f04f 37ff 	mov.w	r7, #4294967295
 801fdb0:	e7ea      	b.n	801fd88 <__swbuf_r+0x6c>
 801fdb2:	bf00      	nop
 801fdb4:	080257ec 	.word	0x080257ec
 801fdb8:	0802580c 	.word	0x0802580c
 801fdbc:	080257cc 	.word	0x080257cc

0801fdc0 <_write_r>:
 801fdc0:	b538      	push	{r3, r4, r5, lr}
 801fdc2:	4d07      	ldr	r5, [pc, #28]	; (801fde0 <_write_r+0x20>)
 801fdc4:	4604      	mov	r4, r0
 801fdc6:	4608      	mov	r0, r1
 801fdc8:	4611      	mov	r1, r2
 801fdca:	2200      	movs	r2, #0
 801fdcc:	602a      	str	r2, [r5, #0]
 801fdce:	461a      	mov	r2, r3
 801fdd0:	f7e0 ff5a 	bl	8000c88 <_write>
 801fdd4:	1c43      	adds	r3, r0, #1
 801fdd6:	d102      	bne.n	801fdde <_write_r+0x1e>
 801fdd8:	682b      	ldr	r3, [r5, #0]
 801fdda:	b103      	cbz	r3, 801fdde <_write_r+0x1e>
 801fddc:	6023      	str	r3, [r4, #0]
 801fdde:	bd38      	pop	{r3, r4, r5, pc}
 801fde0:	20016be0 	.word	0x20016be0

0801fde4 <__swsetup_r>:
 801fde4:	4b32      	ldr	r3, [pc, #200]	; (801feb0 <__swsetup_r+0xcc>)
 801fde6:	b570      	push	{r4, r5, r6, lr}
 801fde8:	681d      	ldr	r5, [r3, #0]
 801fdea:	4606      	mov	r6, r0
 801fdec:	460c      	mov	r4, r1
 801fdee:	b125      	cbz	r5, 801fdfa <__swsetup_r+0x16>
 801fdf0:	69ab      	ldr	r3, [r5, #24]
 801fdf2:	b913      	cbnz	r3, 801fdfa <__swsetup_r+0x16>
 801fdf4:	4628      	mov	r0, r5
 801fdf6:	f7ff fbab 	bl	801f550 <__sinit>
 801fdfa:	4b2e      	ldr	r3, [pc, #184]	; (801feb4 <__swsetup_r+0xd0>)
 801fdfc:	429c      	cmp	r4, r3
 801fdfe:	d10f      	bne.n	801fe20 <__swsetup_r+0x3c>
 801fe00:	686c      	ldr	r4, [r5, #4]
 801fe02:	89a3      	ldrh	r3, [r4, #12]
 801fe04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fe08:	0719      	lsls	r1, r3, #28
 801fe0a:	d42c      	bmi.n	801fe66 <__swsetup_r+0x82>
 801fe0c:	06dd      	lsls	r5, r3, #27
 801fe0e:	d411      	bmi.n	801fe34 <__swsetup_r+0x50>
 801fe10:	2309      	movs	r3, #9
 801fe12:	6033      	str	r3, [r6, #0]
 801fe14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fe18:	81a3      	strh	r3, [r4, #12]
 801fe1a:	f04f 30ff 	mov.w	r0, #4294967295
 801fe1e:	e03e      	b.n	801fe9e <__swsetup_r+0xba>
 801fe20:	4b25      	ldr	r3, [pc, #148]	; (801feb8 <__swsetup_r+0xd4>)
 801fe22:	429c      	cmp	r4, r3
 801fe24:	d101      	bne.n	801fe2a <__swsetup_r+0x46>
 801fe26:	68ac      	ldr	r4, [r5, #8]
 801fe28:	e7eb      	b.n	801fe02 <__swsetup_r+0x1e>
 801fe2a:	4b24      	ldr	r3, [pc, #144]	; (801febc <__swsetup_r+0xd8>)
 801fe2c:	429c      	cmp	r4, r3
 801fe2e:	bf08      	it	eq
 801fe30:	68ec      	ldreq	r4, [r5, #12]
 801fe32:	e7e6      	b.n	801fe02 <__swsetup_r+0x1e>
 801fe34:	0758      	lsls	r0, r3, #29
 801fe36:	d512      	bpl.n	801fe5e <__swsetup_r+0x7a>
 801fe38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fe3a:	b141      	cbz	r1, 801fe4e <__swsetup_r+0x6a>
 801fe3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fe40:	4299      	cmp	r1, r3
 801fe42:	d002      	beq.n	801fe4a <__swsetup_r+0x66>
 801fe44:	4630      	mov	r0, r6
 801fe46:	f7ff fca7 	bl	801f798 <_free_r>
 801fe4a:	2300      	movs	r3, #0
 801fe4c:	6363      	str	r3, [r4, #52]	; 0x34
 801fe4e:	89a3      	ldrh	r3, [r4, #12]
 801fe50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fe54:	81a3      	strh	r3, [r4, #12]
 801fe56:	2300      	movs	r3, #0
 801fe58:	6063      	str	r3, [r4, #4]
 801fe5a:	6923      	ldr	r3, [r4, #16]
 801fe5c:	6023      	str	r3, [r4, #0]
 801fe5e:	89a3      	ldrh	r3, [r4, #12]
 801fe60:	f043 0308 	orr.w	r3, r3, #8
 801fe64:	81a3      	strh	r3, [r4, #12]
 801fe66:	6923      	ldr	r3, [r4, #16]
 801fe68:	b94b      	cbnz	r3, 801fe7e <__swsetup_r+0x9a>
 801fe6a:	89a3      	ldrh	r3, [r4, #12]
 801fe6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fe70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fe74:	d003      	beq.n	801fe7e <__swsetup_r+0x9a>
 801fe76:	4621      	mov	r1, r4
 801fe78:	4630      	mov	r0, r6
 801fe7a:	f000 f96b 	bl	8020154 <__smakebuf_r>
 801fe7e:	89a0      	ldrh	r0, [r4, #12]
 801fe80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fe84:	f010 0301 	ands.w	r3, r0, #1
 801fe88:	d00a      	beq.n	801fea0 <__swsetup_r+0xbc>
 801fe8a:	2300      	movs	r3, #0
 801fe8c:	60a3      	str	r3, [r4, #8]
 801fe8e:	6963      	ldr	r3, [r4, #20]
 801fe90:	425b      	negs	r3, r3
 801fe92:	61a3      	str	r3, [r4, #24]
 801fe94:	6923      	ldr	r3, [r4, #16]
 801fe96:	b943      	cbnz	r3, 801feaa <__swsetup_r+0xc6>
 801fe98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fe9c:	d1ba      	bne.n	801fe14 <__swsetup_r+0x30>
 801fe9e:	bd70      	pop	{r4, r5, r6, pc}
 801fea0:	0781      	lsls	r1, r0, #30
 801fea2:	bf58      	it	pl
 801fea4:	6963      	ldrpl	r3, [r4, #20]
 801fea6:	60a3      	str	r3, [r4, #8]
 801fea8:	e7f4      	b.n	801fe94 <__swsetup_r+0xb0>
 801feaa:	2000      	movs	r0, #0
 801feac:	e7f7      	b.n	801fe9e <__swsetup_r+0xba>
 801feae:	bf00      	nop
 801feb0:	2000034c 	.word	0x2000034c
 801feb4:	080257ec 	.word	0x080257ec
 801feb8:	0802580c 	.word	0x0802580c
 801febc:	080257cc 	.word	0x080257cc

0801fec0 <__assert_func>:
 801fec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fec2:	4614      	mov	r4, r2
 801fec4:	461a      	mov	r2, r3
 801fec6:	4b09      	ldr	r3, [pc, #36]	; (801feec <__assert_func+0x2c>)
 801fec8:	681b      	ldr	r3, [r3, #0]
 801feca:	4605      	mov	r5, r0
 801fecc:	68d8      	ldr	r0, [r3, #12]
 801fece:	b14c      	cbz	r4, 801fee4 <__assert_func+0x24>
 801fed0:	4b07      	ldr	r3, [pc, #28]	; (801fef0 <__assert_func+0x30>)
 801fed2:	9100      	str	r1, [sp, #0]
 801fed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fed8:	4906      	ldr	r1, [pc, #24]	; (801fef4 <__assert_func+0x34>)
 801feda:	462b      	mov	r3, r5
 801fedc:	f000 f8e0 	bl	80200a0 <fiprintf>
 801fee0:	f000 fde0 	bl	8020aa4 <abort>
 801fee4:	4b04      	ldr	r3, [pc, #16]	; (801fef8 <__assert_func+0x38>)
 801fee6:	461c      	mov	r4, r3
 801fee8:	e7f3      	b.n	801fed2 <__assert_func+0x12>
 801feea:	bf00      	nop
 801feec:	2000034c 	.word	0x2000034c
 801fef0:	080258a6 	.word	0x080258a6
 801fef4:	080258b3 	.word	0x080258b3
 801fef8:	080258e1 	.word	0x080258e1

0801fefc <_close_r>:
 801fefc:	b538      	push	{r3, r4, r5, lr}
 801fefe:	4d06      	ldr	r5, [pc, #24]	; (801ff18 <_close_r+0x1c>)
 801ff00:	2300      	movs	r3, #0
 801ff02:	4604      	mov	r4, r0
 801ff04:	4608      	mov	r0, r1
 801ff06:	602b      	str	r3, [r5, #0]
 801ff08:	f7e1 fc5d 	bl	80017c6 <_close>
 801ff0c:	1c43      	adds	r3, r0, #1
 801ff0e:	d102      	bne.n	801ff16 <_close_r+0x1a>
 801ff10:	682b      	ldr	r3, [r5, #0]
 801ff12:	b103      	cbz	r3, 801ff16 <_close_r+0x1a>
 801ff14:	6023      	str	r3, [r4, #0]
 801ff16:	bd38      	pop	{r3, r4, r5, pc}
 801ff18:	20016be0 	.word	0x20016be0

0801ff1c <__sflush_r>:
 801ff1c:	898a      	ldrh	r2, [r1, #12]
 801ff1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff22:	4605      	mov	r5, r0
 801ff24:	0710      	lsls	r0, r2, #28
 801ff26:	460c      	mov	r4, r1
 801ff28:	d458      	bmi.n	801ffdc <__sflush_r+0xc0>
 801ff2a:	684b      	ldr	r3, [r1, #4]
 801ff2c:	2b00      	cmp	r3, #0
 801ff2e:	dc05      	bgt.n	801ff3c <__sflush_r+0x20>
 801ff30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	dc02      	bgt.n	801ff3c <__sflush_r+0x20>
 801ff36:	2000      	movs	r0, #0
 801ff38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ff3e:	2e00      	cmp	r6, #0
 801ff40:	d0f9      	beq.n	801ff36 <__sflush_r+0x1a>
 801ff42:	2300      	movs	r3, #0
 801ff44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ff48:	682f      	ldr	r7, [r5, #0]
 801ff4a:	602b      	str	r3, [r5, #0]
 801ff4c:	d032      	beq.n	801ffb4 <__sflush_r+0x98>
 801ff4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ff50:	89a3      	ldrh	r3, [r4, #12]
 801ff52:	075a      	lsls	r2, r3, #29
 801ff54:	d505      	bpl.n	801ff62 <__sflush_r+0x46>
 801ff56:	6863      	ldr	r3, [r4, #4]
 801ff58:	1ac0      	subs	r0, r0, r3
 801ff5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ff5c:	b10b      	cbz	r3, 801ff62 <__sflush_r+0x46>
 801ff5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ff60:	1ac0      	subs	r0, r0, r3
 801ff62:	2300      	movs	r3, #0
 801ff64:	4602      	mov	r2, r0
 801ff66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ff68:	6a21      	ldr	r1, [r4, #32]
 801ff6a:	4628      	mov	r0, r5
 801ff6c:	47b0      	blx	r6
 801ff6e:	1c43      	adds	r3, r0, #1
 801ff70:	89a3      	ldrh	r3, [r4, #12]
 801ff72:	d106      	bne.n	801ff82 <__sflush_r+0x66>
 801ff74:	6829      	ldr	r1, [r5, #0]
 801ff76:	291d      	cmp	r1, #29
 801ff78:	d82c      	bhi.n	801ffd4 <__sflush_r+0xb8>
 801ff7a:	4a2a      	ldr	r2, [pc, #168]	; (8020024 <__sflush_r+0x108>)
 801ff7c:	40ca      	lsrs	r2, r1
 801ff7e:	07d6      	lsls	r6, r2, #31
 801ff80:	d528      	bpl.n	801ffd4 <__sflush_r+0xb8>
 801ff82:	2200      	movs	r2, #0
 801ff84:	6062      	str	r2, [r4, #4]
 801ff86:	04d9      	lsls	r1, r3, #19
 801ff88:	6922      	ldr	r2, [r4, #16]
 801ff8a:	6022      	str	r2, [r4, #0]
 801ff8c:	d504      	bpl.n	801ff98 <__sflush_r+0x7c>
 801ff8e:	1c42      	adds	r2, r0, #1
 801ff90:	d101      	bne.n	801ff96 <__sflush_r+0x7a>
 801ff92:	682b      	ldr	r3, [r5, #0]
 801ff94:	b903      	cbnz	r3, 801ff98 <__sflush_r+0x7c>
 801ff96:	6560      	str	r0, [r4, #84]	; 0x54
 801ff98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ff9a:	602f      	str	r7, [r5, #0]
 801ff9c:	2900      	cmp	r1, #0
 801ff9e:	d0ca      	beq.n	801ff36 <__sflush_r+0x1a>
 801ffa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ffa4:	4299      	cmp	r1, r3
 801ffa6:	d002      	beq.n	801ffae <__sflush_r+0x92>
 801ffa8:	4628      	mov	r0, r5
 801ffaa:	f7ff fbf5 	bl	801f798 <_free_r>
 801ffae:	2000      	movs	r0, #0
 801ffb0:	6360      	str	r0, [r4, #52]	; 0x34
 801ffb2:	e7c1      	b.n	801ff38 <__sflush_r+0x1c>
 801ffb4:	6a21      	ldr	r1, [r4, #32]
 801ffb6:	2301      	movs	r3, #1
 801ffb8:	4628      	mov	r0, r5
 801ffba:	47b0      	blx	r6
 801ffbc:	1c41      	adds	r1, r0, #1
 801ffbe:	d1c7      	bne.n	801ff50 <__sflush_r+0x34>
 801ffc0:	682b      	ldr	r3, [r5, #0]
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d0c4      	beq.n	801ff50 <__sflush_r+0x34>
 801ffc6:	2b1d      	cmp	r3, #29
 801ffc8:	d001      	beq.n	801ffce <__sflush_r+0xb2>
 801ffca:	2b16      	cmp	r3, #22
 801ffcc:	d101      	bne.n	801ffd2 <__sflush_r+0xb6>
 801ffce:	602f      	str	r7, [r5, #0]
 801ffd0:	e7b1      	b.n	801ff36 <__sflush_r+0x1a>
 801ffd2:	89a3      	ldrh	r3, [r4, #12]
 801ffd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ffd8:	81a3      	strh	r3, [r4, #12]
 801ffda:	e7ad      	b.n	801ff38 <__sflush_r+0x1c>
 801ffdc:	690f      	ldr	r7, [r1, #16]
 801ffde:	2f00      	cmp	r7, #0
 801ffe0:	d0a9      	beq.n	801ff36 <__sflush_r+0x1a>
 801ffe2:	0793      	lsls	r3, r2, #30
 801ffe4:	680e      	ldr	r6, [r1, #0]
 801ffe6:	bf08      	it	eq
 801ffe8:	694b      	ldreq	r3, [r1, #20]
 801ffea:	600f      	str	r7, [r1, #0]
 801ffec:	bf18      	it	ne
 801ffee:	2300      	movne	r3, #0
 801fff0:	eba6 0807 	sub.w	r8, r6, r7
 801fff4:	608b      	str	r3, [r1, #8]
 801fff6:	f1b8 0f00 	cmp.w	r8, #0
 801fffa:	dd9c      	ble.n	801ff36 <__sflush_r+0x1a>
 801fffc:	6a21      	ldr	r1, [r4, #32]
 801fffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020000:	4643      	mov	r3, r8
 8020002:	463a      	mov	r2, r7
 8020004:	4628      	mov	r0, r5
 8020006:	47b0      	blx	r6
 8020008:	2800      	cmp	r0, #0
 802000a:	dc06      	bgt.n	802001a <__sflush_r+0xfe>
 802000c:	89a3      	ldrh	r3, [r4, #12]
 802000e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020012:	81a3      	strh	r3, [r4, #12]
 8020014:	f04f 30ff 	mov.w	r0, #4294967295
 8020018:	e78e      	b.n	801ff38 <__sflush_r+0x1c>
 802001a:	4407      	add	r7, r0
 802001c:	eba8 0800 	sub.w	r8, r8, r0
 8020020:	e7e9      	b.n	801fff6 <__sflush_r+0xda>
 8020022:	bf00      	nop
 8020024:	20400001 	.word	0x20400001

08020028 <_fflush_r>:
 8020028:	b538      	push	{r3, r4, r5, lr}
 802002a:	690b      	ldr	r3, [r1, #16]
 802002c:	4605      	mov	r5, r0
 802002e:	460c      	mov	r4, r1
 8020030:	b913      	cbnz	r3, 8020038 <_fflush_r+0x10>
 8020032:	2500      	movs	r5, #0
 8020034:	4628      	mov	r0, r5
 8020036:	bd38      	pop	{r3, r4, r5, pc}
 8020038:	b118      	cbz	r0, 8020042 <_fflush_r+0x1a>
 802003a:	6983      	ldr	r3, [r0, #24]
 802003c:	b90b      	cbnz	r3, 8020042 <_fflush_r+0x1a>
 802003e:	f7ff fa87 	bl	801f550 <__sinit>
 8020042:	4b14      	ldr	r3, [pc, #80]	; (8020094 <_fflush_r+0x6c>)
 8020044:	429c      	cmp	r4, r3
 8020046:	d11b      	bne.n	8020080 <_fflush_r+0x58>
 8020048:	686c      	ldr	r4, [r5, #4]
 802004a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802004e:	2b00      	cmp	r3, #0
 8020050:	d0ef      	beq.n	8020032 <_fflush_r+0xa>
 8020052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020054:	07d0      	lsls	r0, r2, #31
 8020056:	d404      	bmi.n	8020062 <_fflush_r+0x3a>
 8020058:	0599      	lsls	r1, r3, #22
 802005a:	d402      	bmi.n	8020062 <_fflush_r+0x3a>
 802005c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802005e:	f7ff fb3a 	bl	801f6d6 <__retarget_lock_acquire_recursive>
 8020062:	4628      	mov	r0, r5
 8020064:	4621      	mov	r1, r4
 8020066:	f7ff ff59 	bl	801ff1c <__sflush_r>
 802006a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802006c:	07da      	lsls	r2, r3, #31
 802006e:	4605      	mov	r5, r0
 8020070:	d4e0      	bmi.n	8020034 <_fflush_r+0xc>
 8020072:	89a3      	ldrh	r3, [r4, #12]
 8020074:	059b      	lsls	r3, r3, #22
 8020076:	d4dd      	bmi.n	8020034 <_fflush_r+0xc>
 8020078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802007a:	f7ff fb2d 	bl	801f6d8 <__retarget_lock_release_recursive>
 802007e:	e7d9      	b.n	8020034 <_fflush_r+0xc>
 8020080:	4b05      	ldr	r3, [pc, #20]	; (8020098 <_fflush_r+0x70>)
 8020082:	429c      	cmp	r4, r3
 8020084:	d101      	bne.n	802008a <_fflush_r+0x62>
 8020086:	68ac      	ldr	r4, [r5, #8]
 8020088:	e7df      	b.n	802004a <_fflush_r+0x22>
 802008a:	4b04      	ldr	r3, [pc, #16]	; (802009c <_fflush_r+0x74>)
 802008c:	429c      	cmp	r4, r3
 802008e:	bf08      	it	eq
 8020090:	68ec      	ldreq	r4, [r5, #12]
 8020092:	e7da      	b.n	802004a <_fflush_r+0x22>
 8020094:	080257ec 	.word	0x080257ec
 8020098:	0802580c 	.word	0x0802580c
 802009c:	080257cc 	.word	0x080257cc

080200a0 <fiprintf>:
 80200a0:	b40e      	push	{r1, r2, r3}
 80200a2:	b503      	push	{r0, r1, lr}
 80200a4:	4601      	mov	r1, r0
 80200a6:	ab03      	add	r3, sp, #12
 80200a8:	4805      	ldr	r0, [pc, #20]	; (80200c0 <fiprintf+0x20>)
 80200aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80200ae:	6800      	ldr	r0, [r0, #0]
 80200b0:	9301      	str	r3, [sp, #4]
 80200b2:	f000 fa21 	bl	80204f8 <_vfiprintf_r>
 80200b6:	b002      	add	sp, #8
 80200b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80200bc:	b003      	add	sp, #12
 80200be:	4770      	bx	lr
 80200c0:	2000034c 	.word	0x2000034c

080200c4 <_gettimeofday_r>:
 80200c4:	b538      	push	{r3, r4, r5, lr}
 80200c6:	4d07      	ldr	r5, [pc, #28]	; (80200e4 <_gettimeofday_r+0x20>)
 80200c8:	2300      	movs	r3, #0
 80200ca:	4604      	mov	r4, r0
 80200cc:	4608      	mov	r0, r1
 80200ce:	4611      	mov	r1, r2
 80200d0:	602b      	str	r3, [r5, #0]
 80200d2:	f000 fd83 	bl	8020bdc <_gettimeofday>
 80200d6:	1c43      	adds	r3, r0, #1
 80200d8:	d102      	bne.n	80200e0 <_gettimeofday_r+0x1c>
 80200da:	682b      	ldr	r3, [r5, #0]
 80200dc:	b103      	cbz	r3, 80200e0 <_gettimeofday_r+0x1c>
 80200de:	6023      	str	r3, [r4, #0]
 80200e0:	bd38      	pop	{r3, r4, r5, pc}
 80200e2:	bf00      	nop
 80200e4:	20016be0 	.word	0x20016be0

080200e8 <_lseek_r>:
 80200e8:	b538      	push	{r3, r4, r5, lr}
 80200ea:	4d07      	ldr	r5, [pc, #28]	; (8020108 <_lseek_r+0x20>)
 80200ec:	4604      	mov	r4, r0
 80200ee:	4608      	mov	r0, r1
 80200f0:	4611      	mov	r1, r2
 80200f2:	2200      	movs	r2, #0
 80200f4:	602a      	str	r2, [r5, #0]
 80200f6:	461a      	mov	r2, r3
 80200f8:	f7e1 fb8c 	bl	8001814 <_lseek>
 80200fc:	1c43      	adds	r3, r0, #1
 80200fe:	d102      	bne.n	8020106 <_lseek_r+0x1e>
 8020100:	682b      	ldr	r3, [r5, #0]
 8020102:	b103      	cbz	r3, 8020106 <_lseek_r+0x1e>
 8020104:	6023      	str	r3, [r4, #0]
 8020106:	bd38      	pop	{r3, r4, r5, pc}
 8020108:	20016be0 	.word	0x20016be0

0802010c <__swhatbuf_r>:
 802010c:	b570      	push	{r4, r5, r6, lr}
 802010e:	460e      	mov	r6, r1
 8020110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020114:	2900      	cmp	r1, #0
 8020116:	b096      	sub	sp, #88	; 0x58
 8020118:	4614      	mov	r4, r2
 802011a:	461d      	mov	r5, r3
 802011c:	da07      	bge.n	802012e <__swhatbuf_r+0x22>
 802011e:	2300      	movs	r3, #0
 8020120:	602b      	str	r3, [r5, #0]
 8020122:	89b3      	ldrh	r3, [r6, #12]
 8020124:	061a      	lsls	r2, r3, #24
 8020126:	d410      	bmi.n	802014a <__swhatbuf_r+0x3e>
 8020128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802012c:	e00e      	b.n	802014c <__swhatbuf_r+0x40>
 802012e:	466a      	mov	r2, sp
 8020130:	f000 fcc0 	bl	8020ab4 <_fstat_r>
 8020134:	2800      	cmp	r0, #0
 8020136:	dbf2      	blt.n	802011e <__swhatbuf_r+0x12>
 8020138:	9a01      	ldr	r2, [sp, #4]
 802013a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802013e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020142:	425a      	negs	r2, r3
 8020144:	415a      	adcs	r2, r3
 8020146:	602a      	str	r2, [r5, #0]
 8020148:	e7ee      	b.n	8020128 <__swhatbuf_r+0x1c>
 802014a:	2340      	movs	r3, #64	; 0x40
 802014c:	2000      	movs	r0, #0
 802014e:	6023      	str	r3, [r4, #0]
 8020150:	b016      	add	sp, #88	; 0x58
 8020152:	bd70      	pop	{r4, r5, r6, pc}

08020154 <__smakebuf_r>:
 8020154:	898b      	ldrh	r3, [r1, #12]
 8020156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020158:	079d      	lsls	r5, r3, #30
 802015a:	4606      	mov	r6, r0
 802015c:	460c      	mov	r4, r1
 802015e:	d507      	bpl.n	8020170 <__smakebuf_r+0x1c>
 8020160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020164:	6023      	str	r3, [r4, #0]
 8020166:	6123      	str	r3, [r4, #16]
 8020168:	2301      	movs	r3, #1
 802016a:	6163      	str	r3, [r4, #20]
 802016c:	b002      	add	sp, #8
 802016e:	bd70      	pop	{r4, r5, r6, pc}
 8020170:	ab01      	add	r3, sp, #4
 8020172:	466a      	mov	r2, sp
 8020174:	f7ff ffca 	bl	802010c <__swhatbuf_r>
 8020178:	9900      	ldr	r1, [sp, #0]
 802017a:	4605      	mov	r5, r0
 802017c:	4630      	mov	r0, r6
 802017e:	f7ff fb5b 	bl	801f838 <_malloc_r>
 8020182:	b948      	cbnz	r0, 8020198 <__smakebuf_r+0x44>
 8020184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020188:	059a      	lsls	r2, r3, #22
 802018a:	d4ef      	bmi.n	802016c <__smakebuf_r+0x18>
 802018c:	f023 0303 	bic.w	r3, r3, #3
 8020190:	f043 0302 	orr.w	r3, r3, #2
 8020194:	81a3      	strh	r3, [r4, #12]
 8020196:	e7e3      	b.n	8020160 <__smakebuf_r+0xc>
 8020198:	4b0d      	ldr	r3, [pc, #52]	; (80201d0 <__smakebuf_r+0x7c>)
 802019a:	62b3      	str	r3, [r6, #40]	; 0x28
 802019c:	89a3      	ldrh	r3, [r4, #12]
 802019e:	6020      	str	r0, [r4, #0]
 80201a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80201a4:	81a3      	strh	r3, [r4, #12]
 80201a6:	9b00      	ldr	r3, [sp, #0]
 80201a8:	6163      	str	r3, [r4, #20]
 80201aa:	9b01      	ldr	r3, [sp, #4]
 80201ac:	6120      	str	r0, [r4, #16]
 80201ae:	b15b      	cbz	r3, 80201c8 <__smakebuf_r+0x74>
 80201b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80201b4:	4630      	mov	r0, r6
 80201b6:	f000 fc8f 	bl	8020ad8 <_isatty_r>
 80201ba:	b128      	cbz	r0, 80201c8 <__smakebuf_r+0x74>
 80201bc:	89a3      	ldrh	r3, [r4, #12]
 80201be:	f023 0303 	bic.w	r3, r3, #3
 80201c2:	f043 0301 	orr.w	r3, r3, #1
 80201c6:	81a3      	strh	r3, [r4, #12]
 80201c8:	89a0      	ldrh	r0, [r4, #12]
 80201ca:	4305      	orrs	r5, r0
 80201cc:	81a5      	strh	r5, [r4, #12]
 80201ce:	e7cd      	b.n	802016c <__smakebuf_r+0x18>
 80201d0:	0801f4e9 	.word	0x0801f4e9

080201d4 <__malloc_lock>:
 80201d4:	4801      	ldr	r0, [pc, #4]	; (80201dc <__malloc_lock+0x8>)
 80201d6:	f7ff ba7e 	b.w	801f6d6 <__retarget_lock_acquire_recursive>
 80201da:	bf00      	nop
 80201dc:	20016bec 	.word	0x20016bec

080201e0 <__malloc_unlock>:
 80201e0:	4801      	ldr	r0, [pc, #4]	; (80201e8 <__malloc_unlock+0x8>)
 80201e2:	f7ff ba79 	b.w	801f6d8 <__retarget_lock_release_recursive>
 80201e6:	bf00      	nop
 80201e8:	20016bec 	.word	0x20016bec

080201ec <__ssputs_r>:
 80201ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80201f0:	688e      	ldr	r6, [r1, #8]
 80201f2:	429e      	cmp	r6, r3
 80201f4:	4682      	mov	sl, r0
 80201f6:	460c      	mov	r4, r1
 80201f8:	4690      	mov	r8, r2
 80201fa:	461f      	mov	r7, r3
 80201fc:	d838      	bhi.n	8020270 <__ssputs_r+0x84>
 80201fe:	898a      	ldrh	r2, [r1, #12]
 8020200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020204:	d032      	beq.n	802026c <__ssputs_r+0x80>
 8020206:	6825      	ldr	r5, [r4, #0]
 8020208:	6909      	ldr	r1, [r1, #16]
 802020a:	eba5 0901 	sub.w	r9, r5, r1
 802020e:	6965      	ldr	r5, [r4, #20]
 8020210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020218:	3301      	adds	r3, #1
 802021a:	444b      	add	r3, r9
 802021c:	106d      	asrs	r5, r5, #1
 802021e:	429d      	cmp	r5, r3
 8020220:	bf38      	it	cc
 8020222:	461d      	movcc	r5, r3
 8020224:	0553      	lsls	r3, r2, #21
 8020226:	d531      	bpl.n	802028c <__ssputs_r+0xa0>
 8020228:	4629      	mov	r1, r5
 802022a:	f7ff fb05 	bl	801f838 <_malloc_r>
 802022e:	4606      	mov	r6, r0
 8020230:	b950      	cbnz	r0, 8020248 <__ssputs_r+0x5c>
 8020232:	230c      	movs	r3, #12
 8020234:	f8ca 3000 	str.w	r3, [sl]
 8020238:	89a3      	ldrh	r3, [r4, #12]
 802023a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802023e:	81a3      	strh	r3, [r4, #12]
 8020240:	f04f 30ff 	mov.w	r0, #4294967295
 8020244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020248:	6921      	ldr	r1, [r4, #16]
 802024a:	464a      	mov	r2, r9
 802024c:	f7ff fa64 	bl	801f718 <memcpy>
 8020250:	89a3      	ldrh	r3, [r4, #12]
 8020252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802025a:	81a3      	strh	r3, [r4, #12]
 802025c:	6126      	str	r6, [r4, #16]
 802025e:	6165      	str	r5, [r4, #20]
 8020260:	444e      	add	r6, r9
 8020262:	eba5 0509 	sub.w	r5, r5, r9
 8020266:	6026      	str	r6, [r4, #0]
 8020268:	60a5      	str	r5, [r4, #8]
 802026a:	463e      	mov	r6, r7
 802026c:	42be      	cmp	r6, r7
 802026e:	d900      	bls.n	8020272 <__ssputs_r+0x86>
 8020270:	463e      	mov	r6, r7
 8020272:	4632      	mov	r2, r6
 8020274:	6820      	ldr	r0, [r4, #0]
 8020276:	4641      	mov	r1, r8
 8020278:	f7ff fa5c 	bl	801f734 <memmove>
 802027c:	68a3      	ldr	r3, [r4, #8]
 802027e:	6822      	ldr	r2, [r4, #0]
 8020280:	1b9b      	subs	r3, r3, r6
 8020282:	4432      	add	r2, r6
 8020284:	60a3      	str	r3, [r4, #8]
 8020286:	6022      	str	r2, [r4, #0]
 8020288:	2000      	movs	r0, #0
 802028a:	e7db      	b.n	8020244 <__ssputs_r+0x58>
 802028c:	462a      	mov	r2, r5
 802028e:	f000 fc33 	bl	8020af8 <_realloc_r>
 8020292:	4606      	mov	r6, r0
 8020294:	2800      	cmp	r0, #0
 8020296:	d1e1      	bne.n	802025c <__ssputs_r+0x70>
 8020298:	6921      	ldr	r1, [r4, #16]
 802029a:	4650      	mov	r0, sl
 802029c:	f7ff fa7c 	bl	801f798 <_free_r>
 80202a0:	e7c7      	b.n	8020232 <__ssputs_r+0x46>
	...

080202a4 <_svfiprintf_r>:
 80202a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202a8:	4698      	mov	r8, r3
 80202aa:	898b      	ldrh	r3, [r1, #12]
 80202ac:	061b      	lsls	r3, r3, #24
 80202ae:	b09d      	sub	sp, #116	; 0x74
 80202b0:	4607      	mov	r7, r0
 80202b2:	460d      	mov	r5, r1
 80202b4:	4614      	mov	r4, r2
 80202b6:	d50e      	bpl.n	80202d6 <_svfiprintf_r+0x32>
 80202b8:	690b      	ldr	r3, [r1, #16]
 80202ba:	b963      	cbnz	r3, 80202d6 <_svfiprintf_r+0x32>
 80202bc:	2140      	movs	r1, #64	; 0x40
 80202be:	f7ff fabb 	bl	801f838 <_malloc_r>
 80202c2:	6028      	str	r0, [r5, #0]
 80202c4:	6128      	str	r0, [r5, #16]
 80202c6:	b920      	cbnz	r0, 80202d2 <_svfiprintf_r+0x2e>
 80202c8:	230c      	movs	r3, #12
 80202ca:	603b      	str	r3, [r7, #0]
 80202cc:	f04f 30ff 	mov.w	r0, #4294967295
 80202d0:	e0d1      	b.n	8020476 <_svfiprintf_r+0x1d2>
 80202d2:	2340      	movs	r3, #64	; 0x40
 80202d4:	616b      	str	r3, [r5, #20]
 80202d6:	2300      	movs	r3, #0
 80202d8:	9309      	str	r3, [sp, #36]	; 0x24
 80202da:	2320      	movs	r3, #32
 80202dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80202e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80202e4:	2330      	movs	r3, #48	; 0x30
 80202e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020490 <_svfiprintf_r+0x1ec>
 80202ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80202ee:	f04f 0901 	mov.w	r9, #1
 80202f2:	4623      	mov	r3, r4
 80202f4:	469a      	mov	sl, r3
 80202f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80202fa:	b10a      	cbz	r2, 8020300 <_svfiprintf_r+0x5c>
 80202fc:	2a25      	cmp	r2, #37	; 0x25
 80202fe:	d1f9      	bne.n	80202f4 <_svfiprintf_r+0x50>
 8020300:	ebba 0b04 	subs.w	fp, sl, r4
 8020304:	d00b      	beq.n	802031e <_svfiprintf_r+0x7a>
 8020306:	465b      	mov	r3, fp
 8020308:	4622      	mov	r2, r4
 802030a:	4629      	mov	r1, r5
 802030c:	4638      	mov	r0, r7
 802030e:	f7ff ff6d 	bl	80201ec <__ssputs_r>
 8020312:	3001      	adds	r0, #1
 8020314:	f000 80aa 	beq.w	802046c <_svfiprintf_r+0x1c8>
 8020318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802031a:	445a      	add	r2, fp
 802031c:	9209      	str	r2, [sp, #36]	; 0x24
 802031e:	f89a 3000 	ldrb.w	r3, [sl]
 8020322:	2b00      	cmp	r3, #0
 8020324:	f000 80a2 	beq.w	802046c <_svfiprintf_r+0x1c8>
 8020328:	2300      	movs	r3, #0
 802032a:	f04f 32ff 	mov.w	r2, #4294967295
 802032e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020332:	f10a 0a01 	add.w	sl, sl, #1
 8020336:	9304      	str	r3, [sp, #16]
 8020338:	9307      	str	r3, [sp, #28]
 802033a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802033e:	931a      	str	r3, [sp, #104]	; 0x68
 8020340:	4654      	mov	r4, sl
 8020342:	2205      	movs	r2, #5
 8020344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020348:	4851      	ldr	r0, [pc, #324]	; (8020490 <_svfiprintf_r+0x1ec>)
 802034a:	f7df ff49 	bl	80001e0 <memchr>
 802034e:	9a04      	ldr	r2, [sp, #16]
 8020350:	b9d8      	cbnz	r0, 802038a <_svfiprintf_r+0xe6>
 8020352:	06d0      	lsls	r0, r2, #27
 8020354:	bf44      	itt	mi
 8020356:	2320      	movmi	r3, #32
 8020358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802035c:	0711      	lsls	r1, r2, #28
 802035e:	bf44      	itt	mi
 8020360:	232b      	movmi	r3, #43	; 0x2b
 8020362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020366:	f89a 3000 	ldrb.w	r3, [sl]
 802036a:	2b2a      	cmp	r3, #42	; 0x2a
 802036c:	d015      	beq.n	802039a <_svfiprintf_r+0xf6>
 802036e:	9a07      	ldr	r2, [sp, #28]
 8020370:	4654      	mov	r4, sl
 8020372:	2000      	movs	r0, #0
 8020374:	f04f 0c0a 	mov.w	ip, #10
 8020378:	4621      	mov	r1, r4
 802037a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802037e:	3b30      	subs	r3, #48	; 0x30
 8020380:	2b09      	cmp	r3, #9
 8020382:	d94e      	bls.n	8020422 <_svfiprintf_r+0x17e>
 8020384:	b1b0      	cbz	r0, 80203b4 <_svfiprintf_r+0x110>
 8020386:	9207      	str	r2, [sp, #28]
 8020388:	e014      	b.n	80203b4 <_svfiprintf_r+0x110>
 802038a:	eba0 0308 	sub.w	r3, r0, r8
 802038e:	fa09 f303 	lsl.w	r3, r9, r3
 8020392:	4313      	orrs	r3, r2
 8020394:	9304      	str	r3, [sp, #16]
 8020396:	46a2      	mov	sl, r4
 8020398:	e7d2      	b.n	8020340 <_svfiprintf_r+0x9c>
 802039a:	9b03      	ldr	r3, [sp, #12]
 802039c:	1d19      	adds	r1, r3, #4
 802039e:	681b      	ldr	r3, [r3, #0]
 80203a0:	9103      	str	r1, [sp, #12]
 80203a2:	2b00      	cmp	r3, #0
 80203a4:	bfbb      	ittet	lt
 80203a6:	425b      	neglt	r3, r3
 80203a8:	f042 0202 	orrlt.w	r2, r2, #2
 80203ac:	9307      	strge	r3, [sp, #28]
 80203ae:	9307      	strlt	r3, [sp, #28]
 80203b0:	bfb8      	it	lt
 80203b2:	9204      	strlt	r2, [sp, #16]
 80203b4:	7823      	ldrb	r3, [r4, #0]
 80203b6:	2b2e      	cmp	r3, #46	; 0x2e
 80203b8:	d10c      	bne.n	80203d4 <_svfiprintf_r+0x130>
 80203ba:	7863      	ldrb	r3, [r4, #1]
 80203bc:	2b2a      	cmp	r3, #42	; 0x2a
 80203be:	d135      	bne.n	802042c <_svfiprintf_r+0x188>
 80203c0:	9b03      	ldr	r3, [sp, #12]
 80203c2:	1d1a      	adds	r2, r3, #4
 80203c4:	681b      	ldr	r3, [r3, #0]
 80203c6:	9203      	str	r2, [sp, #12]
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	bfb8      	it	lt
 80203cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80203d0:	3402      	adds	r4, #2
 80203d2:	9305      	str	r3, [sp, #20]
 80203d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80204a0 <_svfiprintf_r+0x1fc>
 80203d8:	7821      	ldrb	r1, [r4, #0]
 80203da:	2203      	movs	r2, #3
 80203dc:	4650      	mov	r0, sl
 80203de:	f7df feff 	bl	80001e0 <memchr>
 80203e2:	b140      	cbz	r0, 80203f6 <_svfiprintf_r+0x152>
 80203e4:	2340      	movs	r3, #64	; 0x40
 80203e6:	eba0 000a 	sub.w	r0, r0, sl
 80203ea:	fa03 f000 	lsl.w	r0, r3, r0
 80203ee:	9b04      	ldr	r3, [sp, #16]
 80203f0:	4303      	orrs	r3, r0
 80203f2:	3401      	adds	r4, #1
 80203f4:	9304      	str	r3, [sp, #16]
 80203f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80203fa:	4826      	ldr	r0, [pc, #152]	; (8020494 <_svfiprintf_r+0x1f0>)
 80203fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020400:	2206      	movs	r2, #6
 8020402:	f7df feed 	bl	80001e0 <memchr>
 8020406:	2800      	cmp	r0, #0
 8020408:	d038      	beq.n	802047c <_svfiprintf_r+0x1d8>
 802040a:	4b23      	ldr	r3, [pc, #140]	; (8020498 <_svfiprintf_r+0x1f4>)
 802040c:	bb1b      	cbnz	r3, 8020456 <_svfiprintf_r+0x1b2>
 802040e:	9b03      	ldr	r3, [sp, #12]
 8020410:	3307      	adds	r3, #7
 8020412:	f023 0307 	bic.w	r3, r3, #7
 8020416:	3308      	adds	r3, #8
 8020418:	9303      	str	r3, [sp, #12]
 802041a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802041c:	4433      	add	r3, r6
 802041e:	9309      	str	r3, [sp, #36]	; 0x24
 8020420:	e767      	b.n	80202f2 <_svfiprintf_r+0x4e>
 8020422:	fb0c 3202 	mla	r2, ip, r2, r3
 8020426:	460c      	mov	r4, r1
 8020428:	2001      	movs	r0, #1
 802042a:	e7a5      	b.n	8020378 <_svfiprintf_r+0xd4>
 802042c:	2300      	movs	r3, #0
 802042e:	3401      	adds	r4, #1
 8020430:	9305      	str	r3, [sp, #20]
 8020432:	4619      	mov	r1, r3
 8020434:	f04f 0c0a 	mov.w	ip, #10
 8020438:	4620      	mov	r0, r4
 802043a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802043e:	3a30      	subs	r2, #48	; 0x30
 8020440:	2a09      	cmp	r2, #9
 8020442:	d903      	bls.n	802044c <_svfiprintf_r+0x1a8>
 8020444:	2b00      	cmp	r3, #0
 8020446:	d0c5      	beq.n	80203d4 <_svfiprintf_r+0x130>
 8020448:	9105      	str	r1, [sp, #20]
 802044a:	e7c3      	b.n	80203d4 <_svfiprintf_r+0x130>
 802044c:	fb0c 2101 	mla	r1, ip, r1, r2
 8020450:	4604      	mov	r4, r0
 8020452:	2301      	movs	r3, #1
 8020454:	e7f0      	b.n	8020438 <_svfiprintf_r+0x194>
 8020456:	ab03      	add	r3, sp, #12
 8020458:	9300      	str	r3, [sp, #0]
 802045a:	462a      	mov	r2, r5
 802045c:	4b0f      	ldr	r3, [pc, #60]	; (802049c <_svfiprintf_r+0x1f8>)
 802045e:	a904      	add	r1, sp, #16
 8020460:	4638      	mov	r0, r7
 8020462:	f3af 8000 	nop.w
 8020466:	1c42      	adds	r2, r0, #1
 8020468:	4606      	mov	r6, r0
 802046a:	d1d6      	bne.n	802041a <_svfiprintf_r+0x176>
 802046c:	89ab      	ldrh	r3, [r5, #12]
 802046e:	065b      	lsls	r3, r3, #25
 8020470:	f53f af2c 	bmi.w	80202cc <_svfiprintf_r+0x28>
 8020474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020476:	b01d      	add	sp, #116	; 0x74
 8020478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802047c:	ab03      	add	r3, sp, #12
 802047e:	9300      	str	r3, [sp, #0]
 8020480:	462a      	mov	r2, r5
 8020482:	4b06      	ldr	r3, [pc, #24]	; (802049c <_svfiprintf_r+0x1f8>)
 8020484:	a904      	add	r1, sp, #16
 8020486:	4638      	mov	r0, r7
 8020488:	f000 f9d4 	bl	8020834 <_printf_i>
 802048c:	e7eb      	b.n	8020466 <_svfiprintf_r+0x1c2>
 802048e:	bf00      	nop
 8020490:	080258e2 	.word	0x080258e2
 8020494:	080258ec 	.word	0x080258ec
 8020498:	00000000 	.word	0x00000000
 802049c:	080201ed 	.word	0x080201ed
 80204a0:	080258e8 	.word	0x080258e8

080204a4 <__sfputc_r>:
 80204a4:	6893      	ldr	r3, [r2, #8]
 80204a6:	3b01      	subs	r3, #1
 80204a8:	2b00      	cmp	r3, #0
 80204aa:	b410      	push	{r4}
 80204ac:	6093      	str	r3, [r2, #8]
 80204ae:	da08      	bge.n	80204c2 <__sfputc_r+0x1e>
 80204b0:	6994      	ldr	r4, [r2, #24]
 80204b2:	42a3      	cmp	r3, r4
 80204b4:	db01      	blt.n	80204ba <__sfputc_r+0x16>
 80204b6:	290a      	cmp	r1, #10
 80204b8:	d103      	bne.n	80204c2 <__sfputc_r+0x1e>
 80204ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80204be:	f7ff bc2d 	b.w	801fd1c <__swbuf_r>
 80204c2:	6813      	ldr	r3, [r2, #0]
 80204c4:	1c58      	adds	r0, r3, #1
 80204c6:	6010      	str	r0, [r2, #0]
 80204c8:	7019      	strb	r1, [r3, #0]
 80204ca:	4608      	mov	r0, r1
 80204cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80204d0:	4770      	bx	lr

080204d2 <__sfputs_r>:
 80204d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204d4:	4606      	mov	r6, r0
 80204d6:	460f      	mov	r7, r1
 80204d8:	4614      	mov	r4, r2
 80204da:	18d5      	adds	r5, r2, r3
 80204dc:	42ac      	cmp	r4, r5
 80204de:	d101      	bne.n	80204e4 <__sfputs_r+0x12>
 80204e0:	2000      	movs	r0, #0
 80204e2:	e007      	b.n	80204f4 <__sfputs_r+0x22>
 80204e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80204e8:	463a      	mov	r2, r7
 80204ea:	4630      	mov	r0, r6
 80204ec:	f7ff ffda 	bl	80204a4 <__sfputc_r>
 80204f0:	1c43      	adds	r3, r0, #1
 80204f2:	d1f3      	bne.n	80204dc <__sfputs_r+0xa>
 80204f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080204f8 <_vfiprintf_r>:
 80204f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204fc:	460d      	mov	r5, r1
 80204fe:	b09d      	sub	sp, #116	; 0x74
 8020500:	4614      	mov	r4, r2
 8020502:	4698      	mov	r8, r3
 8020504:	4606      	mov	r6, r0
 8020506:	b118      	cbz	r0, 8020510 <_vfiprintf_r+0x18>
 8020508:	6983      	ldr	r3, [r0, #24]
 802050a:	b90b      	cbnz	r3, 8020510 <_vfiprintf_r+0x18>
 802050c:	f7ff f820 	bl	801f550 <__sinit>
 8020510:	4b89      	ldr	r3, [pc, #548]	; (8020738 <_vfiprintf_r+0x240>)
 8020512:	429d      	cmp	r5, r3
 8020514:	d11b      	bne.n	802054e <_vfiprintf_r+0x56>
 8020516:	6875      	ldr	r5, [r6, #4]
 8020518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802051a:	07d9      	lsls	r1, r3, #31
 802051c:	d405      	bmi.n	802052a <_vfiprintf_r+0x32>
 802051e:	89ab      	ldrh	r3, [r5, #12]
 8020520:	059a      	lsls	r2, r3, #22
 8020522:	d402      	bmi.n	802052a <_vfiprintf_r+0x32>
 8020524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020526:	f7ff f8d6 	bl	801f6d6 <__retarget_lock_acquire_recursive>
 802052a:	89ab      	ldrh	r3, [r5, #12]
 802052c:	071b      	lsls	r3, r3, #28
 802052e:	d501      	bpl.n	8020534 <_vfiprintf_r+0x3c>
 8020530:	692b      	ldr	r3, [r5, #16]
 8020532:	b9eb      	cbnz	r3, 8020570 <_vfiprintf_r+0x78>
 8020534:	4629      	mov	r1, r5
 8020536:	4630      	mov	r0, r6
 8020538:	f7ff fc54 	bl	801fde4 <__swsetup_r>
 802053c:	b1c0      	cbz	r0, 8020570 <_vfiprintf_r+0x78>
 802053e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020540:	07dc      	lsls	r4, r3, #31
 8020542:	d50e      	bpl.n	8020562 <_vfiprintf_r+0x6a>
 8020544:	f04f 30ff 	mov.w	r0, #4294967295
 8020548:	b01d      	add	sp, #116	; 0x74
 802054a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802054e:	4b7b      	ldr	r3, [pc, #492]	; (802073c <_vfiprintf_r+0x244>)
 8020550:	429d      	cmp	r5, r3
 8020552:	d101      	bne.n	8020558 <_vfiprintf_r+0x60>
 8020554:	68b5      	ldr	r5, [r6, #8]
 8020556:	e7df      	b.n	8020518 <_vfiprintf_r+0x20>
 8020558:	4b79      	ldr	r3, [pc, #484]	; (8020740 <_vfiprintf_r+0x248>)
 802055a:	429d      	cmp	r5, r3
 802055c:	bf08      	it	eq
 802055e:	68f5      	ldreq	r5, [r6, #12]
 8020560:	e7da      	b.n	8020518 <_vfiprintf_r+0x20>
 8020562:	89ab      	ldrh	r3, [r5, #12]
 8020564:	0598      	lsls	r0, r3, #22
 8020566:	d4ed      	bmi.n	8020544 <_vfiprintf_r+0x4c>
 8020568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802056a:	f7ff f8b5 	bl	801f6d8 <__retarget_lock_release_recursive>
 802056e:	e7e9      	b.n	8020544 <_vfiprintf_r+0x4c>
 8020570:	2300      	movs	r3, #0
 8020572:	9309      	str	r3, [sp, #36]	; 0x24
 8020574:	2320      	movs	r3, #32
 8020576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802057a:	f8cd 800c 	str.w	r8, [sp, #12]
 802057e:	2330      	movs	r3, #48	; 0x30
 8020580:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020744 <_vfiprintf_r+0x24c>
 8020584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020588:	f04f 0901 	mov.w	r9, #1
 802058c:	4623      	mov	r3, r4
 802058e:	469a      	mov	sl, r3
 8020590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020594:	b10a      	cbz	r2, 802059a <_vfiprintf_r+0xa2>
 8020596:	2a25      	cmp	r2, #37	; 0x25
 8020598:	d1f9      	bne.n	802058e <_vfiprintf_r+0x96>
 802059a:	ebba 0b04 	subs.w	fp, sl, r4
 802059e:	d00b      	beq.n	80205b8 <_vfiprintf_r+0xc0>
 80205a0:	465b      	mov	r3, fp
 80205a2:	4622      	mov	r2, r4
 80205a4:	4629      	mov	r1, r5
 80205a6:	4630      	mov	r0, r6
 80205a8:	f7ff ff93 	bl	80204d2 <__sfputs_r>
 80205ac:	3001      	adds	r0, #1
 80205ae:	f000 80aa 	beq.w	8020706 <_vfiprintf_r+0x20e>
 80205b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80205b4:	445a      	add	r2, fp
 80205b6:	9209      	str	r2, [sp, #36]	; 0x24
 80205b8:	f89a 3000 	ldrb.w	r3, [sl]
 80205bc:	2b00      	cmp	r3, #0
 80205be:	f000 80a2 	beq.w	8020706 <_vfiprintf_r+0x20e>
 80205c2:	2300      	movs	r3, #0
 80205c4:	f04f 32ff 	mov.w	r2, #4294967295
 80205c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80205cc:	f10a 0a01 	add.w	sl, sl, #1
 80205d0:	9304      	str	r3, [sp, #16]
 80205d2:	9307      	str	r3, [sp, #28]
 80205d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80205d8:	931a      	str	r3, [sp, #104]	; 0x68
 80205da:	4654      	mov	r4, sl
 80205dc:	2205      	movs	r2, #5
 80205de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80205e2:	4858      	ldr	r0, [pc, #352]	; (8020744 <_vfiprintf_r+0x24c>)
 80205e4:	f7df fdfc 	bl	80001e0 <memchr>
 80205e8:	9a04      	ldr	r2, [sp, #16]
 80205ea:	b9d8      	cbnz	r0, 8020624 <_vfiprintf_r+0x12c>
 80205ec:	06d1      	lsls	r1, r2, #27
 80205ee:	bf44      	itt	mi
 80205f0:	2320      	movmi	r3, #32
 80205f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80205f6:	0713      	lsls	r3, r2, #28
 80205f8:	bf44      	itt	mi
 80205fa:	232b      	movmi	r3, #43	; 0x2b
 80205fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020600:	f89a 3000 	ldrb.w	r3, [sl]
 8020604:	2b2a      	cmp	r3, #42	; 0x2a
 8020606:	d015      	beq.n	8020634 <_vfiprintf_r+0x13c>
 8020608:	9a07      	ldr	r2, [sp, #28]
 802060a:	4654      	mov	r4, sl
 802060c:	2000      	movs	r0, #0
 802060e:	f04f 0c0a 	mov.w	ip, #10
 8020612:	4621      	mov	r1, r4
 8020614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020618:	3b30      	subs	r3, #48	; 0x30
 802061a:	2b09      	cmp	r3, #9
 802061c:	d94e      	bls.n	80206bc <_vfiprintf_r+0x1c4>
 802061e:	b1b0      	cbz	r0, 802064e <_vfiprintf_r+0x156>
 8020620:	9207      	str	r2, [sp, #28]
 8020622:	e014      	b.n	802064e <_vfiprintf_r+0x156>
 8020624:	eba0 0308 	sub.w	r3, r0, r8
 8020628:	fa09 f303 	lsl.w	r3, r9, r3
 802062c:	4313      	orrs	r3, r2
 802062e:	9304      	str	r3, [sp, #16]
 8020630:	46a2      	mov	sl, r4
 8020632:	e7d2      	b.n	80205da <_vfiprintf_r+0xe2>
 8020634:	9b03      	ldr	r3, [sp, #12]
 8020636:	1d19      	adds	r1, r3, #4
 8020638:	681b      	ldr	r3, [r3, #0]
 802063a:	9103      	str	r1, [sp, #12]
 802063c:	2b00      	cmp	r3, #0
 802063e:	bfbb      	ittet	lt
 8020640:	425b      	neglt	r3, r3
 8020642:	f042 0202 	orrlt.w	r2, r2, #2
 8020646:	9307      	strge	r3, [sp, #28]
 8020648:	9307      	strlt	r3, [sp, #28]
 802064a:	bfb8      	it	lt
 802064c:	9204      	strlt	r2, [sp, #16]
 802064e:	7823      	ldrb	r3, [r4, #0]
 8020650:	2b2e      	cmp	r3, #46	; 0x2e
 8020652:	d10c      	bne.n	802066e <_vfiprintf_r+0x176>
 8020654:	7863      	ldrb	r3, [r4, #1]
 8020656:	2b2a      	cmp	r3, #42	; 0x2a
 8020658:	d135      	bne.n	80206c6 <_vfiprintf_r+0x1ce>
 802065a:	9b03      	ldr	r3, [sp, #12]
 802065c:	1d1a      	adds	r2, r3, #4
 802065e:	681b      	ldr	r3, [r3, #0]
 8020660:	9203      	str	r2, [sp, #12]
 8020662:	2b00      	cmp	r3, #0
 8020664:	bfb8      	it	lt
 8020666:	f04f 33ff 	movlt.w	r3, #4294967295
 802066a:	3402      	adds	r4, #2
 802066c:	9305      	str	r3, [sp, #20]
 802066e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020754 <_vfiprintf_r+0x25c>
 8020672:	7821      	ldrb	r1, [r4, #0]
 8020674:	2203      	movs	r2, #3
 8020676:	4650      	mov	r0, sl
 8020678:	f7df fdb2 	bl	80001e0 <memchr>
 802067c:	b140      	cbz	r0, 8020690 <_vfiprintf_r+0x198>
 802067e:	2340      	movs	r3, #64	; 0x40
 8020680:	eba0 000a 	sub.w	r0, r0, sl
 8020684:	fa03 f000 	lsl.w	r0, r3, r0
 8020688:	9b04      	ldr	r3, [sp, #16]
 802068a:	4303      	orrs	r3, r0
 802068c:	3401      	adds	r4, #1
 802068e:	9304      	str	r3, [sp, #16]
 8020690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020694:	482c      	ldr	r0, [pc, #176]	; (8020748 <_vfiprintf_r+0x250>)
 8020696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802069a:	2206      	movs	r2, #6
 802069c:	f7df fda0 	bl	80001e0 <memchr>
 80206a0:	2800      	cmp	r0, #0
 80206a2:	d03f      	beq.n	8020724 <_vfiprintf_r+0x22c>
 80206a4:	4b29      	ldr	r3, [pc, #164]	; (802074c <_vfiprintf_r+0x254>)
 80206a6:	bb1b      	cbnz	r3, 80206f0 <_vfiprintf_r+0x1f8>
 80206a8:	9b03      	ldr	r3, [sp, #12]
 80206aa:	3307      	adds	r3, #7
 80206ac:	f023 0307 	bic.w	r3, r3, #7
 80206b0:	3308      	adds	r3, #8
 80206b2:	9303      	str	r3, [sp, #12]
 80206b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206b6:	443b      	add	r3, r7
 80206b8:	9309      	str	r3, [sp, #36]	; 0x24
 80206ba:	e767      	b.n	802058c <_vfiprintf_r+0x94>
 80206bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80206c0:	460c      	mov	r4, r1
 80206c2:	2001      	movs	r0, #1
 80206c4:	e7a5      	b.n	8020612 <_vfiprintf_r+0x11a>
 80206c6:	2300      	movs	r3, #0
 80206c8:	3401      	adds	r4, #1
 80206ca:	9305      	str	r3, [sp, #20]
 80206cc:	4619      	mov	r1, r3
 80206ce:	f04f 0c0a 	mov.w	ip, #10
 80206d2:	4620      	mov	r0, r4
 80206d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80206d8:	3a30      	subs	r2, #48	; 0x30
 80206da:	2a09      	cmp	r2, #9
 80206dc:	d903      	bls.n	80206e6 <_vfiprintf_r+0x1ee>
 80206de:	2b00      	cmp	r3, #0
 80206e0:	d0c5      	beq.n	802066e <_vfiprintf_r+0x176>
 80206e2:	9105      	str	r1, [sp, #20]
 80206e4:	e7c3      	b.n	802066e <_vfiprintf_r+0x176>
 80206e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80206ea:	4604      	mov	r4, r0
 80206ec:	2301      	movs	r3, #1
 80206ee:	e7f0      	b.n	80206d2 <_vfiprintf_r+0x1da>
 80206f0:	ab03      	add	r3, sp, #12
 80206f2:	9300      	str	r3, [sp, #0]
 80206f4:	462a      	mov	r2, r5
 80206f6:	4b16      	ldr	r3, [pc, #88]	; (8020750 <_vfiprintf_r+0x258>)
 80206f8:	a904      	add	r1, sp, #16
 80206fa:	4630      	mov	r0, r6
 80206fc:	f3af 8000 	nop.w
 8020700:	4607      	mov	r7, r0
 8020702:	1c78      	adds	r0, r7, #1
 8020704:	d1d6      	bne.n	80206b4 <_vfiprintf_r+0x1bc>
 8020706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020708:	07d9      	lsls	r1, r3, #31
 802070a:	d405      	bmi.n	8020718 <_vfiprintf_r+0x220>
 802070c:	89ab      	ldrh	r3, [r5, #12]
 802070e:	059a      	lsls	r2, r3, #22
 8020710:	d402      	bmi.n	8020718 <_vfiprintf_r+0x220>
 8020712:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020714:	f7fe ffe0 	bl	801f6d8 <__retarget_lock_release_recursive>
 8020718:	89ab      	ldrh	r3, [r5, #12]
 802071a:	065b      	lsls	r3, r3, #25
 802071c:	f53f af12 	bmi.w	8020544 <_vfiprintf_r+0x4c>
 8020720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020722:	e711      	b.n	8020548 <_vfiprintf_r+0x50>
 8020724:	ab03      	add	r3, sp, #12
 8020726:	9300      	str	r3, [sp, #0]
 8020728:	462a      	mov	r2, r5
 802072a:	4b09      	ldr	r3, [pc, #36]	; (8020750 <_vfiprintf_r+0x258>)
 802072c:	a904      	add	r1, sp, #16
 802072e:	4630      	mov	r0, r6
 8020730:	f000 f880 	bl	8020834 <_printf_i>
 8020734:	e7e4      	b.n	8020700 <_vfiprintf_r+0x208>
 8020736:	bf00      	nop
 8020738:	080257ec 	.word	0x080257ec
 802073c:	0802580c 	.word	0x0802580c
 8020740:	080257cc 	.word	0x080257cc
 8020744:	080258e2 	.word	0x080258e2
 8020748:	080258ec 	.word	0x080258ec
 802074c:	00000000 	.word	0x00000000
 8020750:	080204d3 	.word	0x080204d3
 8020754:	080258e8 	.word	0x080258e8

08020758 <_printf_common>:
 8020758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802075c:	4616      	mov	r6, r2
 802075e:	4699      	mov	r9, r3
 8020760:	688a      	ldr	r2, [r1, #8]
 8020762:	690b      	ldr	r3, [r1, #16]
 8020764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020768:	4293      	cmp	r3, r2
 802076a:	bfb8      	it	lt
 802076c:	4613      	movlt	r3, r2
 802076e:	6033      	str	r3, [r6, #0]
 8020770:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020774:	4607      	mov	r7, r0
 8020776:	460c      	mov	r4, r1
 8020778:	b10a      	cbz	r2, 802077e <_printf_common+0x26>
 802077a:	3301      	adds	r3, #1
 802077c:	6033      	str	r3, [r6, #0]
 802077e:	6823      	ldr	r3, [r4, #0]
 8020780:	0699      	lsls	r1, r3, #26
 8020782:	bf42      	ittt	mi
 8020784:	6833      	ldrmi	r3, [r6, #0]
 8020786:	3302      	addmi	r3, #2
 8020788:	6033      	strmi	r3, [r6, #0]
 802078a:	6825      	ldr	r5, [r4, #0]
 802078c:	f015 0506 	ands.w	r5, r5, #6
 8020790:	d106      	bne.n	80207a0 <_printf_common+0x48>
 8020792:	f104 0a19 	add.w	sl, r4, #25
 8020796:	68e3      	ldr	r3, [r4, #12]
 8020798:	6832      	ldr	r2, [r6, #0]
 802079a:	1a9b      	subs	r3, r3, r2
 802079c:	42ab      	cmp	r3, r5
 802079e:	dc26      	bgt.n	80207ee <_printf_common+0x96>
 80207a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80207a4:	1e13      	subs	r3, r2, #0
 80207a6:	6822      	ldr	r2, [r4, #0]
 80207a8:	bf18      	it	ne
 80207aa:	2301      	movne	r3, #1
 80207ac:	0692      	lsls	r2, r2, #26
 80207ae:	d42b      	bmi.n	8020808 <_printf_common+0xb0>
 80207b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80207b4:	4649      	mov	r1, r9
 80207b6:	4638      	mov	r0, r7
 80207b8:	47c0      	blx	r8
 80207ba:	3001      	adds	r0, #1
 80207bc:	d01e      	beq.n	80207fc <_printf_common+0xa4>
 80207be:	6823      	ldr	r3, [r4, #0]
 80207c0:	68e5      	ldr	r5, [r4, #12]
 80207c2:	6832      	ldr	r2, [r6, #0]
 80207c4:	f003 0306 	and.w	r3, r3, #6
 80207c8:	2b04      	cmp	r3, #4
 80207ca:	bf08      	it	eq
 80207cc:	1aad      	subeq	r5, r5, r2
 80207ce:	68a3      	ldr	r3, [r4, #8]
 80207d0:	6922      	ldr	r2, [r4, #16]
 80207d2:	bf0c      	ite	eq
 80207d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80207d8:	2500      	movne	r5, #0
 80207da:	4293      	cmp	r3, r2
 80207dc:	bfc4      	itt	gt
 80207de:	1a9b      	subgt	r3, r3, r2
 80207e0:	18ed      	addgt	r5, r5, r3
 80207e2:	2600      	movs	r6, #0
 80207e4:	341a      	adds	r4, #26
 80207e6:	42b5      	cmp	r5, r6
 80207e8:	d11a      	bne.n	8020820 <_printf_common+0xc8>
 80207ea:	2000      	movs	r0, #0
 80207ec:	e008      	b.n	8020800 <_printf_common+0xa8>
 80207ee:	2301      	movs	r3, #1
 80207f0:	4652      	mov	r2, sl
 80207f2:	4649      	mov	r1, r9
 80207f4:	4638      	mov	r0, r7
 80207f6:	47c0      	blx	r8
 80207f8:	3001      	adds	r0, #1
 80207fa:	d103      	bne.n	8020804 <_printf_common+0xac>
 80207fc:	f04f 30ff 	mov.w	r0, #4294967295
 8020800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020804:	3501      	adds	r5, #1
 8020806:	e7c6      	b.n	8020796 <_printf_common+0x3e>
 8020808:	18e1      	adds	r1, r4, r3
 802080a:	1c5a      	adds	r2, r3, #1
 802080c:	2030      	movs	r0, #48	; 0x30
 802080e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020812:	4422      	add	r2, r4
 8020814:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020818:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802081c:	3302      	adds	r3, #2
 802081e:	e7c7      	b.n	80207b0 <_printf_common+0x58>
 8020820:	2301      	movs	r3, #1
 8020822:	4622      	mov	r2, r4
 8020824:	4649      	mov	r1, r9
 8020826:	4638      	mov	r0, r7
 8020828:	47c0      	blx	r8
 802082a:	3001      	adds	r0, #1
 802082c:	d0e6      	beq.n	80207fc <_printf_common+0xa4>
 802082e:	3601      	adds	r6, #1
 8020830:	e7d9      	b.n	80207e6 <_printf_common+0x8e>
	...

08020834 <_printf_i>:
 8020834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020838:	460c      	mov	r4, r1
 802083a:	4691      	mov	r9, r2
 802083c:	7e27      	ldrb	r7, [r4, #24]
 802083e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020840:	2f78      	cmp	r7, #120	; 0x78
 8020842:	4680      	mov	r8, r0
 8020844:	469a      	mov	sl, r3
 8020846:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802084a:	d807      	bhi.n	802085c <_printf_i+0x28>
 802084c:	2f62      	cmp	r7, #98	; 0x62
 802084e:	d80a      	bhi.n	8020866 <_printf_i+0x32>
 8020850:	2f00      	cmp	r7, #0
 8020852:	f000 80d8 	beq.w	8020a06 <_printf_i+0x1d2>
 8020856:	2f58      	cmp	r7, #88	; 0x58
 8020858:	f000 80a3 	beq.w	80209a2 <_printf_i+0x16e>
 802085c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020860:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020864:	e03a      	b.n	80208dc <_printf_i+0xa8>
 8020866:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802086a:	2b15      	cmp	r3, #21
 802086c:	d8f6      	bhi.n	802085c <_printf_i+0x28>
 802086e:	a001      	add	r0, pc, #4	; (adr r0, 8020874 <_printf_i+0x40>)
 8020870:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8020874:	080208cd 	.word	0x080208cd
 8020878:	080208e1 	.word	0x080208e1
 802087c:	0802085d 	.word	0x0802085d
 8020880:	0802085d 	.word	0x0802085d
 8020884:	0802085d 	.word	0x0802085d
 8020888:	0802085d 	.word	0x0802085d
 802088c:	080208e1 	.word	0x080208e1
 8020890:	0802085d 	.word	0x0802085d
 8020894:	0802085d 	.word	0x0802085d
 8020898:	0802085d 	.word	0x0802085d
 802089c:	0802085d 	.word	0x0802085d
 80208a0:	080209ed 	.word	0x080209ed
 80208a4:	08020911 	.word	0x08020911
 80208a8:	080209cf 	.word	0x080209cf
 80208ac:	0802085d 	.word	0x0802085d
 80208b0:	0802085d 	.word	0x0802085d
 80208b4:	08020a0f 	.word	0x08020a0f
 80208b8:	0802085d 	.word	0x0802085d
 80208bc:	08020911 	.word	0x08020911
 80208c0:	0802085d 	.word	0x0802085d
 80208c4:	0802085d 	.word	0x0802085d
 80208c8:	080209d7 	.word	0x080209d7
 80208cc:	680b      	ldr	r3, [r1, #0]
 80208ce:	1d1a      	adds	r2, r3, #4
 80208d0:	681b      	ldr	r3, [r3, #0]
 80208d2:	600a      	str	r2, [r1, #0]
 80208d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80208d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80208dc:	2301      	movs	r3, #1
 80208de:	e0a3      	b.n	8020a28 <_printf_i+0x1f4>
 80208e0:	6825      	ldr	r5, [r4, #0]
 80208e2:	6808      	ldr	r0, [r1, #0]
 80208e4:	062e      	lsls	r6, r5, #24
 80208e6:	f100 0304 	add.w	r3, r0, #4
 80208ea:	d50a      	bpl.n	8020902 <_printf_i+0xce>
 80208ec:	6805      	ldr	r5, [r0, #0]
 80208ee:	600b      	str	r3, [r1, #0]
 80208f0:	2d00      	cmp	r5, #0
 80208f2:	da03      	bge.n	80208fc <_printf_i+0xc8>
 80208f4:	232d      	movs	r3, #45	; 0x2d
 80208f6:	426d      	negs	r5, r5
 80208f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80208fc:	485e      	ldr	r0, [pc, #376]	; (8020a78 <_printf_i+0x244>)
 80208fe:	230a      	movs	r3, #10
 8020900:	e019      	b.n	8020936 <_printf_i+0x102>
 8020902:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020906:	6805      	ldr	r5, [r0, #0]
 8020908:	600b      	str	r3, [r1, #0]
 802090a:	bf18      	it	ne
 802090c:	b22d      	sxthne	r5, r5
 802090e:	e7ef      	b.n	80208f0 <_printf_i+0xbc>
 8020910:	680b      	ldr	r3, [r1, #0]
 8020912:	6825      	ldr	r5, [r4, #0]
 8020914:	1d18      	adds	r0, r3, #4
 8020916:	6008      	str	r0, [r1, #0]
 8020918:	0628      	lsls	r0, r5, #24
 802091a:	d501      	bpl.n	8020920 <_printf_i+0xec>
 802091c:	681d      	ldr	r5, [r3, #0]
 802091e:	e002      	b.n	8020926 <_printf_i+0xf2>
 8020920:	0669      	lsls	r1, r5, #25
 8020922:	d5fb      	bpl.n	802091c <_printf_i+0xe8>
 8020924:	881d      	ldrh	r5, [r3, #0]
 8020926:	4854      	ldr	r0, [pc, #336]	; (8020a78 <_printf_i+0x244>)
 8020928:	2f6f      	cmp	r7, #111	; 0x6f
 802092a:	bf0c      	ite	eq
 802092c:	2308      	moveq	r3, #8
 802092e:	230a      	movne	r3, #10
 8020930:	2100      	movs	r1, #0
 8020932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020936:	6866      	ldr	r6, [r4, #4]
 8020938:	60a6      	str	r6, [r4, #8]
 802093a:	2e00      	cmp	r6, #0
 802093c:	bfa2      	ittt	ge
 802093e:	6821      	ldrge	r1, [r4, #0]
 8020940:	f021 0104 	bicge.w	r1, r1, #4
 8020944:	6021      	strge	r1, [r4, #0]
 8020946:	b90d      	cbnz	r5, 802094c <_printf_i+0x118>
 8020948:	2e00      	cmp	r6, #0
 802094a:	d04d      	beq.n	80209e8 <_printf_i+0x1b4>
 802094c:	4616      	mov	r6, r2
 802094e:	fbb5 f1f3 	udiv	r1, r5, r3
 8020952:	fb03 5711 	mls	r7, r3, r1, r5
 8020956:	5dc7      	ldrb	r7, [r0, r7]
 8020958:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802095c:	462f      	mov	r7, r5
 802095e:	42bb      	cmp	r3, r7
 8020960:	460d      	mov	r5, r1
 8020962:	d9f4      	bls.n	802094e <_printf_i+0x11a>
 8020964:	2b08      	cmp	r3, #8
 8020966:	d10b      	bne.n	8020980 <_printf_i+0x14c>
 8020968:	6823      	ldr	r3, [r4, #0]
 802096a:	07df      	lsls	r7, r3, #31
 802096c:	d508      	bpl.n	8020980 <_printf_i+0x14c>
 802096e:	6923      	ldr	r3, [r4, #16]
 8020970:	6861      	ldr	r1, [r4, #4]
 8020972:	4299      	cmp	r1, r3
 8020974:	bfde      	ittt	le
 8020976:	2330      	movle	r3, #48	; 0x30
 8020978:	f806 3c01 	strble.w	r3, [r6, #-1]
 802097c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020980:	1b92      	subs	r2, r2, r6
 8020982:	6122      	str	r2, [r4, #16]
 8020984:	f8cd a000 	str.w	sl, [sp]
 8020988:	464b      	mov	r3, r9
 802098a:	aa03      	add	r2, sp, #12
 802098c:	4621      	mov	r1, r4
 802098e:	4640      	mov	r0, r8
 8020990:	f7ff fee2 	bl	8020758 <_printf_common>
 8020994:	3001      	adds	r0, #1
 8020996:	d14c      	bne.n	8020a32 <_printf_i+0x1fe>
 8020998:	f04f 30ff 	mov.w	r0, #4294967295
 802099c:	b004      	add	sp, #16
 802099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80209a2:	4835      	ldr	r0, [pc, #212]	; (8020a78 <_printf_i+0x244>)
 80209a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80209a8:	6823      	ldr	r3, [r4, #0]
 80209aa:	680e      	ldr	r6, [r1, #0]
 80209ac:	061f      	lsls	r7, r3, #24
 80209ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80209b2:	600e      	str	r6, [r1, #0]
 80209b4:	d514      	bpl.n	80209e0 <_printf_i+0x1ac>
 80209b6:	07d9      	lsls	r1, r3, #31
 80209b8:	bf44      	itt	mi
 80209ba:	f043 0320 	orrmi.w	r3, r3, #32
 80209be:	6023      	strmi	r3, [r4, #0]
 80209c0:	b91d      	cbnz	r5, 80209ca <_printf_i+0x196>
 80209c2:	6823      	ldr	r3, [r4, #0]
 80209c4:	f023 0320 	bic.w	r3, r3, #32
 80209c8:	6023      	str	r3, [r4, #0]
 80209ca:	2310      	movs	r3, #16
 80209cc:	e7b0      	b.n	8020930 <_printf_i+0xfc>
 80209ce:	6823      	ldr	r3, [r4, #0]
 80209d0:	f043 0320 	orr.w	r3, r3, #32
 80209d4:	6023      	str	r3, [r4, #0]
 80209d6:	2378      	movs	r3, #120	; 0x78
 80209d8:	4828      	ldr	r0, [pc, #160]	; (8020a7c <_printf_i+0x248>)
 80209da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80209de:	e7e3      	b.n	80209a8 <_printf_i+0x174>
 80209e0:	065e      	lsls	r6, r3, #25
 80209e2:	bf48      	it	mi
 80209e4:	b2ad      	uxthmi	r5, r5
 80209e6:	e7e6      	b.n	80209b6 <_printf_i+0x182>
 80209e8:	4616      	mov	r6, r2
 80209ea:	e7bb      	b.n	8020964 <_printf_i+0x130>
 80209ec:	680b      	ldr	r3, [r1, #0]
 80209ee:	6826      	ldr	r6, [r4, #0]
 80209f0:	6960      	ldr	r0, [r4, #20]
 80209f2:	1d1d      	adds	r5, r3, #4
 80209f4:	600d      	str	r5, [r1, #0]
 80209f6:	0635      	lsls	r5, r6, #24
 80209f8:	681b      	ldr	r3, [r3, #0]
 80209fa:	d501      	bpl.n	8020a00 <_printf_i+0x1cc>
 80209fc:	6018      	str	r0, [r3, #0]
 80209fe:	e002      	b.n	8020a06 <_printf_i+0x1d2>
 8020a00:	0671      	lsls	r1, r6, #25
 8020a02:	d5fb      	bpl.n	80209fc <_printf_i+0x1c8>
 8020a04:	8018      	strh	r0, [r3, #0]
 8020a06:	2300      	movs	r3, #0
 8020a08:	6123      	str	r3, [r4, #16]
 8020a0a:	4616      	mov	r6, r2
 8020a0c:	e7ba      	b.n	8020984 <_printf_i+0x150>
 8020a0e:	680b      	ldr	r3, [r1, #0]
 8020a10:	1d1a      	adds	r2, r3, #4
 8020a12:	600a      	str	r2, [r1, #0]
 8020a14:	681e      	ldr	r6, [r3, #0]
 8020a16:	6862      	ldr	r2, [r4, #4]
 8020a18:	2100      	movs	r1, #0
 8020a1a:	4630      	mov	r0, r6
 8020a1c:	f7df fbe0 	bl	80001e0 <memchr>
 8020a20:	b108      	cbz	r0, 8020a26 <_printf_i+0x1f2>
 8020a22:	1b80      	subs	r0, r0, r6
 8020a24:	6060      	str	r0, [r4, #4]
 8020a26:	6863      	ldr	r3, [r4, #4]
 8020a28:	6123      	str	r3, [r4, #16]
 8020a2a:	2300      	movs	r3, #0
 8020a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020a30:	e7a8      	b.n	8020984 <_printf_i+0x150>
 8020a32:	6923      	ldr	r3, [r4, #16]
 8020a34:	4632      	mov	r2, r6
 8020a36:	4649      	mov	r1, r9
 8020a38:	4640      	mov	r0, r8
 8020a3a:	47d0      	blx	sl
 8020a3c:	3001      	adds	r0, #1
 8020a3e:	d0ab      	beq.n	8020998 <_printf_i+0x164>
 8020a40:	6823      	ldr	r3, [r4, #0]
 8020a42:	079b      	lsls	r3, r3, #30
 8020a44:	d413      	bmi.n	8020a6e <_printf_i+0x23a>
 8020a46:	68e0      	ldr	r0, [r4, #12]
 8020a48:	9b03      	ldr	r3, [sp, #12]
 8020a4a:	4298      	cmp	r0, r3
 8020a4c:	bfb8      	it	lt
 8020a4e:	4618      	movlt	r0, r3
 8020a50:	e7a4      	b.n	802099c <_printf_i+0x168>
 8020a52:	2301      	movs	r3, #1
 8020a54:	4632      	mov	r2, r6
 8020a56:	4649      	mov	r1, r9
 8020a58:	4640      	mov	r0, r8
 8020a5a:	47d0      	blx	sl
 8020a5c:	3001      	adds	r0, #1
 8020a5e:	d09b      	beq.n	8020998 <_printf_i+0x164>
 8020a60:	3501      	adds	r5, #1
 8020a62:	68e3      	ldr	r3, [r4, #12]
 8020a64:	9903      	ldr	r1, [sp, #12]
 8020a66:	1a5b      	subs	r3, r3, r1
 8020a68:	42ab      	cmp	r3, r5
 8020a6a:	dcf2      	bgt.n	8020a52 <_printf_i+0x21e>
 8020a6c:	e7eb      	b.n	8020a46 <_printf_i+0x212>
 8020a6e:	2500      	movs	r5, #0
 8020a70:	f104 0619 	add.w	r6, r4, #25
 8020a74:	e7f5      	b.n	8020a62 <_printf_i+0x22e>
 8020a76:	bf00      	nop
 8020a78:	080258f3 	.word	0x080258f3
 8020a7c:	08025904 	.word	0x08025904

08020a80 <_read_r>:
 8020a80:	b538      	push	{r3, r4, r5, lr}
 8020a82:	4d07      	ldr	r5, [pc, #28]	; (8020aa0 <_read_r+0x20>)
 8020a84:	4604      	mov	r4, r0
 8020a86:	4608      	mov	r0, r1
 8020a88:	4611      	mov	r1, r2
 8020a8a:	2200      	movs	r2, #0
 8020a8c:	602a      	str	r2, [r5, #0]
 8020a8e:	461a      	mov	r2, r3
 8020a90:	f7e0 fe7c 	bl	800178c <_read>
 8020a94:	1c43      	adds	r3, r0, #1
 8020a96:	d102      	bne.n	8020a9e <_read_r+0x1e>
 8020a98:	682b      	ldr	r3, [r5, #0]
 8020a9a:	b103      	cbz	r3, 8020a9e <_read_r+0x1e>
 8020a9c:	6023      	str	r3, [r4, #0]
 8020a9e:	bd38      	pop	{r3, r4, r5, pc}
 8020aa0:	20016be0 	.word	0x20016be0

08020aa4 <abort>:
 8020aa4:	b508      	push	{r3, lr}
 8020aa6:	2006      	movs	r0, #6
 8020aa8:	f000 f874 	bl	8020b94 <raise>
 8020aac:	2001      	movs	r0, #1
 8020aae:	f7e0 fe63 	bl	8001778 <_exit>
	...

08020ab4 <_fstat_r>:
 8020ab4:	b538      	push	{r3, r4, r5, lr}
 8020ab6:	4d07      	ldr	r5, [pc, #28]	; (8020ad4 <_fstat_r+0x20>)
 8020ab8:	2300      	movs	r3, #0
 8020aba:	4604      	mov	r4, r0
 8020abc:	4608      	mov	r0, r1
 8020abe:	4611      	mov	r1, r2
 8020ac0:	602b      	str	r3, [r5, #0]
 8020ac2:	f7e0 fe8c 	bl	80017de <_fstat>
 8020ac6:	1c43      	adds	r3, r0, #1
 8020ac8:	d102      	bne.n	8020ad0 <_fstat_r+0x1c>
 8020aca:	682b      	ldr	r3, [r5, #0]
 8020acc:	b103      	cbz	r3, 8020ad0 <_fstat_r+0x1c>
 8020ace:	6023      	str	r3, [r4, #0]
 8020ad0:	bd38      	pop	{r3, r4, r5, pc}
 8020ad2:	bf00      	nop
 8020ad4:	20016be0 	.word	0x20016be0

08020ad8 <_isatty_r>:
 8020ad8:	b538      	push	{r3, r4, r5, lr}
 8020ada:	4d06      	ldr	r5, [pc, #24]	; (8020af4 <_isatty_r+0x1c>)
 8020adc:	2300      	movs	r3, #0
 8020ade:	4604      	mov	r4, r0
 8020ae0:	4608      	mov	r0, r1
 8020ae2:	602b      	str	r3, [r5, #0]
 8020ae4:	f7e0 fe8b 	bl	80017fe <_isatty>
 8020ae8:	1c43      	adds	r3, r0, #1
 8020aea:	d102      	bne.n	8020af2 <_isatty_r+0x1a>
 8020aec:	682b      	ldr	r3, [r5, #0]
 8020aee:	b103      	cbz	r3, 8020af2 <_isatty_r+0x1a>
 8020af0:	6023      	str	r3, [r4, #0]
 8020af2:	bd38      	pop	{r3, r4, r5, pc}
 8020af4:	20016be0 	.word	0x20016be0

08020af8 <_realloc_r>:
 8020af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020afa:	4607      	mov	r7, r0
 8020afc:	4614      	mov	r4, r2
 8020afe:	460e      	mov	r6, r1
 8020b00:	b921      	cbnz	r1, 8020b0c <_realloc_r+0x14>
 8020b02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020b06:	4611      	mov	r1, r2
 8020b08:	f7fe be96 	b.w	801f838 <_malloc_r>
 8020b0c:	b922      	cbnz	r2, 8020b18 <_realloc_r+0x20>
 8020b0e:	f7fe fe43 	bl	801f798 <_free_r>
 8020b12:	4625      	mov	r5, r4
 8020b14:	4628      	mov	r0, r5
 8020b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b18:	f000 f858 	bl	8020bcc <_malloc_usable_size_r>
 8020b1c:	42a0      	cmp	r0, r4
 8020b1e:	d20f      	bcs.n	8020b40 <_realloc_r+0x48>
 8020b20:	4621      	mov	r1, r4
 8020b22:	4638      	mov	r0, r7
 8020b24:	f7fe fe88 	bl	801f838 <_malloc_r>
 8020b28:	4605      	mov	r5, r0
 8020b2a:	2800      	cmp	r0, #0
 8020b2c:	d0f2      	beq.n	8020b14 <_realloc_r+0x1c>
 8020b2e:	4631      	mov	r1, r6
 8020b30:	4622      	mov	r2, r4
 8020b32:	f7fe fdf1 	bl	801f718 <memcpy>
 8020b36:	4631      	mov	r1, r6
 8020b38:	4638      	mov	r0, r7
 8020b3a:	f7fe fe2d 	bl	801f798 <_free_r>
 8020b3e:	e7e9      	b.n	8020b14 <_realloc_r+0x1c>
 8020b40:	4635      	mov	r5, r6
 8020b42:	e7e7      	b.n	8020b14 <_realloc_r+0x1c>

08020b44 <_raise_r>:
 8020b44:	291f      	cmp	r1, #31
 8020b46:	b538      	push	{r3, r4, r5, lr}
 8020b48:	4604      	mov	r4, r0
 8020b4a:	460d      	mov	r5, r1
 8020b4c:	d904      	bls.n	8020b58 <_raise_r+0x14>
 8020b4e:	2316      	movs	r3, #22
 8020b50:	6003      	str	r3, [r0, #0]
 8020b52:	f04f 30ff 	mov.w	r0, #4294967295
 8020b56:	bd38      	pop	{r3, r4, r5, pc}
 8020b58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020b5a:	b112      	cbz	r2, 8020b62 <_raise_r+0x1e>
 8020b5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020b60:	b94b      	cbnz	r3, 8020b76 <_raise_r+0x32>
 8020b62:	4620      	mov	r0, r4
 8020b64:	f000 f830 	bl	8020bc8 <_getpid_r>
 8020b68:	462a      	mov	r2, r5
 8020b6a:	4601      	mov	r1, r0
 8020b6c:	4620      	mov	r0, r4
 8020b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020b72:	f000 b817 	b.w	8020ba4 <_kill_r>
 8020b76:	2b01      	cmp	r3, #1
 8020b78:	d00a      	beq.n	8020b90 <_raise_r+0x4c>
 8020b7a:	1c59      	adds	r1, r3, #1
 8020b7c:	d103      	bne.n	8020b86 <_raise_r+0x42>
 8020b7e:	2316      	movs	r3, #22
 8020b80:	6003      	str	r3, [r0, #0]
 8020b82:	2001      	movs	r0, #1
 8020b84:	e7e7      	b.n	8020b56 <_raise_r+0x12>
 8020b86:	2400      	movs	r4, #0
 8020b88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020b8c:	4628      	mov	r0, r5
 8020b8e:	4798      	blx	r3
 8020b90:	2000      	movs	r0, #0
 8020b92:	e7e0      	b.n	8020b56 <_raise_r+0x12>

08020b94 <raise>:
 8020b94:	4b02      	ldr	r3, [pc, #8]	; (8020ba0 <raise+0xc>)
 8020b96:	4601      	mov	r1, r0
 8020b98:	6818      	ldr	r0, [r3, #0]
 8020b9a:	f7ff bfd3 	b.w	8020b44 <_raise_r>
 8020b9e:	bf00      	nop
 8020ba0:	2000034c 	.word	0x2000034c

08020ba4 <_kill_r>:
 8020ba4:	b538      	push	{r3, r4, r5, lr}
 8020ba6:	4d07      	ldr	r5, [pc, #28]	; (8020bc4 <_kill_r+0x20>)
 8020ba8:	2300      	movs	r3, #0
 8020baa:	4604      	mov	r4, r0
 8020bac:	4608      	mov	r0, r1
 8020bae:	4611      	mov	r1, r2
 8020bb0:	602b      	str	r3, [r5, #0]
 8020bb2:	f7e0 fdcf 	bl	8001754 <_kill>
 8020bb6:	1c43      	adds	r3, r0, #1
 8020bb8:	d102      	bne.n	8020bc0 <_kill_r+0x1c>
 8020bba:	682b      	ldr	r3, [r5, #0]
 8020bbc:	b103      	cbz	r3, 8020bc0 <_kill_r+0x1c>
 8020bbe:	6023      	str	r3, [r4, #0]
 8020bc0:	bd38      	pop	{r3, r4, r5, pc}
 8020bc2:	bf00      	nop
 8020bc4:	20016be0 	.word	0x20016be0

08020bc8 <_getpid_r>:
 8020bc8:	f7e0 bdbc 	b.w	8001744 <_getpid>

08020bcc <_malloc_usable_size_r>:
 8020bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020bd0:	1f18      	subs	r0, r3, #4
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	bfbc      	itt	lt
 8020bd6:	580b      	ldrlt	r3, [r1, r0]
 8020bd8:	18c0      	addlt	r0, r0, r3
 8020bda:	4770      	bx	lr

08020bdc <_gettimeofday>:
 8020bdc:	4b02      	ldr	r3, [pc, #8]	; (8020be8 <_gettimeofday+0xc>)
 8020bde:	2258      	movs	r2, #88	; 0x58
 8020be0:	601a      	str	r2, [r3, #0]
 8020be2:	f04f 30ff 	mov.w	r0, #4294967295
 8020be6:	4770      	bx	lr
 8020be8:	20016be0 	.word	0x20016be0

08020bec <_init>:
 8020bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bee:	bf00      	nop
 8020bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020bf2:	bc08      	pop	{r3}
 8020bf4:	469e      	mov	lr, r3
 8020bf6:	4770      	bx	lr

08020bf8 <_fini>:
 8020bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bfa:	bf00      	nop
 8020bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020bfe:	bc08      	pop	{r3}
 8020c00:	469e      	mov	lr, r3
 8020c02:	4770      	bx	lr
